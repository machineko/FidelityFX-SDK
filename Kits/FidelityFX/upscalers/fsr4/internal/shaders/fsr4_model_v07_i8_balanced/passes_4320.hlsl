// Copyright(C) 2024-2025 Advanced Micro Devices, Inc. All rights reserved.
// Autogenerated 2025-02-26 12:35:37 using ML2Code from "models\2024\October\Release7\Balanced\fsr4_model_v07_i8.onnx". Do not edit.
// Compile with dxc.exe -no-warnings -O3 -enable-16bit-types -HV 2021 -T cs_6_6 -I . -I hlsl -E fsr4_model_v07_i8_pass0 "generated\hlsl\fsr4_model_v07_i8.hlsl"

// Scratch memory size needed: 331776000 (316.4MB)

// This file was generated for navi48 SKU
#define WMMA_ENABLED  0
#define FP8_ENABLED  1
#define DOT4_ENABLED  1


ByteAddressBuffer buffer_NHWC_inputs : register(t0);
RWByteAddressBuffer buffer_fused_quantized_NHWC_output : register(u0);
ByteAddressBuffer InitializerBuffer : register(t1);
RWByteAddressBuffer ScratchBuffer : register(u1);

#ifdef MLSR_PASS_0
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Conv2D_k2s2b.hlsli"

static const uint embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight_dwords[256] = {
    // -0.0894, 0.03308, -0.0265, -0.1022, -0.0827, 0.04953, -0.0802, 0.0, 0.1515, 0.1754, 0.1451, 0.0462, -0.3318, 0.1954, -0.0876, 0.0
    0x283cadb9, 0xae8aa6c9, 0x2a57ad4b, 0xad22, 0x319d30d9, 0x29ea30a5, 0x3241b54f, 0xad9b,
    // -0.2355, 0.111, 0.0262, -0.2368, -0.0355, -0.3896, -0.03174, 0.0, -0.10175, 0.0899, 0.2615, -0.1781, -0.0327, 0.08655, -0.0434, 0.0
    0x2f1bb389, 0xb39426b5, 0xb63ca88b, 0xa810, 0x2dc1ae83, 0xb1b3342f, 0x2d8aa830, 0xa98e,
    // 0.02881, -0.1323, -0.662, -0.2351, 0.1006, 0.0763, 0.05048, 0.0, 0.1655, -0.1742, -0.6807, -0.0955, 0.12, -0.1764, -0.1423, 0.0
    0xb03c2760, 0xb386b94c, 0x2ce22e70, 0x2a76, 0xb193314c, 0xae1db972, 0xb1a52fae, 0xb08e,
    // 0.2537, -0.2817, -0.725, 0.05222, -0.0425, 0.06192, -0.0261, 0.0, 0.3704, -0.2068, -0.769, -0.0459, 0.0572, 0.0305, -0.0851, 0.0
    0xb482340f, 0x2aafb9cd, 0x2beda971, 0xa6ae, 0xb29e35ed, 0xa9e0ba27, 0x27cf2b52, 0xad72,
    // -0.1985, 0.09125, -0.832, 0.0262, -0.0788, -0.06805, 0.1176, 0.0, -0.12274, 0.11444, -0.7715, -0.02756, -0.01537, -0.00946, 0.1542, 0.0
    0x2dd7b25a, 0x26b5baa8, 0xac5bad0b, 0x2f87, 0x2f53afdb, 0xa70eba2c, 0xa0d8a3df, 0x30ef,
    // -0.167, 0.108, -0.864, -0.1243, 0.03287, -0.014366, 0.00821, 0.0, -0.1656, 0.0565, -0.8774, 0.03836, 0.00822, -0.0931, -0.03842, 0.0
    0x2ee9b158, 0xaff5bae9, 0xa35b2835, 0x2034, 0x2b3bb14d, 0x28e9bb05, 0xadf52035, 0xa8eb,
    // -0.02553, -0.01422, -0.5464, 0.04153, -0.0411, -0.02615, 0.012726, 0.0, -0.2778, -0.301, -0.5986, 0.1372, -0.02245, -0.01036, -0.1765, 0.0
    0xa348a689, 0x2951b85f, 0xa6b2a943, 0x2284, 0xb4d1b472, 0x3064b8ca, 0xa14ea5bf, 0xb1a6,
    // 0.366, 0.4536, -0.4097, -0.1144, -0.05844, 0.1, 0.247, 0.0, -0.2452, 0.03143, -0.3662, -0.083, -0.04608, 0.08026, 0.01604, 0.0
    0x374235db, 0xaf52b68e, 0x2e66ab7b, 0x33e7, 0x2806b3d9, 0xad50b5dc, 0x2d23a9e6, 0x241b,
    // 0.6855, -0.0812, -0.0809, -0.2278, 0.01886, 0.0804, 0.06024, 0.0, 0.3555, -0.12274, -0.1698, -0.272, 0.174, -0.2256, 0.05438, 0.0
    0xad32397c, 0xb34aad2d, 0x2d2524d4, 0x2bb6, 0xafdb35b0, 0xb45ab16f, 0xb3383191, 0x2af6,
    // 0.1804, -0.02812, -0.294, 0.1034, -0.0869, 0.1962, -0.153, 0.0, -0.5786, -0.1619, -0.185, 0.1455, 0.0788, -0.0818, -0.1884, 0.0
    0xa73331c6, 0x2e9eb4b4, 0x3247ad90, 0xb0e5, 0xb12eb8a1, 0x30a8b1ec, 0xad3c2d0b, 0xb207,
    // -0.2335, 0.07764, -0.0863, 0.1372, -0.06665, -0.1658, 0.1802, 0.0, 0.2698, 0.1713, -0.448, 0.07025, -0.154, -0.072, 0.1876, 0.0
    0x2cf8b379, 0x3064ad86, 0xb14eac44, 0x31c4, 0x317b3451, 0x2c7fb72b, 0xac9cb0ee, 0x3201,
    // 0.3572, -0.026, -0.2471, -0.06854, 0.1571, -0.1403, 0.064, 0.0, 0.2751, 0.01376, -0.2651, -0.1694, 0.00878, -0.0007663, 0.0824, 0.0
    0xa6a835b7, 0xac63b3e8, 0xb07d3107, 0x2c19, 0x230c3467, 0xb16cb43e, 0x9247207f, 0x2d46,
    // -0.09375, 0.0638, -0.0665, 0.003744, -0.02377, 0.009415, -0.04068, 0.0, -0.2622, 0.4497, -0.06027, -0.00514, -0.00555, 0.1135, -0.02484, 0.0
    0x2c15ae00, 0x1babac42, 0x20d2a616, 0xa935, 0x3732b432, 0x9d43abb7, 0x2f449daf, 0xa65c,
    // 0.269, -0.3213, -0.1987, -0.0358, -0.085, -0.03137, 0.11505, 0.0, -0.1327, 0.04025, -0.09106, 0.09894, -0.06964, -0.02907, 0.0432, 0.0
    0xb524344e, 0xa895b25c, 0xa804ad71, 0x2f5d, 0x2927b03f, 0x2e55add4, 0xa771ac75, 0x2988,
    // 0.0345, 0.2288, -0.4092, 0.02322, -0.1076, -0.02676, 0.07025, 0.0, -0.0903, 0.2349, -0.1726, 0.02858, 0.001643, -0.05038, 0.03778, 0.0
    0x3352286a, 0x25f2b68c, 0xa6daaee3, 0x2c7f, 0x3384adc7, 0x2751b186, 0xaa7316bb, 0x28d6,
    // -0.2485, 0.2383, -0.3518, -0.10394, -0.126, 0.108, 0.1425, 0.0, 0.0332, 0.2241, -0.263, 0.03445, -0.05585, -0.03102, -0.01938, 0.0
    0x33a0b3f4, 0xaea7b5a1, 0x2ee9b008, 0x308f, 0x332c2840, 0x2869b435, 0xa7f1ab26, 0xa4f6,
    // -0.298, 0.05124, 0.3503, -0.06396, -0.06018, 0.0659, -0.01857, 0.0, 0.471, 0.04218, 0.1162, -0.1382, 0.0995, -0.005585, -0.0466, 0.0
    0x2a8fb4c5, 0xac18359b, 0x2c38abb4, 0xa4c1, 0x29663789, 0xb06c2f70, 0x9db82e5e, 0xa9f7,
    // -0.3748, 0.1963, 0.1963, 0.0883, -0.2817, 0.2524, 0.1685, 0.0, -0.08417, 0.01141, 0.2131, 0.1986, -0.1451, -0.04077, 0.06052, 0.0
    0x3248b5ff, 0x2da73248, 0x340ab482, 0x3164, 0x21d8ad63, 0x325b32d2, 0xa938b0a5, 0x2bbf,
    // 0.1786, -0.11554, -0.9507, 0.1342, 0.2155, -0.1571, -0.1305, 0.0, 0.2676, -0.087, -0.6914, -0.10516, 0.1561, -0.1669, 0.1083, 0.0
    0xaf6531b7, 0x304bbb9b, 0xb10732e5, 0xb02d, 0xad913448, 0xaebbb988, 0xb15730ff, 0x2eee,
    // 0.0467, -0.1859, -0.847, -0.008, -0.03044, -0.0322, 0.01724, 0.0, 0.04492, -0.0928, -0.6147, -0.1338, 0.07776, -0.02412, 0.245, 0.0
    0xb1f329fa, 0xa019bac7, 0xa81fa7cb, 0x246a, 0xadf029c0, 0xb048b8eb, 0xa62d2cfa, 0x33d7,
    // -0.256, 0.1327, -0.2399, 0.1992, 0.002281, 0.06354, -0.1913, 0.0, -0.0985, 0.3054, -0.1934, -0.1968, 0.07605, -0.1744, -0.02495, 0.0
    0x303fb419, 0x3260b3ad, 0x2c1118ac, 0xb21f, 0x34e3ae4e, 0xb24cb230, 0xb1952cde, 0xa663,
    // -0.1393, 0.1107, -0.191, 0.0818, 0.05438, 0.6577, -0.3535, 0.0, -0.1404, 0.151, -0.1392, -0.2727, 0.2283, 0.4006, -0.328, 0.0
    0x2f16b075, 0x2d3cb21d, 0x39432af6, 0xb5a8, 0x30d5b07e, 0xb45db074, 0x3669334e, 0xb53f,
    // -0.1218, 0.1793, 0.2542, -0.2112, 0.414, -0.02812, -0.02753, 0.0, -0.1652, 0.1686, 0.2708, -0.1648, 0.328, -0.035, -0.11865, 0.0
    0x31bdafcc, 0xb2c23411, 0xa73336a0, 0xa70c, 0x3165b149, 0xb1463455, 0xa87b353f, 0xaf98,
    // -0.1705, 0.1987, 0.3428, -0.2189, 0.2686, -0.1708, 0.07153, 0.0, -0.1876, 0.1558, 0.2318, -0.1031, 0.2673, -0.08844, 0.11066, 0.0
    0x325cb175, 0xb301357c, 0xb177344c, 0x2c94, 0x30fcb201, 0xae99336b, 0xada93447, 0x2f15,
    // 0.1105, -0.1952, 0.448, 0.18, -0.03387, -0.0986, -0.0603, 0.0, 0.195, -0.2113, 0.4258, -0.05774, 0.1012, 0.1576, 0.11224, 0.0
    0xb23f2f12, 0x31c3372b, 0xae4fa856, 0xabb8, 0xb2c3323d, 0xab6436d0, 0x310b2e7a, 0x2f2f,
    // 0.2744, -0.1747, 0.269, -0.356, 0.1279, 0.1306, -0.02205, 0.0, 0.2217, -0.1842, 0.383, 0.127, 0.1373, -0.134, -0.1946, 0.0
    0xb1973464, 0xb5b2344e, 0x302e3018, 0xa5a5, 0xb1e53318, 0x30103621, 0xb04a3065, 0xb23a,
    // 0.0807, -0.03906, -0.282, -0.2462, -0.0874, 0.2202, 0.10974, 0.0, 0.05292, -0.06366, -0.2654, -0.1521, -0.09814, 0.343, 0.0345, 0.0
    0xa9002d2a, 0xb3e1b483, 0x330cad98, 0x2f06, 0xac132ac6, 0xb0deb43f, 0x357dae48, 0x286a,
    // 0.04044, -0.0342, -0.2544, -0.2354, 0.0574, 0.05927, 0.1482, 0.0, 0.04172, -0.05533, -0.3096, -0.12006, -0.03586, 0.1298, 0.1887, 0.0
    0xa861292d, 0xb388b412, 0x2b962b59, 0x30be, 0xab152957, 0xafafb4f4, 0x3027a897, 0x320a,
    // -0.2041, 0.1099, -0.00527, -0.0939, 0.05637, 0.0825, -0.0973, 0.0, -0.3855, -0.02226, 0.0765, -0.2866, 0.0841, -0.014015, 0.1829, 0.0
    0x2f09b288, 0xae029d65, 0x2d482b37, 0xae3a, 0xa5b3b62b, 0xb4962ce5, 0xa32d2d62, 0x31da,
    // 0.1354, 0.3582, -0.132, 0.107, -0.1993, 0.007084, -0.1868, 0.0, 0.0525, 0.1164, -0.0346, 0.1134, -0.02051, -0.11237, 0.1642, 0.0
    0x35bb3055, 0x2ed9b039, 0x1f41b261, 0xb1fa, 0x2f732ab8, 0x2f42a86e, 0xaf31a540, 0x3141,
    // 0.05667, 0.06244, -0.5127, 0.06, 0.11316, 0.0909, -0.1782, 0.0, 0.05295, 0.01192, -0.5273, 0.2361, 0.0719, 0.3333, -0.277, 0.0
    0x2bfe2b41, 0x2baeb81a, 0x2dd12f3e, 0xb1b4, 0x221a2ac7, 0x338eb838, 0x35552c9a, 0xb46f,
    // -0.0637, 0.0641, -0.5806, 0.1697, 0.1877, -0.2062, -0.1908, 0.0, -0.03415, 0.04047, -0.6265, 0.2937, 0.02776, -0.04166, -0.2336, 0.0
    0x2c1aac14, 0x316eb8a5, 0xb2993202, 0xb21b, 0x292ea85f, 0x34b3b903, 0xa955271b, 0xb37a,
};
static const uint embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias_dwords[8] = {
    // -0.0594, 0.03008, -0.03656, -0.002857, 0.1282, 0.3323, 0.0004585, 0.1866, 0.0331, 0.03128, 0.014656, -0.00852, -0.0274, 0.01243, 0.0645, 0.03192
    0x27b3ab9a, 0x99daa8ae, 0x3551301a, 0x31f90f83, 0x2801283d, 0xa05d2381, 0x225da704, 0x28162c21,
};

[numthreads(8, 8, 1)]
void fsr4_model_v07_i8_pass0(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(8, 8, 1);
    
    const BufferStorage storage_NHWC_inputs = { buffer_NHWC_inputs };
    const Tensor3h_NHWC< BufferStorage > NHWC_inputs = {
        uint3(7680, 4320, 7), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(7680, 4320, 7), // threadGroupSliceSize
        uint3(7680, 4320, 8), // storageSize
        uint3(16, 122880, 2), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_NHWC_inputs };
    const ConstantBufferStorage<256> storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight = { embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight_dwords };
    const Tensor4h_NHWC< ConstantBufferStorage<256> > embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight = {
        uint4(2, 2, 7, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 7, 16), // threadGroupSliceSize
        uint4(2, 2, 8, 16), // storageSize
        uint4(16, 32, 2, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight };
    
    const ConstantBufferStorage<8> storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias = { embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias };
    
    // quantized_NHWC_/encoder2/ResidualBlock_0/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_0 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_0 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(8, 8, 16);
    const uint3 groupSize_slice_0 = uint3(8, 8, 16);
    const uint3 storageSize_slice_0 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_0 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_0 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_0 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_0 = dot(groupStart_slice_0, tensorByteStrides_slice_0);
    const float quantizationScale_slice_0 = 0.012475206516683102;
    const RWBufferStorage storage_slice_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_0 = { logicalSize_slice_0, groupStart_slice_0, groupSize_slice_0, storageSize_slice_0, tensorByteStrides_slice_0, paddingBegin_slice_0, paddingEnd_slice_0, threadGroupByteOffsetInTensor_slice_0 + 0, quantizationScale_slice_0, storage_slice_0 };
    // /encoder1/DownscaleStridedConv2x2/downscale_conv/Conv (7, 4320, 7680), (16, 7, 2, 2), (16,) -> (16, 2160, 3840)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    Conv2D_k2s2b(NHWC_inputs, embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight, embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias, slice_0, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_0
#ifdef MLSR_PASS_0_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass0_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // quantized_NHWC_/encoder2/ResidualBlock_0/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_1 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_1 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_1 = uint3(32, 1, 16);
    const uint3 storageSize_slice_1 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_1 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_1 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_1 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_1 = dot(groupStart_slice_1, tensorByteStrides_slice_1);
    const float quantizationScale_slice_1 = 0.012475206516683102;
    const RWBufferStorage storage_slice_1 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_1 = { logicalSize_slice_1, groupStart_slice_1, groupSize_slice_1, storageSize_slice_1, tensorByteStrides_slice_1, paddingBegin_slice_1, paddingEnd_slice_1, threadGroupByteOffsetInTensor_slice_1 + 0, quantizationScale_slice_1, storage_slice_1 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_1, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_0_POST


#ifdef MLSR_PASS_1
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/ConvNextBlock.hlsli"

static const uint embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 0, 5, 8, -19, -4, -6, -9, 8, 0, 6, 5, -13, 10, 0, 11, -4, -20, 13, -11, 8, 5, 22, 39, 35, 36, -1, -25, -7, 4, -1, 31, 13
    0xed080500, 0x8f7fafc, 0xf3050600, 0xfc0b000a, 0x8f50dec, 0x23271605, 0xf9e7ff24, 0xd1fff04,
    // 13, -5, 19, 4, 8, 8, -11, -12, -11, -8, -9, -2, 6, 8, -2, 2, 34, 3, 4, -9, 30, 4, -20, 6, -29, 13, 33, 16, -5, -10, -13, -20
    0x413fb0d, 0xf4f50808, 0xfef7f8f5, 0x2fe0806, 0xf7040322, 0x6ec041e, 0x10210de3, 0xecf3f6fb,
    // 0, -82, 56, 16, -29, -6, -127, -10, 7, 28, -47, -12, 22, 6, -37, 12, -9, 0, -7, 19, 11, -21, 28, 20, 32, 8, 21, -2, 25, 3, -20, -6
    0x1038ae00, 0xf681fae3, 0xf4d11c07, 0xcdb0616, 0x13f900f7, 0x141ceb0b, 0xfe150820, 0xfaec0319,
    // 20, -8, -37, 4, 5, -15, 15, 4, 4, -4, 16, -24, -1, 34, 8, 26, -4, 31, 24, -5, 10, -6, 13, -1, 23, -10, -20, 29, -3, -34, 12, -16
    0x4dbf814, 0x40ff105, 0xe810fc04, 0x1a0822ff, 0xfb181ffc, 0xff0dfa0a, 0x1decf617, 0xf00cdefd,
    // 7, -1, 18, -9, 1, -7, -6, 1, 9, -1, 1, -18, 1, 9, 11, -5, -3, -13, 2, 10, -4, 1, 2, 11, 14, 6, 3, -4, 26, -1, 21, 4
    0xf712ff07, 0x1faf901, 0xee01ff09, 0xfb0b0901, 0xa02f3fd, 0xb0201fc, 0xfc03060e, 0x415ff1a,
    // 7, 20, 37, -20, 14, -11, -13, -16, 13, -10, 1, 12, 39, -9, 2, 12, 4, -6, 3, 1, 0, 1, 19, 6, -6, -5, -3, 3, 23, -2, 12, -3
    0xec251407, 0xf0f3f50e, 0xc01f60d, 0xc02f727, 0x103fa04, 0x6130100, 0x3fdfbfa, 0xfd0cfe17,
    // -4, 13, 12, 9, -15, 4, -31, -5, 6, 12, -2, -8, 38, 12, 8, 2, -27, 12, 69, 96, -11, -95, -28, -85, -15, -55, -14, -18, -6, -61, -20, -23
    0x90c0dfc, 0xfbe104f1, 0xf8fe0c06, 0x2080c26, 0x60450ce5, 0xabe4a1f5, 0xeef2c9f1, 0xe9ecc3fa,
    // 8, 11, -52, 11, -11, 29, 33, 1, 7, 53, 6, -2, 27, -1, 31, 16, -17, -2, 8, -16, 2, 13, 7, -2, 18, 9, 8, 1, 20, -10, 26, 2
    0xbcc0b08, 0x1211df5, 0xfe063507, 0x101fff1b, 0xf008feef, 0xfe070d02, 0x1080912, 0x21af614,
    // 4, 5, -10, -11, 14, 31, -30, 22, 6, 14, -9, -9, 46, 12, -4, 22, -12, -9, -1, -2, 24, 2, 22, 22, 14, -15, -9, 7, 26, 0, 15, 3
    0xf5f60504, 0x16e21f0e, 0xf7f70e06, 0x16fc0c2e, 0xfefff7f4, 0x16160218, 0x7f7f10e, 0x30f001a,
    // -9, -7, 1, -5, -7, 5, -2, -4, -6, 8, -8, -5, -2, 6, 1, 0, 8, -23, 47, -6, 23, 10, -28, 12, -23, -28, 21, 15, 52, -19, -8, 4
    0xfb01f9f7, 0xfcfe05f9, 0xfbf808fa, 0x106fe, 0xfa2fe908, 0xce40a17, 0xf15e4e9, 0x4f8ed34,
    // -6, -19, 26, -4, 11, 10, -6, 9, -13, -3, -6, -17, 30, -2, 31, -3, -20, -20, 2, -18, -9, 4, 4, 16, 24, 4, -29, -10, 20, 0, 27, 10
    0xfc1aedfa, 0x9fa0a0b, 0xeffafdf3, 0xfd1ffe1e, 0xee02ecec, 0x100404f7, 0xf6e30418, 0xa1b0014,
    // -47, 33, -66, 72, 16, 27, 62, 19, -36, -38, -18, 10, 15, -30, 76, 14, 22, -18, 14, 0, -11, -7, 19, -31, 37, 16, -17, 9, 14, -1, 18, -16
    0x48be21d1, 0x133e1b10, 0xaeedadc, 0xe4ce20f, 0xeee16, 0xe113f9f5, 0x9ef1025, 0xf012ff0e,
    // -17, -19, 25, 0, 11, 9, 4, -19, 2, 1, -22, 7, -10, -6, 11, -18, -6, -53, 6, -7, 8, -6, 6, 12, -14, 13, -7, 4, 15, 9, -14, 3
    0x19edef, 0xed04090b, 0x7ea0102, 0xee0bfaf6, 0xf906cbfa, 0xc06fa08, 0x4f90df2, 0x3f2090f,
    // -15, -3, 21, -5, -8, -14, 9, -11, 9, 11, -8, -7, 2, 0, 6, -7, -2, -1, -5, 1, -4, -1, 13, 5, 7, 8, -5, 3, 3, 5, -3, 0
    0xfb15fdf1, 0xf509f2f8, 0xf9f80b09, 0xf9060002, 0x1fbfffe, 0x50dfffc, 0x3fb0807, 0xfd0503,
    // 4, 5, -1, -14, -10, 2, -6, -14, 11, 9, -16, -3, 0, 6, 9, 4, -7, -1, 8, -6, -6, -13, 5, -2, 12, 8, 4, 3, -6, 0, 0, -5
    0xf2ff0504, 0xf2fa02f6, 0xfdf0090b, 0x4090600, 0xfa08fff9, 0xfe05f3fa, 0x304080c, 0xfb0000fa,
    // 0, -3, -9, 9, 6, 3, -3, 3, 6, -7, -10, 5, 11, -5, -14, 3, 33, -30, 1, -4, 8, -1, -123, 27, 60, -24, 9, 6, -4, -20, 14, -2
    0x9f7fd00, 0x3fd0306, 0x5f6f906, 0x3f2fb0b, 0xfc01e221, 0x1b85ff08, 0x609e83c, 0xfe0eecfc,
    // 1, -9, 20, -1, 5, -9, -15, -23, -13, 7, -7, 1, -2, 3, -12, -2, -4, -2, -13, -9, 5, 10, 6, 23, -9, 9, 2, 8, -3, -2, -5, -3
    0xff14f701, 0xe9f1f705, 0x1f907f3, 0xfef403fe, 0xf7f3fefc, 0x17060a05, 0x80209f7, 0xfdfbfefd,
    // 3, -10, 5, 1, -4, 3, -10, -13, 0, 9, -6, -5, 15, 7, -2, -3, -3, -3, 7, 1, -5, 0, 5, 1, 5, 5, 5, 6, -3, -4, -7, -3
    0x105f603, 0xf3f603fc, 0xfbfa0900, 0xfdfe070f, 0x107fdfd, 0x10500fb, 0x6050505, 0xfdf9fcfd,
    // 2, 2, 11, 5, 4, 2, -9, -8, 1, 5, -2, -1, -7, -10, -3, -1, 11, -13, 20, 11, 10, -1, 1, 1, 3, 3, 3, 9, -25, -16, -2, 11
    0x50b0202, 0xf8f70204, 0xfffe0501, 0xfffdf6f9, 0xb14f30b, 0x101ff0a, 0x9030303, 0xbfef0e7,
    // 4, -9, 9, 9, 5, 5, -18, 2, -8, 3, -5, 1, -1, -3, 9, 11, 2, -14, 19, 8, 16, -4, 4, -3, -3, 2, -2, 4, -16, -8, 9, 1
    0x909f704, 0x2ee0505, 0x1fb03f8, 0xb09fdff, 0x813f202, 0xfd04fc10, 0x4fe02fd, 0x109f8f0,
    // 19, -93, 68, 12, -14, -3, 73, 24, 4, -23, 32, 58, -84, -68, 36, 28, 7, 6, 24, -16, -9, 3, -1, -1, 12, -5, 2, 14, -11, -22, 17, 10
    0xc44a313, 0x1849fdf2, 0x3a20e904, 0x1c24bcac, 0xf0180607, 0xffff03f7, 0xe02fb0c, 0xa11eaf5,
    // 0, 4, 1, -3, 4, -1, 4, -1, -6, 2, -6, -2, -5, -8, -3, -5, 3, 12, 17, 1, -14, 3, -1, -3, 9, -2, 5, 4, -11, -21, 9, 1
    0xfd010400, 0xff04ff04, 0xfefa02fa, 0xfbfdf8fb, 0x1110c03, 0xfdff03f2, 0x405fe09, 0x109ebf5,
    // 1, -1, 12, 6, 0, -1, -5, -9, 2, 5, -3, 2, -3, -3, 6, 3, -3, 12, -23, -9, -19, 8, -2, 3, -16, -6, 5, -12, -23, 6, -4, -5
    0x60cff01, 0xf7fbff00, 0x2fd0502, 0x306fdfd, 0xf7e90cfd, 0x3fe08ed, 0xf405faf0, 0xfbfc06e9,
    // -2, -6, 2, 9, -4, 1, -17, -5, -19, 11, 1, -11, -8, 14, -14, -2, -7, 7, -9, 5, -3, 4, 26, -4, 9, -10, -5, 1, -15, 7, -13, -8
    0x902fafe, 0xfbef01fc, 0xf5010bed, 0xfef20ef8, 0x5f707f9, 0xfc1a04fd, 0x1fbf609, 0xf8f307f1,
    // 10, 20, -25, -34, 0, 30, -36, 38, -2, 5, -11, -4, -8, 3, 5, 6, -26, 10, 69, 13, -43, -18, 106, -32, -53, 0, 21, 10, -18, -12, 33, -38
    0xdee7140a, 0x26dc1e00, 0xfcf505fe, 0x60503f8, 0xd450ae6, 0xe06aeed5, 0xa1500cb, 0xda21f4ee,
    // -9, 33, 42, -4, -3, -13, -25, -17, 25, -34, -4, -4, -13, 1, -14, -3, 11, 3, -21, 10, 8, 20, 12, -4, 8, -15, 6, 5, -5, 6, -6, 4
    0xfc2a21f7, 0xefe7f3fd, 0xfcfcde19, 0xfdf201f3, 0xaeb030b, 0xfc0c1408, 0x506f108, 0x4fa06fb,
    // 0, -2, -19, 2, 31, -1, -17, 19, -1, 18, -12, -1, -4, 14, 12, 9, -4, 3, -2, -7, 9, -1, -6, 0, -10, -20, -4, -1, -19, 14, 3, 5
    0x2edfe00, 0x13efff1f, 0xfff412ff, 0x90c0efc, 0xf9fe03fc, 0xfaff09, 0xfffcecf6, 0x5030eed,
    // 6, 20, -15, -1, -3, -5, -25, 12, 1, 1, -4, 18, 12, -1, 17, -6, 8, 7, -59, 27, 19, 11, 18, 27, -12, 3, 2, -7, 3, -3, 28, -6
    0xfff11406, 0xce7fbfd, 0x12fc0101, 0xfa11ff0c, 0x1bc50708, 0x1b120b13, 0xf90203f4, 0xfa1cfd03,
    // 5, -5, -40, 9, -1, 11, -21, 21, -14, -4, -2, 7, -8, 7, 9, 4, 14, -24, -37, 7, 8, -12, -41, 8, -35, 43, 19, -21, -9, 10, -19, 10
    0x9d8fb05, 0x15eb0bff, 0x7fefcf2, 0x40907f8, 0x7dbe80e, 0x8d7f408, 0xeb132bdd, 0xaed0af7,
    // -22, -21, 83, 84, -53, -34, -63, 0, 10, -54, 11, 4, -39, 3, 29, 2, 8, -17, -35, 0, 1, 6, -14, -2, -35, 38, 12, -6, -10, -13, 14, -12
    0x5453ebea, 0xc1decb, 0x40bca0a, 0x21d03d9, 0xddef08, 0xfef20601, 0xfa0c26dd, 0xf40ef3f6,
    // -11, -2, -6, 7, -4, -15, -9, 9, 6, 17, -9, 7, 2, -3, 0, -11, -3, 7, 5, -10, 6, -8, 3, 4, -37, 16, -9, -14, -23, -6, -17, -8
    0x7fafef5, 0x9f7f1fc, 0x7f71106, 0xf500fd02, 0xf60507fd, 0x403f806, 0xf2f710db, 0xf8effae9,
    // 7, -2, -4, -10, 3, -11, -5, -1, -10, 14, 2, -5, 0, 2, 6, -16, 4, 8, 19, 3, 6, -6, 19, 3, 14, -8, -12, 11, 40, -6, 18, 7
    0xf6fcfe07, 0xfffbf503, 0xfb020ef6, 0xf0060200, 0x3130804, 0x313fa06, 0xbf4f80e, 0x712fa28,
    // -15, -19, -27, -5, 8, -7, 60, -12, 48, 49, -55, -5, -49, 19, 47, 12, 0, 4, -25, 9, -3, -8, 3, 22, -3, 7, -5, -5, 8, 9, 15, 4
    0xfbe5edf1, 0xf43cf908, 0xfbc93130, 0xc2f13cf, 0x9e70400, 0x1603f8fd, 0xfbfb07fd, 0x40f0908,
    // 3, 47, 12, 22, -5, -4, 4, 1, -5, -33, 26, 23, 15, -1, -35, 5, -25, 6, 1, -17, 0, 16, 127, -7, -77, -15, 26, -44, 26, -40, 8, -19
    0x160c2f03, 0x104fcfb, 0x171adffb, 0x5ddff0f, 0xef0106e7, 0xf97f1000, 0xd41af1b3, 0xed08d81a,
    // -15, 15, 22, -18, -12, 8, -10, -14, 4, -9, 23, 11, 15, 1, -1, 5, 9, 10, -2, 6, 0, -7, -1, 1, 3, -5, 3, -1, 4, 0, 2, -6
    0xee160ff1, 0xf2f608f4, 0xb17f704, 0x5ff010f, 0x6fe0a09, 0x1fff900, 0xff03fb03, 0xfa020004,
    // -2, -13, 6, 8, -6, 0, 14, -5, 0, 34, -6, -3, 1, -3, -4, -8, 15, -8, -6, 7, 4, -1, 3, 0, -3, 11, -1, -7, 12, 3, 13, -6
    0x806f3fe, 0xfb0e00fa, 0xfdfa2200, 0xf8fcfd01, 0x7faf80f, 0x3ff04, 0xf9ff0bfd, 0xfa0d030c,
    // 0, -3, -7, 6, 1, -4, 4, -1, -2, 4, 2, 1, -6, 6, 5, -9, -5, 4, -3, 1, -5, -12, 11, 0, -2, 0, 5, -8, 11, -12, -15, -18
    0x6f9fd00, 0xff04fc01, 0x10204fe, 0xf70506fa, 0x1fd04fb, 0xbf4fb, 0xf80500fe, 0xeef1f40b,
    // 5, 1, 0, -7, 3, 14, -10, -4, -13, -4, -1, 6, 8, -2, 11, 3, 5, 11, 8, -7, -7, -3, 22, -19, 7, 9, 2, -2, 3, -16, 13, -26
    0xf9000105, 0xfcf60e03, 0x6fffcf3, 0x30bfe08, 0xf9080b05, 0xed16fdf9, 0xfe020907, 0xe60df003,
    // 30, -51, 28, -33, -13, -25, 111, -19, -49, -29, -4, 30, -22, -8, -31, -7, -1, 20, -54, 15, -5, 19, 15, 27, -6, 4, -4, -15, 18, -2, 18, -14
    0xdf1ccd1e, 0xed6fe7f3, 0x1efce3cf, 0xf9e1f8ea, 0xfca14ff, 0x1b0f13fb, 0xf1fc04fa, 0xf212fe12,
    // 5, 1, -2, -2, -12, 1, 4, -5, -4, -6, 6, -2, -4, 4, -1, 1, 4, 21, -20, -17, 0, 14, -11, 18, 9, -5, 3, 7, 11, -7, -4, -9
    0xfefe0105, 0xfb0401f4, 0xfe06fafc, 0x1ff04fc, 0xefec1504, 0x12f50e00, 0x703fb09, 0xf7fcf90b,
    // -4, 1, -5, -4, 6, 8, -11, 10, -8, 1, 1, 1, 0, -1, 2, -6, -3, 5, 8, 12, -2, -8, -4, -2, 14, 8, 8, 1, -5, -5, -2, -1
    0xfcfb01fc, 0xaf50806, 0x10101f8, 0xfa02ff00, 0xc0805fd, 0xfefcf8fe, 0x108080e, 0xfffefbfb,
    // -9, 8, 25, -10, -23, -18, -10, -4, 34, 2, 6, -1, -4, -17, 3, -4, 0, -13, 54, -4, -8, -25, 14, -39, 22, 4, 3, 13, -7, -6, -14, 1
    0xf61908f7, 0xfcf6eee9, 0xff060222, 0xfc03effc, 0xfc36f300, 0xd90ee7f8, 0xd030416, 0x1f2faf9,
    // 10, 38, -30, -22, -21, 31, -30, 44, -11, 3, 6, 9, 18, -21, 17, -4, 5, -13, -68, 26, 23, 63, 49, 29, -48, -48, -15, -7, 59, -14, 1, 3
    0xeae2260a, 0x2ce21feb, 0x90603f5, 0xfc11eb12, 0x1abcf305, 0x1d313f17, 0xf9f1d0d0, 0x301f23b,
    // -5, -14, 52, 8, -3, -49, 3, -12, 10, 20, 14, 10, 3, -27, -27, -11, 11, -4, -32, 9, 8, 15, 44, -16, 13, -4, 19, -6, 8, 12, -6, 26
    0x834f2fb, 0xf403cffd, 0xa0e140a, 0xf5e5e503, 0x9e0fc0b, 0xf02c0f08, 0xfa13fc0d, 0x1afa0c08,
    // 4, 1, -35, -7, 49, -9, 14, 38, -17, 13, -12, 5, -2, -5, -6, -1, -7, -1, 19, -6, -1, -7, 0, -5, 8, -7, 4, 1, 0, -9, 6, 8
    0xf9dd0104, 0x260ef731, 0x5f40def, 0xfffafbfe, 0xfa13fff9, 0xfb00f9ff, 0x104f908, 0x806f700,
    // -26, -16, 19, -2, 8, 1, 16, 6, 18, 4, 1, -4, 27, 9, 7, 18, -29, -18, -1, 1, 5, -3, 24, 5, 0, 21, 13, 1, 3, 21, 13, 10
    0xfe13f0e6, 0x6100108, 0xfc010412, 0x1207091b, 0x1ffeee3, 0x518fd05, 0x10d1500, 0xa0d1503,
    // -20, 3, -6, -6, 0, 1, 1, 6, 3, 13, 15, -1, 7, 11, 1, 16, -13, -37, 7, 10, -7, -3, -2, -3, -9, 18, 10, 3, -10, -8, -5, -1
    0xfafa03ec, 0x6010100, 0xff0f0d03, 0x10010b07, 0xa07dbf3, 0xfdfefdf9, 0x30a12f7, 0xfffbf8f6,
    // 50, -43, 51, 24, -2, -10, 70, 24, 12, -92, 33, 40, -14, 75, 30, -19, -26, -11, 21, 9, -16, 6, 17, 8, 6, 0, 8, 7, 4, 2, -13, 1
    0x1833d532, 0x1846f6fe, 0x2821a40c, 0xed1e4bf2, 0x915f5e6, 0x81106f0, 0x7080006, 0x1f30204,
    // -12, -24, 4, 0, -11, -4, 7, 8, -1, 12, 5, -7, 24, 25, 8, 22, -21, -11, 16, -4, 4, -7, -26, 6, 0, -21, 9, 2, 1, 28, 3, 18
    0x4e8f4, 0x807fcf5, 0xf9050cff, 0x16081918, 0xfc10f5eb, 0x6e6f904, 0x209eb00, 0x12031c01,
    // -10, -12, 6, 14, -9, 5, 17, 2, 11, 17, 13, -4, 19, 5, -13, 14, 13, 7, -6, 5, -3, -1, -6, 0, 4, -1, 7, 0, 23, -3, 5, -7
    0xe06f4f6, 0x21105f7, 0xfc0d110b, 0xef30513, 0x5fa070d, 0xfafffd, 0x7ff04, 0xf905fd17,
    // -1, 15, 19, -4, 12, -14, 19, -3, -6, -21, 8, 5, 14, -6, -24, -3, 16, 1, 6, -8, 0, -2, -16, -11, -10, -12, 5, 2, 9, -12, -9, -14
    0xfc130fff, 0xfd13f20c, 0x508ebfa, 0xfde8fa0e, 0xf8060110, 0xf5f0fe00, 0x205f4f6, 0xf2f7f409,
    // -1, 11, -2, -3, 9, -2, 10, 15, 15, 13, 0, 1, 18, 16, -2, 1, 1, -3, 13, -5, -16, 43, 50, 83, 1, 3, 6, 39, 0, 7, 18, 48
    0xfdfe0bff, 0xf0afe09, 0x1000d0f, 0x1fe1012, 0xfb0dfd01, 0x53322bf0, 0x27060301, 0x30120700,
    // 2, 6, 34, -1, -12, -32, 46, -28, 19, 6, 4, -4, 10, -3, -35, -24, 9, -6, 0, 0, 3, -6, 8, 6, -2, 6, -1, -4, 13, -4, 9, 6
    0xff220602, 0xe42ee0f4, 0xfc040613, 0xe8ddfd0a, 0xfa09, 0x608fa03, 0xfcff06fe, 0x609fc0d,
    // -11, 7, 31, 12, 5, -14, 7, -3, -11, -2, 3, 1, 11, -10, 0, -9, 16, -6, 3, -1, -1, 0, 5, -7, 6, -2, 3, 0, 12, -3, 3, -12
    0xc1f07f5, 0xfd07f205, 0x103fef5, 0xf700f60b, 0xff03fa10, 0xf90500ff, 0x3fe06, 0xf403fd0c,
    // -4, 14, -25, 0, -12, 6, -19, 23, 0, 15, -5, -4, -2, 0, 6, -3, -3, -7, -36, 12, 33, 34, 10, 29, -17, -17, 14, 4, 21, -12, 10, 6
    0xe70efc, 0x17ed06f4, 0xfcfb0f00, 0xfd0600fe, 0xcdcf9fd, 0x1d0a2221, 0x40eefef, 0x60af415,
    // -5, 0, -12, -10, 2, 10, -18, 17, -19, 3, 1, -2, 0, 1, 15, 6, -1, -18, -37, -4, 38, 21, 50, 11, 20, 16, -7, 2, 5, -1, -2, 6
    0xf6f400fb, 0x11ee0a02, 0xfe0103ed, 0x60f0100, 0xfcdbeeff, 0xb321526, 0x2f91014, 0x6feff05,
    // 20, 33, 21, -91, -55, -43, 110, -51, 1, -6, -5, -5, 19, -15, -19, -20, 4, -15, 25, 11, -5, -15, 22, -30, 14, 13, 0, 9, 6, -21, -7, -9
    0xa5152114, 0xcd6ed5c9, 0xfbfbfa01, 0xecedf113, 0xb19f104, 0xe216f1fb, 0x9000d0e, 0xf7f9eb06,
    // 3, -13, -12, -15, 14, -1, 1, 17, -7, 7, -1, -3, 0, 14, -7, 17, 2, -12, 11, 25, 16, -15, 39, -27, -15, -5, 5, 4, -1, -14, -8, -21
    0xf1f4f303, 0x1101ff0e, 0xfdff07f9, 0x11f90e00, 0x190bf402, 0xe527f110, 0x405fbf1, 0xebf8f2ff,
    // -11, 3, 14, 0, -20, -13, -6, 3, -1, -4, 1, 2, 1, -5, 1, -6, 8, 11, 13, -2, -6, -11, 5, 0, 5, -9, 7, -3, 26, 0, 0, 4
    0xe03f5, 0x3faf3ec, 0x201fcff, 0xfa01fb01, 0xfe0d0b08, 0x5f5fa, 0xfd07f705, 0x400001a,
    // 0, 7, 3, 3, -16, 21, -25, -7, -6, 16, -6, -2, -2, 6, 33, 19, -3, -1, 6, 15, -4, -11, 19, 20, 32, -3, 4, -13, 31, 1, -3, -12
    0x3030700, 0xf9e715f0, 0xfefa10fa, 0x132106fe, 0xf06fffd, 0x1413f5fc, 0xf304fd20, 0xf4fd011f,
    // 6, 0, 21, -6, 10, 9, 22, 16, 30, -14, -16, 13, 36, 19, -29, 38, -13, 5, 99, -47, -1, -31, -86, -6, 50, 34, 28, 21, -26, -27, -7, -9
    0xfa150006, 0x1016090a, 0xdf0f21e, 0x26e31324, 0xd16305f3, 0xfaaae1ff, 0x151c2232, 0xf7f9e5e6,
    // 11, 2, 1, -2, 20, 22, -28, 13, -21, -16, -7, -1, 13, 26, 13, 18, 10, 25, -9, -3, -2, 4, 17, 18, 11, -20, 3, -2, 6, -6, -11, 0
    0xfe01020b, 0xde41614, 0xfff9f0eb, 0x120d1a0d, 0xfdf7190a, 0x121104fe, 0xfe03ec0b, 0xf5fa06,
    // 19, -7, -10, 3, -15, 19, 4, -2, 24, 20, 12, 3, 22, 20, -8, 38, 5, 8, -12, -7, 2, -10, 6, 8, 2, -4, -2, -1, 11, 1, 4, 1
    0x3f6f913, 0xfe0413f1, 0x30c1418, 0x26f81416, 0xf9f40805, 0x806f602, 0xfffefc02, 0x104010b,
    // -6, -10, 3, 7, -3, 6, -11, -11, 10, 2, 2, 1, -5, 0, 2, -3, -12, 17, -10, -12, -22, -6, -9, 1, -8, 17, 9, -6, 7, 2, 7, -2
    0x703f6fa, 0xf5f506fd, 0x102020a, 0xfd0200fb, 0xf4f611f4, 0x1f7faea, 0xfa0911f8, 0xfe070207,
    // 6, -8, 31, -10, 1, 0, 19, -28, 25, 3, -4, 13, 2, -7, -18, 0, -8, -30, 18, 5, 5, 2, -20, -16, -12, 18, -4, -6, -9, 2, 9, -15
    0xf61ff806, 0xe4130001, 0xdfc0319, 0xeef902, 0x512e2f8, 0xf0ec0205, 0xfafc12f4, 0xf10902f7,
    // 23, 21, 28, -76, -5, 20, 77, 34, 74, 64, 5, -20, -8, 21, -101, 53, -14, -16, -20, -5, 19, -11, 7, 15, -24, 33, 8, -7, -10, -4, -9, -3
    0xb41c1517, 0x224d14fb, 0xec05404a, 0x359b15f8, 0xfbecf0f2, 0xf07f513, 0xf90821e8, 0xfdf7fcf6,
    // -10, -4, 5, -7, -1, 4, -6, 2, 15, 10, -2, -4, 8, 5, 6, -7, -5, 13, 18, -1, -10, 7, -16, -12, 14, 8, -11, 1, 2, 0, 13, -7
    0xf905fcf6, 0x2fa04ff, 0xfcfe0a0f, 0xf9060508, 0xff120dfb, 0xf4f007f6, 0x1f5080e, 0xf90d0002,
    // -11, -7, 3, -8, 12, 10, -14, 5, 17, -9, -7, 2, -1, 6, 6, 4, 4, 13, 0, 0, 1, 0, -1, -7, 0, -7, -8, 2, -4, 1, -8, 1
    0xf803f9f5, 0x5f20a0c, 0x2f9f711, 0x40606ff, 0xd04, 0xf9ff0001, 0x2f8f900, 0x1f801fc,
    // -8, -7, 1, 6, 2, 6, 27, -8, 31, -17, -6, 14, -4, -1, 5, -4, 3, 9, -3, -3, 4, 2, 0, -4, -4, -1, -3, -3, -3, -3, 14, 2
    0x601f9f8, 0xf81b0602, 0xefaef1f, 0xfc05fffc, 0xfdfd0903, 0xfc000204, 0xfdfdfffc, 0x20efdfd,
    // -10, 0, -3, -9, -5, 12, 19, 1, 24, -24, 11, 10, 0, 1, 4, -1, -14, -77, 18, -29, -9, -8, -31, 5, 21, -40, 21, 57, -29, -14, -5, -10
    0xf7fd00f6, 0x1130cfb, 0xa0be818, 0xff040100, 0xe312b3f2, 0x5e1f8f7, 0x3915d815, 0xf6fbf2e3,
    // -11, 1, -9, 23, -3, 17, 30, -4, 13, -12, 15, 3, 3, -3, 8, 4, 7, 11, -4, -11, 4, 7, 9, 1, -5, -4, 2, 1, -10, -1, -3, -8
    0x17f701f5, 0xfc1e11fd, 0x30ff40d, 0x408fd03, 0xf5fc0b07, 0x1090704, 0x102fcfb, 0xf8fdfff6,
    // -5, -14, 0, 4, 6, 12, 4, -1, 33, -10, -9, 15, -6, 1, -5, -10, 0, 4, 4, 2, 5, -2, -6, -8, -8, -8, -4, -2, -9, -6, -2, -8
    0x400f2fb, 0xff040c06, 0xff7f621, 0xf6fb01fa, 0x2040400, 0xf8fafe05, 0xfefcf8f8, 0xf8fefaf7,
};
static const uint embedded_encoder2_ResidualBlock_0_body_conv_dw_bias_dwords[8] = {
    // 0.014534, -0.001834, -0.03485, -0.01325, 0.04227, -0.03137, 0.04224, 0.02202, 0.00977, 0.03625, -0.0316, 0.03076, -0.00461, 0.06174, -0.01047, 0.02426
    0x97832371, 0xa2c9a876, 0xa8042969, 0x25a32968, 0x28a42101, 0x27e0a80b, 0x2be79cb8, 0x2636a15c,
};
static const uint embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 34, 41, 23, 43, -27, -25, 9, -38, -90, -32, -36, -62, -19, 9, 0, -41, 14, 36, -51, 16, -31, -20, 18, 8, 52, 17, -26, -36, 51, -9, -26, -78
    0x2b172922, 0xda09e7e5, 0xc2dce0a6, 0xd70009ed, 0x10cd240e, 0x812ece1, 0xdce61134, 0xb2e6f733,
    // 62, -48, -15, 51, 7, -70, 16, -36, -49, -62, -13, -1, 97, 19, 58, -2, 34, 2, -12, 101, -1, -20, 18, -52, -57, 37, 18, 39, -109, -7, -85, 3
    0x33f1d03e, 0xdc10ba07, 0xfff3c2cf, 0xfe3a1361, 0x65f40222, 0xcc12ecff, 0x271225c7, 0x3abf993,
    // -14, -80, 35, -33, -2, -96, -72, 26, -61, 23, -24, 35, -69, -58, -8, -9, 16, -17, 23, 122, 1, 15, 5, -20, -36, 26, 0, 42, -97, -8, -13, 10
    0xdf23b0f2, 0x1ab8a0fe, 0x23e817c3, 0xf7f8c6bb, 0x7a17ef10, 0xec050f01, 0x2a001adc, 0xaf3f89f,
    // 12, 85, -43, 80, 60, 21, -32, 19, 24, -42, 35, -7, 49, -99, -17, -54, 56, 9, -25, 121, 88, -22, 12, -85, -11, -13, 27, -5, -32, 43, -11, 59
    0x50d5550c, 0x13e0153c, 0xf923d618, 0xcaef9d31, 0x79e70938, 0xab0cea58, 0xfb1bf3f5, 0x3bf52be0,
    // -88, -3, -6, 25, -19, 12, 23, -36, -41, -19, 84, -57, 16, -7, 26, -5, 31, 96, -10, -28, 14, 107, 42, -19, 22, -37, -4, -73, 73, 67, -5, 48
    0x19fafda8, 0xdc170ced, 0xc754edd7, 0xfb1af910, 0xe4f6601f, 0xed2a6b0e, 0xb7fcdb16, 0x30fb4349,
    // 26, -15, 4, -66, -40, 20, -23, 4, -52, 13, 3, -53, -12, 68, -25, 18, 12, -14, -35, 47, -23, -41, -26, -65, -49, 54, -34, 29, -36, 23, 85, -29
    0xbe04f11a, 0x4e914d8, 0xcb030dcc, 0x12e744f4, 0x2fddf20c, 0xbfe6d7e9, 0x1dde36cf, 0xe35517dc,
    // -30, -45, -3, 39, 49, 2, -13, 49, 43, 9, 4, 50, 18, 11, 76, 18, -27, -29, 22, 6, 22, -50, 31, -8, 2, 38, 5, -81, 21, 61, -26, 15
    0x27fdd3e2, 0x31f30231, 0x3204092b, 0x124c0b12, 0x616e3e5, 0xf81fce16, 0xaf052602, 0xfe63d15,
    // 10, 84, 76, 47, -21, -107, -35, 75, -11, 18, 93, 46, 40, 73, 26, -15, 6, -8, -34, -48, -20, 70, -86, 24, 76, 32, 32, 7, 58, -6, 72, 32
    0x2f4c540a, 0x4bdd95eb, 0x2e5d12f5, 0xf11a4928, 0xd0def806, 0x18aa46ec, 0x720204c, 0x2048fa3a,
    // -14, 30, 43, 13, -5, -44, 51, -23, -106, -18, 4, -11, -61, -7, -31, 33, -42, -4, 39, -35, 0, 3, -31, -127, 22, -15, 24, 31, 10, 9, -9, -51
    0xd2b1ef2, 0xe933d4fb, 0xf504ee96, 0x21e1f9c3, 0xdd27fcd6, 0x81e10300, 0x1f18f116, 0xcdf7090a,
    // -42, -3, 9, -49, 62, 0, 31, 16, -4, 8, 15, 69, -27, 5, 64, -15, -32, -1, 4, -84, -21, 1, -3, 39, -47, 0, -17, 8, 3, 5, 24, -43
    0xcf09fdd6, 0x101f003e, 0x450f08fc, 0xf14005e5, 0xac04ffe0, 0x27fd01eb, 0x8ef00d1, 0xd5180503,
    // 112, 10, -31, -102, -34, -22, 28, -47, 57, 36, 57, 57, -27, -71, 35, 11, -29, -2, 5, -96, -25, 46, -41, 34, 4, 15, -15, -18, 34, -14, 48, -49
    0x9ae10a70, 0xd11ceade, 0x39392439, 0xb23b9e5, 0xa005fee3, 0x22d72ee7, 0xeef10f04, 0xcf30f222,
    // 16, -37, 65, 63, -16, 79, 9, 16, -112, 68, -14, 83, 61, -39, -19, -16, -12, -5, -3, -56, 76, 70, 13, 32, 1, -4, 41, 20, 2, 29, 27, -14
    0x3f41db10, 0x10094ff0, 0x53f24490, 0xf0edd93d, 0xc8fdfbf4, 0x200d464c, 0x1429fc01, 0xf21b1d02,
    // 25, -12, -43, 56, -10, 4, 10, 113, -26, -12, 35, -13, -13, 12, -27, -15, 40, -31, -58, 71, 0, -72, -28, -59, -6, -33, -20, 5, 29, 54, 102, 35
    0x38d5f419, 0x710a04f6, 0xf323f4e6, 0xf1e50cf3, 0x47c6e128, 0xc5e4b800, 0x5ecdffa, 0x2366361d,
    // -24, 14, 10, -93, 65, 33, 18, 44, 45, -8, 33, -6, 36, -12, -54, 33, -46, 29, 26, -24, 5, 40, -26, 29, 35, 50, -13, -14, -91, -15, -24, 8
    0xa30a0ee8, 0x2c122141, 0xfa21f82d, 0x21caf424, 0xe81a1dd2, 0x1de62805, 0xf2f33223, 0x8e8f1a5,
    // 9, 18, -25, -26, 25, -78, -8, -2, 97, -68, -13, -79, -78, 27, 56, 15, -66, -12, 12, -76, 92, 66, 2, 52, 51, 6, 30, 34, 32, 8, 33, 54
    0xe6e71209, 0xfef8b219, 0xb1f3bc61, 0xf381bb2, 0xb40cf4be, 0x3402425c, 0x221e0633, 0x36210820,
    // 43, 6, -21, -15, 43, 27, 9, -34, -90, -19, 7, 16, -49, 45, 27, -55, -128, -18, -30, 47, -16, 19, -27, 56, -90, -36, -21, 53, -14, 64, -49, 32
    0xf1eb062b, 0xde091b2b, 0x1007eda6, 0xc91b2dcf, 0x2fe2ee80, 0x38e513f0, 0x35ebdca6, 0x20cf40f2,
};
static const uint embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias_dwords[16] = {
    // -0.11255, -0.3745, 0.05243, -0.11884, 0.02693, 0.0378, -0.2188, -0.02435, 0.088, 0.03036, 0.06586, 0.05148, 0.1228, 0.06223, 0.06274, 0.1064
    0xb5feaf34, 0xaf9b2ab6, 0x28d726e5, 0xa63cb300, 0x27c62da2, 0x2a972c37, 0x2bf72fdc, 0x2ecf2c04,
    // 0.0674, 0.06094, 0.04514, 0.00905, 0.11615, -0.05386, 0.1075, -0.01894, 0.05518, -0.03363, 0.00915, 0.02553, 0.04596, -0.12305, 0.04483, 0.04126
    0x2bcd2c50, 0x20a229c7, 0xaae52f6f, 0xa4d92ee1, 0xa84e2b10, 0x268920af, 0xafe029e2, 0x294829bd,
};
static const uint embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 86, -14, 17, -13, 53, 23, 100, 36, 32, -83, 19, 30, 1, 32, -85, 4, -31, 11, 8, -24, 20, 90, 2, 50, 19, -47, -70, -17, 5, -15, 90, -27
    0xf311f256, 0x24641735, 0x1e13ad20, 0x4ab2001, 0xe8080be1, 0x32025a14, 0xefbad113, 0xe55af105,
    // -14, -9, 32, 64, -10, -61, 17, -100, 15, 48, 9, -63, 12, -1, -41, 25, -52, 63, 13, 73, -32, -96, 21, -4, -16, 1, 47, -21, -4, 1, 13, 15
    0x4020f7f2, 0x9c11c3f6, 0xc109300f, 0x19d7ff0c, 0x490d3fcc, 0xfc15a0e0, 0xeb2f01f0, 0xf0d01fc,
    // 9, 30, 4, 14, -63, -17, -23, 32, -18, 15, 8, -46, 33, 15, 7, -10, -15, -37, 32, -50, -11, 44, -27, 56, 43, -23, 65, -20, 14, -85, 68, 17
    0xe041e09, 0x20e9efc1, 0xd2080fee, 0xf6070f21, 0xce20dbf1, 0x38e52cf5, 0xec41e92b, 0x1144ab0e,
    // -31, 39, -41, -24, -17, 24, 47, -26, -32, 17, 16, -85, -54, 5, -75, -86, 84, 35, 36, -31, 95, 86, 41, -46, -32, 2, 94, 37, -45, -9, 83, -128
    0xe8d727e1, 0xe62f18ef, 0xab1011e0, 0xaab505ca, 0xe1242354, 0xd229565f, 0x255e02e0, 0x8053f7d3,
    // 12, -24, -38, -19, 32, -8, 49, -41, 81, -107, -57, -18, 3, 13, 107, -40, 83, -40, 59, -19, -53, 39, -112, -60, 17, -56, 9, 40, 96, 16, -25, 50
    0xeddae80c, 0xd731f820, 0xeec79551, 0xd86b0d03, 0xed3bd853, 0xc49027cb, 0x2809c811, 0x32e71060,
    // -42, -17, 31, 5, 9, 1, -21, -121, -33, -101, -68, 5, 48, -82, 26, -13, -26, -39, 70, 84, 87, -31, 43, -26, 53, -46, -48, -86, -65, -4, 23, -32
    0x51fefd6, 0x87eb0109, 0x5bc9bdf, 0xf31aae30, 0x5446d9e6, 0xe62be157, 0xaad0d235, 0xe017fcbf,
    // 67, 2, -68, 37, 10, 1, -9, -47, -7, -4, -10, -22, 48, 10, -47, 69, -101, 33, 36, 47, 39, -63, -34, 49, -15, -7, 60, 91, 34, -92, -66, -47
    0x25bc0243, 0xd1f7010a, 0xeaf6fcf9, 0x45d10a30, 0x2f24219b, 0x31dec127, 0x5b3cf9f1, 0xd1bea422,
    // 13, 60, 21, 8, 47, -5, -55, 74, 1, 12, -62, -5, 44, -48, 0, -14, 13, 34, 64, -52, 15, 71, -21, 39, -12, 36, 49, 15, 40, -41, 64, -12
    0x8153c0d, 0x4ac9fb2f, 0xfbc20c01, 0xf200d02c, 0xcc40220d, 0x27eb470f, 0xf3124f4, 0xf440d728,
    // -4, 14, -5, -29, -97, 18, 40, 6, 45, -8, 25, 42, 9, 25, -60, 1, 27, 82, 2, -31, 4, 36, -26, 8, -66, -102, -87, -37, -3, 20, 13, -4
    0xe3fb0efc, 0x628129f, 0x2a19f82d, 0x1c41909, 0xe102521b, 0x8e62404, 0xdba99abe, 0xfc0d14fd,
    // -90, 11, -4, -13, 15, 29, -25, -5, -44, 13, 13, 71, 0, -29, -22, -4, -23, 50, -31, 23, 2, -97, 3, -43, -10, 29, -89, 27, 8, 55, 37, 6
    0xf3fc0ba6, 0xfbe71d0f, 0x470d0dd4, 0xfceae300, 0x17e132e9, 0xd5039f02, 0x1ba71df6, 0x6253708,
    // 66, 44, 21, 4, 70, 13, 11, -9, -8, -26, 15, 18, 30, 6, -54, 4, -35, -33, 52, -31, -13, 4, 49, 76, 113, 9, -15, -1, -15, -82, 41, 39
    0x4152c42, 0xf70b0d46, 0x120fe6f8, 0x4ca061e, 0xe134dfdd, 0x4c3104f3, 0xfff10971, 0x2729aef1,
    // 2, 78, 5, -2, -28, 4, 17, 45, 2, -22, -18, -24, 27, 0, -15, 16, 16, 127, 3, -8, 5, -5, -17, -16, -106, -6, 57, -30, -3, -23, -31, 4
    0xfe054e02, 0x2d1104e4, 0xe8eeea02, 0x10f1001b, 0xf8037f10, 0xf0effb05, 0xe239fa96, 0x4e1e9fd,
    // -80, -31, 6, -10, -20, -30, -19, -39, 5, 26, 16, -1, -76, 18, -47, -49, 85, 9, -46, 27, 10, 9, -62, -44, 16, -18, -22, 0, 69, 63, 19, -4
    0xf606e1b0, 0xd9ede2ec, 0xff101a05, 0xcfd112b4, 0x1bd20955, 0xd4c2090a, 0xeaee10, 0xfc133f45,
    // -14, 7, -10, 8, 18, -1, -35, -12, 88, -10, -23, 12, -10, -8, 26, 9, -2, -1, -6, -31, 32, -16, -3, 7, 20, 22, -16, 1, -6, -16, -4, 2
    0x8f607f2, 0xf4ddff12, 0xce9f658, 0x91af8f6, 0xe1fafffe, 0x7fdf020, 0x1f01614, 0x2fcf0fa,
    // -4, 44, -97, -109, -18, 122, -40, -13, 63, -9, -22, -13, -31, 16, 57, -20, 106, 3, 4, 0, -112, 50, 42, 65, 11, 49, 20, 90, -70, -28, 10, 112
    0x939f2cfc, 0xf3d87aee, 0xf3eaf73f, 0xec3910e1, 0x4036a, 0x412a3290, 0x5a14310b, 0x700ae4ba,
    // -16, 40, 6, -32, -26, 18, 13, -28, -27, 11, -9, 41, 20, 4, 3, -17, 21, -15, 44, 10, -19, -41, -6, -18, -56, -32, -31, -4, 13, -7, 16, 12
    0xe00628f0, 0xe40d12e6, 0x29f70be5, 0xef030414, 0xa2cf115, 0xeefad7ed, 0xfce1e0c8, 0xc10f90d,
};
static const uint embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias_dwords[8] = {
    // -0.05835, -0.01041, -0.04648, 0.0433, -0.009056, 0.103, 0.00575, 0.003937, 0.04303, 0.02534, -0.06335, 0.000504, 0.08167, -0.0213, -0.09076, 0.0351
    0xa154ab78, 0x298ba9f3, 0x2e98a0a3, 0x1c081de3, 0x267d2982, 0x1021ac0e, 0xa5742d3a, 0x287eadcf,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass1(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(3840, 2160, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(3840, 2160, 16), // threadGroupSliceSize
        uint3(3840, 2160, 16), // storageSize
        uint3(16, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.012475206516683102, storage_quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005744654219597578, storage_embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_0_body_conv_dw_bias = { embedded_encoder2_ResidualBlock_0_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_0_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_0_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005624094046652317, storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias = { embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005617608781903982, storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias = { embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias };
    
    // fused_quantized_NHWC_/encoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_2 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_2 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 16);
    const uint3 groupSize_slice_2 = uint3(64, 1, 16);
    const uint3 storageSize_slice_2 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_2 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_2 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_2 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_2 = dot(groupStart_slice_2, tensorByteStrides_slice_2);
    const float quantizationScale_slice_2 = 0.024305112659931183;
    const RWBufferStorage storage_slice_2 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_2 = { logicalSize_slice_2, groupStart_slice_2, groupSize_slice_2, storageSize_slice_2, tensorByteStrides_slice_2, paddingBegin_slice_2, paddingEnd_slice_2, threadGroupByteOffsetInTensor_slice_2 + 132710400, quantizationScale_slice_2, storage_slice_2 };
    // ConvNextBlock (16, 2160, 3840), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,) -> (16, 2160, 3840)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    ConvNextBlock(29.098199195959484, 0.034366387873888016, 46.476467167734775, 0.021516265347599983, quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_0_body_conv_dw_bias, embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias, embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias, slice_2, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_1
#ifdef MLSR_PASS_1_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass1_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/encoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_3 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_3 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_3 = uint3(32, 1, 16);
    const uint3 storageSize_slice_3 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_3 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_3 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_3 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_3 = dot(groupStart_slice_3, tensorByteStrides_slice_3);
    const float quantizationScale_slice_3 = 0.024305112659931183;
    const RWBufferStorage storage_slice_3 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_3 = { logicalSize_slice_3, groupStart_slice_3, groupSize_slice_3, storageSize_slice_3, tensorByteStrides_slice_3, paddingBegin_slice_3, paddingEnd_slice_3, threadGroupByteOffsetInTensor_slice_3 + 132710400, quantizationScale_slice_3, storage_slice_3 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_3, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_1_POST


#ifdef MLSR_PASS_2
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/ConvNextBlock.hlsli"

static const uint embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // -15, 5, 3, 3, 1, -14, 10, 26, 1, 10, 1, -5, 18, -1, 2, -4, -15, 2, -5, 20, -13, -7, 9, 28, -8, 18, 18, 4, 25, -7, 10, -7
    0x30305f1, 0x1a0af201, 0xfb010a01, 0xfc02ff12, 0x14fb02f1, 0x1c09f9f3, 0x41212f8, 0xf90af919,
    // 4, -3, -13, 15, 4, -1, -5, 20, -11, 7, 17, 5, 7, -16, 10, 9, -18, 46, 10, -16, -28, -23, -24, 28, -16, -11, 4, -10, 15, -3, 13, -27
    0xff3fd04, 0x14fbff04, 0x51107f5, 0x90af007, 0xf00a2eee, 0x1ce8e9e4, 0xf604f5f0, 0xe50dfd0f,
    // 6, -1, -97, 30, -35, -2, 53, -13, -91, -24, -13, -30, -9, 27, 54, -37, -16, 3, -18, 18, -17, 1, -35, 19, -27, -7, 3, -4, -14, -7, 9, 1
    0x1e9fff06, 0xf335fedd, 0xe2f3e8a5, 0xdb361bf7, 0x12ee03f0, 0x13dd01ef, 0xfc03f9e5, 0x109f9f2,
    // -5, 6, -4, -2, -9, -6, -6, 19, 15, 7, -7, -6, 6, -12, -10, 0, -15, 8, 4, -6, 17, -24, -14, 7, -32, 8, -7, -5, -10, 1, -20, -18
    0xfefc06fb, 0x13fafaf7, 0xfaf9070f, 0xf6f406, 0xfa0408f1, 0x7f2e811, 0xfbf908e0, 0xeeec01f6,
    // -16, 20, 6, 4, -7, 3, -33, 13, -8, -14, 3, -2, -2, 6, -12, 4, 2, -4, 1, 4, 2, 8, -1, 3, 1, -4, 2, 1, -13, -14, -11, -9
    0x40614f0, 0xddf03f9, 0xfe03f2f8, 0x4f406fe, 0x401fc02, 0x3ff0802, 0x102fc01, 0xf7f5f2f3,
    // 3, 15, 25, -17, 12, 13, -16, -1, -8, 0, -8, 3, -34, -1, -2, 19, 9, 19, 4, -4, 9, 7, -6, 6, -1, -9, 3, 4, 7, -22, -10, -8
    0xef190f03, 0xfff00d0c, 0x3f800f8, 0x13feffde, 0xfc041309, 0x6fa0709, 0x403f7ff, 0xf8f6ea07,
    // 7, -2, 19, 11, 8, 7, -3, -17, 30, 3, -14, 7, -21, 0, 1, 12, -12, 43, 36, 80, 22, 35, -8, -105, 3, 1, -54, -58, 58, 29, 37, 25
    0xb13fe07, 0xeffd0708, 0x7f2031e, 0xc0100eb, 0x50242bf4, 0x97f82316, 0xc6ca0103, 0x19251d3a,
    // 12, 7, 25, -12, 12, 10, 3, 11, 19, 5, 1, 3, -5, -12, 3, 14, 7, -13, 14, 3, -3, 10, 11, -7, 6, -1, -10, -1, 4, 5, 0, 4
    0xf419070c, 0xb030a0c, 0x3010513, 0xe03f4fb, 0x30ef307, 0xf90b0afd, 0xfff6ff06, 0x4000504,
    // 14, -8, 33, 6, 4, 0, 10, -11, 22, 15, -16, -2, -3, 3, 1, 19, 0, -14, 3, 3, 7, 9, 1, 2, 7, -1, 1, 8, -3, -13, -7, -7
    0x621f80e, 0xf50a0004, 0xfef00f16, 0x130103fd, 0x303f200, 0x2010907, 0x801ff07, 0xf9f9f3fd,
    // 3, -4, 8, 1, 8, -6, 12, 4, 4, -3, -1, 9, 14, -10, 7, 10, -9, -6, 6, 6, -14, -10, -12, 1, 9, 7, -2, 1, -16, 3, 0, -8
    0x108fc03, 0x40cfa08, 0x9fffd04, 0xa07f60e, 0x606faf7, 0x1f4f6f2, 0x1fe0709, 0xf80003f0,
    // 2, -17, -4, -6, -7, -11, 7, 14, 12, 1, -11, -10, -2, 3, 12, 1, -9, -4, 14, -4, -4, -5, 0, -9, 12, -28, 15, 14, 12, -8, 5, 21
    0xfafcef02, 0xe07f5f9, 0xf6f5010c, 0x10c03fe, 0xfc0efcf7, 0xf700fbfc, 0xe0fe40c, 0x1505f80c,
    // 11, 9, -43, -2, 38, 34, -15, -43, 50, 85, 19, -23, 34, 24, -44, -7, -11, -14, 8, 7, 4, -5, -30, 2, -11, -21, -1, 17, -6, -10, 5, -5
    0xfed5090b, 0xd5f12226, 0xe9135532, 0xf9d41822, 0x708f2f5, 0x2e2fb04, 0x11ffebf5, 0xfb05f6fa,
    // 17, -11, 2, -3, -13, 1, 9, -6, 15, -21, 1, 7, 14, 8, -7, 26, -7, 2, 4, -8, -6, 2, -7, -10, 13, -22, 5, 14, 5, 8, 5, 25
    0xfd02f511, 0xfa0901f3, 0x701eb0f, 0x1af9080e, 0xf80402f9, 0xf6f902fa, 0xe05ea0d, 0x19050805,
    // 7, 2, 1, 2, -4, 1, -12, -1, 6, -23, -1, 11, 1, 1, 1, 12, -5, -6, -3, 4, -8, -4, 0, -5, 2, 4, 3, 0, -13, 0, -9, -11
    0x2010207, 0xfff401fc, 0xbffe906, 0xc010101, 0x4fdfafb, 0xfb00fcf8, 0x30402, 0xf5f700f3,
    // -3, 22, -4, -13, -5, -11, -26, -5, -28, 9, 6, 8, 6, -6, 13, -4, -1, -4, -8, -1, -4, -3, 7, -8, -4, -8, 8, 0, -6, -1, -11, -13
    0xf3fc16fd, 0xfbe6f5fb, 0x80609e4, 0xfc0dfa06, 0xfff8fcff, 0xf807fdfc, 0x8f8fc, 0xf3f5fffa,
    // -4, 2, 1, 2, -5, -23, 14, -8, 3, 25, -9, -10, 3, 9, -11, -7, 6, -74, 0, 37, 24, 3, -114, 127, 27, 34, 19, -6, -10, -3, 17, 52
    0x20102fc, 0xf80ee9fb, 0xf6f71903, 0xf9f50903, 0x2500b606, 0x7f8e0318, 0xfa13221b, 0x3411fdf6,
    // -7, 9, 2, -13, 0, -9, 6, -9, -21, 18, -1, -3, 3, -10, -1, -13, 8, -8, 0, 1, -12, -5, 6, -3, 1, 4, 0, 5, 22, -2, 13, -7
    0xf30209f9, 0xf706f700, 0xfdff12eb, 0xf3fff603, 0x100f808, 0xfd06fbf4, 0x5000401, 0xf90dfe16,
    // 4, 16, 4, -1, -12, -12, -25, 11, -7, 21, -10, -10, 25, 9, -2, 3, 1, -1, 3, 0, -2, -4, -8, 0, -6, -18, -1, 1, 8, 1, -9, -13
    0xff041004, 0xbe7f4f4, 0xf6f615f9, 0x3fe0919, 0x3ff01, 0xf8fcfe, 0x1ffeefa, 0xf3f70108,
    // 15, 8, -20, -5, -20, 3, -14, 4, -15, 1, 8, -8, -2, 5, 22, 6, 10, -8, 44, -12, 16, 6, 12, -23, -13, -8, -25, 17, 13, -10, -17, -7
    0xfbec080f, 0x4f203ec, 0xf80801f1, 0x61605fe, 0xf42cf80a, 0xe90c0610, 0x11e7f8f3, 0xf9eff60d,
    // 1, 8, -4, 12, 6, 9, -24, 27, -3, -9, -5, -16, 1, 12, 15, -1, -7, -16, 17, 5, -11, -27, 47, -9, -19, -25, -31, -8, 19, 35, -30, 6
    0xcfc0801, 0x1be80906, 0xf0fbf7fd, 0xff0f0c01, 0x511f0f9, 0xf72fe5f5, 0xf8e1e7ed, 0x6e22313,
    // -7, 31, -59, 3, 42, 47, -39, -8, 72, 20, 50, 8, 18, -110, 62, 22, 3, 27, 28, -20, -13, -3, -7, -25, 19, -26, -17, 9, 6, -3, -15, -13
    0x3c51ff9, 0xf8d92f2a, 0x8321448, 0x163e9212, 0xec1c1b03, 0xe7f9fdf3, 0x9efe613, 0xf3f1fd06,
    // 8, 23, 10, 2, -6, -11, -16, 0, -21, 15, 10, -4, 3, 6, 19, -38, -11, 11, 17, -2, -23, -13, 5, -11, -8, -39, -8, -3, 11, 13, -11, -1
    0x20a1708, 0xf0f5fa, 0xfc0a0feb, 0xda130603, 0xfe110bf5, 0xf505f3e9, 0xfdf8d9f8, 0xfff50d0b,
    // 14, 14, -12, 7, 15, 3, -5, 17, -13, 13, 1, -3, -17, 5, 3, 2, 4, 5, 13, 13, -8, -9, 3, -16, 3, 6, 20, -6, -17, 4, -1, 8
    0x7f40e0e, 0x11fb030f, 0xfd010df3, 0x20305ef, 0xd0d0504, 0xf003f7f8, 0xfa140603, 0x8ff04ef,
    // -22, 11, 18, 12, 7, 12, -7, 10, -19, 15, 26, 14, 13, 20, 2, 25, 4, 6, 31, 16, -2, 7, -3, -8, -11, 7, 17, 5, 10, 17, -11, 21
    0xc120bea, 0xaf90c07, 0xe1a0fed, 0x1902140d, 0x101f0604, 0xf8fd07fe, 0x51107f5, 0x15f5110a,
    // -14, -15, 17, 9, 7, 4, 6, 14, -14, 7, 26, 3, 22, 21, 9, 5, -70, 40, -48, 9, -22, 1, 24, 8, -37, 105, 8, 30, 10, 20, -16, 57
    0x911f1f2, 0xe060407, 0x31a07f2, 0x5091516, 0x9d028ba, 0x81801ea, 0x1e0869db, 0x39f0140a,
    // -19, 3, 8, 2, 8, 3, 3, 3, -17, 11, 31, 6, 3, 10, 2, 18, -6, 11, 17, 13, 2, -9, -12, -6, -1, 9, 27, 3, 15, 11, 10, 0
    0x20803ed, 0x3030308, 0x61f0bef, 0x12020a03, 0xd110bfa, 0xfaf4f702, 0x31b09ff, 0xa0b0f,
    // -14, -1, 16, 15, 3, 5, 0, 12, -5, 28, 20, -9, 6, 21, -5, 5, 4, 6, 4, 16, -6, -5, 1, -5, 10, -1, 20, -3, 6, 9, -4, 16
    0xf10fff2, 0xc000503, 0xf7141cfb, 0x5fb1506, 0x10040604, 0xfb01fbfa, 0xfd14ff0a, 0x10fc0906,
    // -4, -13, -1, -9, 14, 19, -9, 10, -3, -23, 6, -2, 3, 6, 0, 8, 12, -9, 16, -11, -4, -29, 5, -27, 0, 12, 15, 1, -21, -1, -33, -14
    0xf7fff3fc, 0xaf7130e, 0xfe06e9fd, 0x8000603, 0xf510f70c, 0xe505e3fc, 0x10f0c00, 0xf2dfffeb,
    // -9, 9, 10, -28, -1, 8, -15, 10, -3, -19, -13, 0, -4, 16, -12, -12, 4, 25, 36, 14, 5, -15, -5, -1, -1, -14, -17, -11, 31, -28, -10, -26
    0xe40a09f7, 0xaf108ff, 0xf3edfd, 0xf4f410fc, 0xe241904, 0xfffbf105, 0xf5eff2ff, 0xe6f6e41f,
    // 26, 5, -95, -10, 27, 1, -13, 13, -113, 26, -39, 11, -2, -5, 53, -17, 14, 16, 17, -29, -28, -17, -2, 3, 27, -13, 4, -12, 8, -9, -9, -11
    0xf6a1051a, 0xdf3011b, 0xbd91a8f, 0xef35fbfe, 0xe311100e, 0x3feefe4, 0xf404f31b, 0xf5f7f708,
    // -24, 25, 6, -4, 9, 12, -27, 15, 5, -39, -2, -3, 11, 10, 10, -7, 5, 28, 24, 14, -28, -8, -17, -2, 15, -22, 4, -1, 41, -22, 6, -26
    0xfc0619e8, 0xfe50c09, 0xfdfed905, 0xf90a0a0b, 0xe181c05, 0xfeeff8e4, 0xff04ea0f, 0xe606ea29,
    // -10, -12, -2, -16, 13, 14, 11, 26, 18, -2, -1, -4, 9, 6, 14, 7, -4, 8, 12, 0, 2, -9, 4, 7, 4, 15, -13, -4, 11, 5, -2, 4
    0xf0fef4f6, 0x1a0b0e0d, 0xfcfffe12, 0x70e0609, 0xc08fc, 0x704f702, 0xfcf30f04, 0x4fe050b,
    // -10, 8, -15, 9, 4, -6, 11, -1, -11, 16, 4, -11, 6, 12, 10, 12, 4, 2, -5, 12, -6, -3, 14, -8, -4, 15, -1, -8, -5, 9, 4, 2
    0x9f108f6, 0xff0bfa04, 0xf50410f5, 0xc0a0c06, 0xcfb0204, 0xf80efdfa, 0xf8ff0ffc, 0x20409fb,
    // -9, 18, -1, -22, -9, 2, 0, 10, 10, 17, -14, -13, 18, 6, -9, 8, -7, 47, -97, -6, 3, 16, 25, -53, -13, 55, -5, -49, 25, 21, 0, 22
    0xeaff12f7, 0xa0002f7, 0xf3f2110a, 0x8f70612, 0xfa9f2ff9, 0xcb191003, 0xcffb37f3, 0x16001519,
    // -8, 7, -16, 7, 6, 5, 19, -12, -26, 22, -4, -8, -11, 14, 1, 1, -2, 18, 11, -1, 0, -2, -2, 7, -2, 3, -13, -4, 4, -12, -8, -6
    0x7f007f8, 0xf4130506, 0xf8fc16e6, 0x1010ef5, 0xff0b12fe, 0x7fefe00, 0xfcf303fe, 0xfaf8f404,
    // -11, 7, 0, -2, 9, -7, -21, 1, -7, 19, -3, -1, -1, 4, -17, 6, -4, 34, 15, -1, -11, -4, -21, -1, -8, -15, -4, 1, 5, 2, -4, -7
    0xfe0007f5, 0x1ebf909, 0xfffd13f9, 0x6ef04ff, 0xff0f22fc, 0xffebfcf5, 0x1fcf1f8, 0xf9fc0205,
    // -9, 3, 0, 4, 11, -12, 11, 6, -3, 0, -19, 0, -9, 8, -6, -21, 13, 7, 9, 7, -6, 2, 1, 5, 17, 4, -23, -10, -3, 4, 35, 17
    0x40003f7, 0x60bf40b, 0xed00fd, 0xebfa08f7, 0x709070d, 0x50102fa, 0xf6e90411, 0x112304fd,
    // 0, 7, 0, -14, 7, 5, -12, -16, -14, -8, -12, 24, 10, -11, 25, 11, 8, 20, -8, -20, -18, -7, -9, 23, -21, -9, -6, -15, 5, 22, 26, -17
    0xf2000700, 0xf0f40507, 0x18f4f8f2, 0xb19f50a, 0xecf81408, 0x17f7f9ee, 0xf1faf7eb, 0xef1a1605,
    // 76, -14, 16, -6, -3, 3, -46, -19, -5, 80, -38, -7, 6, -12, -67, 85, 12, 6, 5, 11, 1, 4, -6, -11, -3, 6, -7, 5, -15, 1, 32, 22
    0xfa10f24c, 0xedd203fd, 0xf9da50fb, 0x55bdf406, 0xb05060c, 0xf5fa0401, 0x5f906fd, 0x162001f1,
    // -14, 0, -22, -5, -2, -4, 7, 15, -18, -29, -6, -3, -15, 20, -17, 2, 19, -3, 8, -3, -3, -3, -3, 0, -29, 17, -11, -13, -22, 39, 9, -8
    0xfbea00f2, 0xf07fcfe, 0xfdfae3ee, 0x2ef14f1, 0xfd08fd13, 0xfdfdfd, 0xf3f511e3, 0xf80927ea,
    // -6, 10, -6, -2, -11, -3, -9, 4, -4, -15, -7, 2, 9, 2, 6, -6, -10, -13, -4, -17, 19, -24, 6, -10, -2, -13, -20, 13, 10, -10, -13, 4
    0xfefa0afa, 0x4f7fdf5, 0x2f9f1fc, 0xfa060209, 0xeffcf3f6, 0xf606e813, 0xdecf3fe, 0x4f3f60a,
    // 56, 9, -13, 14, -22, 38, 21, 14, -41, -5, -5, 1, 1, 11, 13, -26, -3, -24, -22, 11, 0, -2, -12, 12, 9, -6, -13, -29, 7, 13, -8, -10
    0xef30938, 0xe1526ea, 0x1fbfbd7, 0xe60d0b01, 0xbeae8fd, 0xcf4fe00, 0xe3f3fa09, 0xf6f80d07,
    // 25, 11, -26, 0, -59, 16, 18, 30, -36, -28, -11, 8, -4, 49, -5, 32, -85, 84, 55, 30, 40, -77, -35, 39, 8, 62, 53, -19, 13, -38, 115, 51
    0xe60b19, 0x1e1210c5, 0x8f5e4dc, 0x20fb31fc, 0x1e3754ab, 0x27ddb328, 0xed353e08, 0x3373da0d,
    // 28, -1, -31, 26, 23, 31, 27, 20, -60, -5, 6, 23, -12, 20, -10, -20, -9, -2, 2, -2, 1, -26, -6, -31, 8, -8, 0, -3, 23, -16, -14, -44
    0x1ae1ff1c, 0x141b1f17, 0x1706fbc4, 0xecf614f4, 0xfe02fef7, 0xe1fae601, 0xfd00f808, 0xd4f2f017,
    // 10, -8, -18, 1, 14, -1, 3, 15, -40, -4, -24, 6, -12, 22, -17, 5, -9, 14, -7, -14, -19, -21, -21, -8, 3, -38, -11, -2, -9, 13, -26, 2
    0x1eef80a, 0xf03ff0e, 0x6e8fcd8, 0x5ef16f4, 0xf2f90ef7, 0xf8ebebed, 0xfef5da03, 0x2e60df7,
    // 13, 9, -13, 0, -3, 11, -24, -13, -33, -12, 7, 8, -2, 7, 6, -6, -3, 23, -31, 2, 16, -9, -49, 31, -9, -18, -17, -16, -31, 10, 3, -8
    0xf3090d, 0xf3e80bfd, 0x807f4df, 0xfa0607fe, 0x2e117fd, 0x1fcff710, 0xf0efeef7, 0xf8030ae1,
    // 29, 10, -1, -11, 3, -3, -15, 12, -31, -15, -7, 14, 26, 10, 8, -13, 1, 5, -18, -20, 15, -23, -15, -18, -16, 1, 27, 1, -11, 0, 22, 2
    0xf5ff0a1d, 0xcf1fd03, 0xef9f1e1, 0xf3080a1a, 0xecee0501, 0xeef1e90f, 0x11b01f0, 0x21600f5,
    // -18, 24, 23, 29, -67, -6, 66, 7, -97, 6, -45, 17, 0, 11, -57, -18, 0, 22, -9, -22, 11, -19, -21, 23, -11, -16, 3, 1, 17, 24, 8, 7
    0x1d1718ee, 0x742fabd, 0x11d3069f, 0xeec70b00, 0xeaf71600, 0x17ebed0b, 0x103f0f5, 0x7081811,
    // 30, -17, -41, -4, -19, -8, 46, 3, -18, -18, 22, -7, 1, 39, -10, 61, 21, 22, -39, -1, -4, -28, 8, 15, 0, -4, 18, -6, -15, 13, 18, 32
    0xfcd7ef1e, 0x32ef8ed, 0xf916eeee, 0x3df62701, 0xffd91615, 0xf08e4fc, 0xfa12fc00, 0x20120df1,
    // 15, -25, -15, 6, 19, -4, 12, -17, -43, 21, 7, 14, 6, 16, 2, -7, -9, -15, -9, 6, 13, 2, 12, 5, -9, 6, 0, -3, 14, -7, -6, -14
    0x6f1e70f, 0xef0cfc13, 0xe0715d5, 0xf9021006, 0x6f7f1f7, 0x50c020d, 0xfd0006f7, 0xf2faf90e,
    // -16, -9, 3, 5, 15, 3, -14, 1, 16, 3, 17, 9, -38, -13, -17, 1, -20, -8, -11, 2, 0, 3, -16, 16, 7, -16, 5, -4, 18, -10, -5, -7
    0x503f7f0, 0x1f2030f, 0x9110310, 0x1eff3da, 0x2f5f8ec, 0x10f00300, 0xfc05f007, 0xf9fbf612,
    // -11, 11, -7, 9, -3, -16, 25, -1, 1, 18, 8, -3, -25, -7, 3, -13, -10, 50, -6, 47, 18, -25, -19, 37, -3, 57, -29, -51, 20, 103, -62, -25
    0x9f90bf5, 0xff19f0fd, 0xfd081201, 0xf303f9e7, 0x2ffa32f6, 0x25ede712, 0xcde339fd, 0xe7c26714,
    // -17, 0, 26, -15, 6, 17, 10, 32, 32, 11, 12, -4, 16, -28, 19, -2, 1, 16, 4, 5, -8, -3, 26, 11, -26, -3, 3, 3, 4, -14, -6, -23
    0xf11a00ef, 0x200a1106, 0xfc0c0b20, 0xfe13e410, 0x5041001, 0xb1afdf8, 0x303fde6, 0xe9faf204,
    // -17, 27, 1, 1, -16, -1, 9, 14, 6, 0, 8, 2, -17, -13, 15, -16, -13, -19, -3, -6, 5, 0, 5, -6, -11, 5, -4, 3, -6, -12, 3, -17
    0x1011bef, 0xe09fff0, 0x2080006, 0xf00ff3ef, 0xfafdedf3, 0xfa050005, 0x3fc05f5, 0xef03f4fa,
    // -8, -12, 24, -10, -12, 13, 0, -10, -3, 3, 24, -2, 23, -20, 20, -30, -2, 25, 21, 6, 20, -2, -16, 3, -20, -11, 33, -14, 15, -21, 1, -21
    0xf618f4f8, 0xf6000df4, 0xfe1803fd, 0xe214ec17, 0x61519fe, 0x3f0fe14, 0xf221f5ec, 0xeb01eb0f,
    // -1, -3, 0, 7, 4, -2, 12, -21, -1, 9, 21, -9, -8, -16, 17, -13, 4, -4, 0, -10, 27, 10, -25, 13, 3, 7, 6, -13, -3, -44, 17, -34
    0x700fdff, 0xeb0cfe04, 0xf71509ff, 0xf311f0f8, 0xf600fc04, 0xde70a1b, 0xf3060703, 0xde11d4fd,
    // 51, 96, 29, -33, 19, 3, -24, 35, 5, 6, -12, -51, -38, 42, -13, -40, 3, 8, 1, 8, 26, -4, 25, -3, -14, 18, 6, -19, -18, -27, 5, -39
    0xdf1d6033, 0x23e80313, 0xcdf40605, 0xd8f32ada, 0x8010803, 0xfd19fc1a, 0xed0612f2, 0xd905e5ee,
    // 1, -13, -5, -13, 4, 1, 15, -4, 3, 15, 17, 4, -8, -10, 7, -17, 13, -2, 9, -5, 28, 10, -14, 7, -3, 7, 26, -8, 6, -20, 2, -11
    0xf3fbf301, 0xfc0f0104, 0x4110f03, 0xef07f6f8, 0xfb09fe0d, 0x7f20a1c, 0xf81a07fd, 0xf502ec06,
    // 3, 2, 17, 1, 5, 11, -10, -12, -4, -1, 9, -2, -11, -25, 7, -18, -1, 11, 29, 2, 10, -8, 15, 10, 14, 9, -28, -8, 17, 19, 4, 20
    0x1110203, 0xf4f60b05, 0xfe09fffc, 0xee07e7f5, 0x21d0bff, 0xa0ff80a, 0xf8e4090e, 0x14041311,
    // 16, -5, 9, 16, 15, -16, 31, 9, -5, 20, -30, -16, -25, 19, 0, -4, 19, 8, 10, 17, -8, 7, 24, 2, 20, 27, -33, -14, -11, 25, 21, 17
    0x1009fb10, 0x91ff00f, 0xf0e214fb, 0xfc0013e7, 0x110a0813, 0x21807f8, 0xf2df1b14, 0x111519f5,
    // 15, 32, 28, -7, 4, -32, 22, -3, 0, -24, -19, 13, 35, 20, -13, 20, 10, -76, 0, 27, -18, 19, 22, 58, -59, -19, 24, 0, -54, 23, 32, -6
    0xf91c200f, 0xfd16e004, 0xdede800, 0x14f31423, 0x1b00b40a, 0x3a1613ee, 0x18edc5, 0xfa2017ca,
    // 19, 27, -30, 11, -1, 1, 0, -5, -21, -8, -22, 14, -37, 25, 16, 8, -2, 45, 49, 10, -9, -3, -1, 3, 8, -43, -6, -1, 16, 38, -22, 37
    0xbe21b13, 0xfb0001ff, 0xeeaf8eb, 0x81019db, 0xa312dfe, 0x3fffdf7, 0xfffad508, 0x25ea2610,
    // 3, 53, 1, 4, -5, -10, -18, 10, 8, -60, -16, 16, -13, 25, -42, 22, -2, 45, 21, 3, -17, 12, -35, -3, 13, -34, -14, 6, -2, 17, -5, 23
    0x4013503, 0xaeef6fb, 0x10f0c408, 0x16d619f3, 0x3152dfe, 0xfddd0cef, 0x6f2de0d, 0x17fb11fe,
    // -4, -15, -4, -6, 1, 0, 12, 5, 2, -9, -3, -2, 19, 1, -5, -16, -7, 8, -6, 6, 13, -15, -8, -4, 18, 7, 9, 0, 15, -11, 3, 1
    0xfafcf1fc, 0x50c0001, 0xfefdf702, 0xf0fb0113, 0x6fa08f9, 0xfcf8f10d, 0x90712, 0x103f50f,
    // -5, -5, -8, -16, -6, -13, 7, -15, 2, -12, 1, 13, 5, 2, 2, -6, -9, 12, 21, -11, 5, 1, -18, -6, 5, -7, -1, -6, 23, -16, -1, -20
    0xf0f8fbfb, 0xf107f3fa, 0xd01f402, 0xfa020205, 0xf5150cf7, 0xfaee0105, 0xfafff905, 0xecfff017,
    // 26, -2, 30, 36, 36, 68, 124, 14, 13, -36, 13, 24, -80, 2, -11, 60, -6, 12, -13, 3, -13, -2, -8, -23, 8, -5, 11, -4, -1, -12, 8, 6
    0x241efe1a, 0xe7c4424, 0x180ddc0d, 0x3cf502b0, 0x3f30cfa, 0xe9f8fef3, 0xfc0bfb08, 0x608f4ff,
    // -7, -3, -4, -9, -6, 3, -6, 6, 0, -22, -12, 4, 11, -11, -7, -6, -3, 15, 23, -1, 4, 2, -32, -15, -3, -5, 8, 3, 1, -20, -13, -25
    0xf7fcfdf9, 0x6fa03fa, 0x4f4ea00, 0xfaf9f50b, 0xff170ffd, 0xf1e00204, 0x308fbfd, 0xe7f3ec01,
    // -8, 2, 1, -10, -11, -1, -5, 5, 6, -23, -6, -4, 15, -8, 1, -17, 8, -2, -18, 10, -5, 7, -18, 10, -24, -2, -14, 10, -20, 14, 7, 24
    0xf60102f8, 0x5fbfff5, 0xfcfae906, 0xef01f80f, 0xaeefe08, 0xaee07fb, 0xaf2fee8, 0x18070eec,
    // 10, 37, -5, -10, -17, -26, -13, 7, -8, -6, -38, -13, -23, 28, -21, 15, 6, 17, 12, -22, -5, -13, -12, 9, -16, -8, -21, 12, -18, 8, -5, -3
    0xf6fb250a, 0x7f3e6ef, 0xf3dafaf8, 0xfeb1ce9, 0xea0c1106, 0x9f4f3fb, 0xcebf8f0, 0xfdfb08ee,
    // 19, -25, -27, 31, -26, 13, 4, 10, -16, 3, 1, 2, 0, 26, 0, 28, -32, 51, 46, -41, 8, 4, 63, 4, -65, 2, -6, -82, -4, 45, -61, 18
    0x1fe5e713, 0xa040de6, 0x20103f0, 0x1c001a00, 0xd72e33e0, 0x43f0408, 0xaefa02bf, 0x12c32dfc,
    // 12, 21, 9, -12, -23, -16, 12, -2, -9, 13, -15, 17, 4, -2, -25, -4, 1, -29, -21, -6, -9, -1, -10, 1, -11, 29, -19, 1, -16, 3, 41, 9
    0xf409150c, 0xfe0cf0e9, 0x11f10df7, 0xfce7fe04, 0xfaebe301, 0x1f6fff7, 0x1ed1df5, 0x92903f0,
    // 9, -29, -11, 18, -12, 3, -4, 6, -27, 22, -15, -11, 8, 25, 27, 36, 19, -31, 3, -6, 0, -1, 33, 12, -5, 22, -14, -17, 4, 5, 23, 15
    0x12f5e309, 0x6fc03f4, 0xf5f116e5, 0x241b1908, 0xfa03e113, 0xc21ff00, 0xeff216fb, 0xf170504,
};
static const uint embedded_encoder2_ResidualBlock_1_body_conv_dw_bias_dwords[8] = {
    // -0.06824, 0.002499, 0.03918, -0.006813, 0.02611, -0.001472, 0.01079, -0.0241, 0.05585, 0.04398, 0.0491, -0.0709, -0.0299, -0.04822, -0.02112, 0.01749
    0x191eac5e, 0x9efa2904, 0x960826af, 0xa62b2186, 0x29a12b26, 0xac8a2a49, 0xaa2ca7a8, 0x247aa568,
};
static const uint embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -90, 4, 78, 37, -62, 14, -107, 24, -17, 15, -30, -40, 0, -65, -33, 38, -16, 19, 6, -9, -27, -19, -38, 20, 50, 5, 5, -25, -95, 76, -31, 81
    0x254e04a6, 0x18950ec2, 0xd8e20fef, 0x26dfbf00, 0xf70613f0, 0x14daede5, 0xe7050532, 0x51e14ca1,
    // -83, 51, -18, -48, -49, -8, 28, -75, -11, -11, 13, 40, 3, -55, -58, 33, -12, 48, 48, 81, 43, -5, 31, 24, -12, 9, -7, 23, -7, -2, 83, 11
    0xd0ee33ad, 0xb51cf8cf, 0x280df5f5, 0x21c6c903, 0x513030f4, 0x181ffb2b, 0x17f909f4, 0xb53fef9,
    // 3, -25, 4, -12, 5, 94, 0, 3, 1, 4, 1, -22, -60, -12, 10, -31, 0, 26, -19, 43, 21, -6, 21, -73, 36, -35, -48, -2, 3, 48, 98, -22
    0xf404e703, 0x3005e05, 0xea010401, 0xe10af4c4, 0x2bed1a00, 0xb715fa15, 0xfed0dd24, 0xea623003,
    // -2, 2, -2, -4, 99, 11, -21, 10, -58, -71, 16, -26, 2, 40, -47, -17, 17, 102, 37, -32, 9, -4, 31, -15, -39, -3, -16, -43, -24, 33, 119, -55
    0xfcfe02fe, 0xaeb0b63, 0xe610b9c6, 0xefd12802, 0xe0256611, 0xf11ffc09, 0xd5f0fdd9, 0xc97721e8,
    // -96, -27, 80, -19, 29, -22, 14, -1, 59, -45, -72, 24, 3, 14, 50, -25, -11, 9, -20, -44, -73, 5, 14, -7, -64, 41, 24, 4, 24, 33, -32, 1
    0xed50e5a0, 0xff0eea1d, 0x18b8d33b, 0xe7320e03, 0xd4ec09f5, 0xf90e05b7, 0x41829c0, 0x1e02118,
    // -74, 60, 39, -68, 91, 6, 5, -36, 22, -25, 0, 28, -20, -55, 76, 10, -4, -36, 43, -76, -11, 29, -74, -8, -41, 24, -20, -44, 19, -41, 46, 39
    0xbc273cb6, 0xdc05065b, 0x1c00e716, 0xa4cc9ec, 0xb42bdcfc, 0xf8b61df5, 0xd4ec18d7, 0x272ed713,
    // 9, 75, 51, -31, 0, -23, -17, -3, 33, 2, -15, 20, -35, -19, -93, -62, -14, 92, -28, 5, -11, 35, -69, 30, 63, 52, 1, 56, -16, -19, 81, -13
    0xe1334b09, 0xfdefe900, 0x14f10221, 0xc2a3eddd, 0x5e45cf2, 0x1ebb23f5, 0x3801343f, 0xf351edf0,
    // 23, -28, 31, -1, 5, -19, -35, 60, 12, 33, -33, -18, 23, 61, 62, -40, 8, -28, -45, 45, -36, -4, -21, -66, -25, 15, 6, 33, -26, 21, -58, 6
    0xff1fe417, 0x3cdded05, 0xeedf210c, 0xd83e3d17, 0x2dd3e408, 0xbeebfcdc, 0x21060fe7, 0x6c615e6,
    // 48, -17, -36, 9, -50, 24, -23, 6, -84, -24, -97, 102, 33, -69, 11, -36, 12, 31, 46, -108, 31, 48, -11, 53, -36, 5, 5, 19, 16, 2, 55, 49
    0x9dcef30, 0x6e918ce, 0x669fe8ac, 0xdc0bbb21, 0x942e1f0c, 0x35f5301f, 0x130505dc, 0x31370210,
    // 11, 34, 47, 3, 17, -24, -28, 22, 39, -10, -48, -30, -4, -3, 86, -18, 15, -11, -37, -15, -83, 21, -11, 10, 41, -111, 31, 22, -22, -3, 121, 4
    0x32f220b, 0x16e4e811, 0xe2d0f627, 0xee56fdfc, 0xf1dbf50f, 0xaf515ad, 0x161f9129, 0x479fdea,
    // -1, 9, 15, 5, -13, 34, 61, 43, -43, -75, -66, -36, -17, 58, -37, -18, -19, 90, -39, -59, 12, -34, -66, -40, -40, 15, -4, -45, -25, -31, 42, -21
    0x50f09ff, 0x2b3d22f3, 0xdcbeb5d5, 0xeedb3aef, 0xc5d95aed, 0xd8bede0c, 0xd3fc0fd8, 0xeb2ae1e7,
    // -4, -53, -6, -42, 19, -47, 15, -18, -28, -24, -1, -49, -25, -7, -17, -60, -37, 72, 36, -38, 21, 28, -28, 96, 29, -37, -31, -8, 6, -27, -17, 7
    0xd6facbfc, 0xee0fd113, 0xcfffe8e4, 0xc4eff9e7, 0xda2448db, 0x60e41c15, 0xf8e1db1d, 0x7efe506,
    // -44, 35, -36, 6, -1, 18, -51, -26, 16, 19, -33, -14, 3, 36, 87, -19, -24, -9, -28, 43, 109, 0, -13, 16, -42, 71, -89, -8, -58, 2, -77, -9
    0x6dc23d4, 0xe6cd12ff, 0xf2df1310, 0xed572403, 0x2be4f7e8, 0x10f3006d, 0xf8a747d6, 0xf7b302c6,
    // -30, -36, 11, 1, 28, -10, -11, -22, -58, -40, -18, -20, -34, -2, 80, 23, -14, -4, 82, 41, 5, 102, -112, -8, -70, -18, 31, 81, -91, 34, -12, -24
    0x10bdce2, 0xeaf5f61c, 0xeceed8c6, 0x1750fede, 0x2952fcf2, 0xf8906605, 0x511feeba, 0xe8f422a5,
    // 15, 58, -3, -71, 19, -4, 24, 70, -14, 1, -7, -40, -15, -28, 46, -3, -16, 19, 82, 40, -1, 42, 34, 37, 27, 9, 32, 20, 15, -21, -71, -21
    0xb9fd3a0f, 0x4618fc13, 0xd8f901f2, 0xfd2ee4f1, 0x285213f0, 0x25222aff, 0x1420091b, 0xebb9eb0f,
    // -10, 23, 84, -128, -52, -50, -49, 45, -8, -8, 25, 50, 21, -16, -47, 19, -76, 4, 28, 2, 11, -36, -93, -32, 25, -36, -25, -48, 31, -33, -12, -1
    0x805417f6, 0x2dcfcecc, 0x3219f8f8, 0x13d1f015, 0x21c04b4, 0xe0a3dc0b, 0xd0e7dc19, 0xfff4df1f,
};
static const uint embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords[16] = {
    // 0.1002, -0.02812, 0.01645, 0.02681, -0.02206, -0.2903, 0.02022, 0.1421, -0.00863, -0.0782, -0.0609, 0.02652, 0.04193, 0.01692, 0.1616, -0.3337
    0xa7332e6a, 0x26dd2436, 0xb4a5a5a6, 0x308c252d, 0xad01a06b, 0x26caabcc, 0x2455295e, 0xb557312c,
    // -0.2632, 0.01418, -0.0401, -0.04416, -0.07294, -0.003878, -0.287, -0.04468, 0.02155, -0.07416, 0.06015, -0.0522, 0.04492, -0.002634, -0.1091, -0.02238
    0x2343b436, 0xa9a7a922, 0x9bf1acab, 0xa9b8b498, 0xacbf2584, 0xaaae2bb3, 0x996529c0, 0xa5bbaefb,
};
static const uint embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -20, -95, -20, -51, -11, 1, -45, -16, 36, 60, 5, 32, 27, -45, 10, -26, -72, 20, 86, 69, 18, -68, 1, -28, 4, 76, 80, -7, -15, 27, 113, 20
    0xcdeca1ec, 0xf0d301f5, 0x20053c24, 0xe60ad31b, 0x455614b8, 0xe401bc12, 0xf9504c04, 0x14711bf1,
    // 8, -48, 29, 27, 3, 26, 11, 3, -37, -31, 67, 36, -36, 45, -35, 28, -53, 97, 3, -79, 26, 36, 59, 56, -38, -93, 1, -28, 65, 16, -128, -53
    0x1b1dd008, 0x30b1a03, 0x2443e1db, 0x1cdd2ddc, 0xb10361cb, 0x383b241a, 0xe401a3da, 0xcb801041,
    // 0, 28, 33, 19, -33, -53, 10, -14, -19, -24, 23, -47, -10, -13, -34, -33, 36, -28, -52, 35, 12, 45, 52, -58, 43, 30, -17, -14, -71, -13, 27, 32
    0x13211c00, 0xf20acbdf, 0xd117e8ed, 0xdfdef3f6, 0x23cce424, 0xc6342d0c, 0xf2ef1e2b, 0x201bf3b9,
    // -49, -42, -16, 40, 49, -5, -6, 58, -96, -62, -14, -50, 65, 92, 21, 19, -83, -15, 4, -8, 49, 90, 23, -23, 35, 41, -30, 79, 23, 81, -35, -47
    0x28f0d6cf, 0x3afafb31, 0xcef2c2a0, 0x13155c41, 0xf804f1ad, 0xe9175a31, 0x4fe22923, 0xd1dd5117,
    // -44, 73, -36, 57, -64, 33, -99, 40, 65, 19, 91, -50, 12, -21, 10, 14, 76, 104, -61, 68, 48, -59, 10, -39, -86, 51, 49, -69, -8, 59, -13, -93
    0x39dc49d4, 0x289d21c0, 0xce5b1341, 0xe0aeb0c, 0x44c3684c, 0xd90ac530, 0xbb3133aa, 0xa3f33bf8,
    // -28, 21, -82, 39, -50, 28, 24, 47, 48, -13, 5, -72, -36, -10, 61, 66, 21, 84, -16, 90, 47, -30, 38, 30, -22, 97, -36, 19, 25, 38, 15, -59
    0x27ae15e4, 0x2f181cce, 0xb805f330, 0x423df6dc, 0x5af05415, 0x1e26e22f, 0x13dc61ea, 0xc50f2619,
    // 1, -39, -12, -7, 15, 5, -7, 10, -27, -48, -44, 36, -87, 27, 15, 28, -43, 108, 30, -30, -17, 51, 5, -17, 34, 35, -17, 67, 54, -5, 28, -33
    0xf9f4d901, 0xaf9050f, 0x24d4d0e5, 0x1c0f1ba9, 0xe21e6cd5, 0xef0533ef, 0x43ef2322, 0xdf1cfb36,
    // 3, 10, 12, 43, -15, -98, 48, 3, 38, 0, -26, -21, -17, -2, 11, -59, -6, -102, 75, -82, 26, -15, 6, -70, 63, -109, 36, 45, -44, -35, -12, -5
    0x2b0c0a03, 0x3309ef1, 0xebe60026, 0xc50bfeef, 0xae4b9afa, 0xba06f11a, 0x2d24933f, 0xfbf4ddd4,
    // 50, -48, -28, -55, 41, -41, -53, -26, 20, -16, -52, -5, -2, -4, 19, 15, -69, -50, -49, -45, -34, -17, -4, -7, 39, -37, -15, 35, -35, 31, -9, 72
    0xc9e4d032, 0xe6cbd729, 0xfbccf014, 0xf13fcfe, 0xd3cfcebb, 0xf9fcefde, 0x23f1db27, 0x48f71fdd,
    // 17, -21, 6, -16, 21, 9, 54, -39, 27, 51, 3, -3, 6, 27, 10, 10, -39, 15, 7, -27, 58, -57, 58, 56, -37, -22, -52, -2, -19, 13, -28, 34
    0xf006eb11, 0xd9360915, 0xfd03331b, 0xa0a1b06, 0xe5070fd9, 0x383ac73a, 0xfecceadb, 0x22e40ded,
    // -42, -42, -37, 28, -29, -55, 47, 29, 6, 73, -14, 2, -4, -71, 13, -5, -102, 16, 77, 90, -29, -19, -2, -59, 35, 98, 76, -22, -52, -70, 4, -41
    0x1cdbd6d6, 0x1d2fc9e3, 0x2f24906, 0xfb0db9fc, 0x5a4d109a, 0xc5feede3, 0xea4c6223, 0xd704bacc,
    // -12, -32, 12, -10, 94, -39, 4, -6, 20, -40, 19, 1, -9, -11, -17, -31, -15, 20, -67, -69, 43, 4, -27, -47, 28, -61, 10, -19, -44, 22, -34, 31
    0xf60ce0f4, 0xfa04d95e, 0x113d814, 0xe1eff5f7, 0xbbbd14f1, 0xd1e5042b, 0xed0ac31c, 0x1fde16d4,
    // -29, -11, 21, 82, -41, 37, 20, 49, 3, 21, 5, -76, 93, 20, -25, 9, -27, -57, 35, 38, -74, -12, 2, 95, 0, 17, -60, 36, 35, -52, 6, -80
    0x5215f5e3, 0x311425d7, 0xb4051503, 0x9e7145d, 0x2623c7e5, 0x5f02f4b6, 0x24c41100, 0xb006cc23,
    // 12, 19, -5, 41, -8, 6, 26, -3, 17, 17, -10, 3, -36, 14, 9, 6, 35, -31, 14, -121, -17, -8, 20, -9, -1, -101, 4, 2, 6, -11, -73, 10
    0x29fb130c, 0xfd1a06f8, 0x3f61111, 0x6090edc, 0x870ee123, 0xf714f8ef, 0x2049bff, 0xab7f506,
    // -107, 23, -46, -41, 49, -33, 10, 119, -59, -28, -10, 68, -38, 32, 30, 13, 43, 42, 29, -108, 26, 30, 6, -18, 29, -73, -12, -111, 37, -61, 13, -78
    0xd7d21795, 0x770adf31, 0x44f6e4c5, 0xd1e20da, 0x941d2a2b, 0xee061e1a, 0x91f4b71d, 0xb20dc325,
    // 16, -11, -20, -45, 93, -18, -33, -28, 16, -10, -10, 28, -44, 51, 40, 25, 5, 29, 17, -23, 30, -31, 39, 20, 45, -18, -46, -5, -38, 12, -27, 53
    0xd3ecf510, 0xe4dfee5d, 0x1cf6f610, 0x192833d4, 0xe9111d05, 0x1427e11e, 0xfbd2ee2d, 0x35e50cda,
};
static const uint embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords[8] = {
    // -0.05658, 0.015045, 0.03152, 0.00606, -0.01067, -0.01445, -0.0381, -0.0662, 0.08167, 0.00319, 0.11084, 0.02057, 0.0961, -0.00471, 0.0518, 0.02403
    0x23b4ab3e, 0x1e352809, 0xa366a177, 0xac3da8e0, 0x1a882d3a, 0x25442f18, 0x9cd32e27, 0x26272aa1,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass2(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(3840, 2160, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(3840, 2160, 16), // threadGroupSliceSize
        uint3(3840, 2160, 16), // storageSize
        uint3(16, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        132710400, // threadGroupStorageByteOffset
        0.024305112659931183, storage_fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0054812952876091, storage_embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_1_body_conv_dw_bias = { embedded_encoder2_ResidualBlock_1_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_1_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_1_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005539849866181612, storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias = { embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005547042936086655, storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias = { embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias };
    
    // fused_quantized_NHWC_/encoder2/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_4 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_4 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 16);
    const uint3 groupSize_slice_4 = uint3(64, 1, 16);
    const uint3 storageSize_slice_4 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_4 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_4 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_4 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_4 = dot(groupStart_slice_4, tensorByteStrides_slice_4);
    const float quantizationScale_slice_4 = 0.021448098123073578;
    const RWBufferStorage storage_slice_4 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_4 = { logicalSize_slice_4, groupStart_slice_4, groupSize_slice_4, storageSize_slice_4, tensorByteStrides_slice_4, paddingBegin_slice_4, paddingEnd_slice_4, threadGroupByteOffsetInTensor_slice_4 + 0, quantizationScale_slice_4, storage_slice_4 };
    // ConvNextBlock (16, 2160, 3840), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,) -> (16, 2160, 3840)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    ConvNextBlock(25.335617768115522, 0.039470124989748, 46.476326348146195, 0.021516330540180206, fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_1_body_conv_dw_bias, embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias, embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias, slice_4, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_2
#ifdef MLSR_PASS_2_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass2_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/encoder2/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_5 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_5 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_5 = uint3(32, 1, 16);
    const uint3 storageSize_slice_5 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_5 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_5 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_5 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_5 = dot(groupStart_slice_5, tensorByteStrides_slice_5);
    const float quantizationScale_slice_5 = 0.021448098123073578;
    const RWBufferStorage storage_slice_5 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_5 = { logicalSize_slice_5, groupStart_slice_5, groupSize_slice_5, storageSize_slice_5, tensorByteStrides_slice_5, paddingBegin_slice_5, paddingEnd_slice_5, threadGroupByteOffsetInTensor_slice_5 + 0, quantizationScale_slice_5, storage_slice_5 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_5, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_2_POST


#ifdef MLSR_PASS_3
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FusedConv2D_k2s2b_QuantizedOutput.hlsli"

static const uint embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 0, -17, -27, -58, 26, 9, -34, 7, 18, 28, 2, -4, 11, 10, 5, 34, 9, -20, -2, 8, -7, -25, 64, 3, 17, 14, 5, 4, -13, -18, 27, 11
    0xc6e5ef00, 0x7de091a, 0xfc021c12, 0x22050a0b, 0x8feec09, 0x340e7f9, 0x4050e11, 0xb1beef3,
    // 3, -7, 16, -20, 19, 2, -55, -28, -8, 21, -42, -1, 3, 12, -3, 17, -7, 13, 5, 12, 3, -15, 56, 4, -9, 2, 19, 26, -13, -36, 19, -23
    0xec10f903, 0xe4c90213, 0xffd615f8, 0x11fd0c03, 0xc050df9, 0x438f103, 0x1a1302f7, 0xe913dcf3,
    // -6, -12, 20, 5, 35, -9, 44, -19, -19, -40, 4, -10, 29, 8, -28, -19, 27, -61, -23, -38, 32, 17, 30, 37, 9, 27, 26, 3, 27, 9, -3, 28
    0x514f4fa, 0xed2cf723, 0xf604d8ed, 0xede4081d, 0xdae9c31b, 0x251e1120, 0x31a1b09, 0x1cfd091b,
    // 10, -22, 5, -13, 39, 10, -4, -13, -1, -27, 19, -24, 14, 23, -24, -7, 9, -35, 26, -9, 20, 6, 25, 1, 19, 22, 27, 11, 14, 3, -7, -10
    0xf305ea0a, 0xf3fc0a27, 0xe813e5ff, 0xf9e8170e, 0xf71add09, 0x1190614, 0xb1b1613, 0xf6f9030e,
    // -1, -11, 23, -3, 11, -18, 20, -6, -4, 14, 11, 16, 9, -12, 5, -7, 2, -3, 0, -12, 25, -11, -47, -30, -1, 44, -10, 8, -4, -11, -30, 21
    0xfd17f5ff, 0xfa14ee0b, 0x100b0efc, 0xf905f409, 0xf400fd02, 0xe2d1f519, 0x8f62cff, 0x15e2f5fc,
    // 19, -50, -52, -7, 6, 29, 7, 46, -5, 1, 22, -20, -11, 14, 27, 5, -12, 1, 30, 40, -17, -5, 33, -26, -19, -35, -10, 16, -8, -20, 19, -25
    0xf9ccce13, 0x2e071d06, 0xec1601fb, 0x51b0ef5, 0x281e01f4, 0xe621fbef, 0x10f6dded, 0xe713ecf8,
    // 12, -8, -49, -12, 22, 12, 34, 26, -5, 7, 9, -27, 24, 24, 10, 19, 5, -4, 12, -7, 28, 12, 2, 51, 7, -8, -2, 6, 5, -6, 13, 4
    0xf4cff80c, 0x1a220c16, 0xe50907fb, 0x130a1818, 0xf90cfc05, 0x33020c1c, 0x6fef807, 0x40dfa05,
    // -25, 56, 15, -8, 16, -34, 70, -17, -11, -8, 0, -8, 15, -18, -19, -15, -18, 39, 48, -1, -5, -31, 31, -13, -2, -32, -27, 16, 8, -22, -5, -2
    0xf80f38e7, 0xef46de10, 0xf800f8f5, 0xf1edee0f, 0xff3027ee, 0xf31fe1fb, 0x10e5e0fe, 0xfefbea08,
    // 21, -38, -7, 19, -11, 2, 5, 14, -2, 48, 9, 8, -10, 5, 28, -4, 11, -31, -15, 18, -23, 3, 8, -5, -1, 32, -6, -36, -11, 66, 6, -2
    0x13f9da15, 0xe0502f5, 0x80930fe, 0xfc1c05f6, 0x12f1e10b, 0xfb0803e9, 0xdcfa20ff, 0xfe0642f5,
    // 4, 0, 22, -10, 9, -16, 44, 17, -15, 6, 24, 37, -16, -18, 12, 12, 23, -9, 22, -16, 8, -8, -11, -11, -7, 54, 2, 27, -17, 17, 2, 43
    0xf6160004, 0x112cf009, 0x251806f1, 0xc0ceef0, 0xf016f717, 0xf5f5f808, 0x1b0236f9, 0x2b0211ef,
    // -8, 56, 29, -9, 4, -21, 20, -36, 9, 39, -6, 24, -18, -24, -2, 7, 8, -40, -26, -26, 5, 4, 7, 26, 7, -8, 32, -7, -12, 40, 30, 36
    0xf71d38f8, 0xdc14eb04, 0x18fa2709, 0x7fee8ee, 0xe6e6d808, 0x1a070405, 0xf920f807, 0x241e28f4,
    // -18, 34, -14, 45, -30, -15, 22, -31, -39, -9, -18, -10, -10, -5, 14, -32, 24, -28, -9, 5, -6, 21, -29, 13, -12, 22, 2, -29, -3, 38, 31, 8
    0x2df222ee, 0xe116f1e2, 0xf6eef7d9, 0xe00efbf6, 0x5f7e418, 0xde315fa, 0xe30216f4, 0x81f26fd,
    // 7, 1, 20, 16, -13, -20, 3, 22, -31, -4, 29, -1, -9, 24, -4, -35, -3, 5, 15, 19, -18, -21, 12, 5, -43, -11, 24, 23, -17, 21, 3, -39
    0x10140107, 0x1603ecf3, 0xff1dfce1, 0xddfc18f7, 0x130f05fd, 0x50cebee, 0x1718f5d5, 0xd90315ef,
    // 3, -9, -10, 11, -16, -21, -20, -6, -31, 33, 27, 8, 3, 33, -13, -37, -3, 16, 14, 9, -14, -10, -12, -12, -29, -1, 9, -9, -8, 28, -20, -33
    0xbf6f703, 0xfaecebf0, 0x81b21e1, 0xdbf32103, 0x90e10fd, 0xf4f4f6f2, 0xf709ffe3, 0xdfec1cf8,
    // 27, -52, -39, 10, -4, 30, -8, 18, 11, 19, 25, -33, 2, 29, 9, 15, 5, -27, 2, 16, -3, 31, 16, -11, -26, -44, 22, -25, -7, 29, 38, -2
    0xad9cc1b, 0x12f81efc, 0xdf19130b, 0xf091d02, 0x1002e505, 0xf5101ffd, 0xe716d4e6, 0xfe261df9,
    // 28, -67, -26, 6, -11, 26, 10, 30, 31, 55, 31, -26, 19, 22, 5, 9, 5, -35, -1, 17, -8, 23, 13, 19, 11, -16, 9, -43, -8, 17, 19, -9
    0x6e6bd1c, 0x1e0a1af5, 0xe61f371f, 0x9051613, 0x11ffdd05, 0x130d17f8, 0xd509f00b, 0xf71311f8,
    // 8, -12, -53, -20, 4, 23, -10, 2, 6, -26, 14, 7, 8, -37, -1, 10, 2, -18, -44, -3, -3, 16, -32, -32, -7, -12, 1, 34, 18, -63, -12, -15
    0xeccbf408, 0x2f61704, 0x70ee606, 0xaffdb08, 0xfdd4ee02, 0xe0e010fd, 0x2201f4f9, 0xf1f4c112,
    // -8, 1, -24, 10, 6, 1, 0, -11, -3, -17, -3, 25, 16, -65, -1, -25, 6, -37, -64, -21, 24, 23, -25, -6, 0, 6, -7, -11, 9, -41, -16, -1
    0xae801f8, 0xf5000106, 0x19fdeffd, 0xe7ffbf10, 0xebc0db06, 0xfae71718, 0xf5f90600, 0xfff0d709,
    // 1, 38, -2, -22, -1, 14, -25, -38, 1, -31, 25, 42, -17, -58, -33, 1, 3, 14, 39, 28, -1, 20, -28, -8, 1, -22, 10, 14, -16, 9, -8, 19
    0xeafe2601, 0xdae70eff, 0x2a19e101, 0x1dfc6ef, 0x1c270e03, 0xf8e414ff, 0xe0aea01, 0x13f809f0,
    // 4, 14, -14, -28, 15, 22, -15, -28, -8, -39, 14, -28, -26, -19, -29, -14, 0, -25, -9, 0, 1, 34, -4, -8, -9, -34, 12, -15, -2, 60, 2, -7
    0xe4f20e04, 0xe4f1160f, 0xe40ed9f8, 0xf2e3ede6, 0xf7e700, 0xf8fc2201, 0xf10cdef7, 0xf9023cfe,
    // 5, -15, -44, 30, -7, 48, -40, 19, -23, -57, 11, -13, -17, 2, 33, -9, 15, -12, -12, 1, -28, 35, -49, -5, 8, 2, 24, 17, -27, -3, 11, 30
    0x1ed4f105, 0x13d830f9, 0xf30bc7e9, 0xf72102ef, 0x1f4f40f, 0xfbcf23e4, 0x11180208, 0x1e0bfde5,
    // 1, -1, -3, 5, -5, 21, -47, -30, 7, -45, -14, -10, 2, -6, -2, 1, -6, 32, 59, -1, -37, -9, -17, -76, 26, 8, 15, 31, -19, -30, -31, -13
    0x5fdff01, 0xe2d115fb, 0xf6f2d307, 0x1fefa02, 0xff3b20fa, 0xb4eff7db, 0x1f0f081a, 0xf3e1e2ed,
    // -1, -36, -7, 9, -13, 4, -9, -63, -4, 16, -9, -29, 11, 26, -7, -8, -4, -14, -13, -12, -1, 4, 1, -59, 7, -9, -20, -64, 6, 44, -17, -14
    0x9f9dcff, 0xc1f704f3, 0xe3f710fc, 0xf8f91a0b, 0xf4f3f2fc, 0xc50104ff, 0xc0ecf707, 0xf2ef2c06,
    // 10, -12, 0, -5, -3, -8, 3, -44, 4, 3, 0, -38, 0, 5, 3, -5, -6, 5, 16, 2, -3, -18, 24, -66, 2, -1, -21, -19, 6, 0, -7, -14
    0xfb00f40a, 0xd403f8fd, 0xda000304, 0xfb030500, 0x21005fa, 0xbe18eefd, 0xedebff02, 0xf2f90006,
    // 15, 12, -28, -39, 9, 11, -20, 18, 14, 25, 36, -2, -9, 20, -22, 22, 7, -15, -47, -16, 14, 26, -40, 24, -11, -13, 19, -20, 13, 45, -2, 21
    0xd9e40c0f, 0x12ec0b09, 0xfe24190e, 0x16ea14f7, 0xf0d1f107, 0x18d81a0e, 0xec13f3f5, 0x15fe2d0d,
    // -7, 14, 59, 40, -32, -10, -35, -23, 12, -5, -11, 16, 3, -29, -15, -31, -12, -1, 63, 40, -3, -9, -28, -13, -2, -42, -4, -23, -4, 24, -22, -31
    0x283b0ef9, 0xe9ddf6e0, 0x10f5fb0c, 0xe1f1e303, 0x283ffff4, 0xf3e4f7fd, 0xe9fcd6fe, 0xe1ea18fc,
    // 8, -20, -14, -15, 16, 11, -33, 23, 4, 17, -23, -36, 21, 30, -24, 21, 3, 3, 59, 25, -20, -31, 13, -7, 12, 38, -1, 17, -4, 1, -32, -34
    0xf1f2ec08, 0x17df0b10, 0xdce91104, 0x15e81e15, 0x193b0303, 0xf90de1ec, 0x11ff260c, 0xdee001fc,
    // -10, 4, 14, 19, 4, -1, 27, 15, -12, -67, -3, -15, -1, 40, 15, -14, 17, 1, -24, 2, -8, 14, 6, 15, 24, 31, 17, -24, 17, 42, -14, 9
    0x130e04f6, 0xf1bff04, 0xf1fdbdf4, 0xf20f28ff, 0x2e80111, 0xf060ef8, 0xe8111f18, 0x9f22a11,
    // 5, -32, 44, 5, 8, -6, 4, -44, 1, 7, 9, 44, 4, -62, 0, 13, 2, -54, 61, 9, 5, -4, 43, -21, -3, -22, 24, 42, 7, -51, 19, 10
    0x52ce005, 0xd404fa08, 0x2c090701, 0xd00c204, 0x93dca02, 0xeb2bfc05, 0x2a18eafd, 0xa13cd07,
    // 10, -46, 60, 10, 1, -4, 12, -35, 14, 4, 19, 47, -3, -66, -3, -2, 19, -62, 54, 6, 7, -2, 2, -3, 17, 8, 23, 26, -7, -54, 14, 6
    0xa3cd20a, 0xdd0cfc01, 0x2f13040e, 0xfefdbefd, 0x636c213, 0xfd02fe07, 0x1a170811, 0x60ecaf9,
    // -2, 30, -33, -35, 22, 13, 32, -6, -9, 2, 24, -11, -9, 22, -7, -2, -27, 14, 20, 15, -4, -20, 55, -22, 13, -77, -1, -2, 10, -18, 25, -5
    0xdddf1efe, 0xfa200d16, 0xf51802f7, 0xfef916f7, 0xf140ee5, 0xea37ecfc, 0xfeffb30d, 0xfb19ee0a,
    // -7, -21, -21, 3, 18, -2, -5, -7, -8, 16, -18, -56, -1, 15, 7, -12, 12, -28, 61, -7, 33, 8, -49, 5, 10, 42, -2, 7, -22, 25, -32, 10
    0x3ebebf9, 0xf9fbfe12, 0xc8ee10f8, 0xf4070fff, 0xf93de40c, 0x5cf0821, 0x7fe2a0a, 0xae019ea,
    // 0, 37, -55, -13, -7, 11, -2, 5, -47, 62, -22, -21, 22, -54, 3, 25, -1, 16, -13, -18, -17, -8, 27, -9, -39, 87, -16, 31, 22, -65, 21, 26
    0xf3c92500, 0x5fe0bf9, 0xebea3ed1, 0x1903ca16, 0xeef310ff, 0xf71bf8ef, 0x1ff057d9, 0x1a15bf16,
    // -22, -30, 10, -3, 8, 10, -31, 34, -63, -19, -31, -15, -23, -15, 0, 2, -11, -31, 75, 16, -16, -3, -47, 10, -53, -11, -42, -8, -28, -17, -24, 21
    0xfd0ae2ea, 0x22e10a08, 0xf1e1edc1, 0x200f1e9, 0x104be1f5, 0xad1fdf0, 0xf8d6f5cb, 0x15e8efe4,
    // -26, 18, -75, -9, -9, -8, 4, -22, 5, 8, 8, -26, 35, 11, 0, -31, -11, -16, -39, 7, -16, -17, -38, 3, 51, -1, -8, -68, 24, 19, -13, -35
    0xf7b512e6, 0xea04f8f7, 0xe6080805, 0xe1000b23, 0x7d9f0f5, 0x3daeff0, 0xbcf8ff33, 0xddf31318,
    // -14, 11, -61, -18, 5, -18, 4, 11, -19, -40, -14, -38, 3, 1, -14, -22, 4, -30, -17, -29, -11, -28, 18, 6, 18, -31, 15, -6, 3, 27, 17, -31
    0xeec30bf2, 0xb04ee05, 0xdaf2d8ed, 0xeaf20103, 0xe3efe204, 0x612e4f5, 0xfa0fe112, 0xe1111b03,
    // -2, -18, -30, -1, -9, 1, -7, -14, -79, -39, -47, 15, -13, -2, 0, -32, 4, -43, -56, -17, 9, 21, -34, 25, -70, -33, -63, -34, -16, 21, -5, -9
    0xffe2eefe, 0xf2f901f7, 0xfd1d9b1, 0xe000fef3, 0xefc8d504, 0x19de1509, 0xdec1dfba, 0xf7fb15f0,
    // 22, -21, -57, -16, -8, -2, -21, 3, -35, 43, -34, -3, -1, -20, -8, -1, 12, -38, -49, -25, 3, -4, 27, 29, -59, -16, -23, 34, -18, -15, 25, -17
    0xf0c7eb16, 0x3ebfef8, 0xfdde2bdd, 0xfff8ecff, 0xe7cfda0c, 0x1d1bfc03, 0x22e9f0c5, 0xef19f1ee,
    // -34, 28, -78, -18, -3, -4, -5, -52, -39, -76, 4, -13, 17, -8, -32, 23, -18, -1, -83, -17, 1, 7, 5, -51, -39, -15, 10, 18, 43, 15, -20, 22
    0xeeb21cde, 0xccfbfcfd, 0xf304b4d9, 0x17e0f811, 0xefadffee, 0xcd050701, 0x120af1d9, 0x16ec0f2b,
    // -1, -30, -47, -7, -10, -15, -21, -44, 18, 32, 40, 37, 32, -21, -35, 32, -9, -25, -59, 4, -5, -18, -10, -19, 9, -22, 42, -2, 21, -11, -29, 25
    0xf9d1e2ff, 0xd4ebf1f6, 0x25282012, 0x20ddeb20, 0x4c5e7f7, 0xedf6eefb, 0xfe2aea09, 0x19e3f515,
    // 1, -4, -33, 11, 7, -17, -42, 3, 3, -44, 7, 35, -5, -59, -21, 15, -3, -3, -30, 8, 10, -3, 12, 25, 5, -67, 39, -3, -11, -36, -3, 11
    0xbdffc01, 0x3d6ef07, 0x2307d403, 0xfebc5fb, 0x8e2fdfd, 0x190cfd0a, 0xfd27bd05, 0xbfddcf5,
    // 6, -2, -12, -21, 15, -18, -17, 10, 18, -89, 11, -24, -35, -36, -18, 10, 5, -15, 2, 6, 0, -12, -27, -8, 7, -52, 14, 27, -4, -36, -6, 5
    0xebf4fe06, 0xaefee0f, 0xe80ba712, 0xaeedcdd, 0x602f105, 0xf8e5f400, 0x1b0ecc07, 0x5fadcfc,
    // -34, 35, -82, 7, 2, 15, -20, -3, 6, 103, -36, 17, 12, 20, -7, -18, -14, -6, -3, 12, 3, 20, 33, 34, 17, 47, -7, 16, 9, 33, 31, -14
    0x7ae23de, 0xfdec0f02, 0x11dc6706, 0xeef9140c, 0xcfdfaf2, 0x22211403, 0x10f92f11, 0xf21f2109,
    // -22, 42, -50, -18, 6, -8, 9, -11, 21, 46, -3, 15, -10, 40, -14, -4, -14, 23, 34, 23, -14, -7, 15, 1, 15, 4, 0, 63, -11, 12, 16, -8
    0xeece2aea, 0xf509f806, 0xffd2e15, 0xfcf228f6, 0x172217f2, 0x10ff9f2, 0x3f00040f, 0xf8100cf5,
    // 16, -17, -22, 42, -4, 0, -38, -2, 16, 38, 3, 0, 43, 15, -27, -9, 18, -19, 75, -15, -15, -15, -6, -2, 2, -12, 29, 40, -17, -18, 7, 21
    0x2aeaef10, 0xfeda00fc, 0x32610, 0xf7e50f2b, 0xf14bed12, 0xfefaf1f1, 0x281df402, 0x1507eeef,
    // -10, 26, -57, 42, -10, -10, -18, -31, -34, -15, -37, -26, 46, 1, -14, 7, 1, 21, 14, -49, 9, 13, 69, 24, -19, -30, 32, 15, -37, -11, 12, 30
    0x2ac71af6, 0xe1eef6f6, 0xe6dbf1de, 0x7f2012e, 0xcf0e1501, 0x18450d09, 0xf20e2ed, 0x1e0cf5db,
    // -20, 14, 51, -2, 4, 3, -11, 4, -30, -38, -57, -31, -4, 71, -9, 29, -2, -25, 69, -6, -3, 20, -4, 32, -14, -58, -24, -29, -20, 76, 12, 28
    0xfe330eec, 0x4f50304, 0xe1c7dae2, 0x1df747fc, 0xfa45e7fe, 0x20fc14fd, 0xe3e8c6f2, 0x1c0c4cec,
    // -2, 27, 56, 18, -16, -14, -9, 0, 14, -17, -19, 1, 12, 36, 7, 37, 9, 1, 53, -1, -20, 14, -4, 39, 32, -34, 13, -1, 5, 54, 17, 30
    0x12381bfe, 0xf7f2f0, 0x1edef0e, 0x2507240c, 0xff350109, 0x27fc0eec, 0xff0dde20, 0x1e113605,
    // 42, 35, -32, -18, -27, 24, 15, -29, -31, 39, 10, 27, 39, 14, 6, 13, 49, -18, 26, 47, -20, 3, 1, 5, 23, -2, 10, 18, 44, 9, -1, 0
    0xeee0232a, 0xe30f18e5, 0x1b0a27e1, 0xd060e27, 0x2f1aee31, 0x50103ec, 0x120afe17, 0xff092c,
    // 36, 15, 17, -46, -3, 16, 20, -19, -31, -10, 14, 25, 9, 34, -3, 53, 27, -23, 77, 18, -20, -17, 2, -14, -7, -82, 19, 51, 7, 21, 4, 27
    0xd2110f24, 0xed1410fd, 0x190ef6e1, 0x35fd2209, 0x124de91b, 0xf202efec, 0x3313aef9, 0x1b041507,
    // 1, 2, -4, 8, 6, 26, -34, -25, -18, 52, 8, -26, 2, 61, -9, 30, 8, 29, 5, 8, 13, 4, -1, -21, 2, 22, 11, -45, 2, 25, -22, 27
    0x8fc0201, 0xe7de1a06, 0xe60834ee, 0x1ef73d02, 0x8051d08, 0xebff040d, 0xd30b1602, 0x1bea1902,
    // -10, 16, -25, -20, 36, 23, -9, -20, -26, 13, -11, -75, -10, 64, 12, 35, -5, 16, -10, -15, 23, 14, 10, -46, -5, 21, -13, -51, 21, 39, -4, 37
    0xece710f6, 0xecf71724, 0xb5f50de6, 0x230c40f6, 0xf1f610fb, 0xd20a0e17, 0xcdf315fb, 0x25fc2715,
    // 7, -23, -31, -34, 32, 17, -56, -10, -34, 17, -3, -3, 4, 57, 9, 50, -12, 48, -3, -27, 3, -23, 3, -38, -24, -15, -31, -28, -7, 20, -10, 20
    0xdee1e907, 0xf6c81120, 0xfdfd11de, 0x32093904, 0xe5fd30f4, 0xda03e903, 0xe4e1f1e8, 0x14f614f9,
    // 5, -12, 3, 47, -24, -18, 26, 40, -7, -29, 27, -6, 8, 8, 27, -28, 18, 8, -3, 29, -35, -6, -5, 26, 19, 67, 32, 46, 11, -26, 5, 2
    0x2f03f405, 0x281aeee8, 0xfa1be3f9, 0xe41b0808, 0x1dfd0812, 0x1afbfadd, 0x2e204313, 0x205e60b,
    // 12, -20, 39, -36, -1, 15, -43, 31, -18, 21, 27, 14, -27, -6, -8, 45, -8, -62, 59, 60, -11, -23, -43, 17, -20, -14, -7, -13, 7, 24, 7, 12
    0xdc27ec0c, 0x1fd50fff, 0xe1b15ee, 0x2df8fae5, 0x3c3bc2f8, 0x11d5e9f5, 0xf3f9f2ec, 0xc071807,
    // -21, 51, -50, -15, -18, -10, 61, -13, -43, 45, 19, 9, 16, -44, 16, 8, -12, 16, -63, -1, 7, 4, 10, -11, -38, 71, -20, 1, 24, -15, 7, 8
    0xf1ce33eb, 0xf33df6ee, 0x9132dd5, 0x810d410, 0xffc110f4, 0xf50a0407, 0x1ec47da, 0x807f118,
    // -6, 21, -32, -14, 30, 28, -32, -25, -12, 36, -26, -83, -12, 1, -33, -14, 1, -27, 41, 18, 28, 21, -3, -4, 10, 9, -3, -21, -8, -19, -18, -14
    0xf2e015fa, 0xe7e01c1e, 0xade624f4, 0xf2df01f4, 0x1229e501, 0xfcfd151c, 0xebfd090a, 0xf2eeedf8,
    // -4, 33, 43, 0, 11, -8, 56, -16, 28, 38, 41, 18, -15, -62, 15, -31, 7, 12, 66, 12, 6, 1, 38, 28, 55, -35, 41, 7, -35, -68, 22, -4
    0x2b21fc, 0xf038f80b, 0x1229261c, 0xe10fc2f1, 0xc420c07, 0x1c260106, 0x729dd37, 0xfc16bcdd,
    // 20, -13, -24, -5, -7, 12, -24, -29, 2, 39, -42, 1, 17, 6, -22, -16, 24, 19, -32, -3, 0, 14, 52, 1, -10, -24, -24, -29, 24, -3, 15, -22
    0xfbe8f314, 0xe3e80cf9, 0x1d62702, 0xf0ea0611, 0xfde01318, 0x1340e00, 0xe3e8e8f6, 0xea0ffd18,
    // 21, 32, -12, -3, -18, -4, 8, -55, 30, 33, -35, -20, 61, -6, -12, -19, 33, 33, -38, -9, -2, 20, -2, -27, 16, 50, -23, -9, 55, -12, -11, -29
    0xfdf42015, 0xc908fcee, 0xecdd211e, 0xedf4fa3d, 0xf7da2121, 0xe5fe14fe, 0xf7e93210, 0xe3f5f437,
    // 11, -47, -66, -41, 13, 29, -54, 14, 11, -1, -20, -18, -16, 23, -26, -6, -14, -36, -5, 2, -11, -22, 19, -19, 14, -65, -4, 57, -9, -31, -6, -29
    0xd7bed10b, 0xeca1d0d, 0xeeecff0b, 0xfae617f0, 0x2fbdcf2, 0xed13eaf5, 0x39fcbf0e, 0xe3fae1f7,
    // -18, -12, -48, -10, -2, 0, 39, -12, -38, -121, 1, 21, -5, 13, 27, -43, -14, 6, -35, 0, -11, 15, -26, -27, 12, -82, -32, -2, -11, -12, -21, -10
    0xf6d0f4ee, 0xf42700fe, 0x150187da, 0xd51b0dfb, 0xdd06f2, 0xe5e60ff5, 0xfee0ae0c, 0xf6ebf4f5,
    // -27, 17, 3, 5, 7, -17, 36, -15, -37, -74, -18, -22, -19, -1, 11, -6, 12, -39, 102, -6, -5, -27, -3, -4, 32, -22, 18, 15, -49, 9, -11, 21
    0x50311e5, 0xf124ef07, 0xeaeeb6db, 0xfa0bffed, 0xfa66d90c, 0xfcfde5fb, 0xf12ea20, 0x15f509cf,
    // 10, 6, -128, -30, 23, 43, -43, 16, -2, 91, 1, -17, 16, -19, -6, -18, 2, -8, 6, 47, -31, -4, -13, -12, 29, 20, 2, 17, 22, -50, 10, -4
    0xe280060a, 0x10d52b17, 0xef015bfe, 0xeefaed10, 0x2f06f802, 0xf4f3fce1, 0x1102141d, 0xfc0ace16,
};
static const uint embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias_dwords[16] = {
    // 0.004276, 0.01531, 0.01307, -0.02272, -0.005726, -0.001187, -0.05853, 0.00146, 0.0211, 0.01204, 0.01436, 0.0004897, -0.02072, -0.02522, 0.0735, 0.010124
    0x23d71c61, 0xa5d122b1, 0x94dd9ddd, 0x15fbab7e, 0x222a2567, 0x1003235a, 0xa675a54e, 0x212f2cb4,
    // 0.0095, -0.03326, -0.0132, -0.02513, 0.005836, 0.0066, -0.001173, 0.08417, -0.01085, -0.09644, -0.01086, 0.006733, -0.00966, 0.01483, 0.04858, 0.02356
    0xa84220dd, 0xa66fa2c2, 0x1ec21dfa, 0x2d6394ce, 0xae2ca18e, 0x1ee5a18f, 0x2398a0f2, 0x26082a38,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass3(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(3840, 2160, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(3840, 2160, 16), // threadGroupSliceSize
        uint3(3840, 2160, 16), // storageSize
        uint3(16, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.021448098123073578, storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<512> storage_embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 16, 32), // threadGroupSliceSize
        uint4(2, 2, 16, 32), // storageSize
        uint4(16, 32, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0033439691178500652, storage_embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias = { embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias };
    
    // Fusedquantized_/encoder2/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_6 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_6 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_6 = uint3(64, 1, 32);
    const uint3 storageSize_slice_6 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_6 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_6 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_6 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_6 = dot(groupStart_slice_6, tensorByteStrides_slice_6);
    const RWBufferStorage storage_slice_6 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_6 = { logicalSize_slice_6, groupStart_slice_6, groupSize_slice_6, storageSize_slice_6, tensorByteStrides_slice_6, paddingBegin_slice_6, paddingEnd_slice_6, threadGroupByteOffsetInTensor_slice_6 + 132710400, storage_slice_6 };
    // Fusedquantized_/encoder2/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs (16, 2160, 3840), (32, 16, 2, 2), (32,) -> (32, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FusedConv2D_k2s2b_QuantizedOutput(0.015869587659835815, 0.016404252499341965, fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias, slice_6, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_3
#ifdef MLSR_PASS_3_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass3_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // Fusedquantized_/encoder2/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_7 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_7 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_7 = uint3(32, 1, 32);
    const uint3 storageSize_slice_7 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_7 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_7 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_7 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_7 = dot(groupStart_slice_7, tensorByteStrides_slice_7);
    const RWBufferStorage storage_slice_7 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_7 = { logicalSize_slice_7, groupStart_slice_7, groupSize_slice_7, storageSize_slice_7, tensorByteStrides_slice_7, paddingBegin_slice_7, paddingEnd_slice_7, threadGroupByteOffsetInTensor_slice_7 + 132710400, storage_slice_7 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_7, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_3_POST


#ifdef MLSR_PASS_4
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 2, 8, 16, 9, -3, 3, 11, 5, -7, -5, 7, 0, -7, -13, 4, -6, -15, -4, -27, -16, -16, -3, -3, 11, -5, 6, -25, -17, 24, 1, 19, -24
    0x9100802, 0x50b03fd, 0x7fbf9, 0xfa04f3f9, 0xf0e5fcf1, 0xbfdfdf0, 0xefe706fb, 0xe8130118,
    // 1, 3, 10, -5, 0, -5, -5, 4, 1, -4, 6, -3, 4, -2, -3, -7, 13, 22, 51, 21, -12, 14, 11, -21, -2, -26, -12, -25, 16, -18, 15, -1
    0xfb0a0301, 0x4fbfb00, 0xfd06fc01, 0xf9fdfe04, 0x1533160d, 0xeb0b0ef4, 0xe7f4e6fe, 0xff0fee10,
    // -20, -70, -50, 5, 25, 16, -5, 30, 6, 1, 21, 33, -23, -16, -7, 55, 0, 39, 9, 0, -1, -1, 5, 0, -6, 29, -16, -3, -3, -8, -25, 46
    0x5cebaec, 0x1efb1019, 0x21150106, 0x37f9f0e9, 0x92700, 0x5ffff, 0xfdf01dfa, 0x2ee7f8fd,
    // -4, -14, -18, -1, -18, -18, 6, 0, -9, 3, 1, -8, -5, 11, 17, 11, 39, -68, -35, -3, 21, -3, 4, 21, 7, 24, -39, 31, 1, 41, 30, -23
    0xffeef2fc, 0x6eeee, 0xf80103f7, 0xb110bfb, 0xfdddbc27, 0x1504fd15, 0x1fd91807, 0xe91e2901,
    // 18, 15, -9, -1, -2, -20, -4, 6, 4, -10, 0, -11, 14, 4, -5, -9, -26, -20, -1, 1, -26, 9, 8, 13, 7, -9, -10, 10, 10, 12, 1, -7
    0xfff70f12, 0x6fcecfe, 0xf500f604, 0xf7fb040e, 0x1ffece6, 0xd0809e6, 0xaf6f707, 0xf9010c0a,
    // 6, 7, 0, -14, 27, -51, -11, 4, -29, 18, -10, -5, 31, -36, 11, 11, -3, -9, -6, -15, -11, 6, 9, -2, -7, -10, 0, 14, 9, 3, 11, -8
    0xf2000706, 0x4f5cd1b, 0xfbf612e3, 0xb0bdc1f, 0xf1faf7fd, 0xfe0906f5, 0xe00f6f9, 0xf80b0309,
    // -16, -5, -59, -49, 22, 11, 4, 23, 42, 19, -26, -6, -26, 34, -14, 32, 67, -11, -31, 18, 15, -41, -5, 5, -16, 19, -17, -25, -98, -63, 2, 55
    0xcfc5fbf0, 0x17040b16, 0xfae6132a, 0x20f222e6, 0x12e1f543, 0x5fbd70f, 0xe7ef13f0, 0x3702c19e,
    // 29, -5, 29, -10, 8, -3, 5, 0, 10, -10, -9, -12, 27, 51, 11, -23, -10, -11, 13, 2, 7, -3, -3, 1, 0, 9, -2, 17, 14, -7, -9, -1
    0xf61dfb1d, 0x5fd08, 0xf4f7f60a, 0xe90b331b, 0x20df5f6, 0x1fdfd07, 0x11fe0900, 0xfff7f90e,
    // -57, 3, -21, -3, -34, -15, -6, -1, -17, 10, -9, 7, -19, -20, -6, -24, 1, -9, -8, -6, 10, -2, 6, -6, -5, 13, -8, 14, 5, 0, 8, -7
    0xfdeb03c7, 0xfffaf1de, 0x7f70aef, 0xe8faeced, 0xfaf8f701, 0xfa06fe0a, 0xef80dfb, 0xf9080005,
    // 1, 9, -7, -1, -2, -6, -7, -4, 7, -13, -6, -2, -2, -5, -1, 3, 34, -12, 12, 2, -40, -34, -4, 9, -15, -3, -3, 21, -5, -8, 3, 2
    0xfff90901, 0xfcf9fafe, 0xfefaf307, 0x3fffbfe, 0x20cf422, 0x9fcded8, 0x15fdfdf1, 0x203f8fb,
    // 6, 0, -3, 1, 17, -5, 3, -7, -7, -5, 16, 8, -1, -13, 5, -3, -22, -18, -45, -25, 12, -19, 10, 16, 25, -18, -1, -9, -10, -24, 5, 49
    0x1fd0006, 0xf903fb11, 0x810fbf9, 0xfd05f3ff, 0xe7d3eeea, 0x100aed0c, 0xf7ffee19, 0x3105e8f6,
    // 39, 1, 52, 43, -4, 24, 11, 49, -26, 22, -34, 3, 49, -23, -23, -65, -25, -43, -8, 27, 5, 35, -4, -17, 12, -5, 16, 31, 47, -19, 17, 8
    0x2b340127, 0x310b18fc, 0x3de16e6, 0xbfe9e931, 0x1bf8d5e7, 0xeffc2305, 0x1f10fb0c, 0x811ed2f,
    // -2, -19, -7, 20, -9, -11, 11, 5, 2, 18, -7, -14, -5, -7, 1, 14, 42, -7, 23, -14, 2, -9, -11, -10, 9, 16, 30, -7, 14, 34, -4, -18
    0x14f9edfe, 0x50bf5f7, 0xf2f91202, 0xe01f9fb, 0xf217f92a, 0xf6f5f702, 0xf91e1009, 0xeefc220e,
    // 18, 2, 6, -4, 11, -3, -6, 6, 6, 0, 7, -7, -2, -1, 0, 7, -9, 4, 6, -10, -5, -7, 8, -4, -11, -3, 3, -2, 14, -6, 3, 8
    0xfc060212, 0x6fafd0b, 0xf9070006, 0x700fffe, 0xf60604f7, 0xfc08f9fb, 0xfe03fdf5, 0x803fa0e,
    // 40, 3, -22, 24, 2, -22, 8, 1, -4, 33, 10, 7, -25, -2, -11, -37, 0, 10, -9, -2, 8, -21, 5, -4, -6, 22, -2, -2, 10, -11, -3, -2
    0x18ea0328, 0x108ea02, 0x70a21fc, 0xdbf5fee7, 0xfef70a00, 0xfc05eb08, 0xfefe16fa, 0xfefdf50a,
    // -5, 7, 29, -17, 22, -6, -11, -20, -3, -5, -1, 0, 20, -15, 0, 18, -48, 11, 11, 23, 11, -39, -35, -10, -2, -37, 51, 30, -54, -12, -14, -122
    0xef1d07fb, 0xecf5fa16, 0xfffbfd, 0x1200f114, 0x170b0bd0, 0xf6ddd90b, 0x1e33dbfe, 0x86f2f4ca,
    // -13, 24, 20, 32, -4, 18, -12, 23, 2, -37, 6, -29, 11, 10, -9, 12, 6, 0, 6, 12, -1, -1, 17, 0, -11, -10, -13, 10, -2, -5, 10, 14
    0x201418f3, 0x17f412fc, 0xe306db02, 0xcf70a0b, 0xc060006, 0x11ffff, 0xaf3f6f5, 0xe0afbfe,
    // 4, 14, 16, 0, -23, 19, 19, -6, -26, -9, 14, -4, -27, -10, 23, -8, 16, 8, 4, 4, 12, -9, 7, -1, 11, 8, -11, -9, 9, 5, -10, 9
    0x100e04, 0xfa1313e9, 0xfc0ef7e6, 0xf817f6e5, 0x4040810, 0xff07f70c, 0xf7f5080b, 0x9f60509,
    // 1, -9, 6, 0, -14, -4, 5, -4, -19, -12, 1, 15, 2, 4, 17, 15, 17, -20, -1, 37, 33, -12, 7, -10, 3, -1, 2, 16, -14, 0, 2, -12
    0x6f701, 0xfc05fcf2, 0xf01f4ed, 0xf110402, 0x25ffec11, 0xf607f421, 0x1002ff03, 0xf40200f2,
    // -8, -4, 9, 1, -3, 12, 2, 1, 0, -6, -4, 6, 5, -2, 5, 9, -38, 15, 32, 25, 4, 4, -24, 9, 24, 32, 0, -3, 55, -27, -54, -44
    0x109fcf8, 0x1020cfd, 0x6fcfa00, 0x905fe05, 0x19200fda, 0x9e80404, 0xfd002018, 0xd4cae537,
    // 9, 5, -7, -51, 8, -14, -3, 28, -21, 3, -61, -13, 5, -64, 21, -19, -4, -13, -40, -47, -27, -28, 7, -2, -20, 3, 30, 9, 7, -14, 12, -31
    0xcdf90509, 0x1cfdf208, 0xf3c303eb, 0xed15c005, 0xd1d8f3fc, 0xfe07e4e5, 0x91e03ec, 0xe10cf207,
    // 1, -8, -3, 6, -1, -13, -5, -3, 2, 14, -1, -9, -3, -4, 1, -2, 32, -51, 11, 20, -1, -30, 22, 25, -1, 17, -5, -2, 0, 29, -7, 57
    0x6fdf801, 0xfdfbf3ff, 0xf7ff0e02, 0xfe01fcfd, 0x140bcd20, 0x1916e2ff, 0xfefb11ff, 0x39f91d00,
    // 4, 2, -4, 14, -5, 4, -3, -2, 11, 6, 6, 1, -2, 9, -5, 5, 4, -8, 0, 1, 21, 11, -11, 11, 15, -3, -4, 2, -8, 1, -1, -9
    0xefc0204, 0xfefd04fb, 0x106060b, 0x5fb09fe, 0x100f804, 0xbf50b15, 0x2fcfd0f, 0xf7ff01f8,
    // -24, 32, -14, 11, 2, -20, -17, -10, -10, 15, -10, 15, 7, 5, -6, 48, -4, -2, -1, 0, -2, 19, 8, 2, 6, -1, 10, 6, -3, 15, 6, -3
    0xbf220e8, 0xf6efec02, 0xff60ff6, 0x30fa0507, 0xfffefc, 0x20813fe, 0x60aff06, 0xfd060ffd,
    // 40, 12, 19, 15, 6, 33, 2, 18, -7, 16, 25, -4, 2, 23, 1, -51, -70, 8, -29, 70, 19, 10, 9, 21, 23, -77, 43, 9, -9, -87, -30, 25
    0xf130c28, 0x12022106, 0xfc1910f9, 0xcd011702, 0x46e308ba, 0x15090a13, 0x92bb317, 0x19e2a9f7,
    // -14, -48, 0, -34, -2, 13, 9, -12, -4, -36, 2, 12, 0, 5, 34, -31, 10, 14, -6, -15, -5, 3, -5, -9, 2, 10, 31, -22, 9, 5, -13, -23
    0xde00d0f2, 0xf4090dfe, 0xc02dcfc, 0xe1220500, 0xf1fa0e0a, 0xf7fb03fb, 0xea1f0a02, 0xe9f30509,
    // -7, 30, 29, 10, -5, 7, -13, -19, -1, -5, 10, -29, 12, -16, 8, 19, -13, -14, -1, -19, -3, 18, 8, -16, -13, 9, 13, 13, -5, -13, 13, 4
    0xa1d1ef9, 0xedf307fb, 0xe30afbff, 0x1308f00c, 0xedfff2f3, 0xf00812fd, 0xd0d09f3, 0x40df3fb,
    // -9, -1, -8, -5, -17, 11, 4, 17, 6, 4, 8, -6, -4, 13, -7, -9, -7, -6, -19, 16, -7, 29, 6, 17, 7, 20, -13, 10, -12, -4, -19, -22
    0xfbf8fff7, 0x11040bef, 0xfa080406, 0xf7f90dfc, 0x10edfaf9, 0x11061df9, 0xaf31407, 0xeaedfcf4,
    // -9, -3, -9, 1, -14, -9, -5, 8, 5, 22, 7, -8, 1, -1, 0, -10, -1, 11, 0, -14, 11, 13, 1, 0, -10, 18, -14, 12, -33, 0, 2, -1
    0x1f7fdf7, 0x8fbf7f2, 0xf8071605, 0xf600ff01, 0xf2000bff, 0x10d0b, 0xcf212f6, 0xff0200df,
    // 127, -13, 52, 32, -72, -85, 4, 4, -45, -15, 30, 38, 70, -54, -16, -35, 25, 20, 21, -35, 20, -19, 4, 5, -16, -26, -15, -31, -15, 13, 9, -16
    0x2034f37f, 0x404abb8, 0x261ef1d3, 0xddf0ca46, 0xdd151419, 0x504ed14, 0xe1f1e6f0, 0xf0090df1,
    // -10, 1, -12, 4, -11, 2, 4, 3, -5, -4, 2, 15, -11, 2, 6, -6, 10, -14, -11, 11, 15, 6, 7, 11, 4, 26, -22, -19, 4, -2, 15, -6
    0x4f401f6, 0x30402f5, 0xf02fcfb, 0xfa0602f5, 0xbf5f20a, 0xb07060f, 0xedea1a04, 0xfa0ffe04,
    // -16, -8, -1, 0, 1, 2, 4, -7, -7, 1, -6, 12, 0, -14, 7, -5, -4, 14, -2, 14, -6, -11, 12, -6, 1, -7, -19, -5, 6, -1, 3, 12
    0xfff8f0, 0xf9040201, 0xcfa01f9, 0xfb07f200, 0xefe0efc, 0xfa0cf5fa, 0xfbedf901, 0xc03ff06,
    // -2, -16, 31, -16, 19, 5, -3, 0, -31, -37, 21, -11, 24, 31, 42, 10, 3, 1, 1, 0, -11, 3, 0, 9, 7, -6, 1, -4, -3, 8, 1, -4
    0xf01ff0fe, 0xfd0513, 0xf515dbe1, 0xa2a1f18, 0x10103, 0x90003f5, 0xfc01fa07, 0xfc0108fd,
    // -14, -16, -7, -22, -2, -15, 1, -14, -2, 21, 5, -23, -16, 10, -6, 17, 17, -70, -18, 38, 2, 71, -7, -37, 59, 48, 37, -23, 63, -41, -11, 21
    0xeaf9f0f2, 0xf201f1fe, 0xe90515fe, 0x11fa0af0, 0x26eeba11, 0xdbf94702, 0xe925303b, 0x15f5d73f,
    // -11, 28, -1, 7, -52, 8, 3, 29, -10, -31, 33, 8, -36, 53, -14, -7, 2, -9, -3, 5, -3, -9, 12, -2, -4, 10, 1, -2, -5, 5, 15, 8
    0x7ff1cf5, 0x1d0308cc, 0x821e1f6, 0xf9f235dc, 0x5fdf702, 0xfe0cf7fd, 0xfe010afc, 0x80f05fb,
    // 17, 11, 36, -2, 30, 3, -20, -5, -7, -22, -2, 7, 19, -7, -32, 36, -10, 4, -1, 13, -5, 1, 7, 12, 5, -9, -7, 2, 0, 14, 2, 2
    0xfe240b11, 0xfbec031e, 0x7feeaf9, 0x24e0f913, 0xdff04f6, 0xc0701fb, 0x2f9f705, 0x2020e00,
    // -9, -19, 20, 6, 9, 15, 4, 8, 14, -7, -5, 0, -6, -1, 10, 0, -10, -1, 12, 6, -43, 18, 21, 26, 7, 31, 4, -2, -2, 12, -21, 4
    0x614edf7, 0x8040f09, 0xfbf90e, 0xafffa, 0x60cfff6, 0x1a1512d5, 0xfe041f07, 0x4eb0cfe,
    // -2, -9, 12, -6, -5, 28, -2, 9, 1, -15, 14, 6, -10, 18, 7, 2, 59, 9, 16, 20, 8, 35, 5, 22, -30, 14, 9, -34, -34, 23, 43, -14
    0xfa0cf7fe, 0x9fe1cfb, 0x60ef101, 0x20712f6, 0x1410093b, 0x16052308, 0xde090ee2, 0xf22b17de,
    // 108, 10, 8, -84, 20, 17, -37, -34, 13, 12, -57, 25, 5, 37, -35, -2, 12, 10, 5, 9, -35, -1, 9, -15, -7, 20, 14, 21, -13, 34, -12, 10
    0xac080a6c, 0xdedb1114, 0x19c70c0d, 0xfedd2505, 0x9050a0c, 0xf109ffdd, 0x150e14f9, 0xaf422f3,
    // -4, -12, -23, 18, -34, -13, 19, -3, -6, 17, 12, -26, -5, 23, 10, -7, -53, -28, -4, 5, -3, -9, 2, -6, -14, 28, 16, -41, -25, -29, 21, -16
    0x12e9f4fc, 0xfd13f3de, 0xe60c11fa, 0xf90a17fb, 0x5fce4cb, 0xfa02f7fd, 0xd7101cf2, 0xf015e3e7,
    // -9, -17, -7, -10, -5, 6, 1, 5, -5, 6, 19, 0, -6, 0, 7, -16, 0, -11, 15, 9, 4, -1, 7, -2, -1, -16, -7, 10, 1, -7, 6, 7
    0xf6f9eff7, 0x50106fb, 0x1306fb, 0xf00700fa, 0x90ff500, 0xfe07ff04, 0xaf9f0ff, 0x706f901,
    // -27, -23, 20, -5, -26, 20, -11, 35, 3, -5, -15, 0, 21, -12, 9, -9, 4, 1, -7, -16, 3, -8, -6, -9, -6, 8, -1, -2, 3, -12, 1, -9
    0xfb14e9e5, 0x23f514e6, 0xf1fb03, 0xf709f415, 0xf0f90104, 0xf7faf803, 0xfeff08fa, 0xf701f403,
    // -4, 36, -5, -20, 19, 25, -30, 2, 14, 3, 11, -2, 32, -7, -20, -25, -73, 19, 101, 71, -23, 80, 6, -40, -4, 18, -76, 21, 18, -48, -4, -28
    0xecfb24fc, 0x2e21913, 0xfe0b030e, 0xe7ecf920, 0x476513b7, 0xd80650e9, 0x15b412fc, 0xe4fcd012,
    // 14, 16, 10, 2, -6, -13, -1, 6, 0, -7, -3, -2, 6, 17, 0, -5, -3, 0, 1, -4, 4, -6, -3, -2, 3, -2, 4, 0, 11, -5, -8, -9
    0x20a100e, 0x6fff3fa, 0xfefdf900, 0xfb001106, 0xfc0100fd, 0xfefdfa04, 0x4fe03, 0xf7f8fb0b,
    // -17, -16, 3, -6, 19, -11, -23, 8, 2, 2, -24, 7, 6, -11, 2, -14, 9, -3, -3, -15, 12, 1, -5, -14, -3, 7, 4, 4, 9, -5, -2, -10
    0xfa03f0ef, 0x8e9f513, 0x7e80202, 0xf202f506, 0xf1fdfd09, 0xf2fb010c, 0x40407fd, 0xf6fefb09,
    // -9, -16, 14, 3, -16, 13, -1, 10, 1, -12, -8, 0, -10, 5, 4, 4, 34, -4, -30, 47, 42, -33, 3, -18, 1, 22, -31, 31, -10, -36, 5, -21
    0x30ef0f7, 0xaff0df0, 0xf8f401, 0x40405f6, 0x2fe2fc22, 0xee03df2a, 0x1fe11601, 0xeb05dcf6,
    // 8, -5, 17, -6, 12, 16, 1, -8, -7, -1, -6, 10, 1, -11, 2, 6, 20, 16, -48, -32, 20, 26, -2, 11, 19, -2, -4, -23, -28, 25, 4, 22
    0xfa11fb08, 0xf801100c, 0xafafff9, 0x602f501, 0xe0d01014, 0xbfe1a14, 0xe9fcfe13, 0x160419e4,
    // -54, -5, -23, -27, 28, 20, 28, -2, 19, -17, 75, 2, 60, 41, 30, -1, 12, 10, 15, 25, -18, -7, 1, 5, 21, 25, 12, 11, -12, 13, -28, 14
    0xe5e9fbca, 0xfe1c141c, 0x24bef13, 0xff1e293c, 0x190f0a0c, 0x501f9ee, 0xb0c1915, 0xee40df4,
    // -4, -28, -12, 12, -13, -15, 2, 3, 6, 13, -1, -10, -9, 6, 7, 6, 18, -8, 8, 13, 16, -23, -10, 19, 18, 19, -26, -10, 21, -1, -21, 7
    0xcf4e4fc, 0x302f1f3, 0xf6ff0d06, 0x60706f7, 0xd08f812, 0x13f6e910, 0xf6e61312, 0x7ebff15,
    // 15, -1, -1, -17, 9, 3, -10, -15, -12, 8, 11, 4, 3, -7, 1, 0, -18, -25, -3, 8, -3, -3, 3, 3, 10, 6, -1, 4, 8, 14, 1, -2
    0xefffff0f, 0xf1f60309, 0x40b08f4, 0x1f903, 0x8fde7ee, 0x303fdfd, 0x4ff060a, 0xfe010e08,
    // -12, 1, -25, 15, 49, -66, 5, -16, -11, 31, 12, -6, 23, -12, 6, 8, 2, 16, 0, 16, 8, -14, -3, -2, 5, 13, -14, -20, 0, 8, -9, 6
    0xfe701f4, 0xf005be31, 0xfa0c1ff5, 0x806f417, 0x10001002, 0xfefdf208, 0xecf20d05, 0x6f70800,
    // 37, -16, 6, 53, -27, 14, 35, 12, -30, -9, -1, 31, 17, 32, 37, -18, 27, 0, -13, -13, -80, 54, -34, 31, 29, 3, -12, 20, 45, -9, 3, 47
    0x3506f025, 0xc230ee5, 0x1ffff7e2, 0xee252011, 0xf3f3001b, 0x1fde36b0, 0x14f4031d, 0x2f03f72d,
    // 34, 13, 30, 16, 28, 8, -11, 14, 20, -20, -19, -42, 27, 19, -3, -8, 11, 10, 8, -3, 3, 2, 0, -12, -5, -19, -10, 14, -12, 4, 8, 1
    0x101e0d22, 0xef5081c, 0xd6edec14, 0xf8fd131b, 0xfd080a0b, 0xf4000203, 0xef6edfb, 0x10804f4,
    // -6, 7, 42, 5, 29, -4, 1, -5, 1, -8, -12, 0, 2, -14, 2, 21, 9, 11, 12, 12, 15, 0, 0, -8, 5, 7, -16, -9, -1, 9, -4, 17
    0x52a07fa, 0xfb01fc1d, 0xf4f801, 0x1502f202, 0xc0c0b09, 0xf800000f, 0xf7f00705, 0x11fc09ff,
    // -6, -8, -1, -1, 2, -2, 6, 0, 10, -3, -8, 10, 0, -7, -11, -3, -20, -1, 8, -6, 5, -15, -11, 4, -19, -23, -9, 4, 31, -6, 27, 12
    0xfffff8fa, 0x6fe02, 0xaf8fd0a, 0xfdf5f900, 0xfa08ffec, 0x4f5f105, 0x4f7e9ed, 0xc1bfa1f,
    // 9, -8, -21, -4, 4, -3, 13, -9, -8, 11, -4, 13, -1, -8, 2, -21, 41, 10, 30, 9, -21, 28, 8, 23, -23, 18, 25, 0, -2, 9, -8, -36
    0xfcebf809, 0xf70dfd04, 0xdfc0bf8, 0xeb02f8ff, 0x91e0a29, 0x17081ceb, 0x1912e9, 0xdcf809fe,
    // 76, 47, -2, 45, -36, -38, -6, -21, 20, 54, 57, -66, -22, 61, -6, -54, -4, -17, 41, 5, 4, 32, 2, -8, 4, 9, 20, 16, -23, -19, -5, 37
    0x2dfe2f4c, 0xebfadadc, 0xbe393614, 0xcafa3dea, 0x529effc, 0xf8022004, 0x10140904, 0x25fbede9,
    // -11, 3, 3, -9, 9, 14, 2, -1, 2, 2, 2, 4, 1, -19, -12, -1, 22, -35, -7, 7, -11, -31, -15, 16, 17, 11, -17, 23, 8, 33, -6, 5
    0xf70303f5, 0xff020e09, 0x4020202, 0xfff4ed01, 0x7f9dd16, 0x10f1e1f5, 0x17ef0b11, 0x5fa2108,
    // 0, -1, -8, -6, 9, -3, 7, -2, 0, -3, -12, 3, 7, -13, 5, -4, 9, -2, -1, -5, -6, -1, -2, 9, -15, 6, 11, 1, -1, -3, 5, -3
    0xfaf8ff00, 0xfe07fd09, 0x3f4fd00, 0xfc05f307, 0xfbfffe09, 0x9fefffa, 0x10b06f1, 0xfd05fdff,
    // 8, -11, -11, 15, -27, 14, 15, 15, 14, 9, -13, 20, -27, 3, -27, -29, -4, 2, -28, 0, -5, -23, 1, -2, -13, 11, 9, -7, 5, -12, 1, -17
    0xff5f508, 0xf0f0ee5, 0x14f3090e, 0xe3e503e5, 0xe402fc, 0xfe01e9fb, 0xf9090bf3, 0xef01f405,
    // -8, 41, 1, -58, 16, 25, -5, -19, 25, -17, 12, 3, 8, -1, -31, 15, -16, 22, -34, 16, -7, 26, -22, -22, 63, 13, -22, -60, 40, 64, 20, 91
    0xc60129f8, 0xedfb1910, 0x30cef19, 0xfe1ff08, 0x10de16f0, 0xeaea1af9, 0xc4ea0d3f, 0x5b144028,
    // 1, -38, 39, -29, 30, 51, -2, -21, -4, -20, -23, -3, 43, -17, 34, 11, 8, -2, 10, 9, 14, 11, 5, 6, -4, -2, -8, 12, 2, -7, -1, 2
    0xe327da01, 0xebfe331e, 0xfde9ecfc, 0xb22ef2b, 0x90afe08, 0x6050b0e, 0xcf8fefc, 0x2fff902,
    // -4, -12, -17, 3, -29, -1, 13, -7, -10, 24, 3, -16, -22, 4, 18, -9, -1, 1, -7, 3, 3, -9, -4, 4, 6, 0, -5, 0, 3, 5, -3, 0
    0x3eff4fc, 0xf90dffe3, 0xf00318f6, 0xf71204ea, 0x3f901ff, 0x4fcf703, 0xfb0006, 0xfd0503,
    // 2, -2, -7, 29, 13, -15, 1, -17, -9, 0, -15, 11, -2, -10, 8, -7, 11, -7, 25, -40, 6, -9, 14, 14, 3, 9, -14, 8, 13, -29, -14, 14
    0x1df9fe02, 0xef01f10d, 0xbf100f7, 0xf908f6fe, 0xd819f90b, 0xe0ef706, 0x8f20903, 0xef2e30d,
    // 13, -10, -11, 21, 18, -4, -11, -16, 0, 22, 2, 2, -13, -10, 6, -10, -6, -12, 13, 40, -26, -2, 11, 8, 3, 3, 20, -13, 19, -6, -10, -34
    0x15f5f60d, 0xf0f5fc12, 0x2021600, 0xf606f6f3, 0x280df4fa, 0x80bfee6, 0xf3140303, 0xdef6fa13,
    // 52, -61, -23, -51, -7, -81, 28, 19, -1, -11, 16, 17, 35, -7, 14, 46, 3, 18, 27, 29, -16, 13, -5, 29, 6, -44, 36, 8, -7, 38, -14, 24
    0xcde9c334, 0x131caff9, 0x1110f5ff, 0x2e0ef923, 0x1d1b1203, 0x1dfb0df0, 0x824d406, 0x18f226f9,
    // 10, 40, 22, -3, 15, 12, -22, -11, -1, -1, 23, -14, 20, -21, -23, -20, -39, 30, 16, -17, -1, 11, 5, -20, -22, 6, -3, -4, -17, -66, 0, -19
    0xfd16280a, 0xf5ea0c0f, 0xf217ffff, 0xece9eb14, 0xef101ed9, 0xec050bff, 0xfcfd06ea, 0xed00beef,
    // 6, 1, 4, 17, 15, 3, -12, 5, 9, 19, -10, -7, 9, 0, -8, 0, -6, 2, -10, -3, -5, -6, -5, -2, -3, 5, 9, -2, 3, -2, -1, 2
    0x11040106, 0x5f4030f, 0xf9f61309, 0xf80009, 0xfdf602fa, 0xfefbfafb, 0xfe0905fd, 0x2fffe03,
    // 3, 8, 13, -17, -14, -9, 6, 14, 9, 25, 10, 2, -2, 4, -33, 20, -3, 14, 9, -1, 7, -10, -2, -1, -6, 12, -2, -7, 6, -9, -5, 15
    0xef0d0803, 0xe06f7f2, 0x20a1909, 0x14df04fe, 0xff090efd, 0xfffef607, 0xf9fe0cfa, 0xffbf706,
    // -24, -17, -30, 4, 35, -14, 1, 20, 13, 4, -5, 17, 1, -8, 3, 1, 27, 19, -32, 2, 17, 17, -2, -77, 7, -60, -16, 15, -31, 27, 9, 68
    0x4e2efe8, 0x1401f223, 0x11fb040d, 0x103f801, 0x2e0131b, 0xb3fe1111, 0xff0c407, 0x44091be1,
    // -30, 10, 1, 16, 23, -28, -11, 25, 11, -58, 14, -25, -11, -19, 13, -6, 3, -11, -3, 11, -15, -3, 4, 2, -3, 0, -5, 7, -11, 4, 8, 10
    0x10010ae2, 0x19f5e417, 0xe70ec60b, 0xfa0dedf5, 0xbfdf503, 0x204fdf1, 0x7fb00fd, 0xa0804f5,
    // 66, -61, 25, 16, 13, -16, 20, 24, 21, 22, 17, -27, 0, 56, 16, 14, 3, 4, 2, -3, -5, 3, 9, -1, -5, 0, 4, 3, 0, -12, 2, 5
    0x1019c342, 0x1814f00d, 0xe5111615, 0xe103800, 0xfd020403, 0xff0903fb, 0x30400fb, 0x502f400,
};
static const uint embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // -0.0001292, -0.0003436, -0.0002658, 5.58e-05, 2.47e-05, 0.000336, -0.0004618, 0.0002556, -3.82e-05, 0.0002335, -0.0003083, -7.296e-05, 0.0001004, 0.0003834, -0.000378, -0.0001491
    0x8da1883c, 0x3a88c5b, 0xd81019e, 0xc308f91, 0xba78281, 0x84c88d0d, 0xe480694, 0x88e38e31,
};
static const uint embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 20, 38, -8, -33, -2, -38, 27, -26, 50, 45, -2, -10, 28, 30, -37, -10, -8, 11, 3, 12, 40, 18, -59, 22, 20, -13, -45, 22, 6, 18, -11, -13
    0xdff82614, 0xe61bdafe, 0xf6fe2d32, 0xf6db1e1c, 0xc030bf8, 0x16c51228, 0x16d3f314, 0xf3f51206,
    // 19, 50, -28, 68, 13, 26, -15, -42, -13, -40, 30, -7, -11, -24, -5, -19, -18, 23, 17, 8, 27, 21, -13, 12, 14, 5, -55, 44, 37, 9, -10, -29
    0x44e43213, 0xd6f11a0d, 0xf91ed8f3, 0xedfbe8f5, 0x81117ee, 0xcf3151b, 0x2cc9050e, 0xe3f60925,
    // 1, 22, -1, 13, 19, 6, -11, 0, -7, -2, -6, 13, -2, 13, 2, -8, 8, -19, -53, 19, -20, 6, 19, -3, 13, 60, 11, 19, 16, 1, -58, 20
    0xdff1601, 0xf50613, 0xdfafef9, 0xf8020dfe, 0x13cbed08, 0xfd1306ec, 0x130b3c0d, 0x14c60110,
    // -30, -11, -10, 2, 8, -26, -50, -20, -12, 15, 4, -15, -6, 3, -23, -29, 41, 43, -31, -18, 29, 17, -94, 12, 36, 7, 25, 11, 29, -15, 36, 12
    0x2f6f5e2, 0xeccee608, 0xf1040ff4, 0xe3e903fa, 0xeee12b29, 0xca2111d, 0xb190724, 0xc24f11d,
    // 20, 46, 4, -37, 11, -27, 20, -37, -35, -8, 27, -41, -32, -11, 44, 28, -12, -32, 8, 19, 34, 4, -35, 16, -8, -24, -70, -11, -24, 14, -64, -52
    0xdb042e14, 0xdb14e50b, 0xd71bf8dd, 0x1c2cf5e0, 0x1308e0f4, 0x10dd0422, 0xf5bae8f8, 0xccc00ee8,
    // -9, 16, 46, -48, 44, 45, -19, 3, 27, -4, 25, -65, 40, -5, 11, -17, -5, 16, -1, -39, -22, 11, -37, -3, 15, -6, -3, -7, -6, -2, 33, 12
    0xd02e10f7, 0x3ed2d2c, 0xbf19fc1b, 0xef0bfb28, 0xd9ff10fb, 0xfddb0bea, 0xf9fdfa0f, 0xc21fefa,
    // -21, -27, -8, 23, -16, 1, -4, -27, 10, -3, 21, -10, 28, 4, 2, -1, -8, -5, -45, -29, 49, -7, -54, 30, 21, -25, -39, -22, -6, -33, 29, -66
    0x17f8e5eb, 0xe5fc01f0, 0xf615fd0a, 0xff02041c, 0xe3d3fbf8, 0x1ecaf931, 0xead9e715, 0xbe1ddffa,
    // 17, -24, 28, -19, 2, 30, -21, -13, 6, 37, 35, 32, -13, 45, -8, -39, -2, 2, -4, -1, 22, 34, 45, 37, -15, -29, -55, 7, -4, 32, -25, -8
    0xed1ce811, 0xf3eb1e02, 0x20232506, 0xd9f82df3, 0xfffc02fe, 0x252d2216, 0x7c9e3f1, 0xf8e720fc,
    // -35, -58, 25, -17, -18, -50, 38, 11, 24, 55, -17, -18, 12, 11, -28, 7, -18, -14, -27, -30, -16, -17, 65, -8, -26, 0, 41, 52, 3, 9, 56, -19
    0xef19c6dd, 0xb26ceee, 0xeeef3718, 0x7e40b0c, 0xe2e5f2ee, 0xf841eff0, 0x342900e6, 0xed380903,
    // -44, 40, 9, -18, 13, 22, 42, -50, -46, 1, -28, -14, 47, 54, -15, 28, 18, -12, -6, 2, -8, -18, 21, -1, 13, -19, 34, 8, 32, 6, 16, 18
    0xee0928d4, 0xce2a160d, 0xf2e401d2, 0x1cf1362f, 0x2faf412, 0xff15eef8, 0x822ed0d, 0x12100620,
    // -7, -9, -1, -9, -13, -13, -20, 42, 23, -39, -47, -9, 34, 29, 24, -2, -25, 51, -11, 37, -46, -21, 8, 8, 11, -41, -7, 26, 19, -6, -55, -33
    0xf7fff7f9, 0x2aecf3f3, 0xf7d1d917, 0xfe181d22, 0x25f533e7, 0x808ebd2, 0x1af9d70b, 0xdfc9fa13,
    // 16, 12, 7, -18, -18, -23, 3, -6, -2, -38, -11, -8, 51, -25, 12, 7, -25, -26, 42, 57, -2, 10, -23, 60, -26, -47, 77, -45, 59, 17, -38, 32
    0xee070c10, 0xfa03e9ee, 0xf8f5dafe, 0x70ce733, 0x392ae6e7, 0x3ce90afe, 0xd34dd1e6, 0x20da113b,
    // 2, 12, 2, -7, -8, 2, 4, -2, -22, -5, -12, 14, 19, -4, -5, -6, 23, 11, -44, 45, -30, 54, -16, 61, -73, 17, -40, 41, -38, -73, 28, -22
    0xf9020c02, 0xfe0402f8, 0xef4fbea, 0xfafbfc13, 0x2dd40b17, 0x3df036e2, 0x29d811b7, 0xea1cb7da,
    // -1, 5, -13, 40, -2, 17, 26, -39, -8, -13, 11, -23, 13, -33, -6, 0, -3, -60, -49, -19, 11, -41, -101, -30, -61, 16, 59, 13, -55, 26, 36, -33
    0x28f305ff, 0xd91a11fe, 0xe90bf3f8, 0xfadf0d, 0xedcfc4fd, 0xe29bd70b, 0xd3b10c3, 0xdf241ac9,
    // -20, -38, 16, -16, 41, -4, -24, -29, -9, 54, 46, 25, -38, -63, -69, 42, 24, -35, -10, -5, 43, 28, 4, -1, -18, 14, -26, -50, -17, 7, -1, 41
    0xf010daec, 0xe3e8fc29, 0x192e36f7, 0x2abbc1da, 0xfbf6dd18, 0xff041c2b, 0xcee60eee, 0x29ff07ef,
    // -22, -26, -20, 3, -32, 30, -25, -16, -38, -11, -15, -56, -37, -14, -5, 5, -2, -1, 12, 5, 41, 26, 60, 19, -32, -7, -53, -33, 0, 15, -36, -18
    0x3ece6ea, 0xf0e71ee0, 0xc8f1f5da, 0x5fbf2db, 0x50cfffe, 0x133c1a29, 0xdfcbf9e0, 0xeedc0f00,
    // -31, 29, -19, -29, 11, -32, -29, 17, -61, 14, 5, -22, 52, -1, -10, -26, 32, -13, -28, -26, -4, -8, 6, 0, 3, -37, -41, 27, -29, -13, 3, 15
    0xe3ed1de1, 0x11e3e00b, 0xea050ec3, 0xe6f6ff34, 0xe6e4f320, 0x6f8fc, 0x1bd7db03, 0xf03f3e3,
    // 3, -5, -2, -12, -7, 1, -2, 4, 2, -1, 5, 6, -2, 6, 5, 5, -36, 42, -35, -1, 29, 55, -14, -64, -68, -12, -8, -4, 38, -32, -26, 8
    0xf4fefb03, 0x4fe01f9, 0x605ff02, 0x50506fe, 0xffdd2adc, 0xc0f2371d, 0xfcf8f4bc, 0x8e6e026,
    // -17, 29, 15, 17, 23, -34, -67, -54, 26, 24, -50, 7, 0, -20, -2, 6, 15, -13, 1, 16, 8, 5, -13, 11, 14, 17, 6, -50, 33, -14, 10, 24
    0x110f1def, 0xcabdde17, 0x7ce181a, 0x6feec00, 0x1001f30f, 0xbf30508, 0xce06110e, 0x180af221,
    // -21, -19, 1, 11, -4, -3, -20, -11, 11, 4, 8, -5, 16, 23, -11, -4, 51, -3, 12, 57, -42, 66, -20, -32, 3, 52, 0, 2, -36, 15, 5, -19
    0xb01edeb, 0xf5ecfdfc, 0xfb08040b, 0xfcf51710, 0x390cfd33, 0xe0ec42d6, 0x2003403, 0xed050fdc,
    // -16, -6, -4, -16, -2, -18, 1, -17, -32, 5, 18, -1, 15, 3, 7, -15, -37, 58, -33, 57, -23, -10, 9, -4, 13, 71, 16, 5, -29, 7, -9, -8
    0xf0fcfaf0, 0xef01eefe, 0xff1205e0, 0xf107030f, 0x39df3adb, 0xfc09f6e9, 0x510470d, 0xf8f707e3,
    // -8, -8, 1, 5, 6, 5, 8, 6, 1, -1, -7, -8, -1, 3, -8, 4, 6, -25, -74, 8, 2, 20, 12, 20, -1, 38, 11, 17, -15, -40, -52, -26
    0x501f8f8, 0x6080506, 0xf8f9ff01, 0x4f803ff, 0x8b6e706, 0x140c1402, 0x110b26ff, 0xe6ccd8f1,
    // 20, 39, 22, -11, -36, 25, -19, 18, -17, 9, -24, 22, 48, -39, -21, 0, -41, -40, -39, -26, 31, -2, 26, -3, -40, 11, -63, 55, -71, 42, 33, 34
    0xf5162714, 0x12ed19dc, 0x16e809ef, 0xebd930, 0xe6d9d8d7, 0xfd1afe1f, 0x37c10bd8, 0x22212ab9,
    // -7, -22, 4, 7, 19, -15, 26, -13, 24, -29, 21, 6, -7, 16, 20, -19, 51, -15, -43, -5, 58, 47, 29, 19, -19, 13, -13, -54, 2, 25, 11, -35
    0x704eaf9, 0xf31af113, 0x615e318, 0xed1410f9, 0xfbd5f133, 0x131d2f3a, 0xcaf30ded, 0xdd0b1902,
    // -35, -27, 13, 23, 22, -53, 39, -10, 79, -55, 2, 11, 54, 25, -2, 2, 38, 63, -45, -57, 10, 10, 65, -16, 12, 30, -58, 15, -70, 0, 26, 35
    0x170de5dd, 0xf627cb16, 0xb02c94f, 0x2fe1936, 0xc7d33f26, 0xf0410a0a, 0xfc61e0c, 0x231a00ba,
    // -7, 3, -50, 44, -39, 6, -41, 28, -14, 49, 62, -36, 25, 40, 26, 44, 11, 38, -19, -9, -34, -21, 36, 16, -17, -13, 38, -30, 4, -17, -7, 31
    0x2cce03f9, 0x1cd706d9, 0xdc3e31f2, 0x2c1a2819, 0xf7ed260b, 0x1024ebde, 0xe226f3ef, 0x1ff9ef04,
    // 4, -9, -11, -28, -46, 29, -30, 18, -9, -12, 25, 25, 6, 35, 3, 19, 44, 27, -33, -13, 12, 2, -62, -2, 23, 10, -45, -25, -54, -10, -17, 44
    0xe4f5f704, 0x12e21dd2, 0x1919f4f7, 0x13032306, 0xf3df1b2c, 0xfec2020c, 0xe7d30a17, 0x2ceff6ca,
    // 11, 3, 34, -30, 49, -40, 52, -27, 8, -15, -23, 14, -3, -38, 23, -17, -7, -27, -6, 5, 38, 21, -19, 11, 10, -12, -13, 36, 0, 33, 7, -20
    0xe222030b, 0xe534d831, 0xee9f108, 0xef17dafd, 0x5fae5f9, 0xbed1526, 0x24f3f40a, 0xec072100,
    // -34, -35, -29, 44, 26, 6, 30, 7, -27, -58, 74, 14, -23, 10, 3, -39, -49, -23, 36, 44, 6, 8, -27, 71, -58, -46, 89, 84, 69, 52, -26, 70
    0x2ce3ddde, 0x71e061a, 0xe4ac6e5, 0xd9030ae9, 0x2c24e9cf, 0x47e50806, 0x5459d2c6, 0x46e63445,
    // -5, -32, -5, 0, -62, -10, -19, -10, 40, -59, 33, 21, 97, -4, -10, 8, 35, 51, -3, 7, 15, 35, -22, 43, 24, -9, 7, 0, 20, 11, -17, 79
    0xfbe0fb, 0xf6edf6c2, 0x1521c528, 0x8f6fc61, 0x7fd3323, 0x2bea230f, 0x7f718, 0x4fef0b14,
    // -27, -18, -2, -21, -29, 3, -1, -44, -3, 5, 29, 12, 29, 8, 2, 13, -8, 16, 9, 4, -4, -44, -19, -33, 30, -3, -58, -17, 18, 53, 36, 6
    0xebfeeee5, 0xd4ff03e3, 0xc1d05fd, 0xd02081d, 0x40910f8, 0xdfedd4fc, 0xefc6fd1e, 0x6243512,
    // -47, 37, -19, -52, -11, 9, 20, -13, 35, -25, -6, 38, -51, -66, 25, -35, 11, -37, -19, 10, 37, 20, 16, 12, -8, -8, 15, 16, 24, 41, 41, -13
    0xcced25d1, 0xf31409f5, 0x26fae723, 0xdd19becd, 0xaeddb0b, 0xc101425, 0x100ff8f8, 0xf3292918,
    // 16, -11, -40, 55, -38, -37, 28, -1, -22, -1, -28, 60, -36, 1, -12, 24, -2, -31, -28, -8, 9, -8, 1, 21, -6, -6, -24, -17, -1, 26, -7, -8
    0x37d8f510, 0xff1cdbda, 0x3ce4ffea, 0x18f401dc, 0xf8e4e1fe, 0x1501f809, 0xefe8fafa, 0xf8f91aff,
    // 5, 1, 5, -3, -2, 0, -6, -9, 4, -2, 7, 14, 11, 2, -2, 0, 31, -17, -4, 34, 64, -55, 18, -60, -36, -22, -34, -13, 69, -7, 14, 19
    0xfd050105, 0xf7fa00fe, 0xe07fe04, 0xfe020b, 0x22fcef1f, 0xc412c940, 0xf3deeadc, 0x130ef945,
    // 38, 23, 5, 0, 10, 12, 27, 33, 1, 5, -35, 21, -23, -14, -12, 10, 19, 9, 13, -10, -49, -5, 5, -39, -41, 46, 24, -29, 6, 59, -18, -1
    0x51726, 0x211b0c0a, 0x15dd0501, 0xaf4f2e9, 0xf60d0913, 0xd905fbcf, 0xe3182ed7, 0xffee3b06,
    // -15, -25, -19, 47, 13, 9, -5, -25, 5, 38, -58, -26, 45, -17, 56, -31, -4, -10, 7, 22, 14, 9, -36, 35, -8, -14, -35, -46, 2, 10, -37, 60
    0x2fede7f1, 0xe7fb090d, 0xe6c62605, 0xe138ef2d, 0x1607f6fc, 0x23dc090e, 0xd2ddf2f8, 0x3cdb0a02,
    // 10, -4, 33, 22, 30, 6, 0, 9, -37, -44, 28, 30, 5, -54, 45, 49, 15, 28, -12, 2, 21, 36, -34, 6, 40, -9, -23, 36, 19, 10, 3, 8
    0x1621fc0a, 0x900061e, 0x1e1cd4db, 0x312dca05, 0x2f41c0f, 0x6de2415, 0x24e9f728, 0x8030a13,
    // 18, -6, 8, -2, -20, 46, 23, 45, -36, -19, 30, 10, 32, -24, -25, -17, 28, 12, -5, 12, 24, 28, -26, 23, 16, -13, 28, -17, 42, 12, 11, -86
    0xfe08fa12, 0x2d172eec, 0xa1eeddc, 0xefe7e820, 0xcfb0c1c, 0x17e61c18, 0xef1cf310, 0xaa0b0c2a,
    // -23, -31, -9, -5, 4, -6, 12, -6, 3, -10, 31, -2, -26, 17, 6, 2, 6, 15, -45, -26, -3, -8, 3, -13, -5, 15, -64, 36, -63, -2, -8, 8
    0xfbf7e1e9, 0xfa0cfa04, 0xfe1ff603, 0x20611e6, 0xe6d30f06, 0xf303f8fd, 0x24c00ffb, 0x8f8fec1,
    // 12, 11, -5, 33, 5, 20, -2, 7, 21, 2, -19, 9, -7, 9, -20, 3, 23, -42, -8, -27, 4, 30, 0, 22, 0, -67, 0, 35, 2, -67, -4, -11
    0x21fb0b0c, 0x7fe1405, 0x9ed0215, 0x3ec09f9, 0xe5f8d617, 0x16001e04, 0x2300bd00, 0xf5fcbd02,
    // 7, -33, 50, -41, 14, -1, -41, 6, 2, -30, -37, 23, -6, 27, -17, -18, -8, 31, 18, 19, 0, 8, -65, 24, 55, -12, -67, 33, 28, -7, -23, 3
    0xd732df07, 0x6d7ff0e, 0x17dbe202, 0xeeef1bfa, 0x13121ff8, 0x18bf0800, 0x21bdf437, 0x3e9f91c,
    // -11, 34, -37, 2, -5, -22, -12, 27, 40, -52, -31, -46, -11, -26, -41, 50, 17, 11, -13, 6, 23, -5, -13, 16, 20, 13, -19, -3, 18, 10, 2, 19
    0x2db22f5, 0x1bf4eafb, 0xd2e1cc28, 0x32d7e6f5, 0x6f30b11, 0x10f3fb17, 0xfded0d14, 0x13020a12,
    // 4, 12, 5, 26, 1, 9, -17, -6, -13, 3, -5, -4, 22, -42, -24, -14, -42, -23, 30, 40, -10, 14, -7, 49, -29, -29, 94, 46, 91, 26, 15, 3
    0x1a050c04, 0xfaef0901, 0xfcfb03f3, 0xf2e8d616, 0x281ee9d6, 0x31f90ef6, 0x2e5ee3e3, 0x30f1a5b,
    // 57, -20, 59, 42, -2, -64, -53, -12, -30, 5, 37, -70, -6, 71, -62, 49, -19, -15, -36, -16, 5, -10, -2, 18, -9, 12, 38, 46, 32, 23, 67, -23
    0x2a3bec39, 0xf4cbc0fe, 0xba2505e2, 0x31c247fa, 0xf0dcf1ed, 0x12fef605, 0x2e260cf7, 0xe9431720,
    // 23, 17, 58, -25, 46, 55, -19, -23, 25, -25, 30, -54, 24, -15, -6, -56, 43, 18, -57, 53, 50, -18, 23, 9, -22, 24, 47, 54, -29, -58, 3, 17
    0xe73a1117, 0xe9ed372e, 0xca1ee719, 0xc8faf118, 0x35c7122b, 0x917ee32, 0x362f18ea, 0x1103c6e3,
    // 47, -46, -9, 23, -31, -33, -39, 49, 38, 9, 49, -14, -15, -61, 33, -38, 8, 20, -23, 1, -14, -39, -45, -10, 4, 4, -24, 19, -33, 18, -18, -7
    0x17f7d22f, 0x31d9dfe1, 0xf2310926, 0xda21c3f1, 0x1e91408, 0xf6d3d9f2, 0x13e80404, 0xf9ee12df,
    // -7, 35, -8, -15, 31, -46, -47, -27, 26, 0, -26, 0, -6, -15, -21, -36, -12, 48, 21, 9, -25, -4, 35, -23, -19, -22, 55, 23, -16, -15, -25, 31
    0xf1f823f9, 0xe5d1d21f, 0xe6001a, 0xdcebf1fa, 0x91530f4, 0xe923fce7, 0x1737eaed, 0x1fe7f1f0,
    // 25, 6, 18, 6, 5, 20, -3, -6, -9, -16, -3, 2, 11, 28, -15, -14, -5, 16, 5, -13, -25, -10, 70, 11, -31, 3, 17, -32, -19, -13, -22, -16
    0x6120619, 0xfafd1405, 0x2fdf0f7, 0xf2f11c0b, 0xf30510fb, 0xb46f6e7, 0xe01103e1, 0xf0eaf3ed,
    // -9, -6, 10, -15, 4, -9, -4, -23, -21, 1, 14, -23, 6, -14, 3, -14, 49, 76, -9, 44, -9, -55, 13, -49, -22, 0, -23, 48, 38, 58, -11, 6
    0xf10afaf7, 0xe9fcf704, 0xe90e01eb, 0xf203f206, 0x2cf74c31, 0xcf0dc9f7, 0x30e900ea, 0x6f53a26,
    // 56, -25, -58, -34, 60, 23, -47, -45, 1, -17, -26, 1, -4, 11, 13, 29, 3, -37, -27, -5, 35, 9, 23, 13, -24, 9, 30, 18, 12, 46, 52, -23
    0xdec6e738, 0xd3d1173c, 0x1e6ef01, 0x1d0d0bfc, 0xfbe5db03, 0xd170923, 0x121e09e8, 0xe9342e0c,
    // -22, 10, 8, 22, 43, 19, -20, 15, 1, 38, -21, -9, -31, 35, -36, 1, -43, -31, 7, 15, 9, -23, -29, 11, -41, -14, -34, 11, -16, 22, -25, -90
    0x16080aea, 0xfec132b, 0xf7eb2601, 0x1dc23e1, 0xf07e1d5, 0xbe3e909, 0xbdef2d7, 0xa6e716f0,
    // -11, -38, 6, -9, 14, 4, 34, 28, -11, -5, 46, 46, -6, 39, 16, -34, -39, -25, 15, 28, -26, -15, -37, 38, -33, -36, 82, 31, 16, 24, -18, 89
    0xf706daf5, 0x1c22040e, 0x2e2efbf5, 0xde1027fa, 0x1c0fe7d9, 0x26dbf1e6, 0x1f52dcdf, 0x59ee1810,
    // 42, 0, -4, 12, -40, 23, 53, -33, -35, -2, -4, -40, -21, -8, -5, -38, 15, -21, -28, -14, -15, -25, -40, -15, 1, 32, 33, -9, 2, -10, 28, 48
    0xcfc002a, 0xdf3517d8, 0xd8fcfedd, 0xdafbf8eb, 0xf2e4eb0f, 0xf1d8e7f1, 0xf7212001, 0x301cf602,
    // -6, 56, 19, -32, -33, 2, -44, 5, 6, -28, 13, 20, -64, 32, 24, -5, 10, -11, -40, -14, 18, 0, 24, 16, -8, -6, 58, 59, 22, 47, 68, -68
    0xe01338fa, 0x5d402df, 0x140de406, 0xfb1820c0, 0xf2d8f50a, 0x10180012, 0x3b3afaf8, 0xbc442f16,
    // 16, 6, -1, 7, 9, -1, 3, 1, 20, -27, -10, 22, -12, -6, -3, -16, -4, -20, -19, -53, 67, -77, 22, 21, -4, -79, -11, -21, 49, -23, 5, 29
    0x7ff0610, 0x103ff09, 0x16f6e514, 0xf0fdfaf4, 0xcbedecfc, 0x1516b343, 0xebf5b1fc, 0x1d05e931,
    // 4, 6, -9, 13, -6, 2, 8, 24, -11, 19, -10, -9, 14, 9, -3, 20, -13, 15, -8, 5, 1, 0, -128, 11, 54, -5, -11, 85, 15, 11, 3, 29
    0xdf70604, 0x180802fa, 0xf7f613f5, 0x14fd090e, 0x5f80ff3, 0xb800001, 0x55f5fb36, 0x1d030b0f,
    // -9, -14, -45, 37, -40, -59, 32, 5, -28, 12, -19, 60, -6, -21, -14, 54, 12, -2, -47, 27, 24, 4, -9, 47, 5, -8, -37, 23, -30, 16, -21, -22
    0x25d3f2f7, 0x520c5d8, 0x3ced0ce4, 0x36f2ebfa, 0x1bd1fe0c, 0x2ff70418, 0x17dbf805, 0xeaeb10e2,
    // -20, 10, -21, -1, -6, 1, 8, 49, 20, 18, 18, 2, 26, 12, 16, 46, -23, 6, 17, 25, -19, -18, 61, 21, -30, -20, 14, -17, 9, 7, -45, -30
    0xffeb0aec, 0x310801fa, 0x2121214, 0x2e100c1a, 0x191106e9, 0x153deeed, 0xef0eece2, 0xe2d30709,
    // 30, -7, 27, 0, -4, 29, 8, 1, -34, 40, -5, 23, -2, -12, 5, -27, -21, -34, 10, 28, -2, 1, -18, 34, -14, -28, 57, 8, 39, 29, -4, -42
    0x1bf91e, 0x1081dfc, 0x17fb28de, 0xe505f4fe, 0x1c0adeeb, 0x22ee01fe, 0x839e4f2, 0xd6fc1d27,
    // 4, -27, 11, 40, -11, 41, 43, -55, 71, 1, -13, 12, -61, 28, 8, 66, 20, 46, -3, 28, -34, -26, -23, 36, 20, 7, 48, 10, 40, 18, -7, -2
    0x280be504, 0xc92b29f5, 0xcf30147, 0x42081cc3, 0x1cfd2e14, 0x24e9e6de, 0xa300714, 0xfef91228,
    // 1, 6, 2, 1, -6, 5, 3, -6, -4, 0, -4, 6, 12, 3, -5, 4, -6, 16, -18, -38, 10, -62, -2, -40, 25, -25, -4, -8, 43, 66, -24, 14
    0x1020601, 0xfa0305fa, 0x6fc00fc, 0x4fb030c, 0xdaee10fa, 0xd8fec20a, 0xf8fce719, 0xee8422b,
    // -1, 19, -4, -40, -12, -9, 6, 50, 22, 64, -57, 10, -9, -12, -6, 40, 27, -33, -8, 27, -7, -1, -70, 8, -26, -25, 83, -83, 8, 23, 3, 32
    0xd8fc13ff, 0x3206f7f4, 0xac74016, 0x28faf4f7, 0x1bf8df1b, 0x8bafff9, 0xad53e7e6, 0x20031708,
    // -50, 8, 73, 49, -56, -15, 34, 14, -3, 36, 5, -19, -44, -33, -11, -38, 12, -18, -21, -15, 49, 27, -14, 3, -15, 8, -28, -46, -24, 10, -3, 58
    0x314908ce, 0xe22f1c8, 0xed0524fd, 0xdaf5dfd4, 0xf1ebee0c, 0x3f21b31, 0xd2e408f1, 0x3afd0ae8,
    // 4, 12, 1, -21, 27, 4, 2, 24, -27, 13, -6, -3, -35, 29, 11, 8, 29, 38, -5, -10, 21, 49, 68, 26, 50, 7, -11, -13, 42, -8, 45, 87
    0xeb010c04, 0x1802041b, 0xfdfa0de5, 0x80b1ddd, 0xf6fb261d, 0x1a443115, 0xf3f50732, 0x572df82a,
};
static const uint embedded_encoder3_ResidualBlock_0_body_pw_expand_bias_dwords[32] = {
    // -0.03056, -0.00774, -0.0872, -0.03397, -0.01283, 0.06555, -0.06232, -0.06024, -0.02092, -0.02213, -0.11145, -0.03296, -0.0371, -0.01117, -0.0514, -0.03546
    0x9feda7d3, 0xa859ad95, 0x2c32a292, 0xabb6abfa, 0xa5aaa55b, 0xa838af22, 0xa1b8a8c0, 0xa88aaa94,
    // -0.06168, -0.0682, -0.03442, -0.1384, -0.003574, -0.0513, -0.0624, -0.0647, 0.001094, -0.0243, -0.02722, -0.0195, -0.04874, -0.03226, -0.1975, -0.03995
    0xac5dabe5, 0xb06ea868, 0xaa919b52, 0xac24abfd, 0xa639147b, 0xa4fea6f8, 0xa821aa3d, 0xa91db252,
    // 0.00595, -0.2825, -0.08014, -0.04858, -0.01758, -0.01582, -0.0274, -0.0665, -0.01006, -0.04016, -0.03485, -0.04538, -0.2461, 0.005367, -0.1757, -0.01924
    0xb4851e18, 0xaa38ad21, 0xa40da480, 0xac42a704, 0xa924a127, 0xa9cfa876, 0x1d7fb3e0, 0xa4edb19f,
    // -0.1183, -0.04324, -0.02394, -0.02614, -0.01756, -0.04037, -0.33, -0.009056, -0.2256, -0.015144, -0.04828, -0.0257, -0.10236, -0.0445, -0.0476, -0.0308
    0xa989af92, 0xa6b1a621, 0xa92ba47f, 0xa0a3b548, 0xa3c1b338, 0xa694aa2e, 0xa9b2ae8d, 0xa7e3aa18,
};
static const uint embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -15, 19, -14, 13, 12, 0, 10, 24, -10, -34, -1, -77, 15, 2, 69, 1, -4, 15, 45, 18, 0, -46, 1, -24, -79, 23, 63, -34, 41, 17, -4, -8
    0xdf213f1, 0x180a000c, 0xb3ffdef6, 0x145020f, 0x122d0ffc, 0xe801d200, 0xde3f17b1, 0xf8fc1129,
    // -24, -20, -29, 20, -36, -16, 26, 14, 38, -11, 46, 5, 14, 6, 5, 41, 8, 10, 5, -89, 53, 4, 1, 16, -18, 61, 20, -22, -1, 18, -5, -35
    0x14e3ece8, 0xe1af0dc, 0x52ef526, 0x2905060e, 0xa7050a08, 0x10010435, 0xea143dee, 0xddfb12ff,
    // 5, -19, 24, -18, 28, -18, -6, 12, -5, -9, -41, 5, -15, 7, -32, -5, 10, -11, -48, -8, -5, 14, 13, -21, -3, -20, 1, 44, -15, -26, -60, 17
    0xee18ed05, 0xcfaee1c, 0x5d7f7fb, 0xfbe007f1, 0xf8d0f50a, 0xeb0d0efb, 0x2c01ecfd, 0x11c4e6f1,
    // 35, -48, 3, -37, 25, 4, 14, 3, -2, 16, 28, -1, 35, 51, 5, -19, 20, 3, 1, -6, -23, 16, -19, 5, -53, -25, 20, 22, -15, -10, -18, 5
    0xdb03d023, 0x30e0419, 0xff1c10fe, 0xed053323, 0xfa010314, 0x5ed10e9, 0x1614e7cb, 0x5eef6f1,
    // -6, -19, -17, -12, 70, -7, -13, 11, -16, 12, 12, -34, -28, -9, -41, 19, 5, -10, -20, -23, 13, 9, 7, 14, -47, -4, 56, 10, 90, 45, -15, 6
    0xf4efedfa, 0xbf3f946, 0xde0c0cf0, 0x13d7f7e4, 0xe9ecf605, 0xe07090d, 0xa38fcd1, 0x6f12d5a,
    // 23, -5, 6, -18, 6, -25, -39, -49, -45, 22, -53, 25, -12, -1, 13, 31, -26, 39, -9, -48, -37, 19, -2, -2, 11, -26, 2, -8, 12, -3, -31, 19
    0xee06fb17, 0xcfd9e706, 0x19cb16d3, 0x1f0dfff4, 0xd0f727e6, 0xfefe13db, 0xf802e60b, 0x13e1fd0c,
    // 13, -36, 15, 3, 27, -41, -15, 13, -18, -10, 20, 45, 6, -17, 8, 12, 0, 2, -12, -6, 28, -34, -3, 23, 15, 9, 15, 24, 27, -38, -20, 4
    0x30fdc0d, 0xdf1d71b, 0x2d14f6ee, 0xc08ef06, 0xfaf40200, 0x17fdde1c, 0x180f090f, 0x4ecda1b,
    // 43, 25, 8, 8, 13, -48, -34, 8, 13, 22, -96, 2, 33, 5, 45, -20, -4, -1, 10, 22, 23, 3, 11, -16, -31, 27, -58, -13, -13, -6, -29, 23
    0x808192b, 0x8ded00d, 0x2a0160d, 0xec2d0521, 0x160afffc, 0xf00b0317, 0xf3c61be1, 0x17e3faf3,
    // -3, -23, -44, -13, 7, 26, 6, -12, 65, -13, -17, 1, -3, 18, -2, 3, -12, 35, 2, 8, -18, 5, 19, 3, 13, -29, -7, 14, 47, 0, 59, -11
    0xf3d4e9fd, 0xf4061a07, 0x1eff341, 0x3fe12fd, 0x80223f4, 0x31305ee, 0xef9e30d, 0xf53b002f,
    // -20, 23, 15, 13, -4, 45, -40, -12, 3, -19, -60, -12, -24, 8, 11, 8, 0, 12, 11, 39, -15, -13, -24, -8, 6, -3, 3, -15, -13, 6, 26, -39
    0xd0f17ec, 0xf4d82dfc, 0xf4c4ed03, 0x80b08e8, 0x270b0c00, 0xf8e8f3f1, 0xf103fd06, 0xd91a06f3,
    // 35, 47, 23, -10, 37, 44, -9, -5, -10, 17, 16, 14, 28, -30, -48, 43, 10, -22, 22, -7, 4, -10, 13, 9, 14, -41, 16, 1, 10, -7, 25, -19
    0xf6172f23, 0xfbf72c25, 0xe1011f6, 0x2bd0e21c, 0xf916ea0a, 0x90df604, 0x110d70e, 0xed19f90a,
    // -49, -23, -10, -13, 49, 2, -41, 10, -33, 49, 4, -14, -7, 7, 16, -1, 38, 7, -40, -8, -41, -34, -3, -45, 26, -47, 22, 11, 0, -16, 17, 21
    0xf3f6e9cf, 0xad70231, 0xf20431df, 0xff1007f9, 0xf8d80726, 0xd3fdded7, 0xb16d11a, 0x1511f000,
    // 10, 18, 23, 11, 4, -8, 0, -9, 31, 17, 56, 12, -30, -12, 46, -13, 7, -41, 22, 26, -20, -20, 7, 19, -2, 49, 17, -1, -11, 11, 12, 4
    0xb17120a, 0xf700f804, 0xc38111f, 0xf32ef4e2, 0x1a16d707, 0x1307ecec, 0xff1131fe, 0x40c0bf5,
    // 5, 21, 12, 24, 0, 29, -14, -13, 35, 9, -17, -16, 7, -11, 35, 5, 13, 11, 33, 10, 48, 16, 10, 14, 25, 51, -22, 4, -14, 16, 15, 30
    0x180c1505, 0xf3f21d00, 0xf0ef0923, 0x523f507, 0xa210b0d, 0xe0a1030, 0x4ea3319, 0x1e0f10f2,
    // -3, -13, 39, 11, -14, 40, 2, -17, -21, 6, 50, 8, -39, -2, 25, -3, 24, -22, 4, 23, 5, -22, -17, -14, 4, 45, -13, -33, -8, 44, -16, -7
    0xb27f3fd, 0xef0228f2, 0x83206eb, 0xfd19fed9, 0x1704ea18, 0xf2efea05, 0xdff32d04, 0xf9f02cf8,
    // -41, -34, 14, 16, -22, -33, -3, 29, 22, 8, -28, 3, -43, 0, -3, 31, 59, -18, 33, -9, 40, 7, -26, 25, 61, 27, -32, 7, -6, 1, -15, 6
    0x100eded7, 0x1dfddfea, 0x3e40816, 0x1ffd00d5, 0xf721ee3b, 0x19e60728, 0x7e01b3d, 0x6f101fa,
    // 6, 28, -3, 6, 9, 9, 26, -2, 24, 19, 4, 12, -73, -16, -6, 19, 32, -21, 22, -11, 20, -58, 21, 31, 14, -24, -14, 17, 17, -25, -47, -11
    0x6fd1c06, 0xfe1a0909, 0xc041318, 0x13faf0b7, 0xf516eb20, 0x1f15c614, 0x11f2e80e, 0xf5d1e711,
    // -19, -66, -8, 18, 10, 29, 5, 18, -25, 11, 9, 0, -12, 9, 4, -17, -12, 12, -26, 10, -12, -21, 39, -24, 13, -22, 6, 19, -66, 7, 32, 50
    0x12f8beed, 0x12051d0a, 0x90be7, 0xef0409f4, 0xae60cf4, 0xe827ebf4, 0x1306ea0d, 0x322007be,
    // -22, -4, 23, -30, 5, -38, 2, 3, 7, -19, -11, 12, -4, -5, 33, 4, -34, 29, 28, -9, -21, -19, 4, 0, -7, 8, 9, -19, 55, -10, 3, 5
    0xe217fcea, 0x302da05, 0xcf5ed07, 0x421fbfc, 0xf71c1dde, 0x4edeb, 0xed0908f9, 0x503f637,
    // 28, -49, -1, 5, -5, 3, -65, 26, 22, -6, -7, 6, 19, -18, -14, 52, -17, 6, 7, -27, 27, 6, -15, -19, -14, 44, -22, 4, 17, -14, 3, -14
    0x5ffcf1c, 0x1abf03fb, 0x6f9fa16, 0x34f2ee13, 0xe50706ef, 0xedf1061b, 0x4ea2cf2, 0xf203f211,
    // 10, -26, 12, 13, -1, 65, -1, 42, 0, 20, -13, -4, 13, 10, 2, -16, -18, 4, 6, -16, -16, -13, 3, 0, -6, -31, 1, 52, -23, -87, 13, 15
    0xd0ce60a, 0x2aff41ff, 0xfcf31400, 0xf0020a0d, 0xf00604ee, 0x3f3f0, 0x3401e1fa, 0xf0da9e9,
    // -60, -24, -23, -19, -11, -10, 32, -6, 15, 10, 29, 2, -58, -23, 56, -48, 0, 14, -3, 11, 1, 6, -13, 6, 56, 13, -35, -9, 15, 26, -12, -7
    0xede9e8c4, 0xfa20f6f5, 0x21d0a0f, 0xd038e9c6, 0xbfd0e00, 0x6f30601, 0xf7dd0d38, 0xf9f41a0f,
    // 7, -41, 20, -10, 2, -11, 19, -12, -4, 36, -1, 3, -20, 9, -2, 5, 57, -11, -23, -8, 11, -5, 11, -4, 13, 7, 2, 12, -19, 35, -29, 4
    0xf614d707, 0xf413f502, 0x3ff24fc, 0x5fe09ec, 0xf8e9f539, 0xfc0bfb0b, 0xc02070d, 0x4e323ed,
    // -26, -49, 14, -8, 1, -15, 3, 68, 5, 10, 3, -7, -6, 24, -18, -3, 31, -12, 41, -20, -2, 7, -5, -7, -9, -4, 20, 29, -41, -21, -28, 5
    0xf80ecfe6, 0x4403f101, 0xf9030a05, 0xfdee18fa, 0xec29f41f, 0xf9fb07fe, 0x1d14fcf7, 0x5e4ebd7,
    // 16, 47, 3, -9, 20, -4, 0, -24, -14, -17, 0, -38, -20, -11, -27, 37, -5, 4, 18, -5, -8, 6, -9, 16, -18, 18, -2, -30, 25, 67, 2, -4
    0xf7032f10, 0xe800fc14, 0xda00eff2, 0x25e5f5ec, 0xfb1204fb, 0x10f706f8, 0xe2fe12ee, 0xfc024319,
    // 19, 13, 26, 26, -11, -27, 2, 0, -68, 34, 55, 9, -1, 11, 52, 34, 13, 29, -10, -74, -26, -19, 20, -4, 7, -47, 15, 20, -3, -10, -5, 21
    0x1a1a0d13, 0x2e5f5, 0x93722bc, 0x22340bff, 0xb6f61d0d, 0xfc14ede6, 0x140fd107, 0x15fbf6fd,
    // 1, 33, 0, -11, 32, 0, -10, 28, 20, 10, 44, -8, -30, -28, 28, 10, 0, -24, 19, 7, 4, 21, -5, 15, -17, -16, 30, 22, 8, -98, 3, -38
    0xf5002101, 0x1cf60020, 0xf82c0a14, 0xa1ce4e2, 0x713e800, 0xffb1504, 0x161ef0ef, 0xda039e08,
    // -16, 29, 18, 1, 35, 11, 33, 41, 17, 21, 24, -43, 14, 25, -6, -71, 16, -16, -27, -10, 23, -39, -10, -45, 7, 27, 45, 26, -14, 3, 29, -31
    0x1121df0, 0x29210b23, 0xd5181511, 0xb9fa190e, 0xf6e5f010, 0xd3f6d917, 0x1a2d1b07, 0xe11d03f2,
    // -18, -2, -18, -16, -24, -7, 12, -7, -16, 4, -6, 1, 0, 5, 6, -13, 13, 66, 17, 38, 55, -52, 18, -33, 0, -19, -10, -16, -10, -11, -2, -24
    0xf0eefeee, 0xf90cf9e8, 0x1fa04f0, 0xf3060500, 0x2611420d, 0xdf12cc37, 0xf0f6ed00, 0xe8fef5f6,
    // 3, -16, 11, -23, -21, -9, 15, -9, 5, -21, 9, -9, 2, 12, -23, 1, 38, -13, -15, 2, 6, -15, 17, 5, -22, 8, -7, -6, 22, -8, 5, -23
    0xe90bf003, 0xf70ff7eb, 0xf709eb05, 0x1e90c02, 0x2f1f326, 0x511f106, 0xfaf908ea, 0xe905f816,
    // 4, 68, 26, -20, -4, -7, 14, -55, 45, 22, 7, -27, 24, -2, -12, -15, 1, -12, 68, 8, 5, 29, 17, -20, 12, -61, -38, -46, 22, -55, -19, -67
    0xec1a4404, 0xc90ef9fc, 0xe507162d, 0xf1f4fe18, 0x844f401, 0xec111d05, 0xd2dac30c, 0xbdedc916,
    // 23, -7, 8, -16, 0, 45, 22, 26, -68, -10, 31, -13, 26, -2, -11, -17, 12, 2, -65, 8, -9, -68, -10, 3, -27, -33, 29, -5, 11, 11, 73, -44
    0xf008f917, 0x1a162d00, 0xf31ff6bc, 0xeff5fe1a, 0x8bf020c, 0x3f6bcf7, 0xfb1ddfe5, 0xd4490b0b,
    // 49, 35, -25, -26, 19, 4, -40, 12, 26, -8, 12, -19, -24, -36, -15, 23, -7, 49, 11, -44, 19, -40, -51, -58, 0, 0, -29, 9, 25, -11, -30, -1
    0xe6e72331, 0xcd80413, 0xed0cf81a, 0x17f1dce8, 0xd40b31f9, 0xc6cdd813, 0x9e30000, 0xffe2f519,
    // 35, 47, -59, 20, 26, 30, -37, -18, 13, 23, 6, -6, 17, -6, 23, 49, -77, 16, 27, 10, -5, 2, 3, 7, 6, 6, 26, -14, -28, -11, 6, -85
    0x14c52f23, 0xeedb1e1a, 0xfa06170d, 0x3117fa11, 0xa1b10b3, 0x70302fb, 0xf21a0606, 0xab06f5e4,
    // -15, 3, -15, 16, 5, 7, 7, -24, 33, -47, -29, 14, -7, 34, -9, -15, -43, -35, 16, 3, -71, 2, -8, 39, 0, -17, 12, 26, -14, -24, -19, 19
    0x10f103f1, 0xe8070705, 0xee3d121, 0xf1f722f9, 0x310ddd5, 0x27f802b9, 0x1a0cef00, 0x13ede8f2,
    // 18, -52, 0, 29, -26, 80, 1, -26, -20, -23, 20, 22, 10, -52, -11, -34, -40, 44, 17, 10, -11, 5, -4, -17, -14, -5, -16, -71, -32, 35, 25, -2
    0x1d00cc12, 0xe60150e6, 0x1614e9ec, 0xdef5cc0a, 0xa112cd8, 0xeffc05f5, 0xb9f0fbf2, 0xfe1923e0,
    // -30, -45, 7, 23, -9, 8, 61, -27, 11, 25, -24, -11, 6, 44, -20, -26, 44, 62, -26, 39, 9, -21, 71, 58, 6, -4, 15, -2, -6, -1, -28, 12
    0x1707d3e2, 0xe53d08f7, 0xf5e8190b, 0xe6ec2c06, 0x27e63e2c, 0x3a47eb09, 0xfe0ffc06, 0xce4fffa,
    // 9, 37, 37, -2, -25, 20, 28, 21, -51, -10, -1, 21, -9, 41, -11, -17, 30, 14, 11, -12, -31, 11, 80, 7, 7, -46, -20, 32, -22, 10, -9, 88
    0xfe252509, 0x151c14e7, 0x15fff6cd, 0xeff529f7, 0xf40b0e1e, 0x7500be1, 0x20ecd207, 0x58f70aea,
    // -29, -30, 46, -13, -9, -2, 60, -27, 11, -18, -29, -20, 2, 1, -5, -29, 3, 8, -19, 24, 8, -1, 42, 22, -3, 3, -2, 5, -1, -7, -21, -4
    0xf32ee2e3, 0xe53cfef7, 0xece3ee0b, 0xe3fb0102, 0x18ed0803, 0x162aff08, 0x5fe03fd, 0xfcebf9ff,
    // 7, -59, 26, -17, -24, -3, 20, -17, -31, -21, -9, 11, 25, -1, 11, -31, 1, 10, -5, -19, -6, 3, 54, -22, 16, -36, -21, -7, 47, -32, -5, 48
    0xef1ac507, 0xef14fde8, 0xbf7ebe1, 0xe10bff19, 0xedfb0a01, 0xea3603fa, 0xf9ebdc10, 0x30fbe02f,
    // -47, 3, 4, -21, -19, -8, -32, -30, -11, 55, 28, 13, -3, -16, 26, -47, 62, -44, 5, -17, 46, -13, -12, -36, 3, 2, -4, -32, 14, -11, 0, -7
    0xeb0403d1, 0xe2e0f8ed, 0xd1c37f5, 0xd11af0fd, 0xef05d43e, 0xdcf4f32e, 0xe0fc0203, 0xf900f50e,
    // -13, -26, 11, -45, -24, -39, 16, 34, 14, -44, -1, -10, 18, 61, 27, -24, 29, -11, 3, -7, 23, -17, -31, -36, 3, 12, 11, 56, -55, -8, -10, -17
    0xd30be6f3, 0x2210d9e8, 0xf6ffd40e, 0xe81b3d12, 0xf903f51d, 0xdce1ef17, 0x380b0c03, 0xeff6f8c9,
    // -52, -31, 0, -3, -18, 7, -36, -54, -12, 51, 26, -9, 13, -7, 30, -45, 59, -13, -23, -66, 22, 40, -40, -29, -9, 22, -19, -20, -24, -8, -1, -1
    0xfd00e1cc, 0xcadc07ee, 0xf71a33f4, 0xd31ef90d, 0xbee9f33b, 0xe3d82816, 0xeced16f7, 0xfffff8e8,
    // -21, -9, -18, -18, -51, -26, 11, 13, 7, -51, -18, 3, 22, 34, 22, -24, -59, -10, 35, -24, 30, -1, 10, -12, 21, 27, -10, 29, 39, -9, -27, -41
    0xeeeef7eb, 0xd0be6cd, 0x3eecd07, 0xe8162216, 0xe823f6c5, 0xf40aff1e, 0x1df61b15, 0xd7e5f727,
    // 33, 22, 1, 95, 18, 28, -17, 34, -56, -7, -29, -11, -16, 102, -29, 13, -15, -19, 28, 15, -22, -12, -1, -7, -19, -45, 33, 1, 21, -14, 8, -14
    0x5f011621, 0x22ef1c12, 0xf5e3f9c8, 0xde366f0, 0xf1cedf1, 0xf9fff4ea, 0x121d3ed, 0xf208f215,
    // 18, -38, 9, -10, 23, -60, 15, -10, 54, 6, -21, 7, 25, -7, -51, -16, -45, -34, -44, 52, 0, -22, -60, 127, -10, -10, 10, -8, -15, 84, -15, -29
    0xf609da12, 0xf60fc417, 0x7eb0636, 0xf0cdf919, 0x34d4ded3, 0x7fc4ea00, 0xf80af6f6, 0xe3f154f1,
    // -43, -11, -13, 6, -15, 12, 15, -44, -14, -6, -17, -25, 10, 19, -18, -44, 6, 41, 2, -2, -50, -29, 15, 20, -14, -33, 12, -12, -24, -54, 35, -25
    0x6f3f5d5, 0xd40f0cf1, 0xe7effaf2, 0xd4ee130a, 0xfe022906, 0x140fe3ce, 0xf40cdff2, 0xe723cae8,
    // 7, -6, 19, -60, -32, -33, 2, -18, -17, -45, -24, -11, -6, -6, -6, -61, -6, -12, -47, -18, -1, -36, -52, -14, -6, -23, -38, -8, -16, -3, -8, -1
    0xc413fa07, 0xee02dfe0, 0xf5e8d3ef, 0xc3fafafa, 0xeed1f4fa, 0xf2ccdcff, 0xf8dae9fa, 0xfff8fdf0,
    // -35, -5, -11, -34, -18, 5, -1, -28, 46, -1, -13, 8, 16, 9, 17, -9, 6, -8, 10, 13, 25, 75, -3, -8, 0, 13, -35, -13, 12, -13, -17, 20
    0xdef5fbdd, 0xe4ff05ee, 0x8f3ff2e, 0xf7110910, 0xd0af806, 0xf8fd4b19, 0xf3dd0d00, 0x14eff30c,
    // -5, 46, 9, 27, -55, 46, 0, -5, -43, -41, 22, 25, 1, -14, 19, 52, 43, 46, 28, -22, -15, 14, -12, -20, 4, 4, -11, -34, 30, -8, 21, -25
    0x1b092efb, 0xfb002ec9, 0x1916d7d5, 0x3413f201, 0xea1c2e2b, 0xecf40ef1, 0xdef50404, 0xe715f81e,
    // 19, 29, -31, -15, 12, -2, -16, 16, 11, 17, 24, 11, 23, -12, 25, 13, 18, 29, 14, -30, -18, 0, -32, -21, -1, 25, -10, 18, 0, 3, 6, 10
    0xf1e11d13, 0x10f0fe0c, 0xb18110b, 0xd19f417, 0xe20e1d12, 0xebe000ee, 0x12f619ff, 0xa060300,
    // -4, 70, -30, 27, 23, 21, -7, 24, 29, 16, -2, -5, 10, 9, 13, 21, 12, 6, 34, 32, 14, 15, 7, 5, 6, 39, 19, 6, 23, 16, 11, -9
    0x1be246fc, 0x18f91517, 0xfbfe101d, 0x150d090a, 0x2022060c, 0x5070f0e, 0x6132706, 0xf70b1017,
    // 59, 8, 20, 4, 43, -9, 40, 48, -25, -27, 21, 4, 1, -21, 17, 60, 7, -23, -24, 58, -25, 9, 10, 45, 11, 17, 19, 29, -43, -5, 23, -44
    0x414083b, 0x3028f72b, 0x415e5e7, 0x3c11eb01, 0x3ae8e907, 0x2d0a09e7, 0x1d13110b, 0xd417fbd5,
    // 20, -68, 26, -16, 47, -38, 36, -2, 32, 42, -18, -71, -8, -11, 12, -25, -21, -54, 39, -34, 18, -36, 13, 5, 1, 14, 24, -43, -6, -34, -18, 25
    0xf01abc14, 0xfe24da2f, 0xb9ee2a20, 0xe70cf5f8, 0xde27caeb, 0x50ddc12, 0xd5180e01, 0x19eedefa,
    // -13, 22, -8, -23, -9, 8, 20, -19, 15, -13, 18, 17, -34, -29, 67, 25, -40, -11, 21, 26, -21, 16, -15, 34, 9, 21, -15, -21, -19, 5, 23, -28
    0xe9f816f3, 0xed1408f7, 0x1112f30f, 0x1943e3de, 0x1a15f5d8, 0x22f110eb, 0xebf11509, 0xe41705ed,
    // 17, -38, -8, 27, -6, 8, 11, -48, -2, -12, 9, -14, 2, -48, 24, 66, -57, -11, 3, -15, 46, -20, 4, -51, -4, 33, 7, -28, -21, -2, 39, -21
    0x1bf8da11, 0xd00b08fa, 0xf209f4fe, 0x4218d002, 0xf103f5c7, 0xcd04ec2e, 0xe40721fc, 0xeb27feeb,
    // -14, -38, -39, -10, 2, -2, 67, -12, -14, 1, -26, -25, -2, 33, -7, 3, 21, -20, -43, 45, -10, 64, 50, 46, -4, -10, 2, -1, -29, -32, 2, -30
    0xf6d9daf2, 0xf443fe02, 0xe7e601f2, 0x3f921fe, 0x2dd5ec15, 0x2e3240f6, 0xff02f6fc, 0xe202e0e3,
    // 5, -25, 39, -32, -23, -51, 19, 16, -20, -11, -20, -23, 4, 20, 24, 21, 60, -23, -4, -12, -16, -28, 16, 6, 0, -18, -8, 0, -26, -19, -25, 36
    0xe027e705, 0x1013cde9, 0xe9ecf5ec, 0x15181404, 0xf4fce93c, 0x610e4f0, 0xf8ee00, 0x24e7ede6,
    // -27, -4, 15, -2, -21, 0, 7, -15, -39, -8, 9, -10, -14, -2, 10, -28, 7, -21, 14, -32, 13, -12, -7, 0, -9, -18, 1, -38, -11, -22, -46, -46
    0xfe0ffce5, 0xf10700eb, 0xf609f8d9, 0xe40afef2, 0xe00eeb07, 0xf9f40d, 0xda01eef7, 0xd2d2eaf5,
    // -12, 54, -41, -45, -28, -58, 0, 12, 3, -24, 3, -21, 3, 3, 11, -32, -27, -41, -42, -16, 11, -44, 47, 19, -18, 18, -31, 11, -57, 12, -8, 2
    0xd3d736f4, 0xc00c6e4, 0xeb03e803, 0xe00b0303, 0xf0d6d7e5, 0x132fd40b, 0xbe112ee, 0x2f80cc7,
    // 46, 21, -60, -36, 15, -7, -14, 43, -34, -5, 28, -9, 17, -34, 29, 61, -11, 68, 13, 3, 17, -1, -33, -16, -11, -9, -34, -17, 9, -16, -25, -49
    0xdcc4152e, 0x2bf2f90f, 0xf71cfbde, 0x3d1dde11, 0x30d44f5, 0xf0dfff11, 0xefdef7f5, 0xcfe7f009,
    // -16, 29, -14, -5, 37, -54, -48, 1, 44, 18, -19, -42, 6, -5, 28, 38, 29, -59, 7, -2, 28, -47, 16, -2, 7, 51, 20, -18, 33, -17, -7, -53
    0xfbf21df0, 0x1d0ca25, 0xd6ed122c, 0x261cfb06, 0xfe07c51d, 0xfe10d11c, 0xee143307, 0xcbf9ef21,
    // 8, -14, -16, -71, 46, 5, 26, -12, 49, -2, -27, -19, 6, -36, -46, 11, -24, -7, -32, 6, 11, -18, -21, -32, -7, 24, -12, 52, -19, -16, -7, 22
    0xb9f0f208, 0xf41a052e, 0xede5fe31, 0xbd2dc06, 0x6e0f9e8, 0xe0ebee0b, 0x34f418f9, 0x16f9f0ed,
    // 34, 18, -6, -19, 0, 88, 23, 11, -22, -10, 15, 10, -12, -22, -49, -14, 15, 41, 91, -50, -44, 50, -12, -27, 5, -44, 49, -15, 22, -69, -15, -33
    0xedfa1222, 0xb175800, 0xa0ff6ea, 0xf2cfeaf4, 0xce5b290f, 0xe5f432d4, 0xf131d405, 0xdff1bb16,
};
static const uint embedded_encoder3_ResidualBlock_0_body_pw_contract_bias_dwords[16] = {
    // 0.0002468, -5.62e-05, -0.000418, 0.0003293, 0.00017, -5.07e-05, 0.0005593, -0.0002787, 3.91e-05, -7.55e-05, -5e-06, -7.96e-05, -1.67e-06, -0.0001733, -0.000553, 0.000499
    0x83af0c0b, 0xd658ed9, 0x83530992, 0x8c911095, 0x84f30290, 0x85378054, 0x89ae801c, 0x10169088,
    // 0.0003834, -4.44e-05, -0.0001373, -0.0004475, -0.001066, -0.0005198, -0.0002868, -0.001403, -1.496e-05, 0.0008273, -0.0002024, -0.0003712, -0.000517, -0.001229, -0.000542, -0.0002279
    0x82e90e48, 0x8f558880, 0x9042945e, 0x95bf8cb3, 0x12c780fb, 0x8e158aa2, 0x9509903c, 0x8b789071,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass4(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = {
        uint3(1920, 1080, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 32), // threadGroupSliceSize
        uint3(1920, 1080, 32), // storageSize
        uint3(32, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        132710400, // threadGroupStorageByteOffset
        storage_Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped };
    
    const ConstantBufferStorage<576> storage_embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0063214427791535854, storage_embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = { embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005095676053315401, storage_embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_encoder3_ResidualBlock_0_body_pw_expand_bias = { embedded_encoder3_ResidualBlock_0_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_encoder3_ResidualBlock_0_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_0_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005064781755208969, storage_embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder3_ResidualBlock_0_body_pw_contract_bias = { embedded_encoder3_ResidualBlock_0_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder3_ResidualBlock_0_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_0_body_pw_contract_bias };
    
    // /encoder3/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_8 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_8 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_8 = uint3(64, 1, 32);
    const uint3 storageSize_slice_8 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_8 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_8 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_8 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_8 = dot(groupStart_slice_8, tensorByteStrides_slice_8);
    const RWBufferStorage storage_slice_8 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_8 = { logicalSize_slice_8, groupStart_slice_8, groupSize_slice_8, storageSize_slice_8, tensorByteStrides_slice_8, paddingBegin_slice_8, paddingEnd_slice_8, threadGroupByteOffsetInTensor_slice_8 + 199065600, storage_slice_8 };
    // Fusedquantized_/encoder3/ResidualBlock_0/residual_func/Concat_quantized_/encoder3/ResidualBlock_0/body/spatial_mixing/partial_conv/Conv_quantized_/encoder3/ResidualBlock_0/body/spatial_mixing/Concat_quantized_/encoder3/ResidualBlock_0/body/pw_expand/Conv_/encoder3/ResidualBlock_0/body/pw_expand_act/Relu_quantized_/encoder3/ResidualBlock_0/body/pw_contract/Conv_/encoder3/ResidualBlock_0/Add (32, 1080, 1920), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,) -> (32, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<32, 1>(0.015869587659835815, 0.016404252499341965, 0.015083401463925838, 0.015974493697285652, 0.019690383225679398, Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped, embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias, embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_0_body_pw_expand_bias, embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_0_body_pw_contract_bias, slice_8, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_4
#ifdef MLSR_PASS_4_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass4_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /encoder3/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_9 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_9 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_9 = uint3(32, 1, 32);
    const uint3 storageSize_slice_9 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_9 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_9 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_9 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_9 = dot(groupStart_slice_9, tensorByteStrides_slice_9);
    const RWBufferStorage storage_slice_9 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_9 = { logicalSize_slice_9, groupStart_slice_9, groupSize_slice_9, storageSize_slice_9, tensorByteStrides_slice_9, paddingBegin_slice_9, paddingEnd_slice_9, threadGroupByteOffsetInTensor_slice_9 + 199065600, storage_slice_9 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_9, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_4_POST


#ifdef MLSR_PASS_5
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 24, 0, -42, 23, 8, -16, 12, -6, 29, 7, -25, 1, -2, -3, -5, 0, 21, 16, 20, -35, 2, -25, 2, 44, 61, 77, -6, -4, 1, 27, 21, 19
    0x17d60018, 0xfa0cf008, 0x1e7071d, 0xfbfdfe, 0xdd141015, 0x2c02e702, 0xfcfa4d3d, 0x13151b01,
    // 32, 0, -4, -11, 7, -9, 19, 22, 39, 14, 31, -3, -7, 34, -16, -1, 9, -8, -6, -7, -20, -13, 22, 27, 24, 34, 7, 9, -18, 25, -6, -11
    0xf5fc0020, 0x1613f707, 0xfd1f0e27, 0xfff022f9, 0xf9faf809, 0x1b16f3ec, 0x9072218, 0xf5fa19ee,
    // 0, 29, 3, 72, 31, 4, -101, 25, -54, -53, 81, -29, 82, -8, 13, 72, 51, -12, -55, 25, -3, -43, 9, 1, 9, 15, 4, 1, 4, 45, 5, -24
    0x48031d00, 0x199b041f, 0xe351cbca, 0x480df852, 0x19c9f433, 0x109d5fd, 0x1040f09, 0xe8052d04,
    // 28, -22, -26, -7, 18, 7, 26, -1, 18, 2, 12, 10, -18, 13, -6, -3, 14, -48, -17, -14, -24, 0, 6, -15, -27, 14, 6, 15, -40, -22, 1, 62
    0xf9e6ea1c, 0xff1a0712, 0xa0c0212, 0xfdfa0dee, 0xf2efd00e, 0xf10600e8, 0xf060ee5, 0x3e01ead8,
    // 9, -19, -19, -19, -26, 1, 48, -28, -8, 29, -5, 33, -7, 16, 0, 3, -26, -4, -15, 17, 22, 6, -3, 18, 14, 5, -12, -18, -1, -2, -5, -3
    0xededed09, 0xe43001e6, 0x21fb1df8, 0x30010f9, 0x11f1fce6, 0x12fd0616, 0xeef4050e, 0xfdfbfeff,
    // -42, -10, 33, -32, -11, 8, 37, 25, 44, -18, 31, 22, -12, -8, 44, -28, -38, -34, -35, 8, 19, 3, 5, -25, -7, 19, 25, 31, 24, -31, 37, 6
    0xe021f6d6, 0x192508f5, 0x161fee2c, 0xe42cf8f4, 0x8dddeda, 0xe7050313, 0x1f1913f9, 0x625e118,
    // 9, 17, 1, -19, 53, 33, 16, -11, 9, -29, 50, -14, 19, -4, -40, 3, 3, -48, 0, 5, -61, -43, -50, 2, 8, -47, -17, -7, -1, 62, -55, 47
    0xed011109, 0xf5102135, 0xf232e309, 0x3d8fc13, 0x500d003, 0x2ced5c3, 0xf9efd108, 0x2fc93eff,
    // -24, 14, -3, -19, -2, 45, 34, -52, 42, 28, -41, 13, 13, -29, 38, -2, -30, 15, 22, 22, -10, -22, 4, -29, -35, 50, -58, -9, -13, -10, 19, 14
    0xedfd0ee8, 0xcc222dfe, 0xdd71c2a, 0xfe26e30d, 0x16160fe2, 0xe304eaf6, 0xf7c632dd, 0xe13f6f3,
    // 43, 29, -24, 49, 65, 28, -35, 52, -35, -99, 7, -45, 10, 9, -42, -18, -34, -33, 10, -23, 23, 16, 14, 19, 3, -24, 3, 13, -17, -19, 12, -5
    0x31e81d2b, 0x34dd1c41, 0xd3079ddd, 0xeed6090a, 0xe90adfde, 0x130e1017, 0xd03e803, 0xfb0cedef,
    // 3, -11, -8, -20, -2, 16, 6, 7, 37, -1, 0, -13, 10, -18, -9, -3, -53, 44, -5, -45, -14, -17, -22, 27, 56, 64, 40, -4, 27, 3, 41, 12
    0xecf8f503, 0x70610fe, 0xf300ff25, 0xfdf7ee0a, 0xd3fb2ccb, 0x1beaeff2, 0xfc284038, 0xc29031b,
    // 9, 9, 3, -17, 3, 1, -12, -5, 11, 14, 8, -16, 2, -15, -13, 21, 17, -18, 39, -13, 31, 24, -5, 51, 26, 1, 62, 24, 19, -21, 0, -16
    0xef030909, 0xfbf40103, 0xf0080e0b, 0x15f3f102, 0xf327ee11, 0x33fb181f, 0x183e011a, 0xf000eb13,
    // -69, 51, 5, 58, -67, -24, -14, -106, -52, 93, -96, 49, 53, 11, 29, -22, 4, 48, 30, 9, 16, -35, -14, 19, -37, -8, -30, -24, -28, 18, -21, 4
    0x3a0533bb, 0x96f2e8bd, 0x31a05dcc, 0xea1d0b35, 0x91e3004, 0x13f2dd10, 0xe8e2f8db, 0x4eb12e4,
    // -14, -12, -6, -1, 5, 3, -12, -20, -7, 9, -28, 5, -3, -23, 5, 15, 16, 46, -16, -10, 35, 32, -25, -18, -36, -19, -6, -6, -12, -29, -16, 26
    0xfffaf4f2, 0xecf40305, 0x5e409f9, 0xf05e9fd, 0xf6f02e10, 0xeee72023, 0xfafaeddc, 0x1af0e3f4,
    // 0, -17, -4, 8, 13, -4, 5, 16, 23, -41, -16, -15, -24, -7, -6, -3, -22, 36, -15, 42, -7, -22, -34, -36, -48, 4, -11, 8, 17, -5, 22, 10
    0x8fcef00, 0x1005fc0d, 0xf1f0d717, 0xfdfaf9e8, 0x2af124ea, 0xdcdeeaf9, 0x8f504d0, 0xa16fb11,
    // 20, 28, -15, -30, 5, 1, -13, 40, 53, 11, -38, -39, -67, -13, -23, -38, -29, 25, 31, -11, -6, 6, -5, 25, 14, 3, 29, -16, -6, 2, -19, -2
    0xe2f11c14, 0x28f30105, 0xd9da0b35, 0xdae9f3bd, 0xf51f19e3, 0x19fb06fa, 0xf01d030e, 0xfeed02fa,
    // -36, -27, 11, -13, 15, -13, 1, 15, -57, -10, 1, 13, -12, 11, -11, 4, 94, 27, -67, 79, 33, 17, 11, -71, 80, -51, 26, -50, 26, -85, -57, -61
    0xf30be5dc, 0xf01f30f, 0xd01f6c7, 0x4f50bf4, 0x4fbd1b5e, 0xb90b1121, 0xce1acd50, 0xc3c7ab1a,
    // -11, 17, 4, 35, 7, 3, -14, 28, 41, -5, 31, 2, 13, -10, 13, -1, -50, -8, -13, 3, -6, -14, -2, -13, -37, 47, 9, 15, 12, 0, -2, 11
    0x230411f5, 0x1cf20307, 0x21ffb29, 0xff0df60d, 0x3f3f8ce, 0xf3fef2fa, 0xf092fdb, 0xbfe000c,
    // -70, -40, 24, -45, -9, -4, 52, -60, -38, 19, -22, 12, 32, 14, -15, -35, -56, -7, -17, -17, -18, -16, 4, -35, -13, 54, -1, 37, 15, -16, 22, -1
    0xd318d8ba, 0xc434fcf7, 0xcea13da, 0xddf10e20, 0xefeff9c8, 0xdd04f0ee, 0x25ff36f3, 0xff16f00f,
    // -8, 28, -10, 27, -28, -24, -15, -43, -23, 7, 6, -18, 46, -13, 11, 8, -9, 26, 11, -74, 8, 3, 11, 82, 3, 46, -22, -60, -23, -6, -58, -12
    0x1bf61cf8, 0xd5f1e8e4, 0xee0607e9, 0x80bf32e, 0xb60b1af7, 0x520b0308, 0xc4ea2e03, 0xf4c6fae9,
    // -29, -30, -4, -33, -24, 7, -14, 23, -14, -6, 60, -16, 24, 1, -43, -2, -6, -13, 8, 2, -27, 3, -30, 30, 66, -32, -2, -12, -28, 39, 7, -16
    0xdffce2e3, 0x17f207e8, 0xf03cfaf2, 0xfed50118, 0x208f3fa, 0x1ee203e5, 0xf4fee042, 0xf00727e4,
    // -4, -21, 53, 26, -35, 10, 65, -49, -41, 41, 5, 42, -5, 50, 30, 50, 16, 14, -23, 19, 1, 30, -10, -65, -37, -2, -10, -20, 21, 17, -28, -9
    0x1a35ebfc, 0xcf410add, 0x2a0529d7, 0x321e32fb, 0x13e90e10, 0xbff61e01, 0xecf6fedb, 0xf7e41115,
    // 28, 2, -9, -21, 3, 31, -7, 23, 18, -38, 9, -9, -4, -3, -12, -24, -1, -48, 33, 6, 27, -25, 42, 25, 25, -17, 3, 51, 13, -1, 14, -10
    0xebf7021c, 0x17f91f03, 0xf709da12, 0xe8f4fdfc, 0x621d0ff, 0x192ae71b, 0x3303ef19, 0xf60eff0d,
    // -6, -22, -1, -20, -14, 10, 1, -31, -51, 13, -10, 9, -5, -4, 10, 7, -3, -26, -2, -4, 25, 8, 10, 37, 26, -2, -1, -5, -33, 5, -21, -33
    0xecffeafa, 0xe1010af2, 0x9f60dcd, 0x70afcfb, 0xfcfee6fd, 0x250a0819, 0xfbfffe1a, 0xdfeb05df,
    // 1, -17, 32, -4, 21, 3, 57, 10, 24, 19, 8, 31, 2, -42, -50, -34, 13, 21, 44, 17, 9, -2, 15, 4, 10, 24, -13, 0, -6, -4, -13, -9
    0xfc20ef01, 0xa390315, 0x1f081318, 0xdeced602, 0x112c150d, 0x40ffe09, 0xf3180a, 0xf7f3fcfa,
    // 6, 1, -51, -26, 16, 24, 15, 40, -19, -10, 20, -4, -9, -28, -47, -38, 14, -30, -50, 96, -72, -26, -3, -66, -128, -40, -60, 19, 45, 16, 32, -1
    0xe6cd0106, 0x280f1810, 0xfc14f6ed, 0xdad1e4f7, 0x60cee20e, 0xbefde6b8, 0x13c4d880, 0xff20102d,
    // 16, 34, -14, 3, -14, -43, 22, 19, 0, -34, -23, -16, 7, -2, -21, -28, 2, 3, 19, 13, 16, 9, 11, 4, -2, -7, 7, 0, 12, -2, -4, -15
    0x3f22210, 0x1316d5f2, 0xf0e9de00, 0xe4ebfe07, 0xd130302, 0x40b0910, 0x7f9fe, 0xf1fcfe0c,
    // 35, -24, 34, 3, 36, 19, 41, 11, -33, -16, -32, 10, -3, -8, -55, -22, 33, 15, 48, 18, 8, 2, 15, 7, 17, -11, 10, 1, 12, 10, -2, -18
    0x322e823, 0xb291324, 0xae0f0df, 0xeac9f8fd, 0x12300f21, 0x70f0208, 0x10af511, 0xeefe0a0c,
    // 8, 21, 5, 56, 13, -20, 0, -32, -16, -7, -21, 7, 6, -14, 0, -7, 37, 24, 33, -4, 9, -7, 13, 14, 31, 34, -18, 18, -24, -13, 20, -20
    0x38051508, 0xe000ec0d, 0x7ebf9f0, 0xf900f206, 0xfc211825, 0xe0df909, 0x12ee221f, 0xec14f3e8,
    // 0, -15, 17, 13, 11, 5, 7, -10, -9, 17, 32, 28, 1, -4, -13, -3, -18, -7, 2, -5, -43, -45, -16, 1, -33, 0, -6, 15, -31, -11, -3, -53
    0xd11f100, 0xf607050b, 0x1c2011f7, 0xfdf3fc01, 0xfb02f9ee, 0x1f0d3d5, 0xffa00df, 0xcbfdf5e1,
    // -45, 9, 95, 15, -62, -67, -63, 37, 14, -10, 32, 35, -51, -117, 27, -104, 15, 0, -21, -6, -33, -4, -17, -12, -46, 8, 3, 27, 12, -41, 2, -65
    0xf5f09d3, 0x25c1bdc2, 0x2320f60e, 0x981b8bcd, 0xfaeb000f, 0xf4effcdf, 0x1b0308d2, 0xbf02d70c,
    // 17, 4, 11, -16, 12, 10, 0, 8, -13, 24, 29, -1, 2, -3, -15, -21, 23, -12, 8, 22, 27, -11, -23, 45, -10, 4, 42, -8, 34, -8, -29, -9
    0xf00b0411, 0x8000a0c, 0xff1d18f3, 0xebf1fd02, 0x1608f417, 0x2de9f51b, 0xf82a04f6, 0xf7e3f822,
    // 2, -16, 37, -3, -7, 10, 16, -12, -16, 15, 5, 4, 1, -2, -11, -21, -12, -8, -17, -55, 19, 21, 13, 31, 11, 3, 22, 0, -16, -7, -21, -10
    0xfd25f002, 0xf4100af9, 0x4050ff0, 0xebf5fe01, 0xc9eff8f4, 0x1f0d1513, 0x16030b, 0xf6ebf9f0,
    // -1, -11, 43, -35, 25, 34, -7, -7, -5, -26, 30, 11, -15, -35, -2, 44, 7, 0, -6, -2, 1, 11, 6, -17, -12, 9, 0, -6, 8, -1, -8, 3
    0xdd2bf5ff, 0xf9f92219, 0xb1ee6fb, 0x2cfeddf1, 0xfefa0007, 0xef060b01, 0xfa0009f4, 0x3f8ff08,
    // 58, 55, -42, 17, 48, -9, -2, 33, 34, -20, -7, -13, 25, -19, -2, -24, -31, -82, 91, -10, -48, -10, -125, 15, 26, -9, -23, -44, -65, -25, 53, 32
    0x11d6373a, 0x21fef730, 0xf3f9ec22, 0xe8feed19, 0xf65baee1, 0xf83f6d0, 0xd4e9f71a, 0x2035e7bf,
    // 16, -33, 12, 8, -5, 28, 33, -23, -36, 26, 17, 31, 2, -29, -18, -10, -38, -1, 5, -8, -20, -19, 18, -14, 15, 11, -8, -6, 19, 6, -4, 10
    0x80cdf10, 0xe9211cfb, 0x1f111adc, 0xf6eee302, 0xf805ffda, 0xf212edec, 0xfaf80b0f, 0xafc0613,
    // -24, -17, 5, -25, 10, -27, 22, -52, 17, 61, -20, -8, 55, 24, -19, 8, -21, 3, -16, -29, 1, 2, 28, -9, -18, 13, -4, 5, 13, -9, -21, 7
    0xe705efe8, 0xcc16e50a, 0xf8ec3d11, 0x8ed1837, 0xe3f003eb, 0xf71c0201, 0x5fc0dee, 0x7ebf70d,
    // 5, 1, -8, -14, -12, 2, -4, 7, 32, 3, -10, 9, -2, 0, 27, 6, 12, 37, -25, -18, -36, -17, -21, 27, 19, 41, 23, 8, 9, 19, 27, 14
    0xf2f80105, 0x7fc02f4, 0x9f60320, 0x61b00fe, 0xeee7250c, 0x1bebefdc, 0x8172913, 0xe1b1309,
    // 1, 0, 0, -27, -24, 7, 16, 9, 20, -5, 11, 40, -4, -5, 18, 11, 10, -19, -24, 12, -8, -1, -57, 27, -38, 31, -10, -8, -11, 3, -3, 16
    0xe5000001, 0x91007e8, 0x280bfb14, 0xb12fbfc, 0xce8ed0a, 0x1bc7fff8, 0xf8f61fda, 0x10fd03f5,
    // 23, -103, 47, -59, 25, -3, 124, -55, -14, -39, -19, -44, -48, 12, -55, -11, -1, 34, 0, 19, -12, -21, -15, -3, -1, 38, -13, 27, 9, -27, 27, 12
    0xc52f9917, 0xc97cfd19, 0xd4edd9f2, 0xf5c90cd0, 0x130022ff, 0xfdf1ebf4, 0x1bf326ff, 0xc1be509,
    // 24, 3, 8, -30, 34, 29, 1, 21, 10, -3, 14, 17, -3, -10, 4, 3, 14, -39, -26, 13, -9, -13, -63, 14, -41, -4, 15, -18, 0, 34, -17, 6
    0xe2080318, 0x15011d22, 0x110efd0a, 0x304f6fd, 0xde6d90e, 0xec1f3f7, 0xee0ffcd7, 0x6ef2200,
    // -16, -3, -20, 4, 8, -18, 1, 19, 39, 9, -14, 20, 5, -3, 17, 5, 7, -1, 15, 43, 23, -15, 5, -27, -48, 40, -5, 7, 8, 17, -1, -4
    0x4ecfdf0, 0x1301ee08, 0x14f20927, 0x511fd05, 0x2b0fff07, 0xe505f117, 0x7fb28d0, 0xfcff1108,
    // 26, -7, -16, -19, 44, -2, 47, -3, 31, 28, -19, -4, -5, -16, -4, 13, 22, -4, 7, 34, 20, -30, 0, -5, 16, 30, 5, -5, -8, 22, 3, -1
    0xedf0f91a, 0xfd2ffe2c, 0xfced1c1f, 0xdfcf0fb, 0x2207fc16, 0xfb00e214, 0xfb051e10, 0xff0316f8,
    // 6, -49, -4, 34, -22, -25, 2, -6, -53, 25, 11, -9, -13, 62, -1, -2, 1, 5, -1, -60, -50, 60, -28, -4, 80, 21, -79, -3, -75, 58, 38, 62
    0x22fccf06, 0xfa02e7ea, 0xf70b19cb, 0xfeff3ef3, 0xc4ff0501, 0xfce43cce, 0xfdb11550, 0x3e263ab5,
    // 30, 15, 22, -8, -21, -23, -19, 22, -10, 14, 47, -1, -24, 46, 29, -30, 8, -9, 7, 22, 10, -10, -1, -10, -35, 54, 20, -13, -15, 27, -13, -3
    0xf8160f1e, 0x16ede9eb, 0xff2f0ef6, 0xe21d2ee8, 0x1607f708, 0xf6fff60a, 0xf31436dd, 0xfdf31bf1,
    // 50, -32, -20, -7, 13, 23, 28, -6, -19, 2, -2, -25, 2, -19, -48, 6, 45, 13, 27, 27, -3, -22, -10, 13, 8, 21, 4, -27, -16, 41, -4, -14
    0xf9ece032, 0xfa1c170d, 0xe7fe02ed, 0x6d0ed02, 0x1b1b0d2d, 0xdf6eafd, 0xe5041508, 0xf2fc29f0,
    // -11, 0, -7, -28, 17, 14, 23, 22, 28, 24, 4, -3, -1, -4, -23, -15, 5, -34, 12, -30, -38, 28, -48, 41, -40, -28, -10, -30, -9, -4, -29, 10
    0xe4f900f5, 0x16170e11, 0xfd04181c, 0xf1e9fcff, 0xe20cde05, 0x29d01cda, 0xe2f6e4d8, 0xae3fcf7,
    // 22, 11, -6, -1, -20, -6, 7, 6, 45, -7, 12, -13, 18, 12, 3, -7, -12, -17, -4, 66, -21, -57, 14, -68, -52, -38, 14, 28, 39, -2, 1, 17
    0xfffa0b16, 0x607faec, 0xf30cf92d, 0xf9030c12, 0x42fceff4, 0xbc0ec7eb, 0x1c0edacc, 0x1101fe27,
    // 26, 8, -13, -28, -19, 16, -23, 46, -54, 50, -51, -48, -30, -6, -3, -32, -9, 3, 18, -14, -47, -13, -10, -1, 5, -10, 21, 39, -10, 15, 16, -14
    0xe4f3081a, 0x2ee910ed, 0xd0cd32ca, 0xe0fdfae2, 0xf21203f7, 0xfff6f3d1, 0x2715f605, 0xf2100ff6,
    // -21, -1, 10, 33, -28, -46, 23, -36, 17, 26, -75, 13, -20, 16, 18, 21, 65, 67, 0, 16, 18, -4, 20, 8, 38, 19, -24, 25, 17, -16, 27, -16
    0x210affeb, 0xdc17d2e4, 0xdb51a11, 0x151210ec, 0x10004341, 0x814fc12, 0x19e81326, 0xf01bf011,
    // 18, -5, 12, -1, 8, 4, 4, 25, 46, -34, -6, 17, -12, 18, 9, 0, -14, -30, -21, 2, 38, 15, -27, 19, -14, 41, 35, -10, -36, 7, -29, -13
    0xff0cfb12, 0x19040408, 0x11fade2e, 0x912f4, 0x2ebe2f2, 0x13e50f26, 0xf62329f2, 0xf3e307dc,
    // -18, -61, 15, -13, -13, 33, -26, 11, -65, -41, 17, -36, 7, 11, -66, 23, -5, 4, -2, 23, 3, -6, -1, -14, -4, 10, 22, 13, 4, 9, 3, -4
    0xf30fc3ee, 0xbe621f3, 0xdc11d7bf, 0x17be0b07, 0x17fe04fb, 0xf2fffa03, 0xd160afc, 0xfc030904,
    // 19, 34, -25, 9, 6, 52, -41, 22, -77, -5, 67, -19, 10, 12, -44, -26, -16, -49, 24, -14, 21, -37, 61, -24, 65, -44, 51, 33, 20, -32, 75, 3
    0x9e72213, 0x16d73406, 0xed43fbb3, 0xe6d40c0a, 0xf218cff0, 0xe83ddb15, 0x2133d441, 0x34be014,
    // 2, 61, 2, -1, -25, -9, 0, 2, 35, 56, 4, 32, 3, 9, 27, -20, 12, 5, 13, 27, -13, -9, -11, -26, -23, 25, -17, -6, -17, 16, 7, 12
    0xff023d02, 0x200f7e7, 0x20043823, 0xec1b0903, 0x1b0d050c, 0xe6f5f7f3, 0xfaef19e9, 0xc0710ef,
    // 37, 37, 6, 15, 6, 1, 20, 16, 68, -18, -28, 2, -35, -25, 13, 20, 19, -9, 21, 21, -11, -6, -3, -7, -1, 35, 26, 15, -1, 29, -8, -5
    0xf062525, 0x10140106, 0x2e4ee44, 0x140de7dd, 0x1515f713, 0xf9fdfaf5, 0xf1a23ff, 0xfbf81dff,
    // 26, 7, 0, -5, -14, 7, 1, 8, -10, -28, -6, 14, 12, 15, -1, -4, 3, 7, -4, -9, -26, -6, 17, -1, 44, 49, 0, 14, -22, 0, -14, 16
    0xfb00071a, 0x80107f2, 0xefae4f6, 0xfcff0f0c, 0xf7fc0703, 0xff11fae6, 0xe00312c, 0x10f200ea,
    // 4, -17, -4, 9, -6, 13, -6, -9, -46, 7, 19, 8, 9, 7, -30, 9, -6, 6, 22, 37, -40, -33, 15, -20, 21, -18, -20, 30, 21, -1, 12, 13
    0x9fcef04, 0xf7fa0dfa, 0x81307d2, 0x9e20709, 0x251606fa, 0xec0fdfd8, 0x1eecee15, 0xd0cff15,
    // 34, -29, -28, -1, 89, 4, 30, -60, 78, -18, 26, -54, 32, -32, 83, -14, -6, -58, -16, 2, -10, 27, -21, -3, -45, -18, -28, -15, 5, -11, -57, 4
    0xffe4e322, 0xc41e0459, 0xca1aee4e, 0xf253e020, 0x2f0c6fa, 0xfdeb1bf6, 0xf1e4eed3, 0x4c7f505,
    // -2, 8, -2, -2, -43, -29, 2, -13, 4, -9, -43, 11, 10, 21, -5, -2, 41, 51, -28, 21, 36, 6, -16, 19, 0, 20, 21, -30, 1, 6, -39, 16
    0xfefe08fe, 0xf302e3d5, 0xbd5f704, 0xfefb150a, 0x15e43329, 0x13f00624, 0xe2151400, 0x10d90601,
    // 7, -32, 1, -6, -4, 16, -13, 23, -25, -39, 0, -6, 5, 6, -12, 6, -6, 7, 20, -6, 18, -9, 25, -9, -7, 33, 16, -12, 16, -14, 0, 3
    0xfa01e007, 0x17f310fc, 0xfa00d9e7, 0x6f40605, 0xfa1407fa, 0xf719f712, 0xf41021f9, 0x300f210,
    // 11, -26, -6, -11, 28, 12, -32, -5, -56, 1, -13, -72, -7, 38, -24, 20, -4, 30, 22, -27, 19, -2, 23, 18, 12, 10, 8, -19, 10, 5, 0, -9
    0xf5fae60b, 0xfbe00c1c, 0xb8f301c8, 0x14e826f9, 0xe5161efc, 0x1217fe13, 0xed080a0c, 0xf700050a,
    // -5, -28, 30, -3, 14, -21, 18, -4, -31, 26, -26, -5, -2, -17, 7, -13, 14, -15, -24, 62, -33, -13, -82, -70, 50, -3, 11, 65, 60, -51, -34, 73
    0xfd1ee4fb, 0xfc12eb0e, 0xfbe61ae1, 0xf307effe, 0x3ee8f10e, 0xbaaef3df, 0x410bfd32, 0x49decd3c,
    // 14, -43, -16, 19, 1, -29, 21, -26, 0, 50, 8, 1, 26, -11, 26, -28, 48, 2, 18, -11, 42, 40, 18, 37, 21, -31, 6, 4, 4, -6, 4, -10
    0x13f0d50e, 0xe615e301, 0x1083200, 0xe41af51a, 0xf5120230, 0x2512282a, 0x406e115, 0xf604fa04,
    // 25, -12, 14, 13, 22, -13, -15, 42, 31, 0, 25, -6, 3, 27, 41, 18, 22, 5, 27, -7, 24, 6, 5, 0, 4, -21, -13, -9, -13, -2, 19, -12
    0xd0ef419, 0x2af1f316, 0xfa19001f, 0x12291b03, 0xf91b0516, 0x50618, 0xf7f3eb04, 0xf413fef3,
    // -4, -14, 2, -50, -7, 23, -10, 55, 33, 14, 50, -26, -17, 26, -14, -30, -11, -20, 52, -1, 17, -7, 5, 14, 7, 19, 37, 30, 6, -26, 52, 0
    0xce02f2fc, 0x37f617f9, 0xe6320e21, 0xe2f21aef, 0xff34ecf5, 0xe05f911, 0x1e251307, 0x34e606,
    // 10, -2, 10, 7, -6, -3, -24, 5, -7, 31, 19, -42, 23, 19, -4, -8, 13, 43, -13, 46, -12, -5, -32, -27, -30, -30, 22, -8, 35, 9, 46, -12
    0x70afe0a, 0x5e8fdfa, 0xd6131ff9, 0xf8fc1317, 0x2ef32b0d, 0xe5e0fbf4, 0xf816e2e2, 0xf42e0923,
    // 24, 15, -29, 17, 22, -29, 78, 45, 70, -34, 28, 64, -11, -19, -91, 14, -13, -22, -10, 14, -28, 8, -39, -31, -67, -16, 21, -24, 8, 26, -4, -17
    0x11e30f18, 0x2d4ee316, 0x401cde46, 0xea5edf5, 0xef6eaf3, 0xe1d908e4, 0xe815f0bd, 0xeffc1a08,
    // 4, -5, 12, 7, -18, -16, -1, -26, -6, 18, 11, -5, -4, 11, 11, 4, 8, -31, 11, 9, 13, 4, 14, -19, -85, 27, -45, -16, -8, -12, -3, 17
    0x70cfb04, 0xe6fff0ee, 0xfb0b12fa, 0x40b0bfc, 0x90be108, 0xed0e040d, 0xf0d31bab, 0x11fdf4f8,
    // 24, 14, 12, -8, -17, 5, 3, -10, -16, 0, 12, -10, 9, 7, 1, 4, -31, 17, 38, -8, -2, 19, -12, -3, -4, 9, 19, -7, 5, 5, 1, 14
    0xf80c0e18, 0xf60305ef, 0xf60c00f0, 0x4010709, 0xf82611e1, 0xfdf413fe, 0xf91309fc, 0xe010505,
    // -16, 31, -8, 6, -7, 8, 5, 2, 62, 4, -18, 12, 10, -38, -8, 21, -39, 31, 19, -5, -15, 5, -9, 26, 32, 40, -1, -17, -3, 1, -18, 6
    0x6f81ff0, 0x20508f9, 0xcee043e, 0x15f8da0a, 0xfb131fd9, 0x1af705f1, 0xefff2820, 0x6ee01fd,
    // 4, -7, 35, 21, -16, -7, 14, -76, -26, 5, -58, -12, 11, -3, -41, 44, -54, 16, 12, -29, 40, 39, -32, 37, 6, -125, -24, -26, 30, -11, 66, -8
    0x1523f904, 0xb40ef9f0, 0xf4c605e6, 0x2cd7fd0b, 0xe30c10ca, 0x25e02728, 0xe6e88306, 0xf842f51e,
    // -8, -18, -1, -17, -5, 12, 24, -40, 37, -11, 21, 33, 39, -7, -18, 0, 10, 2, 22, 1, 56, 32, -16, 21, -13, 3, 59, -3, 13, -2, -9, -4
    0xefffeef8, 0xd8180cfb, 0x2115f525, 0xeef927, 0x116020a, 0x15f02038, 0xfd3b03f3, 0xfcf7fe0d,
    // -36, -83, 43, -23, -46, 31, -15, -32, -46, -26, -24, -11, -3, 4, -6, 31, 21, 48, 28, 17, 11, 14, -7, -9, 23, -4, -17, -3, 28, 4, -2, 11
    0xe92baddc, 0xe0f11fd2, 0xf5e8e6d2, 0x1ffa04fd, 0x111c3015, 0xf7f90e0b, 0xfdeffc17, 0xbfe041c,
};
static const uint embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // 0.0002257, -0.0001681, 0.000126, -9.52e-05, -8.625e-05, -8.756e-05, 4.77e-05, -6.79e-05, -0.0001973, -0.0001736, -4.506e-05, 0.0001718, -6.99e-05, -8.917e-05, 6.247e-05, -1.407e-05
    0x89820b65, 0x863d0821, 0x85bd85a7, 0x84730320, 0x89b08a77, 0x9a182f4, 0x85d88495, 0x80ec0418,
};
static const uint embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -5, 7, 8, -1, -1, 4, 5, 12, -4, -23, -6, 13, 3, 9, -27, 20, 50, 11, 68, -14, 22, -45, 11, 87, 10, 28, 30, 30, -47, 13, -9, -16
    0xff0807fb, 0xc0504ff, 0xdfae9fc, 0x14e50903, 0xf2440b32, 0x570bd316, 0x1e1e1c0a, 0xf0f70dd1,
    // -21, 30, 48, -14, 49, 12, 41, -28, 74, -6, 36, 26, 65, 73, -21, -6, 0, -19, -16, -3, -3, 10, -9, 2, -3, -15, -16, -13, -14, 17, -6, -16
    0xf2301eeb, 0xe4290c31, 0x1a24fa4a, 0xfaeb4941, 0xfdf0ed00, 0x2f70afd, 0xf3f0f1fd, 0xf0fa11f2,
    // 16, -16, -8, -12, -12, -15, -6, -4, 17, 27, -2, 3, 0, 2, 25, -16, 51, -22, -42, 5, 39, 39, 61, 7, -37, 37, -27, 60, -15, 26, 69, -96
    0xf4f8f010, 0xfcfaf1f4, 0x3fe1b11, 0xf0190200, 0x5d6ea33, 0x73d2727, 0x3ce525db, 0xa0451af1,
    // 29, 19, 28, 10, 48, 0, -47, 42, -9, 24, 13, -1, -4, 18, 36, 44, 9, -30, -55, 20, 42, 0, -40, 65, -30, -38, -13, 18, 51, 87, 36, 3
    0xa1c131d, 0x2ad10030, 0xff0d18f7, 0x2c2412fc, 0x14c9e209, 0x41d8002a, 0x12f3dae2, 0x3245733,
    // -45, 11, 16, 46, -18, -7, 29, 17, 14, -10, 0, 13, 3, 24, -5, 20, -2, -6, 7, 38, 18, -6, -113, 16, -38, -3, -21, 15, -24, 38, -36, -37
    0x2e100bd3, 0x111df9ee, 0xd00f60e, 0x14fb1803, 0x2607fafe, 0x108ffa12, 0xfebfdda, 0xdbdc26e8,
    // 21, -12, 5, -2, -9, -22, 4, 11, 0, 12, -2, 12, 13, 8, -3, -8, -6, -1, -56, -17, 24, -16, 84, 34, -24, -10, -29, 7, 38, -4, 53, -66
    0xfe05f415, 0xb04eaf7, 0xcfe0c00, 0xf8fd080d, 0xefc8fffa, 0x2254f018, 0x7e3f6e8, 0xbe35fc26,
    // -28, 17, -2, 14, 3, -31, 30, 30, -45, 25, -34, -16, -43, 53, 62, -34, 62, 39, -16, 37, 14, 22, -30, 6, -14, 56, -50, 3, -30, 107, -6, 0
    0xefe11e4, 0x1e1ee103, 0xf0de19d3, 0xde3e35d5, 0x25f0273e, 0x6e2160e, 0x3ce38f2, 0xfa6be2,
    // 5, -30, -18, -5, 6, 18, 42, -5, -31, 58, 15, 13, -9, 6, 65, 17, 9, 57, -39, -28, 21, 6, -14, 17, -22, 1, 23, 35, -57, -9, 26, 4
    0xfbeee205, 0xfb2a1206, 0xd0f3ae1, 0x114106f7, 0xe4d93909, 0x11f20615, 0x231701ea, 0x41af7c7,
    // 20, -4, 25, -1, -16, 3, 44, 34, -18, -1, 6, 4, -16, 30, -11, 2, 17, 40, -14, 18, 32, 57, 68, 28, -46, -64, -96, -8, -52, 37, 59, -51
    0xff19fc14, 0x222c03f0, 0x406ffee, 0x2f51ef0, 0x12f22811, 0x1c443920, 0xf8a0c0d2, 0xcd3b25cc,
    // -19, -5, -6, 24, 13, 16, -21, 12, 11, 9, -4, 0, 21, 7, 16, 7, 53, 35, 35, 69, -13, 12, -71, -43, -40, 54, 45, 12, -1, 6, 6, 79
    0x18fafbed, 0xceb100d, 0xfc090b, 0x7100715, 0x45232335, 0xd5b90cf3, 0xc2d36d8, 0x4f0606ff,
    // -23, 6, -3, 10, -16, -83, 18, -35, -5, 21, -1, -6, -54, 23, 85, -28, -14, 76, 18, 23, -62, 10, 4, -19, 4, 57, 60, -24, 6, 3, -27, 92
    0xafd06e9, 0xdd12adf0, 0xfaff15fb, 0xe45517ca, 0x17124cf2, 0xed040ac2, 0xe83c3904, 0x5ce50306,
    // 13, -5, 8, -8, -6, -10, -6, 13, 22, 9, 5, 7, 2, 2, -17, -16, 29, -29, 15, -29, 30, -31, 0, 31, -19, 9, -22, 7, 95, 64, -8, -23
    0xf808fb0d, 0xdfaf6fa, 0x7050916, 0xf0ef0202, 0xe30fe31d, 0x1f00e11e, 0x7ea09ed, 0xe9f8405f,
    // 51, -15, 15, -36, -3, -9, -3, -41, 40, -45, 25, 5, -13, -55, -23, -16, -65, 56, -48, 25, 82, -39, -1, 0, 18, 30, -65, -35, 36, 27, 9, 5
    0xdc0ff133, 0xd7fdf7fd, 0x519d328, 0xf0e9c9f3, 0x19d038bf, 0xffd952, 0xddbf1e12, 0x5091b24,
    // -23, -39, 7, 6, -38, -56, 33, 10, 60, 1, -3, -1, 12, 29, 44, -17, 48, 83, -38, 27, -4, 0, -5, 17, 14, -1, -28, 19, -41, 14, -1, 60
    0x607d9e9, 0xa21c8da, 0xfffd013c, 0xef2c1d0c, 0x1bda5330, 0x11fb00fc, 0x13e4ff0e, 0x3cff0ed7,
    // -54, -18, 54, -4, 10, 18, 22, -2, -6, -7, -8, 18, -21, 52, 52, 31, -43, 76, -15, 7, -27, 19, -82, 40, 2, -39, -69, -16, -18, 7, -32, 22
    0xfc36eeca, 0xfe16120a, 0x12f8f9fa, 0x1f3434eb, 0x7f14cd5, 0x28ae13e5, 0xf0bbd902, 0x16e007ee,
    // 2, -61, 32, -42, 58, -34, 2, 40, -40, -39, -30, -71, 80, -17, 50, -55, 29, 33, -8, -18, -2, 19, 29, -7, -23, -6, 2, 27, 6, 5, -33, -1
    0xd620c302, 0x2802de3a, 0xb9e2d9d8, 0xc932ef50, 0xeef8211d, 0xf91d13fe, 0x1b02fae9, 0xffdf0506,
    // -36, 35, 60, 11, 0, -77, -23, 12, 11, -75, -27, 7, -9, 19, -22, 33, -9, 41, 12, 11, -13, 3, -5, 32, 13, 2, -53, -30, 14, 7, -82, 22
    0xb3c23dc, 0xce9b300, 0x7e5b50b, 0x21ea13f7, 0xb0c29f7, 0x20fb03f3, 0xe2cb020d, 0x16ae070e,
    // -86, -32, -31, -80, -41, -34, 58, 8, -2, 56, -49, -43, -64, -64, -60, -23, -14, 28, -17, -12, -16, 15, -32, 16, 3, -3, -19, -45, 8, -7, -8, -1
    0xb0e1e0aa, 0x83aded7, 0xd5cf38fe, 0xe9c4c0c0, 0xf4ef1cf2, 0x10e00ff0, 0xd3edfd03, 0xfff8f908,
    // -24, -31, -3, 11, -12, 25, 88, -32, 21, -30, 26, -5, -40, -16, 44, -41, -13, -23, -27, 1, -6, 24, -35, -13, 9, 15, 43, -10, 30, 4, 7, 27
    0xbfde1e8, 0xe05819f4, 0xfb1ae215, 0xd72cf0d8, 0x1e5e9f3, 0xf3dd18fa, 0xf62b0f09, 0x1b07041e,
    // 9, 10, -12, 0, 11, 14, -7, -2, -35, 7, -9, 17, 10, -37, -20, 36, 73, -16, -55, -40, -40, 65, 4, -5, -17, 60, -31, -5, -26, 35, 44, 16
    0xf40a09, 0xfef90e0b, 0x11f707dd, 0x24ecdb0a, 0xd8c9f049, 0xfb0441d8, 0xfbe13cef, 0x102c23e6,
    // -49, -30, 70, 16, 15, 5, -28, -27, 53, 18, -67, 65, 15, 9, 26, -19, 14, 40, -2, -5, -5, -13, -21, 15, -1, -46, -34, 22, -33, 27, 3, -18
    0x1046e2cf, 0xe5e4050f, 0x41bd1235, 0xed1a090f, 0xfbfe280e, 0xfebf3fb, 0x16ded2ff, 0xee031bdf,
    // -28, -61, -46, -41, -54, -28, -37, 11, -22, -21, -7, -39, -29, 4, 55, 98, 6, 30, -6, 13, -10, -7, 8, 34, 27, -8, -58, -15, 6, 12, -9, 2
    0xd7d2c3e4, 0xbdbe4ca, 0xd9f9ebea, 0x623704e3, 0xdfa1e06, 0x2208f9f6, 0xf1c6f81b, 0x2f70c06,
    // -4, 45, 47, -8, 23, 23, 18, 35, -71, 32, -37, 25, 1, 31, -62, 1, 62, -6, -87, 0, 41, -28, 30, 49, -3, -11, -55, -11, 8, 6, 13, 53
    0xf82f2dfc, 0x23121717, 0x19db20b9, 0x1c21f01, 0xa9fa3e, 0x311ee429, 0xf5c9f5fd, 0x350d0608,
    // -64, 66, 57, -39, -59, -9, 5, 37, 2, -24, 42, 50, 13, -36, 34, -40, -13, -6, 1, 8, -24, 7, 9, 23, -8, -11, -28, -41, 25, 3, -10, 35
    0xd93942c0, 0x2505f7c5, 0x322ae802, 0xd822dc0d, 0x801faf3, 0x170907e8, 0xd7e4f5f8, 0x23f60319,
    // 14, 52, -26, 58, -67, 13, 9, -30, 77, 44, 44, 75, -88, 30, -37, 49, 3, 26, -57, -17, -25, 19, 21, 56, -19, 18, 0, 18, -23, -6, -16, 2
    0x3ae6340e, 0xe2090dbd, 0x4b2c2c4d, 0x31db1ea8, 0xefc71a03, 0x381513e7, 0x120012ed, 0x2f0fae9,
    // -30, -40, 70, 47, -51, -13, -13, -31, -37, 33, 45, -37, 32, 6, -45, 12, -8, 5, -16, 10, -9, -18, -18, 16, 1, -6, -20, 5, -13, 27, -12, -17
    0x2f46d8e2, 0xe1f3f3cd, 0xdb2d21db, 0xcd30620, 0xaf005f8, 0x10eeeef7, 0x5ecfa01, 0xeff41bf3,
    // -6, -24, -3, 0, 39, 30, 6, -15, -9, 36, -6, 38, 55, -18, 10, -3, -66, -21, -32, -24, -43, 11, 88, 87, 28, -43, -33, -36, -25, -52, -9, -75
    0xfde8fa, 0xf1061e27, 0x26fa24f7, 0xfd0aee37, 0xe8e0ebbe, 0x57580bd5, 0xdcdfd51c, 0xb5f7cce7,
    // 36, -18, 39, -34, -25, -1, 32, 41, 2, -7, 25, -1, -5, 52, -27, 28, 1, -28, -79, -4, 14, 3, -37, 46, -18, -9, 61, 6, 48, 80, 84, 12
    0xde27ee24, 0x2920ffe7, 0xff19f902, 0x1ce534fb, 0xfcb1e401, 0x2edb030e, 0x63df7ee, 0xc545030,
    // 52, -41, 15, 86, 28, -6, -4, 62, -44, -15, 42, 26, -72, -48, 70, 2, -17, -20, -19, -4, 11, 3, -44, 9, 25, 0, 0, 21, 0, 1, 3, -57
    0x560fd734, 0x3efcfa1c, 0x1a2af1d4, 0x246d0b8, 0xfcedecef, 0x9d4030b, 0x15000019, 0xc7030100,
    // 47, 81, 58, 19, -45, 21, 58, 4, 34, 39, -66, -85, 35, -72, 69, 49, 17, -7, -11, -9, 15, -8, 20, 17, 13, -2, -3, -4, -1, 17, -2, 16
    0x133a512f, 0x43a15d3, 0xabbe2722, 0x3145b823, 0xf7f5f911, 0x1114f80f, 0xfcfdfe0d, 0x10fe11ff,
    // 14, 9, -27, -3, 8, -12, -51, -12, 37, 40, -5, -11, 12, 10, 13, -28, 16, 45, -11, 10, -11, -4, -10, 6, 21, 7, -81, 0, -27, 4, -39, 15
    0xfde5090e, 0xf4cdf408, 0xf5fb2825, 0xe40d0a0c, 0xaf52d10, 0x6f6fcf5, 0xaf0715, 0xfd904e5,
    // 1, -33, 73, -4, -39, 41, -24, 69, 22, -63, -64, 9, -33, 6, -56, -12, 14, -23, -24, 3, -12, 2, -4, 20, 12, -11, -40, -4, 17, 20, -11, 6
    0xfc49df01, 0x45e829d9, 0x9c0c116, 0xf4c806df, 0x3e8e90e, 0x14fc02f4, 0xfcd8f50c, 0x6f51411,
    // -82, -11, -8, 29, 13, -47, 0, -65, 31, -9, -26, 23, -9, -17, 76, -16, -8, 20, 18, 18, 17, 6, -44, 19, 8, 24, -39, -8, 22, 8, -51, 27
    0x1df8f5ae, 0xbf00d10d, 0x17e6f71f, 0xf04ceff7, 0x121214f8, 0x13d40611, 0xf8d91808, 0x1bcd0816,
    // -16, -14, 11, -4, -14, 3, 33, 7, -9, -14, 2, -2, -11, 22, -2, 0, 81, -21, -29, -50, -9, -43, -101, -41, 42, 21, -62, -7, -9, 24, 30, 54
    0xfc0bf2f0, 0x72103f2, 0xfe02f2f7, 0xfe16f5, 0xcee3eb51, 0xd79bd5f7, 0xf9c2152a, 0x361e18f7,
    // 29, -12, 12, -11, 2, 14, -5, 14, 23, -24, 13, -3, 15, -20, -31, 4, 12, 54, 12, 47, 1, 27, -65, 13, -2, 88, -35, 15, 10, 86, 23, 7
    0xf50cf41d, 0xefb0e02, 0xfd0de817, 0x4e1ec0f, 0x2f0c360c, 0xdbf1b01, 0xfdd58fe, 0x717560a,
    // 10, 35, 4, -2, -18, -39, -45, -53, -49, -50, -44, 41, 27, 8, -15, 32, 17, 82, -27, -23, 48, -4, -3, 31, -2, -79, -118, 22, 89, 86, -41, 15
    0xfe04230a, 0xcbd3d9ee, 0x29d4cecf, 0x20f1081b, 0xe9e55211, 0x1ffdfc30, 0x168ab1fe, 0xfd75659,
    // -14, -8, -11, 12, 17, 33, -15, -28, 33, -11, 5, 12, 9, -31, -4, -24, -49, 43, 41, 7, 0, 24, -52, -43, 26, 29, 5, 37, -67, -86, -9, 14
    0xcf5f8f2, 0xe4f12111, 0xc05f521, 0xe8fce109, 0x7292bcf, 0xd5cc1800, 0x25051d1a, 0xef7aabd,
    // 20, -5, -12, -2, 1, 4, -12, 10, 5, -11, 14, -24, -13, -4, -3, -9, 16, 40, -35, -21, 15, 25, -14, -15, -113, -7, -15, 18, 94, -9, -53, 29
    0xfef4fb14, 0xaf40401, 0xe80ef505, 0xf7fdfcf3, 0xebdd2810, 0xf1f2190f, 0x12f1f98f, 0x1dcbf75e,
    // -7, -16, 41, -12, -41, -34, 33, 13, 12, -25, -3, -1, -9, 14, -22, 9, -41, -11, -3, 48, -18, 24, -75, 41, 50, -24, -38, -31, 19, -29, -54, 61
    0xf429f0f9, 0xd21ded7, 0xfffde70c, 0x9ea0ef7, 0x30fdf5d7, 0x29b518ee, 0xe1dae832, 0x3dcae313,
    // -20, -15, 24, 5, 4, -34, -5, -26, -2, -30, 22, -10, 17, -33, -13, 10, -13, 11, -23, 10, 13, -43, -51, -7, 4, -35, -79, 2, 0, 26, -54, -71
    0x518f1ec, 0xe6fbde04, 0xf616e2fe, 0xaf3df11, 0xae90bf3, 0xf9cdd50d, 0x2b1dd04, 0xb9ca1a00,
    // 23, 43, -31, -52, 39, -29, 24, 64, 29, -44, -64, 56, -38, 14, 40, 28, -10, 3, -18, -7, -7, -5, -48, 18, 7, -1, -25, 14, -10, 5, 1, -11
    0xcce12b17, 0x4018e327, 0x38c0d41d, 0x1c280eda, 0xf9ee03f6, 0x12d0fbf9, 0xee7ff07, 0xf50105f6,
    // 5, -8, -2, -9, 18, -1, -17, -42, -2, 5, 9, 25, 11, -39, 2, 29, -51, 52, -14, -35, 22, -41, 105, 64, -33, -49, 46, -24, 49, -28, -10, -12
    0xf7fef805, 0xd6efff12, 0x190905fe, 0x1d02d90b, 0xddf234cd, 0x4069d716, 0xe82ecfdf, 0xf4f6e431,
    // 16, -32, 40, -21, 21, 15, 19, -10, -27, 20, -6, 52, 20, 3, 9, 19, -38, 19, -61, -35, 81, -16, 4, 91, 29, -42, -47, 18, 12, -33, 12, 14
    0xeb28e010, 0xf6130f15, 0x34fa14e5, 0x13090314, 0xddc313da, 0x5b04f051, 0x12d1d61d, 0xe0cdf0c,
    // 66, 3, 30, -31, -57, -74, -44, -36, -22, 3, -48, 45, 2, 34, 5, -7, 49, 51, -73, 14, -35, 22, -27, 9, 85, -3, 10, -23, 24, 39, 0, -24
    0xe11e0342, 0xdcd4b6c7, 0x2dd003ea, 0xf9052202, 0xeb73331, 0x9e516dd, 0xe90afd55, 0xe8002718,
    // -44, -26, -25, 33, 6, -36, 28, -22, 12, 47, -25, 48, 49, -24, 46, -2, -6, 72, 4, 11, -45, -16, -25, 15, -18, -55, 33, 15, -17, 19, 12, 45
    0x21e7e6d4, 0xea1cdc06, 0x30e72f0c, 0xfe2ee831, 0xb0448fa, 0xfe7f0d3, 0xf21c9ee, 0x2d0c13ef,
    // -7, 7, 18, -17, -7, -5, 34, 4, -14, 13, 0, -10, -35, -8, -3, 4, 66, 48, -15, 26, -11, 41, -18, 2, 19, -8, 36, -45, 26, -2, 7, -72
    0xef1207f9, 0x422fbf9, 0xf6000df2, 0x4fdf8dd, 0x1af13042, 0x2ee29f5, 0xd324f813, 0xb807fe1a,
    // 8, -20, -7, -1, -15, -10, -12, -17, 49, -5, 1, 10, 23, 0, 14, -6, 72, -9, 7, 31, -100, -24, 39, 113, -82, 81, -67, -3, 3, -86, 73, -15
    0xfff9ec08, 0xeff4f6f1, 0xa01fb31, 0xfa0e0017, 0x1f07f748, 0x7127e89c, 0xfdbd51ae, 0xf149aa03,
    // 13, -31, 8, -18, -35, -87, -6, -28, 69, -41, 20, 17, 5, -23, 7, -4, -22, -36, 1, -24, 27, 77, 32, 73, -25, -35, 59, 11, 52, 99, 58, -50
    0xee08e10d, 0xe4faa9dd, 0x1114d745, 0xfc07e905, 0xe801dcea, 0x49204d1b, 0xb3bdde7, 0xce3a6334,
    // 13, 9, 3, -9, -16, -20, 25, 13, -30, 23, -9, -18, -32, 18, 29, -11, 1, -22, -18, -60, -21, -44, -16, 19, 9, -18, -37, -43, 60, 98, 51, 13
    0xf703090d, 0xd19ecf0, 0xeef717e2, 0xf51d12e0, 0xc4eeea01, 0x13f0d4eb, 0xd5dbee09, 0xd33623c,
    // -33, 17, -13, 38, -9, -38, 3, 7, 12, 5, -19, 3, 7, -4, -5, 4, -31, -26, 25, 0, 1, -43, 36, -30, -38, -88, 97, -22, 92, 39, 21, 1
    0x26f311df, 0x703daf7, 0x3ed050c, 0x4fbfc07, 0x19e6e1, 0xe224d501, 0xea61a8da, 0x115275c,
    // 47, -10, 6, -1, -31, -6, 49, 86, -38, 40, -17, 1, 21, 36, -12, 2, -11, 49, 4, 15, 26, -34, 99, 13, -51, -97, -69, -52, 57, 89, 38, -46
    0xff06f62f, 0x5631fae1, 0x1ef28da, 0x2f42415, 0xf0431f5, 0xd63de1a, 0xccbb9fcd, 0xd2265939,
    // 38, 5, -5, -11, -31, -17, 40, 50, -34, -7, 12, -17, -19, 4, -40, 6, 15, -38, -92, -15, -32, -20, -49, 49, 9, 29, -26, 14, 27, 11, -25, 41
    0xf5fb0526, 0x3228efe1, 0xef0cf9de, 0x6d804ed, 0xf1a4da0f, 0x31cfece0, 0xee61d09, 0x29e70b1b,
    // 13, 1, 10, -10, 4, -5, -18, -8, -5, -37, 1, -37, -5, -2, 0, -22, 17, -6, -69, -16, -57, 42, 57, 55, -25, 11, 37, 19, -46, -11, 35, -12
    0xf60a010d, 0xf8eefb04, 0xdb01dbfb, 0xea00fefb, 0xf0bbfa11, 0x37392ac7, 0x13250be7, 0xf423f5d2,
    // 3, 0, 8, 24, -17, -15, 10, 24, 18, -1, -9, 6, 5, 35, 9, -24, -10, 10, -9, 22, -44, 18, 127, -5, -40, -3, -27, -17, 15, 88, -7, -101
    0x18080003, 0x180af1ef, 0x6f7ff12, 0xe8092305, 0x16f70af6, 0xfb7f12d4, 0xefe5fdd8, 0x9bf9580f,
    // 26, 65, -35, -7, 23, -71, 29, -17, -54, 8, 66, -45, 14, 25, 12, 39, -36, 23, -15, -12, -20, 11, -11, 22, 38, 8, -16, 13, -8, 0, -14, -2
    0xf9dd411a, 0xef1db917, 0xd34208ca, 0x270c190e, 0xf4f117dc, 0x16f50bec, 0xdf00826, 0xfef200f8,
    // -15, -54, -2, 12, -4, -12, 56, 41, -8, 12, -14, 81, 96, -55, -23, 75, 21, -34, -26, -1, 50, 22, 0, 9, 34, -93, 11, 87, 2, -49, -29, -45
    0xcfecaf1, 0x2938f4fc, 0x51f20cf8, 0x4be9c960, 0xffe6de15, 0x9001632, 0x570ba322, 0xd3e3cf02,
    // 32, -29, 11, 59, 55, -28, 56, -57, 30, -25, -63, -36, -32, 30, -45, 23, -21, -19, -3, -1, -2, 16, -15, 16, -1, 2, -10, -18, 17, 8, -10, 4
    0x3b0be320, 0xc738e437, 0xdcc1e71e, 0x17d31ee0, 0xfffdedeb, 0x10f110fe, 0xeef602ff, 0x4f60811,
    // 51, 1, -29, 57, -72, 1, -10, -75, -58, -75, -50, 32, 44, 35, 61, -22, -22, -39, -23, -10, 23, 1, -23, 22, 5, 6, -42, 30, -9, 26, -2, 27
    0x39e30133, 0xb5f601b8, 0x20ceb5c6, 0xea3d232c, 0xf6e9d9ea, 0x16e90117, 0x1ed60605, 0x1bfe1af7,
    // -5, -7, 39, -25, 19, 3, -34, -49, 34, -3, 2, -3, -36, 6, 31, -17, -101, -28, -62, -32, 54, 10, 16, 63, -19, -8, 20, -27, -7, -24, 16, -18
    0xe727f9fb, 0xcfde0313, 0xfd02fd22, 0xef1f06dc, 0xe0c2e49b, 0x3f100a36, 0xe514f8ed, 0xee10e8f9,
    // -15, 0, -52, 5, -14, -42, 4, -1, -2, -1, 7, -11, -8, -15, 17, 9, -22, -34, -24, 39, 36, 9, -44, 28, -6, -9, -36, -24, 96, 66, -35, 9
    0x5cc00f1, 0xff04d6f2, 0xf507fffe, 0x911f1f8, 0x27e8deea, 0x1cd40924, 0xe8dcf7fa, 0x9dd4260,
    // -10, -17, -46, 23, -46, -64, 39, 52, 11, -9, 7, -12, 10, 7, -6, 7, 75, -25, 10, 85, -23, 124, -38, 0, -21, -6, -7, 78, -32, 50, -12, -10
    0x17d2eff6, 0x3427c0d2, 0xf407f70b, 0x7fa070a, 0x550ae74b, 0xda7ce9, 0x4ef9faeb, 0xf6f432e0,
    // -53, -67, -30, -24, 36, -27, -7, -1, -68, -32, 41, 94, -20, 43, -62, -44, -10, 2, -8, -13, 2, -4, 3, -3, -10, 10, -4, -3, -5, 13, -11, -1
    0xe8e2bdcb, 0xfff9e524, 0x5e29e0bc, 0xd4c22bec, 0xf3f802f6, 0xfd03fc02, 0xfdfc0af6, 0xfff50dfb,
    // -49, 7, 29, -3, 41, -80, -53, 66, 70, 31, 11, -26, -30, -25, -25, 15, -33, 10, -31, 22, -42, -25, -23, 33, 1, -7, -30, -8, -12, 39, -44, 58
    0xfd1d07cf, 0x42cbb029, 0xe60b1f46, 0xfe7e7e2, 0x16e10adf, 0x21e9e7d6, 0xf8e2f901, 0x3ad427f4,
    // 10, -16, 22, -23, -6, -53, 25, -8, -2, -19, 5, 17, -18, -13, -2, -11, 50, -62, 28, -9, 55, -33, -36, -56, 4, -45, -114, -28, 73, 74, 50, -16
    0xe916f00a, 0xf819cbfa, 0x1105edfe, 0xf5fef3ee, 0xf71cc232, 0xc8dcdf37, 0xe48ed304, 0xf0324a49,
};
static const uint embedded_encoder3_ResidualBlock_1_body_pw_expand_bias_dwords[32] = {
    // -0.01799, -0.01227, -0.04794, 0.009636, -0.02841, -0.032, -0.014114, 0.06793, -0.01165, -0.1703, -0.10754, 0.02852, -0.07996, 0.02638, -0.01604, -0.04492
    0xa248a49b, 0x20efaa23, 0xa819a746, 0x2c59a33a, 0xb173a1f7, 0x274daee2, 0x26c1ad1e, 0xa9c0a41b,
    // -0.0258, -0.06946, -0.0739, -0.006023, -0.01683, -0.04776, 0.003614, -0.0725, -0.04916, -0.0366, -0.2637, 0.03506, -0.007244, -0.0478, -0.0328, -0.0276
    0xac72a69b, 0x9e2bacbb, 0xaa1da44f, 0xaca41b67, 0xa8afaa4b, 0x287db438, 0xaa1e9f6b, 0xa711a833,
    // -0.05853, -0.128, 0.02277, -0.1289, -0.3203, -0.01772, -0.0002453, -0.07367, -0.04132, -0.1332, -0.1075, -0.03497, -0.03275, -0.01152, -0.1669, 0.01003
    0xb019ab7e, 0xb02025d4, 0xa489b520, 0xacb78c05, 0xb043a94a, 0xa87aaee1, 0xa1e6a831, 0x2123b157,
    // -0.06207, -0.1699, -0.08777, -0.04846, -0.01308, -0.01189, -0.0496, -0.0378, -0.05527, -0.0397, -0.0933, -0.0386, -0.07306, -0.04843, -0.0777, -0.1553
    0xb170abf2, 0xaa34ad9e, 0xa216a2b2, 0xa8d7aa59, 0xa915ab13, 0xa8f1adf9, 0xaa33acad, 0xb0f8acf9,
};
static const uint embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 9, -23, -44, -67, -22, 19, -15, -45, 42, -35, -32, -5, -6, 16, -64, -64, -1, -14, 18, 2, 42, 98, -3, 64, 2, 19, -6, -52, -29, -26, -19, -10
    0xbdd4e909, 0xd3f113ea, 0xfbe0dd2a, 0xc0c010fa, 0x212f2ff, 0x40fd622a, 0xccfa1302, 0xf6ede6e3,
    // -41, 0, 5, 34, -6, -6, 3, 33, 7, -7, -4, 25, 6, 3, 27, -21, -8, 7, -19, 15, -27, 30, 25, -19, 62, -5, -11, 33, -15, -28, -8, -6
    0x220500d7, 0x2103fafa, 0x19fcf907, 0xeb1b0306, 0xfed07f8, 0xed191ee5, 0x21f5fb3e, 0xfaf8e4f1,
    // -1, -48, -6, -72, 32, -45, -2, -41, -17, 24, 18, -94, -22, -18, 17, 60, -53, -20, -19, -26, -24, -41, -4, -38, 88, 38, 11, 36, -29, 65, 30, 45
    0xb8fad0ff, 0xd7fed320, 0xa21218ef, 0x3c11eeea, 0xe6edeccb, 0xdafcd7e8, 0x240b2658, 0x2d1e41e3,
    // 59, 14, -50, -3, 19, -49, 7, 75, 44, 13, 29, 26, 67, 33, -48, -3, -30, -34, 9, 41, 40, 22, 42, 35, -20, -40, 21, 34, -4, 34, -12, 3
    0xfdce0e3b, 0x4b07cf13, 0x1a1d0d2c, 0xfdd02143, 0x2909dee2, 0x232a1628, 0x2215d8ec, 0x3f422fc,
    // -21, -19, 0, 24, -13, 14, -36, -64, -52, 38, 43, -2, 10, 34, 18, 57, 20, 3, -2, -17, -57, -64, 44, -32, 19, 18, 37, 47, 3, 33, -2, 40
    0x1800edeb, 0xc0dc0ef3, 0xfe2b26cc, 0x3912220a, 0xeffe0314, 0xe02cc0c7, 0x2f251213, 0x28fe2103,
    // 57, 22, -17, -58, 2, -6, -2, -46, 16, 42, -18, -30, 65, 16, 1, 41, -27, 32, 12, 25, 55, -25, 0, -34, -26, -38, 20, -24, 27, 37, 43, 19
    0xc6ef1639, 0xd2fefa02, 0xe2ee2a10, 0x29011041, 0x190c20e5, 0xde00e737, 0xe814dae6, 0x132b251b,
    // 38, -32, -24, -25, 4, 24, -51, -53, 23, -12, 49, -8, 3, 65, -30, -14, -4, -8, 32, 9, -23, -2, 34, 12, -82, 2, 41, 31, -53, -42, 60, 17
    0xe7e8e026, 0xcbcd1804, 0xf831f417, 0xf2e24103, 0x920f8fc, 0xc22fee9, 0x1f2902ae, 0x113cd6cb,
    // 20, -7, 65, 73, -8, 43, 19, -1, 6, -2, -21, 1, 26, -18, 19, -4, 26, 16, 1, 27, -8, -29, 4, -39, -2, -2, -12, 6, 11, -41, -38, -19
    0x4941f914, 0xff132bf8, 0x1ebfe06, 0xfc13ee1a, 0x1b01101a, 0xd904e3f8, 0x6f4fefe, 0xeddad70b,
    // 1, 56, 40, -18, -14, -22, 27, -44, -36, -12, -49, -3, 3, -28, 7, 79, 17, 23, -13, -13, 34, -15, -49, -21, -52, 3, -10, -8, 36, 22, -58, -13
    0xee283801, 0xd41beaf2, 0xfdcff4dc, 0x4f07e403, 0xf3f31711, 0xebcff122, 0xf8f603cc, 0xf3c61624,
    // 14, 8, -3, 120, 10, 11, 1, 27, -31, -43, 47, -6, -17, -63, -15, 50, -28, 3, -34, 10, 8, 57, -7, 2, 4, 27, 19, 31, 10, 11, -58, 18
    0x78fd080e, 0x1b010b0a, 0xfa2fd5e1, 0x32f1c1ef, 0xade03e4, 0x2f93908, 0x1f131b04, 0x12c60b0a,
    // -20, 48, -32, 87, 29, -36, 5, -41, 35, -24, 45, -28, -31, 29, 20, -25, 82, 25, 8, -18, -33, -50, 12, -41, 1, -12, 31, 23, 11, 2, -13, 3
    0x57e030ec, 0xd705dc1d, 0xe42de823, 0xe7141de1, 0xee081952, 0xd70ccedf, 0x171ff401, 0x3f3020b,
    // 47, -9, 30, 17, 0, -12, -19, 71, -36, 36, -51, -2, -30, -40, -23, 21, -16, 9, -5, -14, -2, -38, -2, -21, -63, 33, 4, -29, -17, -24, 39, -11
    0x111ef72f, 0x47edf400, 0xfecd24dc, 0x15e9d8e2, 0xf2fb09f0, 0xebfedafe, 0xe30421c1, 0xf527e8ef,
    // -47, 58, -12, -29, -20, -54, -38, 8, -7, -42, 66, -52, 37, 10, -56, 13, 4, 57, 6, -47, 34, 52, 28, 66, 10, 64, -7, -47, 37, 14, 23, 26
    0xe3f43ad1, 0x8dacaec, 0xcc42d6f9, 0xdc80a25, 0xd1063904, 0x421c3422, 0xd1f9400a, 0x1a170e25,
    // 24, 29, -48, 4, -78, -12, -61, 57, 40, 2, 18, 10, 49, -37, -39, -59, -64, -17, -80, -38, -3, -72, 37, 45, 42, 46, -39, -78, -25, 5, 17, 3
    0x4d01d18, 0x39c3f4b2, 0xa120228, 0xc5d9db31, 0xdab0efc0, 0x2d25b8fd, 0xb2d92e2a, 0x31105e7,
    // -11, -8, -53, -16, -35, -46, -38, 4, 50, -12, -21, -11, -17, 23, -34, -8, -52, -11, 74, -12, 28, 30, -4, 25, 4, 14, 15, 8, 1, 0, 71, -28
    0xf0cbf8f5, 0x4dad2dd, 0xf5ebf432, 0xf8de17ef, 0xf44af5cc, 0x19fc1e1c, 0x80f0e04, 0xe4470001,
    // 5, -25, 75, -72, 28, 34, 23, -22, 2, -7, 17, 2, 22, 3, -15, 27, 15, -18, 24, -6, -26, 3, 6, -37, 23, 8, -17, 96, -32, 44, 3, 20
    0xb84be705, 0xea17221c, 0x211f902, 0x1bf10316, 0xfa18ee0f, 0xdb0603e6, 0x60ef0817, 0x14032ce0,
    // -1, 43, -28, -54, 7, 1, 82, -18, 91, -46, 11, 11, -28, 41, -33, -13, 70, 33, 7, 24, -43, 40, -28, -22, 32, -70, -21, -84, -21, 32, -26, -16
    0xcae42bff, 0xee520107, 0xb0bd25b, 0xf3df29e4, 0x18072146, 0xeae428d5, 0xacebba20, 0xf0e620eb,
    // -14, 66, -19, 30, -57, -3, -30, -12, -65, 51, 7, 24, -25, -12, -66, -99, -10, -52, -44, -83, 65, -24, -71, 22, -28, 38, -15, -36, -23, 9, 17, -78
    0x1eed42f2, 0xf4e2fdc7, 0x180733bf, 0x9dbef4e7, 0xadd4ccf6, 0x16b9e841, 0xdcf126e4, 0xb21109e9,
    // 12, -50, -17, 31, 32, 36, -9, -4, -3, 30, -9, -2, -9, -20, 0, 20, 30, -49, 23, 29, 4, 85, 17, 45, -85, -5, 9, -39, -7, -15, 40, 6
    0x1fefce0c, 0xfcf72420, 0xfef71efd, 0x1400ecf7, 0x1d17cf1e, 0x2d115504, 0xd909fbab, 0x628f1f9,
    // -58, -35, 30, -63, -9, 65, -24, 39, 2, -42, 49, 4, -37, 57, 51, -19, -5, -18, -32, -11, -19, 34, -11, -11, 49, -31, 7, 14, 15, -49, 49, -22
    0xc11eddc6, 0x27e841f7, 0x431d602, 0xed3339db, 0xf5e0eefb, 0xf5f522ed, 0xe07e131, 0xea31cf0f,
    // 16, -34, 16, 1, -9, 4, 0, -50, -73, 39, -4, -54, 10, -7, 3, 17, 24, -30, -19, -5, 2, -17, 30, 33, 38, 68, -1, 27, -47, 41, 12, 64
    0x110de10, 0xce0004f7, 0xcafc27b7, 0x1103f90a, 0xfbede218, 0x211eef02, 0x1bff4426, 0x400c29d1,
    // 12, 30, 5, 79, 28, 14, 23, -79, 40, -32, 21, 14, 0, 26, 47, -8, -19, -37, 5, 20, 14, 15, 26, -4, 7, -27, 51, 19, 17, -27, -67, 16
    0x4f051e0c, 0xb1170e1c, 0xe15e028, 0xf82f1a00, 0x1405dbed, 0xfc1a0f0e, 0x1333e507, 0x10bde511,
    // 14, -61, -28, -46, 7, -59, 85, 2, 88, -27, -14, -5, -72, -9, -4, 3, -3, -44, 32, -12, 32, -3, -87, -43, -14, 0, 22, -15, -4, -19, 43, -24
    0xd2e4c30e, 0x255c507, 0xfbf2e558, 0x3fcf7b8, 0xf420d4fd, 0xd5a9fd20, 0xf11600f2, 0xe82bedfc,
    // -20, 17, 50, -18, -27, -30, -17, -40, -18, -28, -16, 41, -43, -7, -26, -4, 55, -11, -5, 27, 17, -15, 30, 14, -29, -40, -14, 0, -37, -25, -11, -71
    0xee3211ec, 0xd8efe2e5, 0x29f0e4ee, 0xfce6f9d5, 0x1bfbf537, 0xe1ef111, 0xf2d8e3, 0xb9f5e7db,
    // -30, 37, 15, 25, 38, -11, -14, 52, -35, 10, 44, 10, 11, -10, 31, -17, 34, 5, 14, 22, -44, -75, 70, -19, 51, -38, 4, 24, 24, 22, -9, -3
    0x190f25e2, 0x34f2f526, 0xa2c0add, 0xef1ff60b, 0x160e0522, 0xed46b5d4, 0x1804da33, 0xfdf71618,
    // -2, 7, 26, 111, -3, -17, -19, -10, -31, -12, 31, 19, -7, -30, 15, 23, 11, 10, 24, -27, 15, -24, -72, -4, -29, 27, 4, -54, 17, 46, -76, 27
    0x6f1a07fe, 0xf6edeffd, 0x131ff4e1, 0x170fe2f9, 0xe5180a0b, 0xfcb8e80f, 0xca041be3, 0x1bb42e11,
    // -81, 74, -11, 0, 73, -44, 27, -65, 46, -4, 30, -14, -12, -18, -4, -20, 4, 36, 47, 33, -25, 42, -13, 27, -12, 28, -2, -17, -9, -41, -14, 46
    0xf54aaf, 0xbf1bd449, 0xf21efc2e, 0xecfceef4, 0x212f2404, 0x1bf32ae7, 0xeffe1cf4, 0x2ef2d7f7,
    // -75, -11, 56, -13, -3, -9, 4, -11, 27, -42, 5, 54, -50, -21, -19, 45, -11, 11, -24, -35, -5, -43, 35, 34, 20, 50, -38, 9, -9, -38, 55, 16
    0xf338f5b5, 0xf504f7fd, 0x3605d61b, 0x2dedebce, 0xdde80bf5, 0x2223d5fb, 0x9da3214, 0x1037daf7,
    // 55, 11, -3, -47, -7, -28, 17, 12, -7, 19, -37, 64, 33, -82, 40, 37, -3, 4, -14, 44, 55, 35, -27, 26, 71, -30, -64, -16, -11, 65, 40, -56
    0xd1fd0b37, 0xc11e4f9, 0x40db13f9, 0x2528ae21, 0x2cf204fd, 0x1ae52337, 0xf0c0e247, 0xc82841f5,
    // -11, -8, 46, -24, 38, 41, 16, 39, -18, -105, 67, -33, -56, 1, 56, 45, -20, -36, 63, -4, 51, 69, -11, -19, 18, 5, 6, -4, -13, 74, 3, -30
    0xe82ef8f5, 0x27102926, 0xdf4397ee, 0x2d3801c8, 0xfc3fdcec, 0xedf54533, 0xfc060512, 0xe2034af3,
    // 17, 62, 43, 12, -32, -38, 13, 7, 33, -12, -12, -45, -15, -55, 2, 10, 50, 86, 43, -2, -18, 87, -22, 11, -20, -51, -20, -28, 86, 14, -53, -70
    0xc2b3e11, 0x70ddae0, 0xd3f4f421, 0xa02c9f1, 0xfe2b5632, 0xbea57ee, 0xe4eccdec, 0xbacb0e56,
    // -26, -20, 10, 33, 26, 14, -24, -44, -22, -37, 33, -1, -46, -45, 31, -12, 13, -11, 7, 17, -10, 10, -3, 8, 22, 75, 26, 36, -1, 9, 50, -12
    0x210aece6, 0xd4e80e1a, 0xff21dbea, 0xf41fd3d2, 0x1107f50d, 0x8fd0af6, 0x241a4b16, 0xf43209ff,
    // -9, 39, -18, 38, -55, -43, -39, 14, -90, -78, -23, 43, 36, -58, 22, 35, 9, 56, -42, 3, 49, -31, -8, -12, 16, 59, 14, 28, 86, 27, -30, 7
    0x26ee27f7, 0xed9d5c9, 0x2be9b2a6, 0x2316c624, 0x3d63809, 0xf4f8e131, 0x1c0e3b10, 0x7e21b56,
    // -20, -48, -22, -35, 25, 31, 14, -4, 38, -7, -47, 60, -15, -41, 71, -8, 3, 37, 18, 83, -1, -73, 25, -38, -7, 35, 9, 18, 27, 52, -40, 14
    0xddead0ec, 0xfc0e1f19, 0x3cd1f926, 0xf847d7f1, 0x53122503, 0xda19b7ff, 0x120923f9, 0xed8341b,
    // 10, 41, 56, -5, -11, 20, -30, -21, -44, 36, -40, 62, 0, 0, 24, -31, 38, 41, -71, -5, 31, -4, 6, 17, -30, 15, 1, 1, 35, -35, -81, -20
    0xfb38290a, 0xebe214f5, 0x3ed824d4, 0xe1180000, 0xfbb92926, 0x1106fc1f, 0x1010fe2, 0xecafdd23,
    // -18, 36, -64, -70, -17, 45, 23, 11, 13, 5, 23, 23, 36, 33, -5, -10, 7, -13, -99, 10, -31, 38, 7, -28, 9, 20, 42, 23, 70, -41, -80, 90
    0xbac024ee, 0xb172def, 0x1717050d, 0xf6fb2124, 0xa9df307, 0xe40726e1, 0x172a1409, 0x5ab0d746,
    // 76, -27, 60, 26, 113, 43, 106, -20, 43, 46, 8, -23, -22, -19, 27, 11, 31, -20, -59, 17, -45, -16, -11, -15, -13, -25, 9, 22, -11, 22, -70, 5
    0x1a3ce54c, 0xec6a2b71, 0xe9082e2b, 0xb1bedea, 0x11c5ec1f, 0xf1f5f0d3, 0x1609e7f3, 0x5ba16f5,
    // 43, 48, 40, -17, 24, -15, 75, -18, -37, 30, 61, -25, 73, 47, 71, -13, -98, -52, -23, -73, -9, 39, -32, 39, -9, -36, 5, 17, 16, 21, 0, -104
    0xef28302b, 0xee4bf118, 0xe73d1edb, 0xf3472f49, 0xb7e9cc9e, 0x27e027f7, 0x1105dcf7, 0x98001510,
    // -70, 31, 28, 14, 61, -41, 67, -30, 57, 28, -23, -41, -82, -21, 0, 50, -2, 26, -23, 53, 6, 6, -25, 37, 43, 24, 54, -14, 63, 36, -18, 22
    0xe1c1fba, 0xe243d73d, 0xd7e91c39, 0x3200ebae, 0x35e91afe, 0x25e70606, 0xf236182b, 0x16ee243f,
    // -35, 47, 7, -3, 28, -68, 11, -8, 32, -3, 47, 13, -24, 11, -1, 34, 77, 9, -32, 26, 41, -34, 11, -38, 44, -9, 64, 49, 66, 66, -26, 17
    0xfd072fdd, 0xf80bbc1c, 0xd2ffd20, 0x22ff0be8, 0x1ae0094d, 0xda0bde29, 0x3140f72c, 0x11e64242,
    // 1, 39, -69, 39, 33, 34, 21, -5, 95, -6, 31, 64, -61, -45, -23, 40, 19, 29, 63, -14, 9, 28, -3, 32, 14, 21, -21, 42, 26, 59, 74, -4
    0x27bb2701, 0xfb152221, 0x401ffa5f, 0x28e9d3c3, 0xf23f1d13, 0x20fd1c09, 0x2aeb150e, 0xfc4a3b1a,
    // 75, -102, 40, 27, 14, -5, -16, 30, 16, -80, -49, 29, -69, -42, -50, -9, 25, -47, 56, -41, 12, 1, 21, 95, 36, 21, -101, 36, -124, 61, 38, -75
    0x1b289a4b, 0x1ef0fb0e, 0x1dcfb010, 0xf7ced6bb, 0xd738d119, 0x5f15010c, 0x249b1524, 0xb5263d84,
    // 24, 8, 25, 40, -10, -20, 35, 10, 6, -55, -3, -17, 3, 28, 17, -8, 1, 15, 77, -26, 3, 2, -6, 34, 5, 58, 5, 26, 40, 13, 50, 27
    0x28190818, 0xa23ecf6, 0xeffdc906, 0xf8111c03, 0xe64d0f01, 0x22fa0203, 0x1a053a05, 0x1b320d28,
    // 82, 9, -31, -28, -9, 5, -19, -19, 32, 1, -91, 15, 2, -18, 8, 18, 34, 10, -20, 9, -7, -91, 34, 42, 39, -22, -40, -8, -42, 40, -6, 24
    0xe4e10952, 0xeded05f7, 0xfa50120, 0x1208ee02, 0x9ec0a22, 0x2a22a5f9, 0xf8d8ea27, 0x18fa28d6,
    // 1, 14, 30, -23, -36, 28, -2, 3, -3, 17, -92, -17, 8, -83, 54, -48, -5, 33, -5, -24, 66, -20, -30, -23, -45, 23, -33, 15, 40, -28, 0, -15
    0xe91e0e01, 0x3fe1cdc, 0xefa411fd, 0xd036ad08, 0xe8fb21fb, 0xe9e2ec42, 0xfdf17d3, 0xf100e428,
    // -47, 17, 11, -17, 86, -66, 11, -47, 49, 32, -52, -84, 35, 47, -49, 60, -23, 2, -22, 16, -46, 127, 31, 14, -28, 25, 24, 8, -21, -19, -20, -16
    0xef0b11d1, 0xd10bbe56, 0xaccc2031, 0x3ccf2f23, 0x10ea02e9, 0xe1f7fd2, 0x81819e4, 0xf0ecedeb,
    // 60, 67, 38, 22, -11, 74, 5, -26, -62, 48, 3, 6, 62, -62, -4, -36, 16, 53, 22, -40, 33, 5, -20, 38, -15, 20, -82, -32, 50, -2, 6, -2
    0x1626433c, 0xe6054af5, 0x60330c2, 0xdcfcc23e, 0xd8163510, 0x26ec0521, 0xe0ae14f1, 0xfe06fe32,
    // -62, 4, -40, 12, -29, -45, 5, 46, 17, -31, 82, -10, -70, -12, 44, -50, 37, -2, -17, -92, 6, 35, 3, 41, 46, 19, 7, 3, 12, -16, -1, 41
    0xcd804c2, 0x2e05d3e3, 0xf652e111, 0xce2cf4ba, 0xa4effe25, 0x29032306, 0x307132e, 0x29fff00c,
    // 3, -40, -30, 6, -4, 57, -36, 8, 19, 7, -27, -9, -36, 37, 13, 8, 30, -23, 49, -18, 7, 22, 34, 26, 6, -65, 21, -69, -13, 22, -25, -71
    0x6e2d803, 0x8dc39fc, 0xf7e50713, 0x80d25dc, 0xee31e91e, 0x1a221607, 0xbb15bf06, 0xb9e716f3,
    // 40, -44, -11, 4, -22, -113, -11, 6, -17, -17, -29, -12, -7, 15, -15, 51, -63, 0, 43, -9, 34, 84, -18, -15, 13, -40, -3, -34, -14, 16, -29, 30
    0x4f5d428, 0x6f58fea, 0xf4e3efef, 0x33f10ff9, 0xf72b00c1, 0xf1ee5422, 0xdefdd80d, 0x1ee310f2,
    // 88, 25, 43, -20, 16, -51, 13, -16, -51, -13, 4, -20, -52, 8, 34, 73, -47, 12, -88, -47, 12, -17, 8, 4, 68, 14, 88, -11, 6, 38, -71, 33
    0xec2b1958, 0xf00dcd10, 0xec04f3cd, 0x492208cc, 0xd1a80cd1, 0x408ef0c, 0xf5580e44, 0x21b92606,
    // -7, -77, -87, 3, 29, 28, -19, -3, 31, -23, -64, -10, 42, -32, 113, -79, 53, 98, 29, 79, 26, -22, 12, 23, -7, 14, -34, -19, -22, 30, 5, 114
    0x3a9b3f9, 0xfded1c1d, 0xf6c0e91f, 0xb171e02a, 0x4f1d6235, 0x170cea1a, 0xedde0ef9, 0x72051eea,
    // -37, 29, -2, 2, 32, -20, 36, 8, 20, -30, -5, -6, -24, 3, -53, -54, -27, 22, 26, 21, 2, 15, -14, 4, -47, 44, 51, 28, -19, -85, 73, 73
    0x2fe1ddb, 0x824ec20, 0xfafbe214, 0xcacb03e8, 0x151a16e5, 0x4f20f02, 0x1c332cd1, 0x4949abed,
    // -12, -5, -51, -25, -17, -38, -62, 24, 44, -33, 51, 63, 39, -15, -68, 3, 22, -8, -51, -70, -30, 14, 52, 2, -6, 45, 63, -40, 46, -95, -13, 12
    0xe7cdfbf4, 0x18c2daef, 0x3f33df2c, 0x3bcf127, 0xbacdf816, 0x2340ee2, 0xd83f2dfa, 0xcf3a12e,
    // -40, 10, -96, 50, -1, -45, -46, 10, -8, 7, 18, 23, 11, 45, -57, -4, -19, -2, 71, 21, -26, 64, 52, 63, 1, 21, 35, 46, 20, 43, 36, 38
    0x32a00ad8, 0xad2d3ff, 0x171207f8, 0xfcc72d0b, 0x1547feed, 0x3f3440e6, 0x2e231501, 0x26242b14,
    // 46, -33, -50, 115, -2, -26, -49, 17, -7, 50, 46, -68, 10, -46, -31, -6, 18, -36, -48, 20, -23, -98, 0, -68, 46, -14, 43, -2, 51, 0, 75, 34
    0x73cedf2e, 0x11cfe6fe, 0xbc2e32f9, 0xfae1d20a, 0x14d0dc12, 0xbc009ee9, 0xfe2bf22e, 0x224b0033,
    // -25, 13, -37, -33, 90, 26, 55, -20, -18, 57, -4, -18, 0, -80, -30, 35, -18, 7, 33, 29, 7, -26, -47, 16, 57, 33, -16, -20, 29, 37, 39, 25
    0xdfdb0de7, 0xec371a5a, 0xeefc39ee, 0x23e2b000, 0x1d2107ee, 0x10d1e607, 0xecf02139, 0x1927251d,
    // -26, -5, -6, 30, 34, 41, -32, 26, 38, -4, 73, 3, -22, 22, 5, -14, -10, -57, 26, -22, 69, 50, 39, 18, 24, -29, 47, 31, 35, 56, -27, -31
    0x1efafbe6, 0x1ae02922, 0x349fc26, 0xf20516ea, 0xea1ac7f6, 0x12273245, 0x1f2fe318, 0xe1e53823,
    // 31, 49, 65, 11, 45, 46, 40, 22, 20, 75, -8, 27, -32, -27, -28, 19, -29, 24, 31, 73, 5, 63, -20, 50, 21, 37, 42, -42, 31, 35, 42, 37
    0xb41311f, 0x16282e2d, 0x1bf84b14, 0x13e4e5e0, 0x491f18e3, 0x32ec3f05, 0xd62a2515, 0x252a231f,
    // -31, -45, -52, 51, 76, 3, -45, -32, 27, 20, -53, -35, -13, -20, 16, 36, -64, 49, 60, 49, 50, -6, 13, -38, 44, 41, -16, 2, -5, 40, 29, 13
    0x33ccd3e1, 0xe0d3034c, 0xddcb141b, 0x2410ecf3, 0x313c31c0, 0xda0dfa32, 0x2f0292c, 0xd1d28fb,
    // 34, 33, -7, -5, 21, 83, -56, 50, 55, -26, -42, 28, 36, 31, 6, 42, -65, 19, 3, -35, 50, 22, 14, 8, 21, 49, -37, 59, 5, 12, 2, 23
    0xfbf92122, 0x32c85315, 0x1cd6e637, 0x2a061f24, 0xdd0313bf, 0x80e1632, 0x3bdb3115, 0x17020c05,
    // -41, -20, 13, -1, 7, -8, -18, -24, 33, -45, -20, -5, 71, -45, 52, -19, 4, 81, 47, 46, 23, 23, 58, -15, -6, 34, -4, -37, 4, 20, 27, -21
    0xff0decd7, 0xe8eef807, 0xfbecd321, 0xed34d347, 0x2e2f5104, 0xf13a1717, 0xdbfc22fa, 0xeb1b1404,
    // 6, 4, 77, -11, 42, -18, 33, -14, -60, -38, -52, -16, -16, -26, 83, -32, 0, 20, -54, -13, 70, -77, -71, -40, -20, 49, 9, -72, 60, -57, -58, -16
    0xf54d0406, 0xf221ee2a, 0xf0ccdac4, 0xe053e6f0, 0xf3ca1400, 0xd8b9b346, 0xb80931ec, 0xf0c6c73c,
    // -36, 24, -7, 28, -35, 13, 43, -5, 52, -81, 52, -66, -21, 72, 37, -72, -1, -13, -60, -8, -10, 17, 48, 9, -24, -18, 11, -5, 65, -54, 12, 38
    0x1cf918dc, 0xfb2b0ddd, 0xbe34af34, 0xb82548eb, 0xf8c4f3ff, 0x93011f6, 0xfb0beee8, 0x260cca41,
};
static const uint embedded_encoder3_ResidualBlock_1_body_pw_contract_bias_dwords[16] = {
    // -0.0005245, -0.0001941, 0.000426, 4.2e-06, -0.000456, -7.415e-05, 0.0002918, -9.227e-05, 0.0003014, -0.0001376, -5.26e-05, 6.115e-05, 0.0005126, 0.0005164, 1.305e-05, -0.000327
    0x8a5c904c, 0x460efb, 0x84dc8f79, 0x860c0cc8, 0x88820cf0, 0x4028372, 0x103b1033, 0x8d5c00db,
    // 0.0002158, 0.0003202, -0.0004177, -5.29e-05, 0.0003655, 0.000576, 0.0002402, 0.0004797, 7.32e-05, -4.99e-05, 0.0002685, 0.000455, 0.0003226, 0.0004504, 0.000894, -7.01e-05
    0xd3f0b12, 0x83788ed8, 0x10b80dfd, 0xfdc0bdf, 0x834504cc, 0xf740c66, 0xf610d49, 0x84981353,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass5(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage__encoder3_ResidualBlock_1_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _encoder3_ResidualBlock_1_residual_func_Split_output_grouped = {
        uint3(1920, 1080, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 32), // threadGroupSliceSize
        uint3(1920, 1080, 32), // storageSize
        uint3(32, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        199065600, // threadGroupStorageByteOffset
        storage__encoder3_ResidualBlock_1_residual_func_Split_output_grouped };
    
    const ConstantBufferStorage<576> storage_embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0043800100684165955, storage_embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = { embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004038163926452398, storage_embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_encoder3_ResidualBlock_1_body_pw_expand_bias = { embedded_encoder3_ResidualBlock_1_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_encoder3_ResidualBlock_1_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_1_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004034572746604681, storage_embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder3_ResidualBlock_1_body_pw_contract_bias = { embedded_encoder3_ResidualBlock_1_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder3_ResidualBlock_1_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_1_body_pw_contract_bias };
    
    // fused_quantized_NHWC_/encoder3/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_10 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_10 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_10 = uint3(64, 1, 32);
    const uint3 storageSize_slice_10 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_10 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_10 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_10 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_10 = dot(groupStart_slice_10, tensorByteStrides_slice_10);
    const float quantizationScale_slice_10 = 0.017254404723644257;
    const RWBufferStorage storage_slice_10 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_10 = { logicalSize_slice_10, groupStart_slice_10, groupSize_slice_10, storageSize_slice_10, tensorByteStrides_slice_10, paddingBegin_slice_10, paddingEnd_slice_10, threadGroupByteOffsetInTensor_slice_10 + 132710400, quantizationScale_slice_10, storage_slice_10 };
    // Fusedquantized_/encoder3/ResidualBlock_1/residual_func/Concat_quantized_/encoder3/ResidualBlock_1/body/spatial_mixing/partial_conv/Conv_quantized_/encoder3/ResidualBlock_1/body/spatial_mixing/Concat_quantized_/encoder3/ResidualBlock_1/body/pw_expand/Conv_/encoder3/ResidualBlock_1/body/pw_expand_act/Relu_quantized_/encoder3/ResidualBlock_1/body/pw_contract/Conv_/encoder3/ResidualBlock_1/Add (32, 1080, 1920), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,) -> (32, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<32, 1>(0.015974493697285652, 0.019690383225679398, 0.012869060039520264, _encoder3_ResidualBlock_1_residual_func_Split_output_grouped, embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias, embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_1_body_pw_expand_bias, embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_1_body_pw_contract_bias, slice_10, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_5
#ifdef MLSR_PASS_5_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass5_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/encoder3/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_11 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_11 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_11 = uint3(32, 1, 32);
    const uint3 storageSize_slice_11 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_11 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_11 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_11 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_11 = dot(groupStart_slice_11, tensorByteStrides_slice_11);
    const float quantizationScale_slice_11 = 0.017254404723644257;
    const RWBufferStorage storage_slice_11 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_11 = { logicalSize_slice_11, groupStart_slice_11, groupSize_slice_11, storageSize_slice_11, tensorByteStrides_slice_11, paddingBegin_slice_11, paddingEnd_slice_11, threadGroupByteOffsetInTensor_slice_11 + 132710400, quantizationScale_slice_11, storage_slice_11 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_11, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_5_POST


#ifdef MLSR_PASS_6
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FusedConv2D_k2s2b_QuantizedOutput.hlsli"

static const uint embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias_dwords[32] = {
    // -0.008995, 0.03314, -0.03534, -0.05145, 0.0398, -0.10187, 0.03958, 0.04077, 0.01743, 0.001923, -0.0333, -0.07166, 0.01389, 0.01581, 0.002708, 0.00433
    0x283ea09b, 0xaa96a886, 0xae852918, 0x29382911, 0x17e02476, 0xac96a843, 0x240c231d, 0x1c6f198c,
    // 0.01987, -0.007298, 0.1049, 0.083, -0.1239, 0.0317, -0.0707, -0.003365, -0.0326, -0.2115, 0.0814, 0.05814, 0.2045, -0.03754, -0.167, -0.02197
    0x9f792516, 0x2d502eb7, 0x280fafee, 0x9ae4ac86, 0xb2c5a82c, 0x2b712d36, 0xa8ce328b, 0xa5a0b158,
    // 0.1418, -0.007027, 6.807e-05, 0.04156, -0.001957, 0.072, -0.2507, 0.1998, 0.1697, 0.04617, 0.1726, 0.10223, 0.1423, 0.0652, -0.06573, -0.05646
    0x9f32308a, 0x29520476, 0x2c9c9802, 0x3265b403, 0x29e9316e, 0x2e8b3186, 0x2c2c308e, 0xab3aac35,
    // 0.001056, 0.0435, 0.08704, 0.1241, 0.03256, -0.1989, -0.0951, -0.08813, 0.01232, 0.09247, -0.05524, 0.3381, -0.02945, 0.1495, 0.1101, -0.1399
    0x29911453, 0x2ff12d92, 0xb25d282b, 0xada4ae16, 0x2deb224f, 0x3569ab12, 0x30c9a78a, 0xb07a2f0c,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass6(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 32), // threadGroupSliceSize
        uint3(1920, 1080, 32), // storageSize
        uint3(32, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        132710400, // threadGroupStorageByteOffset
        0.017254404723644257, storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const BufferStorage storage__encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 32, 64), // threadGroupSliceSize
        uint4(2, 2, 32, 64), // storageSize
        uint4(32, 64, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        9856, // threadGroupStorageByteOffset
        0.003348411526530981, storage__encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias = { embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias };
    
    // Fusedquantized_/encoder3/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_12 = uint3(960, 540, 64);
    const int3 groupStart_slice_12 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 64);
    const uint3 groupSize_slice_12 = uint3(64, 1, 64);
    const uint3 storageSize_slice_12 = uint3(960, 540, 64);
    const uint3 tensorByteStrides_slice_12 = uint3(64, 61440, 1);
    const uint3 paddingBegin_slice_12 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_12 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_12 = dot(groupStart_slice_12, tensorByteStrides_slice_12);
    const RWBufferStorage storage_slice_12 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_12 = { logicalSize_slice_12, groupStart_slice_12, groupSize_slice_12, storageSize_slice_12, tensorByteStrides_slice_12, paddingBegin_slice_12, paddingEnd_slice_12, threadGroupByteOffsetInTensor_slice_12 + 199065600, storage_slice_12 };
    // Fusedquantized_/encoder3/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs (32, 1080, 1920), (64, 32, 2, 2), (64,) -> (64, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FusedConv2D_k2s2b_QuantizedOutput(0.017495272681117058, 0.025647982954978943, fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, _encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias, slice_12, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_6
#ifdef MLSR_PASS_6_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass6_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // Fusedquantized_/encoder3/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_13 = uint3(960, 540, 64);
    const int3 groupStart_slice_13 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 64);
    const uint3 groupSize_slice_13 = uint3(32, 1, 64);
    const uint3 storageSize_slice_13 = uint3(960, 540, 64);
    const uint3 tensorByteStrides_slice_13 = uint3(64, 61440, 1);
    const uint3 paddingBegin_slice_13 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_13 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_13 = dot(groupStart_slice_13, tensorByteStrides_slice_13);
    const RWBufferStorage storage_slice_13 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_13 = { logicalSize_slice_13, groupStart_slice_13, groupSize_slice_13, storageSize_slice_13, tensorByteStrides_slice_13, paddingBegin_slice_13, paddingEnd_slice_13, threadGroupByteOffsetInTensor_slice_13 + 199065600, storage_slice_13 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_13, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_6_POST


#ifdef MLSR_PASS_7
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords[16] = {
    // -0.001458, -6.247e-05, -0.000554, -0.001257, -0.0004034, -0.000653, -0.000469, -0.00201, 0.000352, 0.0005503, -0.00107, -0.0005774, 0.001168, -0.0003376, 0.000434, -1.746e-05
    0x841895f9, 0x9526908a, 0x91598e9c, 0x981e8faf, 0x10820dc4, 0x90bb9462, 0x8d8814c9, 0x81250f1c,
    // -0.0013685, 0.001681, -0.0004666, 0.000319, -0.000328, 0.001924, 0.002533, -0.000642, -0.0008016, -0.0004437, 0.00041, -0.001024, -0.000991, -0.00082, -0.002298, 6.974e-05
    0x16e3959b, 0xd3a8fa5, 0x17e18d60, 0x91421930, 0x8f459291, 0x94320eb8, 0x92b8940f, 0x49298b5,
};
static const uint embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias_dwords[64] = {
    // 0.1242, -0.0388, -0.07733, -0.06033, -0.0764, -0.196, -0.1371, -0.09064, -0.1912, 0.05957, -0.1407, -0.05106, -0.0889, -0.01321, -0.1865, 0.0128
    0xa8f72ff3, 0xabb9acf3, 0xb246ace4, 0xadcdb063, 0x2ba0b21e, 0xaa89b081, 0xa2c3adb1, 0x228eb1f8,
    // 0.02573, 0.0404, -0.0383, 0.01091, -0.04056, -0.0427, -0.1748, -0.01437, -0.0963, -0.1592, -0.1414, -0.2123, -0.1738, -0.127, -0.05875, -0.06113
    0x292c2696, 0x2196a8e7, 0xa977a931, 0xa35cb198, 0xb118ae2a, 0xb2cbb086, 0xb010b190, 0xabd3ab85,
    // -0.1385, -0.0377, -0.0913, 0.003494, -0.03967, -0.1422, -0.06854, -0.06274, -0.0115, 0.01487, -0.1615, -0.041, -0.1715, -0.118, -0.0704, -0.2717
    0xa8d3b06f, 0x1b28add8, 0xb08da914, 0xac04ac63, 0x239da1e3, 0xa93fb12b, 0xaf8db17d, 0xb459ac81,
    // 0.113, -0.2021, -0.06696, -0.015045, -0.3582, -0.1094, -0.1858, -0.00428, -0.1146, -0.03041, -0.1409, -0.2744, -0.1559, 0.057, 0.02559, 0.0687
    0xb2782f3b, 0xa3b4ac49, 0xaf00b5bb, 0x9c62b1f2, 0xa7c9af56, 0xb464b082, 0x2b4cb0fd, 0x2c66268d,
    // -0.04028, -0.1735, -0.04684, -0.0972, -0.0491, -0.10205, -0.1239, 0.0418, -0.0982, -0.2139, -0.11786, -0.08295, -0.276, -0.2644, -0.547, -0.1555
    0xb18da928, 0xae39a9ff, 0xae88aa49, 0x295aafee, 0xb2d8ae49, 0xad4faf8b, 0xb43bb46a, 0xb0fab860,
    // 0.065, -0.1074, -0.03757, -0.0804, -0.007214, -0.092, -0.1674, -0.05795, -0.0709, 0.027, -0.0138, -0.05392, -0.0421, -0.2974, 0.0003397, -0.1134
    0xaee02c29, 0xad25a8cf, 0xade39f63, 0xab6bb15b, 0x26e9ac8a, 0xaae7a311, 0xb4c2a964, 0xaf420d91,
    // -0.1353, 0.05356, -0.0232, 0.01802, -0.00239, -0.001894, -0.14, -0.10876, -0.3037, -0.004307, -0.01009, -0.2273, -0.02562, -0.2379, -0.1163, -0.1771
    0x2adbb054, 0x249da5f0, 0x97c298e5, 0xaef6b07b, 0x9c69b4dc, 0xb346a12b, 0xb39da68f, 0xb1abaf71,
    // -0.255, -0.011696, -0.1337, -0.02446, 0.03098, 0.00839, 0.03168, -0.09705, -0.1635, -0.09906, -0.2474, 0.0717, -0.03644, -0.03268, -0.1101, -0.03018
    0xa1fdb414, 0xa643b047, 0x204c27ee, 0xae36280e, 0xae57b13b, 0x2c97b3eb, 0xa82fa8aa, 0xa7baaf0c,
};
static const uint embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias_dwords[32] = {
    // -3.5e-06, -9.32e-05, 9.6e-06, -0.0001924, -3.09e-05, -0.0001864, 9.257e-05, -0.0002532, 0.000385, -0.0001515, 0.0003524, -0.0001932, -0.0002573, 0.0002763, 0.000195, -0.0004945
    0x861c803b, 0x8a4e00a1, 0x8a1c8206, 0x8c260611, 0x88f70e4f, 0x8a550dc6, 0xc878c37, 0x900d0a64,
    // -0.0001912, -3.266e-05, -0.0001866, -5.03e-05, -0.0001345, -9.7e-06, 0.0001928, 5.49e-05, 0.0002376, -7.07e-05, -0.0001535, -0.000253, 0.0003402, 4.03e-05, 6.74e-06, -0.00051
    0x82248a44, 0x834c8a1d, 0x80a38868, 0x3990a51, 0x84a20bc9, 0x8c258908, 0x2a40d93, 0x902e0071,
    // 0.0001303, -0.000133, -0.0001029, -0.0001128, -8.494e-05, -0.0001242, -0.0001732, 5.573e-05, 0.0001798, 0.000167, 0.000241, -0.0001795, -3.84e-05, 0.0002247, -0.000187, -3.254e-05
    0x885c0845, 0x876486be, 0x88128591, 0x3a789ad, 0x97909e4, 0x89e20be6, 0xb5d8284, 0x82228a21,
    // -4.536e-05, -8.285e-05, -0.0001982, -0.0002992, 0.0003507, 0.0001354, -0.000139, 0.0001923, 0.0003457, -0.0002248, -0.0001545, -0.0004337, -2.65e-05, 0.0003757, -0.000146, -6.133e-05
    0x856e82f9, 0x8ce78a7f, 0x8700dbf, 0xa4d888e, 0x8b5e0daa, 0x8f1b8910, 0xe2881bd, 0x840588c9,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass7(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = {
        uint3(960, 540, 64), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 64), // threadGroupSliceSize
        uint3(960, 540, 64), // storageSize
        uint3(64, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        199065600, // threadGroupStorageByteOffset
        storage_Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped };
    
    const BufferStorage storage__bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 32), // threadGroupSliceSize
        uint4(3, 3, 16, 32), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        18048, // threadGroupStorageByteOffset
        0.004179034847766161, storage__bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = { embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 128), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 128), // threadGroupSliceSize
        uint4(1, 1, 64, 128), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        22656, // threadGroupStorageByteOffset
        0.0065138996578752995, storage__bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<64> storage_embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias = { embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<64> > embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias = {
        128, // logicalSize
        0, // threadGroupSliceStart
        128, // threadGroupSliceSize
        128, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 128, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 128, 64), // threadGroupSliceSize
        uint4(1, 1, 128, 64), // storageSize
        uint4(128, 128, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        30848, // threadGroupStorageByteOffset
        0.0065083373337984085, storage__bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias = { embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias };
    
    // /bottleneck/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_14 = uint3(960, 540, 64);
    const int3 groupStart_slice_14 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 64);
    const uint3 groupSize_slice_14 = uint3(64, 1, 64);
    const uint3 storageSize_slice_14 = uint3(960, 540, 64);
    const uint3 tensorByteStrides_slice_14 = uint3(64, 61440, 1);
    const uint3 paddingBegin_slice_14 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_14 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_14 = dot(groupStart_slice_14, tensorByteStrides_slice_14);
    const RWBufferStorage storage_slice_14 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_14 = { logicalSize_slice_14, groupStart_slice_14, groupSize_slice_14, storageSize_slice_14, tensorByteStrides_slice_14, paddingBegin_slice_14, paddingEnd_slice_14, threadGroupByteOffsetInTensor_slice_14 + 232243200, storage_slice_14 };
    // Fusedquantized_/bottleneck/ResidualBlock_0/residual_func/Concat_quantized_/bottleneck/ResidualBlock_0/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_0/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_0/body/pw_expand/Conv_/bottleneck/ResidualBlock_0/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_0/body/pw_contract/Conv_/bottleneck/ResidualBlock_0/Add (64, 540, 960), (32, 16, 3, 3), (32,), (128, 64, 1, 1), (128,), (64, 128, 1, 1), (64,) -> (64, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<64, 2>(0.017495272681117058, 0.025647982954978943, 0.020743701606988907, 0.01758650690317154, 0.03180921450257301, Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped, _bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias, _bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias, _bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias, slice_14, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_7
#ifdef MLSR_PASS_7_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass7_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /bottleneck/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_15 = uint3(960, 540, 64);
    const int3 groupStart_slice_15 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 64);
    const uint3 groupSize_slice_15 = uint3(32, 1, 64);
    const uint3 storageSize_slice_15 = uint3(960, 540, 64);
    const uint3 tensorByteStrides_slice_15 = uint3(64, 61440, 1);
    const uint3 paddingBegin_slice_15 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_15 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_15 = dot(groupStart_slice_15, tensorByteStrides_slice_15);
    const RWBufferStorage storage_slice_15 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_15 = { logicalSize_slice_15, groupStart_slice_15, groupSize_slice_15, storageSize_slice_15, tensorByteStrides_slice_15, paddingBegin_slice_15, paddingEnd_slice_15, threadGroupByteOffsetInTensor_slice_15 + 232243200, storage_slice_15 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_15, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_7_POST


#ifdef MLSR_PASS_8
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords[16] = {
    // 0.0009604, -0.000993, -0.0009313, 0.001965, -0.001285, 0.001474, 0.0006022, -1.5e-06, -0.00101, 0.000509, 0.000625, -3.19e-05, -0.0007186, 0.0008597, -0.0014715, -0.000215
    0x941113de, 0x180693a1, 0x160a9543, 0x801910ef, 0x102b9423, 0x8217111f, 0x130b91e3, 0x8b0c9607,
    // -0.000334, -0.0001783, 0.0002031, 0.00011, -0.002777, 0.001951, -0.000853, 0.0003285, -0.0006976, 8.4e-05, -0.0003157, 0.000295, -0.0004857, 0.0004354, 0.0007725, 0.0010805
    0x89d88d79, 0x7350aa8, 0x17fe99b0, 0xd6292fd, 0x58191b7, 0xcd58d2c, 0xf228ff5, 0x146d1254,
};
static const uint embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias_dwords[64] = {
    // -0.153, -0.3848, -0.02635, 0.010765, -0.05655, -0.3384, 0.05923, -0.1884, -0.1384, -0.0747, -0.4502, 0.008224, -0.00951, -0.02846, -0.1353, 0.1493
    0xb628b0e5, 0x2183a6bf, 0xb56aab3d, 0xb2072b95, 0xacc8b06e, 0x2036b734, 0xa749a0de, 0x30c7b054,
    // 0.063, -0.1134, -0.1724, 0.04483, 0.0885, 0.01272, -0.1633, 0.09467, 0.0204, -0.2236, -0.0003915, -0.10254, 0.0363, -0.3499, 0.02545, 0.09753
    0xaf422c08, 0x29bdb184, 0x22832daa, 0x2e0fb13a, 0xb3282539, 0xae908e6a, 0xb59928a5, 0x2e3e2684,
    // 0.0676, -0.1047, 0.1592, 0.05035, 0.00744, -0.01736, 0.0209, -0.02599, -0.0227, 0.0445, -0.06726, 0.04813, 0.006916, -0.01161, -0.11884, -0.01952
    0xaeb32c54, 0x2a723118, 0xa4721f9e, 0xa6a7255a, 0x29b2a5d0, 0x2a29ac4e, 0xa1f21f15, 0xa4ffaf9b,
    // -0.08, -0.2255, -0.03067, -0.1132, 0.04993, 0.1337, 0.11536, -0.0417, -0.1149, -0.03062, -0.1553, -0.1368, 0.0873, -0.2405, -0.461, 0.0501
    0xb337ad1f, 0xaf3fa7da, 0x30472a64, 0xa9562f62, 0xa7d7af5b, 0xb061b0f8, 0xb3b22d96, 0x2a6ab760,
    // 0.04504, -0.007767, 0.02632, 0.03099, 0.06174, 0.03223, -0.058, 0.01974, -0.02469, -0.0407, -0.04044, -0.0544, -0.003357, -0.03102, -0.12036, 0.04285
    0x9ff429c4, 0x27ef26bd, 0x28202be7, 0x250eab6d, 0xa936a652, 0xaaf7a92d, 0xa7f19ae0, 0x297cafb4,
    // -0.00785, -0.03726, -0.2659, 0.0625, -0.1924, -0.02211, -0.09326, -0.1558, -0.06207, -0.1589, -0.1315, -0.01316, -0.0375, -0.01014, -0.03873, -0.06934
    0xa8c5a005, 0x2c00b441, 0xa5a9b228, 0xb0fcadf8, 0xb116abf2, 0xa2bdb035, 0xa131a8cd, 0xac70a8f5,
    // 0.0262, -0.337, -0.05838, -0.0685, 0.0201, -0.4426, -0.0397, -0.1284, -0.2123, -0.1737, 0.03915, -0.0943, -0.1775, -0.3357, -0.03864, -0.2288
    0xb56426b5, 0xac62ab79, 0xb7152525, 0xb01ca915, 0xb18fb2cb, 0xae092903, 0xb55fb1ae, 0xb352a8f2,
    // 0.07056, -0.0987, 0.03754, -0.1307, -0.0874, -0.2372, -0.07605, 0.04712, 0.0982, -0.05377, -0.05707, -0.10675, -0.1203, 0.1003, -0.3345, -0.0753
    0xae512c84, 0xb02f28ce, 0xb397ad98, 0x2a08acde, 0xaae22e49, 0xaed5ab4e, 0x2e6bafb3, 0xacd2b55a,
};
static const uint embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias_dwords[32] = {
    // -4.78e-05, 0.0005665, -3.95e-05, 0.000937, 0.000881, -0.000581, -0.0005665, 4.94e-05, 0.000512, -0.0004556, 0.000573, -0.0002482, 6.247e-05, -0.001064, -0.0006304, 0.000101
    0x10a48322, 0x13ad8297, 0x90c21338, 0x33d90a4, 0x8f771032, 0x8c1110b2, 0x945c0418, 0x69e912a,
    // 0.000882, -0.0005536, -3.84e-05, 0.0002792, -0.0001864, 3.41e-05, 0.0001454, -7.737e-05, -0.000277, -0.0003293, 0.00012183, 0.000237, -0.0004163, 0.0003383, 0.0003707, 0.0001583
    0x9089133a, 0xc938284, 0x23c8a1c, 0x851208c4, 0x8d658c8a, 0xbc407fc, 0xd8b8ed2, 0x9300e13,
    // -0.0001281, -0.0009665, -0.001024, -7.1e-05, -0.001188, -0.0005665, -0.0003417, 0.001629, -0.000961, -0.0002847, -0.0004368, -0.0007906, 0.002123, 0.0001564, 0.0001043, 0.001003
    0x93eb8833, 0x84a79432, 0x90a494de, 0x16ac8d99, 0x8caa93df, 0x927a8f28, 0x9201859, 0x141c06d6,
    // 6.235e-05, 0.0004275, -0.0006056, 0.001955, 0.0007815, -0.0004964, 0.00010586, 0.001278, -0.0004046, 0.001687, 0.001226, 0.000928, 0.002832, 0.0001395, -0.00132, 0.000732
    0xf010416, 0x180190f6, 0x90111267, 0x153c06f0, 0x16e98ea1, 0x139a1506, 0x89219cd, 0x11ff9568,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass8(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage__bottleneck_ResidualBlock_1_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _bottleneck_ResidualBlock_1_residual_func_Split_output_grouped = {
        uint3(960, 540, 64), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 64), // threadGroupSliceSize
        uint3(960, 540, 64), // storageSize
        uint3(64, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        232243200, // threadGroupStorageByteOffset
        storage__bottleneck_ResidualBlock_1_residual_func_Split_output_grouped };
    
    const BufferStorage storage__bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 32), // threadGroupSliceSize
        uint4(3, 3, 16, 32), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        39040, // threadGroupStorageByteOffset
        0.0030921294819563627, storage__bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = { embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 128), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 128), // threadGroupSliceSize
        uint4(1, 1, 64, 128), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        43648, // threadGroupStorageByteOffset
        0.005558755248785019, storage__bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<64> storage_embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias = { embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<64> > embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias = {
        128, // logicalSize
        0, // threadGroupSliceStart
        128, // threadGroupSliceSize
        128, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 128, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 128, 64), // threadGroupSliceSize
        uint4(1, 1, 128, 64), // storageSize
        uint4(128, 128, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        51840, // threadGroupStorageByteOffset
        0.0055317990481853485, storage__bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias = { embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias };
    
    // /bottleneck/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_16 = uint3(960, 540, 64);
    const int3 groupStart_slice_16 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 64);
    const uint3 groupSize_slice_16 = uint3(64, 1, 64);
    const uint3 storageSize_slice_16 = uint3(960, 540, 64);
    const uint3 tensorByteStrides_slice_16 = uint3(64, 61440, 1);
    const uint3 paddingBegin_slice_16 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_16 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_16 = dot(groupStart_slice_16, tensorByteStrides_slice_16);
    const RWBufferStorage storage_slice_16 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_16 = { logicalSize_slice_16, groupStart_slice_16, groupSize_slice_16, storageSize_slice_16, tensorByteStrides_slice_16, paddingBegin_slice_16, paddingEnd_slice_16, threadGroupByteOffsetInTensor_slice_16 + 199065600, storage_slice_16 };
    // Fusedquantized_/bottleneck/ResidualBlock_1/residual_func/Concat_quantized_/bottleneck/ResidualBlock_1/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_1/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_1/body/pw_expand/Conv_/bottleneck/ResidualBlock_1/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_1/body/pw_contract/Conv_/bottleneck/ResidualBlock_1/Add (64, 540, 960), (32, 16, 3, 3), (32,), (128, 64, 1, 1), (128,), (64, 128, 1, 1), (64,) -> (64, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<64, 2>(0.01758650690317154, 0.03180921450257301, 0.021570146083831787, 0.020989850163459778, 0.03313566371798515, _bottleneck_ResidualBlock_1_residual_func_Split_output_grouped, _bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias, _bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias, _bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias, slice_16, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_8
#ifdef MLSR_PASS_8_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass8_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /bottleneck/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_17 = uint3(960, 540, 64);
    const int3 groupStart_slice_17 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 64);
    const uint3 groupSize_slice_17 = uint3(32, 1, 64);
    const uint3 storageSize_slice_17 = uint3(960, 540, 64);
    const uint3 tensorByteStrides_slice_17 = uint3(64, 61440, 1);
    const uint3 paddingBegin_slice_17 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_17 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_17 = dot(groupStart_slice_17, tensorByteStrides_slice_17);
    const RWBufferStorage storage_slice_17 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_17 = { logicalSize_slice_17, groupStart_slice_17, groupSize_slice_17, storageSize_slice_17, tensorByteStrides_slice_17, paddingBegin_slice_17, paddingEnd_slice_17, threadGroupByteOffsetInTensor_slice_17 + 199065600, storage_slice_17 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_17, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_8_POST


#ifdef MLSR_PASS_9
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FNB_CT2D_ADD.hlsli"

static const uint embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords[16] = {
    // -0.0002292, -0.000145, 0.0001792, -0.0001372, -7.29e-05, 4.417e-05, 0.0002694, 0.0003595, 0.0002668, 0.0004954, 0.0001498, 0.00025, -0.0001897, -0.0001451, 0.00011533, -1.88e-05
    0x88c08b83, 0x887f09df, 0x2e584c7, 0xde40c6a, 0x100f0c5f, 0xc1908e9, 0x88c18a37, 0x813b078f,
    // -5.16e-05, 4.417e-05, -0.0001664, -0.0002735, 7.904e-05, 6.81e-05, 0.0001116, -0.0003762, 0.000156, 3.24e-05, 0.0001239, 0.0001075, -9.17e-05, -1.013e-05, 5.46e-05, -0.0001364
    0x2e58362, 0x8c7b8974, 0x477052e, 0x8e2a0750, 0x220091d, 0x70c080f, 0x80aa8602, 0x88780394,
};
static const uint embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias_dwords[64] = {
    // -0.03787, -0.01022, -0.2158, 0.02077, 0.0992, -0.0997, -0.1356, -0.10846, -0.005787, -0.2391, -0.1323, -0.2424, 0.066, -0.0391, 0.0956, 0.07526
    0xa13ca8d9, 0x2551b2e8, 0xae612e59, 0xaef1b057, 0xb3a79ded, 0xb3c2b03c, 0xa9012c39, 0x2cd12e1e,
    // 0.0652, -0.06866, -0.09766, -0.0505, -0.1003, 0.01828, 0.00729, -0.0506, -0.1476, 0.09766, -0.2505, 0.01342, -0.09235, -0.0633, -0.0707, -0.1168
    0xac652c2c, 0xaa77ae40, 0x24aeae6b, 0xaa7a1f77, 0x2e40b0b9, 0x22dfb402, 0xac0dade9, 0xaf7aac86,
    // 0.02942, -0.3152, -0.04843, -0.1315, -0.04712, 0.0824, -0.08374, -0.1664, 0.0786, -0.057, -0.05826, 0.01382, -0.02867, -0.1774, 0.0002692, -0.2216
    0xb50b2788, 0xb035aa33, 0x2d46aa08, 0xb153ad5c, 0xab4c2d08, 0x2313ab75, 0xb1ada757, 0xb3170c69,
    // 0.002087, 0.0513, -0.07245, 0.001778, 0.10736, -0.4102, 0.02718, 0.08295, -0.0834, -0.3777, 0.06168, -0.0874, 0.02478, -0.009575, -0.1857, -0.03754
    0x2a911846, 0x1748aca3, 0xb6902edf, 0x2d4f26f5, 0xb60bad56, 0xad982be5, 0xa0e72658, 0xa8ceb1f1,
    // -0.07983, -0.2196, -0.3184, 0.006573, 0.168, -0.0966, -0.1943, -0.0348, 0.05545, -0.10004, 0.0699, -0.02226, -0.05127, -0.4521, -0.1848, 0.1456
    0xb307ad1c, 0x1ebbb518, 0xae2f3160, 0xa874b238, 0xae672b19, 0xa5b32c79, 0xb73caa90, 0x30a9b1ea,
    // -0.0477, -0.05432, 0.0455, 0.05832, -0.4155, 0.006584, -0.1055, -0.02608, -0.0552, 0.05066, -0.1565, -0.0911, -0.1943, 0.03568, -0.0001752, -0.007095
    0xaaf4aa1b, 0x2b7729d3, 0x1ebeb6a6, 0xa6adaec1, 0x2a7cab11, 0xadd5b102, 0x2891b238, 0x9f4489be,
    // 0.10657, -0.04657, -0.559, -0.2401, -0.3164, 0.0274, -0.02452, -0.1727, -0.1276, 0.2102, -0.757, -0.0658, 0.1301, 0.01297, -0.1289, -0.008606
    0xa9f62ed2, 0xb3afb879, 0x2704b510, 0xb187a647, 0x32bab015, 0xac36ba0e, 0x22a4302a, 0xa068b020,
    // -0.2069, -0.013084, -0.1207, -0.1804, -0.05798, -0.06665, -0.4336, -0.0681, 0.04288, -0.04678, 0.1628, 0.04395, -0.3013, -0.001856, -0.2291, -0.0607
    0xa2b3b29f, 0xb1c6afba, 0xac44ab6c, 0xac5cb6f0, 0xa9fd297d, 0x29a03136, 0x979ab4d2, 0xabc5b355,
};
static const uint embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias_dwords[32] = {
    // 0.000664, -0.0004723, -0.00012165, -0.000543, -0.0006895, 0.001021, 0.0006, -0.0002192, -0.0004015, 0.0005174, -0.0004299, 0.0003028, -1.36e-05, -0.000835, -2.26e-06, 0.0001934
    0x8fbd1171, 0x907387f9, 0x142f91a6, 0x8b2f10ea, 0x103d8e94, 0xcf68f0b, 0x92d780e4, 0xa568026,
    // -0.000243, 0.0004072, 0.0007515, -0.000368, -0.001651, 0.001375, 0.000305, -0.00184, 0.001103, -0.0005217, -0.00054, -0.0001643, 0.000679, 0.001569, -0.0003755, -0.000565
    0xeac8bf6, 0x8e081228, 0x15a296c3, 0x97890cff, 0x90461485, 0x8962906c, 0x166d1190, 0x90a18e27,
    // -0.0003233, 0.001035, -0.000841, 0.0001304, -0.001091, 0.001276, -0.0003204, -0.001016, 0.0003707, -0.001792, -0.001874, 0.001261, -0.001205, -0.0002503, 0.0002575, -0.003622
    0x143d8d4c, 0x84692e4, 0x153a9478, 0x94298d40, 0x97570e13, 0x152a97ad, 0x8c1a94f0, 0x9b6b0c38,
    // 0.001046, -0.001622, -1e-05, -0.002789, -0.002035, -0.0003748, -0.001524, 0.0003543, 0.0005527, -0.001825, 0.0003304, -0.004368, -0.005, -0.000937, 0.000989, 0.001733
    0x96a51449, 0x99b680a8, 0x8e24982b, 0xdce963e, 0x977a1087, 0x9c790d6a, 0x93ad9d1f, 0x1719140d,
};
static const uint embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias_dwords[16] = {
    // -0.002714, -0.00788, -0.03534, 0.01422, -0.01582, 0.01218, -0.0846, -0.01097, 0.0377, -0.001842, 0.00258, 0.04666, -0.01883, 0.00854, -0.0389, -0.00969
    0xa009998f, 0x2348a886, 0x223ca40d, 0xa19ead6a, 0x978b28d3, 0x29f91949, 0x205fa4d2, 0xa0f6a8fb,
    // -0.002415, 0.08014, 0.1285, -0.08777, 0.01567, 0.0386, -0.0774, 0.1164, -0.0976, -0.0629, 0.0441, 0.0413, -0.08, 0.04257, 0.01399, 0.06354
    0x2d2198f2, 0xad9e301d, 0x28f12403, 0x2f73acf4, 0xac07ae3f, 0x294929a5, 0x2973ad1f, 0x2c11232a,
};

[numthreads(8, 8, 1)]
void fsr4_model_v07_i8_pass9(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(8, 8, 1);
    
    const RWBufferStorage storage__bottleneck_ResidualBlock_2_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _bottleneck_ResidualBlock_2_residual_func_Split_output_grouped = {
        uint3(960, 540, 64), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 64), // threadGroupSliceSize
        uint3(960, 540, 64), // storageSize
        uint3(64, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        199065600, // threadGroupStorageByteOffset
        storage__bottleneck_ResidualBlock_2_residual_func_Split_output_grouped };
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 32), // threadGroupSliceSize
        uint3(1920, 1080, 32), // storageSize
        uint3(32, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        132710400, // threadGroupStorageByteOffset
        0.017254404723644257, storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const BufferStorage storage__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 32), // threadGroupSliceSize
        uint4(3, 3, 16, 32), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        60032, // threadGroupStorageByteOffset
        0.0036139129661023617, storage__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = { embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 128), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 128), // threadGroupSliceSize
        uint4(1, 1, 64, 128), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        64640, // threadGroupStorageByteOffset
        0.0066762520000338554, storage__bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<64> storage_embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias = { embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<64> > embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias = {
        128, // logicalSize
        0, // threadGroupSliceStart
        128, // threadGroupSliceSize
        128, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 128, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 128, 64), // threadGroupSliceSize
        uint4(1, 1, 128, 64), // storageSize
        uint4(128, 128, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        72832, // threadGroupStorageByteOffset
        0.006695057265460491, storage__bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias = { embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias };
    
    const BufferStorage storage_hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_HWCN< BufferStorage > hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 32, 64), // threadGroupSliceSize
        uint4(2, 2, 32, 64), // storageSize
        uint4(2048, 4096, 64, 1), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        81024, // threadGroupStorageByteOffset
        0.0028017559088766575, storage_hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias = { embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias };
    
    // FusedFusedquantized_/bottleneck/ResidualBlock_2/residual_func/Concat_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_2/body/pw_expand/Conv_/bottleneck/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_2/body/pw_contract/Conv_/bottleneck/ResidualBlock_2/Add_Fusedquantized_/bottleneck/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_Fusedquantized_/decoder3/skip_pop_0/Add_QuantizedOutput_output_grouped
    const uint3 logicalSize_slice_18 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_18 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(16, 16, 32);
    const uint3 groupSize_slice_18 = uint3(16, 16, 32);
    const uint3 storageSize_slice_18 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_18 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_18 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_18 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_18 = dot(groupStart_slice_18, tensorByteStrides_slice_18);
    const RWBufferStorage storage_slice_18 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_18 = { logicalSize_slice_18, groupStart_slice_18, groupSize_slice_18, storageSize_slice_18, tensorByteStrides_slice_18, paddingBegin_slice_18, paddingEnd_slice_18, threadGroupByteOffsetInTensor_slice_18 + 265420800, storage_slice_18 };
    // FusedFusedquantized_/bottleneck/ResidualBlock_2/residual_func/Concat_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_2/body/pw_expand/Conv_/bottleneck/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_2/body/pw_contract/Conv_/bottleneck/ResidualBlock_2/Add_Fusedquantized_/bottleneck/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_Fusedquantized_/decoder3/skip_pop_0/Add_QuantizedOutput (64, 540, 960), (32, 1080, 1920), (32, 16, 3, 3), (32,), (128, 64, 1, 1), (128,), (64, 128, 1, 1), (64,), (64, 32, 2, 2), (32,) -> (32, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FNB_CT2D_ADD<64, 2>(0.020989850163459778, 0.03313566371798515, 0.024992188438773155, 0.02685534581542015, 0.02135251834988594, 0.028955304995179176, _bottleneck_ResidualBlock_2_residual_func_Split_output_grouped, fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, _bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias, _bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias, _bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias, hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias, slice_18, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_9
#ifdef MLSR_PASS_9_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass9_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // FusedFusedquantized_/bottleneck/ResidualBlock_2/residual_func/Concat_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_2/body/pw_expand/Conv_/bottleneck/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_2/body/pw_contract/Conv_/bottleneck/ResidualBlock_2/Add_Fusedquantized_/bottleneck/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_Fusedquantized_/decoder3/skip_pop_0/Add_QuantizedOutput_output_grouped
    const uint3 logicalSize_slice_19 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_19 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_19 = uint3(32, 1, 32);
    const uint3 storageSize_slice_19 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_19 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_19 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_19 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_19 = dot(groupStart_slice_19, tensorByteStrides_slice_19);
    const RWBufferStorage storage_slice_19 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_19 = { logicalSize_slice_19, groupStart_slice_19, groupSize_slice_19, storageSize_slice_19, tensorByteStrides_slice_19, paddingBegin_slice_19, paddingEnd_slice_19, threadGroupByteOffsetInTensor_slice_19 + 265420800, storage_slice_19 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_19, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_9_POST


#ifdef MLSR_PASS_10
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // -2, -12, 6, -4, 10, 10, -8, 11, -11, 14, -9, -1, 3, -9, -9, 3, -27, 20, -6, -22, 7, 6, -4, 16, 19, 21, 34, -15, -27, -8, -42, -3
    0xfc06f4fe, 0xbf80a0a, 0xfff70ef5, 0x3f7f703, 0xeafa14e5, 0x10fc0607, 0xf1221513, 0xfdd6f8e5,
    // 5, 7, -5, -16, -17, -5, 0, -16, -4, 14, 8, 1, 9, -28, -23, 13, -3, 9, -2, 7, -4, -6, 3, -16, -6, -22, -40, 16, -2, 6, 35, -10
    0xf0fb0705, 0xf000fbef, 0x1080efc, 0xde9e409, 0x7fe09fd, 0xf003fafc, 0x10d8eafa, 0xf62306fe,
    // -19, -17, -14, 38, 35, -4, 34, 2, -23, 4, -29, 2, 18, 43, -8, -15, 18, 37, 14, -9, -5, -22, -8, 38, 10, -11, -32, -16, -1, 1, -36, 22
    0x26f2efed, 0x222fc23, 0x2e304e9, 0xf1f82b12, 0xf70e2512, 0x26f8eafb, 0xf0e0f50a, 0x16dc01ff,
    // 7, 8, 7, -7, -1, 9, 8, 4, -8, -5, 5, 17, 13, 15, 30, 6, -32, -2, 15, 4, -10, -16, 6, -12, 18, 2, 21, 18, -3, 20, 20, -14
    0xf9070807, 0x40809ff, 0x1105fbf8, 0x61e0f0d, 0x40ffee0, 0xf406f0f6, 0x12150212, 0xf21414fd,
    // 11, 9, 14, -3, 8, 5, 0, 3, -13, 8, -12, 11, 19, 0, 1, 4, -1, 8, -3, 33, -1, -11, 13, -9, 4, -9, -21, 0, 14, 5, 25, -2
    0xfd0e090b, 0x3000508, 0xbf408f3, 0x4010013, 0x21fd08ff, 0xf70df5ff, 0xebf704, 0xfe19050e,
    // -20, -11, -16, 5, -9, -6, 9, -15, 11, 14, 2, -6, -2, 11, 6, 2, -8, 12, -10, -6, -18, -10, -2, 8, 9, 21, 3, -23, -4, 5, -34, 1
    0x5f0f5ec, 0xf109faf7, 0xfa020e0b, 0x2060bfe, 0xfaf60cf8, 0x8fef6ee, 0xe9031509, 0x1de05fc,
    // -7, -22, 1, -13, -5, -6, 6, 27, 2, -25, 39, 11, 10, 13, 33, -17, -15, 7, -2, 18, 56, -8, -67, -4, -23, 30, -17, 25, 1, 6, -4, 6
    0xf301eaf9, 0x1b06fafb, 0xb27e702, 0xef210d0a, 0x12fe07f1, 0xfcbdf838, 0x19ef1ee9, 0x6fc0601,
    // -2, -2, -24, -28, -21, -12, 12, -34, -19, 5, 12, 6, 28, -16, -17, -12, -2, 1, 19, 16, -24, -8, 13, -9, 13, 8, -18, 0, 1, 16, 25, 3
    0xe4e8fefe, 0xde0cf4eb, 0x60c05ed, 0xf4eff01c, 0x101301fe, 0xf70df8e8, 0xee080d, 0x3191001,
    // 19, 15, -12, 11, 9, 14, -19, 7, 14, -2, -17, -19, 6, 12, -3, 2, 13, -7, -6, 6, 0, -2, 2, 7, 2, 1, -4, -8, 13, -4, -20, -1
    0xbf40f13, 0x7ed0e09, 0xedeffe0e, 0x2fd0c06, 0x6faf90d, 0x702fe00, 0xf8fc0102, 0xffecfc0d,
    // -11, 11, 0, -1, -1, -3, 14, 10, 13, -1, -3, -9, 12, -5, 11, -4, -30, -14, 0, -6, 11, -4, 0, -8, 1, 0, 0, -26, 39, -3, 34, 29
    0xff000bf5, 0xa0efdff, 0xf7fdff0d, 0xfc0bfb0c, 0xfa00f2e2, 0xf800fc0b, 0xe6000001, 0x1d22fd27,
    // -22, 1, 6, -5, 10, -7, 7, 13, 14, 2, 1, -11, -1, -6, 7, 2, -12, 6, 4, -12, -3, -7, 6, 1, 6, -3, 1, -8, 21, -10, 25, -4
    0xfb0601ea, 0xd07f90a, 0xf501020e, 0x207faff, 0xf40406f4, 0x106f9fd, 0xf801fd06, 0xfc19f615,
    // -23, -43, 17, 34, -30, 31, 44, -25, 33, 12, -2, -10, 2, -37, 49, 29, -19, 21, 10, -14, -1, -34, 6, 3, 12, 4, -27, -30, 10, -16, 15, -2
    0x2211d5e9, 0xe72c1fe2, 0xf6fe0c21, 0x1d31db02, 0xf20a15ed, 0x306deff, 0xe2e5040c, 0xfe0ff00a,
    // -10, 5, 14, -11, 0, -7, 8, 1, 22, 10, 5, -7, 8, -4, 6, -5, -10, -9, 7, -15, 15, 2, -18, -9, 18, 0, -19, -34, 22, -1, 18, 12
    0xf50e05f6, 0x108f900, 0xf9050a16, 0xfb06fc08, 0xf107f7f6, 0xf7ee020f, 0xdeed0012, 0xc12ff16,
    // -4, 9, -2, 4, 8, -18, -2, 12, 23, -4, -8, -18, 7, -3, -13, 5, -17, -6, -5, 2, 7, -9, 11, 2, 2, 7, -14, 0, 3, -9, 2, 3
    0x4fe09fc, 0xcfeee08, 0xeef8fc17, 0x5f3fd07, 0x2fbfaef, 0x20bf707, 0xf20702, 0x302f703,
    // -11, -7, 2, -15, -1, 7, -17, 13, -6, 24, 22, -9, 11, -3, -12, 8, -17, 0, -20, -6, -8, 1, 8, -12, -2, 13, 19, -1, 10, -9, -4, 2
    0xf102f9f5, 0xdef07ff, 0xf71618fa, 0x8f4fd0b, 0xfaec00ef, 0xf40801f8, 0xff130dfe, 0x2fcf70a,
    // -12, -4, -7, -6, 6, 5, 4, -11, 3, 13, -4, -6, 13, -4, 3, 15, -23, -39, -1, 41, -35, 25, -5, 89, 5, 33, 51, 21, 22, -11, -34, 49
    0xfaf9fcf4, 0xf5040506, 0xfafc0d03, 0xf03fc0d, 0x29ffd9e9, 0x59fb19dd, 0x15332105, 0x31def516,
    // -10, 10, -20, -23, 5, 4, 1, -17, 6, 17, 1, -16, 20, -9, -3, 4, -1, 11, -4, 12, 14, -3, -2, 9, -4, 7, -7, -4, 0, -5, -2, 0
    0xe9ec0af6, 0xef010405, 0xf0011106, 0x4fdf714, 0xcfc0bff, 0x9fefd0e, 0xfcf907fc, 0xfefb00,
    // -9, -15, 10, 11, -4, -12, -18, 6, -1, 9, 5, -11, 11, -1, -4, 7, -9, -7, -5, -12, -10, 1, 6, -13, -13, 16, 0, 7, 3, -9, 0, 2
    0xb0af1f7, 0x6eef4fc, 0xf50509ff, 0x7fcff0b, 0xf4fbf9f7, 0xf30601f6, 0x70010f3, 0x200f703,
    // -10, -1, -7, -7, -2, 1, 4, 13, 23, -4, 7, -8, -7, 5, 2, -19, -15, -11, 7, -31, 13, 1, 8, 39, 19, 5, 30, 2, -7, -5, -20, -19
    0xf9f9fff6, 0xd0401fe, 0xf807fc17, 0xed0205f9, 0xe107f5f1, 0x2708010d, 0x21e0513, 0xedecfbf9,
    // -15, -4, -7, -2, 4, 0, 1, 8, 8, 9, 19, -4, 3, 5, 0, -8, 15, 22, -8, 2, -10, -16, -12, 10, -4, -5, 29, 20, -9, -16, -6, -25
    0xfef9fcf1, 0x8010004, 0xfc130908, 0xf8000503, 0x2f8160f, 0xaf4f0f6, 0x141dfbfc, 0xe7faf0f7,
    // 25, 15, -18, 58, -32, -45, -50, -8, -12, 4, 35, 10, -48, -61, 19, -23, -5, 27, 9, 0, -6, -19, -3, -3, -26, 21, 9, 10, -18, 1, 6, -18
    0x3aee0f19, 0xf8ced3e0, 0xa2304f4, 0xe913c3d0, 0x91bfb, 0xfdfdedfa, 0xa0915e6, 0xee0601ee,
    // -22, -9, 2, 4, -6, -11, -1, -1, 19, 6, 0, -3, -9, 4, 9, -10, -1, 13, 9, -6, -2, -23, 30, -25, 14, 19, -12, 21, -10, -21, 11, -20
    0x402f7ea, 0xfffff5fa, 0xfd000613, 0xf60904f7, 0xfa090dff, 0xe71ee9fe, 0x15f4130e, 0xec0bebf6,
    // -10, 17, 2, 5, 4, -4, 10, 1, 15, 10, 2, -7, 0, 8, 4, -6, 6, 3, -6, 3, 12, 1, 5, -20, -14, -5, -2, 26, 7, -16, -2, 4
    0x50211f6, 0x10afc04, 0xf9020a0f, 0xfa040800, 0x3fa0306, 0xec05010c, 0x1afefbf2, 0x4fef007,
    // -11, 21, -12, 20, -5, -23, 19, -47, -2, -9, 1, 9, -15, -15, -7, -11, 14, 33, 16, -10, -1, -11, -7, 11, -7, -4, -42, -2, -14, 0, -21, 15
    0x14f415f5, 0xd113e9fb, 0x901f7fe, 0xf5f9f1f1, 0xf610210e, 0xbf9f5ff, 0xfed6fcf9, 0xfeb00f2,
    // -1, 6, -3, -13, 4, 4, -14, 2, 2, -33, -7, -4, -20, 0, -11, 10, 19, -46, -4, 10, -36, 22, -2, 64, 35, 33, -3, -46, -41, -26, -7, 18
    0xf3fd06ff, 0x2f20404, 0xfcf9df02, 0xaf500ec, 0xafcd213, 0x40fe16dc, 0xd2fd2123, 0x12f9e6d7,
    // 16, -1, 13, -17, 2, 13, 10, -10, -3, -11, 7, 25, -8, -13, -2, 7, -10, -7, 1, -4, -13, 1, -3, -7, -8, -14, -11, 17, -11, 10, 30, 1
    0xef0dff10, 0xf60a0d02, 0x1907f5fd, 0x7fef3f8, 0xfc01f9f6, 0xf9fd01f3, 0x11f5f2f8, 0x11e0af5,
    // -11, 34, -6, 3, 16, 7, -1, 0, 8, -11, 12, -11, -15, 15, 4, -21, 21, 8, 8, 7, 19, -3, -12, 12, 3, -7, 2, 0, 4, -1, 3, 10
    0x3fa22f5, 0xff0710, 0xf50cf508, 0xeb040ff1, 0x7080815, 0xcf4fd13, 0x2f903, 0xa03ff04,
    // -2, -1, -13, 4, 4, 9, -4, 0, -3, -3, 5, -8, -15, 8, -4, -9, -31, -12, -4, -15, 16, 25, 0, 6, -22, -20, 28, -15, 0, 22, -25, 23
    0x4f3fffe, 0xfc0904, 0xf805fdfd, 0xf7fc08f1, 0xf1fcf4e1, 0x6001910, 0xf11cecea, 0x17e71600,
    // -15, 2, -12, 5, -7, 7, -8, -4, -12, 3, 15, -10, -5, 15, -10, 1, 0, 0, -4, -11, 15, 25, 5, 7, 2, -35, 14, -1, -10, 13, -26, -3
    0x5f402f1, 0xfcf807f9, 0xf60f03f4, 0x1f60ffb, 0xf5fc0000, 0x705190f, 0xff0edd02, 0xfde60df6,
    // -33, 16, 6, 24, 4, 33, 3, -55, 32, -19, -9, 21, -26, -15, -1, 55, -19, 9, -1, -27, -2, 21, 29, -22, -11, -5, -3, -5, -11, 15, -30, 19
    0x180610df, 0xc9032104, 0x15f7ed20, 0x37fff1e6, 0xe5ff09ed, 0xea1d15fe, 0xfbfdfbf5, 0x13e20ff5,
    // -6, -17, 0, 3, -1, 1, -8, -2, 1, -12, -2, 4, -13, -2, -2, -9, 1, 18, -5, 2, 2, 3, -4, -14, -18, -22, -25, -11, -3, 10, -14, 14
    0x300effa, 0xfef801ff, 0x4fef401, 0xf7fefef3, 0x2fb1201, 0xf2fc0302, 0xf5e7eaee, 0xef20afd,
    // -3, 18, -11, 3, -4, -3, 3, -8, -13, -8, -6, -7, -2, 7, -8, -4, -2, -9, 14, -6, -4, 2, 10, 5, -5, 17, 19, 1, 1, 6, -12, 3
    0x3f512fd, 0xf803fdfc, 0xf9faf8f3, 0xfcf807fe, 0xfa0ef7fe, 0x50a02fc, 0x11311fb, 0x3f40601,
    // 9, 31, -19, 14, -8, 5, -7, -22, 1, 11, -11, -29, 5, 7, -9, -5, 11, 8, 3, 3, -13, -3, 7, -3, -4, -1, -7, -6, 13, 2, -3, 1
    0xeed1f09, 0xeaf905f8, 0xe3f50b01, 0xfbf70705, 0x303080b, 0xfd07fdf3, 0xfaf9fffc, 0x1fd020d,
    // -7, -15, 17, 13, -19, -24, 21, -23, -13, -1, -30, 22, -4, -13, -6, -8, 17, 5, -33, 17, -5, 89, -51, -39, 6, 22, 9, 19, 16, -61, 27, -12
    0xd11f1f9, 0xe915e8ed, 0x16e2fff3, 0xf8faf3fc, 0x11df0511, 0xd9cd59fb, 0x13091606, 0xf41bc310,
    // 21, 5, -15, 15, 21, -8, -10, 21, -9, -23, 12, -13, 9, 1, -5, -10, 13, 0, -5, 6, 17, 19, -8, 28, 11, -10, 20, -17, 11, 14, -8, -14
    0xff10515, 0x15f6f815, 0xf30ce9f7, 0xf6fb0109, 0x6fb000d, 0x1cf81311, 0xef14f60b, 0xf2f80e0b,
    // -19, -27, 8, -6, -8, 5, 11, 14, 22, -1, 22, -13, -14, 16, 15, 4, -9, -10, 18, -2, -5, 17, 17, -10, -9, 13, 2, 13, 0, 16, 20, -10
    0xfa08e5ed, 0xe0b05f8, 0xf316ff16, 0x40f10f2, 0xfe12f6f7, 0xf61111fb, 0xd020df7, 0xf6141000,
    // -26, -1, -8, 2, -5, 7, 7, 20, 7, -11, 1, 5, 5, 4, 25, -4, 6, -2, -7, 32, -8, -2, 26, -31, -14, -16, -21, 35, 16, -6, 26, -28
    0x2f8ffe6, 0x140707fb, 0x501f507, 0xfc190405, 0x20f9fe06, 0xe11afef8, 0x23ebf0f2, 0xe41afa10,
    // -18, 24, 1, 24, -4, -5, -8, 1, 6, -3, -17, -14, -20, 5, -4, -1, -7, 13, -6, -2, -39, -3, -7, 12, 12, -2, -29, -2, -14, 25, 24, -15
    0x180118ee, 0x1f8fbfc, 0xf2effd06, 0xfffc05ec, 0xfefa0df9, 0xcf9fdd9, 0xfee3fe0c, 0xf11819f2,
    // -40, 24, 35, -24, 13, 16, 59, 2, -17, 52, 41, 14, -7, -5, -1, -31, -10, 10, -25, 8, -11, -6, -9, -5, 4, -5, 34, 2, 11, -8, -28, 6
    0xe82318d8, 0x23b100d, 0xe2934ef, 0xe1fffbf9, 0x8e70af6, 0xfbf7faf5, 0x222fb04, 0x6e4f80b,
    // 8, 6, -2, 9, 6, 18, -17, 15, 18, -5, 21, -15, -1, 5, -5, -13, 8, -24, 16, 0, 5, 6, -6, 29, 3, -19, 15, 17, 3, -11, -29, -22
    0x9fe0608, 0xfef1206, 0xf115fb12, 0xf3fb05ff, 0x10e808, 0x1dfa0605, 0x110fed03, 0xeae3f503,
    // -10, -14, -2, -14, -9, 3, 2, -12, 0, 12, -1, 3, -2, -20, -11, -6, -11, -4, -15, -24, 8, 0, 8, 2, -9, 20, 3, 6, 1, -14, -7, 10
    0xf2fef2f6, 0xf40203f7, 0x3ff0c00, 0xfaf5ecfe, 0xe8f1fcf5, 0x2080008, 0x60314f7, 0xaf9f201,
    // 2, -2, -8, -9, 13, -15, -1, -16, -6, 9, 8, -4, -8, -11, -3, 8, -1, 14, 1, -7, 2, -9, 7, -3, -17, 14, -15, 3, 15, -1, 5, 11
    0xf7f8fe02, 0xf0fff10d, 0xfc0809fa, 0x8fdf5f8, 0xf9010eff, 0xfd07f702, 0x3f10eef, 0xb05ff0f,
    // 0, 6, -3, -11, 12, 4, 2, 12, 18, 8, -12, -10, -10, -26, -2, 9, 21, 0, -26, -81, 95, -70, 13, -12, -3, -9, -16, -35, -35, -40, -13, 6
    0xf5fd0600, 0xc02040c, 0xf6f40812, 0x9fee6f6, 0xafe60015, 0xf40dba5f, 0xddf0f7fd, 0x6f3d8dd,
    // 5, 0, -6, -2, 9, 9, 8, -13, -7, 16, 8, 5, 9, -5, 8, 20, 6, 4, -21, -8, 12, 8, -16, 20, -4, -11, 1, -10, -3, -10, 2, 4
    0xfefa0005, 0xf3080909, 0x50810f9, 0x1408fb09, 0xf8eb0406, 0x14f0080c, 0xf601f5fc, 0x402f6fd,
    // -11, -2, 2, 7, 7, -15, -9, 11, 18, -2, 5, -19, -13, -9, 7, 5, -13, 4, -1, -12, 6, 2, 12, -1, -3, 12, -5, 6, 3, -8, 20, -2
    0x702fef5, 0xbf7f107, 0xed05fe12, 0x507f7f3, 0xf4ff04f3, 0xff0c0206, 0x6fb0cfd, 0xfe14f803,
    // 7, -10, -13, 1, -9, -4, 9, 2, 6, 1, 0, 3, -10, 12, 14, 7, 19, -27, -27, -11, 10, -12, 16, 6, 3, 29, -2, -16, 10, 17, 3, 9
    0x1f3f607, 0x209fcf7, 0x3000106, 0x70e0cf6, 0xf5e5e513, 0x610f40a, 0xf0fe1d03, 0x903110a,
    // 10, -15, -14, 6, 5, 0, 8, -3, 1, 7, 6, 2, -9, 14, 0, -3, 25, -19, -18, 4, -20, -32, 24, -19, -4, 9, -15, 3, -11, 11, 6, 9
    0x6f2f10a, 0xfd080005, 0x2060701, 0xfd000ef7, 0x4eeed19, 0xed18e0ec, 0x3f109fc, 0x9060bf5,
    // 28, -10, -19, 35, 5, 27, 59, 30, 8, -4, -14, -19, -23, 41, -23, 12, 32, -11, -24, 6, -1, -26, 26, 3, -4, 23, -9, -12, -5, 18, -19, 8
    0x23edf61c, 0x1e3b1b05, 0xedf2fc08, 0xce929e9, 0x6e8f520, 0x31ae6ff, 0xf4f717fc, 0x8ed12fb,
    // 13, 0, -5, 12, -6, -2, 2, -1, 2, 3, 3, 7, -4, 15, 1, -2, 21, -29, -14, -8, 0, -12, 4, -4, -5, 17, -2, -7, 1, 14, -3, 19
    0xcfb000d, 0xff02fefa, 0x7030302, 0xfe010ffc, 0xf8f2e315, 0xfc04f400, 0xf9fe11fb, 0x13fd0e01,
    // 17, -5, -5, 1, -3, -11, 15, -3, -1, 14, 1, 6, -9, 9, -7, -9, 9, 15, 1, 4, -9, -11, 15, -20, -5, 11, 8, 9, 12, -7, -15, -1
    0x1fbfb11, 0xfd0ff5fd, 0x6010eff, 0xf7f909f7, 0x4010f09, 0xec0ff5f7, 0x9080bfb, 0xfff1f90c,
    // -1, 27, -5, 0, -8, -24, 11, -21, 9, -3, -23, 0, 14, -7, 1, 19, -2, 6, 11, 3, 9, -14, 6, 19, 11, -16, -25, -9, 7, 12, 11, -5
    0xfb1bff, 0xeb0be8f8, 0xe9fd09, 0x1301f90e, 0x30b06fe, 0x1306f209, 0xf7e7f00b, 0xfb0b0c07,
    // -13, -22, 29, 4, -3, -17, -6, -22, -5, -2, -11, -5, -16, -12, -16, -13, -36, 32, 21, -22, -43, -16, -25, 10, -64, -6, -6, 30, -10, 39, -12, 46
    0x41deaf3, 0xeafaeffd, 0xfbf5fefb, 0xf3f0f4f0, 0xea1520dc, 0xae7f0d5, 0x1efafac0, 0x2ef427f6,
    // -7, 5, -1, 16, 32, -24, 4, 18, -9, 7, -3, -14, 9, 5, 17, -15, 4, -9, 4, 5, -1, -9, -5, -11, 2, -7, -12, -3, -4, -12, -11, -12
    0x10ff05f9, 0x1204e820, 0xf2fd07f7, 0xf1110509, 0x504f704, 0xf5fbf7ff, 0xfdf4f902, 0xf4f5f4fc,
    // -13, -12, -1, -4, 18, -17, -21, 28, 33, -19, 6, -13, -5, 11, -16, 9, -25, -9, 2, -7, 2, 0, 12, -4, 4, 7, 14, 10, -4, 21, 13, -10
    0xfcfff4f3, 0x1cebef12, 0xf306ed21, 0x9f00bfb, 0xf902f7e7, 0xfc0c0002, 0xa0e0704, 0xf60d15fc,
    // 5, 6, 1, -11, 0, -7, -4, -12, -9, 13, 12, -4, 12, -5, -9, -3, -18, 35, -8, -9, -2, -1, 5, 3, 5, 16, -15, -7, 1, 3, -6, 1
    0xf5010605, 0xf4fcf900, 0xfc0c0df7, 0xfdf7fb0c, 0xf7f823ee, 0x305fffe, 0xf9f11005, 0x1fa0301,
    // -4, -9, 1, -15, 6, -1, 9, 5, -5, 12, 3, 9, 18, -1, 4, -5, 1, 9, -12, -22, 30, 35, -3, 34, 10, 4, 37, 11, 5, -12, -47, -10
    0xf101f7fc, 0x509ff06, 0x9030cfb, 0xfb04ff12, 0xeaf40901, 0x22fd231e, 0xb25040a, 0xf6d1f405,
    // -22, -22, -30, 23, -21, 17, 69, 4, 2, 1, -9, 18, 47, 19, 2, -24, -20, -10, 7, -6, 20, 3, 33, -11, 6, 10, 3, 33, 12, -9, 13, -15
    0x17e2eaea, 0x44511eb, 0x12f70102, 0xe802132f, 0xfa07f6ec, 0xf5210314, 0x21030a06, 0xf10df70c,
    // -5, -5, 5, -6, -8, -10, 2, -2, 3, 9, -9, 2, 14, -1, 1, -4, 6, 38, -25, 9, 19, 11, -6, 19, 21, 0, -17, -10, 7, 15, -6, -9
    0xfa05fbfb, 0xfe02f6f8, 0x2f70903, 0xfc01ff0e, 0x9e72606, 0x13fa0b13, 0xf6ef0015, 0xf7fa0f07,
    // -8, 4, -4, 8, 7, 1, 1, 7, 0, -2, 3, 5, 8, 14, 14, -7, -7, 2, -1, 0, 0, 2, 6, 15, 24, -8, 2, 7, -6, 0, 1, -16
    0x8fc04f8, 0x7010107, 0x503fe00, 0xf90e0e08, 0xff02f9, 0xf060200, 0x702f818, 0xf00100fa,
    // -7, -12, -9, 0, 6, 16, -7, -4, 41, 5, -27, 1, 4, -6, 17, 26, 0, 4, 1, 9, -5, -5, 6, 1, 19, -4, -10, 12, -2, -1, -3, -18
    0xf7f4f9, 0xfcf91006, 0x1e50529, 0x1a11fa04, 0x9010400, 0x106fbfb, 0xcf6fc13, 0xeefdfffe,
    // -9, 3, -8, -6, 13, 9, 30, -18, 64, 1, -32, 11, -6, 8, -10, 13, -32, -7, -6, -8, 19, 19, -54, 11, 55, -14, -15, 3, -9, 16, -14, 30
    0xfaf803f7, 0xee1e090d, 0xbe00140, 0xdf608fa, 0xf8faf9e0, 0xbca1313, 0x3f1f237, 0x1ef210f7,
    // -9, -13, -6, -5, 12, 30, 35, -2, 56, -3, 5, 31, -1, 3, -12, 13, -2, -5, -4, 6, 0, -2, -1, 6, 11, -1, -1, 13, -4, -2, -8, -13
    0xfbfaf3f7, 0xfe231e0c, 0x1f05fd38, 0xdf403ff, 0x6fcfbfe, 0x6fffe00, 0xdffff0b, 0xf3f8fefc,
    // -11, -28, -2, -13, 6, -6, -1, -12, 35, 15, -13, 10, 7, 2, 7, 30, 1, 0, 1, -7, -8, -4, 8, 2, 14, 11, 4, 20, 3, 2, 1, -18
    0xf3fee4f5, 0xf4fffa06, 0xaf30f23, 0x1e070207, 0xf9010001, 0x208fcf8, 0x14040b0e, 0xee010203,
    // 0, -14, 3, -5, 2, 6, -1, 8, -5, 2, -2, -3, -1, -1, -4, -3, 15, -13, -12, 9, -3, -10, 16, -22, 3, 4, 18, 3, 1, -3, 0, 15
    0xfb03f200, 0x8ff0602, 0xfdfe02fb, 0xfdfcffff, 0x9f4f30f, 0xea10f6fd, 0x3120403, 0xf00fd01,
    // 18, -2, 5, 0, -11, -3, 2, -5, -5, 0, -12, -2, 5, 8, -10, 8, 23, 3, -19, -24, 7, 32, -15, 53, -8, 37, 10, -17, -4, -3, -21, -12
    0x5fe12, 0xfb02fdf5, 0xfef400fb, 0x8f60805, 0xe8ed0317, 0x35f12007, 0xef0a25f8, 0xf4ebfdfc,
    // -46, -128, 40, -17, -63, -52, -16, -54, 5, 13, 26, 34, 17, 13, 18, 11, 18, -20, 9, 5, -6, 10, 3, 3, -16, -3, 13, 20, 1, 5, -3, -2
    0xef2880d2, 0xcaf0ccc1, 0x221a0d05, 0xb120d11, 0x509ec12, 0x3030afa, 0x140dfdf0, 0xfefd0501,
    // 6, -6, -6, -1, 7, 7, 1, 12, -2, -7, 12, -1, 4, 11, 2, -5, -1, -17, -6, -1, 5, 2, -8, 12, 5, 7, 16, -10, -13, 18, -5, 2
    0xfffafa06, 0xc010707, 0xff0cf9fe, 0xfb020b04, 0xfffaefff, 0xcf80205, 0xf6100705, 0x2fb12f3,
    // 11, 4, 11, 10, -3, -1, -4, 12, 0, 6, 0, -6, 9, 16, 1, 1, 7, -7, 17, -1, 2, 3, -6, 2, 2, -8, 4, -5, -2, -3, 1, -4
    0xa0b040b, 0xcfcfffd, 0xfa000600, 0x1011009, 0xff11f907, 0x2fa0302, 0xfb04f802, 0xfc01fdfe,
    // -5, 2, 17, -4, 9, 6, 13, 0, -1, -27, 26, 3, 6, -4, 3, -11, 2, -25, -11, -9, 3, 11, 2, -18, -6, -3, 24, 7, 9, -11, 8, -6
    0xfc1102fb, 0xd0609, 0x31ae5ff, 0xf503fc06, 0xf7f5e702, 0xee020b03, 0x718fdfa, 0xfa08f509,
    // 19, -1, 18, -6, -4, 9, 12, 7, -11, -17, 19, 9, 0, -1, 25, -22, -17, -2, 50, -25, 32, 0, -13, 61, 26, -54, 19, -8, -38, 15, -23, 21
    0xfa12ff13, 0x70c09fc, 0x913eff5, 0xea19ff00, 0xe732feef, 0x3df30020, 0xf813ca1a, 0x15e90fda,
    // 13, 7, -5, -7, 1, 16, 14, -36, -24, -1, -15, 11, 7, -15, 32, -30, 15, 9, 18, 1, 3, 6, 1, 1, 4, -15, 0, -6, 3, -5, 22, -5
    0xf9fb070d, 0xdc0e1001, 0xbf1ffe8, 0xe220f107, 0x112090f, 0x1010603, 0xfa00f104, 0xfb16fb03,
    // 3, 5, 18, 3, -4, 8, 14, 13, 8, -27, 13, -4, -4, 13, 20, -5, 6, -15, 14, -14, -5, 23, 9, -12, -11, -8, 11, 7, -7, -1, 22, -8
    0x3120503, 0xd0e08fc, 0xfc0de508, 0xfb140dfc, 0xf20ef106, 0xf40917fb, 0x70bf8f5, 0xf816fff9,
};
static const uint embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // -0.000149, -0.0001874, -0.0001615, 0.0001323, 0.0004375, -6.783e-05, -0.00064, -0.0001035, 0.0004237, -0.0004573, -9.33e-05, -0.0003974, -0.0001944, -0.0003908, 0.0003574, 0.0007086
    0x8a2488e2, 0x856894b, 0x84720f2b, 0x86c8913e, 0x8f7e0ef1, 0x8e83861d, 0x8e678a5f, 0x11ce0ddb,
};
static const uint embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 47, 25, -15, -30, 39, -43, -17, 62, -52, 38, -7, -11, -83, 16, -61, -55, 38, 42, -51, 24, -1, -7, -6, 50, 27, -5, -32, 16, 41, 57, -43, -17
    0xe2f1192f, 0x3eefd527, 0xf5f926cc, 0xc9c310ad, 0x18cd2a26, 0x32faf9ff, 0x10e0fb1b, 0xefd53929,
    // -9, 31, -36, -73, 16, -34, -8, -37, -17, 84, 3, 10, -10, 5, -21, 18, 18, 29, 52, -1, 19, -63, -10, 17, -83, 16, -25, -17, -14, 29, -34, -73
    0xb7dc1ff7, 0xdbf8de10, 0xa0354ef, 0x12eb05f6, 0xff341d12, 0x11f6c113, 0xefe710ad, 0xb7de1df2,
    // 0, -3, 2, -1, 25, 27, 20, -19, -39, -13, -15, 44, -81, 1, 18, 23, 13, -32, -43, 8, 43, -50, 26, 35, 20, 52, -6, -8, -22, 7, 36, -65
    0xff02fd00, 0xed141b19, 0x2cf1f3d9, 0x171201af, 0x8d5e00d, 0x231ace2b, 0xf8fa3414, 0xbf2407ea,
    // -75, 77, 5, -24, 7, 89, 56, -115, -18, -11, -107, 1, 66, -5, 2, 21, -38, -21, 22, -8, -23, 25, -8, 16, 61, -18, -30, -47, 31, -2, -40, 35
    0xe8054db5, 0x8d385907, 0x195f5ee, 0x1502fb42, 0xf816ebda, 0x10f819e9, 0xd1e2ee3d, 0x23d8fe1f,
    // -22, 12, -12, 2, 1, -4, 71, 54, -4, -38, -5, -3, 10, 19, 4, 18, 75, -17, -40, 7, -26, -28, -9, 35, -36, 36, -52, 20, -15, -13, 49, 56
    0x2f40cea, 0x3647fc01, 0xfdfbdafc, 0x1204130a, 0x7d8ef4b, 0x23f7e4e6, 0x14cc24dc, 0x3831f3f1,
    // 1, -11, 1, 2, -18, -15, 34, 11, 14, 12, -22, -13, 24, -22, 7, -38, -28, -35, -37, -21, 12, -1, -20, 35, 43, -41, 33, 4, -10, -84, 30, 6
    0x201f501, 0xb22f1ee, 0xf3ea0c0e, 0xda07ea18, 0xebdbdde4, 0x23ecff0c, 0x421d72b, 0x61eacf6,
    // -48, -81, -22, -5, -36, -26, -14, 2, -68, 13, -14, 48, 57, 21, 13, -39, -64, 19, 17, -7, 1, -6, -11, 8, -26, -45, 14, -45, -52, 22, 34, -3
    0xfbeaafd0, 0x2f2e6dc, 0x30f20dbc, 0xd90d1539, 0xf91113c0, 0x8f5fa01, 0xd30ed3e6, 0xfd2216cc,
    // 39, -101, 20, -26, 28, 25, 9, -61, 60, -4, -50, 30, -88, -29, 31, 21, -42, 35, 12, 0, 15, 23, 29, 30, 37, -22, -22, -10, 50, -13, -44, 63
    0xe6149b27, 0xc309191c, 0x1ecefc3c, 0x151fe3a8, 0xc23d6, 0x1e1d170f, 0xf6eaea25, 0x3fd4f332,
    // -13, -2, 15, 2, -75, 7, 26, 8, -43, -24, -5, -9, -27, 32, 4, 6, 63, 10, -77, 38, 11, -1, 18, 79, -45, 35, 34, 35, -20, 9, 48, 0
    0x20ffef3, 0x81a07b5, 0xf7fbe8d5, 0x60420e5, 0x26b30a3f, 0x4f12ff0b, 0x232223d3, 0x3009ec,
    // -97, -2, -18, 1, 50, -55, 11, -57, 72, -15, 20, 12, -40, 4, -41, -24, -48, -2, 15, -8, -6, 14, -3, -16, -17, -50, 3, -45, 12, 2, 34, 34
    0x1eefe9f, 0xc70bc932, 0xc14f148, 0xe8d704d8, 0xf80ffed0, 0xf0fd0efa, 0xd303ceef, 0x2222020c,
    // 2, -38, -5, -18, -38, 22, 37, -7, 22, 2, 23, -34, 20, -27, -19, 12, 17, -8, 80, 38, 11, -20, -11, -71, 21, 15, -10, -2, -12, -27, -25, -21
    0xeefbda02, 0xf92516da, 0xde170216, 0xcede514, 0x2650f811, 0xb9f5ec0b, 0xfef60f15, 0xebe7e5f4,
    // -11, 27, -7, -5, -45, 36, -94, 50, 64, -23, 9, 59, -105, 23, -21, -25, -52, 20, -27, 11, -29, -20, -9, 30, 3, 8, 19, -1, -28, 16, -47, -8
    0xfbf91bf5, 0x32a224d3, 0x3b09e940, 0xe7eb1797, 0xbe514cc, 0x1ef7ece3, 0xff130803, 0xf8d110e4,
    // 8, 6, -5, 4, 40, -15, -51, -10, 26, 9, 12, 12, 19, -54, -2, -2, -37, -1, 35, -2, -40, 20, 9, -42, 35, 4, -34, 21, 8, -20, -79, -40
    0x4fb0608, 0xf6cdf128, 0xc0c091a, 0xfefeca13, 0xfe23ffdb, 0xd60914d8, 0x15de0423, 0xd8b1ec08,
    // 3, 3, 30, -17, 19, -6, -16, 8, 10, -22, 1, 12, 13, 6, 2, 33, 85, -36, -41, 6, 43, -8, 13, -22, -22, 47, -43, 21, 5, -37, -24, -31
    0xef1e0303, 0x8f0fa13, 0xc01ea0a, 0x2102060d, 0x6d7dc55, 0xea0df82b, 0x15d52fea, 0xe1e8db05,
    // -20, -34, 60, 45, 24, 50, -17, 24, 3, -56, 44, -19, 52, 7, -7, 10, -17, 9, 59, -44, 8, 15, 73, 25, 28, -3, -17, -42, 59, -6, 23, 70
    0x2d3cdeec, 0x18ef3218, 0xed2cc803, 0xaf90734, 0xd43b09ef, 0x19490f08, 0xd6effd1c, 0x4617fa3b,
    // -14, 1, -35, 10, -32, -4, 13, 7, -5, -12, -21, -20, -17, -13, -24, 6, 5, 45, -55, 7, -9, 92, 16, 47, -8, -11, 48, -25, 16, -17, -58, 8
    0xadd01f2, 0x70dfce0, 0xecebf4fb, 0x6e8f3ef, 0x7c92d05, 0x2f105cf7, 0xe730f5f8, 0x8c6ef10,
    // -25, 19, -1, 43, 64, 31, -25, 2, -14, 13, -36, 18, -64, -27, -44, 73, -52, 27, -13, 21, 4, 34, -25, 17, 45, -13, -35, -8, 40, 32, -89, 19
    0x2bff13e7, 0x2e71f40, 0x12dc0df2, 0x49d4e5c0, 0x15f31bcc, 0x11e72204, 0xf8ddf32d, 0x13a72028,
    // 46, 2, -57, -28, 10, -1, -7, 5, 12, -9, 21, -27, 35, 29, -54, -41, 11, -22, -26, 28, 6, 20, 29, 2, 32, -32, 56, 30, -11, -14, -71, 22
    0xe4c7022e, 0x5f9ff0a, 0xe515f70c, 0xd7ca1d23, 0x1ce6ea0b, 0x21d1406, 0x1e38e020, 0x16b9f2f5,
    // -10, -7, -55, 1, -16, 5, 47, 8, -4, -13, 25, -12, -4, -26, 17, -9, -86, 32, 76, 5, 40, -37, 11, -41, 34, -82, -37, -104, 8, 29, 31, 17
    0x1c9f9f6, 0x82f05f0, 0xf419f3fc, 0xf711e6fc, 0x54c20aa, 0xd70bdb28, 0x98dbae22, 0x111f1d08,
    // -6, 15, -35, 18, 5, -3, 29, 20, -10, -26, -4, 8, -6, 5, 5, -24, -11, 42, -10, 68, -20, -51, 6, 38, -35, 59, -40, -35, 35, -12, 21, -24
    0x12dd0ffa, 0x141dfd05, 0x8fce6f6, 0xe80505fa, 0x44f62af5, 0x2606cdec, 0xddd83bdd, 0xe815f423,
    // -38, 49, 34, -18, 50, -33, -19, 68, -43, -27, -53, 9, -48, 16, 14, 3, -80, -20, -52, 2, 13, -10, -16, 35, 13, -2, -11, -45, -2, 7, 31, -82
    0xee2231da, 0x44eddf32, 0x9cbe5d5, 0x30e10d0, 0x2ccecb0, 0x23f0f60d, 0xd3f5fe0d, 0xae1f07fe,
    // -6, 48, 42, 27, 36, -26, -4, 33, -26, 43, -14, 23, -12, -7, 3, -15, 47, 37, -41, 8, -1, 84, 2, 58, -75, 11, 9, 28, -3, 22, 8, 1
    0x1b2a30fa, 0x21fce624, 0x17f22be6, 0xf103f9f4, 0x8d7252f, 0x3a0254ff, 0x1c090bb5, 0x10816fd,
    // -16, 48, 1, 5, 44, -63, 10, -51, -96, 11, -38, -58, 50, -35, 76, 23, 2, 25, -58, 10, 5, 4, 24, 47, 63, -29, -10, -32, 9, 20, -27, 44
    0x50130f0, 0xcd0ac12c, 0xc6da0ba0, 0x174cdd32, 0xac61902, 0x2f180405, 0xe0f6e33f, 0x2ce51409,
    // 109, -75, -12, 7, 63, -106, 26, 22, -47, -30, -89, -54, -20, 9, -58, 2, -31, -18, 12, -19, -5, 21, -10, 20, 8, -36, -1, -23, -4, 17, -1, 31
    0x7f4b56d, 0x161a963f, 0xcaa7e2d1, 0x2c609ec, 0xed0ceee1, 0x14f615fb, 0xe9ffdc08, 0x1fff11fc,
    // -78, 56, 2, 14, -19, 51, -33, -32, 24, 6, -17, 64, 15, -3, 101, 27, -22, -18, -41, -5, -18, -10, 14, 38, 32, -3, 0, 0, -25, 14, -31, 58
    0xe0238b2, 0xe0df33ed, 0x40ef0618, 0x1b65fd0f, 0xfbd7eeea, 0x260ef6ee, 0xfd20, 0x3ae10ee7,
    // -6, -6, -4, 13, -7, 7, 35, 11, 10, -19, -24, 11, -12, -11, 2, -15, -85, -50, -67, -2, 10, 30, 48, 48, -13, -6, -11, 59, -13, -23, -10, 73
    0xdfcfafa, 0xb2307f9, 0xbe8ed0a, 0xf102f5f4, 0xfebdceab, 0x30301e0a, 0x3bf5faf3, 0x49f6e9f3,
    // -72, 49, -14, -12, -62, 96, -19, 27, 123, 12, -85, 82, 18, 6, 6, 26, -20, -16, 2, -7, -29, 21, -6, 3, -25, -12, -5, -30, -1, 3, 7, 29
    0xf4f231b8, 0x1bed60c2, 0x52ab0c7b, 0x1a060612, 0xf902f0ec, 0x3fa15e3, 0xe2fbf4e7, 0x1d0703ff,
    // 13, -25, -2, -29, 4, 26, 10, -7, 11, -17, -19, -14, -6, 12, -8, -12, 13, 13, -39, 11, 63, -70, -3, -58, 72, 23, -50, -40, 82, 65, -30, 61
    0xe3fee70d, 0xf90a1a04, 0xf2edef0b, 0xf4f80cfa, 0xbd90d0d, 0xc6fdba3f, 0xd8ce1748, 0x3de24152,
    // 15, -11, 13, -24, -32, -20, 43, -29, -9, 38, 13, 18, 26, -6, -6, -2, -86, 46, -19, -9, 11, -28, 6, 53, 47, 13, 13, 8, 25, -67, -87, 36
    0xe80df50f, 0xe32bece0, 0x120d26f7, 0xfefafa1a, 0xf7ed2eaa, 0x3506e40b, 0x80d0d2f, 0x24a9bd19,
    // 24, 51, 61, -27, -80, 12, -35, 7, -76, -16, -33, 21, -56, 102, -107, -103, -61, 2, 7, -11, -43, -5, -41, 16, 18, -42, -31, -31, -35, 34, -51, -23
    0xe53d3318, 0x7dd0cb0, 0x15dff0b4, 0x999566c8, 0xf50702c3, 0x10d7fbd5, 0xe1e1d612, 0xe9cd22dd,
    // 50, 93, 14, 35, -31, -9, 15, -20, 38, 4, 20, -45, -32, 25, -1, 3, -34, 24, 9, -15, -9, 10, 10, 10, -6, -37, -7, -30, -20, 5, 36, 41
    0x230e5d32, 0xec0ff7e1, 0xd3140426, 0x3ff19e0, 0xf10918de, 0xa0a0af7, 0xe2f9dbfa, 0x292405ec,
    // 24, 0, 18, -17, -3, -10, -5, -31, 12, 33, 1, 14, 16, 9, -22, 4, 78, -49, 3, -57, -30, -32, 48, 42, 51, 28, 19, 10, -43, 35, 18, -27
    0xef120018, 0xe1fbf6fd, 0xe01210c, 0x4ea0910, 0xc703cf4e, 0x2a30e0e2, 0xa131c33, 0xe51223d5,
    // 25, 9, -51, -21, 115, -6, -85, 4, 52, -21, -18, 21, 3, -91, -5, -2, -99, -15, -5, 9, 11, 33, -36, -27, 57, -21, 12, 9, 17, -23, -76, 8
    0xebcd0919, 0x4abfa73, 0x15eeeb34, 0xfefba503, 0x9fbf19d, 0xe5dc210b, 0x90ceb39, 0x8b4e911,
    // -26, 6, 2, 69, 31, 33, 64, 37, -14, 23, -2, -12, -16, 12, -20, -10, 2, -17, -36, 28, 9, 4, -31, 6, -80, -45, 55, -54, -48, 35, -27, -4
    0x450206e6, 0x2540211f, 0xf4fe17f2, 0xf6ec0cf0, 0x1cdcef02, 0x6e10409, 0xca37d3b0, 0xfce523d0,
    // -3, 9, 13, 18, -17, -29, -18, -12, -5, 2, 7, -10, 0, -45, -27, 29, -17, 50, 79, 0, -23, 20, -43, 73, -46, -9, -19, 8, -73, -45, 1, 0
    0x120d09fd, 0xf4eee3ef, 0xf60702fb, 0x1de5d300, 0x4f32ef, 0x49d514e9, 0x8edf7d2, 0x1d3b7,
    // -32, 16, -8, -19, 41, 24, -2, 33, -27, 8, 7, -4, -55, 33, 17, 27, 22, -35, -57, -21, 8, 15, -95, 48, 4, -57, -34, -24, 9, 25, 53, 50
    0xedf810e0, 0x21fe1829, 0xfc0708e5, 0x1b1121c9, 0xebc7dd16, 0x30a10f08, 0xe8dec704, 0x32351909,
    // -27, -7, 36, 81, -20, -39, 16, -32, -11, 70, -29, -9, 42, 98, 100, 43, -47, -14, 11, -35, -35, 19, -40, -2, 11, -57, -6, -40, -4, 12, -19, 23
    0x5124f9e5, 0xe010d9ec, 0xf7e346f5, 0x2b64622a, 0xdd0bf2d1, 0xfed813dd, 0xd8fac70b, 0x17ed0cfc,
    // 7, -17, 69, -9, -10, -11, 7, 28, 22, 45, -11, -54, 31, 44, 47, -82, -17, 4, 35, -17, 9, -26, -21, 2, 10, -3, -53, -18, -26, 50, -32, -35
    0xf745ef07, 0x1c07f5f6, 0xcaf52d16, 0xae2f2c1f, 0xef2304ef, 0x2ebe609, 0xeecbfd0a, 0xdde032e6,
    // 29, 25, 25, 1, 9, -31, -40, -20, 24, -21, -13, 21, 51, 24, -1, -13, -67, -4, -21, 29, 12, -76, -4, -55, 17, 24, 36, 11, -16, 6, -22, -37
    0x119191d, 0xecd8e109, 0x15f3eb18, 0xf3ff1833, 0x1debfcbd, 0xc9fcb40c, 0xb241811, 0xdbea06f0,
    // -57, 17, -28, -21, 8, -6, -17, 72, 3, 24, -64, -103, 45, -46, -91, 40, -27, 61, 4, 18, 8, 18, -6, 34, 1, 6, -43, 4, 50, 65, -53, 45
    0xebe411c7, 0x48effa08, 0x99c01803, 0x28a5d22d, 0x12043de5, 0x22fa1208, 0x4d50601, 0x2dcb4132,
    // -27, 25, -52, 15, 21, 1, -24, 25, -22, -46, -32, -8, -55, 36, 44, -18, -16, -13, -128, -12, -5, -11, -24, 93, -21, -18, -35, -9, -15, -35, 36, 1
    0xfcc19e5, 0x19e80115, 0xf8e0d2ea, 0xee2c24c9, 0xf480f3f0, 0x5de8f5fb, 0xf7ddeeeb, 0x124ddf1,
    // -48, -6, 10, 10, 9, 31, 7, 37, -6, -17, 35, -42, -13, 1, -41, 28, -4, -32, -85, -15, -13, -13, 55, 19, 24, -44, 18, -69, 6, 35, 28, -20
    0xa0afad0, 0x25071f09, 0xd623effa, 0x1cd701f3, 0xf1abe0fc, 0x1337f3f3, 0xbb12d418, 0xec1c2306,
    // -9, -18, 32, -22, 6, 16, -38, -11, 4, 37, 3, -15, -17, 3, -18, 34, 89, -25, -51, 20, 11, -52, -60, -32, 77, 7, -22, -3, 64, 36, 15, 61
    0xea20eef7, 0xf5da1006, 0xf1032504, 0x22ee03ef, 0x14cde759, 0xe0c4cc0b, 0xfdea074d, 0x3d0f2440,
    // -2, -19, -8, 7, 9, 30, -68, -31, 6, 25, 21, -48, 18, 22, -28, -1, 8, -27, -65, 2, -8, 33, -36, -5, 52, 5, -41, 26, -1, 13, -48, -31
    0x7f8edfe, 0xe1bc1e09, 0xd0151906, 0xffe41612, 0x2bfe508, 0xfbdc21f8, 0x1ad70534, 0xe1d00dff,
    // -4, 24, 38, -26, 44, -16, 10, 48, -5, -5, -31, -22, 7, 38, 41, -59, -10, -55, -58, -26, 9, 19, -14, -12, 17, -66, 33, 5, -2, -3, -27, -4
    0xe62618fc, 0x300af02c, 0xeae1fbfb, 0xc5292607, 0xe6c6c9f6, 0xf4f21309, 0x521be11, 0xfce5fdfe,
    // -15, 2, -7, 22, -2, 2, -1, 2, -12, 11, -15, -8, -18, -9, -13, -14, 8, 21, -50, -79, -109, -18, -19, 27, 34, 83, 16, 18, -4, 63, 0, -10
    0x16f902f1, 0x2ff02fe, 0xf8f10bf4, 0xf2f3f7ee, 0xb1ce1508, 0x1bedee93, 0x12105322, 0xf6003ffc,
    // 7, 8, 56, -34, 0, -18, -49, -8, -13, 36, 3, -6, -1, -16, -16, 19, 1, -31, -3, -22, 67, -55, 49, 36, 19, -89, -41, -27, 14, -108, 50, 6
    0xde380807, 0xf8cfee00, 0xfa0324f3, 0x13f0f0ff, 0xeafde101, 0x2431c943, 0xe5d7a713, 0x632940e,
    // 1, -1, 13, -33, 21, -36, -5, 18, 40, 62, -48, -45, -27, 15, 82, 11, 11, -33, -55, -22, 40, -21, 10, 62, -36, -27, 2, -35, -35, -23, -17, -43
    0xdf0dff01, 0x12fbdc15, 0xd3d03e28, 0xb520fe5, 0xeac9df0b, 0x3e0aeb28, 0xdd02e5dc, 0xd5efe9dd,
    // 48, -9, 17, -15, 100, -12, 59, -95, -77, -101, -105, -70, 18, 28, -50, 22, -21, -33, -4, -21, -51, 8, -4, 14, 4, -11, -3, -55, 18, -11, -7, 17
    0xf111f730, 0xa13bf464, 0xba979bb3, 0x16ce1c12, 0xebfcdfeb, 0xefc08cd, 0xc9fdf504, 0x11f9f512,
    // 3, 21, 20, -11, -4, -67, 3, 0, -3, 29, 29, 13, 24, -20, 50, -27, 14, -20, -48, 38, 15, -8, 46, 7, 12, 11, 34, 20, -42, 39, -3, 4
    0xf5141503, 0x3bdfc, 0xd1d1dfd, 0xe532ec18, 0x26d0ec0e, 0x72ef80f, 0x14220b0c, 0x4fd27d6,
    // 106, 26, -58, 9, 18, 67, -9, 42, -63, 44, -9, 28, 40, -6, 21, 23, -46, 16, 28, -15, -11, -2, -21, -19, -16, -41, 24, -33, -10, 3, 35, 1
    0x9c61a6a, 0x2af74312, 0x1cf72cc1, 0x1715fa28, 0xf11c10d2, 0xedebfef5, 0xdf18d7f0, 0x12303f6,
    // -14, -50, 20, 37, -41, 48, -29, -45, 11, 76, 41, -42, -18, -56, -31, -30, 54, 11, -63, 9, 59, 18, 54, 55, 48, -52, -7, 79, -18, 8, 64, -59
    0x2514cef2, 0xd3e330d7, 0xd6294c0b, 0xe2e1c8ee, 0x9c10b36, 0x3736123b, 0x4ff9cc30, 0xc54008ee,
    // 3, -14, 2, 29, -23, 23, 12, -21, 16, 7, -20, -2, 4, 12, -28, -8, 29, -34, -44, 51, -54, 45, 66, 23, 3, 71, 48, 80, 17, -33, -78, -78
    0x1d02f203, 0xeb0c17e9, 0xfeec0710, 0xf8e40c04, 0x33d4de1d, 0x17422dca, 0x50304703, 0xb2b2df11,
    // 4, 31, -21, 16, -26, -27, 31, 6, -16, -3, -22, 23, -23, -27, 21, -39, 2, -1, -55, -30, -89, 46, 38, 56, 5, 3, 7, 4, -32, 24, -6, -5
    0x10eb1f04, 0x61fe5e6, 0x17eafdf0, 0xd915e5e9, 0xe2c9ff02, 0x38262ea7, 0x4070305, 0xfbfa18e0,
    // -1, -16, -21, -6, -26, 16, -29, -12, 1, -42, -7, -16, -18, 13, 10, 25, 59, 39, 83, 7, 20, -87, -5, -32, 8, -7, -63, -21, -38, 29, 75, 13
    0xfaebf0ff, 0xf4e310e6, 0xf0f9d601, 0x190a0dee, 0x753273b, 0xe0fba914, 0xebc1f908, 0xd4b1dda,
    // 56, -65, -9, 3, -33, -62, 9, 125, 107, 7, -85, 49, -67, 33, -57, 22, -19, -11, 14, -10, -16, 30, -7, 18, 36, -28, 2, -57, 18, 0, -37, 23
    0x3f7bf38, 0x7d09c2df, 0x31ab076b, 0x16c721bd, 0xf60ef5ed, 0x12f91ef0, 0xc702e424, 0x17db0012,
    // 6, -13, -13, -4, -22, 8, 2, -29, 15, -4, 2, 1, 12, 25, -26, 2, 38, -50, -3, -57, 30, 8, 74, 75, -8, -22, 48, 17, -42, -66, 60, -46
    0xfcf3f306, 0xe30208ea, 0x102fc0f, 0x2e6190c, 0xc7fdce26, 0x4b4a081e, 0x1130eaf8, 0xd23cbed6,
    // -13, 49, -18, 45, -20, -13, 10, 7, -27, -33, -1, 37, -20, -8, -9, 6, -7, -18, -17, 49, -53, 41, -19, -68, 14, 24, 16, 6, -52, 63, 13, 0
    0x2dee31f3, 0x70af3ec, 0x25ffdfe5, 0x6f7f8ec, 0x31efeef9, 0xbced29cb, 0x610180e, 0xd3fcc,
    // 14, -5, 13, -60, -9, -34, 23, -5, 1, -10, 46, 6, 29, -17, -6, 7, -6, 26, 25, -1, -2, -29, 38, -10, -44, 2, 66, 1, 14, -68, -17, 29
    0xc40dfb0e, 0xfb17def7, 0x62ef601, 0x7faef1d, 0xff191afa, 0xf626e3fe, 0x14202d4, 0x1defbc0e,
    // -31, -6, -28, -10, -53, -42, -49, -28, -5, -17, -24, -54, 1, -29, 61, 40, -73, 12, 9, 5, -25, -38, -39, -2, -7, 20, 19, 10, -66, -22, -37, -43
    0xf6e4fae1, 0xe4cfd6cb, 0xcae8effb, 0x283de301, 0x5090cb7, 0xfed9dae7, 0xa1314f9, 0xd5dbeabe,
    // -2, 6, 88, -57, 1, -30, 12, 45, 1, -42, -28, 16, -16, -78, 44, -29, -25, 67, -12, 40, 31, 11, 81, 24, 13, 6, -7, -10, -13, 37, -22, -23
    0xc75806fe, 0x2d0ce201, 0x10e4d601, 0xe32cb2f0, 0x28f443e7, 0x18510b1f, 0xf6f9060d, 0xe9ea25f3,
    // 20, -8, -77, -23, 70, 14, -19, -21, 44, -21, -18, 21, 16, -40, -9, 16, 45, -67, -60, -4, -3, 44, 28, -5, -57, 12, 67, 12, 59, -8, 80, 25
    0xe9b3f814, 0xebed0e46, 0x15eeeb2c, 0x10f7d810, 0xfcc4bd2d, 0xfb1c2cfd, 0xc430cc7, 0x1950f83b,
    // -6, 36, 3, 89, -19, -15, -18, -39, -35, 8, 2, 54, -12, 64, -43, 51, -15, 21, -8, -20, -12, 12, 0, 2, 32, -26, -14, -13, -10, -17, -17, 21
    0x590324fa, 0xd9eef1ed, 0x360208dd, 0x33d540f4, 0xecf815f1, 0x2000cf4, 0xf3f2e620, 0x15efeff6,
    // 21, -19, -2, 32, -13, -3, 5, -23, 13, 23, 3, 2, 4, -40, -2, -44, -69, 35, 38, -5, -26, -10, 10, -39, 44, 5, 64, 4, -47, 3, 10, -34
    0x20feed15, 0xe905fdf3, 0x203170d, 0xd4fed804, 0xfb2623bb, 0xd90af6e6, 0x440052c, 0xde0a03d1,
};
static const uint embedded_decoder3_ResidualBlock_1_body_pw_expand_bias_dwords[32] = {
    // -0.1787, 0.02316, -0.01089, -0.09503, -0.01085, -0.04468, 0.1105, -0.345, -0.0958, 0.04623, -0.1209, -0.2644, -0.4768, -0.1255, 0.07745, -0.04593
    0x25eeb1b8, 0xae15a193, 0xa9b8a18e, 0xb5852f12, 0x29ebae22, 0xb43bafbd, 0xb004b7a1, 0xa9e12cf5,
    // -0.2505, -0.328, -0.2291, -0.06934, -0.02109, 0.0993, -0.2598, -0.1033, -0.2268, -0.0673, -0.04507, -0.3052, -0.2328, -0.2101, 0.03955, 0.08966
    0xb53fb402, 0xac70b355, 0x2e5ba566, 0xae9cb428, 0xac4fb342, 0xb4e2a9c5, 0xb2b9b373, 0x2dbd2910,
    // 0.1443, 0.00468, -0.2568, 0.0188, -0.1488, -0.1084, -0.02286, -0.2659, -0.06125, -0.197, -0.2593, 0.0238, 0.01723, -0.02576, -0.2607, -0.1646
    0x1ccb309e, 0x24d0b41c, 0xaef0b0c3, 0xb441a5da, 0xb24eabd7, 0x2618b426, 0xa6982469, 0xb144b42c,
    // -0.04108, -0.0758, 0.0715, -0.6104, -0.2473, -0.02782, -0.2627, -0.1089, -0.11145, 0.05334, -0.09357, 0.02199, -0.07605, -0.2852, -0.132, -0.0953
    0xacdaa942, 0xb8e22c93, 0xa71fb3ea, 0xaef8b434, 0x2ad4af22, 0x25a1adfd, 0xb490acde, 0xae19b039,
};
static const uint embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 49, -26, 57, -27, 76, -14, -29, -12, -45, 22, -13, -91, 2, 4, 25, -42, -38, -45, -44, 8, 30, 28, 60, 4, -43, 41, 41, -17, 1, -29, 17, 39
    0xe539e631, 0xf4e3f24c, 0xa5f316d3, 0xd6190402, 0x8d4d3da, 0x43c1c1e, 0xef2929d5, 0x2711e301,
    // -11, 19, -38, -24, 3, -16, 15, -24, -22, -14, 48, 47, -29, -7, -26, -82, -33, -23, -30, -80, 3, 18, -21, 52, 41, 15, 24, -13, -22, -16, 48, 29
    0xe8da13f5, 0xe80ff003, 0x2f30f2ea, 0xaee6f9e3, 0xb0e2e9df, 0x34eb1203, 0xf3180f29, 0x1d30f0ea,
    // -84, -72, -13, -56, -10, 70, -1, 9, 35, -89, -26, -5, 21, -26, 62, -33, 90, -20, 27, 10, 3, -10, 17, 41, 102, -1, -16, -15, 7, 6, 29, -21
    0xc8f3b8ac, 0x9ff46f6, 0xfbe6a723, 0xdf3ee615, 0xa1bec5a, 0x2911f603, 0xf1f0ff66, 0xeb1d0607,
    // 10, -3, -3, -3, -21, 57, 8, 6, 37, 6, -3, 32, 56, 23, -14, -77, -28, 42, 107, 29, -11, -12, 25, 33, 13, -69, -54, 53, -30, -12, -84, -45
    0xfdfdfd0a, 0x60839eb, 0x20fd0625, 0xb3f21738, 0x1d6b2ae4, 0x2119f4f5, 0x35cabb0d, 0xd3acf4e2,
    // 9, 12, 2, 2, -31, 15, 62, 96, -7, -7, -4, 26, -4, -18, 11, 14, 10, -13, -3, 5, -14, -1, -25, -1, -16, -71, -5, 9, 21, -61, -78, -8
    0x2020c09, 0x603e0fe1, 0x1afcf9f9, 0xe0beefc, 0x5fdf30a, 0xffe7fff2, 0x9fbb9f0, 0xf8b2c315,
    // 15, 52, 4, 5, 87, 10, -2, -104, 21, -8, -27, -10, 26, -3, 9, -13, -19, 16, 16, 20, -8, -7, 17, 20, -7, -10, -8, -29, 2, -5, -1, -4
    0x504340f, 0x98fe0a57, 0xf6e5f815, 0xf309fd1a, 0x141010ed, 0x1411f9f8, 0xe3f8f6f9, 0xfcfffb02,
    // 26, 50, -38, -71, 32, -8, 78, -56, 7, -11, -8, -88, 28, 4, -48, -10, -18, -69, -21, -2, 12, 5, 97, -72, 3, 32, 124, -4, 34, -11, -86, -8
    0xb9da321a, 0xc84ef820, 0xa8f8f507, 0xf6d0041c, 0xfeebbbee, 0xb861050c, 0xfc7c2003, 0xf8aaf522,
    // -13, -26, 20, -22, 45, 6, -12, 54, -37, 11, 1, 25, -19, -8, 16, 24, -106, -20, 22, 0, 22, 15, 4, 126, 28, -21, 9, 1, -11, -12, 0, -12
    0xea14e6f3, 0x36f4062d, 0x19010bdb, 0x1810f8ed, 0x16ec96, 0x7e040f16, 0x109eb1c, 0xf400f4f5,
    // -26, -84, 38, 55, -15, 9, 82, 70, -11, 30, -21, 30, 16, -14, 74, -29, 21, 15, 22, 21, -36, 20, -36, 4, -4, 48, -43, 5, -28, 43, -93, 1
    0x3726ace6, 0x465209f1, 0x1eeb1ef5, 0xe34af210, 0x15160f15, 0x4dc14dc, 0x5d530fc, 0x1a32be4,
    // 6, 1, 7, 12, -59, -15, -14, -47, 12, -19, -12, 1, 27, 12, -20, 32, 45, 10, -38, -28, -20, -20, -12, -65, -5, -10, -21, 21, -16, 12, -4, 19
    0xc070106, 0xd1f2f1c5, 0x1f4ed0c, 0x20ec0c1b, 0xe4da0a2d, 0xbff4ecec, 0x15ebf6fb, 0x13fc0cf0,
    // 54, 64, -30, 115, -24, 21, 5, 12, -13, -20, -42, 78, -35, -36, -64, -49, -6, -28, 32, 46, -40, -2, -79, -52, -62, 24, 31, -2, 57, -108, -22, -34
    0x73e24036, 0xc0515e8, 0x4ed6ecf3, 0xcfc0dcdd, 0x2e20e4fa, 0xccb1fed8, 0xfe1f18c2, 0xdeea9439,
    // 27, -16, 9, -28, 101, 83, -2, 28, -41, -14, -2, -2, -7, -11, 32, 35, 2, 45, 4, -12, 20, 23, 4, -75, -25, -30, -36, -38, -10, 65, -20, -4
    0xe409f01b, 0x1cfe5365, 0xfefef2d7, 0x2320f5f9, 0xf4042d02, 0xb5041714, 0xdadce2e7, 0xfcec41f6,
    // -41, 20, 50, -9, 6, 53, -7, -19, -12, 5, -57, 41, 42, 14, -19, 9, 3, -23, -10, 41, -83, -2, -11, 38, 39, 23, -46, 12, -17, -14, 11, -9
    0xf73214d7, 0xedf93506, 0x29c705f4, 0x9ed0e2a, 0x29f6e903, 0x26f5fead, 0xcd21727, 0xf70bf2ef,
    // -7, 30, -20, -19, 28, -4, 5, -3, -5, 26, 19, 31, -11, -7, -20, 20, 28, -29, -8, -52, 17, 23, 6, -15, -14, -16, -6, -1, 21, -13, -14, 11
    0xedec1ef9, 0xfd05fc1c, 0x1f131afb, 0x14ecf9f5, 0xccf8e31c, 0xf1061711, 0xfffaf0f2, 0xbf2f315,
    // 47, 47, -15, 11, 25, 82, 9, -54, -16, 37, 5, 0, 49, -54, -53, 31, 70, 13, -8, 5, 60, 14, -28, -41, -60, 15, 41, -7, -25, -17, -7, -4
    0xbf12f2f, 0xca095219, 0x525f0, 0x1fcbca31, 0x5f80d46, 0xd7e40e3c, 0xf9290fc4, 0xfcf9efe7,
    // -16, 12, 11, 60, 17, -1, 0, -1, 45, 30, -13, -26, 4, 21, -74, 36, 6, 46, -34, -7, -58, 41, 26, -19, 5, -26, 44, -33, -18, -49, -6, 6
    0x3c0b0cf0, 0xff00ff11, 0xe6f31e2d, 0x24b61504, 0xf9de2e06, 0xed1a29c6, 0xdf2ce605, 0x6facfee,
    // -3, 38, -10, 24, -59, -23, -38, 51, -1, -49, -18, -12, 8, -18, -19, 75, -68, 32, 7, 36, -80, -29, 17, -19, -16, -28, 26, 26, 22, 42, -2, 13
    0x18f626fd, 0x33dae9c5, 0xf4eecfff, 0x4bedee08, 0x240720bc, 0xed11e3b0, 0x1a1ae4f0, 0xdfe2a16,
    // 22, -16, -34, -19, -50, -38, -25, 44, 6, -43, 7, 31, -61, 14, -16, 1, -6, 35, 30, -47, 42, 6, 7, 15, -27, 54, -12, 6, 6, 73, 90, 2
    0xeddef016, 0x2ce7dace, 0x1f07d506, 0x1f00ec3, 0xd11e23fa, 0xf07062a, 0x6f436e5, 0x25a4906,
    // -18, 34, 11, -80, 25, -10, 50, -102, 10, -12, 30, 15, 10, 8, -30, 49, -24, -16, -11, 2, 63, 3, -5, 110, 61, -5, -110, 15, -10, 12, -63, 1
    0xb00b22ee, 0x9a32f619, 0xf1ef40a, 0x31e2080a, 0x2f5f0e8, 0x6efb033f, 0xf92fb3d, 0x1c10cf6,
    // -18, -51, -18, 34, -2, -54, 8, 97, -1, 2, 21, 13, -66, -6, -35, 33, 45, -7, 3, -22, 5, 13, 2, 22, 14, 19, 32, -35, -1, -8, 77, -1
    0x22eecdee, 0x6108cafe, 0xd1502ff, 0x21ddfabe, 0xea03f92d, 0x16020d05, 0xdd20130e, 0xff4df8ff,
    // 57, 50, 4, 71, 34, -22, -7, -31, 8, -98, 24, 106, -14, 10, -53, -31, -56, 19, -22, -36, 38, 24, -78, 17, -76, 44, -34, 14, -8, -76, 2, 9
    0x47043239, 0xe1f9ea22, 0x6a189e08, 0xe1cb0af2, 0xdcea13c8, 0x11b21826, 0xede2cb4, 0x902b4f8,
    // -13, -24, 0, 12, 64, -30, 7, -10, -9, 20, 8, -40, 17, -22, 2, 8, 51, 3, 91, 23, -19, 15, -17, -106, 11, 36, 33, -73, 20, -39, 32, 33
    0xc00e8f3, 0xf607e240, 0xd80814f7, 0x802ea11, 0x175b0333, 0x96ef0fed, 0xb721240b, 0x2120d914,
    // -9, 8, -9, -2, 36, -5, 8, 21, 9, 28, -11, 58, 36, 2, -5, -38, 90, -2, 26, 44, 9, -8, -40, -5, -6, -21, -24, -32, 37, -26, 6, 8
    0xfef708f7, 0x1508fb24, 0x3af51c09, 0xdafb0224, 0x2c1afe5a, 0xfbd8f809, 0xe0e8ebfa, 0x806e625,
    // 42, -2, -52, -10, 27, 33, -34, -27, -33, -68, 35, 68, -9, 24, -12, -59, 36, 34, -21, -32, 51, -28, 14, -39, -30, -23, -37, -15, -26, -7, -77, 40
    0xf6ccfe2a, 0xe5de211b, 0x4423bcdf, 0xc5f418f7, 0xe0eb2224, 0xd90ee433, 0xf1dbe9e2, 0x28b3f9e6,
    // 33, 36, -37, -20, -8, -1, -24, -57, 9, 73, 13, 13, -30, -13, -40, 15, -36, -17, 39, -13, 4, 6, -7, 56, 23, 32, -86, -5, -7, -55, 40, -26
    0xecdb2421, 0xc7e8fff8, 0xd0d4909, 0xfd8f3e2, 0xf327efdc, 0x38f90604, 0xfbaa2017, 0xe628c9f9,
    // 12, 15, 8, 6, 50, 20, -18, 95, 9, 7, -19, -48, 37, 7, 16, 48, 37, -38, -55, 72, 4, -3, -8, 4, 20, -1, -29, -55, 9, 5, 21, -20
    0x6080f0c, 0x5fee1432, 0xd0ed0709, 0x30100725, 0x48c9da25, 0x4f8fd04, 0xc9e3ff14, 0xec150509,
    // 46, -9, -8, 52, 10, 24, -4, -37, -23, -20, -29, -39, 38, -10, 4, -2, 18, -71, 30, 69, -31, 68, 23, -15, -35, -42, 38, -39, -46, -13, -2, -25
    0x34f8f72e, 0xdbfc180a, 0xd9e3ece9, 0xfe04f626, 0x451eb912, 0xf11744e1, 0xd926d6dd, 0xe7fef3d2,
    // -30, 8, -32, 33, -11, 48, -35, 45, -22, -3, 10, 5, 46, 18, 10, 46, -36, -36, 22, 28, 47, 3, -41, -2, -52, -30, -46, -34, 17, 15, -59, 42
    0x21e008e2, 0x2ddd30f5, 0x50afdea, 0x2e0a122e, 0x1c16dcdc, 0xfed7032f, 0xded2e2cc, 0x2ac50f11,
    // -24, 2, 0, 18, 32, 0, 12, -4, -33, -3, 3, -4, -14, -54, 7, 12, -36, 2, 23, 28, -24, 41, 0, -15, 2, -39, 23, -27, -28, -26, 9, 14
    0x120002e8, 0xfc0c0020, 0xfc03fddf, 0xc07caf2, 0x1c1702dc, 0xf10029e8, 0xe517d902, 0xe09e6e4,
    // 34, 21, -2, -4, 16, -18, 13, -25, -17, 21, -55, 12, -6, 36, 10, 31, -15, -22, 33, -8, 2, 12, -23, 23, 40, 23, -9, -7, 4, -27, 28, -12
    0xfcfe1522, 0xe70dee10, 0xcc915ef, 0x1f0a24fa, 0xf821eaf1, 0x17e90c02, 0xf9f71728, 0xf41ce504,
    // -33, -4, 16, -16, -26, 7, -20, -16, -36, 22, -15, -8, 12, -50, 4, -25, 67, -1, 31, 52, -43, 6, 14, 53, 23, -32, -43, -16, 28, 45, -1, -22
    0xf010fcdf, 0xf0ec07e6, 0xf8f116dc, 0xe704ce0c, 0x341fff43, 0x350e06d5, 0xf0d5e017, 0xeaff2d1c,
    // -12, -36, -1, 30, -62, 28, -2, -1, 21, 11, 46, 28, -2, 2, -9, -17, -2, -20, -17, -43, -11, 3, 6, 40, 7, -37, -5, 44, -25, 81, -16, -27
    0x1effdcf4, 0xfffe1cc2, 0x1c2e0b15, 0xeff702fe, 0xd5efecfe, 0x280603f5, 0x2cfbdb07, 0xe5f051e7,
    // -38, -42, 73, 14, -57, -27, 3, 1, 12, -13, 2, 46, -24, -46, 14, 93, 42, 6, -62, -8, 56, 8, -23, -4, 32, -25, -23, 42, 88, -17, -4, -19
    0xe49d6da, 0x103e5c7, 0x2e02f30c, 0x5d0ed2e8, 0xf8c2062a, 0xfce90838, 0x2ae9e720, 0xedfcef58,
    // 25, 2, 8, -16, 0, 39, 23, -31, 81, 13, -32, 35, 6, 31, -3, -19, -3, 26, -15, -36, 14, 68, -30, 3, -40, 4, 18, 39, -5, 43, -78, 71
    0xf0080219, 0xe1172700, 0x23e00d51, 0xedfd1f06, 0xdcf11afd, 0x3e2440e, 0x271204d8, 0x47b22bfb,
    // 9, 3, 36, 7, -18, 6, -2, -8, -79, -15, 36, -1, 78, 69, 21, 2, -52, -33, -62, 0, 43, -5, -5, -2, -11, -72, 0, -8, -19, -10, -6, 12
    0x7240309, 0xf8fe06ee, 0xff24f1b1, 0x215454e, 0xc2dfcc, 0xfefbfb2b, 0xf800b8f5, 0xcfaf6ed,
    // -116, 0, -7, 34, 15, 17, -22, -24, 56, 22, 74, -23, 49, 7, -2, -37, 1, -16, 7, -20, -70, -50, 17, 27, 9, 36, -14, -32, -39, -9, 18, 12
    0x22f9008c, 0xe8ea110f, 0xe94a1638, 0xdbfe0731, 0xec07f001, 0x1b11ceba, 0xe0f22409, 0xc12f7d9,
    // 36, 20, -12, -19, 42, 22, 11, 5, -17, 13, -34, 17, -33, -14, 17, -22, 26, -26, -81, 6, 8, 18, 34, -6, 11, -9, -9, 2, 8, -15, 4, 65
    0xedf41424, 0x50b162a, 0x11de0def, 0xea11f2df, 0x6afe61a, 0xfa221208, 0x2f7f70b, 0x4104f108,
    // 40, 10, -4, -4, 3, 16, 60, 12, -17, 86, -1, -2, 54, 23, 36, -1, 10, -34, -10, -12, -40, -5, -88, -5, -6, -26, -69, -14, -4, 12, -12, -5
    0xfcfc0a28, 0xc3c1003, 0xfeff56ef, 0xff241736, 0xf4f6de0a, 0xfba8fbd8, 0xf2bbe6fa, 0xfbf40cfc,
    // 6, -1, 54, -29, 35, 5, 6, -10, -22, -20, -37, 13, 51, -61, 34, 1, -14, -34, -11, -27, 50, -44, -10, -1, 32, -2, -2, 11, 47, -8, -9, 5
    0xe336ff06, 0xf6060523, 0xddbecea, 0x122c333, 0xe5f5def2, 0xfff6d432, 0xbfefe20, 0x5f7f82f,
    // -51, -17, 1, 39, -14, 11, 15, -34, 58, 28, -89, 3, 31, -12, -20, -46, -3, -23, -10, -4, 30, 40, 1, 9, -37, -3, 12, 2, 6, -7, -28, -57
    0x2701efcd, 0xde0f0bf2, 0x3a71c3a, 0xd2ecf41f, 0xfcf6e9fd, 0x901281e, 0x20cfddb, 0xc7e4f906,
    // -12, -13, 6, 14, 26, -22, -2, 7, -13, 1, 12, -5, 51, -85, 2, -29, -2, 24, -31, -11, 20, -33, -6, 10, 14, -36, -1, -60, 7, 6, 1, 24
    0xe06f3f4, 0x7feea1a, 0xfb0c01f3, 0xe302ab33, 0xf5e118fe, 0xafadf14, 0xc4ffdc0e, 0x18010607,
    // -35, -12, -7, 23, 9, -10, 3, -20, 13, -18, -68, -4, -8, 109, -23, -6, 8, -11, -6, -21, 3, 89, 12, 6, 11, -7, 30, -4, -8, -15, 7, -62
    0x17f9f4dd, 0xec03f609, 0xfcbcee0d, 0xfae96df8, 0xebfaf508, 0x60c5903, 0xfc1ef90b, 0xc207f1f8,
    // 6, 7, 18, 26, 13, -73, -17, -23, 47, 10, 65, 12, -4, -28, -20, -70, 24, 7, 1, 53, -6, -10, -10, -20, 7, -70, 3, 15, -3, 10, -25, 10
    0x1a120706, 0xe9efb70d, 0xc410a2f, 0xbaece4fc, 0x35010718, 0xecf6f6fa, 0xf03ba07, 0xae70afd,
    // 61, -47, -79, 96, -1, 31, -29, -16, 1, 48, 40, -47, 31, -3, 55, 2, -4, -11, 3, -22, 50, -31, -7, -13, -74, -17, 36, 19, 3, -55, -35, 13
    0x60b1d13d, 0xf0e31fff, 0xd1283001, 0x237fd1f, 0xea03f5fc, 0xf3f9e132, 0x1324efb6, 0xdddc903,
    // 21, 21, 23, 30, -17, 74, -11, -10, -13, 7, 14, 21, 28, -30, -24, 11, 1, -16, -16, -11, 38, -52, -11, 20, -9, 27, 4, 15, 35, 15, 5, -34
    0x1e171515, 0xf6f54aef, 0x150e07f3, 0xbe8e21c, 0xf5f0f001, 0x14f5cc26, 0xf041bf7, 0xde050f23,
    // -2, -8, 11, 89, 29, 39, -10, 19, 127, -14, 73, 44, 41, -8, -75, -43, 3, -42, 9, 28, -31, -25, 40, 19, -19, -23, -4, 10, -89, 0, 0, 23
    0x590bf8fe, 0x13f6271d, 0x2c49f27f, 0xd5b5f829, 0x1c09d603, 0x1328e7e1, 0xafce9ed, 0x170000a7,
    // 12, 6, -28, 40, -34, -22, 15, -11, -43, 14, 81, 10, -27, 54, 14, -58, -22, 19, 44, -28, -68, -7, 13, 14, 13, -73, 8, 82, -47, 28, -7, 23
    0x28e4060c, 0xf50feade, 0xa510ed5, 0xc60e36e5, 0xe42c13ea, 0xe0df9bc, 0x5208b70d, 0x17f91cd1,
    // -40, 6, -12, -18, 17, 18, 75, 11, -67, 23, 11, 28, -15, -42, -42, 31, -9, 4, 7, -44, -13, -11, 18, -1, 15, 28, 27, -1, 18, -4, 32, 30
    0xeef406d8, 0xb4b1211, 0x1c0b17bd, 0x1fd6d6f1, 0xd40704f7, 0xff12f5f3, 0xff1b1c0f, 0x1e20fc12,
    // -26, 43, -33, -29, 25, 48, 11, -53, 46, 5, -41, -6, 1, -36, -55, 0, 2, -21, 12, 27, 7, 2, -39, 32, -1, -4, -15, -13, 5, -13, 13, -6
    0xe3df2be6, 0xcb0b3019, 0xfad7052e, 0xc9dc01, 0x1b0ceb02, 0x20d90207, 0xf3f1fcff, 0xfa0df305,
    // 0, 10, 30, -13, 20, 6, -34, 18, 41, 10, -11, 29, -17, -9, 3, 7, 1, -68, 8, -72, -5, -16, -15, -4, 33, -21, 40, 5, -8, 45, 4, -19
    0xf31e0a00, 0x12de0614, 0x1df50a29, 0x703f7ef, 0xb808bc01, 0xfcf1f0fb, 0x528eb21, 0xed042df8,
    // 18, -14, -33, -21, -23, 25, 13, 11, 1, -17, 42, 7, -32, 25, -22, -1, 31, -37, 47, 49, -27, 38, -2, 3, 13, 5, -3, 21, -1, -12, 2, 10
    0xebdff212, 0xb0d19e9, 0x72aef01, 0xffea19e0, 0x312fdb1f, 0x3fe26e5, 0x15fd050d, 0xa02f4ff,
    // -5, 25, 40, 37, 3, -9, -39, -1, 37, 22, 29, -29, 38, -8, -24, -24, -4, 21, 2, 39, -10, -11, -39, 1, 2, -22, 0, 0, -45, -4, -17, 52
    0x252819fb, 0xffd9f703, 0xe31d1625, 0xe8e8f826, 0x270215fc, 0x1d9f5f6, 0xea02, 0x34effcd3,
    // 14, 32, 9, 29, 13, -53, -5, -21, -68, -6, 26, -12, 69, 78, -2, 5, 45, -58, 13, -4, 17, 3, -4, 5, -40, -37, 7, -8, -27, 13, -14, 17
    0x1d09200e, 0xebfbcb0d, 0xf41afabc, 0x5fe4e45, 0xfc0dc62d, 0x5fc0311, 0xf807dbd8, 0x11f20de5,
    // -4, -15, -12, 15, -2, 23, -76, 22, 28, 38, -30, 56, 4, 36, 41, -21, 19, -50, -8, -1, -21, -24, 45, 8, -75, -27, -59, -21, -14, -44, -1, -34
    0xff4f1fc, 0x16b417fe, 0x38e2261c, 0xeb292404, 0xfff8ce13, 0x82de8eb, 0xebc5e5b5, 0xdeffd4f2,
    // -4, 0, 36, -24, 50, -3, 2, -35, -22, -5, -13, 29, 79, 28, -14, 19, -17, -9, 8, 28, 0, 15, 6, 17, 35, 85, 4, 23, 64, -10, 10, -44
    0xe82400fc, 0xdd02fd32, 0x1df3fbea, 0x13f21c4f, 0x1c08f7ef, 0x11060f00, 0x17045523, 0xd40af640,
    // -39, -81, 1, 37, 11, 14, -41, -35, 39, 65, -47, 68, -13, 5, 6, -17, 18, 33, 5, -58, 10, 29, 34, 25, -33, 5, 37, 7, -9, -18, 9, 12
    0x2501afd9, 0xddd70e0b, 0x44d14127, 0xef0605f3, 0xc6052112, 0x19221d0a, 0x72505df, 0xc09eef7,
    // -15, 2, 30, -4, 6, -10, -23, 0, -8, -6, 11, 3, -80, -36, -8, 65, 7, -19, -72, -54, 3, -41, 39, 5, 4, -12, 4, 8, -33, 14, 1, 30
    0xfc1e02f1, 0xe9f606, 0x30bfaf8, 0x41f8dcb0, 0xcab8ed07, 0x527d703, 0x804f404, 0x1e010edf,
    // 42, -17, 60, -69, 4, -22, 34, 2, -15, 10, -59, -26, 23, 16, -42, -14, -6, 17, 10, 0, -58, 71, 13, 16, 43, 14, 21, 16, 20, -70, 3, -41
    0xbb3cef2a, 0x222ea04, 0xe6c50af1, 0xf2d61017, 0xa11fa, 0x100d47c6, 0x10150e2b, 0xd703ba14,
    // -19, -16, 12, -6, 27, -78, -14, -12, -29, 1, 54, -11, 19, -87, 3, -20, -9, -17, -49, 19, 27, -85, 13, 28, 18, 32, -2, -50, 9, 8, -10, -43
    0xfa0cf0ed, 0xf4f2b21b, 0xf53601e3, 0xec03a913, 0x13cfeff7, 0x1c0dab1b, 0xcefe2012, 0xd5f60809,
    // -40, 2, -10, 67, 23, 32, -41, 10, 4, 21, 39, -39, 41, 4, 109, -1, 12, -16, 4, -40, 13, -8, -18, 8, -50, 45, 45, 6, 3, -9, -27, -1
    0x43f602d8, 0xad72017, 0xd9271504, 0xff6d0429, 0xd804f00c, 0x8eef80d, 0x62d2dce, 0xffe5f703,
    // -52, 25, -1, -22, -49, -26, -7, 31, -37, -4, 38, 19, 46, -60, 18, 29, 84, 36, 4, -61, 47, -1, -15, 3, 25, -22, -17, 24, 55, 0, -6, -1
    0xeaff19cc, 0x1ff9e6cf, 0x1326fcdb, 0x1d12c42e, 0xc3042454, 0x3f1ff2f, 0x18efea19, 0xfffa0037,
    // -7, -71, 0, 5, 16, -43, 73, -8, 3, -8, -14, -10, -20, -34, 56, 33, 10, 0, 0, 60, 12, 41, -1, 16, 13, -20, 32, 19, 20, -21, 14, -62
    0x500b9f9, 0xf849d510, 0xf6f2f803, 0x2138deec, 0x3c00000a, 0x10ff290c, 0x1320ec0d, 0xc20eeb14,
    // -28, 44, 81, 2, -44, -85, 13, -21, -9, -27, 26, 25, 10, 21, -34, -42, 28, 5, -105, -37, 49, -4, -57, 6, -12, 8, -8, 3, -41, -15, 3, 80
    0x2512ce4, 0xeb0dabd4, 0x191ae5f7, 0xd6de150a, 0xdb97051c, 0x6c7fc31, 0x3f808f4, 0x5003f1d7,
    // 8, -2, -9, -93, 1, 38, 11, 58, 60, 14, -27, -12, 16, 84, 18, -27, -10, -65, -11, -40, -81, 11, -80, -20, -15, -45, -53, 4, -8, -19, -33, 13
    0xa3f7fe08, 0x3a0b2601, 0xf4e50e3c, 0xe5125410, 0xd8f5bff6, 0xecb00baf, 0x4cbd3f1, 0xddfedf8,
};
static const uint embedded_decoder3_ResidualBlock_1_body_pw_contract_bias_dwords[16] = {
    // -0.0003908, -0.0001544, 0.000834, -0.0002544, -0.0001495, -0.0004246, 0.0002816, 0.0006785, -0.0002556, 0.000167, 0.0001429, 0.0002395, -0.0007067, -0.001025, 0.001271, -0.000605
    0x890f8e67, 0x8c2b12d5, 0x8ef588e6, 0x118f0c9d, 0x9798c30, 0xbd908af, 0x943391ca, 0x90f51535,
    // -0.0001057, 0.0003948, 0.0008917, -0.001106, -0.000924, 0.0002007, -0.000678, -0.000597, 0.001182, 0.000904, -0.000697, 0.00103, -0.001284, 0.0006695, 0.0002465, -0.0007877
    0xe7886ed, 0x9488134e, 0xa949392, 0x90e4918e, 0x136814d7, 0x143891b6, 0x117c9542, 0x92740c0a,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass10(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped = {
        uint3(1920, 1080, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 32), // threadGroupSliceSize
        uint3(1920, 1080, 32), // storageSize
        uint3(32, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        265420800, // threadGroupStorageByteOffset
        storage_FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped };
    
    const ConstantBufferStorage<576> storage_embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.007031021174043417, storage_embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = { embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.00432277237996459, storage_embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_decoder3_ResidualBlock_1_body_pw_expand_bias = { embedded_decoder3_ResidualBlock_1_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_decoder3_ResidualBlock_1_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_1_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004288315773010254, storage_embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder3_ResidualBlock_1_body_pw_contract_bias = { embedded_decoder3_ResidualBlock_1_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder3_ResidualBlock_1_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_1_body_pw_contract_bias };
    
    // /decoder3/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_20 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_20 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_20 = uint3(64, 1, 32);
    const uint3 storageSize_slice_20 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_20 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_20 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_20 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_20 = dot(groupStart_slice_20, tensorByteStrides_slice_20);
    const RWBufferStorage storage_slice_20 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_20 = { logicalSize_slice_20, groupStart_slice_20, groupSize_slice_20, storageSize_slice_20, tensorByteStrides_slice_20, paddingBegin_slice_20, paddingEnd_slice_20, threadGroupByteOffsetInTensor_slice_20 + 132710400, storage_slice_20 };
    // Fusedquantized_/decoder3/ResidualBlock_1/residual_func/Concat_quantized_/decoder3/ResidualBlock_1/body/spatial_mixing/partial_conv/Conv_quantized_/decoder3/ResidualBlock_1/body/spatial_mixing/Concat_quantized_/decoder3/ResidualBlock_1/body/pw_expand/Conv_/decoder3/ResidualBlock_1/body/pw_expand_act/Relu_quantized_/decoder3/ResidualBlock_1/body/pw_contract/Conv_/decoder3/ResidualBlock_1/Add (32, 1080, 1920), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,) -> (32, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<32, 1>(0.02135251834988594, 0.028955304995179176, 0.02107444405555725, 0.020427925512194633, 0.027574772015213966, FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped, embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias, embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_1_body_pw_expand_bias, embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_1_body_pw_contract_bias, slice_20, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_10
#ifdef MLSR_PASS_10_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass10_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /decoder3/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_21 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_21 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_21 = uint3(32, 1, 32);
    const uint3 storageSize_slice_21 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_21 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_21 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_21 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_21 = dot(groupStart_slice_21, tensorByteStrides_slice_21);
    const RWBufferStorage storage_slice_21 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_21 = { logicalSize_slice_21, groupStart_slice_21, groupSize_slice_21, storageSize_slice_21, tensorByteStrides_slice_21, paddingBegin_slice_21, paddingEnd_slice_21, threadGroupByteOffsetInTensor_slice_21 + 132710400, storage_slice_21 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_21, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_10_POST


#ifdef MLSR_PASS_11
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FNB_CT2D_ADD.hlsli"

static const uint embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // -21, -22, -18, -4, -2, -7, 4, 0, -6, 0, -9, 4, 10, -9, -13, 12, 25, -14, -2, 12, 6, 0, 18, -24, 13, -45, 14, 17, -9, 0, -5, -15
    0xfceeeaeb, 0x4f9fe, 0x4f700fa, 0xcf3f70a, 0xcfef219, 0xe8120006, 0x110ed30d, 0xf1fb00f7,
    // -3, 16, -14, 14, -39, -1, 4, 7, 8, 0, 5, 0, -3, -3, 2, 10, 1, -6, 27, 4, 7, -20, -10, 10, -16, 8, -11, 19, 4, -6, 7, -21
    0xef210fd, 0x704ffd9, 0x50008, 0xa02fdfd, 0x41bfa01, 0xaf6ec07, 0x13f508f0, 0xeb07fa04,
    // 6, 19, 56, -29, -37, -60, -45, 40, -44, 12, -17, 12, -62, 41, -28, -35, -9, 18, 27, -18, -10, 17, -9, 1, -42, -11, 19, 24, -14, 24, -5, -30
    0xe3381306, 0x28d3c4db, 0xcef0cd4, 0xdde429c2, 0xee1b12f7, 0x1f711f6, 0x1813f5d6, 0xe2fb18f2,
    // -14, -23, -24, 23, 3, 9, -6, 27, -10, -2, -15, 5, -7, -8, -16, 6, 5, -5, 4, 6, -1, -13, 16, -19, -15, 3, 1, 6, -2, -22, -6, 1
    0x17e8e9f2, 0x1bfa0903, 0x5f1fef6, 0x6f0f8f9, 0x604fb05, 0xed10f3ff, 0x60103f1, 0x1faeafe,
    // -33, 5, -21, 10, -13, 11, 5, 7, 0, -9, 23, 4, -21, -16, -13, 16, 31, -18, -5, -2, -21, 15, -8, 3, 2, -10, -2, -2, -2, -16, 7, -6
    0xaeb05df, 0x7050bf3, 0x417f700, 0x10f3f0eb, 0xfefbee1f, 0x3f80feb, 0xfefef602, 0xfa07f0fe,
    // 21, 7, -7, -53, -8, -3, 10, 19, -16, 40, -8, 25, -9, 1, -20, 7, -4, -19, -21, -6, 25, -6, 12, -13, 8, 6, 9, 2, -13, -10, -1, 4
    0xcbf90715, 0x130afdf8, 0x19f828f0, 0x7ec01f7, 0xfaebedfc, 0xf30cfa19, 0x2090608, 0x4fff6f3,
    // 21, -33, 9, -20, 7, 17, 11, 14, -7, -31, 13, -24, -21, 15, 20, -19, -20, -37, 40, 6, 1, -62, 32, -44, -28, -3, 41, -18, 40, 34, 42, 1
    0xec09df15, 0xe0b1107, 0xe80de1f9, 0xed140feb, 0x628dbec, 0xd420c201, 0xee29fde4, 0x12a2228,
    // -4, -24, -17, 17, 31, -24, 9, -11, -2, 29, -7, -30, -17, -3, 15, 19, 17, -5, -6, -13, -19, 12, 23, -20, 0, 16, 21, 18, 8, -20, 18, -7
    0x11efe8fc, 0xf509e81f, 0xe2f91dfe, 0x130ffdef, 0xf3fafb11, 0xec170ced, 0x12151000, 0xf912ec08,
    // 40, 25, -41, 49, 7, 11, -16, 64, 9, -45, 21, 6, -21, -8, -1, 11, -8, -9, -12, 20, 10, -7, -12, 5, 21, -5, -10, -13, -40, -2, 9, -6
    0x31d71928, 0x40f00b07, 0x615d309, 0xbfff8eb, 0x14f4f7f8, 0x5f4f90a, 0xf3f6fb15, 0xfa09fed8,
    // -20, -1, -17, -27, -10, 2, 2, 10, -8, -6, -2, 0, -10, 19, -15, 4, -10, -11, 4, -7, -7, 2, 5, 15, 6, -21, 13, -11, -10, 21, -2, -5
    0xe5efffec, 0xa0202f6, 0xfefaf8, 0x4f113f6, 0xf904f5f6, 0xf0502f9, 0xf50deb06, 0xfbfe15f6,
    // 8, 14, 3, 10, -36, -9, 4, 11, -12, -3, -8, 3, 10, 16, 8, -1, 12, -2, 36, 18, -4, 5, 13, -17, 8, -6, -37, -13, -19, 7, 10, 11
    0xa030e08, 0xb04f7dc, 0x3f8fdf4, 0xff08100a, 0x1224fe0c, 0xef0d05fc, 0xf3dbfa08, 0xb0a07ed,
    // 53, 22, -55, 23, 93, 14, -10, -53, 20, -34, 31, 16, 43, -23, -7, 32, -1, 1, 47, -43, 27, 45, 5, -1, -12, 12, 4, 1, -14, 20, -7, 14
    0x17c91635, 0xcbf60e5d, 0x101fde14, 0x20f9e92b, 0xd52f01ff, 0xff052d1b, 0x1040cf4, 0xef914f2,
    // -24, -6, -13, -12, 2, -15, -1, -3, 0, 12, 5, 1, -3, -1, -1, -4, -33, -5, 27, -3, 4, -19, 3, -27, 11, 8, -9, 12, 0, 25, 6, -25
    0xf4f3fae8, 0xfdfff102, 0x1050c00, 0xfcfffffd, 0xfd1bfbdf, 0xe503ed04, 0xcf7080b, 0xe7061900,
    // -21, -9, -11, -6, 1, 6, 0, 8, -1, 5, 0, -6, -7, 0, 3, -6, 5, 2, 5, 15, -5, -4, -6, -11, -3, 6, 16, -2, -12, -13, 11, -14
    0xfaf5f7eb, 0x8000601, 0xfa0005ff, 0xfa0300f9, 0xf050205, 0xf5fafcfb, 0xfe1006fd, 0xf20bf3f4,
    // -15, 12, 1, -20, -1, -19, 3, -3, 10, 4, 29, 21, -14, -29, -24, 3, -21, -9, -28, 6, 8, -19, -5, -17, -7, 4, 14, -1, 3, -18, 11, -8
    0xec010cf1, 0xfd03edff, 0x151d040a, 0x3e8e3f2, 0x6e4f7eb, 0xeffbed08, 0xff0e04f9, 0xf80bee03,
    // 34, -8, 37, -10, -4, 17, -14, 12, 19, -28, 14, -12, -17, -13, 9, -30, -30, 40, -6, -31, -25, 78, 27, 16, -2, 56, -85, 21, 8, 15, 0, 0
    0xf625f822, 0xcf211fc, 0xf40ee413, 0xe209f3ef, 0xe1fa28e2, 0x101b4ee7, 0x15ab38fe, 0xf08,
    // 11, -6, -12, -33, -19, -24, 3, -25, 2, 11, -31, -9, 3, -35, -2, -4, 7, -5, 22, -8, 10, -1, 5, -14, -1, 30, 15, 13, 13, -13, 5, -14
    0xdff4fa0b, 0xe703e8ed, 0xf7e10b02, 0xfcfedd03, 0xf816fb07, 0xf205ff0a, 0xd0f1eff, 0xf205f30d,
    // 12, 0, 14, 28, 17, -25, -36, 32, 43, -42, -15, 24, 8, 15, -33, -22, 1, -22, -14, -2, 21, -7, -9, 17, 12, -7, -20, -16, -12, 2, -6, -15
    0x1c0e000c, 0x20dce711, 0x18f1d62b, 0xeadf0f08, 0xfef2ea01, 0x11f7f915, 0xf0ecf90c, 0xf1fa02f4,
    // -1, 1, 11, -10, 16, 1, -17, 10, 6, 20, 11, -7, -4, -4, -4, 12, 9, -5, -14, 28, -5, 9, -5, -13, 8, 15, 7, -14, 7, -10, 8, -18
    0xf60b01ff, 0xaef0110, 0xf90b1406, 0xcfcfcfc, 0x1cf2fb09, 0xf3fb09fb, 0xf2070f08, 0xee08f607,
    // 2, 1, 7, 6, -5, -4, -5, -11, 7, 13, 5, -1, -5, -10, 0, 5, -18, -20, 5, 7, -12, -10, -20, -27, -3, -18, -19, -7, -38, 3, 10, -13
    0x6070102, 0xf5fbfcfb, 0xff050d07, 0x500f6fb, 0x705ecee, 0xe5ecf6f4, 0xf9edeefd, 0xf30a03da,
    // -6, 30, 36, 23, -14, -56, 52, 54, -3, -37, 55, 73, 10, -46, -40, 85, -18, -15, -23, -30, -16, 3, -2, -12, -9, 13, -13, -10, -15, -28, 7, -11
    0x17241efa, 0x3634c8f2, 0x4937dbfd, 0x55d8d20a, 0xe2e9f1ee, 0xf4fe03f0, 0xf6f30df7, 0xf507e4f1,
    // 17, 2, 20, -7, -2, 4, -8, -1, 2, 15, -7, 2, 10, -10, -1, -4, 25, -3, -1, -1, -7, 5, -21, 12, 19, 6, -15, 5, 30, 16, -15, -43
    0xf9140211, 0xfff804fe, 0x2f90f02, 0xfcfff60a, 0xfffffd19, 0xceb05f9, 0x5f10613, 0xd5f1101e,
    // 14, -10, 9, -5, 5, -6, -14, 10, 16, -12, -7, -6, -7, -10, -2, -4, 7, -6, -2, 17, -9, -3, -6, -6, -6, -31, -2, 1, 8, 1, 19, -5
    0xfb09f60e, 0xaf2fa05, 0xfaf9f410, 0xfcfef6f9, 0x11fefa07, 0xfafafdf7, 0x1fee1fa, 0xfb130108,
    // -17, 2, -31, 19, 5, 0, 6, -10, -5, 20, 8, 3, 33, -4, 27, -8, -26, -25, -16, 23, 9, 9, 12, -24, -17, -13, 3, 1, 12, 8, 37, -15
    0x13e102ef, 0xf6060005, 0x30814fb, 0xf81bfc21, 0x17f0e7e6, 0xe80c0909, 0x103f3ef, 0xf125080c,
    // 9, 19, -6, -13, -9, 47, 5, 43, 10, -19, -14, 5, -17, 33, -18, -9, -31, -23, 59, -17, 4, 6, 1, -14, 35, -26, 13, 16, -11, 12, -26, 2
    0xf3fa1309, 0x2b052ff7, 0x5f2ed0a, 0xf7ee21ef, 0xef3be9e1, 0xf2010604, 0x100de623, 0x2e60cf5,
    // -9, 28, 10, -19, 16, -45, -16, 38, 32, 26, -15, -4, -35, -9, -35, 44, -3, -3, 11, -12, -4, 0, 23, -26, -26, 27, 12, 12, 23, -3, 4, 6
    0xed0a1cf7, 0x26f0d310, 0xfcf11a20, 0x2cddf7dd, 0xf40bfdfd, 0xe61700fc, 0xc0c1be6, 0x604fd17,
    // -12, 6, -24, 17, 0, 45, -3, 18, -13, -7, -5, -23, -17, 4, 24, -5, -9, 4, -6, 6, 17, -2, -20, 1, 8, 3, -6, -17, -4, 10, -8, -8
    0x11e806f4, 0x12fd2d00, 0xe9fbf9f3, 0xfb1804ef, 0x6fa04f7, 0x1ecfe11, 0xeffa0308, 0xf8f80afc,
    // -22, 19, -4, -6, 17, -12, 31, 14, 4, 7, 2, 2, -18, 24, -6, -18, -10, 1, 3, 3, 16, -6, 39, 26, 2, -9, -13, 16, -21, 31, -5, -42
    0xfafc13ea, 0xe1ff411, 0x2020704, 0xeefa18ee, 0x30301f6, 0x1a27fa10, 0x10f3f702, 0xd6fb1feb,
    // 19, 5, 32, 14, 4, -9, 31, 35, -3, -1, -23, 12, 15, 30, -12, -22, -20, 43, -23, 7, -22, -32, 10, 2, -17, 1, -3, 25, -18, 8, -3, -18
    0xe200513, 0x231ff704, 0xce9fffd, 0xeaf41e0f, 0x7e92bec, 0x20ae0ea, 0x19fd01ef, 0xeefd08ee,
    // 21, -16, -41, -7, 23, -43, 9, -20, 36, -4, 25, 19, -19, 0, 7, -30, -7, -3, 15, -15, 2, -1, 15, 34, -33, -7, 28, 34, 8, 34, -1, -36
    0xf9d7f015, 0xec09d517, 0x1319fc24, 0xe20700ed, 0xf10ffdf9, 0x220fff02, 0x221cf9df, 0xdcff2208,
    // -3, 26, -11, 5, 5, -5, 28, 8, 0, 3, 8, -2, -11, 10, -18, -4, -6, 32, -8, -9, 15, -1, 58, -1, -22, -4, 4, 3, -19, -10, -6, -9
    0x5f51afd, 0x81cfb05, 0xfe080300, 0xfcee0af5, 0xf7f820fa, 0xff3aff0f, 0x304fcea, 0xf7faf6ed,
    // 8, 22, 16, -7, 12, -4, 34, 20, 4, 5, 5, 4, 17, 18, -10, -6, -11, 6, -4, 9, 3, -14, 2, 5, 1, -4, 7, 7, -9, -7, 5, -14
    0xf9101608, 0x1422fc0c, 0x4050504, 0xfaf61211, 0x9fc06f5, 0x502f203, 0x707fc01, 0xf205f9f7,
    // -38, 18, 17, -21, -22, 5, 7, 52, 28, 23, -39, -6, -13, 4, 2, -23, -24, -1, 2, -19, 9, -19, 2, 18, 1, -7, -2, 3, -16, -9, -2, -9
    0xeb1112da, 0x340705ea, 0xfad9171c, 0xe90204f3, 0xed02ffe8, 0x1202ed09, 0x3fef901, 0xf7fef7f0,
    // 21, 6, -6, -7, 8, -4, -2, 1, -7, -1, 15, 15, 39, 8, -20, -3, 53, -18, 51, -15, -40, 19, 14, -70, -79, -37, 37, 8, -38, -39, 14, 69
    0xf9fa0615, 0x1fefc08, 0xf0ffff9, 0xfdec0827, 0xf133ee35, 0xba0e13d8, 0x825dbb1, 0x450ed9da,
    // 30, 0, -13, 17, -12, -20, -15, 22, 9, -18, 12, 8, 38, 6, -6, -4, -21, -2, 10, 14, 19, -8, -3, 3, 8, -5, -2, -9, -24, 10, 4, 2
    0x11f3001e, 0x16f1ecf4, 0x80cee09, 0xfcfa0626, 0xe0afeeb, 0x3fdf813, 0xf7fefb08, 0x2040ae8,
    // -23, -1, -6, -4, 21, -4, 5, 2, 39, 27, -8, 14, 5, 27, -17, -36, -15, -2, 4, 18, 19, -6, 5, -9, 3, 15, 0, 1, -1, -6, 4, 4
    0xfcfaffe9, 0x205fc15, 0xef81b27, 0xdcef1b05, 0x1204fef1, 0xf705fa13, 0x1000f03, 0x404faff,
    // 5, 19, -9, -5, -22, -14, 12, -24, 13, -11, 16, 9, -10, -15, 9, 1, -4, -8, -40, 16, -16, -4, -6, -34, -8, -19, 16, 13, 6, -31, 11, 10
    0xfbf71305, 0xe80cf2ea, 0x910f50d, 0x109f1f6, 0x10d8f8fc, 0xdefafcf0, 0xd10edf8, 0xa0be106,
    // 7, -9, -19, -13, 0, -11, 11, 0, 2, -16, -10, -1, 7, -3, 2, -9, 22, 1, 27, 5, 22, 8, -4, 22, 17, 11, 19, -7, 4, 12, 2, -14
    0xf3edf707, 0xbf500, 0xfff6f002, 0xf702fd07, 0x51b0116, 0x16fc0816, 0xf9130b11, 0xf2020c04,
    // 33, 46, -1, 7, 1, -14, 2, 127, 3, 22, 39, -21, 37, -18, -25, 84, 31, -13, 27, 4, 2, -27, 12, 6, 16, 19, -19, -1, 37, -5, 9, -14
    0x7ff2e21, 0x7f02f201, 0xeb271603, 0x54e7ee25, 0x41bf31f, 0x60ce502, 0xffed1310, 0xf209fb25,
    // -6, 17, -4, 19, -4, -2, 6, -14, 10, 8, 9, 3, -15, -14, -5, 9, -16, -8, -38, 4, -11, 15, 4, 0, -29, -1, 10, -20, -18, -49, 7, 35
    0x13fc11fa, 0xf206fefc, 0x309080a, 0x9fbf2f1, 0x4daf8f0, 0x40ff5, 0xec0affe3, 0x2307cfee,
    // -1, -11, -11, 0, 10, -10, -2, -1, 3, 3, -8, 2, 4, -8, -6, 2, 16, -20, 4, 22, 7, 0, 2, -14, 0, -2, -8, 9, -2, -20, 8, -6
    0xf5f5ff, 0xfffef60a, 0x2f80303, 0x2faf804, 0x1604ec10, 0xf2020007, 0x9f8fe00, 0xfa08ecfe,
    // 22, -7, -15, 12, 13, -11, 25, -37, 19, -11, 5, 19, 2, -10, 1, -10, -19, -9, -28, 8, 26, 12, 3, -11, 12, 2, 14, -4, -27, -13, 4, -4
    0xcf1f916, 0xdb19f50d, 0x1305f513, 0xf601f602, 0x8e4f7ed, 0xf5030c1a, 0xfc0e020c, 0xfc04f3e5,
    // 31, -12, -3, -19, -3, 22, -7, 57, -6, 8, 27, 2, 8, 11, -12, -29, 7, 65, -56, 46, 58, -4, -12, 73, -33, -10, 38, 15, 81, 49, -30, -22
    0xedfdf41f, 0x39f916fd, 0x21b08fa, 0xe3f40b08, 0x2ec84107, 0x49f4fc3a, 0xf26f6df, 0xeae23151,
    // 16, 7, -34, 7, -7, -68, -5, 12, 5, 6, -5, -9, -16, -6, -22, -6, 10, -28, 23, -2, -3, -7, 11, -17, -10, 9, -8, 15, -4, -7, 17, -10
    0x7de0710, 0xcfbbcf9, 0xf7fb0605, 0xfaeafaf0, 0xfe17e40a, 0xef0bf9fd, 0xff809f6, 0xf611f9fc,
    // 12, -25, 33, 3, -8, -26, 8, -11, 33, 10, -15, 23, 2, 32, -4, -37, -3, -19, -11, 11, -3, 1, 4, -14, 2, 4, -6, 0, -15, -12, 14, -7
    0x321e70c, 0xf508e6f8, 0x17f10a21, 0xdbfc2002, 0xbf5edfd, 0xf20401fd, 0xfa0402, 0xf90ef4f1,
    // -11, -3, -3, 13, -5, 6, 3, -8, 11, 3, -8, 3, -15, -15, 17, 3, -21, -13, 1, -10, 6, -9, -3, 17, -10, 14, 12, -4, 0, -2, 9, 28
    0xdfdfdf5, 0xf80306fb, 0x3f8030b, 0x311f1f1, 0xf601f3eb, 0x11fdf706, 0xfc0c0ef6, 0x1c09fe00,
    // -2, -12, 10, 31, 5, 8, 13, 0, 6, 11, -23, 4, 12, -3, 22, 2, 14, 12, -9, -11, -30, 14, -13, 17, 7, -20, -3, -1, -36, 9, 12, -7
    0x1f0af4fe, 0xd0805, 0x4e90b06, 0x216fd0c, 0xf5f70c0e, 0x11f30ee2, 0xfffdec07, 0xf90c09dc,
    // 23, 17, -40, -57, 17, -37, -53, 16, -104, -21, 16, -87, -22, -14, 44, -1, 0, -4, 4, -24, -3, 0, 1, 8, -8, 6, -6, 10, -23, 4, -6, 23
    0xc7d81117, 0x10cbdb11, 0xa910eb98, 0xff2cf2ea, 0xe804fc00, 0x80100fd, 0xafa06f8, 0x17fa04e9,
    // 9, 6, 10, -4, -5, 0, 7, -15, -2, 27, 13, 14, 5, -12, 10, 6, 12, 4, 6, 19, -17, -6, -18, 4, -24, -10, 8, -6, -9, 2, 11, 34
    0xfc0a0609, 0xf10700fb, 0xe0d1bfe, 0x60af405, 0x1306040c, 0x4eefaef, 0xfa08f6e8, 0x220b02f7,
    // 0, -12, 9, -2, 9, 10, 0, 4, 1, 5, -7, 3, -1, 0, 9, -4, -4, 4, -3, -3, 2, -6, 8, -6, 7, 1, 9, -4, -12, -3, -3, 2
    0xfe09f400, 0x4000a09, 0x3f90501, 0xfc0900ff, 0xfdfd04fc, 0xfa08fa02, 0xfc090107, 0x2fdfdf4,
    // 24, -20, -45, 16, -8, 5, -5, -31, -44, 5, 16, -1, -9, -3, -7, 14, 17, -7, 5, -8, 10, 2, 4, 2, 4, 5, 0, 2, -3, -6, -2, -1
    0x10d3ec18, 0xe1fb05f8, 0xff1005d4, 0xef9fdf7, 0xf805f911, 0x204020a, 0x2000504, 0xfffefafd,
    // -1, -3, -13, 0, 6, -11, 15, -33, 2, 19, -1, -14, -12, 6, 5, 17, 7, -57, 11, -51, -4, -4, -43, -23, 24, -9, -25, 24, -42, 121, -37, 26
    0xf3fdff, 0xdf0ff506, 0xf2ff1302, 0x110506f4, 0xcd0bc707, 0xe9d5fcfc, 0x18e7f718, 0x1adb79d6,
    // 20, -16, -3, 7, 24, 22, 19, 1, 6, -13, 6, -13, 1, 23, 8, 3, -2, 4, 1, 3, 0, -5, -2, 14, 22, -10, 5, -4, -22, 0, 1, -6
    0x7fdf014, 0x1131618, 0xf306f306, 0x3081701, 0x30104fe, 0xefefb00, 0xfc05f616, 0xfa0100ea,
    // -6, -17, 7, -23, -2, -29, 2, -18, 15, 31, -3, 2, 16, 59, -2, -22, 12, -2, 18, 3, 10, -12, 11, 8, 5, 8, 1, 7, 8, 3, 9, -1
    0xe907effa, 0xee02e3fe, 0x2fd1f0f, 0xeafe3b10, 0x312fe0c, 0x80bf40a, 0x7010805, 0xff090308,
    // -1, -1, -8, -24, 4, 17, 0, 25, 21, -6, -6, -7, -9, -4, -17, 15, -10, 12, -15, 21, -54, 10, 31, 22, 15, 45, -33, -34, 19, -5, 14, -5
    0xe8f8ffff, 0x19001104, 0xf9fafa15, 0xfeffcf7, 0x15f10cf6, 0x161f0aca, 0xdedf2d0f, 0xfb0efb13,
    // 10, -4, -2, -16, -14, 1, 17, -5, 12, -1, -11, 2, -2, -20, -10, 1, 9, 37, -11, 7, -6, -6, -7, -15, -56, 29, -55, 9, -14, 25, -2, 7
    0xf0fefc0a, 0xfb1101f2, 0x2f5ff0c, 0x1f6ecfe, 0x7f52509, 0xf1f9fafa, 0x9c91dc8, 0x7fe19f2,
    // -23, -20, -11, 9, 7, 31, -51, -9, -51, 46, -5, 15, 17, 10, 26, -36, 16, -4, -6, -28, 10, 5, -7, -13, -17, 3, -13, -7, -12, -11, 27, -42
    0x9f5ece9, 0xf7cd1f07, 0xffb2ecd, 0xdc1a0a11, 0xe4fafc10, 0xf3f9050a, 0xf9f303ef, 0xd61bf5f4,
    // 1, 6, -15, 12, -5, 7, 6, 9, 0, 5, -12, 5, -8, -4, -12, 2, -23, -6, -39, 7, -9, 16, -15, 18, 1, 23, 11, -2, 24, 28, -12, -32
    0xcf10601, 0x90607fb, 0x5f40500, 0x2f4fcf8, 0x7d9fae9, 0x12f110f7, 0xfe0b1701, 0xe0f41c18,
    // 8, 2, 4, 12, -6, -24, 0, 10, 13, 1, -12, 8, -8, -16, -3, -4, -20, -6, -9, -3, 10, -6, -4, 17, 0, 19, 1, -5, -6, 10, -11, 16
    0xc040208, 0xa00e8fa, 0x8f4010d, 0xfcfdf0f8, 0xfdf7faec, 0x11fcfa0a, 0xfb011300, 0x10f50afa,
    // 4, -21, -27, 44, 22, 2, -27, -39, -23, -3, 23, 0, -13, 1, 11, 13, -4, 3, 5, 16, 3, -1, -10, 12, -2, 20, 1, 3, -1, -2, -2, 8
    0x2ce5eb04, 0xd9e50216, 0x17fde9, 0xd0b01f3, 0x100503fc, 0xcf6ff03, 0x30114fe, 0x8fefeff,
    // 24, 19, -10, -28, -37, -8, 11, -38, -6, -11, -34, 10, 20, 4, -2, 28, 29, -31, -5, 5, 0, -31, 15, -8, 76, -32, 1, -18, 75, 6, -13, -63
    0xe4f61318, 0xda0bf8db, 0xadef5fa, 0x1cfe0414, 0x5fbe11d, 0xf80fe100, 0xee01e04c, 0xc1f3064b,
    // 30, -11, 7, -28, -29, 45, 12, -33, -18, -24, -5, -3, 20, 14, 16, -13, -10, 5, -11, 21, 20, 9, -9, 21, 5, 1, -8, -14, -2, 14, 7, 10
    0xe407f51e, 0xdf0c2de3, 0xfdfbe8ee, 0xf3100e14, 0x15f505f6, 0x15f70914, 0xf2f80105, 0xa070efe,
    // 1, 25, -12, 17, 39, 30, 26, 1, -27, 18, 27, -26, -20, -30, 19, 35, -7, 19, 22, 23, 11, 6, 3, 6, 9, 14, 7, -2, -5, -1, -1, 20
    0x11f41901, 0x11a1e27, 0xe61b12e5, 0x2313e2ec, 0x171613f9, 0x603060b, 0xfe070e09, 0x14fffffb,
    // 4, -8, -7, -17, 11, -2, 5, 0, -9, -1, -8, 0, 1, 19, -5, 9, 22, -19, -1, 32, 2, -10, 17, 5, 18, -10, 3, -25, 11, 26, 15, -15
    0xeff9f804, 0x5fe0b, 0xf8fff7, 0x9fb1301, 0x20ffed16, 0x511f602, 0xe703f612, 0xf10f1a0b,
    // 15, -3, 5, 17, -10, 0, 4, 3, -4, 2, 5, 1, -8, 16, 8, -12, 14, 9, -6, 7, -1, -2, 30, -13, 8, 13, -22, -11, 7, 12, 1, 23
    0x1105fd0f, 0x30400f6, 0x10502fc, 0xf40810f8, 0x7fa090e, 0xf31efeff, 0xf5ea0d08, 0x17010c07,
    // 41, 7, 19, -8, -8, 25, 84, 44, -7, 16, -22, -80, -36, -32, 77, -10, 24, -6, 21, -3, -4, 22, 19, -6, 5, 6, 6, -1, -13, 12, -1, 11
    0xf8130729, 0x2c5419f8, 0xb0ea10f9, 0xf64de0dc, 0xfd15fa18, 0xfa1316fc, 0xff060605, 0xbff0cf3,
    // 6, -8, -12, 2, 6, -5, 8, 12, 2, -12, -12, -6, -10, 15, -11, 12, 10, -16, 13, -28, -3, -7, 37, -35, 13, 31, -4, -6, 5, 15, 4, -18
    0x2f4f806, 0xc08fb06, 0xfaf4f402, 0xcf50ff6, 0xe40df00a, 0xdd25f9fd, 0xfafc1f0d, 0xee040f05,
    // 19, 10, 6, -7, 3, 1, 6, -6, 4, 8, 17, 1, 7, 9, -7, 9, -11, 24, 18, 29, 15, -6, -1, -7, 6, 25, 27, -18, -21, 0, -13, -13
    0xf9060a13, 0xfa060103, 0x1110804, 0x9f90907, 0x1d1218f5, 0xf9fffa0f, 0xee1b1906, 0xf3f300eb,
    // -2, 50, 12, 0, -30, 10, 3, -23, 26, 18, 40, -28, -26, -1, -34, 7, 5, 36, -13, -16, -43, -7, -10, -11, 9, -17, 34, -19, -5, 4, -14, -8
    0xc32fe, 0xe9030ae2, 0xe428121a, 0x7deffe6, 0xf0f32405, 0xf5f6f9d5, 0xed22ef09, 0xf8f204fb,
    // -25, -15, 37, 49, 52, 8, 7, -17, 5, 43, 7, 1, -23, -15, -41, -21, -5, 3, 10, -19, 28, -5, -7, -45, -27, -28, -5, -21, 12, 12, 7, 14
    0x3125f1e7, 0xef070834, 0x1072b05, 0xebd7f1e9, 0xed0a03fb, 0xd3f9fb1c, 0xebfbe4e5, 0xe070c0c,
    // 5, 11, -39, -43, -72, -16, 14, -12, 16, -36, 1, -7, 9, -26, -40, -8, -1, -34, 19, 26, 33, 1, 4, -1, -33, 29, -26, 11, 7, -16, -30, -11
    0xd5d90b05, 0xf40ef0b8, 0xf901dc10, 0xf8d8e609, 0x1a13deff, 0xff040121, 0xbe61ddf, 0xf5e2f007,
    // 11, -51, -13, 3, 8, 18, 17, 7, -38, -26, -40, -7, 18, -31, -43, 10, 10, -31, -27, -27, -30, -17, 9, 9, -15, -28, -20, 5, 16, -18, -24, -5
    0x3f3cd0b, 0x7111208, 0xf9d8e6da, 0xad5e112, 0xe5e5e10a, 0x909efe2, 0x5ece4f1, 0xfbe8ee10,
};
static const uint embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // -0.0003397, -0.0006485, -0.0001948, 9.58e-05, 0.0009336, -9.98e-05, -0.0002106, 0.0005374, 0.0002725, -0.0001343, -0.0003028, -0.00043, -5.656e-05, 9.32e-05, 0.0002269, 0.0001009
    0x91508d91, 0x6478a62, 0x868a13a6, 0x10678ae7, 0x88670c77, 0x8f0c8cf6, 0x61c83b5, 0x69d0b6f,
};
static const uint embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -21, -5, -13, -56, 19, -23, 7, -26, -22, -12, 24, -21, 13, -80, 21, 8, 21, 73, -41, 27, -38, -12, -41, 47, 37, -6, 96, -121, -53, 31, -73, -14
    0xc8f3fbeb, 0xe607e913, 0xeb18f4ea, 0x815b00d, 0x1bd74915, 0x2fd7f4da, 0x8760fa25, 0xf2b71fcb,
    // -11, 67, 79, -42, -44, 13, -31, -16, 50, -2, -42, 43, -10, 22, -23, 31, -91, -53, -64, 1, 1, -64, 34, 35, -27, 21, -52, 56, -37, 28, -4, 108
    0xd64f43f5, 0xf0e10dd4, 0x2bd6fe32, 0x1fe916f6, 0x1c0cba5, 0x2322c001, 0x38cc15e5, 0x6cfc1cdb,
    // 1, -9, 9, 48, 3, -3, 8, 49, -69, 24, 29, 58, 17, 44, -18, -8, -11, 127, -15, -10, 20, -38, -38, 20, 87, 18, 19, -31, 71, -39, 28, -9
    0x3009f701, 0x3108fd03, 0x3a1d18bb, 0xf8ee2c11, 0xf6f17ff5, 0x14dada14, 0xe1131257, 0xf71cd947,
    // 56, -30, -42, 33, 49, -6, -36, -4, 29, -4, 15, -7, 24, -28, -47, 19, 22, 60, -20, 14, -10, 45, -5, 19, -2, 11, -27, 10, -8, 26, -20, 58
    0x21d6e238, 0xfcdcfa31, 0xf90ffc1d, 0x13d1e418, 0xeec3c16, 0x13fb2df6, 0xae50bfe, 0x3aec1af8,
    // -16, -16, 9, -51, -5, -42, -39, 19, 14, -22, 45, -1, -10, 6, 70, -22, 0, -2, -11, -87, 15, -19, -80, -97, 46, -81, 40, 1, -38, -8, 99, 35
    0xcd09f0f0, 0x13d9d6fb, 0xff2dea0e, 0xea4606f6, 0xa9f5fe00, 0x9fb0ed0f, 0x128af2e, 0x2363f8da,
    // 11, -46, 0, -8, 2, -20, -2, 13, -5, -8, 3, 3, 4, -15, 3, 31, -88, 14, 26, -52, -16, -69, 30, 6, 42, -40, 54, -45, 48, 6, 0, -34
    0xf800d20b, 0xdfeec02, 0x303f8fb, 0x1f03f104, 0xcc1a0ea8, 0x61ebbf0, 0xd336d82a, 0xde000630,
    // -49, 5, 39, -39, 41, -24, 47, -11, 17, 82, -44, -48, -14, 38, -30, 1, -12, -57, 44, -10, 42, -51, 21, -18, -62, -35, -51, 26, -48, 16, 36, 60
    0xd92705cf, 0xf52fe829, 0xd0d45211, 0x1e226f2, 0xf62cc7f4, 0xee15cd2a, 0x1acdddc2, 0x3c2410d0,
    // -3, 24, -2, -3, 1, 7, 16, 9, -1, 11, 7, 12, -2, -4, 18, -24, -17, -14, -76, 32, 38, 54, 61, 57, -26, 0, 63, 23, -2, 8, 31, -26
    0xfdfe18fd, 0x9100701, 0xc070bff, 0xe812fcfe, 0x20b4f2ef, 0x393d3626, 0x173f00e6, 0xe61f08fe,
    // -22, 20, 20, 23, 4, -5, 19, 8, -5, -15, -33, -9, -24, 8, 28, 35, -22, -15, 6, -14, -23, 7, 4, 11, 16, -26, -6, -50, 10, 69, 30, 4
    0x171414ea, 0x813fb04, 0xf7dff1fb, 0x231c08e8, 0xf206f1ea, 0xb0407e9, 0xcefae610, 0x41e450a,
    // -16, -11, 102, 6, 81, 43, -18, -58, -7, -34, -4, -38, -2, 36, -52, 22, 21, 12, -12, -13, 0, 17, -31, 3, 46, -23, -2, -38, 23, -8, -27, 5
    0x666f5f0, 0xc6ee2b51, 0xdafcdef9, 0x16cc24fe, 0xf3f40c15, 0x3e11100, 0xdafee92e, 0x5e5f817,
    // -7, -11, -4, -8, -9, 5, -20, -1, -8, -4, 9, 5, 2, 10, -18, -43, 9, -48, -40, 107, -21, -8, -6, 8, 25, -16, -7, -6, 14, -12, 38, -11
    0xf8fcf5f9, 0xffec05f7, 0x509fcf8, 0xd5ee0a02, 0x6bd8d009, 0x8faf8eb, 0xfaf9f019, 0xf526f40e,
    // -3, -3, 10, 4, 11, 8, 13, 0, -12, -2, -25, 19, 2, -4, -1, 15, 30, -21, -50, -63, -77, -45, -12, 23, 20, 63, 16, 27, 17, 2, -81, -19
    0x40afdfd, 0xd080b, 0x13e7fef4, 0xffffc02, 0xc1ceeb1e, 0x17f4d3b3, 0x1b103f14, 0xedaf0211,
    // 21, 34, 16, -9, -37, 15, -9, 27, 28, -45, -6, -13, -11, 48, -16, 23, -90, -71, -29, 36, -10, -11, 0, -24, -38, 10, -33, 43, -57, 64, -38, 74
    0xf7102215, 0x1bf70fdb, 0xf3fad31c, 0x17f030f5, 0x24e3b9a6, 0xe800f5f6, 0x2bdf0ada, 0x4ada40c7,
    // -20, 59, 18, 0, -17, -37, -14, 30, -52, -48, 26, 9, 29, 10, -5, -1, -17, 48, -5, -8, 40, -15, 51, 81, 31, -8, -56, 32, 31, 13, 20, 63
    0x123bec, 0x1ef2dbef, 0x91ad0cc, 0xfffb0a1d, 0xf8fb30ef, 0x5133f128, 0x20c8f81f, 0x3f140d1f,
    // -33, -45, -69, -28, -90, -15, -85, 50, -8, -35, -22, 13, -34, -6, -25, 18, -58, -30, -23, -9, 0, -22, 4, 27, 31, 2, -5, -8, -22, 11, -50, 37
    0xe4bbd3df, 0x32abf1a6, 0xdeaddf8, 0x12e7fade, 0xf7e9e2c6, 0x1b04ea00, 0xf8fb021f, 0x25ce0bea,
    // -17, 23, 26, -36, 63, -21, -10, -26, 74, 65, -61, 7, -47, -5, 24, -19, -27, 43, -45, -22, -19, -39, 29, 61, -76, 58, 60, 41, 56, -9, -16, -40
    0xdc1a17ef, 0xe6f6eb3f, 0x7c3414a, 0xed18fbd1, 0xead32be5, 0x3d1dd9ed, 0x293c3ab4, 0xd8f0f738,
    // 29, 43, -12, -2, 7, 4, 18, -49, 45, -5, 6, -9, 8, 54, 5, -5, 72, 92, 11, 12, 39, 24, 13, 46, 6, -25, 6, -93, 0, -1, 7, -1
    0xfef42b1d, 0xcf120407, 0xf706fb2d, 0xfb053608, 0xc0b5c48, 0x2e0d1827, 0xa306e706, 0xff07ff00,
    // -51, 14, 30, 9, -67, 4, 5, 9, -22, 6, 23, -28, 31, 35, 27, 20, -28, -15, -27, 18, -56, 27, 22, 11, -56, 18, 57, 17, 9, 26, -41, 7
    0x91e0ecd, 0x90504bd, 0xe41706ea, 0x141b231f, 0x12e5f1e4, 0xb161bc8, 0x113912c8, 0x7d71a09,
    // 47, 12, 11, -49, 43, -2, 17, 49, 14, -16, 51, -29, -46, -33, -18, -8, 48, 17, 21, 0, 18, 62, -14, 20, 1, 9, -1, -8, 82, 2, 15, 33
    0xcf0b0c2f, 0x3111fe2b, 0xe333f00e, 0xf8eedfd2, 0x151130, 0x14f23e12, 0xf8ff0901, 0x210f0252,
    // -4, -32, 22, 7, 17, 18, -8, 9, -27, -29, -46, 17, 6, 7, -47, 11, 20, -49, -14, 29, -55, 8, -36, -47, -41, 52, 74, -4, -25, 77, -38, -14
    0x716e0fc, 0x9f81211, 0x11d2e3e5, 0xbd10706, 0x1df2cf14, 0xd1dc08c9, 0xfc4a34d7, 0xf2da4de7,
    // 27, 43, -1, -1, -17, -25, -5, 38, 49, -28, 5, -49, 1, 2, 26, -6, 40, -38, 8, 16, 2, -38, 11, 40, -64, -23, 44, -60, -84, 35, -29, 4
    0xffff2b1b, 0x26fbe7ef, 0xcf05e431, 0xfa1a0201, 0x1008da28, 0x280bda02, 0xc42ce9c0, 0x4e323ac,
    // -5, -63, 40, -27, 14, -11, 21, 16, 24, 65, -5, -57, -7, -22, -37, -5, -11, -17, 28, -20, -14, -18, -22, -29, -22, -44, 14, -39, -9, 15, 8, 44
    0xe528c1fb, 0x1015f50e, 0xc7fb4118, 0xfbdbeaf9, 0xec1ceff5, 0xe3eaeef2, 0xd90ed4ea, 0x2c080ff7,
    // 41, -28, -53, -11, 25, -22, -24, -4, 63, 58, 40, -14, 34, -21, -46, -41, 11, 51, 11, 19, 6, -3, 10, -26, 20, 56, -5, -3, 23, 45, 25, 50
    0xf5cbe429, 0xfce8ea19, 0xf2283a3f, 0xd7d2eb22, 0x130b330b, 0xe60afd06, 0xfdfb3814, 0x32192d17,
    // 52, 69, -34, 58, 6, -82, 68, 55, -60, -28, -6, -45, 75, -26, -78, 8, 9, -9, 14, -32, -3, -16, -47, -63, 5, -36, -44, -27, -16, 4, 21, 49
    0x3ade4534, 0x3744ae06, 0xd3fae4c4, 0x8b2e64b, 0xe00ef709, 0xc1d1f0fd, 0xe5d4dc05, 0x311504f0,
    // -22, -48, 0, -27, 2, 52, -68, -16, 62, 17, 39, -11, -49, -17, 7, 3, -14, 46, -36, 18, -3, 46, 16, 62, 64, -10, -1, 5, 16, 35, -51, 84
    0xe500d0ea, 0xf0bc3402, 0xf527113e, 0x307efcf, 0x12dc2ef2, 0x3e102efd, 0x5fff640, 0x54cd2310,
    // 12, 1, 4, -18, 2, 11, -15, -4, 1, -3, 38, 4, 2, 2, -32, -82, -16, -10, 30, 74, 37, 11, -5, 11, 34, -83, -13, -19, -43, 15, 73, -2
    0xee04010c, 0xfcf10b02, 0x426fd01, 0xaee00202, 0x4a1ef6f0, 0xbfb0b25, 0xedf3ad22, 0xfe490fd5,
    // -56, -16, -5, 25, 26, -23, 65, 30, 62, -31, 16, 21, -8, -37, -10, -26, -76, -6, 24, -5, -30, 22, 31, -14, -6, 23, 64, -27, 38, 12, 16, -22
    0x19fbf0c8, 0x1e41e91a, 0x1510e13e, 0xe6f6dbf8, 0xfb18fab4, 0xf21f16e2, 0xe54017fa, 0xea100c26,
    // -9, 9, -15, 18, -36, 16, 15, 10, -7, 14, 15, -8, -6, -30, -17, -14, 53, -31, -76, 48, 5, 24, -20, -18, 34, 41, 2, 33, -3, 15, -24, 17
    0x12f109f7, 0xa0f10dc, 0xf80f0ef9, 0xf2efe2fa, 0x30b4e135, 0xeeec1805, 0x21022922, 0x11e80ffd,
    // -4, -8, -21, 7, 21, -42, -5, 0, 24, 19, 17, -16, 8, -7, 20, 20, -32, -52, -68, 24, -7, -76, -11, 19, 46, 14, 0, 15, 15, -117, 7, -23
    0x7ebf8fc, 0xfbd615, 0xf0111318, 0x1414f908, 0x18bccce0, 0x13f5b4f9, 0xf000e2e, 0xe9078b0f,
    // 22, -68, 2, -15, 6, -9, -26, 4, 10, -13, 12, -29, 11, -7, -45, 27, -34, 22, 35, -26, -26, 20, -85, -34, 46, -38, -57, -22, 9, -5, -11, 33
    0xf102bc16, 0x4e6f706, 0xe30cf30a, 0x1bd3f90b, 0xe62316de, 0xdeab14e6, 0xeac7da2e, 0x21f5fb09,
    // 110, 64, 24, -86, 54, 36, 2, 58, -74, 23, -28, 11, -81, -10, -4, 5, -17, -75, -28, -8, -41, 22, 19, 25, -19, 27, 85, -21, 59, -14, 5, 22
    0xaa18406e, 0x3a022436, 0xbe417b6, 0x5fcf6af, 0xf8e4b5ef, 0x191316d7, 0xeb551bed, 0x1605f23b,
    // -9, 28, 35, -47, -42, 13, 1, -38, -13, -54, -14, 35, 14, -77, -14, 18, -122, 27, -22, 11, -19, 11, 49, 38, 7, 32, -29, 72, -35, 53, 10, 127
    0xd1231cf7, 0xda010dd6, 0x23f2caf3, 0x12f2b30e, 0xbea1b86, 0x26310bed, 0x48e32007, 0x7f0a35dd,
    // -20, 33, 3, -3, 1, -16, -53, -25, -18, -67, 7, 5, 5, 47, -7, 20, -59, 16, 16, 18, 12, -5, -15, -7, 66, -6, 15, -4, -12, -5, -77, -7
    0xfd0321ec, 0xe7cbf001, 0x507bdee, 0x14f92f05, 0x121010c5, 0xf9f1fb0c, 0xfc0ffa42, 0xf9b3fbf4,
    // -2, 10, -37, -39, -20, 16, 7, -52, -61, -27, 8, 33, -20, 13, -41, 56, 27, -4, -4, 37, -14, 21, 15, -17, 15, 11, 47, -99, 7, 17, 31, -20
    0xd9db0afe, 0xcc0710ec, 0x2108e5c3, 0x38d70dec, 0x25fcfc1b, 0xef0f15f2, 0x9d2f0b0f, 0xec1f1107,
    // -13, 11, 21, -47, -54, -47, 5, 49, -46, -9, 66, -14, 71, -42, -43, 16, 73, -27, -5, 21, 4, 30, -29, -2, 63, 4, 2, -33, -49, 23, 16, 19
    0xd1150bf3, 0x3105d1ca, 0xf242f7d2, 0x10d5d647, 0x15fbe549, 0xfee31e04, 0xdf02043f, 0x131017cf,
    // 15, -2, 4, -5, 18, 28, -7, 52, 27, 10, 56, -9, -22, 75, 16, 29, -82, -45, -23, 26, -3, -61, 5, 30, -76, -9, 7, -18, -110, 69, -45, 88
    0xfb04fe0f, 0x34f91c12, 0xf7380a1b, 0x1d104bea, 0x1ae9d3ae, 0x1e05c3fd, 0xee07f7b4, 0x58d34592,
    // 1, -28, -20, 12, -3, 31, -1, -15, -27, 35, 25, 81, -37, 62, -33, 18, -41, 54, -20, -18, 1, 53, 20, 4, 106, 29, -43, 50, 77, -36, 20, 3
    0xcece401, 0xf1ff1ffd, 0x511923e5, 0x12df3edb, 0xeeec36d7, 0x4143501, 0x32d51d6a, 0x314dc4d,
    // 23, -6, -68, 50, -28, 4, 8, 27, -33, -52, -30, 16, -3, -16, 20, -6, -1, 35, 62, -19, 18, -9, 2, -27, 12, -2, 1, -42, 44, -36, -8, -35
    0x32bcfa17, 0x1b0804e4, 0x10e2ccdf, 0xfa14f0fd, 0xed3e23ff, 0xe502f712, 0xd601fe0c, 0xddf8dc2c,
    // 29, -7, 17, -34, -50, 39, -11, -111, 44, 55, -77, 105, 16, -10, -75, 5, -30, 52, 11, -47, 14, 2, 29, 17, 19, -7, -34, 76, 57, -47, 118, 68
    0xde11f91d, 0x91f527ce, 0x69b3372c, 0x5b5f610, 0xd10b34e2, 0x111d020e, 0x4cdef913, 0x4476d139,
    // 28, -8, 11, 31, -1, 33, -45, -13, -1, -53, 74, 28, -4, -21, 61, -18, -32, 30, 13, 11, 22, -14, 47, 63, -59, 11, -57, 43, -1, 51, -2, 97
    0x1f0bf81c, 0xf3d321ff, 0x1c4acbff, 0xee3debfc, 0xb0d1ee0, 0x3f2ff216, 0x2bc70bc5, 0x61fe33ff,
    // 9, 38, 48, -5, -36, 6, -25, 3, 18, -41, -27, 24, 18, -54, 16, 14, 35, 77, -44, 12, 7, -30, -51, 23, 67, 1, 65, -104, 5, -25, -21, -29
    0xfb302609, 0x3e706dc, 0x18e5d712, 0xe10ca12, 0xcd44d23, 0x17cde207, 0x98410143, 0xe3ebe705,
    // 6, 10, -12, 4, 8, 27, -10, 3, -4, 16, 2, 8, -1, 0, -59, 31, -21, 59, 57, -9, -56, -43, 45, 4, -6, -9, -9, -40, -35, 74, 45, 22
    0x4f40a06, 0x3f61b08, 0x80210fc, 0x1fc500ff, 0xf7393beb, 0x42dd5c8, 0xd8f7f7fa, 0x162d4add,
    // -47, -25, -11, -67, 87, 95, -44, 80, -5, -58, -74, 6, 11, 2, -43, 26, 6, -12, 11, -36, 4, -1, 19, 14, 19, -33, -15, -37, 9, -21, 31, 48
    0xbdf5e7d1, 0x50d45f57, 0x6b6c6fb, 0x1ad5020b, 0xdc0bf406, 0xe13ff04, 0xdbf1df13, 0x301feb09,
    // 2, -15, -5, 22, 2, 0, 16, 7, -4, -2, -29, 0, -4, -10, 17, 3, 7, -3, -11, 10, 22, -1, 97, -1, 3, 22, 11, -11, -23, -14, 12, -7
    0x16fbf102, 0x7100002, 0xe3fefc, 0x311f6fc, 0xaf5fd07, 0xff61ff16, 0xf50b1603, 0xf90cf2e9,
    // 22, 8, 29, -2, -70, 63, 27, 21, 31, -24, -24, 23, 29, 71, -73, 27, -29, 66, 19, 11, -17, 82, 3, 7, -10, 28, 40, 2, 24, 67, -44, 31
    0xfe1d0816, 0x151b3fba, 0x17e8e81f, 0x1bb7471d, 0xb1342e3, 0x70352ef, 0x2281cf6, 0x1fd44318,
    // 21, -14, -9, -11, 12, -17, 12, 16, 21, -6, 16, -50, 8, 1, 8, 6, -5, 23, -9, -23, 88, 9, -15, 44, -1, -49, -49, -28, 36, -66, 31, 34
    0xf5f7f215, 0x100cef0c, 0xce10fa15, 0x6080108, 0xe9f717fb, 0x2cf10958, 0xe4cfcfff, 0x221fbe24,
    // 10, -95, 12, -28, 29, -41, -52, -9, -9, -49, -37, 18, -6, 35, -26, -20, 12, -33, -16, -28, 5, -9, -34, 27, 7, -37, 6, -22, 35, 22, -1, 38
    0xe40ca10a, 0xf7ccd71d, 0x12dbcff7, 0xece623fa, 0xe4f0df0c, 0x1bdef705, 0xea06db07, 0x26ff1623,
    // -40, -13, 2, -1, 15, -19, 8, 3, -87, 9, 23, 52, -2, -25, -11, 4, -100, 39, -22, -14, 9, -42, 20, 19, 51, 29, -43, 62, 33, 1, 11, 52
    0xff02f3d8, 0x308ed0f, 0x341709a9, 0x4f5e7fe, 0xf2ea279c, 0x1314d609, 0x3ed51d33, 0x340b0121,
    // -11, -80, 45, 93, -86, -47, -31, -55, -29, -17, -2, -52, -33, 10, -25, -5, 31, -1, 7, -14, -5, -23, -25, 1, -17, -14, -23, -26, -10, 23, -4, 3
    0x5d2db0f5, 0xc9e1d1aa, 0xccfeefe3, 0xfbe70adf, 0xf207ff1f, 0x1e7e9fb, 0xe6e9f2ef, 0x3fc17f6,
    // -12, 15, 8, 24, 5, -2, 16, 0, -1, 6, -34, -4, -7, 2, 20, -65, -31, 39, 57, 87, 94, -26, -6, -39, -32, -34, -33, -46, 67, 21, 31, 29
    0x18080ff4, 0x10fe05, 0xfcde06ff, 0xbf1402f9, 0x573927e1, 0xd9fae65e, 0xd2dfdee0, 0x1d1f1543,
    // 90, -89, -45, 71, 29, 77, 28, -28, 17, 7, 17, 9, 21, -58, 18, -9, -15, -18, 18, -19, -18, -12, -63, -60, 1, -54, -5, -29, -26, -8, 11, 55
    0x47d3a75a, 0xe41c4d1d, 0x9110711, 0xf712c615, 0xed12eef1, 0xc4c1f4ee, 0xe3fbca01, 0x370bf8e6,
    // -33, -12, -53, -17, 44, 9, 27, -19, -10, 4, 36, -49, -29, 18, 16, 9, -43, -9, -46, 40, -17, -42, -28, 27, -40, 2, 14, -59, -76, 72, -99, 51
    0xefcbf4df, 0xed1b092c, 0xcf2404f6, 0x91012e3, 0x28d2f7d5, 0x1be4d6ef, 0xc50e02d8, 0x339d48b4,
    // 9, -4, -8, -21, 0, -7, 11, 0, 12, 12, 26, 13, 10, 0, 12, 56, -52, -4, 24, 22, -1, 36, -24, -23, 12, -13, 8, -7, -18, -43, -43, 42
    0xebf8fc09, 0xbf900, 0xd1a0c0c, 0x380c000a, 0x1618fccc, 0xe9e824ff, 0xf908f30c, 0x2ad5d5ee,
    // -6, 19, 8, 1, -16, 7, 16, 4, -12, 3, -1, 17, 2, -3, 16, 15, -45, -15, -81, 2, -3, -2, 14, -8, 0, -29, -45, -34, 7, 6, -1, -23
    0x10813fa, 0x41007f0, 0x11ff03f4, 0xf10fd02, 0x2aff1d3, 0xf80efefd, 0xded3e300, 0xe9ff0607,
    // 6, -43, -8, 25, 47, 1, 13, -20, 22, -17, -51, -28, -19, 14, 11, -78, -38, 1, 22, 16, 42, -15, -65, 9, -21, -34, 13, 45, 34, -44, -53, -1
    0x19f8d506, 0xec0d012f, 0xe4cdef16, 0xb20b0eed, 0x101601da, 0x9bff12a, 0x2d0ddeeb, 0xffcbd422,
    // 19, 8, -1, -34, -43, 30, 35, 1, -13, 18, 44, 0, 10, -15, -14, -36, -36, 20, 57, -46, 21, -70, -25, -16, 19, -18, -36, -19, 11, 20, -31, -13
    0xdeff0813, 0x1231ed5, 0x2c12f3, 0xdcf2f10a, 0xd23914dc, 0xf0e7ba15, 0xeddcee13, 0xf3e1140b,
    // -18, 3, 10, 19, -21, 26, -16, 5, -16, -14, 8, 5, 4, -1, 21, 31, -1, -53, -80, -44, 20, -42, -34, 9, 77, -56, 43, 0, -29, -81, 36, -15
    0x130a03ee, 0x5f01aeb, 0x508f2f0, 0x1f15ff04, 0xd4b0cbff, 0x9ded614, 0x2bc84d, 0xf124afe3,
    // 25, -25, 59, 18, -42, 16, -2, 39, 24, 51, -12, 59, 12, -14, -17, -12, -14, 30, 42, -36, 20, 2, 14, -10, 60, -3, -37, 55, 52, -21, 109, 32
    0x123be719, 0x27fe10d6, 0x3bf43318, 0xf4eff20c, 0xdc2a1ef2, 0xf60e0214, 0x37dbfd3c, 0x206deb34,
    // 23, -19, -13, 33, -74, -4, -32, -35, -82, 85, -63, -96, 98, 39, 88, -27, -6, -38, -60, -14, -65, 78, 71, 80, -9, 42, 77, -14, 60, 40, 5, 53
    0x21f3ed17, 0xdde0fcb6, 0xa0c155ae, 0xe5582762, 0xf2c4dafa, 0x50474ebf, 0xf24d2af7, 0x3505283c,
    // -49, 10, 15, 43, -41, 71, -57, 10, -31, -21, 15, -60, -17, -23, -66, 25, 26, -14, -5, -22, -7, -14, 20, -6, 55, 6, -35, -43, 21, -17, -16, 64
    0x2b0f0acf, 0xac747d7, 0xc40febe1, 0x19bee9ef, 0xeafbf21a, 0xfa14f2f9, 0xd5dd0637, 0x40f0ef15,
    // -18, 2, 11, 37, 24, 10, 15, 6, -16, 3, -31, 10, -12, 9, 22, -6, -12, -29, -42, -20, 4, 40, -5, 10, -32, 10, -41, 4, -7, -38, -79, -16
    0x250b02ee, 0x60f0a18, 0xae103f0, 0xfa1609f4, 0xecd6e3f4, 0xafb2804, 0x4d70ae0, 0xf0b1daf9,
    // 4, -28, 82, 49, -24, 12, -50, 113, -3, -11, 23, 39, 4, -9, 37, -2, 41, 112, -41, 16, 11, 21, -73, 8, 114, 27, 58, -110, 43, -34, -36, -90
    0x3152e404, 0x71ce0ce8, 0x2717f5fd, 0xfe25f704, 0x10d77029, 0x8b7150b, 0x923a1b72, 0xa6dcde2b,
    // -5, 13, 12, -62, -52, 13, 27, -1, -6, -30, 40, -16, 1, 32, 32, 5, 27, -3, 29, -62, -2, -11, -1, 38, -10, -40, -3, -22, 15, -32, 49, 34
    0xc20c0dfb, 0xff1b0dcc, 0xf028e2fa, 0x5202001, 0xc21dfd1b, 0x26fff5fe, 0xeafdd8f6, 0x2231e00f,
    // -46, -6, 14, -50, -21, -17, -26, -8, 26, 31, -4, -5, -22, 21, -13, -10, 37, 96, 0, 16, 36, 10, 15, 66, 38, -30, 37, -45, 51, 11, -19, 20
    0xce0efad2, 0xf8e6efeb, 0xfbfc1f1a, 0xf6f315ea, 0x10006025, 0x420f0a24, 0xd325e226, 0x14ed0b33,
};
static const uint embedded_decoder3_ResidualBlock_2_body_pw_expand_bias_dwords[32] = {
    // -0.0681, -0.1133, -0.08777, 0.09656, -0.2795, -0.134, 0.0726, -0.2375, -0.02174, -0.0473, 0.00256, -0.05298, -0.0239, -0.1627, -0.067, -0.2996
    0xaf40ac5c, 0x2e2ead9e, 0xb04ab479, 0xb39a2ca5, 0xaa0ea591, 0xaac8193e, 0xb135a61e, 0xb4cbac4a,
    // 0.1085, -0.1464, -0.09155, -0.3042, 0.0097, -0.1707, -0.1963, -0.224, -0.258, -0.101, 0.1014, 0.07214, -0.05804, 0.09644, -0.2017, -0.145
    0xb0af2ef2, 0xb4deaddc, 0xb17620f7, 0xb32bb248, 0xae77b421, 0x2c9e2e7d, 0x2e2cab6e, 0xb0a4b274,
    // -0.02496, -0.1307, -0.01136, -0.1148, -0.01473, -0.0443, -0.02963, -0.1404, -0.0719, -0.0244, -0.003546, -0.02313, -0.0371, -0.02116, -0.158, -0.0712
    0xb02fa664, 0xaf59a1d1, 0xa9aca38b, 0xb07ea796, 0xa63fac9a, 0xa5ec9b43, 0xa56ba8c0, 0xac8fb10e,
    // -0.0631, -0.0994, -0.0475, -0.06824, 0.0831, 0.0808, -0.1609, -0.0609, -0.10065, 0.08044, -0.2017, -0.2333, 0.0658, -0.0773, 0.1769, -0.0859
    0xae5dac0a, 0xac5eaa14, 0x2d2c2d52, 0xabccb126, 0x2d26ae71, 0xb377b274, 0xacf22c36, 0xad7f31a9,
};
static const uint embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -107, -6, 14, -3, 29, -1, 26, 19, 14, -47, 9, 13, -54, 40, 65, -75, -22, -65, -1, 0, -8, -64, 1, -34, -31, -4, -63, 41, 10, 42, 56, 44
    0xfd0efa95, 0x131aff1d, 0xd09d10e, 0xb54128ca, 0xffbfea, 0xde01c0f8, 0x29c1fce1, 0x2c382a0a,
    // -1, 4, 2, 38, -106, 28, 57, -96, -14, -36, -26, 11, 23, -11, 30, -4, 32, -32, 67, 13, -33, -3, 46, 18, 24, 17, -9, -20, -10, 49, -10, 95
    0x260204ff, 0xa0391c96, 0xbe6dcf2, 0xfc1ef517, 0xd43e020, 0x122efddf, 0xecf71118, 0x5ff631f6,
    // 9, 22, 48, 19, -18, -18, -19, 7, -32, -27, 2, -1, 62, 35, 27, 16, 26, -40, -12, -16, 10, -5, -10, -17, -24, -1, -29, -1, -19, -57, 109, -100
    0x13301609, 0x7edeeee, 0xff02e5e0, 0x101b233e, 0xf0f4d81a, 0xeff6fb0a, 0xffe3ffe8, 0x9c6dc7ed,
    // 28, 0, 27, 24, 11, 25, -15, 13, 5, 10, -94, 2, 42, -19, -78, 12, 77, 54, 9, -45, -8, -10, 1, 12, 8, -3, -34, 61, -1, -36, -40, 13
    0x181b001c, 0xdf1190b, 0x2a20a05, 0xcb2ed2a, 0xd309364d, 0xc01f6f8, 0x3ddefd08, 0xdd8dcff,
    // -73, -6, 59, -3, 49, 4, 48, 24, -32, 100, 11, -14, -30, -2, -80, -21, -4, 36, 12, -24, -27, 33, 18, 18, 4, -10, 13, 11, 38, -22, -79, -11
    0xfd3bfab7, 0x18300431, 0xf20b64e0, 0xebb0fee2, 0xe80c24fc, 0x121221e5, 0xb0df604, 0xf5b1ea26,
    // -15, -55, -23, 44, -8, -67, 27, 31, 15, -11, 8, 14, 60, -24, -18, -25, -29, -47, -39, -39, 4, 19, 13, 18, -39, 33, 68, -32, 25, 2, -9, -26
    0x2ce9c9f1, 0x1f1bbdf8, 0xe08f50f, 0xe7eee83c, 0xd9d9d1e3, 0x120d1304, 0xe04421d9, 0xe6f70219,
    // 37, 48, -9, -6, 25, 31, -41, 0, -6, -96, 31, -28, 31, -23, 50, -23, 15, 64, -35, -9, 36, -22, 22, 25, -2, -15, 52, 10, -2, 9, -18, 19
    0xfaf73025, 0xd71f19, 0xe41fa0fa, 0xe932e91f, 0xf7dd400f, 0x1916ea24, 0xa34f1fe, 0x13ee09fe,
    // -58, 29, -69, -47, 40, -4, -28, -26, -4, -6, 63, -9, -12, 18, -22, 4, -47, -49, 54, -48, 6, -15, 48, 3, -4, 25, -26, 4, -6, -36, 20, 72
    0xd1bb1dc6, 0xe6e4fc28, 0xf73ffafc, 0x4ea12f4, 0xd036cfd1, 0x330f106, 0x4e619fc, 0x4814dcfa,
    // 86, 7, -6, 32, 4, -21, -53, -21, 6, -46, 9, -28, 56, -64, 46, 25, 18, 24, 81, -15, 38, -52, 11, 39, 20, 16, -31, -6, 17, -19, 43, -39
    0x20fa0756, 0xebcbeb04, 0xe409d206, 0x192ec038, 0xf1511812, 0x270bcc26, 0xfae11014, 0xd92bed11,
    // -26, -48, -65, -49, 33, 48, -23, -20, 32, 9, -69, -25, 35, -3, -16, -4, 91, -1, 20, -34, -22, 11, 9, -23, -1, -42, -13, 20, 48, -73, -18, 25
    0xcfbfd0e6, 0xece93021, 0xe7bb0920, 0xfcf0fd23, 0xde14ff5b, 0xe9090bea, 0x14f3d6ff, 0x19eeb730,
    // 72, -34, 32, 14, 20, -11, 36, 52, 12, 23, -7, 18, 9, -31, -5, -19, 24, 12, -4, -32, 0, -37, 42, 1, 17, 17, -4, -18, 9, 17, 106, 44
    0xe20de48, 0x3424f514, 0x12f9170c, 0xedfbe109, 0xe0fc0c18, 0x12adb00, 0xeefc1111, 0x2c6a1109,
    // -2, -1, -2, -70, 31, -7, 2, -14, -14, 26, 6, -31, -55, 11, -4, -60, -52, -46, -3, 3, 41, 24, 3, 20, -31, -29, -98, -10, -14, -29, 10, 24
    0xbafefffe, 0xf202f91f, 0xe1061af2, 0xc4fc0bc9, 0x3fdd2cc, 0x14031829, 0xf69ee3e1, 0x180ae3f2,
    // 68, 40, -34, 44, -53, 22, -11, -51, -44, 27, 42, -8, 66, 49, 31, -38, -85, -30, -17, 20, -8, 3, 51, -16, -56, 52, 7, 22, -45, -16, -40, -9
    0x2cde2844, 0xcdf516cb, 0xf82a1bd4, 0xda1f3142, 0x14efe2ab, 0xf03303f8, 0x160734c8, 0xf7d8f0d3,
    // 22, -11, 31, -108, 11, -50, 48, -6, -46, 33, 47, 18, 28, 0, -29, -19, -21, 5, -26, -42, -44, -53, 5, 22, 10, 39, -13, 34, -12, -7, -32, 0
    0x941ff516, 0xfa30ce0b, 0x122f21d2, 0xede3001c, 0xd6e605eb, 0x1605cbd4, 0x22f3270a, 0xe0f9f4,
    // 6, 48, 127, -8, -54, -2, 14, -16, 9, 19, -1, -14, 64, 73, 27, -4, -51, 34, -79, 25, -52, 7, 27, -41, -39, 2, -64, 24, -12, -14, -2, -86
    0xf87f3006, 0xf00efeca, 0xf2ff1309, 0xfc1b4940, 0x19b122cd, 0xd71b07cc, 0x18c002d9, 0xaafef2f4,
    // 77, 98, 2, 51, 29, 66, -36, 20, -51, 67, 48, -58, -20, -2, -39, 6, -63, 8, -13, -80, -16, 4, -52, -9, -3, 1, 44, 32, 25, -21, -23, -34
    0x3302624d, 0x14dc421d, 0xc63043cd, 0x6d9feec, 0xb0f308c1, 0xf7cc04f0, 0x202c01fd, 0xdee9eb19,
    // 120, 56, 22, 21, 32, 11, -27, 9, 8, 5, -46, 10, 56, -2, -26, -21, 34, -17, 34, -48, 83, 55, -31, 11, -33, -22, -64, 11, 14, 11, -5, -71
    0x15163878, 0x9e50b20, 0xad20508, 0xebe6fe38, 0xd022ef22, 0xbe13753, 0xbc0eadf, 0xb9fb0b0e,
    // 13, -34, 61, 21, 86, -48, -116, 31, 53, -21, 22, 2, 7, 3, 51, -74, -78, -69, -4, -98, 15, 34, 12, 11, -13, 44, 30, -41, -78, -113, 21, -51
    0x153dde0d, 0x1f8cd056, 0x216eb35, 0xb6330307, 0x9efcbbb2, 0xb0c220f, 0xd71e2cf3, 0xcd158fb2,
    // 40, 10, -5, -11, -7, 2, 32, 12, 35, 85, 15, -22, 6, -68, -90, -16, 4, -65, -68, 1, -24, 22, -38, 81, 60, 1, -41, 0, -25, 27, 74, -20
    0xf5fb0a28, 0xc2002f9, 0xea0f5523, 0xf0a6bc06, 0x1bcbf04, 0x51da16e8, 0xd7013c, 0xec4a1be7,
    // -26, -38, 4, -12, 83, -40, -38, 71, -27, -14, 5, 11, 23, 61, 18, -19, -4, -19, -66, 59, -56, 8, 41, 13, 13, 2, 6, -7, -20, 8, 11, -65
    0xf404dae6, 0x47dad853, 0xb05f2e5, 0xed123d17, 0x3bbeedfc, 0xd2908c8, 0xf906020d, 0xbf0b08ec,
    // -12, -23, 8, -20, 17, 4, -23, 8, -7, -63, -1, 9, 11, 17, 61, -26, 15, -11, -47, 25, -39, -37, 12, -31, -37, 2, -33, -17, 19, 11, -61, -4
    0xec08e9f4, 0x8e90411, 0x9ffc1f9, 0xe63d110b, 0x19d1f50f, 0xe10cdbd9, 0xefdf02db, 0xfcc30b13,
    // 12, -64, -1, -6, -51, 56, 43, -54, 8, -15, 40, 42, 19, -22, 26, 0, -35, -2, 78, 9, 15, -1, 42, -11, -18, 26, 77, -10, 10, 1, -5, 43
    0xfaffc00c, 0xca2b38cd, 0x2a28f108, 0x1aea13, 0x94efedd, 0xf52aff0f, 0xf64d1aee, 0x2bfb010a,
    // -22, 14, -28, 28, 23, 8, -11, 14, 58, -16, -24, 0, -1, 30, 17, -1, 3, 36, -17, -68, 28, -46, -19, -7, 11, -28, 32, 36, 50, -37, -45, 3
    0x1ce40eea, 0xef50817, 0xe8f03a, 0xff111eff, 0xbcef2403, 0xf9edd21c, 0x2420e40b, 0x3d3db32,
    // -17, 28, 14, 54, 47, 19, -45, 30, 35, -21, -15, -69, -12, 20, -11, 25, 27, -12, -15, -63, -1, -6, -9, 12, 42, -12, 3, 3, -22, -12, 12, 4
    0x360e1cef, 0x1ed3132f, 0xbbf1eb23, 0x19f514f4, 0xc1f1f41b, 0xcf7faff, 0x303f42a, 0x40cf4ea,
    // 37, 49, -38, -32, -5, 0, -81, 39, 9, -47, -31, -26, 25, -24, 2, 40, 57, -59, -39, -12, 15, -65, 4, -21, -47, -10, 28, 18, 10, -36, 1, -15
    0xe0da3125, 0x27af00fb, 0xe6e1d109, 0x2802e819, 0xf4d9c539, 0xeb04bf0f, 0x121cf6d1, 0xf101dc0a,
    // 20, -38, -5, 32, 22, 18, -18, -2, 68, -1, 46, 42, 54, -10, 11, 32, -51, 33, 89, -48, 39, -20, -41, 2, -36, -4, 19, -1, -16, -55, 8, -18
    0x20fbda14, 0xfeee1216, 0x2a2eff44, 0x200bf636, 0xd05921cd, 0x2d7ec27, 0xff13fcdc, 0xee08c9f0,
    // -37, -8, -23, 43, -8, 20, 31, 5, 10, 31, 13, -20, -54, -57, -21, 1, -4, -16, -14, -15, 70, 1, -15, 43, 40, -18, 14, -28, 41, 38, -6, 28
    0x2be9f8db, 0x51f14f8, 0xec0d1f0a, 0x1ebc7ca, 0xf1f2f0fc, 0x2bf10146, 0xe40eee28, 0x1cfa2629,
    // -11, -3, 3, 46, -2, -32, -25, 10, 24, 45, 48, -2, -2, -7, -68, -22, -20, 48, -20, 26, -1, -49, -5, -37, 17, -26, 13, 53, -10, 11, -42, -6
    0x2e03fdf5, 0xae7e0fe, 0xfe302d18, 0xeabcf9fe, 0x1aec30ec, 0xdbfbcfff, 0x350de611, 0xfad60bf6,
    // 18, -10, 23, 39, -38, 10, -2, -28, 32, -8, -33, 0, 3, -12, 6, 34, 9, 27, -12, 21, -18, 31, 1, 1, 4, -65, -18, 4, 22, -16, 40, 11
    0x2717f612, 0xe4fe0ada, 0xdff820, 0x2206f403, 0x15f41b09, 0x1011fee, 0x4eebf04, 0xb28f016,
    // -44, -44, -73, -64, -13, 29, 70, 38, -8, 1, 19, -8, 38, 9, -4, -3, -41, -46, 14, 28, 23, -14, 24, -15, -21, -18, 21, 13, 16, -5, -23, -54
    0xc0b7d4d4, 0x26461df3, 0xf81301f8, 0xfdfc0926, 0x1c0ed2d7, 0xf118f217, 0xd15eeeb, 0xcae9fb10,
    // 68, 8, 50, 1, -46, 8, -1, 9, -11, 3, -10, -18, 36, -23, 3, -45, 33, 37, 24, -25, -19, -13, 2, -2, -8, -25, -76, 6, -12, 24, -10, 1
    0x1320844, 0x9ff08d2, 0xeef603f5, 0xd303e924, 0xe7182521, 0xfe02f3ed, 0x6b4e7f8, 0x1f618f4,
    // -3, 9, -32, -65, 15, 33, 7, -42, -36, 39, 2, -1, -29, 33, -12, -12, -37, -19, 31, 62, 5, 38, 13, 15, 4, -12, 96, -15, -23, -15, 22, 47
    0xbfe009fd, 0xd607210f, 0xff0227dc, 0xf4f421e3, 0x3e1feddb, 0xf0d2605, 0xf160f404, 0x2f16f1e9,
    // 10, -22, -8, -4, 12, 32, -4, 27, 27, -7, -19, -33, 40, 50, -15, -20, -9, 39, -2, -15, -64, 20, -4, -39, -39, 1, 73, -75, 11, 52, -28, -35
    0xfcf8ea0a, 0x1bfc200c, 0xdfedf91b, 0xecf13228, 0xf1fe27f7, 0xd9fc14c0, 0xb54901d9, 0xdde4340b,
    // 1, -32, -58, 29, -16, 7, 13, 19, 2, 19, -35, -27, 18, -20, -22, 66, 37, -26, 25, 6, 38, 43, 6, -45, -11, 24, -49, 14, -30, -13, -12, -60
    0x1dc6e001, 0x130d07f0, 0xe5dd1302, 0x42eaec12, 0x619e625, 0xd3062b26, 0xecf18f5, 0xc4f4f3e2,
    // 11, -22, -56, -21, 16, 36, 51, -7, 18, 39, 35, -1, 30, 41, -7, -23, -93, -40, -8, 1, 59, 31, 34, -3, -67, -10, -31, 31, 28, -56, 35, 33
    0xebc8ea0b, 0xf9332410, 0xff232712, 0xe9f9291e, 0x1f8d8a3, 0xfd221f3b, 0x1fe1f6bd, 0x2123c81c,
    // 50, 59, 14, 18, -6, -53, -14, 7, 46, 6, -36, -8, -31, -22, 1, 47, 32, -28, 15, -70, 2, 20, -9, 15, 54, -6, 19, -12, 61, -9, 0, -41
    0x120e3b32, 0x7f2cbfa, 0xf8dc062e, 0x2f01eae1, 0xba0fe420, 0xff71402, 0xf413fa36, 0xd700f73d,
    // 23, 2, -15, 60, 27, -45, -4, 25, 1, 3, -15, -9, 3, 12, 17, 9, -27, -32, -16, -48, -5, -30, -37, 5, 29, -31, -61, 13, 12, 21, -27, 23
    0x3cf10217, 0x19fcd31b, 0xf7f10301, 0x9110c03, 0xd0f0e0e5, 0x5dbe2fb, 0xdc3e11d, 0x17e5150c,
    // 30, 11, 24, -8, -4, -36, -3, 4, -11, -18, 16, -8, -25, -47, -31, 3, -20, -33, -21, -1, -37, 19, -36, -69, 40, -14, 4, 45, -7, 4, -22, 17
    0xf8180b1e, 0x4fddcfc, 0xf810eef5, 0x3e1d1e7, 0xffebdfec, 0xbbdc13db, 0x2d04f228, 0x11ea04f9,
    // 2, 17, 9, 7, 86, 28, -3, 37, 33, -2, -106, 16, -10, -13, -5, -4, 9, -17, -12, -36, -30, 5, -18, 22, -5, -15, -2, -37, -7, 21, -17, 20
    0x7091102, 0x25fd1c56, 0x1096fe21, 0xfcfbf3f6, 0xdcf4ef09, 0x16ee05e2, 0xdbfef1fb, 0x14ef15f9,
    // 9, -4, -20, -15, 5, 10, 17, 3, -35, 42, -13, 27, -5, -6, 3, -2, -5, -69, 0, 29, -24, 16, -22, -5, 41, 5, -5, -39, 21, -1, 17, -24
    0xf1ecfc09, 0x3110a05, 0x1bf32add, 0xfe03fafb, 0x1d00bbfb, 0xfbea10e8, 0xd9fb0529, 0xe811ff15,
    // 8, 7, 4, -24, 17, -70, -2, -14, -70, -7, 60, 57, 6, -17, 11, 1, -16, 24, 3, -4, -15, -14, 17, 6, 3, 75, 0, -15, -14, -17, 5, 17
    0xe8040708, 0xf2feba11, 0x393cf9ba, 0x10bef06, 0xfc0318f0, 0x611f2f1, 0xf1004b03, 0x1105eff2,
    // 4, -6, -4, -2, 1, 1, -3, -1, 16, -33, 9, 6, 2, -21, 20, 17, -1, 94, -4, -6, -44, 1, 62, 18, -5, -16, 1, 21, -14, -14, 6, -10
    0xfefcfa04, 0xfffd0101, 0x609df10, 0x1114eb02, 0xfafc5eff, 0x123e01d4, 0x1501f0fb, 0xf606f2f2,
    // 45, -27, -6, -6, 67, 60, 23, -19, -30, 16, -28, 29, 57, 37, -16, -4, -33, -9, -29, -19, 19, 24, -18, -8, -33, -23, 23, -45, 37, -6, 18, -33
    0xfafae52d, 0xed173c43, 0x1de410e2, 0xfcf02539, 0xede3f7df, 0xf8ee1813, 0xd317e9df, 0xdf12fa25,
    // -26, -8, -4, 23, -31, -6, 6, -3, 12, 6, 4, 41, -11, -87, 14, 50, -8, 44, 13, -3, -26, -35, -25, 10, 52, -18, 12, -15, -27, -32, -11, -2
    0x17fcf8e6, 0xfd06fae1, 0x2904060c, 0x320ea9f5, 0xfd0d2cf8, 0xae7dde6, 0xf10cee34, 0xfef5e0e5,
    // 3, -10, -6, 49, 2, -8, -4, -19, 27, 1, 23, -1, -6, -68, 7, -7, -6, 22, 0, -27, -4, -24, 63, 58, 76, 36, 10, 22, 48, -12, -9, 4
    0x31faf603, 0xedfcf802, 0xff17011b, 0xf907bcfa, 0xe50016fa, 0x3a3fe8fc, 0x160a244c, 0x4f7f430,
    // -68, -17, -31, 0, -8, -6, 0, -8, 22, 60, 0, -96, 12, -25, -94, 10, -8, 48, -1, 2, -20, -3, 5, -10, 80, -4, -13, 71, 18, 11, -63, 10
    0xe1efbc, 0xf800faf8, 0xa0003c16, 0xaa2e70c, 0x2ff30f8, 0xf605fdec, 0x47f3fc50, 0xac10b12,
    // -14, 6, 18, -43, -20, 13, 16, -15, 13, 13, -31, -23, 20, 11, -6, -26, -53, -20, 5, 54, -15, 36, 4, -9, -6, -82, 12, -2, -42, -16, 11, -12
    0xd51206f2, 0xf1100dec, 0xe9e10d0d, 0xe6fa0b14, 0x3605eccb, 0xf70424f1, 0xfe0caefa, 0xf40bf0d6,
    // 21, 2, -3, 16, 4, -27, 2, -15, 8, -2, -8, 42, 16, 19, 32, 14, 17, -12, 22, -15, 51, 24, 26, 10, -46, 23, -30, -48, -26, 4, 20, 34
    0x10fd0215, 0xf102e504, 0x2af8fe08, 0xe201310, 0xf116f411, 0xa1a1833, 0xd0e217d2, 0x221404e6,
    // -61, -107, -119, 8, 0, -19, 2, -18, -50, 6, 8, 9, -22, -9, -22, 25, 24, 65, -53, -5, 51, -1, 27, 3, 2, 21, -15, 16, -7, -50, 14, -29
    0x88995c3, 0xee02ed00, 0x90806ce, 0x19eaf7ea, 0xfbcb4118, 0x31bff33, 0x10f11502, 0xe30ecef9,
    // -5, -74, -64, 42, -95, 15, 70, 31, 103, 13, 47, -3, 67, 0, -1, 99, -49, 12, 1, 11, -5, 3, 28, 17, -21, -81, 18, 1, 53, 19, 8, -55
    0x2ac0b6fb, 0x1f460fa1, 0xfd2f0d67, 0x63ff0043, 0xb010ccf, 0x111c03fb, 0x112afeb, 0xc9081335,
    // 1, 1, -6, 26, -6, -54, -3, 32, -2, -8, -42, -80, 21, -9, -1, -12, -9, 0, 1, -53, 18, -27, 44, 9, 20, -32, -3, -60, 38, -13, 9, -1
    0x1afa0101, 0x20fdcafa, 0xb0d6f8fe, 0xf4fff715, 0xcb0100f7, 0x92ce512, 0xc4fde014, 0xff09f326,
    // 5, 20, 18, 13, 18, -13, 2, -1, 19, -22, 2, -30, -10, -16, -44, 18, -9, 1, -18, -24, 29, 50, -25, -33, 35, 4, -1, 44, -76, 7, -20, 18
    0xd121405, 0xff02f312, 0xe202ea13, 0x12d4f0f6, 0xe8ee01f7, 0xdfe7321d, 0x2cff0423, 0x12ec07b4,
    // -5, 1, 26, 1, -11, -87, 14, -50, -22, 9, -33, -31, -17, 35, -27, -37, 19, -25, 3, -73, -41, -7, 18, -2, -24, 23, 15, 19, 3, -84, -12, 26
    0x11a01fb, 0xce0ea9f5, 0xe1df09ea, 0xdbe523ef, 0xb703e713, 0xfe12f9d7, 0x130f17e8, 0x1af4ac03,
    // -14, -11, -3, -10, -18, -8, -22, 15, -32, -17, 2, 0, -18, -4, -32, -26, -18, 30, -5, 64, -15, 21, 8, -5, 12, 30, -10, 29, 57, 18, -20, -20
    0xf6fdf5f2, 0xfeaf8ee, 0x2efe0, 0xe6e0fcee, 0x40fb1eee, 0xfb0815f1, 0x1df61e0c, 0xecec1239,
    // 43, -1, 44, -45, -47, 41, -20, -75, -3, -25, -41, -50, -14, -81, 4, -11, 46, -37, -11, 33, 41, -15, -49, 41, 39, -11, 6, -49, -66, -50, -13, -17
    0xd32cff2b, 0xb5ec29d1, 0xced7e7fd, 0xf504aff2, 0x21f5db2e, 0x29cff129, 0xcf06f527, 0xeff3cebe,
    // -19, 54, 5, 40, 52, 36, -41, -24, -9, 73, -2, 17, -41, 48, -14, -5, -15, -30, -1, -1, -13, -22, -13, -2, -14, -53, 10, 18, 22, -8, 16, 45
    0x280536ed, 0xe8d72434, 0x11fe49f7, 0xfbf230d7, 0xffffe2f1, 0xfef3eaf3, 0x120acbf2, 0x2d10f816,
    // 29, -31, -57, -23, -15, -44, 24, 11, -35, -4, -12, -4, 44, 41, -22, -3, -43, -21, -17, 27, 77, 29, 18, -16, -37, 9, -1, 25, -26, 25, -22, 1
    0xe9c7e11d, 0xb18d4f1, 0xfcf4fcdd, 0xfdea292c, 0x1befebd5, 0xf0121d4d, 0x19ff09db, 0x1ea19e6,
    // -22, 8, 47, 57, 5, -43, -32, 10, 53, -10, -1, 70, -27, 18, 33, 28, 3, -50, 10, -82, 23, 24, -12, -2, -17, -2, 18, -16, -3, -30, 7, -2
    0x392f08ea, 0xae0d505, 0x46fff635, 0x1c2112e5, 0xae0ace03, 0xfef41817, 0xf012feef, 0xfe07e2fd,
    // -22, 33, 23, 26, 99, 11, -34, -6, -36, -11, 12, 6, 11, -6, 17, 17, 21, -17, -34, -75, -22, -10, -11, 9, -8, 6, -27, -11, 116, -13, 27, -7
    0x1a1721ea, 0xfade0b63, 0x60cf5dc, 0x1111fa0b, 0xb5deef15, 0x9f5f6ea, 0xf5e506f8, 0xf91bf374,
    // -5, -5, -8, 4, 19, 29, 25, -36, -28, 12, 5, 48, 13, -40, 10, -34, 9, -50, 10, 11, 9, 12, -77, -30, 55, 22, 7, -15, 37, 20, 2, 7
    0x4f8fbfb, 0xdc191d13, 0x30050ce4, 0xde0ad80d, 0xb0ace09, 0xe2b30c09, 0xf1071637, 0x7021425,
    // 24, -54, 22, 10, -28, -22, 10, -1, -37, -12, -8, 29, 89, 26, 21, -21, 13, 60, -1, 11, 0, -12, -5, -24, -29, -20, -21, 19, 3, 24, -19, -128
    0xa16ca18, 0xff0aeae4, 0x1df8f4db, 0xeb151a59, 0xbff3c0d, 0xe8fbf400, 0x13ebece3, 0x80ed1803,
    // 67, -80, -5, 38, -11, 55, 13, -18, 32, -18, 8, 6, 82, -47, 18, 97, -30, 9, 18, 56, 25, 1, 11, 33, -51, -109, -12, -24, 31, -34, -12, 30
    0x26fbb043, 0xee0d37f5, 0x608ee20, 0x6112d152, 0x381209e2, 0x210b0119, 0xe8f493cd, 0x1ef4de1f,
    // 10, 3, 43, 36, 21, 15, -15, 10, -5, 14, 34, 19, 26, -66, 28, 46, -36, -5, -31, -33, 28, -29, -4, 30, 83, 8, 26, -18, 2, -27, -19, -95
    0x242b030a, 0xaf10f15, 0x13220efb, 0x2e1cbe1a, 0xdfe1fbdc, 0x1efce31c, 0xee1a0853, 0xa1ede502,
    // -57, 41, -37, -22, 50, 63, -31, -34, -68, -19, 26, 29, 21, -29, -1, 1, -9, -15, 4, -42, -30, 80, 17, 15, 42, -60, 9, -8, 61, -30, 16, 50
    0xeadb29c7, 0xdee13f32, 0x1d1aedbc, 0x1ffe315, 0xd604f1f7, 0xf1150e2, 0xf809c42a, 0x3210e23d,
};
static const uint embedded_decoder3_ResidualBlock_2_body_pw_contract_bias_dwords[16] = {
    // -0.00011253, -0.0003617, 0.0001513, -8.49e-05, -0.00010794, 8e-06, -0.0004413, 0.0002813, 1.115e-05, -6.9e-05, 0.000263, 0.0002279, 1.05e-05, -0.0003624, 0.0002983, 8.88e-05
    0x8ded8760, 0x859008f5, 0x868713, 0xc9c8f3b, 0x848600bb, 0xb780c4f, 0x8df000b0, 0x5d20ce3,
    // 0.0001012, 8.8e-05, -8.73e-05, -0.0002046, 0.00010246, -0.0002155, -1.16e-05, -9.49e-05, -3.66e-05, -0.0001801, 0.000246, -1.097e-05, -0.00010556, -3.74e-05, -8.845e-05, 0.0001172
    0x5c406a2, 0x8ab485b9, 0x8b1006b7, 0x863880c3, 0x89e78266, 0x80b80c08, 0x827386eb, 0x7ae85cc,
};
static const uint embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -15, -10, -3, 8, 5, 35, 19, 27, -3, 3, -3, -30, 1, -3, -77, 23, -6, 40, -72, 9, 22, 18, 68, -87, -60, -70, 2, -2, 52, 66, 37, -56
    0x8fdf6f1, 0x1b132305, 0xe2fd03fd, 0x17b3fd01, 0x9b828fa, 0xa9441216, 0xfe02bac4, 0xc8254234,
    // -18, 10, 16, 10, 9, -37, -6, -51, -35, -47, -14, 25, -2, -21, 60, -10, -79, 32, -101, 15, 0, 1, 38, 22, 31, 9, 97, 41, -7, 17, 19, -1
    0xa100aee, 0xcdfadb09, 0x19f2d1dd, 0xf63cebfe, 0xf9b20b1, 0x16260100, 0x2961091f, 0xff1311f9,
    // -21, -6, -8, -21, 3, 1, -5, 0, -19, 3, -7, -54, 20, 16, 0, -23, -2, 26, 16, 45, 26, -28, -19, -12, -29, 15, 6, 2, 0, 2, 37, 20
    0xebf8faeb, 0xfb0103, 0xcaf903ed, 0xe9001014, 0x2d101afe, 0xf4ede41a, 0x2060fe3, 0x14250200,
    // -12, -23, 36, -14, -7, -19, 9, 21, 44, 15, 3, -4, 13, 32, -22, -3, -34, 46, -20, -7, 6, -3, -18, 4, -33, -16, -20, -28, 8, -4, 0, -13
    0xf224e9f4, 0x1509edf9, 0xfc030f2c, 0xfdea200d, 0xf9ec2ede, 0x4eefd06, 0xe4ecf0df, 0xf300fc08,
    // 14, -24, 24, -28, -37, 31, 13, -13, -5, 31, -49, -11, 28, -52, 22, -57, 44, -38, -30, 42, 24, -6, -19, 49, 67, -30, 52, 28, -17, 36, 13, -6
    0xe418e80e, 0xf30d1fdb, 0xf5cf1ffb, 0xc716cc1c, 0x2ae2da2c, 0x31edfa18, 0x1c34e243, 0xfa0d24ef,
    // -47, -55, 21, -15, -50, 57, 20, -3, 24, 68, -17, 11, 33, -3, -8, -39, 6, 22, -18, 49, 19, 34, -50, 21, -67, -38, 45, 8, 10, -20, 47, 42
    0xf115c9d1, 0xfd1439ce, 0xbef4418, 0xd9f8fd21, 0x31ee1606, 0x15ce2213, 0x82ddabd, 0x2a2fec0a,
    // 6, 0, -12, 4, 0, 2, -2, 13, 4, 5, -8, 14, -5, -17, 1, 32, -26, 38, 4, -7, 1, 46, -11, 3, 23, -12, 12, 13, 11, 8, 1, -4
    0x4f40006, 0xdfe0200, 0xef80504, 0x2001effb, 0xf90426e6, 0x3f52e01, 0xd0cf417, 0xfc01080b,
    // -10, 10, 15, 11, 33, -62, -36, -49, -58, -31, 3, 42, -15, 32, 20, 10, -35, -22, -75, -5, -2, 22, 71, -13, 10, 2, -44, 11, -37, -35, 8, -28
    0xb0f0af6, 0xcfdcc221, 0x2a03e1c6, 0xa1420f1, 0xfbb5eadd, 0xf34716fe, 0xbd4020a, 0xe408dddb,
    // -40, -33, 25, -7, 2, 11, -5, -18, 10, 3, -3, -55, -23, -15, -34, -36, 54, 9, -2, 32, 31, -59, -30, 32, 84, 13, 7, 5, 21, 79, -7, 27
    0xf919dfd8, 0xeefb0b02, 0xc9fd030a, 0xdcdef1e9, 0x20fe0936, 0x20e2c51f, 0x5070d54, 0x1bf94f15,
    // -9, 6, 7, -6, -28, -5, -2, 10, 7, 0, 3, 39, -9, 28, -10, 26, -20, 43, -1, 3, 21, -8, -10, 20, 12, -18, -54, -1, -66, -25, 4, -35
    0xfa0706f7, 0xafefbe4, 0x27030007, 0x1af61cf7, 0x3ff2bec, 0x14f6f815, 0xffcaee0c, 0xdd04e7be,
    // 35, 42, -20, 16, 39, -20, 20, 30, 36, -78, -3, 23, -1, 5, -48, 13, 26, 47, 30, -11, 40, -19, 43, 79, -12, 42, 93, 56, -56, 11, -17, -3
    0x10ec2a23, 0x1e14ec27, 0x17fdb224, 0xdd005ff, 0xf51e2f1a, 0x4f2bed28, 0x385d2af4, 0xfdef0bc8,
    // -10, -11, 0, 5, -40, 21, 7, 22, 1, 21, -15, 12, 4, -27, 21, 8, -7, 20, -31, -22, -38, -31, -20, 24, -11, -21, -5, 12, 32, -37, 8, -12
    0x500f5f6, 0x160715d8, 0xcf11501, 0x815e504, 0xeae114f9, 0x18ece1da, 0xcfbebf5, 0xf408db20,
    // 41, 14, -18, 11, 61, -42, -40, -8, -51, -44, -2, -9, -7, 14, 0, 42, 35, 21, 48, -3, 17, -86, 23, -23, -56, 76, 8, -11, 28, -30, 47, 36
    0xbee0e29, 0xf8d8d63d, 0xf7fed4cd, 0x2a000ef9, 0xfd301523, 0xe917aa11, 0xf5084cc8, 0x242fe21c,
    // -3, 9, -7, 3, 1, 4, -4, 0, 11, -7, -8, -17, 19, -8, 13, -9, 14, 15, 13, 17, -64, 18, -3, -6, -20, 7, -7, -3, -16, 35, -2, -9
    0x3f909fd, 0xfc0401, 0xeff8f90b, 0xf70df813, 0x110d0f0e, 0xfafd12c0, 0xfdf907ec, 0xf7fe23f0,
    // -11, 0, 16, 2, -11, 7, -7, -29, -50, -22, 22, -11, -52, 12, 20, 13, 47, -44, -26, 10, 16, -20, 27, -4, 74, -11, -76, -2, -74, 6, 14, -31
    0x21000f5, 0xe3f907f5, 0xf516eace, 0xd140ccc, 0xae6d42f, 0xfc1bec10, 0xfeb4f54a, 0xe10e06b6,
    // -23, -32, 13, -15, -39, 16, -13, 22, -7, 4, 3, 3, 0, -12, -6, 19, -10, 11, -57, -2, -10, 39, -23, -12, -8, 52, -5, -30, 29, 18, 19, -62
    0xf10de0e9, 0x16f310d9, 0x30304f9, 0x13faf400, 0xfec70bf6, 0xf4e927f6, 0xe2fb34f8, 0xc213121d,
    // -21, -11, -19, 20, -18, 36, 34, 34, 8, -4, -2, -38, 10, 9, -87, 10, 6, 24, -83, 31, 21, 17, 59, -87, -49, -69, -5, -10, 49, 70, 18, -41
    0x14edf5eb, 0x222224ee, 0xdafefc08, 0xaa9090a, 0x1fad1806, 0xa93b1115, 0xf6fbbbcf, 0xd7124631,
    // -10, 4, 5, -6, 6, -13, -4, -30, -36, -15, 23, 22, 18, -27, 87, -30, -111, 33, -98, 12, -13, -2, 38, 24, 45, 2, 100, 42, 17, 7, 27, 14
    0xfa0504f6, 0xe2fcf306, 0x1617f1dc, 0xe257e512, 0xc9e2191, 0x1826fef3, 0x2a64022d, 0xe1b0711,
    // -34, -10, 0, -13, -11, -15, -1, -6, -6, -11, -10, -51, 10, 20, -12, -7, 8, 19, 20, 42, 30, -32, -21, -18, -34, 20, -1, 0, -16, 8, 38, -1
    0xf300f6de, 0xfafff1f5, 0xcdf6f5fa, 0xf9f4140a, 0x2a141308, 0xeeebe01e, 0xff14de, 0xff2608f0,
    // 7, 5, 24, -8, 8, -6, -2, 8, 38, 10, -46, -12, 4, 29, -34, -15, -9, 55, -19, 3, 12, -2, -12, 12, -48, -14, -19, -32, 2, 5, 5, -32
    0xf8180507, 0x8fefa08, 0xf4d20a26, 0xf1de1d04, 0x3ed37f7, 0xcf4fe0c, 0xe0edf2d0, 0xe0050502,
    // -19, 12, 27, -11, -42, -45, 5, -53, 24, -12, -45, 3, -29, -34, -14, -28, 72, -42, -15, 36, 37, -31, -21, 39, 35, -21, 41, 25, -48, 49, 5, -63
    0xf51b0ced, 0xcb05d3d6, 0x3d3f418, 0xe4f2dee3, 0x24f1d648, 0x27ebe125, 0x1929eb23, 0xc10531d0,
    // -57, 9, 26, 8, -46, -11, -3, -55, 54, 14, -57, 16, -44, 9, -46, 14, 33, 34, -9, 52, 33, 23, -55, 11, -104, -22, 24, 4, -18, 0, 39, -22
    0x81a09c7, 0xc9fdf5d2, 0x10c70e36, 0xed209d4, 0x34f72221, 0xbc91721, 0x418ea98, 0xea2700ee,
    // 3, -4, -14, 1, 7, 12, -1, 8, -6, -2, -28, 17, 7, -18, -8, 15, -8, 28, -3, -1, 0, 42, -13, 8, 20, -12, 10, 14, 4, 11, -7, 0
    0x1f2fc03, 0x8ff0c07, 0x11e4fefa, 0xff8ee07, 0xfffd1cf8, 0x8f32a00, 0xe0af414, 0xf90b04,
    // 2, 7, 4, 6, 18, -16, -31, -22, -72, 19, 47, 32, 22, 32, 58, -23, -76, -12, -79, -14, -16, 40, 74, -10, 35, -6, -32, 13, -3, -49, 16, 14
    0x6040702, 0xeae1f012, 0x202f13b8, 0xe93a2016, 0xf2b1f4b4, 0xf64a28f0, 0xde0fa23, 0xe10cffd,
    // -29, 0, 21, -21, 20, -15, -20, -26, 11, 7, -17, -67, -28, -19, -27, -12, 42, 23, 8, 26, 26, -53, -39, 27, 71, 17, -6, 5, 33, 80, -9, 11
    0xeb1500e3, 0xe6ecf114, 0xbdef070b, 0xf4e5ede4, 0x1a08172a, 0x1bd9cb1a, 0x5fa1147, 0xbf75021,
    // 4, 3, 2, -12, -11, 12, -3, 14, 3, 7, -14, 37, -4, 23, -7, 8, -18, 41, -3, 6, 13, -11, -10, 26, 6, -18, -52, -2, -64, -26, 13, -38
    0xf4020304, 0xefd0cf5, 0x25f20703, 0x8f917fc, 0x6fd29ee, 0x1af6f50d, 0xfeccee06, 0xda0de6c0,
    // 20, -2, -32, 33, -31, 17, 39, 54, 48, -45, 55, 6, 48, 1, -33, -23, 12, 15, 31, 1, 43, -28, 58, 73, 14, 36, 94, 47, -56, 19, -24, 43
    0x21e0fe14, 0x362711e1, 0x637d330, 0xe9df0130, 0x11f0f0c, 0x493ae42b, 0x2f5e240e, 0x2be813c8,
    // -5, 0, -8, 1, -9, 0, 17, 14, 0, 2, -21, 16, -29, -10, 5, 11, 4, 7, -32, 8, -49, -52, -25, 32, -18, -17, -8, 13, 39, -41, 6, -20
    0x1f800fb, 0xe1100f7, 0x10eb0200, 0xb05f6e3, 0x8e00704, 0x20e7cccf, 0xdf8efee, 0xec06d727,
    // 12, -21, -27, 33, -11, 6, -7, 23, -53, -1, 51, -18, 48, 23, 13, -7, 33, -6, 32, -1, 11, -70, 38, -18, -19, 70, 19, -23, 40, -33, 35, 92
    0x21e5eb0c, 0x17f906f5, 0xee33ffcb, 0xf90d1730, 0xff20fa21, 0xee26ba0b, 0xe91346ed, 0x5c23df28,
    // -16, -16, 8, 1, 22, -8, -2, 12, 6, -9, 13, -2, 12, -6, 6, -5, 10, 0, 15, 29, -66, 6, -7, -9, -9, 6, -2, 0, -12, 29, 5, -5
    0x108f0f0, 0xcfef816, 0xfe0df706, 0xfb06fa0c, 0x1d0f000a, 0xf7f906be, 0xfe06f7, 0xfb051df4,
    // 15, -14, 8, -19, 9, 9, -17, -8, -51, 19, 41, -9, -44, 3, 47, 5, 9, -22, -22, -9, 3, -6, 27, 8, 81, -19, -70, -13, -46, -6, 34, -25
    0xed08f20f, 0xf8ef0909, 0xf72913cd, 0x52f03d4, 0xf7eaea09, 0x81bfa03, 0xf3baed51, 0xe722fad2,
    // -13, 5, 3, -6, -27, 24, -22, 9, -17, 13, -21, -2, -18, -33, -10, -1, 13, 15, -61, 4, -7, 29, -20, 4, -15, 55, -6, -30, 19, 24, 18, -77
    0xfa0305f3, 0x9ea18e5, 0xfeeb0def, 0xfff6dfee, 0x4c30f0d, 0x4ec1df9, 0xe2fa37f1, 0xb3121813,
    // -11, -25, 12, 11, 8, 7, 24, 25, -24, -10, -3, -49, -20, -4, -49, 26, -18, 12, -90, 26, 21, -15, 49, -89, -28, -71, -2, -10, 17, 73, -16, -50
    0xb0ce7f5, 0x19180708, 0xcffdf6e8, 0x1acffcec, 0x1aa60cee, 0xa731f115, 0xf6feb9e4, 0xcef04911,
    // -37, 26, 6, -10, 19, -4, 37, -27, -3, -24, -19, 39, 0, -32, 39, -31, -36, 61, -92, 19, -10, 10, 32, 36, 26, 17, 103, 32, 27, 6, 47, -18
    0xf6061adb, 0xe525fc13, 0x27ede8fd, 0xe127e000, 0x13a43ddc, 0x24200af6, 0x2067111a, 0xee2f061b,
    // -8, -21, -11, -4, 11, -5, -12, -15, -24, -5, 5, -60, 26, 23, 4, -27, -14, 46, 16, 34, 27, -21, -16, -9, -22, 6, 19, -7, 14, -9, 28, 7
    0xfcf5ebf8, 0xf1f4fb0b, 0xc405fbe8, 0xe504171a, 0x22102ef2, 0xf7f0eb1b, 0xf91306ea, 0x71cf70e,
    // 11, -12, 13, 15, -16, -46, 3, 28, 6, -1, 34, -25, 23, -3, -8, 36, -32, 5, -32, 11, 10, -3, -12, 9, -48, -33, -17, -23, -41, 18, 12, 21
    0xf0df40b, 0x1c03d2f0, 0xe722ff06, 0x24f8fd17, 0xbe005e0, 0x9f4fd0a, 0xe9efdfd0, 0x150c12d7,
    // 36, -22, -38, 15, -8, 7, -35, -13, -26, -21, -7, 18, 62, -25, 2, -74, 4, 17, -11, 12, 23, 55, -20, 31, 67, -50, 49, 65, 50, 16, 78, 31
    0xfdaea24, 0xf3dd07f8, 0x12f9ebe6, 0xb602e73e, 0xcf51104, 0x1fec3717, 0x4131ce43, 0x1f4e1032,
    // 21, -73, -4, 70, -37, -25, -8, -21, -42, -10, 41, -21, 47, -30, 45, -22, -35, 24, -14, 32, 32, 36, -44, 15, -66, -63, 52, -33, -10, -17, 22, 39
    0x46fcb715, 0xebf8e7db, 0xeb29f6d6, 0xea2de22f, 0x20f218dd, 0xfd42420, 0xdf34c1be, 0x2716eff6,
    // 13, 1, -1, 7, 16, 3, 11, 3, 3, 5, 2, 4, 7, -26, 8, 22, -42, 12, -2, -3, 4, 24, -4, 12, 16, -9, 7, 16, -8, 22, -19, 1
    0x7ff010d, 0x30b0310, 0x4020503, 0x1608e607, 0xfdfe0cd6, 0xcfc1804, 0x1007f710, 0x1ed16f8,
    // -44, 43, 11, -26, 38, -21, 28, 10, 9, -11, -20, 62, -17, 2, 16, -23, 56, 24, -59, -6, -15, 43, 56, -1, -5, 12, -36, -27, -7, -48, 41, -64
    0xe60b2bd4, 0xa1ceb26, 0x3eecf509, 0xe91002ef, 0xfac51838, 0xff382bf1, 0xe5dc0cfb, 0xc029d0f9,
    // -14, -20, 9, 21, 20, 12, -18, 6, 23, -46, 20, -45, 0, -16, -33, -64, 50, 30, 14, 19, 26, -36, -25, 37, 45, 6, 11, 9, 56, 59, 31, 26
    0x1509ecf2, 0x6ee0c14, 0xd314d217, 0xc0dff000, 0x130e1e32, 0x25e7dc1a, 0x90b062d, 0x1a1f3b38,
    // -4, 17, -17, 21, -15, -7, 10, 10, 18, 7, 15, 34, 10, 9, -20, 32, -5, 25, 0, 16, 23, -15, 1, 28, 0, -22, -51, -2, -78, -21, 24, -26
    0x15ef11fc, 0xa0af9f1, 0x220f0712, 0x20ec090a, 0x100019fb, 0x1c01f117, 0xfecdea00, 0xe618ebb2,
    // -26, 9, 2, -29, 2, 21, 12, 7, 12, 4, -40, 0, -52, -7, -45, 41, 19, -1, 6, 7, 41, -48, 38, 76, 20, 47, 116, 75, -102, 30, -76, -11
    0xe30209e6, 0x70c1502, 0xd8040c, 0x29d3f9cc, 0x706ff13, 0x4c26d029, 0x4b742f14, 0xf5b41e9a,
    // 5, -18, -23, 26, -11, 6, 8, 8, -11, 14, 17, 3, 19, -29, 20, 22, -23, -24, -38, 10, -48, -62, -25, 24, 3, -25, -6, 16, 19, -32, 0, 5
    0x1ae9ee05, 0x80806f5, 0x3110ef5, 0x1614e313, 0xadae8e9, 0x18e7c2d0, 0x10fae703, 0x500e013,
    // -32, -3, -1, -55, 57, 14, -11, -7, -14, 30, -40, -9, -30, 13, 0, 28, 70, 25, 41, 10, 16, -104, 9, -22, -32, 92, 22, -14, 22, -25, -1, -4
    0xc9fffde0, 0xf9f50e39, 0xf7d81ef2, 0x1c000de2, 0xa291946, 0xea099810, 0xf2165ce0, 0xfcffe716,
    // 11, 0, -1, -12, -13, 15, -5, -11, -4, -5, -8, -16, -4, 5, -9, -4, 0, 19, 14, 34, -69, 11, 0, -1, -18, 14, -9, 3, 5, 27, -3, -11
    0xf4ff000b, 0xf5fb0ff3, 0xf0f8fbfc, 0xfcf705fc, 0x220e1300, 0xff000bbb, 0x3f70eee, 0xf5fd1b05,
    // -27, 34, -15, 10, 7, 34, 9, -8, 24, -14, -1, 23, -1, 43, -11, -41, 74, 28, 6, -10, 4, 25, 28, -10, 62, -6, -78, 5, 18, -33, 78, -38
    0xaf122e5, 0xf8092207, 0x17fff218, 0xd7f52bff, 0xf6061c4a, 0xf61c1904, 0x5b2fa3e, 0xda4edf12,
    // -8, -28, -12, 29, -20, 2, -10, 1, 2, -14, 16, 0, 27, -8, -7, 33, -44, -23, -59, 5, 0, 28, -9, -15, -21, 57, -36, 1, 10, 33, 40, -18
    0x1df4e4f8, 0x1f602ec, 0x10f202, 0x21f9f81b, 0x5c5e9d4, 0xf1f71c00, 0x1dc39eb, 0xee28210a,
    // -15, -22, -6, 14, -15, 20, 14, 18, -26, 5, -6, -49, -3, -3, -48, -8, -19, 11, -93, 20, 22, -13, 53, -83, -33, -72, -13, -12, 15, 81, -20, -48
    0xefaeaf1, 0x120e14f1, 0xcffa05e6, 0xf8d0fdfd, 0x14a30bed, 0xad35f316, 0xf4f3b8df, 0xd0ec510f,
    // -26, 18, 7, 16, -13, -2, 34, -5, 7, 4, -8, 25, 16, -17, 68, -32, -58, 71, -77, 11, -5, 27, 38, 24, 41, 10, 110, 26, 37, 12, 63, -4
    0x100712e6, 0xfb22fef3, 0x19f80407, 0xe044ef10, 0xbb347c6, 0x18261bfb, 0x1a6e0a29, 0xfc3f0c25,
    // -18, -26, -9, -12, 18, -18, -8, -23, -18, -26, 19, -52, 13, 18, -15, -7, -10, 35, 14, 39, 23, -30, -22, -8, -27, 11, 7, -3, 13, -9, 27, -6
    0xf4f7e6ee, 0xe9f8ee12, 0xcc13e6ee, 0xf9f1120d, 0x270e23f6, 0xf8eae217, 0xfd070be5, 0xfa1bf70d,
    // 23, 18, -1, -12, 31, -20, -14, 12, -15, -2, 14, -16, 15, -25, -16, 13, -7, 8, -40, 9, 7, -14, -12, 26, -69, -34, -22, -16, -48, 26, 6, 3
    0xf4ff1217, 0xcf2ec1f, 0xf00efef1, 0xdf0e70f, 0x9d808f9, 0x1af4f207, 0xf0eadebb, 0x3061ad0,
    // 0, 8, -39, -13, 29, -47, -28, -56, -5, -81, 45, 45, 1, -26, -46, -35, 27, -9, -18, 18, 21, 12, -35, 33, 34, -42, 24, 85, 28, 18, 46, -4
    0xf3d90800, 0xc8e4d11d, 0x2d2daffb, 0xddd2e601, 0x12eef71b, 0x21dd0c15, 0x5518d622, 0xfc2e121c,
    // 6, 5, -21, 14, 23, -49, -21, -79, -40, -58, 66, 3, -17, -66, 1, 8, -16, 17, -32, 41, 17, 3, -61, 29, -103, -50, 12, -14, -20, -12, -21, -2
    0xeeb0506, 0xb1ebcf17, 0x342c6d8, 0x801beef, 0x29e011f0, 0x1dc30311, 0xf20cce99, 0xfeebf4ec,
    // 7, -4, -3, 1, 25, 17, 9, -5, -5, 2, -19, 8, 19, -25, -1, -2, -24, 7, -8, -3, 5, 21, -4, 20, 7, -12, 4, 14, -16, 25, -23, 4
    0x1fdfc07, 0xfb091119, 0x8ed02fb, 0xfeffe713, 0xfdf807e8, 0x14fc1505, 0xe04f407, 0x4e919f0,
    // -31, 40, 15, 25, -28, -5, 41, 46, 13, 33, -13, 26, 20, 31, 48, -30, 27, 39, -48, 2, -12, 82, 69, -13, 27, 7, -13, -40, 18, -52, 53, -22
    0x190f28e1, 0x2e29fbe4, 0x1af3210d, 0xe2301f14, 0x2d0271b, 0xf34552f4, 0xd8f3071b, 0xea35cc12,
    // -8, 0, 7, -3, 54, -10, -22, -4, 30, -53, 36, -43, -17, -28, -32, -23, 51, 34, 14, 10, 27, -37, -42, 32, 33, 3, -7, 21, 58, 65, 17, 22
    0xfd0700f8, 0xfceaf636, 0xd524cb1e, 0xe9e0e4ef, 0xa0e2233, 0x20d6db1b, 0x15f90321, 0x1611413a,
    // 4, 17, -22, 12, -2, 8, 9, 11, 11, 10, 4, 34, 16, 13, -19, 19, 1, 25, -4, 8, 19, -8, 2, 27, -7, -26, -52, -2, -79, -12, 24, -23
    0xcea1104, 0xb0908fe, 0x22040a0b, 0x13ed0d10, 0x8fc1901, 0x1b02f813, 0xfecce6f9, 0xe918f4b1,
    // -41, -36, -8, 9, -72, 36, 4, 34, 37, 51, -37, -13, -19, 15, -7, -26, -1, -3, 27, 18, 43, -57, 51, 65, 50, 40, 127, 50, -92, 32, -45, 9
    0x9f8dcd7, 0x220424b8, 0xf3db3325, 0xe6f90fed, 0x121bfdff, 0x4133c72b, 0x327f2832, 0x9d320a4,
    // 1, 1, -19, 15, 20, -3, -6, -16, -22, 4, 16, 23, -1, -19, 7, 30, -5, -12, -44, -23, -42, -60, -21, 23, -26, -28, -12, 29, 2, -22, -3, -17
    0xfed0101, 0xf0fafd14, 0x171004ea, 0x1e07edff, 0xe9d4f4fb, 0x17ebc4d6, 0x1df4e4e6, 0xeffdea02,
    // -46, -46, -1, 14, -40, 32, 4, 24, -5, 70, -28, -27, 12, 45, 11, -15, 56, 15, 45, 21, 16, -81, 30, -23, 3, 88, 45, -43, 42, -28, 22, 40
    0xeffd2d2, 0x180420d8, 0xe5e446fb, 0xf10b2d0c, 0x152d0f38, 0xe91eaf10, 0xd52d5803, 0x2816e42a,
    // -3, -28, 17, -1, -3, -6, -6, -4, -6, -2, 0, -2, -9, 19, -12, 7, 0, 20, 17, 14, -61, 17, 5, -3, -15, 10, 0, 7, -6, 29, 9, -10
    0xff11e4fd, 0xfcfafafd, 0xfe00fefa, 0x7f413f7, 0xe111400, 0xfd0511c3, 0x7000af1, 0xf6091dfa,
    // -10, 17, -6, 17, 11, 19, 18, 23, 36, -6, 18, 20, -5, 43, 10, -16, 41, 32, 11, -16, 6, 45, 22, -23, 69, -11, -80, 1, 24, -29, 86, -17
    0x11fa11f6, 0x1712130b, 0x1412fa24, 0xf00a2bfb, 0xf00b2029, 0xe9162d06, 0x1b0f545, 0xef56e318,
    // -4, 9, -27, 16, 13, 23, -24, -11, -16, -4, 11, 8, 16, -30, -13, 5, -19, -20, -69, 4, 3, 19, -10, -1, -32, 52, -41, 6, 5, 36, 36, -36
    0x10e509fc, 0xf5e8170d, 0x80bfcf0, 0x5f3e210, 0x4bbeced, 0xfff61303, 0x6d734e0, 0xdc242405,
};
static const uint embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias_dwords[8] = {
    // -0.10315, -0.06476, 0.02113, 0.02673, -0.0896, 0.01953, -0.006878, -0.03357, -0.01566, -0.01913, -0.0426, 0.06256, -0.01912, 0.01643, -0.01326, -0.01419
    0xac25ae9a, 0x26d82569, 0x2500adbc, 0xa84c9f0b, 0xa4e6a402, 0x2c01a974, 0x2435a4e5, 0xa344a2ca,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass11(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage__decoder3_ResidualBlock_2_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _decoder3_ResidualBlock_2_residual_func_Split_output_grouped = {
        uint3(1920, 1080, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 32), // threadGroupSliceSize
        uint3(1920, 1080, 32), // storageSize
        uint3(32, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        132710400, // threadGroupStorageByteOffset
        storage__decoder3_ResidualBlock_2_residual_func_Split_output_grouped };
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(3840, 2160, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(3840, 2160, 16), // threadGroupSliceSize
        uint3(3840, 2160, 16), // storageSize
        uint3(16, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.021448098123073578, storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005714967846870422, storage_embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = { embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004748131614178419, storage_embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_decoder3_ResidualBlock_2_body_pw_expand_bias = { embedded_decoder3_ResidualBlock_2_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_decoder3_ResidualBlock_2_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_2_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004778028931468725, storage_embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder3_ResidualBlock_2_body_pw_contract_bias = { embedded_decoder3_ResidualBlock_2_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder3_ResidualBlock_2_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_2_body_pw_contract_bias };
    
    const ConstantBufferStorage<512> storage_embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_HWCN< ConstantBufferStorage<512> > embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 16, 32), // threadGroupSliceSize
        uint4(2, 2, 16, 32), // storageSize
        uint4(512, 1024, 32, 1), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0028482277411967516, storage_embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias = { embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias };
    
    // fused_fused_quantized_NHWC_/decoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_22 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_22 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(128, 2, 16);
    const uint3 groupSize_slice_22 = uint3(128, 2, 16);
    const uint3 storageSize_slice_22 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_22 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_22 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_22 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_22 = dot(groupStart_slice_22, tensorByteStrides_slice_22);
    const float quantizationScale_slice_22 = 0.024364154785871506;
    const RWBufferStorage storage_slice_22 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_22 = { logicalSize_slice_22, groupStart_slice_22, groupSize_slice_22, storageSize_slice_22, tensorByteStrides_slice_22, paddingBegin_slice_22, paddingEnd_slice_22, threadGroupByteOffsetInTensor_slice_22 + 199065600, quantizationScale_slice_22, storage_slice_22 };
    // FusedFusedquantized_/decoder3/ResidualBlock_2/residual_func/Concat_quantized_/decoder3/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/decoder3/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/decoder3/ResidualBlock_2/body/pw_expand/Conv_/decoder3/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/decoder3/ResidualBlock_2/body/pw_contract/Conv_/decoder3/ResidualBlock_2/Add_Fusedquantized_/decoder3/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_quantized_/decoder2/skip_pop_0/Add (32, 1080, 1920), (16, 2160, 3840), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,), (32, 16, 2, 2), (16,) -> (16, 2160, 3840)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FNB_CT2D_ADD<32, 1>(0.020427925512194633, 0.027574772015213966, 0.02578861638903618, 0.026322178542613983, _decoder3_ResidualBlock_2_residual_func_Split_output_grouped, fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias, embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_2_body_pw_expand_bias, embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_2_body_pw_contract_bias, embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias, slice_22, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_11
#ifdef MLSR_PASS_11_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass11_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_fused_quantized_NHWC_/decoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_23 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_23 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_23 = uint3(32, 1, 16);
    const uint3 storageSize_slice_23 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_23 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_23 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_23 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_23 = dot(groupStart_slice_23, tensorByteStrides_slice_23);
    const float quantizationScale_slice_23 = 0.024364154785871506;
    const RWBufferStorage storage_slice_23 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_23 = { logicalSize_slice_23, groupStart_slice_23, groupSize_slice_23, storageSize_slice_23, tensorByteStrides_slice_23, paddingBegin_slice_23, paddingEnd_slice_23, threadGroupByteOffsetInTensor_slice_23 + 199065600, quantizationScale_slice_23, storage_slice_23 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_23, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_11_POST


#ifdef MLSR_PASS_12
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/ConvNextBlock.hlsli"

static const uint embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 4, 11, 15, 2, -11, 9, -10, -3, -1, -9, 6, -4, 6, 1, 3, 4, -6, -10, 17, 0, -2, -17, 10, -2, 16, 3, -5, 4, -2, -24, 10, 4
    0x20f0b04, 0xfdf609f5, 0xfc06f7ff, 0x4030106, 0x11f6fa, 0xfe0aeffe, 0x4fb0310, 0x40ae8fe,
    // -5, -15, -8, -6, 3, 0, -7, -11, 5, 2, 11, 14, -15, 1, 5, -25, -2, -17, 11, 20, 11, -29, 38, -3, 2, 10, -15, -5, 3, 14, -23, 7
    0xfaf8f1fb, 0xf5f90003, 0xe0b0205, 0xe70501f1, 0x140beffe, 0xfd26e30b, 0xfbf10a02, 0x7e90e03,
    // 13, 16, -110, -58, 4, 94, -34, -3, -17, 7, 30, -5, -15, 14, 56, 25, -8, 8, 27, -11, -19, -14, -35, -5, 14, 0, 4, 11, -33, -16, -16, 11
    0xc692100d, 0xfdde5e04, 0xfb1e07ef, 0x19380ef1, 0xf51b08f8, 0xfbddf2ed, 0xb04000e, 0xbf0f0df,
    // -11, 1, -7, 13, -1, -17, 12, -7, -7, -10, -8, 1, -8, -5, -6, -38, -5, -6, 14, -3, -9, 11, 3, -8, -6, -2, -5, -6, 5, 18, 8, -4
    0xdf901f5, 0xf90cefff, 0x1f8f6f9, 0xdafafbf8, 0xfd0efafb, 0xf8030bf7, 0xfafbfefa, 0xfc081205,
    // 5, 16, 24, 0, -20, 4, -18, -12, 1, -11, -11, -6, 1, -10, 5, 9, -4, -16, -10, -8, -1, 0, 5, -12, 3, -1, 9, -6, 7, 11, 2, -1
    0x181005, 0xf4ee04ec, 0xfaf5f501, 0x905f601, 0xf8f6f0fc, 0xf40500ff, 0xfa09ff03, 0xff020b07,
    // 4, -18, 53, -20, 23, -4, -10, -10, -20, 6, 16, 35, -6, -6, -16, 7, 4, 0, 25, -8, 19, -4, 1, -13, -9, -7, -11, -5, -4, 1, 1, 6
    0xec35ee04, 0xf6f6fc17, 0x231006ec, 0x7f0fafa, 0xf8190004, 0xf301fc13, 0xfbf5f9f7, 0x60101fc,
    // -23, -7, 86, 15, 24, -41, 66, -17, -23, -9, -13, 15, -13, -8, -6, -12, -11, -6, -2, 73, -39, 43, 105, 79, 4, -84, 37, 60, -14, -41, -9, 31
    0xf56f9e9, 0xef42d718, 0xff3f7e9, 0xf4faf8f3, 0x49fefaf5, 0x4f692bd9, 0x3c25ac04, 0x1ff7d7f2,
    // 18, -27, -33, -21, 17, 17, 25, 9, -7, 24, 10, 10, 11, -12, 19, -3, 8, 4, 21, -16, -1, 2, 19, 3, 4, 9, -4, -6, 13, 2, 13, 8
    0xebdfe512, 0x9191111, 0xa0a18f9, 0xfd13f40b, 0xf0150408, 0x31302ff, 0xfafc0904, 0x80d020d,
    // 6, -16, -17, -8, -11, -6, 2, 5, 7, -14, 3, 0, 3, -12, -4, -4, -1, 0, -3, -4, -11, 5, 13, -14, 11, 6, 4, 0, -11, -4, -2, -14
    0xf8eff006, 0x502faf5, 0x3f207, 0xfcfcf403, 0xfcfd00ff, 0xf20d05f5, 0x4060b, 0xf2fefcf5,
    // -7, 3, -20, 17, -8, -16, 9, 10, 19, -16, -6, -2, -1, -6, -4, 0, -19, -1, -35, 39, -33, 5, 37, 15, 37, -5, 1, -23, 3, 5, 11, -22
    0x11ec03f9, 0xa09f0f8, 0xfefaf013, 0xfcfaff, 0x27ddffed, 0xf2505df, 0xe901fb25, 0xea0b0503,
    // -6, 14, 13, -19, -3, -14, -2, 10, 1, 4, -9, 0, -14, 3, -23, -19, -2, -18, 22, -9, 6, -5, 19, -1, 27, 46, -15, -2, 25, 13, 0, 15
    0xed0d0efa, 0xafef2fd, 0xf70401, 0xede903f2, 0xf716eefe, 0xff13fb06, 0xfef12e1b, 0xf000d19,
    // -10, 24, -111, -27, 92, -28, 46, -74, -50, 93, -30, -43, 70, 4, 16, 26, 6, -8, -23, 23, -10, 13, -13, 28, 19, -11, 5, 1, 14, -21, 9, 8
    0xe59118f6, 0xb62ee45c, 0xd5e25dce, 0x1a100446, 0x17e9f806, 0x1cf30df6, 0x105f513, 0x809eb0e,
    // -3, 17, 30, 12, 10, -13, -14, -9, -20, 8, -14, -22, -11, 6, 4, -33, 2, 17, 25, 2, 10, 28, -33, 8, -16, 5, 1, -5, -12, -4, 6, 3
    0xc1e11fd, 0xf7f2f30a, 0xeaf208ec, 0xdf0406f5, 0x2191102, 0x8df1c0a, 0xfb0105f0, 0x306fcf4,
    // 1, -17, -22, 16, 30, 3, -12, -5, 0, -13, -1, 1, 13, 16, -4, 3, 1, -2, -26, -5, -13, 24, -22, -14, -2, -5, -1, 3, 0, 4, 12, -3
    0x10eaef01, 0xfbf4031e, 0x1fff300, 0x3fc100d, 0xfbe6fe01, 0xf2ea18f3, 0x3fffbfe, 0xfd0c0400,
    // -5, -28, -7, 9, 3, 1, 8, 19, 2, -1, 12, 7, 1, 5, 3, -4, 7, 5, 13, -6, -18, -8, -27, -1, 3, -16, -8, -4, -5, -4, -19, 1
    0x9f9e4fb, 0x13080103, 0x70cff02, 0xfc030501, 0xfa0d0507, 0xffe5f8ee, 0xfcf8f003, 0x1edfcfb,
    // 4, -22, 1, -5, 0, -5, 30, 8, -5, 4, 6, -1, 2, 0, 6, 12, -5, 73, -100, -15, -6, 23, -32, -33, 27, 75, -28, -49, 36, -5, -65, 19
    0xfb01ea04, 0x81efb00, 0xff0604fb, 0xc060002, 0xf19c49fb, 0xdfe017fa, 0xcfe44b1b, 0x13bffb24,
    // -8, -5, 19, -8, 16, 4, 15, -1, -17, 13, 3, -3, -1, 28, -3, -7, 3, -3, -3, -14, 2, 11, -10, -4, 5, 2, 10, -5, 3, 5, 8, 9
    0xf813fbf8, 0xff0f0410, 0xfd030def, 0xf9fd1cff, 0xf2fdfd03, 0xfcf60b02, 0xfb0a0205, 0x9080503,
    // -2, 1, 8, 8, 5, -13, -1, 0, -5, -3, -14, -6, 0, -1, -1, -10, 2, 7, 7, 3, -22, -11, 7, -7, 10, 11, 8, -1, -3, -7, 2, -12
    0x80801fe, 0xfff305, 0xfaf2fdfb, 0xf6ffff00, 0x3070702, 0xf907f5ea, 0xff080b0a, 0xf402f9fd,
    // -10, -3, 18, 16, 18, -22, 19, -4, -21, 8, -8, -17, -21, 33, -30, -34, -19, 13, -29, -7, -6, 3, 13, -15, 12, -22, 8, 1, 2, 10, 11, 32
    0x1012fdf6, 0xfc13ea12, 0xeff808eb, 0xdee221eb, 0xf9e30ded, 0xf10d03fa, 0x108ea0c, 0x200b0a02,
    // 0, 9, -45, 20, -13, -9, 21, 34, 21, -3, -18, -9, -5, -26, -16, -24, -11, 14, 63, 48, 26, 4, -2, 3, -10, -30, -51, 10, 5, -12, -15, -9
    0x14d30900, 0x2215f7f3, 0xf7eefd15, 0xe8f0e6fb, 0x303f0ef5, 0x3fe041a, 0xacde2f6, 0xf7f1f405,
    // 20, -100, 1, -2, 51, -46, -45, 11, 51, 116, 41, 22, -28, -19, 6, 81, -6, 6, -7, 25, -23, 12, 16, 65, 42, -47, 4, 1, 60, 18, -41, -7
    0xfe019c14, 0xbd3d233, 0x16297433, 0x5106ede4, 0x19f906fa, 0x41100ce9, 0x104d12a, 0xf9d7123c,
    // 5, -3, -10, -7, 21, 14, -36, 4, 2, -7, 0, -14, -23, -3, -2, -8, -14, 37, 63, 21, 3, 2, -56, -15, -23, -52, -1, 22, -19, -19, 20, 3
    0xf9f6fd05, 0x4dc0e15, 0xf200f902, 0xf8fefde9, 0x153f25f2, 0xf1c80203, 0x16ffcce9, 0x314eded,
    // 1, -4, -18, 25, 15, -12, 28, 7, -10, 27, 8, -2, -1, 10, -18, -26, 2, 2, 7, -1, -2, 3, 2, 7, 2, -6, -3, 4, 7, -10, 2, 18
    0x19eefc01, 0x71cf40f, 0xfe081bf6, 0xe6ee0aff, 0xff070202, 0x70203fe, 0x4fdfa02, 0x1202f607,
    // -5, 6, -7, -6, -8, 1, -35, 30, -8, -18, 9, 1, 8, -2, -16, 5, -4, -2, -23, 15, 1, 3, 4, 11, 11, 5, 6, -8, -9, -6, 4, -24
    0xfaf906fb, 0x1edd01f8, 0x109eef8, 0x5f0fe08, 0xfe9fefc, 0xb040301, 0xf806050b, 0xe804faf7,
    // -2, -5, 11, -4, -6, -12, 14, 5, -18, -21, 9, 9, -1, 4, 7, 10, 6, -16, 18, -30, -22, -19, -92, 17, -45, 16, 38, -26, 15, 54, 11, -63
    0xfc0bfbfe, 0x50ef4fa, 0x909ebee, 0xa0704ff, 0xe212f006, 0x11a4edea, 0xe62610d3, 0xc10b360f,
    // 4, -10, -13, 0, 1, -4, 14, 24, -14, -7, 0, -8, 19, 15, -12, -7, -2, -3, -3, -1, -5, -12, 30, -4, 6, 4, 16, 12, -2, -2, -5, -3
    0xf3f604, 0x180efc01, 0xf800f9f2, 0xf9f40f13, 0xfffdfdfe, 0xfc1ef4fb, 0xc100406, 0xfdfbfefe,
    // 3, -6, -6, -5, -3, -25, 13, -2, -3, -5, 18, -3, -2, 6, -5, 15, 12, 2, 11, 3, -7, 3, 12, 2, -1, 2, 10, 5, 13, -8, -1, 19
    0xfbfafa03, 0xfe0de7fd, 0xfd12fbfd, 0xffb06fe, 0x30b020c, 0x20c03f9, 0x50a02ff, 0x13fff80d,
    // -3, -4, -24, -11, -8, -1, -1, 0, 13, 6, 2, 1, -6, -11, 5, -13, 1, -12, 3, 9, -13, 14, -8, 19, -4, -20, 13, 3, 14, 8, -5, -13
    0xf5e8fcfd, 0xfffff8, 0x102060d, 0xf305f5fa, 0x903f401, 0x13f80ef3, 0x30decfc, 0xf3fb080e,
    // 10, -11, 4, 17, 1, 11, -3, 22, -6, -3, -2, -5, 17, 6, -6, 1, 1, -2, -2, 2, 20, -8, 25, 19, 6, 1, 15, 10, 7, -9, -7, 12
    0x1104f50a, 0x16fd0b01, 0xfbfefdfa, 0x1fa0611, 0x2fefe01, 0x1319f814, 0xa0f0106, 0xcf9f707,
    // 2, -16, 103, -11, -4, -41, 53, 38, -7, -43, 13, 36, -59, -1, -13, 16, -13, 3, 28, 1, -22, -17, 11, 13, 23, -9, 1, 5, -9, -4, -13, -7
    0xf567f002, 0x2635d7fc, 0x240dd5f9, 0x10f3ffc5, 0x11c03f3, 0xd0befea, 0x501f717, 0xf9f3fcf7,
    // -1, 9, 34, 12, -6, -4, -9, -13, -21, -18, -10, -4, 3, 0, 5, 5, 2, -10, -19, -23, 35, 15, 2, 21, 11, 23, 13, -9, 5, 19, 7, 8
    0xc2209ff, 0xf3f7fcfa, 0xfcf6eeeb, 0x5050003, 0xe9edf602, 0x15020f23, 0xf70d170b, 0x8071305,
    // -5, 3, -23, 1, -8, -13, -5, -6, 9, -3, -3, 0, -5, -8, -1, -11, 2, 0, -13, 4, 1, -4, -5, 9, -15, 0, 3, 9, -7, -3, -2, -5
    0x1e903fb, 0xfafbf3f8, 0xfdfd09, 0xf5fff8fb, 0x4f30002, 0x9fbfc01, 0x90300f1, 0xfbfefdf9,
    // 8, 5, -27, 8, -9, 11, 13, -18, -8, 1, -6, -26, 7, 30, 9, -6, -1, 0, 0, -8, 3, -12, 0, 3, -8, -4, -8, 3, -3, -9, 4, 9
    0x8e50508, 0xee0d0bf7, 0xe6fa01f8, 0xfa091e07, 0xf80000ff, 0x300f403, 0x3f8fcf8, 0x904f7fd,
    // -4, 14, 29, 14, -5, -37, 35, 7, -7, -16, -6, -3, -3, -28, -16, 4, -3, 22, 10, -13, 7, 25, -120, -33, 16, 69, -13, -58, 60, 68, -18, -50
    0xe1d0efc, 0x723dbfb, 0xfdfaf0f9, 0x4f0e4fd, 0xf30a16fd, 0xdf881907, 0xc6f34510, 0xceee443c,
    // -1, 25, -2, 1, -17, -6, 8, -11, 0, -3, -19, -22, -9, -14, -1, 4, 7, -7, -29, -8, -6, 4, 13, 18, 13, 23, 17, 5, 11, -8, 6, 20
    0x1fe19ff, 0xf508faef, 0xeaedfd00, 0x4fff2f7, 0xf8e3f907, 0x120d04fa, 0x511170d, 0x1406f80b,
    // 11, -19, -37, -26, 30, -10, 7, 22, 4, 16, 5, -1, 16, 13, 4, 3, -6, 4, -11, 10, -20, -1, -14, 0, -10, -14, 0, 13, -12, 0, 7, 5
    0xe6dbed0b, 0x1607f61e, 0xff051004, 0x3040d10, 0xaf504fa, 0xf2ffec, 0xd00f2f6, 0x50700f4,
    // 1, 1, 35, 1, 2, -21, 8, 1, -13, 18, -6, -14, -7, 15, 0, 3, -5, 11, 45, -21, 7, -24, -10, -14, -10, -10, -14, 6, -22, 5, -26, 8
    0x1230101, 0x108eb02, 0xf2fa12f3, 0x3000ff9, 0xeb2d0bfb, 0xf2f6e807, 0x6f2f6f6, 0x8e605ea,
    // 1, -11, -11, 4, 8, -3, 18, 8, 8, 6, 1, 5, 18, 2, 7, 0, -4, 13, 10, 5, -4, 8, -24, 3, -11, -16, -6, -4, 3, 0, 20, -10
    0x4f5f501, 0x812fd08, 0x5010608, 0x70212, 0x50a0dfc, 0x3e808fc, 0xfcfaf0f5, 0xf6140003,
    // 1, 51, -113, -36, -5, 67, -1, -41, -28, 67, -26, -50, 37, 14, -18, -9, -3, 7, -5, 2, -23, -8, 19, -1, 19, -18, -7, -13, 1, 4, -17, -6
    0xdc8f3301, 0xd7ff43fb, 0xcee643e4, 0xf7ee0e25, 0x2fb07fd, 0xff13f8e9, 0xf3f9ee13, 0xfaef0401,
    // -4, -8, -4, -2, 3, 6, 13, 1, 17, 8, 5, 10, 12, -7, 3, 3, 11, -20, -42, -12, 4, 1, -3, 9, 21, 23, 17, -15, 17, 13, 12, 21
    0xfefcf8fc, 0x10d0603, 0xa050811, 0x303f90c, 0xf4d6ec0b, 0x9fd0104, 0xf1111715, 0x150c0d11,
    // 2, 7, -1, 0, -7, -4, 5, 4, 0, 1, -6, -5, 0, -1, -3, 1, 6, -8, -9, 0, 9, 15, -4, 10, -6, 4, -1, 7, 23, 2, 2, 13
    0xff0702, 0x405fcf9, 0xfbfa0100, 0x1fdff00, 0xf7f806, 0xafc0f09, 0x7ff04fa, 0xd020217,
    // 28, -24, -21, -3, 3, 38, -16, 58, -7, 10, 17, 15, 40, -6, -14, -9, 7, -13, -22, 14, 11, 17, 37, 26, 18, 2, -4, -4, 32, -9, 15, -3
    0xfdebe81c, 0x3af02603, 0xf110af9, 0xf7f2fa28, 0xeeaf307, 0x1a25110b, 0xfcfc0212, 0xfd0ff720,
    // -13, 12, 50, 22, 23, -32, 17, -5, -36, -9, -10, 5, -7, -9, 19, -17, 1, 94, 0, -62, -43, 22, 48, -102, 6, -34, 4, -14, -27, 8, 52, 28
    0x16320cf3, 0xfb11e017, 0x5f6f7dc, 0xef13f7f9, 0xc2005e01, 0x9a3016d5, 0xf204de06, 0x1c3408e5,
    // -7, -22, -42, -7, 20, -22, 43, -15, 4, 27, -5, -5, 15, -8, 27, 3, -1, 10, 14, -14, -6, 11, -5, -1, 7, 2, -8, -3, -4, 3, 9, -3
    0xf9d6eaf9, 0xf12bea14, 0xfbfb1b04, 0x31bf80f, 0xf20e0aff, 0xfffb0bfa, 0xfdf80207, 0xfd0903fc,
    // -8, 1, 9, 13, -13, -9, -48, -29, -20, 11, -38, -17, -24, 14, -14, 2, -3, 4, 25, 1, -8, 4, -1, -1, -1, -8, -6, -7, -5, 14, 5, -1
    0xd0901f8, 0xe3d0f7f3, 0xefda0bec, 0x2f20ee8, 0x11904fd, 0xffff04f8, 0xf9faf8ff, 0xff050efb,
    // 2, 1, 15, 0, 4, -10, 8, 2, 4, 9, 3, 1, -4, -7, -6, -5, 4, 8, -28, -10, -22, 21, -36, -20, -9, -16, 5, 4, 2, 0, 17, 6
    0xf0102, 0x208f604, 0x1030904, 0xfbfaf9fc, 0xf6e40804, 0xecdc15ea, 0x405f0f7, 0x6110002,
    // 3, -19, -22, 27, 1, 22, 4, 6, 8, -11, 14, -4, 12, 6, 11, -2, -1, -9, -25, -5, -15, 3, -4, -18, 11, 18, -13, -19, 4, 6, -3, 15
    0x1beaed03, 0x6041601, 0xfc0ef508, 0xfe0b060c, 0xfbe7f7ff, 0xeefc03f1, 0xedf3120b, 0xffd0604,
    // -13, 16, -22, 30, 45, -21, 127, -4, -26, 17, -7, -12, 36, -6, -1, -25, 12, -7, 26, -21, 12, -7, -42, -1, -24, -5, -6, 13, -10, 8, -15, 4
    0x1eea10f3, 0xfc7feb2d, 0xf4f911e6, 0xe7fffa24, 0xeb1af90c, 0xffd6f90c, 0xdfafbe8, 0x4f108f6,
    // 3, -8, -19, -2, -9, -3, 15, -1, 14, 6, 3, 5, 11, -5, -3, 9, 1, 11, 11, 10, 4, -4, 5, -4, -13, -9, -6, -4, 3, 2, -1, -11
    0xfeedf803, 0xff0ffdf7, 0x503060e, 0x9fdfb0b, 0xa0b0b01, 0xfc05fc04, 0xfcfaf7f3, 0xf5ff0203,
    // 0, 2, 16, -5, 11, 2, -6, 1, -9, 10, 3, -3, 3, 6, 0, 0, -4, 20, -13, 4, 0, 5, -7, 13, -2, -26, -1, 6, 5, -5, -7, 16
    0xfb100200, 0x1fa020b, 0xfd030af7, 0x603, 0x4f314fc, 0xdf90500, 0x6ffe6fe, 0x10f9fb05,
    // -24, -11, 14, 13, -12, -31, 68, 45, 28, 34, -15, -19, -12, -9, -52, -65, 6, -6, -27, 15, -4, 11, 37, 25, 22, -22, -5, -5, 31, 5, 2, -8
    0xd0ef5e8, 0x2d44e1f4, 0xedf1221c, 0xbfccf7f4, 0xfe5fa06, 0x19250bfc, 0xfbfbea16, 0xf802051f,
    // -2, 20, 21, -6, -3, -2, 5, -7, 3, 8, 11, 4, -4, -7, 18, -21, 9, -55, -20, -1, 19, -39, -108, 38, 77, 41, 4, 5, 35, 13, 1, 65
    0xfa1514fe, 0xf905fefd, 0x40b0803, 0xeb12f9fc, 0xffecc909, 0x2694d913, 0x504294d, 0x41010d23,
    // -8, 6, 3, -38, 4, -15, -15, -39, -24, 36, 3, 20, -31, -21, 32, 24, 4, 6, -19, -19, 11, 6, 7, 3, 17, -20, 0, 5, -6, 2, -10, -1
    0xda0306f8, 0xd9f1f104, 0x140324e8, 0x1820ebe1, 0xeded0604, 0x307060b, 0x500ec11, 0xfff602fa,
    // -6, 2, 4, 42, 12, 6, -44, -2, -12, 15, -16, 3, -13, -15, 1, -33, -9, 28, 42, -10, -2, 11, -32, -11, -8, -4, -3, -27, -28, 10, 8, -2
    0x2a0402fa, 0xfed4060c, 0x3f00ff4, 0xdf01f1f3, 0xf62a1cf7, 0xf5e00bfe, 0xe5fdfcf8, 0xfe080ae4,
    // 5, -8, -12, -2, -17, 20, -12, 0, 0, -3, 8, -4, -1, -2, 12, -8, 4, 11, 30, 1, 10, -27, 1, -29, -27, -3, -4, 10, -13, -3, -3, 8
    0xfef4f805, 0xf414ef, 0xfc08fd00, 0xf80cfeff, 0x11e0b04, 0xe301e50a, 0xafcfde5, 0x8fdfdf3,
    // 5, -21, -9, 29, 2, 7, 33, 42, 17, 8, -2, -19, 30, -2, -10, -17, -7, 11, 10, 20, 21, -6, -2, -21, -3, 0, -20, -2, -8, -7, -13, 11
    0x1df7eb05, 0x2a210702, 0xedfe0811, 0xeff6fe1e, 0x140a0bf9, 0xebfefa15, 0xfeec00fd, 0xbf3f9f8,
    // -16, 57, 35, 15, -50, -24, -29, -92, -15, -12, 15, -26, 2, -12, 78, -28, 5, -18, -44, 15, 46, 10, 9, 46, -32, -25, 1, -3, 37, 42, 8, -16
    0xf2339f0, 0xa4e3e8ce, 0xe60ff4f1, 0xe44ef402, 0xfd4ee05, 0x2e090a2e, 0xfd01e7e0, 0xf0082a25,
    // -8, -4, 14, 1, 11, -19, 37, -5, -3, 5, -13, -4, 2, 6, -9, -8, 6, -15, -57, -16, 24, 10, 7, 35, 13, 11, 7, 3, 41, 13, 18, 23
    0x10efcf8, 0xfb25ed0b, 0xfcf305fd, 0xf8f70602, 0xf0c7f106, 0x23070a18, 0x3070b0d, 0x17120d29,
    // 10, 4, -5, 3, -24, 3, 18, -4, 17, 23, 6, 16, 1, -19, -6, 2, -3, 4, -2, 19, 2, -13, -2, 8, -2, 7, 11, 9, -10, -5, 0, -10
    0x3fb040a, 0xfc1203e8, 0x10061711, 0x2faed01, 0x13fe04fd, 0x8fef302, 0x90b07fe, 0xf600fbf6,
    // 2, 7, -6, 20, -8, -16, 38, 11, 19, 6, -2, -22, 11, -1, 5, 10, 0, 1, 20, 7, -7, -8, 2, 23, 19, 12, -8, -9, 8, -22, 6, 3
    0x14fa0702, 0xb26f0f8, 0xeafe0613, 0xa05ff0b, 0x7140100, 0x1702f8f9, 0xf7f80c13, 0x306ea08,
    // -3, -1, -21, 4, -25, -20, -6, -13, -2, 18, -2, -20, 1, -1, -14, 2, 14, -20, 65, -117, 40, -9, -2, 80, -48, -57, 12, -32, 13, 94, -56, -81
    0x4ebfffd, 0xf3faece7, 0xecfe12fe, 0x2f2ff01, 0x8b41ec0e, 0x50fef728, 0xe00cc7d0, 0xafc85e0d,
    // 0, -5, -34, 13, 18, 0, -21, 22, 0, -8, 11, -9, 9, 13, 4, -11, 16, -10, -8, 3, -4, -5, 35, 13, 12, 25, 9, 5, 22, -3, -3, 11
    0xddefb00, 0x16eb0012, 0xf70bf800, 0xf5040d09, 0x3f8f610, 0xd23fbfc, 0x509190c, 0xbfdfd16,
    // 8, 5, -4, 8, -11, -10, 6, 1, -14, -9, 9, -5, 28, 10, -7, 26, -6, -1, 13, 4, -7, -8, -10, -16, -4, 14, 13, 18, -12, -4, -3, 1
    0x8fc0508, 0x106f6f5, 0xfb09f7f2, 0x1af90a1c, 0x40dfffa, 0xf0f6f8f9, 0x120d0efc, 0x1fdfcf4,
    // 1, -6, 5, -7, 2, 7, 13, 1, -4, -11, 0, -5, 8, 1, -10, 4, 1, -2, 4, -17, 9, 0, -19, -37, -17, 5, -6, 16, -13, 7, 1, 3
    0xf905fa01, 0x10d0702, 0xfb00f5fc, 0x4f60108, 0xef04fe01, 0xdbed0009, 0x10fa05ef, 0x30107f3,
    // 4, -11, -9, 7, 14, 5, 19, -14, -12, -1, 0, -11, -3, 13, 8, -6, -1, 16, 25, 6, 22, -1, -7, -13, 2, -11, -11, 1, -15, -2, -24, -5
    0x7f7f504, 0xf213050e, 0xf500fff4, 0xfa080dfd, 0x61910ff, 0xf3f9ff16, 0x1f5f502, 0xfbe8fef1,
    // 11, -1, 1, -20, -45, -17, -40, -5, 73, 94, -39, 17, -30, -63, -89, 30, 4, -16, -28, -5, 23, 23, -17, 1, -10, 5, 7, 8, 13, 12, 12, 10
    0xec01ff0b, 0xfbd8efd3, 0x11d95e49, 0x1ea7c1e2, 0xfbe4f004, 0x1ef1717, 0x80705f6, 0xa0c0c0d,
    // -8, 7, -2, -4, 3, -5, 5, 8, -3, -14, -14, -3, -1, -3, -6, -11, 1, -4, -20, -16, 11, 14, -4, 14, 6, 16, 7, 2, -8, 7, -6, -5
    0xfcfe07f8, 0x805fb03, 0xfdf2f2fd, 0xf5fafdff, 0xf0ecfc01, 0xefc0e0b, 0x2071006, 0xfbfa07f8,
    // 1, 1, 0, -8, 5, 14, -3, 0, 5, 0, -2, 0, 7, -3, -1, 10, 2, 0, -17, -7, 0, 1, -2, -6, 13, 13, 7, 2, -15, -4, 1, -11
    0xf8000101, 0xfd0e05, 0xfe0005, 0xafffd07, 0xf9ef0002, 0xfafe0100, 0x2070d0d, 0xf501fcf1,
    // 7, -3, -15, 3, 7, -1, -3, 11, -5, -4, 6, -1, 2, -6, -3, 6, 9, 2, 4, 16, -1, 9, -10, 14, -18, -1, -1, -7, 3, 2, 1, 23
    0x3f1fd07, 0xbfdff07, 0xff06fcfb, 0x6fdfa02, 0x10040209, 0xef609ff, 0xf9ffffee, 0x17010203,
    // 0, -15, -12, 2, 21, -6, 41, -3, 7, 17, 0, -8, 4, 1, -16, 6, -11, 10, -64, -1, 22, 56, -25, -7, -24, 1, 1, -24, 99, 52, 1, -6
    0x2f4f100, 0xfd29fa15, 0xf8001107, 0x6f00104, 0xffc00af5, 0xf9e73816, 0xe80101e8, 0xfa013463,
    // 1, 3, -17, -1, 4, -12, 45, 4, 13, -2, -15, -17, 5, -1, 2, -19, -8, 25, 80, 42, -14, -26, -12, -31, -46, -31, -10, 10, -6, 3, 2, -6
    0xffef0301, 0x42df404, 0xeff1fe0d, 0xed02ff05, 0x2a5019f8, 0xe1f4e6f2, 0xaf6e1d2, 0xfa0203fa,
    // 17, 0, -15, 11, -23, -8, 13, -11, 13, 7, 7, -1, -14, -2, -17, 14, -1, -3, -4, -21, -6, -5, 25, 3, 14, 9, 2, 5, 0, -7, 0, -9
    0xbf10011, 0xf50df8e9, 0xff07070d, 0xeeffef2, 0xebfcfdff, 0x319fbfa, 0x502090e, 0xf700f900,
};
static const uint embedded_decoder2_ResidualBlock_1_body_conv_dw_bias_dwords[8] = {
    // -0.02567, -0.01338, 0.01599, -0.005383, 0.012474, -0.01901, -0.01883, 0.000489, -0.0006404, 0.003275, 0.01746, -0.004677, 0.0242, 0.01999, 0.01566, 0.02713
    0xa2daa692, 0x9d832418, 0xa4de2263, 0x1002a4d2, 0x1ab5913f, 0x9cca2478, 0x251e2632, 0x26f22402,
};
static const uint embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 47, -38, 26, -31, 19, 30, 29, -43, 18, -7, -2, 71, -57, 57, -95, -4, -20, -38, 54, 51, 53, -33, 98, 7, -58, 44, 69, 68, -43, 8, 40, -31
    0xe11ada2f, 0xd51d1e13, 0x47fef912, 0xfca139c7, 0x3336daec, 0x762df35, 0x44452cc6, 0xe12808d5,
    // 16, 38, 21, -9, 68, 31, 25, -33, 5, 67, 44, -4, 3, 37, 85, 83, 88, 11, -9, 38, -40, -76, -18, 40, 73, 100, -112, 28, -19, 10, 35, 35
    0xf7152610, 0xdf191f44, 0xfc2c4305, 0x53552503, 0x26f70b58, 0x28eeb4d8, 0x1c906449, 0x23230aed,
    // 26, -43, 7, -36, 13, 14, -56, -85, -2, -11, -23, 17, -38, 38, -4, 88, -11, 52, 25, -81, -13, -5, -18, 22, 100, -40, -49, -4, 41, -6, 26, -38
    0xdc07d51a, 0xabc80e0d, 0x11e9f5fe, 0x58fc26da, 0xaf1934f5, 0x16eefbf3, 0xfccfd864, 0xda1afa29,
    // -7, -85, 88, -20, 16, -39, -41, 72, 2, -23, 66, 22, -4, 30, -20, 42, 23, -74, 53, 26, -35, -25, 96, -70, -8, -4, -88, -18, 81, -67, 57, 30
    0xec58abf9, 0x48d7d910, 0x1642e902, 0x2aec1efc, 0x1a35b617, 0xba60e7dd, 0xeea8fcf8, 0x1e39bd51,
    // -18, -1, -3, -51, 26, 1, 49, -73, -90, 10, 105, -34, 45, 43, -56, -40, -39, -52, -20, -86, 45, 35, 50, -9, -65, -99, 100, -74, -13, 56, 8, -91
    0xcdfdffee, 0xb731011a, 0xde690aa6, 0xd8c82b2d, 0xaaecccd9, 0xf732232d, 0xb6649dbf, 0xa50838f3,
    // 11, 21, -15, -8, 1, 23, -13, -25, 43, 25, -103, 5, 57, 16, 86, 23, -32, 34, -38, -25, -65, 52, 23, -7, -41, 82, -108, 40, -2, 8, -25, -22
    0xf8f1150b, 0xe7f31701, 0x599192b, 0x17561039, 0xe7da22e0, 0xf91734bf, 0x289452d7, 0xeae708fe,
    // 79, -52, -60, -98, 27, 68, 32, -43, 82, 28, 84, 57, 35, 6, -29, 2, -26, -30, -39, -7, 45, -27, -6, -54, -8, 20, -105, 21, 16, -11, 50, -29
    0x9ec4cc4f, 0xd520441b, 0x39541c52, 0x2e30623, 0xf9d9e2e6, 0xcafae52d, 0x159714f8, 0xe332f510,
    // -17, -83, -29, 67, -79, 7, -7, -23, -85, -17, 22, 27, -58, -57, -52, -19, 110, 20, -22, -30, 8, 14, 81, 120, -19, -12, -11, 8, 16, -9, -20, 34
    0x43e3adef, 0xe9f907b1, 0x1b16efab, 0xedccc7c6, 0xe2ea146e, 0x78510e08, 0x8f5f4ed, 0x22ecf710,
    // -17, -61, 15, -25, 61, -5, 57, -9, 67, 27, -122, -108, -38, -2, -38, -4, 54, 60, -82, 31, 9, 50, -103, 25, -2, -6, -61, -38, 37, 33, -21, 31
    0xe70fc3ef, 0xf739fb3d, 0x94861b43, 0xfcdafeda, 0x1fae3c36, 0x19993209, 0xdac3fafe, 0x1feb2125,
    // -45, 4, -73, 24, -23, -87, 20, -13, 98, -48, 103, 70, 16, -32, -17, -26, 57, 11, 109, 42, -4, -81, -60, -31, 64, 90, 117, -52, 40, -70, -57, 67
    0x18b704d3, 0xf314a9e9, 0x4667d062, 0xe6efe010, 0x2a6d0b39, 0xe1c4affc, 0xcc755a40, 0x43c7ba28,
    // -11, -20, -9, -42, -53, 17, 61, 7, -4, -79, -42, -13, 20, -12, -6, 98, -75, -6, 28, -99, 20, -71, -3, -55, -113, -71, 127, 17, -21, -6, -9, -57
    0xd6f7ecf5, 0x73d11cb, 0xf3d6b1fc, 0x62faf414, 0x9d1cfab5, 0xc9fdb914, 0x117fb98f, 0xc7f7faeb,
    // 22, 29, 25, 45, -54, 10, -42, 7, 72, 14, 127, -60, 7, 4, -51, 86, 30, 82, -6, -53, 119, -4, 12, -67, -102, -37, -119, 72, 13, -120, -88, 39
    0x2d191d16, 0x7d60aca, 0xc47f0e48, 0x56cd0407, 0xcbfa521e, 0xbd0cfc77, 0x4889db9a, 0x27a8880d,
    // 8, -93, 68, 101, 61, 74, -74, 97, 92, -23, -100, 75, 18, 14, 27, 40, 25, -32, 37, 95, 28, -14, -83, 43, 75, -98, 4, 27, -48, -17, 86, 32
    0x6544a308, 0x61b64a3d, 0x4b9ce95c, 0x281b0e12, 0x5f25e019, 0x2badf21c, 0x1b049e4b, 0x2056efd0,
    // -96, 30, -35, 15, 2, 54, 55, 1, 26, 7, 14, -61, 71, -19, 32, -33, 47, 28, -24, -19, -58, -83, -61, 25, 60, -75, -39, -27, 11, -38, -66, 24
    0xfdd1ea0, 0x1373602, 0xc30e071a, 0xdf20ed47, 0xede81c2f, 0x19c3adc6, 0xe5d9b53c, 0x18beda0b,
    // 26, 64, -26, -36, 34, 92, 50, -46, -41, -60, -57, -6, -24, -1, -53, -9, 83, 105, -39, -12, -2, -93, 70, -92, 5, -71, -47, -39, -93, 22, 11, -41
    0xdce6401a, 0xd2325c22, 0xfac7c4d7, 0xf7cbffe8, 0xf4d96953, 0xa446a3fe, 0xd9d1b905, 0xd70b16a3,
    // -9, 58, -102, -46, -26, -45, 9, 6, -41, 64, -72, -46, 32, -44, 20, -16, 24, 8, 38, 50, -30, -44, 24, -13, -45, -8, -95, 36, 34, 64, -38, -8
    0xd29a3af7, 0x609d3e6, 0xd2b840d7, 0xf014d420, 0x32260818, 0xf318d4e2, 0x24a1f8d3, 0xf8da4022,
};
static const uint embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords[16] = {
    // 0.01767, 0.003132, 0.01029, 0.001219, 0.00727, 0.01823, 0.02917, -0.02028, 0.03766, 0.03069, 0.01439, 0.005127, -0.004234, -0.0381, 0.007214, 0.00889
    0x1a6a2486, 0x14fe2145, 0x24ab1f72, 0xa5312778, 0x27db28d2, 0x1d40235e, 0xa8e09c56, 0x208d1f63,
    // 0.04462, 0.02696, -0.0404, 0.0326, 0.0004964, 0.01298, 0.02448, -0.1002, -0.02383, -0.002644, 0.1083, 0.006344, -0.01793, -0.01206, -0.00998, -0.008095
    0x26e729b6, 0x282ca92c, 0x22a51011, 0xae6a2644, 0x996aa61a, 0x1e7f2eee, 0xa22da497, 0xa025a11c,
};
static const uint embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -12, 6, 23, 1, -12, 17, 31, -17, 3, -7, -3, -3, 20, -18, 20, -4, -28, -6, 6, -41, -11, 23, 81, 45, 25, -37, 24, 4, -90, 2, 15, -28
    0x11706f4, 0xef1f11f4, 0xfdfdf903, 0xfc14ee14, 0xd706fae4, 0x2d5117f5, 0x418db19, 0xe40f02a6,
    // 78, 16, 37, -33, 12, 44, -27, 18, -88, -72, -20, -60, -37, 76, -27, 26, 94, -7, 23, -64, 54, 107, 23, -32, 35, -35, -95, 0, 92, -39, 62, 62
    0xdf25104e, 0x12e52c0c, 0xc4ecb8a8, 0x1ae54cdb, 0xc017f95e, 0xe0176b36, 0xa1dd23, 0x3e3ed95c,
    // 52, 39, -61, -6, 79, 99, -15, 54, 1, -87, -14, 29, 51, -56, 42, -37, -23, 102, -68, -10, -55, 57, 65, 8, -25, 63, 16, -14, 24, 0, -44, -43
    0xfac32734, 0x36f1634f, 0x1df2a901, 0xdb2ac833, 0xf6bc66e9, 0x84139c9, 0xf2103fe7, 0xd5d40018,
    // -12, 15, 6, 23, 51, 36, 36, 22, 6, 11, -15, -83, 16, 38, 19, -30, -99, 49, 7, -17, 11, -29, 25, -119, 27, -79, 22, -82, 52, 54, 54, -94
    0x17060ff4, 0x16242433, 0xadf10b06, 0xe2132610, 0xef07319d, 0x8919e30b, 0xae16b11b, 0xa2363634,
    // 94, 47, -84, 11, 88, 54, 86, -11, 71, 57, -102, -23, 22, 78, 85, -119, -112, 24, -50, -15, -48, -62, 0, 7, 55, -80, -84, -72, -23, 8, 3, 42
    0xbac2f5e, 0xf5563658, 0xe99a3947, 0x89554e16, 0xf1ce1890, 0x700c2d0, 0xb8acb037, 0x2a0308e9,
    // 15, 37, 7, -99, -16, -20, -44, -91, 34, -1, 0, 107, -22, -27, 13, -31, -121, -40, 102, 31, 21, 78, 4, -57, -36, 68, 16, 1, 92, -105, -55, 21
    0x9d07250f, 0xa5d4ecf0, 0x6b00ff22, 0xe10de5ea, 0x1f66d887, 0xc7044e15, 0x11044dc, 0x15c9975c,
    // 25, -20, -67, 47, -38, 17, 13, 63, 23, 1, 28, -82, 46, 69, 42, 15, 0, 43, -81, -102, -62, -59, 82, 18, -46, 81, -12, -48, 5, -38, 3, -63
    0x2fbdec19, 0x3f0d11da, 0xae1c0117, 0xf2a452e, 0x9aaf2b00, 0x1252c5c2, 0xd0f451d2, 0xc103da05,
    // 15, -40, -4, 37, -50, 14, 7, 95, -43, 20, 75, -36, 13, 25, 59, 85, 103, -87, -53, 51, -80, 18, -96, -20, 37, -25, 6, 67, 7, -56, 36, -37
    0x25fcd80f, 0x5f070ece, 0xdc4b14d5, 0x553b190d, 0x33cba967, 0xeca012b0, 0x4306e725, 0xdb24c807,
    // 35, -28, -69, -39, -36, 33, -41, 18, 3, -3, -89, 61, 48, -104, -38, -105, -31, 42, -78, 67, -54, -12, -50, -9, 10, 15, -7, -26, -48, 2, -48, -6
    0xd9bbe423, 0x12d721dc, 0x3da7fd03, 0x97da9830, 0x43b22ae1, 0xf7cef4ca, 0xe6f90f0a, 0xfad002d0,
    // 2, 33, -14, 52, 53, 18, 10, -18, 57, 31, -36, -67, -20, 6, -34, -49, 33, -2, 8, -29, 10, -62, 8, 7, 5, -66, -6, 45, 23, -24, 93, 91
    0x34f22102, 0xee0a1235, 0xbddc1f39, 0xcfde06ec, 0xe308fe21, 0x708c20a, 0x2dfabe05, 0x5b5de817,
    // -52, 47, -13, 97, 45, 79, 3, 74, -29, 39, 47, -18, 67, 65, -16, 25, 69, 76, -44, 88, -3, -89, -127, -111, -16, 47, 35, -58, 50, 65, -5, -68
    0x61f32fcc, 0x4a034f2d, 0xee2f27e3, 0x19f04143, 0x58d44c45, 0x9181a7fd, 0xc6232ff0, 0xbcfb4132,
    // -6, 13, -1, -3, -9, -4, -6, 1, 16, 8, -3, 27, 6, 1, 10, 9, -20, -6, 10, 5, -12, -7, -3, -8, -11, 12, 16, -8, 13, -1, -19, -31
    0xfdff0dfa, 0x1fafcf7, 0x1bfd0810, 0x90a0106, 0x50afaec, 0xf8fdf9f4, 0xf8100cf5, 0xe1edff0d,
    // 32, 10, 3, 79, 14, 34, -80, 37, 104, 98, 1, -21, 12, 90, 41, 18, 2, -37, 25, 51, -17, -128, -123, 4, -100, 94, -12, 35, 2, -16, 36, -12
    0x4f030a20, 0x25b0220e, 0xeb016268, 0x12295a0c, 0x3319db02, 0x48580ef, 0x23f45e9c, 0xf424f002,
    // 8, -2, -3, 10, 24, 3, 9, -11, 7, 6, 5, 3, 2, -19, -3, 14, 18, 10, -4, 18, 7, -8, -14, -5, -13, 15, -9, 14, 4, -16, -5, 23
    0xafdfe08, 0xf5090318, 0x3050607, 0xefded02, 0x12fc0a12, 0xfbf2f807, 0xef70ff3, 0x17fbf004,
    // -58, 97, 84, 111, 10, -62, 39, 5, 60, 2, -59, 73, -98, 77, -73, -55, 90, -60, 27, -117, 97, -73, 55, -28, -41, 98, 27, -47, -46, 42, -100, 26
    0x6f5461c6, 0x527c20a, 0x49c5023c, 0xc9b74d9e, 0x8b1bc45a, 0xe437b761, 0xd11b62d7, 0x1a9c2ad2,
    // -24, 33, 33, -32, 20, 8, 15, -16, 8, -16, -2, 14, -4, 0, 19, -2, -33, -1, 21, -6, -4, 17, 13, -29, -4, -17, 39, -6, 32, -35, -16, -3
    0xe02121e8, 0xf00f0814, 0xefef008, 0xfe1300fc, 0xfa15ffdf, 0xe30d11fc, 0xfa27effc, 0xfdf0dd20,
};
static const uint embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords[8] = {
    // -0.0992, -0.2578, -0.137, -0.0319, 0.09534, 0.1298, 0.04065, -0.007782, 0.02263, -0.01039, -0.04105, 0.0661, -0.0952, 0.02141, 0.1211, 0.00261
    0xb420ae59, 0xa815b062, 0x30272e1a, 0x9ff82934, 0xa15225cb, 0x2c3ba941, 0x257bae18, 0x19582fc0,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass12(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(3840, 2160, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(3840, 2160, 16), // threadGroupSliceSize
        uint3(3840, 2160, 16), // storageSize
        uint3(16, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        199065600, // threadGroupStorageByteOffset
        0.024364154785871506, storage_fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005244061816483736, storage_embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_1_body_conv_dw_bias = { embedded_decoder2_ResidualBlock_1_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_1_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_1_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0051841107197105885, storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias = { embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005210493225604296, storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias = { embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias };
    
    // fused_quantized_NHWC_/decoder2/ResidualBlock_2/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_24 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_24 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 16);
    const uint3 groupSize_slice_24 = uint3(64, 1, 16);
    const uint3 storageSize_slice_24 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_24 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_24 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_24 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_24 = dot(groupStart_slice_24, tensorByteStrides_slice_24);
    const float quantizationScale_slice_24 = 0.03317117691040039;
    const RWBufferStorage storage_slice_24 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_24 = { logicalSize_slice_24, groupStart_slice_24, groupSize_slice_24, storageSize_slice_24, tensorByteStrides_slice_24, paddingBegin_slice_24, paddingEnd_slice_24, threadGroupByteOffsetInTensor_slice_24 + 0, quantizationScale_slice_24, storage_slice_24 };
    // ConvNextBlock (16, 2160, 3840), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,) -> (16, 2160, 3840)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    ConvNextBlock(35.58970018444803, 0.02809801697731018, 26.123592453770318, 0.03827957436442375, fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_1_body_conv_dw_bias, embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias, embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias, slice_24, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_12
#ifdef MLSR_PASS_12_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass12_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/decoder2/ResidualBlock_2/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_25 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_25 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_25 = uint3(32, 1, 16);
    const uint3 storageSize_slice_25 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_25 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_25 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_25 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_25 = dot(groupStart_slice_25, tensorByteStrides_slice_25);
    const float quantizationScale_slice_25 = 0.03317117691040039;
    const RWBufferStorage storage_slice_25 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_25 = { logicalSize_slice_25, groupStart_slice_25, groupSize_slice_25, storageSize_slice_25, tensorByteStrides_slice_25, paddingBegin_slice_25, paddingEnd_slice_25, threadGroupByteOffsetInTensor_slice_25 + 0, quantizationScale_slice_25, storage_slice_25 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_25, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_12_POST


#ifdef MLSR_PASS_13
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/float16_NHWC/Fused/CNB_CT2D.hlsli"

static const uint embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 8, -10, 18, 8, -4, 1, 13, 34, 12, 2, 4, -13, 12, -7, -3, 3, 40, -25, 6, -32, -14, -17, 38, -5, -7, -4, -26, -18, 17, -4, -23, -39
    0x812f608, 0x220d01fc, 0xf304020c, 0x3fdf90c, 0xe006e728, 0xfb26eff2, 0xeee6fcf9, 0xd9e9fc11,
    // 9, -8, 12, 12, 8, 3, 5, 16, -8, -19, -5, -16, 17, -7, -5, 4, -9, -4, -13, 37, 9, -39, -17, -1, -1, -50, 13, -17, -9, -23, 0, 12
    0xc0cf809, 0x10050308, 0xf0fbedf8, 0x4fbf911, 0x25f3fcf7, 0xffefd909, 0xef0dceff, 0xc00e9f7,
    // -19, 32, 67, 27, 21, -47, 18, 27, -32, -45, -13, 42, -66, -31, -78, 26, -26, -9, 1, 52, 26, 1, -11, 32, -14, -36, 9, -40, -6, 64, -15, 16
    0x1b4320ed, 0x1b12d115, 0x2af3d3e0, 0x1ab2e1be, 0x3401f7e6, 0x20f5011a, 0xd809dcf2, 0x10f140fa,
    // 11, -6, 16, -2, 1, 2, 7, 12, 5, 5, 6, -15, 4, -3, -2, 25, -16, -9, 24, -43, 2, 26, 74, 27, -4, 24, -10, -5, 16, 46, -6, 34
    0xfe10fa0b, 0xc070201, 0xf1060505, 0x19fefd04, 0xd518f7f0, 0x1b4a1a02, 0xfbf618fc, 0x22fa2e10,
    // -4, -15, 26, 5, 5, -28, 15, 15, -4, -20, -2, 9, 4, 15, -1, 14, 2, 10, -15, -4, 0, 11, 2, -2, 6, -5, 10, 4, -10, -18, 3, 0
    0x51af1fc, 0xf0fe405, 0x9feecfc, 0xeff0f04, 0xfcf10a02, 0xfe020b00, 0x40afb06, 0x3eef6,
    // -9, -3, -16, -28, 5, 15, -6, 6, -15, -13, 15, 29, 8, 25, -5, 1, -3, -3, -6, 9, 2, 4, 9, -12, 6, -7, 9, -18, -4, 18, -1, -8
    0xe4f0fdf7, 0x6fa0f05, 0x1d0ff3f1, 0x1fb1908, 0x9fafdfd, 0xf4090402, 0xee09f906, 0xf8ff12fc,
    // 9, 21, -4, 4, 2, 8, 3, -8, 9, 28, 2, -5, -13, -15, -3, 9, 13, -3, 2, -66, 11, 7, -28, 7, 23, 27, -38, 44, -32, -11, -60, -81
    0x4fc1509, 0xf8030802, 0xfb021c09, 0x9fdf1f3, 0xbe02fd0d, 0x7e4070b, 0x2cda1b17, 0xafc4f5e0,
    // -17, 20, 2, 5, 7, 18, 22, -9, -3, 21, 8, -11, -11, 26, 5, 5, -7, 7, -5, 14, 0, -1, -9, -9, -2, -18, 3, 19, 1, -32, -8, -28
    0x50214ef, 0xf7161207, 0xf50815fd, 0x5051af5, 0xefb07f9, 0xf7f7ff00, 0x1303eefe, 0xe4f8e001,
    // 8, -7, -34, -29, 4, 13, 15, 6, 16, -16, 22, -11, -9, 45, 2, 30, -12, 9, -24, -7, 2, -7, -2, -12, -4, -9, 7, 3, -2, -2, -3, 6
    0xe3def908, 0x60f0d04, 0xf516f010, 0x1e022df7, 0xf9e809f4, 0xf4fef902, 0x307f7fc, 0x6fdfefe,
    // 2, -5, 19, -2, 5, -1, -1, 7, -2, -7, 7, -1, 7, 13, -2, 10, -19, -13, 28, 33, -14, -11, -8, -15, 10, 0, 16, -57, -10, 73, 3, 28
    0xfe13fb02, 0x7ffff05, 0xff07f9fe, 0xafe0d07, 0x211cf3ed, 0xf1f8f5f2, 0xc710000a, 0x1c0349f6,
    // -2, -1, 21, 9, 2, 18, -3, 10, 4, 1, 4, -22, 8, -5, -4, 8, -6, -5, 25, -21, 9, 6, 18, 6, -11, -1, 15, -9, 3, -13, -5, 13
    0x915fffe, 0xafd1202, 0xea040104, 0x8fcfb08, 0xeb19fbfa, 0x6120609, 0xf70ffff5, 0xdfbf303,
    // 49, 6, 106, -1, 18, -93, 57, -70, -24, 85, -41, 14, -20, -71, -9, -61, 4, -6, 16, -21, 15, 0, 11, -7, -13, -2, -16, -23, 12, 16, -10, -8
    0xff6a0631, 0xba39a312, 0xed755e8, 0xc3f7b9ec, 0xeb10fa04, 0xf90b000f, 0xe9f0fef3, 0xf8f6100c,
    // 15, 1, -3, -12, 15, 8, 3, 15, -1, -17, 14, -13, 5, 0, -2, 43, 4, -2, -1, 11, 28, -15, -23, -7, 13, -26, 14, -9, -6, -3, 9, 11
    0xf4fd010f, 0xf03080f, 0xf30eefff, 0x2bfe0005, 0xbfffe04, 0xf9e9f11c, 0xf70ee60d, 0xb09fdfa,
    // 6, 2, 13, -5, 10, 11, -1, 19, 7, -8, 10, 4, 7, -2, -1, 17, 13, 5, 4, 7, 9, 14, -9, -8, -10, 18, 15, 6, 2, 2, 3, 2
    0xfb0d0206, 0x13ff0b0a, 0x40af807, 0x11fffe07, 0x704050d, 0xf8f70e09, 0x60f12f6, 0x2030202,
    // 21, -35, 20, -9, 3, -10, -25, -30, 24, 58, 5, -8, 23, 3, 2, 9, 3, 8, 12, 7, -5, -2, -2, 1, -1, 21, 9, 18, -5, -4, -5, 4
    0xf714dd15, 0xe2e7f603, 0xf8053a18, 0x9020317, 0x70c0803, 0x1fefefb, 0x120915ff, 0x4fbfcfb,
    // -4, 42, 22, 14, 26, 10, -27, -29, 1, 32, 14, 18, -7, -15, -12, 9, 17, -34, 19, -1, 28, 12, -56, -25, 16, -24, 34, -22, 14, 5, 28, -12
    0xe162afc, 0xe3e50a1a, 0x120e2001, 0x9f4f1f9, 0xff13de11, 0xe7c80c1c, 0xea22e810, 0xf41c050e,
    // -21, 36, 29, 37, 7, -11, -4, -17, 3, 46, 16, 34, 4, -7, -4, 26, -3, 9, 26, -2, 6, 11, 13, 12, -3, 20, 7, 14, -3, 1, 0, 2
    0x251d24eb, 0xeffcf507, 0x22102e03, 0x1afcf904, 0xfe1a09fd, 0xc0d0b06, 0xe0714fd, 0x20001fd,
    // -10, -27, 50, -15, -8, 22, -2, 16, 10, 63, 11, 9, 14, 11, 14, 10, 18, 5, 10, 4, -7, 16, -11, 6, 7, 39, 4, 10, -8, -14, 11, 0
    0xf132e5f6, 0x10fe16f8, 0x90b3f0a, 0xa0e0b0e, 0x40a0512, 0x6f510f9, 0xa042707, 0xbf2f8,
    // 11, 18, -1, -4, -7, 0, -4, -4, 6, -6, 6, -6, 8, 11, 1, 12, -7, 25, -14, 12, -17, -10, -4, -15, 21, -21, 17, -22, 22, 52, -4, 5
    0xfcff120b, 0xfcfc00f9, 0xfa06fa06, 0xc010b08, 0xcf219f9, 0xf1fcf6ef, 0xea11eb15, 0x5fc3416,
    // 4, 21, 4, 2, 1, -2, -5, -2, 8, -11, 1, -8, 20, 5, -6, 9, -9, 16, -16, -1, -1, -1, 17, -25, 15, -19, -4, -17, 46, 8, -5, 55
    0x2041504, 0xfefbfe01, 0xf801f508, 0x9fa0514, 0xfff010f7, 0xe711ffff, 0xeffced0f, 0x37fb082e,
    // -123, 107, 35, -41, -26, 74, 59, -39, 34, -10, 8, 13, 99, 57, -31, 23, -18, 40, -22, 15, 2, 4, 12, -7, 22, -43, -5, -23, 36, 54, 0, 3
    0xd7236b85, 0xd93b4ae6, 0xd08f622, 0x17e13963, 0xfea28ee, 0xf90c0402, 0xe9fbd516, 0x3003624,
    // 11, 18, 1, 5, 0, -3, -2, -2, 4, -19, 14, -9, 12, -2, -2, 22, 0, 28, -15, -13, -10, -5, 13, -13, 18, -20, 9, -5, 22, 22, -14, 14
    0x501120b, 0xfefefd00, 0xf70eed04, 0x16fefe0c, 0xf3f11c00, 0xf30dfbf6, 0xfb09ec12, 0xef21616,
    // 1, 14, -7, 1, -1, -14, -3, -9, 2, -13, 3, 7, 12, 15, -3, 12, -7, -7, -5, 0, 7, -5, 4, -15, 20, 1, -10, 18, -8, 8, 2, 2
    0x1f90e01, 0xf7fdf2ff, 0x703f302, 0xcfd0f0c, 0xfbf9f9, 0xf104fb07, 0x12f60114, 0x20208f8,
    // 4, -12, -4, 6, 6, 9, -4, -5, 51, 47, -7, 10, 6, -5, 7, -3, -1, -20, -9, -3, -9, -13, 21, -15, 16, 16, -8, 10, -11, 26, -5, 4
    0x6fcf404, 0xfbfc0906, 0xaf92f33, 0xfd07fb06, 0xfdf7ecff, 0xf115f3f7, 0xaf81010, 0x4fb1af5,
    // 20, 34, 7, 30, 7, 11, 6, 10, 21, 55, -1, 42, -24, -5, -1, -19, -29, 79, 11, 46, 3, 32, 101, -19, 41, 70, 23, -15, -42, -1, 8, 43
    0x1e072214, 0xa060b07, 0x2aff3715, 0xedfffbe8, 0x2e0b4fe3, 0xed652003, 0xf1174629, 0x2b08ffd6,
    // 14, 13, 0, 9, -8, -14, 18, -15, 15, 84, 2, 45, -33, -35, 4, 9, -8, -7, -7, 6, 1, -9, -7, -3, 18, 15, -14, 28, -13, 4, -1, -26
    0x9000d0e, 0xf112f2f8, 0x2d02540f, 0x904dddf, 0x6f9f9f8, 0xfdf9f701, 0x1cf20f12, 0xe6ff04f3,
    // 15, -12, 9, 9, -11, 6, -3, -16, 34, 16, -1, 18, 1, -5, 23, -19, 2, -8, -4, 4, -8, -4, 16, -3, 26, 38, -13, 3, -1, 7, -3, -8
    0x909f40f, 0xf0fd06f5, 0x12ff1022, 0xed17fb01, 0x4fcf802, 0xfd10fcf8, 0x3f3261a, 0xf8fd07ff,
    // -16, -10, -2, -9, 8, -6, -5, -3, -8, -12, -10, 24, -4, 13, -2, 21, -25, -13, 10, 2, -2, 4, -7, 15, -8, -1, 5, 12, -5, 34, 8, 19
    0xf7fef6f0, 0xfdfbfa08, 0x18f6f4f8, 0x15fe0dfc, 0x20af3e7, 0xff904fe, 0xc05fff8, 0x130822fb,
    // -12, -11, -1, 0, 6, -6, 3, -2, -4, -10, -1, -4, -3, 23, -2, 18, -18, -14, 2, -4, 1, 3, 5, 3, -3, 12, -14, 13, -1, 38, -4, 47
    0xfff5f4, 0xfe03fa06, 0xfcfff6fc, 0x12fe17fd, 0xfc02f2ee, 0x3050301, 0xdf20cfd, 0x2ffc26ff,
    // -10, -1, -18, 31, -5, 30, 3, 41, 9, 1, 6, 21, 10, 65, 22, 15, -22, 3, -7, -9, 10, -17, -8, 1, -7, -11, 10, 27, 4, 35, 9, 32
    0x1feefff6, 0x29031efb, 0x15060109, 0xf16410a, 0xf7f903ea, 0x1f8ef0a, 0x1b0af5f9, 0x20092304,
    // -12, -3, 10, 16, -7, -12, -14, -7, -10, -13, -15, 27, 7, 12, -4, 5, -15, -6, 7, 5, -24, 1, 2, 8, -3, 11, -1, 4, 9, 28, -3, 27
    0x100afdf4, 0xf9f2f4f9, 0x1bf1f3f6, 0x5fc0c07, 0x507faf1, 0x80201e8, 0x4ff0bfd, 0x1bfd1c09,
    // -7, -2, -6, -5, 0, -2, 4, -4, -7, 6, 1, 15, 1, 14, -4, 15, 7, 4, 7, 2, 4, 3, -10, 2, 4, 8, 6, 8, 4, -3, 5, 10
    0xfbfafef9, 0xfc04fe00, 0xf0106f9, 0xffc0e01, 0x2070407, 0x2f60304, 0x8060804, 0xa05fd04,
    // 7, -10, 8, -8, -6, 13, 12, -3, -21, 18, -8, -7, 13, 17, -2, 8, -2, 7, 2, 10, -1, -7, -15, -3, -3, 0, 2, -3, 5, 12, 5, 7
    0xf808f607, 0xfd0c0dfa, 0xf9f812eb, 0x8fe110d, 0xa0207fe, 0xfdf1f9ff, 0xfd0200fd, 0x7050c05,
    // 14, 7, -4, -13, 16, 0, -16, 8, -1, 12, -6, -4, 1, -20, -14, -3, 6, -39, -119, -28, 26, -14, 77, 15, -40, 127, -57, -94, 71, 26, -92, 1
    0xf3fc070e, 0x8f00010, 0xfcfa0cff, 0xfdf2ec01, 0xe489d906, 0xf4df21a, 0xa2c77fd8, 0x1a41a47,
    // 4, 8, -24, -2, -4, -8, -13, 2, 6, -6, -3, -12, 9, 7, -8, 13, 10, 11, -6, -3, 1, -1, -11, -2, 9, -5, 2, -14, 8, 8, 13, 6
    0xfee80804, 0x2f3f8fc, 0xf4fdfa06, 0xdf80709, 0xfdfa0b0a, 0xfef5ff01, 0xf202fb09, 0x60d0808,
    // 12, 4, 11, -10, -15, -11, 0, -32, -3, 7, -9, -2, 31, -20, -11, -11, -4, 3, 1, 6, -2, -5, -3, -10, 0, 0, -4, -13, 4, 15, 1, -1
    0xf60b040c, 0xe000f5f1, 0xfef707fd, 0xf5f5ec1f, 0x60103fc, 0xf6fdfbfe, 0xf3fc0000, 0xff010f04,
    // -3, 0, 2, -1, 12, -6, 4, -2, 1, -7, 0, 16, 0, 5, -9, 15, 9, -7, 4, 4, -7, 0, 24, 8, -4, 5, -4, -17, -11, 16, -8, -16
    0xff0200fd, 0xfe04fa0c, 0x1000f901, 0xff70500, 0x404f909, 0x81800f9, 0xeffc05fc, 0xf0f810f5,
    // -3, 4, 7, 11, 11, 1, 16, 7, 3, -5, 5, 16, -10, 7, -6, 13, -1, -12, -6, 5, 21, -4, 17, 7, -7, -25, 9, 9, -9, 4, -2, 23
    0xb0704fd, 0x710010b, 0x1005fb03, 0xdfa07f6, 0x5faf4ff, 0x711fc15, 0x909e7f9, 0x17fe04f7,
    // 30, -18, -15, -46, -30, -2, 104, 8, 16, -63, -7, -20, -33, -53, -9, -71, -7, -3, -12, -29, 17, -17, 15, 1, -3, -11, 7, 45, -10, 14, -15, 25
    0xd2f1ee1e, 0x868fee2, 0xecf9c110, 0xb9f7cbdf, 0xe3f4fdf9, 0x10fef11, 0x2d07f5fd, 0x19f10ef6,
    // 3, 4, 11, 6, 5, -6, 9, 16, 1, -3, -3, 19, -6, 4, -4, 11, 4, 3, 22, 26, -12, -1, 8, 10, -19, 5, -2, 25, 5, -43, -17, -40
    0x60b0403, 0x1009fa05, 0x13fdfd01, 0xbfc04fa, 0x1a160304, 0xa08fff4, 0x19fe05ed, 0xd8efd505,
    // 13, 2, 3, -1, 7, 16, 15, 13, 11, 10, 6, 9, -10, 2, 1, -2, -2, -4, 11, -7, -7, -22, 12, -24, 12, 33, -1, -26, -13, 19, -14, -1
    0xff03020d, 0xd0f1007, 0x9060a0b, 0xfe0102f6, 0xf90bfcfe, 0xe80ceaf9, 0xe6ff210c, 0xfff213f3,
    // -27, -25, 7, 34, -11, 0, 2, 15, 23, 7, -2, -44, -17, 62, -8, 29, 8, -6, 14, -3, 0, -9, 13, -10, 3, 24, -6, 14, -12, -39, -9, 18
    0x2207e7e5, 0xf0200f5, 0xd4fe0717, 0x1df83eef, 0xfd0efa08, 0xf60df700, 0xefa1803, 0x12f7d9f4,
    // -22, 7, 28, -27, -28, -19, 40, -15, 16, 25, 2, -46, -27, 19, -24, 20, -46, -36, 25, -47, -14, 7, -19, 50, 47, 27, 10, 40, 9, -26, -70, 47
    0xe51c07ea, 0xf128ede4, 0xd2021910, 0x14e813e5, 0xd119dcd2, 0x32ed07f2, 0x280a1b2f, 0x2fbae609,
    // -9, -23, 9, -2, -6, 1, 25, -14, 6, 49, -23, -42, -28, 28, -33, 30, 1, -2, 1, -17, 7, -12, 21, -3, 12, 12, 4, -50, -18, 0, -8, 29
    0xfe09e9f7, 0xf21901fa, 0xd6e93106, 0x1edf1ce4, 0xef01fe01, 0xfd15f407, 0xce040c0c, 0x1df800ee,
    // -30, -16, 15, 4, 25, -10, 2, -3, 0, 2, -13, 14, -16, -9, -1, -1, -2, -5, 4, -8, 11, -10, 12, 1, 5, -6, -3, -12, -11, -8, 3, -2
    0x40ff0e2, 0xfd02f619, 0xef30200, 0xfffff7f0, 0xf804fbfe, 0x10cf60b, 0xf4fdfa05, 0xfe03f8f5,
    // 0, 3, -1, -8, -2, 0, -4, 0, 7, 6, -4, -7, -2, -8, 1, -9, -15, -3, -30, 6, 3, 3, 10, -2, -7, -23, 0, -6, 9, 24, -1, -10
    0xf8ff0300, 0xfc00fe, 0xf9fc0607, 0xf701f8fe, 0x6e2fdf1, 0xfe0a0303, 0xfa00e9f9, 0xf6ff1809,
    // -3, 0, -12, -7, -1, -10, 12, -14, 11, 6, -6, -8, 0, -7, -7, 1, -19, 1, 5, 0, -2, 5, 6, 8, 8, 30, 1, -14, -25, -3, 5, 17
    0xf9f400fd, 0xf20cf6ff, 0xf8fa060b, 0x1f9f900, 0x501ed, 0x80605fe, 0xf2011e08, 0x1105fde7,
    // -31, -13, -81, 42, 36, -7, 115, -54, -75, -68, 5, 33, 33, 6, 65, -28, -13, 19, -27, 12, -1, -12, 25, -23, 8, -7, -12, -39, -9, -2, -4, 11
    0x2aaff3e1, 0xca73f924, 0x2105bcb5, 0xe4410621, 0xce513f3, 0xe919f4ff, 0xd9f4f908, 0xbfcfef7,
    // 1, -3, -9, -5, 4, 7, 1, 7, 8, 11, 4, -12, -13, -11, 4, 1, -8, -7, -12, -7, 6, 15, 8, 1, -8, -13, 3, 5, 6, 18, 6, 5
    0xfbf7fd01, 0x7010704, 0xf4040b08, 0x104f5f3, 0xf9f4f9f8, 0x1080f06, 0x503f3f8, 0x5061206,
    // -9, 6, -14, 1, -1, -8, -1, -20, 2, 10, -8, -13, -1, 6, -4, -14, 5, -9, 15, 6, -1, -8, 14, 13, 13, 0, -4, 0, 4, 6, -10, 7
    0x1f206f7, 0xecfff8ff, 0xf3f80a02, 0xf2fc06ff, 0x60ff705, 0xd0ef8ff, 0xfc000d, 0x7f60604,
    // -10, -3, 19, 8, 16, 8, -24, 30, 3, -16, 13, 34, 14, -5, -17, -1, -6, -8, 23, 4, 5, -21, 10, 10, -3, -6, -1, 11, 3, 5, -1, 2
    0x813fdf6, 0x1ee80810, 0x220df003, 0xffeffb0e, 0x417f8fa, 0xa0aeb05, 0xbfffafd, 0x2ff0503,
    // 0, -1, 37, 3, -6, 4, 31, 16, -6, 5, -8, 9, -9, 2, 2, -11, 38, 4, 112, -17, 5, 34, 67, 99, -50, -82, 16, 10, 27, 3, -17, 48
    0x325ff00, 0x101f04fa, 0x9f805fa, 0xf50202f7, 0xef700426, 0x63432205, 0xa10aece, 0x30ef031b,
    // 10, -9, 20, 13, -4, -10, 37, 24, 8, 6, -16, 11, 1, -31, -7, -5, 6, -12, 25, 4, 2, -1, 4, 23, 6, 6, 1, 4, -10, -5, -5, -17
    0xd14f70a, 0x1825f6fc, 0xbf00608, 0xfbf9e101, 0x419f406, 0x1704ff02, 0x4010606, 0xeffbfbf6,
    // 5, -17, 17, 9, 12, -4, -3, 13, 0, -34, 7, 10, 11, -13, 0, -25, 3, -17, 20, 10, -1, -4, 3, 9, 9, -7, -3, 5, 4, 5, -2, -1
    0x911ef05, 0xdfdfc0c, 0xa07de00, 0xe700f30b, 0xa14ef03, 0x903fcff, 0x5fdf909, 0xfffe0504,
    // 3, -14, 20, 7, 10, -1, 31, 20, 13, -13, 3, 23, 4, -7, -9, 10, 16, -2, 21, 20, 12, -1, -4, 28, 7, -32, 12, 16, 2, -12, -14, -15
    0x714f203, 0x141fff0a, 0x1703f30d, 0xaf7f904, 0x1415fe10, 0x1cfcff0c, 0x100ce007, 0xf1f2f402,
    // 9, -4, 36, 12, 4, 0, 30, 17, 4, -5, 1, 10, 3, -3, -8, -10, 8, -9, 19, 11, 9, -6, 34, 9, 11, -36, 14, 36, -4, 0, 3, -5
    0xc24fc09, 0x111e0004, 0xa01fb04, 0xf6f8fd03, 0xb13f708, 0x922fa09, 0x240edc0b, 0xfb0300fc,
    // -43, -47, -69, 124, 96, -105, -73, 62, 83, -78, 92, 5, 46, -22, -75, -88, 21, 2, 9, -4, 14, -28, 16, 23, 34, -27, 9, 43, 9, -48, -7, -35
    0x7cbbd1d5, 0x3eb79760, 0x55cb253, 0xa8b5ea2e, 0xfc090215, 0x1710e40e, 0x2b09e522, 0xddf9d009,
    // 1, 3, 19, 12, 5, -8, 15, 15, 13, -22, 1, 35, 7, -5, -20, -1, 9, 15, 9, 29, 2, -33, 5, -20, 29, -59, 5, 5, 36, -22, -17, -19
    0xc130301, 0xf0ff805, 0x2301ea0d, 0xffecfb07, 0x1d090f09, 0xec05df02, 0x505c51d, 0xedefea24,
    // 5, -4, 13, 9, 2, 9, 22, 17, 27, -9, 7, 12, 5, -11, -10, -1, -5, 10, 7, -4, -8, 2, -22, -6, 1, 5, -4, -6, 5, 8, 5, 2
    0x90dfc05, 0x11160902, 0xc07f71b, 0xfff6f505, 0xfc070afb, 0xfaea02f8, 0xfafc0501, 0x2050805,
    // 10, 4, -12, 1, -10, -2, -22, -25, 17, 6, -15, -54, 26, 7, 10, -15, -3, -2, -15, 0, -3, 10, -24, -7, 0, 13, -9, -23, 15, 13, 6, 7
    0x1f4040a, 0xe7eafef6, 0xcaf10611, 0xf10a071a, 0xf1fefd, 0xf9e80afd, 0xe9f70d00, 0x7060d0f,
    // 6, 15, -20, 13, -5, -22, -26, -9, 2, -10, 2, -25, -2, 0, 17, -15, 12, -16, -7, -63, -29, -25, -101, -36, -5, -77, 18, -12, 48, -16, 24, -51
    0xdec0f06, 0xf7e6eafb, 0xe702f602, 0xf11100fe, 0xc1f9f00c, 0xdc9be7e3, 0xf412b3fb, 0xcd18f030,
    // -1, 13, -22, 8, 0, -17, -10, -22, -1, -26, -4, -12, 4, -6, 28, 12, 4, 4, -18, -8, 0, 2, -17, -16, 4, -3, 1, -11, 8, 15, 15, 30
    0x8ea0dff, 0xeaf6ef00, 0xf4fce6ff, 0xc1cfa04, 0xf8ee0404, 0xf0ef0200, 0xf501fd04, 0x1e0f0f08,
    // 4, 1, 6, -6, -10, -9, -37, -32, 17, 4, -15, -8, 33, -18, -1, -19, -2, -1, -1, 1, -3, 4, -11, -9, 0, 14, -6, -13, 11, 14, 8, 2
    0xfa060104, 0xe0dbf7f6, 0xf8f10411, 0xedffee21, 0x1fffffe, 0xf7f504fd, 0xf3fa0e00, 0x2080e0b,
    // 5, -3, 5, -7, -13, 0, -9, -4, -5, 4, -8, 7, -5, 11, 2, 18, -9, -15, 18, 15, 9, -14, -64, 28, 4, -23, 27, 32, 1, -11, 19, -23
    0xf905fd05, 0xfcf700f3, 0x7f804fb, 0x12020bfb, 0xf12f1f7, 0x1cc0f209, 0x201be904, 0xe913f501,
    // 19, 5, -3, -10, -5, 17, -12, -3, 6, 7, -4, -23, 11, 11, -3, 1, -7, 3, -7, -30, -28, 12, 36, -9, -7, 19, -25, -8, 5, 50, -26, 70
    0xf6fd0513, 0xfdf411fb, 0xe9fc0706, 0x1fd0b0b, 0xe2f903f9, 0xf7240ce4, 0xf8e713f9, 0x46e63205,
    // 17, 39, -99, 4, 20, -8, -51, 0, -16, -49, -28, -27, -53, -65, -34, -68, 47, 4, 4, -59, -7, 2, 11, -37, -19, 26, -23, -13, -2, 19, -23, -2
    0x49d2711, 0xcdf814, 0xe5e4cff0, 0xbcdebfcb, 0xc504042f, 0xdb0b02f9, 0xf3e91aed, 0xfee913fe,
    // -4, -6, 20, 5, -22, -7, -11, -16, -11, -1, -9, 19, 8, 19, 8, 4, 15, 2, -8, 16, -1, -2, -63, 4, -10, -21, 29, 5, -5, -12, 29, -26
    0x514fafc, 0xf0f5f9ea, 0x13f7fff5, 0x4081308, 0x10f8020f, 0x4c1feff, 0x51debf6, 0xe61df4fb,
    // 15, 14, 5, -14, -4, 22, -1, 4, 3, 19, 10, 0, 8, 0, 2, 12, -1, 13, -5, -8, -4, -6, -25, -31, -13, 4, -2, -4, 4, 20, 0, -1
    0xf2050e0f, 0x4ff16fc, 0xa1303, 0xc020008, 0xf8fb0dff, 0xe1e7fafc, 0xfcfe04f3, 0xff001404,
    // -13, 22, -15, 13, -8, 25, -7, 5, -27, 0, 1, -25, -1, 30, 4, -5, 3, 1, -4, -3, 2, 1, -13, -10, -4, 14, -2, 20, -5, 10, -2, -2
    0xdf116f3, 0x5f919f8, 0xe70100e5, 0xfb041eff, 0xfdfc0103, 0xf6f30102, 0x14fe0efc, 0xfefe0afb,
    // -14, -7, -2, 0, 1, 3, -6, 0, -9, 26, 13, -8, -8, 16, 17, -2, -6, 99, -20, 45, -10, 8, -44, 52, -73, 81, 34, -31, -76, 18, -23, 54
    0xfef9f2, 0xfa0301, 0xf80d1af7, 0xfe1110f8, 0x2dec63fa, 0x34d408f6, 0xe12251b7, 0x36e912b4,
    // -6, 5, -12, -7, 3, 6, -3, -16, -11, 7, 16, 36, -15, -6, 25, 22, 7, 2, -26, -14, 9, 4, 15, 0, 5, -10, 9, -13, -6, 17, 6, 33
    0xf9f405fa, 0xf0fd0603, 0x241007f5, 0x1619faf1, 0xf2e60207, 0xf0409, 0xf309f605, 0x210611fa,
    // -21, 6, -1, 7, -7, 13, -18, -1, -2, 3, -16, 14, 3, -10, -6, -27, 4, 7, -26, 1, -2, 22, -11, -10, -3, 15, 1, -13, 0, 9, 12, -7
    0x7ff06eb, 0xffee0df9, 0xef003fe, 0xe5faf603, 0x1e60704, 0xf6f516fe, 0xf3010ffd, 0xf90c0900,
};
static const uint embedded_decoder2_ResidualBlock_2_body_conv_dw_bias_dwords[8] = {
    // -0.2004, 0.318, 0.0756, 0.1653, -0.2693, -0.04752, 0.116, -0.00939, 0.1376, 0.0786, 0.004864, -0.0673, 0.144, 0.074, -0.1729, -0.01921
    0x3517b26a, 0x314a2cd7, 0xaa15b44f, 0xa0cf2f6d, 0x2d083067, 0xac4f1cfb, 0x2cbc309c, 0xa4ebb188,
};
static const uint embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -60, 67, 109, -52, 3, -20, -58, 54, 9, -17, -9, -20, 61, 85, 23, -36, 2, 10, 55, 28, 17, -8, 43, 18, 84, 21, -17, -27, -10, 37, -3, 30
    0xcc6d43c4, 0x36c6ec03, 0xecf7ef09, 0xdc17553d, 0x1c370a02, 0x122bf811, 0xe5ef1554, 0x1efd25f6,
    // -47, 21, -34, 5, -4, -15, -19, 0, -2, 0, 16, -67, -17, 33, 5, 14, 5, -1, -48, 13, 88, -1, 3, 127, 10, -28, 115, 25, -5, 41, -54, -70
    0x5de15d1, 0xedf1fc, 0xbd1000fe, 0xe0521ef, 0xdd0ff05, 0x7f03ff58, 0x1973e40a, 0xbaca29fb,
    // -6, 51, -4, 42, -28, 34, 5, -7, -26, 37, 24, 12, 5, 48, -4, -19, 1, 38, -27, -60, -11, 3, 0, -35, 87, 48, 41, 6, 60, -38, -43, -52
    0x2afc33fa, 0xf90522e4, 0xc1825e6, 0xedfc3005, 0xc4e52601, 0xdd0003f5, 0x6293057, 0xccd5da3c,
    // -32, -27, -43, 36, -18, -22, 7, -32, 8, -33, -22, 79, 5, 72, -73, 52, 17, -7, -28, -63, -14, -30, 18, 4, 32, -10, 2, 11, -10, 6, 9, -2
    0x24d5e5e0, 0xe007eaee, 0x4feadf08, 0x34b74805, 0xc1e4f911, 0x412e2f2, 0xb02f620, 0xfe0906f6,
    // 3, 12, -60, -8, 42, -7, 35, 15, -33, 55, -41, -26, 35, 48, -16, -14, 15, -61, 35, 22, 2, -16, -58, -62, -18, -47, 81, -35, 46, 62, 50, -47
    0xf8c40c03, 0xf23f92a, 0xe6d737df, 0xf2f03023, 0x1623c30f, 0xc2c6f002, 0xdd51d1ee, 0xd1323e2e,
    // 33, 16, 17, 10, -9, -11, 3, -24, 79, 46, 0, 45, 55, -70, -31, -59, 12, 37, -5, -2, 38, -20, 48, -28, -59, 11, 27, 12, -5, -19, -21, 22
    0xa111021, 0xe803f5f7, 0x2d002e4f, 0xc5e1ba37, 0xfefb250c, 0xe430ec26, 0xc1b0bc5, 0x16ebedfb,
    // -32, -41, 24, 9, -28, -14, 6, 36, -30, -10, 36, -5, 15, -19, 22, 5, -26, -21, -8, 7, -7, 22, 53, 9, 52, -9, -5, -6, 18, -18, 24, 9
    0x918d7e0, 0x2406f2e4, 0xfb24f6e2, 0x516ed0f, 0x7f8ebe6, 0x93516f9, 0xfafbf734, 0x918ee12,
    // -79, 17, 44, -23, 46, -7, -29, -3, 9, -7, -43, 32, -26, 17, -40, -34, -66, -73, -18, 22, 127, 9, 18, -61, 12, 14, -19, 22, -42, 23, -23, -102
    0xe92c11b1, 0xfde3f92e, 0x20d5f909, 0xded811e6, 0x16eeb7be, 0xc312097f, 0x16ed0e0c, 0x9ae917d6,
    // 0, 68, 24, 28, 7, 78, -26, -47, 45, 72, 9, -3, 60, -38, -50, -78, 28, -61, 12, 27, 91, 102, 12, -103, -55, -35, 33, -35, 23, 3, -42, 43
    0x1c184400, 0xd1e64e07, 0xfd09482d, 0xb2ceda3c, 0x1b0cc31c, 0x990c665b, 0xdd21ddc9, 0x2bd60317,
    // -7, 75, -17, 19, -2, -12, 27, -8, 1, -47, -17, -15, -8, -33, 3, -23, -71, 54, -21, 25, 7, 52, -31, -15, -30, 18, 37, -102, -12, 59, -4, -8
    0x13ef4bf9, 0xf81bf4fe, 0xf1efd101, 0xe903dff8, 0x19eb36b9, 0xf1e13407, 0x9a2512e2, 0xf8fc3bf4,
    // 51, 52, 15, 9, 8, -7, -50, -18, 38, -22, -32, -29, -4, 91, -19, -41, -51, -6, 21, -2, -21, -8, -59, -6, 14, -4, 16, 37, 31, 32, 49, -14
    0x90f3433, 0xeecef908, 0xe3e0ea26, 0xd7ed5bfc, 0xfe15facd, 0xfac5f8eb, 0x2510fc0e, 0xf231201f,
    // 61, 4, 33, -20, 22, 30, -1, -15, 36, 22, -21, 75, 55, -70, -25, -28, 11, -2, -8, 22, -23, -9, -67, 34, 47, -30, -25, -18, -1, 43, -17, -36
    0xec21043d, 0xf1ff1e16, 0x4beb1624, 0xe4e7ba37, 0x16f8fe0b, 0x22bdf7e9, 0xeee7e22f, 0xdcef2bff,
    // -50, 40, -67, -58, -1, -9, -8, -12, 11, 3, 52, -83, -2, 45, -7, -8, 11, 49, 0, -2, -18, -27, -18, 35, 46, 2, 6, 30, -14, 19, 40, -7
    0xc6bd28ce, 0xf4f8f7ff, 0xad34030b, 0xf8f92dfe, 0xfe00310b, 0x23eee5ee, 0x1e06022e, 0xf92813f2,
    // 20, -4, -71, -52, 103, 8, 10, 4, 34, -18, 54, 24, 10, -5, 17, 47, -15, -34, -9, -10, 35, -2, 4, 41, -8, -21, 75, 18, 8, 5, -12, -19
    0xccb9fc14, 0x40a0867, 0x1836ee22, 0x2f11fb0a, 0xf6f7def1, 0x2904fe23, 0x124bebf8, 0xedf40508,
    // 11, -83, -81, 32, 71, -8, 33, 35, -106, 13, -25, -116, 127, 27, -47, -6, -34, 56, 22, -2, 101, 51, 1, 67, -58, 25, -69, -20, 3, -54, 5, 0
    0x20afad0b, 0x2321f847, 0x8ce70d96, 0xfad11b7f, 0xfe1638de, 0x43013365, 0xecbb19c6, 0x5ca03,
    // 1, 21, -94, -10, 66, -12, 6, -73, -24, 69, -43, 40, 48, 99, 97, -8, -8, 0, 8, -17, -14, 1, 56, -21, -10, 29, 12, -9, 0, 40, -22, -53
    0xf6a21501, 0xb706f442, 0x28d545e8, 0xf8616330, 0xef0800f8, 0xeb3801f2, 0xf70c1df6, 0xcbea2800,
};
static const uint embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias_dwords[16] = {
    // -0.2751, 0.2766, 0.0866, -0.2634, 0.2505, -0.1979, 0.4265, 0.1965, 0.4607, 0.00545, 0.4526, 0.1936, -0.2505, 0.3071, 0.149, -0.3538
    0x346db467, 0xb4372d8b, 0xb2553402, 0x324a36d3, 0x1d95375f, 0x3232373e, 0x34eab402, 0xb5a930c5,
    // -0.1414, 0.04102, 0.3755, 0.03806, -0.1454, 0.3198, -0.888, 0.164, -0.06696, -0.591, -0.010956, 0.416, -0.3003, 0.1648, -0.1642, 0.463
    0x2940b086, 0x28df3602, 0x351eb0a7, 0x313fbb1b, 0xb8baac49, 0x36a8a19c, 0x3146b4ce, 0x3768b141,
};
static const uint embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 108, 12, 31, -111, 22, 11, -24, 37, -59, 47, -10, -58, -2, -5, 7, -78, -2, 12, -13, 6, 88, 58, 4, 66, 33, -33, 28, -40, -128, 16, -75, -37
    0x911f0c6c, 0x25e80b16, 0xc6f62fc5, 0xb207fbfe, 0x6f30cfe, 0x42043a58, 0xd81cdf21, 0xdbb51080,
    // 28, -12, 61, -76, -22, 13, -11, -46, -11, 37, 3, 47, 39, 17, -13, -45, 25, 37, 25, 57, -21, 5, 12, -4, 30, 22, 62, -20, -34, 98, -5, -55
    0xb43df41c, 0xd2f50dea, 0x2f0325f5, 0xd3f31127, 0x39192519, 0xfc0c05eb, 0xec3e161e, 0xc9fb62de,
    // 27, -21, -59, -61, 31, 44, 2, 8, -4, 9, 54, -40, 27, 39, 26, 55, 78, 51, 31, -21, -89, 40, -61, -7, -82, 16, -60, -23, -67, -12, 52, 6
    0xc3c5eb1b, 0x8022c1f, 0xd83609fc, 0x371a271b, 0xeb1f334e, 0xf9c328a7, 0xe9c410ae, 0x634f4bd,
    // -40, -7, -30, -52, 1, 31, 3, -29, 2, 81, 36, -9, -24, 0, -79, -126, 41, 31, 6, -20, 47, -4, -41, 12, -44, 19, -8, 4, 100, 3, 7, -14
    0xcce2f9d8, 0xe3031f01, 0xf7245102, 0x82b100e8, 0xec061f29, 0xcd7fc2f, 0x4f813d4, 0xf2070364,
    // -42, 34, 2, 15, 9, 39, 30, 31, 5, 10, 15, -38, -40, 49, -32, -74, 25, -18, -66, -33, 8, -8, -30, 23, -24, -12, 13, 31, 79, 12, -13, -8
    0xf0222d6, 0x1f1e2709, 0xda0f0a05, 0xb6e031d8, 0xdfbeee19, 0x17e2f808, 0x1f0df4e8, 0xf8f30c4f,
    // 25, 84, 14, -15, -15, -18, -13, -45, 15, -26, -21, 5, 17, 18, 38, 105, -14, 9, -66, 17, -85, -12, 16, -43, 35, 17, -3, 8, -44, 9, 52, -2
    0xf10e5419, 0xd3f3eef1, 0x5ebe60f, 0x69261211, 0x11be09f2, 0xd510f4ab, 0x8fd1123, 0xfe3409d4,
    // 4, 8, -36, 127, -23, 75, 14, -2, -39, -77, 57, 31, -11, -24, 46, 52, 48, 41, -5, -55, 78, -36, -61, 7, -57, 16, 38, 74, -34, -36, -98, -7
    0x7fdc0804, 0xfe0e4be9, 0x1f39b3d9, 0x342ee8f5, 0xc9fb2930, 0x7c3dc4e, 0x4a2610c7, 0xf99edcde,
    // 16, 17, -67, -57, -23, 87, -37, -20, 22, 26, 78, -6, 31, -32, -14, -9, 26, -103, -36, -101, -25, 15, -75, 4, -78, -48, 8, -1, 12, 62, 15, 18
    0xc7bd1110, 0xecdb57e9, 0xfa4e1a16, 0xf7f2e01f, 0x9bdc991a, 0x4b50fe7, 0xff08d0b2, 0x120f3e0c,
    // -11, -21, -25, -48, 40, -12, -21, -22, -20, 32, 16, 53, 28, -53, 12, -14, 72, 59, -74, 18, -60, -13, -30, -50, -79, 24, -89, -64, -8, 60, 73, -13
    0xd0e7ebf5, 0xeaebf428, 0x351020ec, 0xf20ccb1c, 0x12b63b48, 0xcee2f3c4, 0xc0a718b1, 0xf3493cf8,
    // -4, 24, 0, 80, 50, -34, 21, -63, 3, -35, 0, -39, -26, -9, 0, -27, 41, 22, -4, 46, 68, 2, 3, 32, -37, 43, -101, 12, -13, 82, -65, 3
    0x500018fc, 0xc115de32, 0xd900dd03, 0xe500f7e6, 0x2efc1629, 0x20030244, 0xc9b2bdb, 0x3bf52f3,
    // -62, 42, 26, -69, 2, -1, -23, 30, 1, 70, 1, 37, 39, 13, -34, -42, 28, 3, -25, 11, -85, -11, -4, -43, -22, 10, -7, -13, 77, 42, 96, -6
    0xbb1a2ac2, 0x1ee9ff02, 0x25014601, 0xd6de0d27, 0xbe7031c, 0xd5fcf5ab, 0xf3f90aea, 0xfa602a4d,
    // 6, 13, -8, -18, -8, 4, -2, 3, 0, 8, -2, 1, 7, 17, -4, 8, -4, -2, -8, -8, -13, -3, -4, -2, 3, -6, 7, 2, 1, -13, 12, 6
    0xeef80d06, 0x3fe04f8, 0x1fe0800, 0x8fc1107, 0xf8f8fefc, 0xfefcfdf3, 0x207fa03, 0x60cf301,
    // 10, -25, 1, 42, 15, -39, -79, 25, -13, -33, -25, 20, 28, 18, 16, 14, 1, -69, 28, 29, -5, -20, 17, 16, -3, -3, -50, 53, -29, 100, -42, -2
    0x2a01e70a, 0x19b1d90f, 0x14e7dff3, 0xe10121c, 0x1d1cbb01, 0x1011ecfb, 0x35cefdfd, 0xfed664e3,
    // -6, 6, -7, 17, 1, -2, -4, -6, 4, -9, 1, 12, -3, 13, -1, 7, 1, 0, 17, 1, -2, -4, 1, -5, -4, 7, -5, -1, 6, 3, 2, 8
    0x11f906fa, 0xfafcfe01, 0xc01f704, 0x7ff0dfd, 0x1110001, 0xfb01fcfe, 0xfffb07fc, 0x8020306,
    // 27, -2, 24, -44, 24, -77, -17, -40, -23, 0, -48, 0, 15, -13, 13, 57, -39, 54, -42, 47, -28, 26, 55, -12, 28, 7, -79, 23, -48, -61, -3, 27
    0xd418fe1b, 0xd8efb318, 0xd000e9, 0x390df30f, 0x2fd636d9, 0xf4371ae4, 0x17b1071c, 0x1bfdc3d0,
    // 13, 31, -9, 20, 5, 6, -16, -2, 4, -9, 9, 10, -20, -3, 1, 10, 12, 18, 15, 3, 34, 4, -9, 4, -7, 9, 1, -14, -19, -1, -13, -1
    0x14f71f0d, 0xfef00605, 0xa09f704, 0xa01fdec, 0x30f120c, 0x4f70422, 0xf20109f9, 0xfff3ffed,
};
static const uint embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias_dwords[8] = {
    // -0.1421, -0.2235, 0.01205, -0.03918, -0.12024, 0.2006, -0.3928, 0.1979, -0.2974, 0.0904, 0.147, 0.02193, 0.3652, 0.0678, 0.3862, 0.1266
    0xb327b08c, 0xa904222b, 0x326bafb2, 0x3255b649, 0x2dc9b4c2, 0x259d30b4, 0x2c5735d8, 0x300d362e,
};
static const uint embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -1, -3, 36, 16, 8, -5, 33, 36, 6, -4, 1, 14, 3, 5, -9, 10, 2, 65, -31, 6, 17, 14, 49, 6, -20, -63, 8, -6, 17, -32, -2, -22
    0x1024fdff, 0x2421fb08, 0xe01fc06, 0xaf70503, 0x6e14102, 0x6310e11, 0xfa08c1ec, 0xeafee011,
    // -4, 82, -10, 13, 5, 28, -5, 11, 16, 57, 9, -24, 45, 8, -37, 20, -102, 4, 85, -86, -39, 83, -21, 12, 15, -74, 30, 31, 1, 48, 18, -8
    0xdf652fc, 0xbfb1c05, 0xe8093910, 0x14db082d, 0xaa55049a, 0xceb53d9, 0x1f1eb60f, 0xf8123001,
    // 1, -13, -19, 26, -25, 21, 5, 5, 13, 6, -1, 3, 5, -57, 0, 14, -2, 1, -12, -4, -18, -16, 3, 7, 7, 13, 0, 80, -6, 7, 2, 7
    0x1aedf301, 0x50515e7, 0x3ff060d, 0xe00c705, 0xfcf401fe, 0x703f0ee, 0x50000d07, 0x70207fa,
    // 7, 3, -9, -1, 13, 10, -1, 13, 1, 8, 0, 7, -12, 93, 16, 19, -2, -2, 12, 35, -15, 9, -9, -9, 3, -16, -32, -18, 17, 69, -6, -32
    0xfff70307, 0xdff0a0d, 0x7000801, 0x13105df4, 0x230cfefe, 0xf7f709f1, 0xeee0f003, 0xe0fa4511,
    // -1, -2, 37, 20, 7, -5, 37, 26, 5, -8, 4, 16, -1, 2, -7, 9, 3, 52, -38, -30, -7, 7, 13, 3, 3, -44, -4, -16, -39, -17, -61, 12
    0x1425feff, 0x1a25fb07, 0x1004f805, 0x9f902ff, 0xe2da3403, 0x30d07f9, 0xf0fcd403, 0xcc3efd9,
    // -1, 75, -13, -1, -2, 24, -14, 10, 24, 62, 11, -19, 27, 11, -54, 27, -103, -27, 7, -81, -8, 53, 96, -24, -18, 17, -9, -9, 40, 54, 4, 8
    0xfff34bff, 0xaf218fe, 0xed0b3e18, 0x1bca0b1b, 0xaf07e599, 0xe86035f8, 0xf7f711ee, 0x8043628,
    // -5, -6, -8, 17, -25, -2, 0, 10, -8, -13, 3, -32, 8, -20, 8, 53, -7, 7, -2, 10, 1, -1, -5, -3, 4, -2, -21, 78, 7, 1, -1, 12
    0x11f8fafb, 0xa00fee7, 0xe003f3f8, 0x3508ec08, 0xafe07f9, 0xfdfbff01, 0x4eebfe04, 0xcff0107,
    // 11, -4, -7, -4, 12, 3, 0, 3, 3, -6, 6, -8, -3, 85, 7, 23, -1, 3, -1, -3, -14, -16, 4, 4, 4, -2, -10, -14, -8, 59, 2, -62
    0xfcf9fc0b, 0x300030c, 0xf806fa03, 0x170755fd, 0xfdff03ff, 0x404f0f2, 0xf2f6fe04, 0xc2023bf8,
    // -3, -2, 29, 6, 1, -5, 23, 35, 10, 5, -7, 9, -16, 11, -25, 16, 1, 60, -23, 18, 11, 14, 63, -7, -22, -72, 11, -3, 11, -34, 14, -21
    0x61dfefd, 0x2317fb01, 0x9f9050a, 0x10e70bf0, 0x12e93c01, 0xf93f0e0b, 0xfd0bb8ea, 0xeb0ede0b,
    // -11, 68, 22, 46, -6, 12, 60, -51, 12, 9, 17, 2, -23, -17, 42, 33, -124, -20, -4, 22, 12, 14, -77, 0, 19, -39, 57, 6, -9, 54, -26, -12
    0x2e1644f5, 0xcd3c0cfa, 0x211090c, 0x212aefe9, 0x16fcec84, 0xb30e0c, 0x639d913, 0xf4e636f7,
    // -6, -1, -15, 2, -3, -4, 2, 12, 17, -10, -9, -43, -1, -24, 14, 11, -7, 5, 0, -13, -3, -35, -2, 0, 11, -4, -4, 46, 7, 36, 8, 11
    0x2f1fffa, 0xc02fcfd, 0xd5f7f611, 0xb0ee8ff, 0xf30005f9, 0xfeddfd, 0x2efcfc0b, 0xb082407,
    // 11, -9, -18, -5, 0, -3, 10, 0, 25, -11, 1, -22, -3, 57, 3, -21, 7, -7, -8, 15, -1, 9, 2, -9, 19, -10, -18, 37, 8, 44, -5, -33
    0xfbeef70b, 0xafd00, 0xea01f519, 0xeb0339fd, 0xff8f907, 0xf70209ff, 0x25eef613, 0xdffb2c08,
    // -3, -10, 32, 11, 1, -10, 27, 28, 11, 0, -6, 8, -20, 8, -23, 25, -1, 52, -33, -27, -17, 2, 19, -7, 4, -51, -7, -23, -53, -20, -55, 18
    0xb20f6fd, 0x1c1bf601, 0x8fa000b, 0x19e908ec, 0xe5df34ff, 0xf91302ef, 0xe9f9cd04, 0x12c9eccb,
    // -13, 66, 18, 26, -20, 4, 43, -51, 24, 20, 12, -4, -55, -13, 15, 49, -128, -38, -80, 39, 43, -8, 53, -28, -25, 43, 19, -22, 39, 59, -13, -6
    0x1a1242f3, 0xcd2b04ec, 0xfc0c1418, 0x310ff3c9, 0x27b0da80, 0xe435f82b, 0xea132be7, 0xfaf33b27,
    // -3, -9, -11, 1, -5, -17, 0, 0, 20, -28, -2, -27, 17, -26, 7, 41, 5, -4, -2, 10, 10, 9, -5, -6, 4, -7, -13, 66, 7, 24, -3, 11
    0x1f5f7fd, 0xeffb, 0xe5fee414, 0x2907e611, 0xafefc05, 0xfafb090a, 0x42f3f904, 0xbfd1807,
    // 10, -7, -12, 5, -17, -8, 6, 3, 5, -21, 9, -6, 6, 79, 3, 13, 2, -1, -8, 9, -25, -11, 5, 3, 9, 0, -3, 36, 3, 44, 2, -30
    0x5f4f90a, 0x306f8ef, 0xfa09eb05, 0xd034f06, 0x9f8ff02, 0x305f5e7, 0x24fd0009, 0xe2022c03,
};
static const uint embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias_dwords[4] = {
    // -0.0925, -0.303, -0.386, 0.174, 0.09186, -0.0664, -0.05804, 0.06107
    0xb4d9adec, 0x3191b62d, 0xac402de1, 0x2bd1ab6e,
};

[numthreads(8, 8, 1)]
void fsr4_model_v07_i8_pass13(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(8, 8, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(3840, 2160, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(3840, 2160, 16), // threadGroupSliceSize
        uint3(3840, 2160, 16), // storageSize
        uint3(16, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.03317117691040039, storage_fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.007181051652878523, storage_embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_2_body_conv_dw_bias = { embedded_decoder2_ResidualBlock_2_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_2_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_2_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.00697380630299449, storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias = { embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.007037898059934378, storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias = { embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias };
    
    const ConstantBufferStorage<128> storage_embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_HWCN< ConstantBufferStorage<128> > embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 8, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 8, 16), // threadGroupSliceSize
        uint4(2, 2, 8, 16), // storageSize
        uint4(128, 256, 16, 1), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.00706574646756053, storage_embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<4> storage_embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias = { embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<4> > embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias = {
        8, // logicalSize
        0, // threadGroupSliceStart
        8, // threadGroupSliceSize
        8, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias };
    
    // fused_quantized_NHWC_output
    const uint3 logicalSize_fused_quantized_NHWC_output = uint3(7680, 4320, 8);
    const int3 groupStart_fused_quantized_NHWC_output = int3(0, 0, 0) + ml2c_groupId.xyz * int3(16, 16, 8);
    const uint3 groupSize_fused_quantized_NHWC_output = uint3(16, 16, 8);
    const uint3 storageSize_fused_quantized_NHWC_output = uint3(7680, 4320, 8);
    const uint3 tensorByteStrides_fused_quantized_NHWC_output = uint3(16, 122880, 2);
    const uint3 paddingBegin_fused_quantized_NHWC_output = uint3(0, 0, 0);
    const uint3 paddingEnd_fused_quantized_NHWC_output = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_fused_quantized_NHWC_output = dot(groupStart_fused_quantized_NHWC_output, tensorByteStrides_fused_quantized_NHWC_output);
    const RWBufferStorage storage_fused_quantized_NHWC_output = { buffer_fused_quantized_NHWC_output };
    const Tensor3h_NHWC<RWBufferStorage> fused_quantized_NHWC_output = { logicalSize_fused_quantized_NHWC_output, groupStart_fused_quantized_NHWC_output, groupSize_fused_quantized_NHWC_output, storageSize_fused_quantized_NHWC_output, tensorByteStrides_fused_quantized_NHWC_output, paddingBegin_fused_quantized_NHWC_output, paddingEnd_fused_quantized_NHWC_output, threadGroupByteOffsetInTensor_fused_quantized_NHWC_output + 0, storage_fused_quantized_NHWC_output };
    // FusedConvNextBlock_quantized_/decoder2/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose (16, 2160, 3840), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,), (16, 8, 2, 2), (8,) -> (8, 4320, 7680)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    CNB_CT2D<8>(15.550845242486991, 0.06430518627166748, 18.70009929109931, 0.053475651890039444, 0.12926477193832397, fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_2_body_conv_dw_bias, embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias, embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias, embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias, fused_quantized_NHWC_output, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_13


