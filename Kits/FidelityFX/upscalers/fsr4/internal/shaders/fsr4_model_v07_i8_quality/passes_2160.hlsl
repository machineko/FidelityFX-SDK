// Copyright(C) 2024-2025 Advanced Micro Devices, Inc. All rights reserved.
// Autogenerated 2025-02-26 12:38:43 using ML2Code from "models\2024\October\Release7\Quality\fsr4_model_v07_i8.onnx". Do not edit.
// Compile with dxc.exe -no-warnings -O3 -enable-16bit-types -HV 2021 -T cs_6_6 -I . -I hlsl -E fsr4_model_v07_i8_pass0 "generated\hlsl\fsr4_model_v07_i8.hlsl"

// Scratch memory size needed: 82944000 (79.1MB)

// This file was generated for navi48 SKU
#define WMMA_ENABLED  0
#define FP8_ENABLED  1
#define DOT4_ENABLED  1


ByteAddressBuffer buffer_NHWC_inputs : register(t0);
RWByteAddressBuffer buffer_fused_quantized_NHWC_output : register(u0);
ByteAddressBuffer InitializerBuffer : register(t1);
RWByteAddressBuffer ScratchBuffer : register(u1);

#ifdef MLSR_PASS_0
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Conv2D_k2s2b.hlsli"

static const uint embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight_dwords[256] = {
    // -0.011314, 0.04135, 0.652, 0.06836, -0.1022, -0.12164, -0.2129, 0.0, -0.01913, 0.10583, 0.794, 0.002829, 0.04358, -0.2, -0.0768, 0.0
    0x294ba1cb, 0x2c603937, 0xafc9ae8a, 0xb2d0, 0x2ec6a4e6, 0x19cb3a5a, 0xb2662994, 0xacea,
    // -0.1427, 0.0942, 0.9043, 0.00679, 0.06793, -0.2856, -0.1302, 0.0, -0.1087, 0.1597, 0.8145, 0.0495, -0.00827, -0.1794, -0.007755, 0.0
    0x2e07b091, 0x1ef43b3c, 0xb4922c59, 0xb02b, 0x311caef5, 0x2a563a84, 0xb1bea03c, 0x9ff1,
    // -0.0634, -0.01279, -0.1611, -0.12415, 0.1431, -0.2544, 0.3198, 0.0, 0.05038, -0.09705, -0.5303, -0.1053, -0.09985, -0.1066, 0.2483, 0.0
    0xa28cac0f, 0xaff2b128, 0xb4123094, 0x351e, 0xae362a73, 0xaebdb83e, 0xaed3ae64, 0x33f2,
    // 0.1758, -0.04337, -0.3828, -0.3157, 0.0689, -0.2446, 0.3025, 0.0, 0.3313, -0.2191, -0.4814, -0.1624, -0.1907, -0.05334, 0.2532, 0.0
    0xa98d31a0, 0xb50db620, 0xb3d42c69, 0x34d7, 0xb303354d, 0xb132b7b4, 0xaad4b21a, 0x340d,
    // -0.1309, 0.2214, -0.4614, 0.1089, -0.1709, 0.1478, -0.1334, 0.0, -0.1925, 0.2056, -0.2183, 0.1644, -0.1311, 0.1844, 0.0173, 0.0
    0x3316b030, 0x2ef8b762, 0x30bbb178, 0xb045, 0x3294b229, 0x3143b2fc, 0x31e7b032, 0x246e,
    // -0.1803, 0.05835, -0.4568, 0.003595, 0.185, -0.165, -0.05032, 0.0, -0.26, 0.0732, -0.2137, -0.0862, 0.1235, 0.1318, -0.01863, 0.0
    0x2b78b1c5, 0x1b5db74f, 0xb14831ec, 0xaa71, 0x2cafb429, 0xad84b2d7, 0x30382fe7, 0xa4c5,
    // -0.04245, 0.2578, -0.0457, 0.1956, -0.0995, -0.02332, -0.06995, 0.0, -0.3762, -0.0003214, -0.1171, 0.0505, 0.03918, -0.096, -0.1533, 0.0
    0x3420a96f, 0x3242a9d9, 0xa5f8ae5e, 0xac7a, 0x8d44b605, 0x2a77af7f, 0xae252904, 0xb0e8,
    // 0.172, 0.1343, -0.1009, -0.05914, 0.02327, 0.0003922, 0.06274, 0.0, -0.0876, -0.05383, -0.05145, -0.1301, 0.08154, -0.04956, 0.014595, 0.0
    0x304c3181, 0xab92ae75, 0xe6d25f5, 0x2c04, 0xaae4ad9b, 0xb02aaa96, 0xaa582d38, 0x2379,
    // 0.2094, 0.2944, 0.04684, -0.03265, -0.00526, 0.07434, 0.0718, 0.0, 0.11426, -0.03098, 0.1216, 0.00827, 0.02696, -0.01214, -0.037, 0.0
    0x34b632b3, 0xa82e29ff, 0x2cc29d63, 0x2c98, 0xa7ee2f50, 0x203c2fc8, 0xa23726e7, 0xa8bc,
    // -0.541, 0.03586, 0.2676, 0.01357, -0.06042, 0.05853, 0.03111, 0.0, 0.04108, -0.1443, -2.15e-05, -0.03226, -0.000743, 0.01185, -0.0463, 0.0
    0x2897b854, 0x22f33448, 0x2b7eabbc, 0x27f7, 0xb09e2942, 0xa8218169, 0x22119216, 0xa9ed,
    // 0.1885, 0.221, 0.1509, -0.0192, -0.0191, 0.1809, -0.05182, 0.0, 0.08295, 0.2157, 0.2279, -0.04962, 0.0929, 0.204, -0.0749, 0.0
    0x33123208, 0xa4ea30d4, 0x31caa4e4, 0xaaa2, 0x32e72d4f, 0xaa5a334b, 0x32872df2, 0xaccb,
    // 0.1118, 0.1946, 0.2463, -0.2502, 0.262, 0.1099, 0.03427, 0.0, -0.0599, 0.1871, 0.265, -0.3213, 0.2096, 0.252, -0.09406, 0.0
    0x323a2f28, 0xb40133e2, 0x2f093431, 0x2863, 0x31fdabab, 0xb524343d, 0x340832b5, 0xae05,
    // -0.05484, 0.1433, -0.1536, -0.0755, 0.1658, -0.2474, 0.1459, 0.0, -0.2683, 0.2189, -0.1729, -0.2365, -0.006264, 0.1377, -0.06885, 0.0
    0x3096ab05, 0xacd5b0ea, 0xb3eb314e, 0x30ab, 0x3301b44b, 0xb391b188, 0x30689e6a, 0xac68,
    // -0.10333, 0.0728, -0.3425, 0.11664, -0.1293, 0.0645, -0.0582, 0.0, -0.1714, 0.2216, -0.2998, -0.09174, 0.05676, -0.012245, 0.126, 0.0
    0x2ca9ae9d, 0x2f77b57b, 0x2c21b023, 0xab73, 0x3317b17c, 0xaddfb4cc, 0xa2452b44, 0x3008,
    // -0.3003, 0.432, -0.1715, -0.01637, 0.06396, 0.0922, -0.011505, 0.0, -0.01146, 0.1364, -0.2, 0.0919, -0.07947, 0.04224, -0.02853, 0.0
    0x36e9b4ce, 0xa431b17d, 0x2de72c18, 0xa1e4, 0x305da1de, 0x2de2b266, 0x2968ad16, 0xa74e,
    // 0.0938, 0.0848, -0.279, 0.0781, -0.08514, 0.02122, -0.0904, 0.0, -0.02112, -0.19, -0.1198, 0.254, 0.05588, -0.4104, 0.00423, 0.0
    0x2d6d2e01, 0x2d00b477, 0x256fad73, 0xadc9, 0xb214a568, 0x3410afab, 0xb6912b27, 0x1c55,
    // -0.4883, 0.0852, -0.2338, 0.1055, -0.08624, -0.02003, -0.02846, 0.0, 0.2798, 0.08997, -0.3186, -0.0678, 0.02773, 0.0164, -0.0715, 0.0
    0x2d74b7d0, 0x2ec1b37b, 0xa521ad85, 0xa749, 0x2dc2347a, 0xac57b519, 0x24332719, 0xac93,
    // -0.315, 0.1134, -0.383, -0.011894, 0.02481, 0.03317, 0.02063, 0.0, 0.1389, 0.0999, -0.2037, -0.1271, 0.08014, 0.0423, 0.04153, 0.0
    0x2f42b50a, 0xa217b621, 0x283f265a, 0x2548, 0x2e653072, 0xb011b285, 0x296a2d21, 0x2951,
    // 0.1481, -0.12225, 0.4138, 0.10156, 0.08246, -0.1188, 0.006115, 0.0, 0.1584, -0.1195, 0.6084, 0.04678, -0.008316, 0.03018, -0.00661, 0.0
    0xafd330bd, 0x2e80369f, 0xaf9a2d47, 0x1e43, 0xafa63112, 0x29fd38de, 0x27baa042, 0x9ec5,
    // 0.0907, -0.1383, 0.5977, 0.012024, 0.04514, -0.02925, 0.014366, 0.0, 0.1144, -0.1642, 0.58, -0.09204, 0.1866, -0.0979, 0.1381, 0.0
    0xb06d2dce, 0x222838c8, 0xa77d29c7, 0x235b, 0xb1412f52, 0xade438a4, 0xae4431f9, 0x306b,
    // -0.2034, 0.08276, 0.2803, 0.10406, 0.3687, -0.2476, -0.1241, 0.0, -0.1887, 0.1464, 0.131, 0.3027, -0.007706, -0.043, -0.1613, 0.0
    0x2d4cb282, 0x2ea9347c, 0xb3ec35e6, 0xaff1, 0x30afb20a, 0x34d83031, 0xa9819fe4, 0xb129,
    // -0.1982, 0.1985, 0.4573, -0.015526, 0.0738, 0.02505, -0.1295, 0.0, -0.07544, 0.2888, 0.2742, 0.08594, -0.076, 0.03552, -0.1716, 0.0
    0x325ab258, 0xa3f33751, 0x266a2cb9, 0xb025, 0x349facd4, 0x2d803463, 0x288cacdd, 0xb17e,
    // -0.10913, 0.09454, 0.1615, -0.1647, 0.2766, -0.02646, 0.06683, 0.0, -0.1464, 0.1102, 0.04565, -0.1444, 0.3127, -0.213, 0.1118, 0.0
    0x2e0daefc, 0xb145312b, 0xa6c6346d, 0x2c47, 0x2f0eb0af, 0xb09f29d8, 0xb2d13501, 0x2f28,
    // -0.1868, 0.1081, 0.1351, -0.1938, 0.2573, -0.088, 0.089, 0.0, -0.227, 0.116, -0.03278, -0.0817, 0.1796, -0.1643, 0.0809, 0.0
    0x2eebb1fa, 0xb2343053, 0xada2341e, 0x2db2, 0x2f6db344, 0xad3ba832, 0xb14231bf, 0x2d2d,
    // 0.02751, -0.11487, -0.04114, -0.1476, 0.2935, 0.01749, -0.386, 0.0, 0.09937, -0.1353, -0.178, -0.1914, 0.2798, 0.2218, -0.5977, 0.0
    0xaf5a270b, 0xb0b9a944, 0x247a34b2, 0xb62d, 0xb0542e5c, 0xb220b1b2, 0x3319347a, 0xb8c8,
    // 0.1208, -0.1555, -0.01596, -0.1495, 0.2676, 0.1909, -0.427, 0.0, 0.1279, -0.1956, -0.1422, -0.2844, 0.2426, 0.1681, -0.506, 0.0
    0xb0fa2fbb, 0xb0c9a416, 0x321c3448, 0xb6d5, 0xb2423018, 0xb48db08d, 0x316133c3, 0xb80c,
    // 0.2698, -0.1799, -0.6562, 0.06573, -0.01437, -0.02061, -0.03085, 0.0, 0.2715, -0.0997, -0.904, 0.086, -0.11444, 0.01551, -0.11926, 0.0
    0xb1c23451, 0x2c35b940, 0xa547a35c, 0xa7e6, 0xae613458, 0x2d81bb3b, 0x23f1af53, 0xafa2,
    // -0.10364, 0.00968, -0.8228, -0.01238, -0.02776, -0.01723, -0.02718, 0.0, -0.2307, 0.07355, -0.7144, 0.0717, 0.06354, -0.262, 0.05045, 0.0
    0x20f5aea2, 0xa257ba95, 0xa469a71b, 0xa6f5, 0x2cb5b362, 0x2c97b9b7, 0xb4312c11, 0x2a75,
    // -0.0868, -0.1372, 0.0278, -0.02687, -0.12274, 0.1777, -0.087, 0.0, -0.226, -0.02454, 0.05493, 0.075, -0.0591, 0.07214, -0.0694, 0.0
    0xb064ad8e, 0xa6e1271e, 0x31b0afdb, 0xad91, 0xa648b33b, 0x2ccd2b08, 0x2c9eab91, 0xac71,
    // -0.0328, -0.01683, 0.0525, 0.0519, 0.02913, -0.02748, -0.0803, 0.0, 0.4053, 0.1235, -0.1732, 0.0375, 0.2328, -0.2069, 0.02446, 0.0
    0xa44fa833, 0x2aa52ab8, 0xa7092775, 0xad24, 0x2fe7367c, 0x28cdb18b, 0xb29f3373, 0x2643,
    // 0.1552, -0.01433, -0.8867, 0.10297, 0.1515, -0.1405, -0.11884, 0.0, 0.0697, -0.03528, -0.784, 0.107, 0.1924, -0.264, 0.03082, 0.0
    0xa35630f7, 0x2e97bb18, 0xb07f30d9, 0xaf9b, 0xa8842c76, 0x2ed9ba46, 0xb4393228, 0x27e4,
    // 0.10657, -0.1187, -0.9536, 0.1862, 0.1432, -0.2494, -0.09753, 0.0, 0.2028, -0.1315, -0.892, 0.1736, -0.02547, -0.04352, -0.04282, 0.0
    0xaf992ed2, 0x31f5bba1, 0xb3fb3095, 0xae3e, 0xb035327d, 0x318ebb23, 0xa992a685, 0xa97b,
};
static const uint embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias_dwords[8] = {
    // -0.01114, 0.036, -0.0653, 0.00813, -0.003756, 0.3477, 0.03177, 0.0919, -0.01342, -0.02814, 0.03708, -0.0441, -0.0316, 0.02548, 0.004284, 0.10846
    0x289ca1b4, 0x202aac2e, 0x35909bb1, 0x2de22811, 0xa734a2df, 0xa9a528bf, 0x2686a80b, 0x2ef11c63,
};

[numthreads(8, 8, 1)]
void fsr4_model_v07_i8_pass0(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(8, 8, 1);
    
    const BufferStorage storage_NHWC_inputs = { buffer_NHWC_inputs };
    const Tensor3h_NHWC< BufferStorage > NHWC_inputs = {
        uint3(3840, 2160, 7), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(3840, 2160, 7), // threadGroupSliceSize
        uint3(3840, 2160, 8), // storageSize
        uint3(16, 61440, 2), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_NHWC_inputs };
    const ConstantBufferStorage<256> storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight = { embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight_dwords };
    const Tensor4h_NHWC< ConstantBufferStorage<256> > embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight = {
        uint4(2, 2, 7, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 7, 16), // threadGroupSliceSize
        uint4(2, 2, 8, 16), // storageSize
        uint4(16, 32, 2, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight };
    
    const ConstantBufferStorage<8> storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias = { embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias };
    
    // quantized_NHWC_/encoder2/ResidualBlock_0/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_0 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_0 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(8, 8, 16);
    const uint3 groupSize_slice_0 = uint3(8, 8, 16);
    const uint3 storageSize_slice_0 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_0 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_0 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_0 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_0 = dot(groupStart_slice_0, tensorByteStrides_slice_0);
    const float quantizationScale_slice_0 = 0.014884727075695992;
    const RWBufferStorage storage_slice_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_0 = { logicalSize_slice_0, groupStart_slice_0, groupSize_slice_0, storageSize_slice_0, tensorByteStrides_slice_0, paddingBegin_slice_0, paddingEnd_slice_0, threadGroupByteOffsetInTensor_slice_0 + 0, quantizationScale_slice_0, storage_slice_0 };
    // /encoder1/DownscaleStridedConv2x2/downscale_conv/Conv (7, 2160, 3840), (16, 7, 2, 2), (16,) -> (16, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    Conv2D_k2s2b(NHWC_inputs, embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight, embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias, slice_0, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_0
#ifdef MLSR_PASS_0_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass0_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // quantized_NHWC_/encoder2/ResidualBlock_0/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_1 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_1 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_1 = uint3(32, 1, 16);
    const uint3 storageSize_slice_1 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_1 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_1 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_1 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_1 = dot(groupStart_slice_1, tensorByteStrides_slice_1);
    const float quantizationScale_slice_1 = 0.014884727075695992;
    const RWBufferStorage storage_slice_1 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_1 = { logicalSize_slice_1, groupStart_slice_1, groupSize_slice_1, storageSize_slice_1, tensorByteStrides_slice_1, paddingBegin_slice_1, paddingEnd_slice_1, threadGroupByteOffsetInTensor_slice_1 + 0, quantizationScale_slice_1, storage_slice_1 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_1, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_0_POST


#ifdef MLSR_PASS_1
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/ConvNextBlock.hlsli"

static const uint embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // -9, -8, 5, 18, 12, 1, 0, -8, 18, 43, -19, 13, -1, -11, 38, 19, -14, 39, 34, 8, -34, 27, 6, 23, -25, 49, 10, -2, 0, -27, 53, -3
    0x1205f8f7, 0xf800010c, 0xded2b12, 0x1326f5ff, 0x82227f2, 0x17061bde, 0xfe0a31e7, 0xfd35e500,
    // -17, -1, -6, 3, -17, 13, -38, 22, -15, -8, 11, 2, -3, 6, 0, 1, -24, -25, -30, -16, 28, -8, 30, -14, 30, 17, -37, 17, -5, -59, -3, 18
    0x3faffef, 0x16da0def, 0x20bf8f1, 0x10006fd, 0xf0e2e7e8, 0xf21ef81c, 0x11db111e, 0x12fdc5fb,
    // 39, 5, -61, 40, 27, -39, 5, 34, -43, -13, 17, 10, 13, 8, -39, 17, 22, -8, -24, 4, -37, 3, 76, 11, -31, 19, -18, -32, 6, -48, -26, 10
    0x28c30527, 0x2205d91b, 0xa11f3d5, 0x11d9080d, 0x4e8f816, 0xb4c03db, 0xe0ee13e1, 0xae6d006,
    // 2, -13, -9, 17, 11, -15, 3, 1, 2, -8, -12, 13, 3, -7, 21, -1, 16, 0, 17, -7, 25, 10, -16, 17, -7, 8, 30, 0, 3, 2, -8, -7
    0x11f7f302, 0x103f10b, 0xdf4f802, 0xff15f903, 0xf9110010, 0x11f00a19, 0x1e08f9, 0xf9f80203,
    // 20, -1, 16, 18, -10, -7, -30, -1, 1, 7, 19, -2, 3, 14, -5, 10, 0, 1, 2, 0, 4, -6, 4, 2, -9, -3, 0, 2, 5, 0, -6, -6
    0x1210ff14, 0xffe2f9f6, 0xfe130701, 0xafb0e03, 0x20100, 0x204fa04, 0x200fdf7, 0xfafa0005,
    // -7, -14, -4, 11, 3, -1, -1, -6, -9, 3, 7, -14, 6, -9, -9, 11, 2, -6, -6, 5, -9, 9, 1, 4, 3, 3, -4, -6, 2, 4, 15, 18
    0xbfcf2f9, 0xfaffff03, 0xf20703f7, 0xbf7f706, 0x5fafa02, 0x40109f7, 0xfafc0303, 0x120f0402,
    // -8, 2, 10, 1, -5, -8, -4, 4, 11, 7, 15, 4, 4, -21, -16, 8, -63, 2, -29, 35, -49, -10, -47, 1, -100, 84, -48, -34, 28, -35, 52, 39
    0x10a02f8, 0x4fcf8fb, 0x40f070b, 0x8f0eb04, 0x23e302c1, 0x1d1f6cf, 0xded0549c, 0x2734dd1c,
    // 6, 3, -7, 12, -39, 6, -13, 2, -11, 21, 15, -7, 1, -2, -4, 17, 4, -2, 12, -2, -1, -2, 7, 1, -10, -3, 2, 7, 1, 5, 5, 0
    0xcf90306, 0x2f306d9, 0xf90f15f5, 0x11fcfe01, 0xfe0cfe04, 0x107feff, 0x702fdf6, 0x50501,
    // -5, -15, -19, 3, -18, -2, -6, -9, 8, 22, 5, 2, 4, 11, -17, 16, -1, -8, 4, -5, 4, 3, 11, 1, -17, 5, -2, 2, 1, -5, 12, 9
    0x3edf1fb, 0xf7fafeee, 0x2051608, 0x10ef0b04, 0xfb04f8ff, 0x10b0304, 0x2fe05ef, 0x90cfb01,
    // 8, 1, -24, -9, -22, 10, 3, 19, 15, 4, -3, 2, -5, -16, -1, 6, -14, 17, -13, -8, 10, 18, 10, -15, -6, 16, -4, -2, -5, -14, 5, 22
    0xf7e80108, 0x13030aea, 0x2fd040f, 0x6fff0fb, 0xf8f311f2, 0xf10a120a, 0xfefc10fa, 0x1605f2fb,
    // 3, -3, -7, 5, 0, 8, 8, 3, 5, 0, -15, -2, -3, -15, 8, 2, 13, 29, 7, -12, 24, 7, -11, 5, -7, -1, 0, -10, -1, -4, 6, 24
    0x5f9fd03, 0x3080800, 0xfef10005, 0x208f1fd, 0xf4071d0d, 0x5f50718, 0xf600fff9, 0x1806fcff,
    // -72, 16, -9, 68, -45, -13, 9, 83, 31, -74, -21, -3, 21, -100, -40, -37, 8, -19, 20, -22, 27, -15, 37, -17, -1, 12, -20, 0, 10, -17, 26, 14
    0x44f710b8, 0x5309f3d3, 0xfdebb61f, 0xdbd89c15, 0xea14ed08, 0xef25f11b, 0xec0cff, 0xe1aef0a,
    // -10, 13, 12, 2, 17, 6, -7, 9, -14, 5, 8, -4, 1, -5, 19, -10, -14, 0, 21, 19, 28, -15, -32, -11, 0, 21, 27, 2, 1, 26, 31, 4
    0x20c0df6, 0x9f90611, 0xfc0805f2, 0xf613fb01, 0x131500f2, 0xf5e0f11c, 0x21b1500, 0x41f1a01,
    // 15, -19, 18, 29, -35, -17, -25, 7, 41, 33, 8, 10, 0, 1, -32, 20, 6, -7, -4, -4, -1, 9, -13, -3, 8, 10, 6, 17, -6, -10, 11, 17
    0x1d12ed0f, 0x7e7efdd, 0xa082129, 0x14e00100, 0xfcfcf906, 0xfdf309ff, 0x11060a08, 0x110bf6fa,
    // -23, -2, -43, -22, -2, 14, 11, 9, -15, -15, 17, -35, -3, -56, -8, 34, -6, 1, -16, -2, 15, 6, 18, -2, -1, 10, 2, -4, -6, -11, -11, 4
    0xead5fee9, 0x90b0efe, 0xdd11f1f1, 0x22f8c8fd, 0xfef001fa, 0xfe12060f, 0xfc020aff, 0x4f5f5fa,
    // -15, 15, 13, -21, 20, 3, 1, 5, -8, 31, 33, -12, -1, 2, -19, -3, 56, -115, 52, -53, 33, -57, -59, -55, 36, 23, -23, 23, 27, 127, -5, -51
    0xeb0d0ff1, 0x5010314, 0xf4211ff8, 0xfded02ff, 0xcb348d38, 0xc9c5c721, 0x17e91724, 0xcdfb7f1b,
    // 24, 14, 5, 7, 25, 14, -20, -13, -16, 25, 22, -10, -6, 17, 17, 48, 4, 5, 1, 3, 8, 6, -2, 7, -3, -2, -4, -5, 0, -10, -7, 6
    0x7050e18, 0xf3ec0e19, 0xf61619f0, 0x301111fa, 0x3010504, 0x7fe0608, 0xfbfcfefd, 0x6f9f600,
    // -2, -14, -20, 60, -1, -21, -9, -27, 9, 7, 12, 3, 3, 4, -22, 26, -16, 1, -1, 18, -6, 20, 10, 18, 18, 32, 7, -10, -1, -12, -10, 11
    0x3cecf2fe, 0xe5f7ebff, 0x30c0709, 0x1aea0403, 0x12ff01f0, 0x120a14fa, 0xf6072012, 0xbf6f4ff,
    // 21, 8, -1, -1, 2, 2, 2, 1, -4, 1, 5, -12, 5, -9, -3, 3, 20, -8, -7, -7, -15, 2, -6, -11, -17, -11, 14, -7, 4, 10, 27, -6
    0xffff0815, 0x1020202, 0xf40501fc, 0x3fdf705, 0xf9f9f814, 0xf5fa02f1, 0xf90ef5ef, 0xfa1b0a04,
    // 14, 16, -3, 2, -10, 4, -2, -3, 0, 11, -10, -6, 4, -18, -2, 2, 12, -13, 4, -6, -2, -5, -11, 7, -8, 5, 6, 14, -3, 0, 3, 2
    0x2fd100e, 0xfdfe04f6, 0xfaf60b00, 0x2feee04, 0xfa04f30c, 0x7f5fbfe, 0xe0605f8, 0x20300fd,
    // 27, -24, 59, 63, -36, 3, 93, -5, -66, -80, 71, 37, -45, -73, 33, -30, -5, -6, -7, 6, -34, -2, -13, 6, 20, 3, 5, 4, -5, -11, -18, -5
    0x3f3be81b, 0xfb5d03dc, 0x2547b0be, 0xe221b7d3, 0x6f9fafb, 0x6f3fede, 0x4050314, 0xfbeef5fb,
    // 17, 1, 0, 14, 3, 0, 3, -3, -2, 8, -7, -3, 1, -13, -5, -2, 4, -7, 10, -11, -28, 4, -18, 7, -5, -1, -3, 6, -3, 4, -11, -4
    0xe000111, 0xfd030003, 0xfdf908fe, 0xfefbf301, 0xf50af904, 0x7ee04e4, 0x6fdfffb, 0xfcf504fd,
    // 9, 8, -7, 10, 5, 1, 7, -10, 7, 12, 8, 0, -3, -7, 8, 10, -7, 12, -8, 11, 5, 9, -10, 9, 4, 2, 6, -5, 3, 7, 16, 5
    0xaf90809, 0xf6070105, 0x80c07, 0xa08f9fd, 0xbf80cf9, 0x9f60905, 0xfb060204, 0x5100703,
    // -4, 9, -20, 9, 11, 13, 8, 14, -11, -31, 7, -27, 2, -21, -3, 18, -10, 16, -18, -6, 2, 13, 14, 6, -6, -14, 8, -6, -10, 1, -15, 4
    0x9ec09fc, 0xe080d0b, 0xe507e1f5, 0x12fdeb02, 0xfaee10f6, 0x60e0d02, 0xfa08f2fa, 0x4f101f6,
    // -11, 14, 5, 4, 21, -1, 3, 8, -8, -2, 12, -15, 10, -7, -27, -3, -34, 9, 23, 49, -56, -81, -31, 25, 17, 12, -11, -7, 24, -81, 102, 1
    0x4050ef5, 0x803ff15, 0xf10cfef8, 0xfde5f90a, 0x311709de, 0x19e1afc8, 0xf9f50c11, 0x166af18,
    // 5, 32, 6, -1, -16, 1, -10, 20, 20, -8, 9, -10, -3, -2, -35, 5, 3, 9, -1, -12, 1, 6, 10, 3, -7, -8, -2, -10, 0, -4, -13, 4
    0xff062005, 0x14f601f0, 0xf609f814, 0x5ddfefd, 0xf4ff0903, 0x30a0601, 0xf6fef8f9, 0x4f3fc00,
    // -6, 16, -16, 31, -20, -9, 12, 2, 20, -33, -7, 8, -1, -34, -29, 3, -25, 19, -5, -20, 18, 9, 25, -13, -19, -27, -7, -4, 1, -5, 13, -23
    0x1ff010fa, 0x20cf7ec, 0x8f9df14, 0x3e3deff, 0xecfb13e7, 0xf3190912, 0xfcf9e5ed, 0xe90dfb01,
    // -3, -2, 0, 23, 0, 11, 6, 2, 5, 38, -31, 19, -7, 28, 2, 2, 3, -6, 8, 8, 49, 5, 2, -3, 2, 21, -3, -2, -3, -15, -30, -5
    0x1700fefd, 0x2060b00, 0x13e12605, 0x2021cf9, 0x808fa03, 0xfd020531, 0xfefd1502, 0xfbe2f1fd,
    // -14, -12, -15, 11, 7, 4, -26, 11, 3, 14, 9, -3, -3, 21, 0, 5, -2, 18, 15, -5, -23, 6, 32, -3, -9, 15, -2, -4, -3, -61, -29, -8
    0xbf1f4f2, 0xbe60407, 0xfd090e03, 0x50015fd, 0xfb0f12fe, 0xfd2006e9, 0xfcfe0ff7, 0xf8e3c3fd,
    // 21, -77, 42, 99, 59, -37, -5, 56, -96, -75, -32, 21, 2, -46, -53, -105, 32, 16, 15, 10, 19, 7, 34, 27, -5, 29, -2, -14, 1, -30, 7, 27
    0x632ab315, 0x38fbdb3b, 0x15e0b5a0, 0x97cbd202, 0xa0f1020, 0x1b220713, 0xf2fe1dfb, 0x1b07e201,
    // -2, -7, 6, -9, -5, 2, 14, 4, -4, 6, -8, -5, -2, 10, 9, 5, 27, -12, -17, 38, 8, -8, 8, -3, 12, 24, 9, 3, 5, -15, -2, 18
    0xf706f9fe, 0x40e02fb, 0xfbf806fc, 0x5090afe, 0x26eff41b, 0xfd08f808, 0x309180c, 0x12fef105,
    // 6, 7, 0, -10, 8, 3, 4, 15, -11, 0, 3, -17, 2, 5, -7, -3, 3, 8, 5, 5, 7, -3, -1, 0, -1, 6, -8, 10, -2, 4, 24, 6
    0xf6000706, 0xf040308, 0xef0300f5, 0xfdf90502, 0x5050803, 0xfffd07, 0xaf806ff, 0x61804fe,
    // -11, -5, -9, 1, -13, -1, 0, -11, -5, -30, 6, -5, -2, -18, 11, 0, -12, 0, 2, -12, 4, -7, 3, 0, -15, -4, 6, 4, 0, 8, 9, -7
    0x1f7fbf5, 0xf500fff3, 0xfb06e2fb, 0xbeefe, 0xf40200f4, 0x3f904, 0x406fcf1, 0xf9090800,
    // -10, 17, -10, -22, 1, 14, 17, 1, 29, -2, -7, -11, 0, -9, 5, 3, -12, -42, 32, 37, -53, 42, 8, 35, -123, 14, -22, -1, -15, 39, -45, 30
    0xeaf611f6, 0x1110e01, 0xf5f9fe1d, 0x305f700, 0x2520d6f4, 0x23082acb, 0xffea0e85, 0x1ed327f1,
    // -1, 2, 21, 4, 45, -12, -4, 1, -17, -8, 7, 10, -4, 0, 9, -2, -6, 9, -4, -6, 7, -3, 9, -6, -6, -8, 6, -5, 0, -8, 20, -8
    0x41502ff, 0x1fcf42d, 0xa07f8ef, 0xfe0900fc, 0xfafc09fa, 0xfa09fd07, 0xfb06f8fa, 0xf814f800,
    // -5, 1, 7, 30, 44, -16, 10, -23, 6, -6, 2, 7, -4, -27, 13, 3, -20, 5, 5, -8, -12, -7, -2, 4, 12, -7, 1, 3, 1, -4, -15, -18
    0x1e0701fb, 0xe90af02c, 0x702fa06, 0x30de5fc, 0xf80505ec, 0x4fef9f4, 0x301f90c, 0xeef1fc01,
    // -11, 5, 2, -5, -4, -8, 22, 2, 4, -14, -7, 5, -2, -5, 3, 2, -11, 20, -26, 1, -18, 20, -4, -23, -7, -11, 13, -10, -4, 35, 15, 3
    0xfb0205f5, 0x216f8fc, 0x5f9f204, 0x203fbfe, 0x1e614f5, 0xe9fc14ee, 0xf60df5f9, 0x30f23fc,
    // 4, -2, -5, -6, -27, 3, 2, 0, 3, -6, -3, 1, -1, -4, 2, 0, -11, 5, -6, -24, -20, -3, 11, -18, 11, -1, -22, -10, 8, -10, -12, 15
    0xfafbfe04, 0x203e5, 0x1fdfa03, 0x2fcff, 0xe8fa05f5, 0xee0bfdec, 0xf6eaff0b, 0xff4f608,
    // -37, -20, 87, 51, -35, -59, 60, -26, -66, -42, 4, 57, 5, 56, -51, -24, 0, 23, -32, 2, 27, 42, -6, 16, -64, -18, -13, -19, 0, 12, 10, 25
    0x3357ecdb, 0xe63cc5dd, 0x3904d6be, 0xe8cd3805, 0x2e01700, 0x10fa2a1b, 0xedf3eec0, 0x190a0c00,
    // -3, 0, 1, -15, -8, -6, 1, -11, 2, -19, 7, 4, -1, 4, 9, -10, -5, 13, -16, -42, 24, 1, 10, -12, -17, 13, -5, -10, -5, 20, -20, 19
    0xf10100fd, 0xf501faf8, 0x407ed02, 0xf60904ff, 0xd6f00dfb, 0xf40a0118, 0xf6fb0def, 0x13ec14fb,
    // 3, -1, -3, -17, 14, 13, 13, 7, -25, -9, -3, -2, -5, 9, -4, 2, 3, 10, -5, 11, -9, -1, 3, 13, 3, -2, -2, 2, 4, 13, -22, -8
    0xeffdff03, 0x70d0d0e, 0xfefdf7e7, 0x2fc09fb, 0xbfb0a03, 0xd03fff7, 0x2fefe03, 0xf8ea0d04,
    // 8, 5, -19, -11, 42, -8, -11, 1, -17, -19, -3, -7, 7, 7, -2, 6, 13, 3, 11, -15, 16, -10, 15, -4, 9, -8, -4, 4, 2, -1, -17, -3
    0xf5ed0508, 0x1f5f82a, 0xf9fdedef, 0x6fe0707, 0xf10b030d, 0xfc0ff610, 0x4fcf809, 0xfdefff02,
    // 10, -7, -25, 1, 30, 3, -12, 3, -12, 6, -9, -5, 3, -15, 4, 17, -2, -20, -13, -29, -4, 40, -19, 62, -38, 50, -31, -19, 4, 47, -98, 45
    0x1e7f90a, 0x3f4031e, 0xfbf706f4, 0x1104f103, 0xe3f3ecfe, 0x3eed28fc, 0xede132da, 0x2d9e2f04,
    // 20, 13, 13, -9, 62, -29, 8, -25, -19, 0, 6, -6, 6, 3, 2, 9, 8, 2, -2, 2, 3, 0, 20, 7, -12, -2, -10, -11, 4, -2, 0, 2
    0xf70d0d14, 0xe708e33e, 0xfa0600ed, 0x9020306, 0x2fe0208, 0x7140003, 0xf5f6fef4, 0x200fe04,
    // 2, 13, 1, 7, 34, -8, -20, -20, -20, -3, 16, 3, -5, 17, 13, 3, 2, 5, -1, -8, -26, -9, 7, 9, 27, -10, -3, 4, 7, -4, -39, -10
    0x7010d02, 0xececf822, 0x310fdec, 0x30d11fb, 0xf8ff0502, 0x907f7e6, 0x4fdf61b, 0xf6d9fc07,
    // 15, -1, -4, 7, -11, 1, -2, -8, 14, -3, -10, 4, 1, 21, 24, -8, 8, -1, -12, 25, -11, 2, 6, -11, 4, -43, 12, -1, 0, 16, 16, -3
    0x7fcff0f, 0xf8fe01f5, 0x4f6fd0e, 0xf8181501, 0x19f4ff08, 0xf50602f5, 0xff0cd504, 0xfd101000,
    // -1, -5, -3, 1, -6, -4, -4, -1, 2, 5, -3, 4, 6, 6, 18, 2, 5, 7, 14, 8, 1, -4, 24, -16, 6, -20, 9, 3, 5, -10, -1, 3
    0x1fdfbff, 0xfffcfcfa, 0x4fd0502, 0x2120606, 0x80e0705, 0xf018fc01, 0x309ec06, 0x3fff605,
    // 21, -27, 35, 14, 16, 7, 15, 57, 90, -96, 26, 19, -2, 15, 1, -5, 17, 16, 23, 14, 27, -4, -1, 12, -6, 1, 12, -1, 6, -9, -14, 19
    0xe23e515, 0x390f0710, 0x131aa05a, 0xfb010ffe, 0xe171011, 0xcfffc1b, 0xff0c01fa, 0x13f2f706,
    // 2, -3, 3, -17, -7, -5, 2, 0, 8, 0, -7, 3, 2, -3, 4, -6, 13, 1, -12, 28, 12, -7, 15, 3, 17, -7, 9, 5, 8, -15, -3, 12
    0xef03fd02, 0x2fbf9, 0x3f90008, 0xfa04fd02, 0x1cf4010d, 0x30ff90c, 0x509f911, 0xcfdf108,
    // -4, -2, 8, -15, 2, 4, 5, 9, -9, 4, -6, -3, 3, -8, -2, -2, -8, -12, 10, 3, -9, 9, -3, -10, 10, 20, -5, 6, -4, -11, 11, 21
    0xf108fefc, 0x9050402, 0xfdfa04f7, 0xfefef803, 0x30af4f8, 0xf6fd09f7, 0x6fb140a, 0x150bf5fc,
    // -14, 7, 11, -6, 18, -10, -3, 5, -12, 3, 13, 3, 4, 12, -17, -14, -15, 4, -2, 5, 13, -9, -14, 4, 9, 0, 13, 3, -1, -1, -10, -5
    0xfa0b07f2, 0x5fdf612, 0x30d03f4, 0xf2ef0c04, 0x5fe04f1, 0x4f2f70d, 0x30d0009, 0xfbf6ffff,
    // -11, 11, -12, -22, -4, 15, 17, -1, 14, 6, 7, -15, -3, 2, -11, 4, 37, -4, -44, 19, -119, 36, 5, -22, -11, -41, 31, -45, -2, 5, 72, 14
    0xeaf40bf5, 0xff110ffc, 0xf107060e, 0x4f502fd, 0x13d4fc25, 0xea052489, 0xd31fd7f5, 0xe4805fe,
    // -9, 0, 24, -17, 30, -36, -27, 22, 31, 18, 6, 23, 10, -6, -4, -15, 2, 1, -4, 4, 7, 1, 5, -7, 6, 2, 2, -3, -2, -13, -1, 13
    0xef1800f7, 0x16e5dc1e, 0x1706121f, 0xf1fcfa0a, 0x4fc0102, 0xf9050107, 0xfd020206, 0xdfff3fe,
    // -4, 12, -9, 8, -3, -16, 8, 7, 3, 8, -2, -9, 12, -30, 6, 10, -4, 6, 13, 0, 12, -8, 1, -2, 9, 8, 10, 1, 0, -4, 4, 2
    0x8f70cfc, 0x708f0fd, 0xf7fe0803, 0xa06e20c, 0xd06fc, 0xfe01f80c, 0x10a0809, 0x204fc00,
    // 30, 12, -4, 14, 5, -8, -4, 1, 10, 18, -18, -19, -4, -4, 24, -9, 36, 29, -10, 29, -23, -7, -17, 7, -5, 34, -30, -36, 19, 5, 33, -10
    0xefc0c1e, 0x1fcf805, 0xedee120a, 0xf718fcfc, 0x1df61d24, 0x7eff9e9, 0xdce222fb, 0xf6210513,
    // 20, 10, -16, 19, -15, 0, -4, 0, 4, 9, -9, -11, -1, -19, 4, -13, 31, 20, -10, -20, 1, 1, -16, 0, 15, 31, -18, -29, 9, 7, -4, -5
    0x13f00a14, 0xfc00f1, 0xf5f70904, 0xf304edff, 0xecf6141f, 0xf00101, 0xe3ee1f0f, 0xfbfc0709,
    // 12, 17, -42, -6, -61, -24, -86, -54, -66, 90, -63, -67, 62, 63, 60, 21, 21, 21, 6, -1, -14, 4, -11, -2, -24, 17, -28, -20, 17, -6, -3, -17
    0xfad6110c, 0xcaaae8c3, 0xbdc15abe, 0x153c3f3e, 0xff061515, 0xfef504f2, 0xece411e8, 0xeffdfa11,
    // 24, 2, -3, -6, 2, -1, -11, -9, 14, 5, -4, -11, -4, -7, 6, -11, 36, 13, -16, 4, -3, -8, 0, -11, 28, 7, -23, -20, 9, 5, -7, -3
    0xfafd0218, 0xf7f5ff02, 0xf5fc050e, 0xf506f9fc, 0x4f00d24, 0xf500f8fd, 0xece9071c, 0xfdf90509,
    // 16, -7, 5, -9, 20, 1, -1, -14, -16, 16, 0, 0, -2, 9, 20, -10, 2, 0, -7, 6, -4, 15, 1, 11, 25, 20, -10, -30, 2, -3, 23, 19
    0xf705f910, 0xf2ff0114, 0x10f0, 0xf61409fe, 0x6f90002, 0xb010ffc, 0xe2f61419, 0x1317fd02,
    // 14, 25, -11, 32, 20, 34, -12, 16, -2, 17, 1, -26, -2, 10, 58, 23, 8, 7, -1, 5, -1, 5, -23, 9, 1, 6, 6, -7, 8, 13, 1, 7
    0x20f5190e, 0x10f42214, 0xe60111fe, 0x173a0afe, 0x5ff0708, 0x9e905ff, 0xf9060601, 0x7010d08,
    // 0, -31, -23, 25, 22, 9, 20, -15, 27, 11, -18, 1, -6, -20, 12, 28, -43, 2, 21, -97, -53, -36, -17, -29, 82, 48, 32, 35, -23, -7, -6, 10
    0x19e9e100, 0xf1140916, 0x1ee0b1b, 0x1c0cecfa, 0x9f1502d5, 0xe3efdccb, 0x23203052, 0xafaf9e9,
    // -45, -9, -18, 13, 39, -3, -13, 4, -20, -7, 8, 13, -4, 8, 39, -32, 12, -7, -12, 10, -2, -6, 26, 4, 14, 9, -17, -12, 5, -19, -16, 22
    0xdeef7d3, 0x4f3fd27, 0xd08f9ec, 0xe02708fc, 0xaf4f90c, 0x41afafe, 0xf4ef090e, 0x16f0ed05,
    // -25, 2, 34, -14, 16, -15, 3, 2, -10, 11, -10, 7, -1, -13, 41, -16, 12, 2, -6, -11, -9, -13, -1, -2, -4, -13, 5, 1, 2, 4, 2, 6
    0xf22202e7, 0x203f110, 0x7f60bf6, 0xf029f3ff, 0xf5fa020c, 0xfefff3f7, 0x105f3fc, 0x6020402,
    // -1, 6, 2, 18, 4, -13, 8, 16, 10, 23, -31, 33, 0, 20, 11, -12, -31, -8, 23, -12, -2, -30, -11, -25, 10, 4, 7, 12, 10, -14, -42, -5
    0x120206ff, 0x1008f304, 0x21e1170a, 0xf40b1400, 0xf417f8e1, 0xe7f5e2fe, 0xc07040a, 0xfbd6f20a,
    // -7, -10, -7, 2, 8, -10, 6, 0, -3, 1, -4, 2, 0, -5, 4, -4, -27, 9, 34, -18, -11, -26, 26, -32, -21, 16, -21, 23, 5, -49, -65, 7
    0x2f9f6f9, 0x6f608, 0x2fc01fd, 0xfc04fb00, 0xee2209e5, 0xe01ae6f5, 0x17eb10eb, 0x7bfcf05,
    // -17, -18, -16, -32, 112, 44, -16, 108, 78, -13, 17, -47, -9, -48, 108, 27, 21, 24, 13, -5, -25, -11, 0, 32, 29, 32, 1, -18, 8, -25, -47, 35
    0xe0f0eeef, 0x6cf02c70, 0xd111f34e, 0x1b6cd0f7, 0xfb0d1815, 0x2000f5e7, 0xee01201d, 0x23d1e708,
    // 5, 5, 5, -27, -4, 4, 6, 16, -8, -10, -11, -5, 1, 21, 14, -21, -1, -4, -23, 30, -22, -1, -18, 5, 39, 24, 10, -5, -6, 0, -50, 43
    0xe5050505, 0x100604fc, 0xfbf5f6f8, 0xeb0e1501, 0x1ee9fcff, 0x5eeffea, 0xfb0a1827, 0x2bce00fa,
    // 6, 1, -9, -1, 42, 14, 29, -5, -24, 5, 1, -18, -5, -5, 29, 19, 1, -9, 0, 5, -2, -1, -8, 2, -10, -17, 3, -17, 2, -4, 1, 5
    0xfff70106, 0xfb1d0e2a, 0xee0105e8, 0x131dfbfb, 0x500f701, 0x2f8fffe, 0xef03eff6, 0x501fc02,
    // 17, -23, 3, -4, 9, 3, 3, 12, 5, -16, -8, -2, -6, 7, 7, 9, 15, -6, -3, 3, 12, 2, 6, -5, 2, -13, 1, -13, 1, 13, 4, 10
    0xfc03e911, 0xc030309, 0xfef8f005, 0x90707fa, 0x3fdfa0f, 0xfb06020c, 0xf301f302, 0xa040d01,
    // -5, -20, -14, 28, 3, -3, -12, 5, -8, 0, -3, 6, -3, 24, 23, -10, -10, -13, 30, 79, -88, -11, 28, -4, 1, -19, 23, 39, -1, -34, 62, 32
    0x1cf2ecfb, 0x5f4fd03, 0x6fd00f8, 0xf61718fd, 0x4f1ef3f6, 0xfc1cf5a8, 0x2717ed01, 0x203edeff,
    // 11, -5, 3, 17, -14, -7, -38, 7, 31, -5, 4, 1, 1, 14, 3, -19, 4, -4, -6, 23, -4, 1, -5, -1, -8, -4, 3, 4, -3, 17, 7, 4
    0x1103fb0b, 0x7daf9f2, 0x104fb1f, 0xed030e01, 0x17fafc04, 0xfffb01fc, 0x403fcf8, 0x40711fd,
    // -1, -17, 7, 18, -18, -1, 10, -1, 15, -13, -17, -8, 0, 9, 8, 1, -3, 2, -2, 2, -2, 1, -2, 6, 2, -13, -8, 1, 5, 6, 13, -17
    0x1207efff, 0xff0affee, 0xf8eff30f, 0x1080900, 0x2fe02fd, 0x6fe01fe, 0x1f8f302, 0xef0d0605,
};
static const uint embedded_encoder2_ResidualBlock_0_body_conv_dw_bias_dwords[8] = {
    // 0.003275, -0.001536, -0.003338, -0.010254, 0.01478, -0.00657, -0.004093, -0.013885, -0.04053, -0.001192, 0.01836, 0.001426, 0.03494, 0.0434, 0.00512, -0.011116
    0x964b1ab5, 0xa1409ad6, 0x9eba2391, 0xa31c9c31, 0x94e2a930, 0x15d724b3, 0x298e2879, 0xa1b11d3e,
};
static const uint embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 0, 73, -28, 36, -61, -34, -80, -50, 7, -9, -22, 40, 7, 26, -61, 7, -19, 69, 36, 33, -32, 49, 1, -64, 16, 32, -26, -3, 26, -29, -25, -29
    0x24e44900, 0xceb0dec3, 0x28eaf707, 0x7c31a07, 0x212445ed, 0xc00131e0, 0xfde62010, 0xe3e7e31a,
    // -7, -41, -55, 12, -62, -57, -24, -13, -87, 40, 25, -12, -13, 13, 13, -33, 27, -38, 10, -128, -16, -40, -44, -33, 18, -13, -81, -46, -32, 39, -3, -42
    0xcc9d7f9, 0xf3e8c7c2, 0xf41928a9, 0xdf0d0df3, 0x800ada1b, 0xdfd4d8f0, 0xd2aff312, 0xd6fd27e0,
    // 26, -19, -23, 30, -8, 17, -12, -48, 41, 17, 58, 91, 31, -46, -27, -11, -16, -56, 66, -39, 21, -54, -34, -1, -72, 42, 49, 95, -14, 38, 75, -11
    0x1ee9ed1a, 0xd0f411f8, 0x5b3a1129, 0xf5e5d21f, 0xd942c8f0, 0xffdeca15, 0x5f312ab8, 0xf54b26f2,
    // 4, -59, 8, 93, -41, -68, 17, 40, 13, 75, 27, -77, -4, 39, -44, -28, 31, -24, 86, 38, -89, 8, 27, -9, 18, -99, -59, 81, -56, -78, 1, -88
    0x5d08c504, 0x2811bcd7, 0xb31b4b0d, 0xe4d427fc, 0x2656e81f, 0xf71b08a7, 0x51c59d12, 0xa801b2c8,
    // -71, -31, 8, 8, -9, 27, 2, 35, -12, -91, -16, -45, 7, -7, -61, -47, -5, -96, 81, -6, 65, -4, 47, -8, 17, -47, 88, -42, -86, 7, 40, 81
    0x808e1b9, 0x23021bf7, 0xd3f0a5f4, 0xd1c3f907, 0xfa51a0fb, 0xf82ffc41, 0xd658d111, 0x512807aa,
    // 20, 71, -51, 29, -4, 50, 15, 8, 70, -42, -48, -116, 0, -34, -54, 53, -37, -10, -54, 7, -35, 102, 19, 55, 47, 6, 41, 26, -1, -6, 19, -24
    0x1dcd4714, 0x80f32fc, 0x8cd0d646, 0x35cade00, 0x7caf6db, 0x371366dd, 0x1a29062f, 0xe813faff,
    // 34, -38, -16, -38, 29, -77, -7, 47, 31, -47, 46, 12, 3, 3, -32, -14, -6, -36, 40, 5, -32, 88, -57, -91, -49, -15, -49, 42, 9, 72, -38, 33
    0xdaf0da22, 0x2ff9b31d, 0xc2ed11f, 0xf2e00303, 0x528dcfa, 0xa5c758e0, 0x2acff1cf, 0x21da4809,
    // 34, 43, 52, 55, 44, 90, 42, -58, 70, -56, 27, -74, 8, 74, -47, 19, -25, 5, -50, -58, -22, -96, -36, 36, -62, 64, 1, 68, -9, -50, 45, -6
    0x37342b22, 0xc62a5a2c, 0xb61bc846, 0x13d14a08, 0xc6ce05e7, 0x24dca0ea, 0x440140c2, 0xfa2dcef7,
    // 27, -8, -24, -24, 6, -24, -19, -2, 7, -54, -23, 66, -19, 96, -45, -20, -19, 6, 95, 13, -90, 5, -102, 11, 25, 50, 94, 38, -25, 54, 35, 14
    0xe8e8f81b, 0xfeede806, 0x42e9ca07, 0xecd360ed, 0xd5f06ed, 0xb9a05a6, 0x265e3219, 0xe2336e7,
    // 7, 32, 82, -22, -21, 73, -43, 40, 27, -34, 40, -46, -18, 25, 40, 61, -28, -2, 4, 35, 13, -21, -13, 71, -1, -39, -5, 88, -18, 69, 46, -25
    0xea522007, 0x28d549eb, 0xd228de1b, 0x3d2819ee, 0x2304fee4, 0x47f3eb0d, 0x58fbd9ff, 0xe72e45ee,
    // -40, -38, -53, 9, 63, -33, -55, -12, 17, -39, -56, -14, -38, 14, -85, 32, -38, 51, -90, -34, 44, 55, -65, 92, 52, 58, -28, -47, -61, 65, 26, 9
    0x9cbdad8, 0xf4c9df3f, 0xf2c8d911, 0x20ab0eda, 0xdea633da, 0x5cbf372c, 0xd1e43a34, 0x91a41c3,
    // 13, 64, 51, -31, 24, -18, 30, 120, -5, 67, -15, 71, -2, -18, -76, 63, -76, 13, 99, -75, -28, 20, 14, -43, 61, -28, -22, -71, -42, 34, 40, -11
    0xe133400d, 0x781eee18, 0x47f143fb, 0x3fb4eefe, 0xb5630db4, 0xd50e14e4, 0xb9eae43d, 0xf52822d6,
    // -6, 94, 88, -78, -74, 8, -43, -17, -46, -14, 30, -31, -19, 45, 53, 1, -1, -36, -69, 52, -34, -3, -29, -118, -18, -66, 36, -83, 5, 30, 87, -17
    0xb2585efa, 0xefd508b6, 0xe11ef2d2, 0x1352ded, 0x34bbdcff, 0x8ae3fdde, 0xad24beee, 0xef571e05,
    // -5, 89, 9, -77, 43, 57, -11, -55, -36, -67, -10, 89, 6, -39, 47, 53, 26, -16, 83, -23, 24, 33, 16, -4, -58, 6, 28, -86, -29, -35, 13, -46
    0xb30959fb, 0xc9f5392b, 0x59f6bddc, 0x352fd906, 0xe953f01a, 0xfc102118, 0xaa1c06c6, 0xd20ddde3,
    // -7, 56, 17, 33, 12, -29, 39, 86, 6, 57, 22, -47, -29, -78, 110, -23, -13, -38, 53, 1, 15, 9, -3, -11, 25, -16, 72, 4, -53, 11, 17, 33
    0x211138f9, 0x5627e30c, 0xd1163906, 0xe96eb2e3, 0x135daf3, 0xf5fd090f, 0x448f019, 0x21110bcb,
    // 49, 22, 76, 8, -41, 32, 29, 50, -30, 11, 0, 21, -12, -4, 105, -40, 2, -82, -2, 1, 29, 29, 38, -33, 9, -40, 78, -24, -54, 4, -23, 36
    0x84c1631, 0x321d20d7, 0x15000be2, 0xd869fcf4, 0x1feae02, 0xdf261d1d, 0xe84ed809, 0x24e904ca,
};
static const uint embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias_dwords[16] = {
    // -0.06464, -0.3367, 0.0391, 0.02809, -0.1273, 0.0404, 0.04416, 0.03424, -0.043, -0.167, 0.06384, 0.0454, 0.03342, 0.06396, 0.03445, 0.05118
    0xb563ac23, 0x27312901, 0x292cb013, 0x286229a7, 0xb158a981, 0x29d02c16, 0x2c182847, 0x2a8d2869,
    // 0.05588, 0.02122, 0.02228, 0.05167, 0.09436, 0.0291, 0.03687, 0.00779, -0.00803, 0.0615, 0.02396, 0.0579, 0.05942, -0.02379, 0.0457, 0.06274
    0x256f2b27, 0x2a9d25b4, 0x27732e0a, 0x1ffa28b8, 0x2bdfa01d, 0x2b692622, 0xa6172b9b, 0x2c0429d9,
};
static const uint embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 79, 9, 60, 5, -84, 15, 23, 2, -41, -3, 3, 30, 9, -16, -22, 24, 22, -28, -41, -2, 8, -10, 28, -32, 5, -21, -9, 9, 20, 33, 29, 27
    0x53c094f, 0x2170fac, 0x1e03fdd7, 0x18eaf009, 0xfed7e416, 0xe01cf608, 0x9f7eb05, 0x1b1d2114,
    // -52, -35, 35, 30, -60, -11, 43, 86, 11, 9, -10, -25, -8, 92, 24, -10, -20, 28, 55, -55, -58, -68, 121, -11, 96, 17, 90, 32, -111, 5, 24, 45
    0x1e23ddcc, 0x562bf5c4, 0xe7f6090b, 0xf6185cf8, 0xc9371cec, 0xf579bcc6, 0x205a1160, 0x2d180591,
    // -3, 49, 10, -106, 15, -54, 32, 31, 47, -44, 60, 7, -58, -23, 43, -41, -96, 3, 12, -24, 46, 14, 14, -24, -9, 58, 56, 8, 37, 53, -18, 27
    0x960a31fd, 0x1f20ca0f, 0x73cd42f, 0xd72be9c6, 0xe80c03a0, 0xe80e0e2e, 0x8383af7, 0x1bee3525,
    // -39, 70, -87, 12, -26, -7, -84, 77, 40, -44, 32, 11, 56, -5, -17, -33, 45, -29, 28, -13, 18, -38, 25, -50, -80, -83, 1, 5, -59, 5, -67, 12
    0xca946d9, 0x4dacf9e6, 0xb20d428, 0xdfeffb38, 0xf31ce32d, 0xce19da12, 0x501adb0, 0xcbd05c5,
    // 1, 28, 78, -10, 2, 19, -75, 27, 0, -22, -27, -4, -6, 9, -72, 90, -28, -4, -38, -11, 14, -30, -118, 6, -3, 119, 72, 10, 0, 28, -5, 5
    0xf64e1c01, 0x1bb51302, 0xfce5ea00, 0x5ab809fa, 0xf5dafce4, 0x68ae20e, 0xa4877fd, 0x5fb1c00,
    // 45, 45, -8, -71, 29, 38, 57, 92, -43, 9, -43, -27, 43, -54, -85, 91, -71, -6, -1, 62, -9, -93, 60, 6, -20, -12, -13, -86, 80, 16, 29, -2
    0xb9f82d2d, 0x5c39261d, 0xe5d509d5, 0x5babca2b, 0x3efffab9, 0x63ca3f7, 0xaaf3f4ec, 0xfe1d1050,
    // 52, 33, 32, 13, 2, 1, 7, -84, 12, -45, 4, 7, -15, -29, -61, 88, -14, -1, 10, -1, 69, 74, 22, 40, -3, 11, 35, -33, 15, 46, -69, 28
    0xd202134, 0xac070102, 0x704d30c, 0x58c3e3f1, 0xff0afff2, 0x28164a45, 0xdf230bfd, 0x1cbb2e0f,
    // -4, 60, -34, 17, 23, -4, 0, -12, -38, -68, 33, 64, 77, -61, 52, -68, -69, 17, 82, -26, -86, 1, -41, 7, -19, 45, -2, 12, 65, 34, 40, 63
    0x11de3cfc, 0xf400fc17, 0x4021bcda, 0xbc34c34d, 0xe65211bb, 0x7d701aa, 0xcfe2ded, 0x3f282241,
    // -23, 64, 57, -45, -1, 97, 49, 1, -4, -65, -118, 24, -28, 72, -1, 3, 27, 102, 32, 88, 37, 8, -29, -18, -41, -8, -74, -1, -76, 59, -18, 23
    0xd33940e9, 0x13161ff, 0x188abffc, 0x3ff48e4, 0x5820661b, 0xeee30825, 0xffb6f8d7, 0x17ee3bb4,
    // -29, -67, 27, 2, 62, -57, 19, 4, 12, 97, 49, -22, -34, 35, -1, 8, 36, -7, -39, 9, -34, 19, -39, -36, 24, 24, -33, -28, -7, -61, 20, -82
    0x21bbde3, 0x413c73e, 0xea31610c, 0x8ff23de, 0x9d9f924, 0xdcd913de, 0xe4df1818, 0xae14c3f9,
    // 23, 21, -31, -38, -45, 22, -27, 17, -88, -22, -41, -7, 25, 40, 90, -97, 70, -33, -3, 48, -4, -16, -20, -99, 19, 52, 60, -76, -63, 72, 75, 40
    0xdae11517, 0x11e516d3, 0xf9d7eaa8, 0x9f5a2819, 0x30fddf46, 0x9decf0fc, 0xb43c3413, 0x284b48c1,
    // 9, 10, -20, 127, 36, 31, 13, 10, -91, -25, -45, -103, 31, -3, 5, -40, -1, -16, 42, -35, -5, -16, -53, 1, -27, 6, -52, 52, 22, 8, 41, 8
    0x7fec0a09, 0xa0d1f24, 0x99d3e7a5, 0xd805fd1f, 0xdd2af0ff, 0x1cbf0fb, 0x34cc06e5, 0x8290816,
    // 28, -40, -13, -14, -91, -30, -24, -3, 36, 38, 34, 28, -5, 28, 9, -17, -67, 34, 54, -78, 2, -35, -10, 29, 43, 11, -2, 3, -25, -25, -41, -20
    0xf2f3d81c, 0xfde8e2a5, 0x1c222624, 0xef091cfb, 0xb23622bd, 0x1df6dd02, 0x3fe0b2b, 0xecd7e7e7,
    // -51, 29, 58, -24, -76, -2, 57, 99, -37, 8, -30, -10, -16, -8, -15, 15, -40, 47, -57, -46, -40, -84, 42, -43, -36, -38, -30, 37, -13, -38, 19, 10
    0xe83a1dcd, 0x6339feb4, 0xf6e208db, 0xff1f8f0, 0xd2c72fd8, 0xd52aacd8, 0x25e2dadc, 0xa13daf3,
    // -6, 4, -72, -49, 3, 57, -94, 33, -10, -11, -63, -15, -62, 40, -19, -16, -89, 8, 64, 41, -41, -17, 37, -27, 49, -36, 73, 75, 30, 11, 104, -3
    0xcfb804fa, 0x21a23903, 0xf1c1f5f6, 0xf0ed28c2, 0x294008a7, 0xe525efd7, 0x4b49dc31, 0xfd680b1e,
    // -58, -3, 2, 1, 2, -11, -19, -47, -46, 26, -3, 30, 20, -33, -14, 36, 1, 29, 2, 10, -37, 60, -23, -57, 8, 22, 22, -74, -21, -48, -18, -12
    0x102fdc6, 0xd1edf502, 0x1efd1ad2, 0x24f2df14, 0xa021d01, 0xc7e93cdb, 0xb6161608, 0xf4eed0eb,
};
static const uint embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias_dwords[8] = {
    // -0.04044, -0.10455, -0.01578, 0.0672, -0.01193, 0.05557, -0.0501, -0.03494, -0.03442, 0.04025, -0.02713, 0.002106, 0.01762, 0.07355, 0.01197, 0.05975
    0xaeb1a92d, 0x2c4da40a, 0x2b1da21c, 0xa879aa6a, 0x2927a868, 0x1850a6f2, 0x2cb52483, 0x2ba62221,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass1(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 16), // threadGroupSliceSize
        uint3(1920, 1080, 16), // storageSize
        uint3(16, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.014884727075695992, storage_quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005331969354301691, storage_embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_0_body_conv_dw_bias = { embedded_encoder2_ResidualBlock_0_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_0_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_0_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005319580901414156, storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias = { embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005279477220028639, storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias = { embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias };
    
    // fused_quantized_NHWC_/encoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_2 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_2 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 16);
    const uint3 groupSize_slice_2 = uint3(64, 1, 16);
    const uint3 storageSize_slice_2 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_2 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_2 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_2 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_2 = dot(groupStart_slice_2, tensorByteStrides_slice_2);
    const float quantizationScale_slice_2 = 0.01933070458471775;
    const RWBufferStorage storage_slice_2 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_2 = { logicalSize_slice_2, groupStart_slice_2, groupSize_slice_2, storageSize_slice_2, tensorByteStrides_slice_2, paddingBegin_slice_2, paddingEnd_slice_2, threadGroupByteOffsetInTensor_slice_2 + 33177600, quantizationScale_slice_2, storage_slice_2 };
    // ConvNextBlock (16, 1080, 1920), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,) -> (16, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    ConvNextBlock(19.41786337677181, 0.05149897187948227, 39.03760807273706, 0.025616323575377464, quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_0_body_conv_dw_bias, embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias, embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias, slice_2, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_1
#ifdef MLSR_PASS_1_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass1_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/encoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_3 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_3 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_3 = uint3(32, 1, 16);
    const uint3 storageSize_slice_3 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_3 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_3 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_3 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_3 = dot(groupStart_slice_3, tensorByteStrides_slice_3);
    const float quantizationScale_slice_3 = 0.01933070458471775;
    const RWBufferStorage storage_slice_3 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_3 = { logicalSize_slice_3, groupStart_slice_3, groupSize_slice_3, storageSize_slice_3, tensorByteStrides_slice_3, paddingBegin_slice_3, paddingEnd_slice_3, threadGroupByteOffsetInTensor_slice_3 + 33177600, quantizationScale_slice_3, storage_slice_3 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_3, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_1_POST


#ifdef MLSR_PASS_2
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/ConvNextBlock.hlsli"

static const uint embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // -23, -28, -17, -8, 15, 2, 1, -24, 12, -14, 20, -7, -7, -6, 9, -6, 5, -17, 7, -14, 8, -17, -27, 25, -4, 3, 23, -5, 4, 13, -17, 7
    0xf8efe4e9, 0xe801020f, 0xf914f20c, 0xfa09faf9, 0xf207ef05, 0x19e5ef08, 0xfb1703fc, 0x7ef0d04,
    // 1, -8, -16, 13, -10, -2, -9, 0, 8, 2, -14, 4, 0, -17, 7, -10, 20, -5, 0, -28, -74, 12, 25, 16, 46, -1, -15, -14, -3, 49, -28, 3
    0xdf0f801, 0xf7fef6, 0x4f20208, 0xf607ef00, 0xe400fb14, 0x10190cb6, 0xf2f1ff2e, 0x3e431fd,
    // 74, 39, -17, 6, 5, -38, 1, -57, -75, 40, 14, 3, 24, -5, -32, 27, -6, -21, 10, -31, 43, -6, -4, 24, 13, -15, -8, 31, 4, 14, 16, 13
    0x6ef274a, 0xc701da05, 0x30e28b5, 0x1be0fb18, 0xe10aebfa, 0x18fcfa2b, 0x1ff8f10d, 0xd100e04,
    // 13, -7, -13, 17, 51, 8, 34, -23, 4, 4, -28, -1, 0, -8, 24, 10, 3, 0, -17, -32, -24, 14, -31, 25, 27, -38, -6, 3, 2, -7, 26, -2
    0x11f3f90d, 0xe9220833, 0xffe40404, 0xa18f800, 0xe0ef0003, 0x19e10ee8, 0x3fada1b, 0xfe1af902,
    // 5, -17, -7, 16, 18, 16, 2, -6, -14, -21, -31, 5, 2, -7, 29, 11, 12, -11, -1, 6, -6, 3, 18, 5, 7, 17, -2, 3, -2, 11, 1, -16
    0x10f9ef05, 0xfa021012, 0x5e1ebf2, 0xb1df902, 0x6fff50c, 0x51203fa, 0x3fe1107, 0xf0010bfe,
    // -21, -11, -2, -3, -24, -2, 4, 29, 19, 22, 9, 9, -4, -9, -18, 6, 4, -7, -4, 7, 34, 3, -5, 4, -13, 6, 5, -3, 3, -15, -2, -4
    0xfdfef5eb, 0x1d04fee8, 0x9091613, 0x6eef7fc, 0x7fcf904, 0x4fb0322, 0xfd0506f3, 0xfcfef103,
    // -9, -14, 9, 27, -12, 4, 8, 14, 15, 13, 13, 7, -2, 7, 4, 11, -51, -44, 25, 93, -90, 8, 11, 99, -32, -41, -33, 83, -3, 63, -29, -3
    0x1b09f2f7, 0xe0804f4, 0x70d0d0f, 0xb0407fe, 0x5d19d4cd, 0x630b08a6, 0x53dfd7e0, 0xfde33ffd,
    // -8, -23, 26, 0, 58, -11, 21, 11, 29, 8, 7, 20, 1, 17, 27, 12, 19, -6, -5, 5, -2, 7, 12, -8, 2, 20, -4, 2, -4, 2, 15, -2
    0x1ae9f8, 0xb15f53a, 0x1407081d, 0xc1b1101, 0x5fbfa13, 0xf80c07fe, 0x2fc1402, 0xfe0f02fc,
    // -19, 6, 1, 59, 4, 4, 21, -9, 5, -13, 17, -8, -6, 3, 59, 7, 18, -10, -1, 13, 33, 7, 31, -9, -20, 10, -9, 2, 0, -9, 19, 15
    0x3b0106ed, 0xf7150404, 0xf811f305, 0x73b03fa, 0xdfff612, 0xf71f0721, 0x2f70aec, 0xf13f700,
    // -25, -24, -11, -29, -10, -16, 5, -22, -22, -43, 22, 14, 4, 49, 9, 9, 38, -7, -7, 2, -31, 13, 6, 23, 1, -5, -14, -24, 7, 19, 3, -3
    0xe3f5e8e7, 0xea05f0f6, 0xe16d5ea, 0x9093104, 0x2f9f926, 0x17060de1, 0xe8f2fb01, 0xfd031307,
    // -5, -1, -10, 22, 18, -2, 14, -15, 5, 9, 3, 16, 7, 9, 7, 13, -3, 4, 62, 41, 19, -9, 3, 36, -46, 42, 18, -34, 4, -13, 23, -19
    0x16f6fffb, 0xf10efe12, 0x10030905, 0xd070907, 0x293e04fd, 0x2403f713, 0xde122ad2, 0xed17f304,
    // 8, 52, -19, 15, 91, -9, 29, -46, 2, 1, -57, 22, -22, -62, -54, -16, -17, 12, -3, -29, -53, 34, -29, 36, 39, 9, 16, -8, -1, -30, 31, -10
    0xfed3408, 0xd21df75b, 0x16c70102, 0xf0cac2ea, 0xe3fd0cef, 0x24e322cb, 0xf8100927, 0xf61fe2ff,
    // -12, -1, 10, -3, -26, -3, 9, 8, 18, 7, 9, 17, 6, 15, -9, 7, -2, 19, 53, 19, -38, 0, -38, -8, 5, -2, 15, -1, -1, -10, 30, -18
    0xfd0afff4, 0x809fde6, 0x11090712, 0x7f70f06, 0x133513fe, 0xf8da00da, 0xff0ffe05, 0xee1ef6ff,
    // 18, -7, -8, -8, -5, 0, 1, 9, 1, -1, 1, 2, 6, 15, 2, 15, -15, 13, 0, 18, 14, 3, 5, -13, 3, 13, -14, 19, -6, -26, -2, 6
    0xf8f8f912, 0x90100fb, 0x201ff01, 0xf020f06, 0x12000df1, 0xf305030e, 0x13f20d03, 0x6fee6fa,
    // -30, 4, 34, 6, 15, -18, -33, -12, -21, -19, -32, 14, 9, 41, -17, 5, -2, -1, -15, -12, -10, -7, -6, -4, 11, -20, -14, -7, 1, -2, 4, 2
    0x62204e2, 0xf4dfee0f, 0xee0edeb, 0x5ef2909, 0xf4f1fffe, 0xfcfaf9f6, 0xf9f2ec0b, 0x204fe01,
    // -27, 16, 8, 7, -25, 11, -1, -14, 1, -13, -37, 26, -13, -22, -29, 0, -33, -60, 103, 25, 107, 33, 32, 15, 120, -61, 3, 50, -60, 59, -41, 11
    0x70810e5, 0xf2ff0be7, 0x1adbf301, 0xe3eaf3, 0x1967c4df, 0xf20216b, 0x3203c378, 0xbd73bc4,
    // -26, 28, -3, 30, -9, -2, -16, -3, 24, 13, 6, -2, -9, -23, -23, 19, 7, -1, 4, 8, 27, 3, 15, 9, -1, -5, -19, -1, 1, -11, 2, -2
    0x1efd1ce6, 0xfdf0fef7, 0xfe060d18, 0x13e9e9f7, 0x804ff07, 0x90f031b, 0xffedfbff, 0xfe02f501,
    // -6, -3, 10, 0, 8, 5, 9, -2, 28, -17, -28, 6, 6, 35, -5, 49, 4, -3, -7, 16, -3, 12, -9, 11, -1, -3, -8, -13, 0, -6, -4, 2
    0xafdfa, 0xfe090508, 0x6e4ef1c, 0x31fb2306, 0x10f9fd04, 0xbf70cfd, 0xf3f8fdff, 0x2fcfa00,
    // -1, 4, 9, 7, 18, -5, -1, 14, -10, 8, -6, -12, 8, -11, -14, 9, -16, 6, 21, 18, 2, 7, 7, -19, 13, -6, -3, 3, -11, 1, -24, -1
    0x70904ff, 0xefffb12, 0xf4fa08f6, 0x9f2f508, 0x121506f0, 0xed070702, 0x3fdfa0d, 0xffe801f5,
    // -3, 15, 8, 10, 4, -2, -3, 7, -4, -3, -11, -5, 6, 7, -7, 7, 2, 4, 8, 24, -12, 13, -28, -7, 20, -11, 15, -14, 1, -12, -32, -4
    0xa080ffd, 0x7fdfe04, 0xfbf5fdfc, 0x7f90706, 0x18080402, 0xf9e40df4, 0xf20ff514, 0xfce0f401,
    // 57, -5, -58, -22, 83, 6, -3, 52, -53, 26, 8, 69, -21, -34, 53, 56, -13, -5, 26, 3, -9, 0, -18, -14, 6, -17, -16, -7, 4, 22, 10, -17
    0xeac6fb39, 0x34fd0653, 0x45081acb, 0x3835deeb, 0x31afbf3, 0xf2ee00f7, 0xf9f0ef06, 0xef0a1604,
    // -1, 9, -9, -10, -4, 1, -17, 9, 2, 2, -3, -10, 3, -7, -25, 12, -26, -7, 17, 4, -16, 1, -23, 0, 5, 2, 3, 0, -8, 8, -8, -18
    0xf6f709ff, 0x9ef01fc, 0xf6fd0202, 0xce7f903, 0x411f9e6, 0xe901f0, 0x30205, 0xeef808f8,
    // -24, 9, 4, 20, 9, -5, 16, 7, 1, 9, -18, 6, 6, -7, -21, -8, -1, 1, -1, -2, 5, -3, -13, -4, -8, -7, 8, -1, 9, 0, -9, 2
    0x140409e8, 0x710fb09, 0x6ee0901, 0xf8ebf906, 0xfeff01ff, 0xfcf3fd05, 0xff08f9f8, 0x2f70009,
    // -14, -7, -1, -4, 5, -1, -11, 3, -1, -13, 2, 5, 10, 14, 5, 14, 7, -3, 2, -4, 2, -5, 1, -1, 0, -4, 2, 7, 8, 5, 6, 6
    0xfcfff9f2, 0x3f5ff05, 0x502f3ff, 0xe050e0a, 0xfc02fd07, 0xff01fb02, 0x702fc00, 0x6060508,
    // -10, -4, -4, -4, -1, 4, -12, 10, 11, 5, -2, 5, 4, 4, 4, 12, -115, -46, -30, 10, -6, -8, -70, -47, -7, 76, -75, -9, 32, 42, 22, 84
    0xfcfcfcf6, 0xaf404ff, 0x5fe050b, 0xc040404, 0xae2d28d, 0xd1baf8fa, 0xf7b54cf9, 0x54162a20,
    // -20, -9, -22, 6, -21, 14, -19, 3, -12, -5, -11, -5, -8, 8, 18, 16, 2, 2, 2, 3, -6, 2, -17, -1, -2, -3, 11, 6, 0, -1, -2, 4
    0x6eaf7ec, 0x3ed0eeb, 0xfbf5fbf4, 0x101208f8, 0x3020202, 0xffef02fa, 0x60bfdfe, 0x4feff00,
    // -26, -18, -6, -19, -1, 7, -8, 3, 15, 1, -11, 11, -3, 23, -11, 23, 10, 0, -1, -1, -2, -1, -6, 5, -11, -4, 6, 1, 0, 7, 0, 5
    0xedfaeee6, 0x3f807ff, 0xbf5010f, 0x17f517fd, 0xffff000a, 0x5fafffe, 0x106fcf5, 0x5000700,
    // 1, 4, -21, -16, 0, -3, 12, 14, -9, -2, 6, -13, 0, 33, 8, -5, -15, -32, -38, -27, -15, -25, 5, 43, -22, -26, 2, -6, 9, 66, 1, -18
    0xf0eb0401, 0xe0cfd00, 0xf306fef7, 0xfb082100, 0xe5dae0f1, 0x2b05e7f1, 0xfa02e6ea, 0xee014209,
    // 1, -11, -6, -33, -14, -5, 26, -8, -14, -2, 14, -1, 2, 28, 20, -10, -28, -13, -27, 9, -51, 1, 15, 28, 12, 7, 0, 3, -1, 24, -7, -13
    0xdffaf501, 0xf81afbf2, 0xff0efef2, 0xf6141c02, 0x9e5f3e4, 0x1c0f01cd, 0x300070c, 0xf3f918ff,
    // -31, 11, -9, -60, 78, 16, 22, 30, 7, 60, -45, -11, -1, -15, 74, -86, -27, -9, -10, 1, -12, -20, -6, 17, 25, 23, 35, 13, 0, -3, -16, -26
    0xc4f70be1, 0x1e16104e, 0xf5d33c07, 0xaa4af1ff, 0x1f6f7e5, 0x11faecf4, 0xd231719, 0xe6f0fd00,
    // 18, -4, -5, 0, 23, 4, 41, -16, -12, 13, 7, 0, -3, 21, 24, -3, -25, -8, -6, 40, -14, -2, -7, -4, 11, 19, 41, 11, -2, 16, 17, -8
    0xfbfc12, 0xf0290417, 0x70df4, 0xfd1815fd, 0x28faf8e7, 0xfcf9fef2, 0xb29130b, 0xf81110fe,
    // 3, 0, -4, 10, 22, 13, 19, -5, -16, 7, 2, -14, -9, 7, -8, 9, 11, 10, 19, 20, 2, 8, 23, 12, 11, 44, 6, 6, 4, -14, -15, -8
    0xafc0003, 0xfb130d16, 0xf20207f0, 0x9f807f7, 0x14130a0b, 0xc170802, 0x6062c0b, 0xf8f1f204,
    // -8, 13, 21, 10, 12, 5, 34, -5, -5, 22, 5, 17, -9, -11, -9, -8, 4, 4, -13, -2, -13, 10, -5, -7, -3, 6, 8, -7, -4, 4, -3, -4
    0xa150df8, 0xfb22050c, 0x110516fb, 0xf8f7f5f7, 0xfef30404, 0xf9fb0af3, 0xf90806fd, 0xfcfd04fc,
    // -28, -9, 33, 13, 0, -8, 17, 5, -32, -7, 27, 6, 1, 1, -33, -23, 5, -1, -34, -39, 16, 39, 40, 22, 2, -11, 3, -34, -1, 86, 59, 59
    0xd21f7e4, 0x511f800, 0x61bf9e0, 0xe9df0101, 0xd9deff05, 0x16282710, 0xde03f502, 0x3b3b56ff,
    // -5, 19, 8, 8, 23, -23, 25, -2, 16, 8, 8, -9, 4, 7, -14, -9, 9, 1, 3, -10, -15, -3, -16, 4, -10, 6, 19, -4, 1, 11, -13, -5
    0x80813fb, 0xfe19e917, 0xf7080810, 0xf7f20704, 0xf6030109, 0x4f0fdf1, 0xfc1306f6, 0xfbf30b01,
    // -19, 26, 22, 9, -34, -34, 6, 6, 15, -10, 20, -5, 5, -13, -7, -17, 6, 10, -1, -4, -7, 3, -10, -6, 1, 1, 12, 3, -2, 5, -8, -5
    0x9161aed, 0x606dede, 0xfb14f60f, 0xeff9f305, 0xfcff0a06, 0xfaf603f9, 0x30c0101, 0xfbf805fe,
    // -17, 3, 3, 2, 4, 6, 25, 0, -1, 17, 14, -8, -7, -21, -3, -19, -11, 3, -18, 18, -28, 15, 25, 1, -1, -4, 6, -16, -6, 21, -8, -7
    0x20303ef, 0x190604, 0xf80e11ff, 0xedfdebf9, 0x12ee03f5, 0x1190fe4, 0xf006fcff, 0xf9f815fa,
    // 0, 14, -14, 19, 4, 18, 14, 13, 1, 28, 0, -11, -12, -24, -7, -8, -11, 5, 9, 32, 11, -21, 33, 7, -23, 11, -9, 25, 8, 19, 10, -13
    0x13f20e00, 0xd0e1204, 0xf5001c01, 0xf8f9e8f4, 0x200905f5, 0x721eb0b, 0x19f70be9, 0xf30a1308,
    // -24, -2, -55, 59, 57, -33, 24, -79, 39, -13, 53, -13, -4, 32, -1, 52, -21, 7, -32, 3, -40, 13, 15, 43, 9, -4, -2, -1, 5, -9, -4, 6
    0x3bc9fee8, 0xb118df39, 0xf335f327, 0x34ff20fc, 0x3e007eb, 0x2b0f0dd8, 0xfffefc09, 0x6fcf705,
    // -12, -3, 4, -9, -6, 2, 18, 14, 11, 20, -11, -1, -1, -18, -8, -30, -19, -4, 12, 13, -29, -15, -26, 35, -9, 2, 10, 12, 6, 0, -23, -8
    0xf704fdf4, 0xe1202fa, 0xfff5140b, 0xe2f8eeff, 0xd0cfced, 0x23e6f1e3, 0xc0a02f7, 0xf8e90006,
    // 4, -8, 10, -9, -20, 9, 0, 6, 14, 14, -4, 2, 5, -7, 0, -16, -1, 1, -15, -3, -1, 5, -14, -19, -5, -27, 11, -33, -4, -34, -27, -1
    0xf70af804, 0x60009ec, 0x2fc0e0e, 0xf000f905, 0xfdf101ff, 0xedf205ff, 0xdf0be5fb, 0xffe5defc,
    // 10, -1, -23, -24, -25, -1, -11, -2, -14, -21, 22, -9, 1, 20, -18, 15, 14, -4, 3, 9, 23, -4, -10, -5, -14, -6, 8, 3, -5, 2, -3, -10
    0xe8e9ff0a, 0xfef5ffe7, 0xf716ebf2, 0xfee1401, 0x903fc0e, 0xfbf6fc17, 0x308faf2, 0xf6fd02fb,
    // 9, 10, -13, 7, 9, 1, 31, -14, -7, -5, 8, -10, -10, 13, 23, 29, -15, 34, 78, -18, 26, -25, -38, 89, 58, -62, 19, 48, 14, -35, 62, 13
    0x7f30a09, 0xf21f0109, 0xf608fbf9, 0x1d170df6, 0xee4e22f1, 0x59dae71a, 0x3013c23a, 0xd3edd0e,
    // 3, 10, -24, 0, -38, -10, -5, -17, -26, -28, -21, -8, 4, 15, 11, 14, 12, -12, -4, -14, -6, 5, -9, -9, 9, -9, -3, -1, -3, -6, 1, -6
    0xe80a03, 0xeffbf6da, 0xf8ebe4e6, 0xe0b0f04, 0xf2fcf40c, 0xf7f705fa, 0xfffdf709, 0xfa01fafd,
    // 14, -7, -18, -52, 6, 0, 1, -12, -28, -2, -27, 0, 8, 19, -24, 4, -5, -1, -8, -17, 8, 7, -16, 6, -18, -16, -4, 14, 0, 8, 3, -35
    0xcceef90e, 0xf4010006, 0xe5fee4, 0x4e81308, 0xeff8fffb, 0x6f00708, 0xefcf0ee, 0xdd030800,
    // 3, -8, 3, -34, 1, 4, 0, -27, -12, -28, 33, -8, -6, 24, 1, -3, 3, -5, 19, 4, 53, -12, -23, 3, -3, -22, 15, -16, -5, 0, -10, 13
    0xde03f803, 0xe5000401, 0xf821e4f4, 0xfd0118fa, 0x413fb03, 0x3e9f435, 0xf00feafd, 0xdf600fb,
    // 14, 11, 5, -8, -28, 7, 4, -1, -5, -3, -3, 0, 1, -9, -14, 7, 8, -9, 27, 5, -29, 8, -5, 3, 24, -9, -13, 1, 1, -5, -38, 9
    0xf8050b0e, 0xff0407e4, 0xfdfdfb, 0x7f2f701, 0x51bf708, 0x3fb08e3, 0x1f3f718, 0x9dafb01,
    // -67, 91, -20, 32, -36, -33, -32, -50, -8, -54, -14, 35, -14, -29, 15, 18, -7, -8, 36, -18, 57, 16, -7, 5, -13, -1, -4, 22, -10, 4, 2, 5
    0x20ec5bbd, 0xcee0dfdc, 0x23f2caf8, 0x120fe3f2, 0xee24f8f9, 0x5f91039, 0x16fcfff3, 0x50204f6,
    // 7, 6, 5, 16, 30, 3, 35, -8, -16, 16, 3, -4, -1, 7, 1, 7, -12, 3, 19, -11, -11, 25, -49, 14, 22, 0, 15, 0, -19, -12, 14, 4
    0x10050607, 0xf823031e, 0xfc0310f0, 0x70107ff, 0xf51303f4, 0xecf19f5, 0xf0016, 0x40ef4ed,
    // 15, 6, 10, 2, -2, 4, 29, 2, -7, 2, -14, -3, -7, -3, 7, 7, 17, 4, -6, -17, -27, 13, -8, -6, -5, -18, -1, -7, -1, 9, 18, 6
    0x20a060f, 0x21d04fe, 0xfdf202f9, 0x707fdf9, 0xeffa0411, 0xfaf80de5, 0xf9ffeefb, 0x61209ff,
    // 2, -7, 9, -16, -56, 11, 3, 4, 15, -2, -19, 9, -6, -6, -11, 5, 9, -2, 7, -1, 18, -8, -4, -10, -7, -9, 0, -10, 6, -1, -7, -4
    0xf009f902, 0x4030bc8, 0x9edfe0f, 0x5f5fafa, 0xff07fe09, 0xf6fcf812, 0xf600f7f9, 0xfcf9ff06,
    // 25, -5, -28, 9, 15, 2, 20, -10, 0, -22, -10, -12, -8, 12, 60, 18, -8, 23, 26, -42, 31, -32, -21, -36, 34, 62, 16, 34, 20, 9, -97, 23
    0x9e4fb19, 0xf614020f, 0xf4f6ea00, 0x123c0cf8, 0xd61a17f8, 0xdcebe01f, 0x22103e22, 0x179f0914,
    // -2, -4, 7, -7, 8, -7, -48, 23, 14, -14, 8, -9, -4, -3, 12, -5, 16, -1, -19, -7, 11, 4, 1, -4, 0, -7, -4, -11, 0, 14, -10, 0
    0xf907fcfe, 0x17d0f908, 0xf708f20e, 0xfb0cfdfc, 0xf9edff10, 0xfc01040b, 0xf5fcf900, 0xf60e00,
    // -6, -8, -10, 32, 39, 7, 20, -16, -28, -41, -10, -8, -11, 17, 39, 3, 8, -1, -3, 4, 24, 4, 12, -12, -19, 0, -3, -4, -4, -3, -2, 4
    0x20f6f8fa, 0xf0140727, 0xf8f6d7e4, 0x32711f5, 0x4fdff08, 0xf40c0418, 0xfcfd00ed, 0x4fefdfc,
    // -24, -9, -8, 5, 1, -4, 28, 2, -15, 3, 24, -16, 4, 18, 0, -11, -18, 12, 0, 14, 21, 1, 19, 14, -12, 22, 32, -32, 9, 25, 3, -21
    0x5f8f7e8, 0x21cfc01, 0xf01803f1, 0xf5001204, 0xe000cee, 0xe130115, 0xe02016f4, 0xeb031909,
    // -19, 0, 3, 9, 28, -16, 31, 12, -1, 14, 10, 11, -3, 13, -4, -9, -7, 15, -22, 11, 45, 8, 47, 1, 17, 34, 25, -21, -1, -7, 14, -1
    0x90300ed, 0xc1ff01c, 0xb0a0eff, 0xf7fc0dfd, 0xbea0ff9, 0x12f082d, 0xeb192211, 0xff0ef9ff,
    // -18, 15, -1, -66, -69, -24, -7, 48, 13, 61, 2, 44, -18, 62, -92, -37, -15, 8, 4, -8, 11, 17, 52, -2, -31, 13, 3, -1, -3, 19, 30, -20
    0xbeff0fee, 0x30f9e8bb, 0x2c023d0d, 0xdba43eee, 0xf80408f1, 0xfe34110b, 0xff030de1, 0xec1e13fd,
    // -16, 7, 9, 13, -15, 0, 17, 25, 17, 24, 6, 0, 4, -11, -22, -4, -6, -4, -8, -12, 36, 30, 53, -5, -24, 9, -17, -12, -13, 37, 28, 4
    0xd0907f0, 0x191100f1, 0x61811, 0xfceaf504, 0xf4f8fcfa, 0xfb351e24, 0xf4ef09e8, 0x41c25f3,
    // -15, 5, 5, 3, 0, -9, 24, 12, 1, 9, -13, 11, 0, -2, 7, -18, 4, 9, 2, -6, -10, -10, -9, -6, 11, 8, -28, -1, 6, -5, 6, 0
    0x30505f1, 0xc18f700, 0xbf30901, 0xee07fe00, 0xfa020904, 0xfaf7f6f6, 0xffe4080b, 0x6fb06,
    // -19, 13, 5, -4, -2, -1, -3, 2, 3, -18, -21, 8, -5, -9, -11, 19, -17, 3, -1, 3, 15, 2, -19, -4, -4, 6, -14, -3, -2, -22, -9, -15
    0xfc050ded, 0x2fdfffe, 0x8ebee03, 0x13f5f7fb, 0x3ff03ef, 0xfced020f, 0xfdf206fc, 0xf1f7eafe,
    // -24, 28, 10, 7, 15, 5, 0, -4, 4, 0, -12, 6, -5, -15, -22, 18, -32, 63, 8, -23, -54, 4, 19, 17, -70, 51, -40, -45, 8, 76, 10, 17
    0x70a1ce8, 0xfc00050f, 0x6f40004, 0x12eaf1fb, 0xe9083fe0, 0x111304ca, 0xd3d833ba, 0x110a4c08,
    // -33, 22, 19, 17, 39, -1, 29, 11, 41, 15, 0, 10, -2, -15, -26, 3, -9, 1, -1, 0, 14, 3, 11, -2, -4, 13, -14, -3, -3, -12, 10, -20
    0x111316df, 0xb1dff27, 0xa000f29, 0x3e6f1fe, 0xff01f7, 0xfe0b030e, 0xfdf20dfc, 0xec0af4fd,
    // -26, 42, 19, 54, 24, 3, 20, -6, -4, -3, 3, -2, -11, -26, 7, 6, -5, 13, 0, 11, 22, 8, 1, 3, 6, 8, -18, -11, -3, -23, -5, -6
    0x36132ae6, 0xfa140318, 0xfe03fdfc, 0x607e6f5, 0xb000dfb, 0x3010816, 0xf5ee0806, 0xfafbe9fd,
    // -11, -20, -13, -28, 8, 0, -44, 6, -21, -43, 13, -28, -3, -22, -27, 5, 12, 0, -8, 1, -2, -6, -49, 20, -33, -17, 13, -24, 7, -17, -8, 29
    0xe4f3ecf5, 0x6d40008, 0xe40dd5eb, 0x5e5eafd, 0x1f8000c, 0x14cffafe, 0xe80defdf, 0x1df8ef07,
    // 6, 0, -1, -9, 29, 3, -7, -1, -10, 4, 0, 5, -13, -16, 2, -1, -3, -1, 15, 10, -15, -20, -28, 25, 14, 23, 19, -7, 9, -32, -28, 18
    0xf7ff0006, 0xfff9031d, 0x50004f6, 0xff02f0f3, 0xa0ffffd, 0x19e4ecf1, 0xf913170e, 0x12e4e009,
    // 51, -5, -9, -40, 3, 40, 40, -47, -3, -37, -85, 47, 7, 41, -33, 14, 0, -5, 2, -19, -8, -7, -18, -2, 2, -29, -13, 13, 2, -15, 17, -3
    0xd8f7fb33, 0xd1282803, 0x2fabdbfd, 0xedf2907, 0xed02fb00, 0xfeeef9f8, 0xdf3e302, 0xfd11f102,
    // 7, 7, 9, 0, -13, 5, -20, -5, 13, 4, 10, 2, -8, -32, -14, -11, -9, 4, 24, 23, -29, -13, -28, -18, -7, -25, 10, 14, 7, -20, 17, -2
    0x90707, 0xfbec05f3, 0x20a040d, 0xf5f2e0f8, 0x171804f7, 0xeee4f3e3, 0xe0ae7f9, 0xfe11ec07,
    // 6, 0, 7, -9, 4, 6, -1, -4, -4, 2, -11, 8, -6, -15, 4, -17, 10, 9, 17, 37, -1, 8, 22, -12, 20, 23, -15, 14, -5, -29, 6, 12
    0xf7070006, 0xfcff0604, 0x8f502fc, 0xef04f1fa, 0x2511090a, 0xf41608ff, 0xef11714, 0xc06e3fb,
    // -1, 3, -3, -4, -35, 14, -16, -27, 3, -39, -1, 10, 2, -8, -30, -5, 6, -4, 6, 5, 17, 3, -16, -15, 0, -13, -2, 4, -9, -9, 7, 9
    0xfcfd03ff, 0xe5f00edd, 0xaffd903, 0xfbe2f802, 0x506fc06, 0xf1f00311, 0x4fef300, 0x907f7f7,
    // -8, 4, -8, 11, 22, 7, 4, -41, -14, -57, -16, 19, -6, -25, -2, 14, 18, -28, 1, -102, -4, -19, -128, 46, -13, 40, 5, -43, 1, 51, 13, 14
    0xbf804f8, 0xd7040716, 0x13f0c7f2, 0xefee7fa, 0x9a01e412, 0x2e80edfc, 0xd50528f3, 0xe0d3301,
    // 8, 12, 19, 3, -11, -8, 9, -7, 26, -5, 9, 21, 5, -41, -18, 17, 1, -9, 11, -8, -5, 12, 13, -4, 9, 1, -5, 8, -7, -8, 6, 0
    0x3130c08, 0xf909f8f5, 0x1509fb1a, 0x11eed705, 0xf80bf701, 0xfc0d0cfb, 0x8fb0109, 0x6f8f9,
    // 15, 0, 7, 22, -16, -6, 9, -11, -9, -10, 6, 3, 5, -12, 14, 21, 3, -1, 5, 9, 10, 6, 1, -6, 10, 1, -7, 1, -3, -2, 7, 9
    0x1607000f, 0xf509faf0, 0x306f6f7, 0x150ef405, 0x905ff03, 0xfa01060a, 0x1f9010a, 0x907fefd,
};
static const uint embedded_encoder2_ResidualBlock_1_body_conv_dw_bias_dwords[8] = {
    // -0.04633, -0.00947, -0.00556, -0.0169, 0.02457, 0.00396, -0.0267, 0.0168, 0.0266, -0.02512, 0.01471, -0.01005, 0.01608, 0.03802, -0.0001748, -0.03006
    0xa0d9a9ee, 0xa4549db2, 0x1c0e264a, 0x244da6d6, 0xa66e26cf, 0xa1252388, 0x28de241e, 0xa7b289ba,
};
static const uint embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -17, -29, -45, 14, -68, -3, -7, 25, 59, -1, -35, -10, -37, -17, -31, 17, -25, 76, 19, -50, 16, 36, -10, -78, 44, 1, -9, -70, -69, 9, -54, -8
    0xed3e3ef, 0x19f9fdbc, 0xf6ddff3b, 0x11e1efdb, 0xce134ce7, 0xb2f62410, 0xbaf7012c, 0xf8ca09bb,
    // 2, 23, -39, 3, -49, 12, -58, -88, -63, 70, -27, 30, 94, -23, -48, 23, 17, 46, 11, -12, -34, 0, -1, 40, -9, -62, -14, 9, -4, 32, 71, 15
    0x3d91702, 0xa8c60ccf, 0x1ee546c1, 0x17d0e95e, 0xf40b2e11, 0x28ff00de, 0x9f2c2f7, 0xf4720fc,
    // -15, 18, -46, -6, -39, 2, -44, -87, -15, 46, -7, 8, 76, -24, -22, 30, -21, 92, 6, 53, 46, -12, -11, 10, 12, 25, -8, -22, -26, -12, -20, -38
    0xfad212f1, 0xa9d402d9, 0x8f92ef1, 0x1eeae84c, 0x35065ceb, 0xaf5f42e, 0xeaf8190c, 0xdaecf4e6,
    // -16, -25, 38, -15, 17, 28, -29, 83, 70, -32, -11, -74, -28, -39, 70, -16, 5, -21, -15, -7, 23, 61, -3, 16, -60, -11, -51, -20, 9, 42, 17, 8
    0xf126e7f0, 0x53e31c11, 0xb6f5e046, 0xf046d9e4, 0xf9f1eb05, 0x10fd3d17, 0xeccdf5c4, 0x8112a09,
    // 41, 6, 35, -30, 58, 15, 9, 13, -70, 52, 23, -14, 38, -25, 19, 16, 75, -3, -57, -13, 24, 10, 26, 2, 5, -29, 69, -98, -90, -1, -53, -61
    0xe2230629, 0xd090f3a, 0xf21734ba, 0x1013e726, 0xf3c7fd4b, 0x21a0a18, 0x9e45e305, 0xc3cbffa6,
    // -1, 37, 39, 14, 82, 21, 29, -48, -27, 10, 71, 5, 68, 28, 54, -48, -40, -17, 52, 11, 14, -8, -5, 3, -36, -79, -4, 15, -19, -2, -87, 2
    0xe2725ff, 0xd01d1552, 0x5470ae5, 0xd0361c44, 0xb34efd8, 0x3fbf80e, 0xffcb1dc, 0x2a9feed,
    // -24, -47, 0, -9, 79, 24, 1, -60, 39, 68, 5, 2, -34, -57, -67, -38, -14, 14, -4, -2, -21, 23, 75, 0, -58, 25, 0, -14, -11, 13, 84, -46
    0xf700d1e8, 0xc401184f, 0x2054427, 0xdabdc7de, 0xfefc0ef2, 0x4b17eb, 0xf20019c6, 0xd2540df5,
    // 17, 9, -25, 13, 67, -2, -53, 38, 69, 2, 36, 1, 38, 36, -9, 20, -27, 77, 16, 26, 21, -22, 35, 28, -49, 45, 18, -41, -10, -77, -12, 39
    0xde70911, 0x26cbfe43, 0x1240245, 0x14f72426, 0x1a104de5, 0x1c23ea15, 0xd7122dcf, 0x27f4b3f6,
    // -14, 57, -37, 122, -20, 92, -12, 6, 40, -46, 12, 60, 57, -20, -13, -2, -15, -17, 40, 39, -25, 15, 58, -81, 31, -13, 78, -90, 59, 47, -9, 75
    0x7adb39f2, 0x6f45cec, 0x3c0cd228, 0xfef3ec39, 0x2728eff1, 0xaf3a0fe7, 0xa64ef31f, 0x4bf72f3b,
    // 41, 99, 0, 18, 27, 30, -31, -56, -4, -90, -92, -62, 5, -31, 25, 10, -18, 25, -10, 1, 84, 70, -12, -8, 2, 17, 33, 8, 40, 3, -3, 1
    0x12006329, 0xc8e11e1b, 0xc2a4a6fc, 0xa19e105, 0x1f619ee, 0xf8f44654, 0x8211102, 0x1fd0328,
    // 16, 32, -29, -27, -4, -8, 87, 65, 56, 8, -65, -11, 78, -2, -52, -77, -65, 94, -20, 8, -67, 84, -50, 12, 45, 9, 48, -13, -9, 19, -23, -43
    0xe5e32010, 0x4157f8fc, 0xf5bf0838, 0xb3ccfe4e, 0x8ec5ebf, 0xcce54bd, 0xf330092d, 0xd5e913f7,
    // -27, -10, -13, 23, 27, 8, -66, -24, -46, 19, 35, 32, -79, 6, 52, 32, -14, 56, -23, -3, -2, 99, 31, 25, 49, 22, 45, 36, -23, 20, -13, 45
    0x17f3f6e5, 0xe8be081b, 0x202313d2, 0x203406b1, 0xfde938f2, 0x191f63fe, 0x242d1631, 0x2df314e9,
    // -61, 23, -35, 40, 24, 27, 14, -17, 10, -28, 19, -27, 11, -74, 36, -20, -50, 20, -80, -8, 50, -4, 33, 77, -80, 0, -66, -65, -18, 4, -44, 127
    0x28dd17c3, 0xef0e1b18, 0xe513e40a, 0xec24b60b, 0xf8b014ce, 0x4d21fc32, 0xbfbe00b0, 0x7fd404ee,
    // 23, 0, -12, -25, 46, -68, 11, -58, -8, -43, -38, -29, 0, -42, 9, 15, -54, 28, 11, 78, -81, 13, 49, -21, -10, 27, 10, -33, -27, 52, 1, -31
    0xe7f40017, 0xc60bbc2e, 0xe3dad5f8, 0xf09d600, 0x4e0b1cca, 0xeb310daf, 0xdf0a1bf6, 0xe10134e5,
    // 31, 65, -46, -17, -36, -21, 52, -88, -38, 13, 15, 88, 8, -5, -63, 65, 50, -15, 93, -9, -76, 32, -26, -77, 72, -38, 85, 72, 27, -62, 25, -107
    0xefd2411f, 0xa834ebdc, 0x580f0dda, 0x41c1fb08, 0xf75df132, 0xb3e620b4, 0x4855da48, 0x9519c21b,
    // 9, -4, -6, -8, 1, 115, -2, -9, 22, -46, 3, 18, 13, 13, -10, 30, 4, -30, 73, 23, 72, 12, 70, -8, 79, 42, -57, 82, -31, -29, 26, 66
    0xf8fafc09, 0xf7fe7301, 0x1203d216, 0x1ef60d0d, 0x1749e204, 0xf8460c48, 0x52c72a4f, 0x421ae3e1,
};
static const uint embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords[16] = {
    // 0.002148, 0.0965, 0.0621, 0.02434, -0.08875, -0.00839, 0.0615, 0.099, -0.0405, -0.01808, 0.0898, -0.003479, 0.1136, -0.01355, 0.0709, -0.1296
    0x2e2d1866, 0x263b2bf3, 0xa04cadae, 0x2e562bdf, 0xa4a1a92f, 0x9b202dbf, 0xa2f02f45, 0xb0262c8a,
    // 0.055, 0.01822, 0.0435, 0.02272, -0.0636, 0.02774, 0.04257, -0.01897, 0.002844, -0.06177, -0.2957, 0.04578, 0.1499, -0.1003, -0.01295, 0.006847
    0x24aa2b0a, 0x25d12991, 0x271aac12, 0xa4db2973, 0xabe819d3, 0x29dcb4bb, 0xae6b30cc, 0x1f03a2a1,
};
static const uint embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -8, -19, -32, -23, 10, 22, 4, -53, 21, -32, -41, -39, 7, -20, 17, 31, -6, 20, 11, -37, 6, -44, -17, -20, 22, 89, -63, 11, -14, 94, -23, -19
    0xe9e0edf8, 0xcb04160a, 0xd9d7e015, 0x1f11ec07, 0xdb0b14fa, 0xecefd406, 0xbc15916, 0xede95ef2,
    // -46, 41, -1, 55, 69, -24, 26, 17, -69, 46, -31, -85, 6, -49, -58, -24, -38, 29, -61, 4, 19, 21, 19, 49, -49, 109, 27, 39, 9, 42, 62, 42
    0x37ff29d2, 0x111ae845, 0xabe12ebb, 0xe8c6cf06, 0x4c31dda, 0x31131513, 0x271b6dcf, 0x2a3e2a09,
    // -4, -15, -27, 11, 48, 76, 7, -1, 50, 22, 8, 29, -5, 37, -68, -76, 12, -2, 18, -54, 86, 8, 71, -5, -14, 32, -2, 81, 22, 72, -46, 10
    0xbe5f1fc, 0xff074c30, 0x1d081632, 0xb4bc25fb, 0xca12fe0c, 0xfb470856, 0x51fe20f2, 0xad24816,
    // 66, 70, 17, -7, 19, -65, -45, 15, 49, 17, -6, 71, 1, 83, 29, -39, -25, -20, 2, -12, 3, 21, 5, -20, -20, 27, -16, -10, 36, 11, -63, 29
    0xf9114642, 0xfd3bf13, 0x47fa1131, 0xd91d5301, 0xf402ece7, 0xec051503, 0xf6f01bec, 0x1dc10b24,
    // -53, -70, -11, 25, 61, 24, -35, 23, -45, 16, 42, -41, -5, 5, -67, -30, 36, 31, -9, 9, 2, -93, 4, 55, -37, 39, 3, 23, 12, 52, -33, 24
    0x19f5bacb, 0x17dd183d, 0xd72a10d3, 0xe2bd05fb, 0x9f71f24, 0x3704a302, 0x170327db, 0x18df340c,
    // 26, -8, -53, -13, 85, 8, 81, 51, -7, 7, -6, 21, -1, 11, -48, -59, 13, -1, 57, -6, 59, 25, 51, -16, 1, 28, -34, -1, -87, 59, 67, -4
    0xf3cbf81a, 0x33510855, 0x15fa07f9, 0xc5d00bff, 0xfa39ff0d, 0xf033193b, 0xffde1c01, 0xfc433ba9,
    // 4, -26, 59, 41, 14, 58, 18, -5, -15, 97, 49, 18, 4, 8, -2, 1, -15, -16, 33, 27, -45, -18, -14, -28, 41, 54, 15, -9, -7, 18, 22, 81
    0x293be604, 0xfb123a0e, 0x123161f1, 0x1fe0804, 0x1b21f0f1, 0xe4f2eed3, 0xf70f3629, 0x511612f9,
    // 10, 2, 10, 27, -19, -18, 52, 33, 3, 43, 41, 36, -11, 34, 41, -73, -38, -43, 1, 1, -53, 40, -22, -38, 66, -103, 19, -10, -38, -38, -72, 22
    0x1b0a020a, 0x2134eeed, 0x24292b03, 0xb72922f5, 0x101d5da, 0xdaea28cb, 0xf6139942, 0x16b8dada,
    // 67, -73, 0, -70, -14, -18, -4, -20, 43, -20, -31, 38, 50, 41, -21, -31, 44, 19, -99, 18, 14, -79, 16, -15, 43, 9, 12, 14, -6, -25, -82, 3
    0xba00b743, 0xecfceef2, 0x26e1ec2b, 0xe1eb2932, 0x129d132c, 0xf110b10e, 0xe0c092b, 0x3aee7fa,
    // 15, -12, 1, 17, 23, -91, 8, 17, 46, 36, 0, 34, 1, 25, -5, 37, -14, 1, -7, 47, 17, -70, 43, -2, -12, -9, -31, -4, -10, -10, 114, 38
    0x1101f40f, 0x1108a517, 0x2200242e, 0x25fb1901, 0x2ff901f2, 0xfe2bba11, 0xfce1f7f4, 0x2672f6f6,
    // 21, 44, 93, -13, -74, 45, -23, -42, 17, 47, -82, -35, 58, -15, 67, -5, 23, -88, -48, -16, 42, 14, 78, -55, -12, 6, -47, -55, 30, -21, -21, 53
    0xf35d2c15, 0xd6e92db6, 0xddae2f11, 0xfb43f13a, 0xf0d0a817, 0xc94e0e2a, 0xc9d106f4, 0x35ebeb1e,
    // -19, -26, 11, 68, -48, 40, -28, -15, -33, -14, 64, 24, -78, 16, 33, -31, 19, 9, 34, 25, 6, -14, 16, 7, -4, 14, 19, -35, 11, 5, -40, -6
    0x440be6ed, 0xf1e428d0, 0x1840f2df, 0xe12110b2, 0x19220913, 0x710f206, 0xdd130efc, 0xfad8050b,
    // -48, 13, -16, 4, -1, 43, -10, 1, -15, -22, 0, -53, 1, -12, -52, 7, -5, -69, -16, -12, -31, 7, -29, 9, 12, 115, -11, -7, 15, 106, 37, -17
    0x4f00dd0, 0x1f62bff, 0xcb00eaf1, 0x7ccf401, 0xf4f0bbfb, 0x9e307e1, 0xf9f5730c, 0xef256a0f,
    // 50, -71, 15, 31, 11, 6, 15, -12, 20, 32, -41, 38, -6, 3, 45, 26, 64, 14, 20, -83, -58, 47, -32, 73, -42, -128, 49, 13, -15, -84, 35, 22
    0x1f0fb932, 0xf40f060b, 0x26d72014, 0x1a2d03fa, 0xad140e40, 0x49e02fc6, 0xd3180d6, 0x1623acf1,
    // 25, 77, -34, -5, 60, 49, 35, -61, 24, 0, -1, 34, 0, 22, 5, 7, -121, 30, -92, 29, -25, -28, -11, 98, -73, -75, 8, 2, -42, -3, -28, 8
    0xfbde4d19, 0xc323313c, 0x22ff0018, 0x7051600, 0x1da41e87, 0x62f5e4e7, 0x208b5b7, 0x8e4fdd6,
    // 3, 1, 21, -27, -57, -33, -8, 11, -3, -30, -12, -3, 8, 17, 32, 38, 12, 1, -14, 29, 31, 4, 9, 64, -16, 71, 67, -38, 0, 60, 60, -20
    0xe5150103, 0xbf8dfc7, 0xfdf4e2fd, 0x26201108, 0x1df2010c, 0x4009041f, 0xda4347f0, 0xec3c3c00,
};
static const uint embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords[8] = {
    // 0.006725, -0.05948, -0.0886, -0.05942, 0.04855, 0.02554, -0.1153, -0.0335, 0.0726, -0.03177, -0.0785, 0.0729, 0.000501, -0.03168, 0.0866, -0.02888
    0xab9d1ee3, 0xab9badac, 0x268a2a37, 0xa84aaf61, 0xa8112ca5, 0x2caaad06, 0xa80e101b, 0xa7652d8b,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass2(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 16), // threadGroupSliceSize
        uint3(1920, 1080, 16), // storageSize
        uint3(16, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        33177600, // threadGroupStorageByteOffset
        0.01933070458471775, storage_fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005748785100877285, storage_embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_1_body_conv_dw_bias = { embedded_encoder2_ResidualBlock_1_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_1_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_1_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005573894362896681, storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias = { embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005647121462970972, storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias = { embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias };
    
    // fused_quantized_NHWC_/encoder2/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_4 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_4 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 16);
    const uint3 groupSize_slice_4 = uint3(64, 1, 16);
    const uint3 storageSize_slice_4 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_4 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_4 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_4 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_4 = dot(groupStart_slice_4, tensorByteStrides_slice_4);
    const float quantizationScale_slice_4 = 0.02335178479552269;
    const RWBufferStorage storage_slice_4 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_4 = { logicalSize_slice_4, groupStart_slice_4, groupSize_slice_4, storageSize_slice_4, tensorByteStrides_slice_4, paddingBegin_slice_4, paddingEnd_slice_4, threadGroupByteOffsetInTensor_slice_4 + 0, quantizationScale_slice_4, storage_slice_4 };
    // ConvNextBlock (16, 1080, 1920), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,) -> (16, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    ConvNextBlock(29.379312231835634, 0.03403755649924278, 52.675386653772975, 0.018984198570251465, fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_1_body_conv_dw_bias, embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias, embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias, slice_4, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_2
#ifdef MLSR_PASS_2_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass2_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/encoder2/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_5 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_5 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_5 = uint3(32, 1, 16);
    const uint3 storageSize_slice_5 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_5 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_5 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_5 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_5 = dot(groupStart_slice_5, tensorByteStrides_slice_5);
    const float quantizationScale_slice_5 = 0.02335178479552269;
    const RWBufferStorage storage_slice_5 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_5 = { logicalSize_slice_5, groupStart_slice_5, groupSize_slice_5, storageSize_slice_5, tensorByteStrides_slice_5, paddingBegin_slice_5, paddingEnd_slice_5, threadGroupByteOffsetInTensor_slice_5 + 0, quantizationScale_slice_5, storage_slice_5 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_5, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_2_POST


#ifdef MLSR_PASS_3
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FusedConv2D_k2s2b_QuantizedOutput.hlsli"

static const uint embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 19, -3, 8, 19, -55, 14, 10, -27, 33, 5, 13, 36, -2, -12, -21, 18, 0, -12, 27, 16, -41, -15, 21, -29, 32, -4, 14, 29, 17, 6, -4, -7
    0x1308fd13, 0xe50a0ec9, 0x240d0521, 0x12ebf4fe, 0x101bf400, 0xe315f1d7, 0x1d0efc20, 0xf9fc0611,
    // 32, 27, 8, 22, -43, 19, 14, -11, 45, 31, -2, 18, -7, -22, 9, 73, 16, 7, 12, -14, -38, 33, 12, 40, 25, 48, -4, -25, 5, -24, 4, 3
    0x16081b20, 0xf50e13d5, 0x12fe1f2d, 0x4909eaf9, 0xf20c0710, 0x280c21da, 0xe7fc3019, 0x304e805,
    // 33, 4, 18, -29, -21, 4, -28, 48, 21, 13, 12, 28, -21, -42, 2, 3, 23, -1, 19, 8, -8, -21, -16, -5, 2, 0, 7, 20, -3, -30, 0, 25
    0xe3120421, 0x30e404eb, 0x1c0c0d15, 0x302d6eb, 0x813ff17, 0xfbf0ebf8, 0x14070002, 0x1900e2fd,
    // 15, -2, 5, -47, -17, 54, -28, 49, 21, 37, -6, -12, 6, -18, -16, -7, 22, -10, 24, -13, -18, 8, -35, -2, -6, 35, 1, 0, 18, -7, -13, 2
    0xd105fe0f, 0x31e436ef, 0xf4fa2515, 0xf9f0ee06, 0xf318f616, 0xfedd08ee, 0x123fa, 0x2f3f912,
    // -18, 8, 4, -1, 45, -22, -16, -8, -8, 9, -7, 6, 6, 5, -7, 41, -21, 16, -2, 3, 35, -15, -11, -22, -49, 26, -15, 39, -11, -4, -23, 26
    0xff0408ee, 0xf8f0ea2d, 0x6f909f8, 0x29f90506, 0x3fe10eb, 0xeaf5f123, 0x27f11acf, 0x1ae9fcf5,
    // 53, -13, 32, 26, 21, 14, 13, -9, 19, -18, 31, -25, -2, -13, 24, -7, 25, 4, -3, 32, 28, 31, 7, 6, -19, -26, 7, -30, 1, -51, 4, -30
    0x1a20f335, 0xf70d0e15, 0xe71fee13, 0xf918f3fe, 0x20fd0419, 0x6071f1c, 0xe207e6ed, 0xe204cd01,
    // -32, -19, 5, -42, -38, 12, 16, 26, 29, -37, -19, -36, 40, 24, 2, 1, -24, -15, 9, 7, -13, -25, 16, -16, 2, -48, -4, 17, 16, 23, 10, 13
    0xd605ede0, 0x1a100cda, 0xdceddb1d, 0x1021828, 0x709f1e8, 0xf010e7f3, 0x11fcd002, 0xd0a1710,
    // -2, -3, -4, -53, -17, 23, 23, 56, 29, -37, -21, -30, -8, 8, -4, -31, -11, -7, -4, -30, -13, 11, 19, 49, 5, -47, -1, -7, -18, -10, -4, -39
    0xcbfcfdfe, 0x381717ef, 0xe2ebdb1d, 0xe1fc08f8, 0xe2fcf9f5, 0x31130bf3, 0xf9ffd105, 0xd9fcf6ee,
    // 44, -13, -2, 21, 19, -11, 16, 26, 0, -31, 10, 31, -27, -9, 12, -7, 46, -1, -5, 19, 0, 27, 20, 43, 34, -33, 4, 14, -22, -18, -4, 2
    0x15fef32c, 0x1a10f513, 0x1f0ae100, 0xf90cf7e5, 0x13fbff2e, 0x2b141b00, 0xe04df22, 0x2fceeea,
    // 28, -3, -10, 25, -6, 9, 20, 37, 9, 2, 16, 17, -12, -7, 5, 3, 32, 7, -13, 19, -19, 34, 19, 35, 35, -6, 8, 3, -5, -14, 3, 5
    0x19f6fd1c, 0x251409fa, 0x11100209, 0x305f9f4, 0x13f30720, 0x231322ed, 0x308fa23, 0x503f2fb,
    // 31, -4, -3, -23, -7, 33, -9, 7, 6, 7, -24, -24, 2, -17, -20, 23, 51, 4, -10, 2, -12, 26, -7, 13, -6, 10, -2, 27, -20, -30, -26, -13
    0xe9fdfc1f, 0x7f721f9, 0xe8e80706, 0x17ecef02, 0x2f60433, 0xdf91af4, 0x1bfe0afa, 0xf3e6e2ec,
    // 55, -13, 12, -15, -3, 11, -25, 1, 4, -30, -12, 40, -11, -1, 13, 23, 66, -3, 15, 12, -5, -7, -29, 1, 5, -29, 2, 80, -19, -7, -7, 16
    0xf10cf337, 0x1e70bfd, 0x28f4e204, 0x170dfff5, 0xc0ffd42, 0x1e3f9fb, 0x5002e305, 0x10f9f9ed,
    // 10, -5, 35, -21, -2, -3, 3, 26, -7, 26, -21, -1, 3, -12, -29, -9, 24, 2, 25, -12, 6, -17, -1, 31, 7, 16, -5, 26, -13, -19, -26, 15
    0xeb23fb0a, 0x1a03fdfe, 0xffeb1af9, 0xf7e3f403, 0xf4190218, 0x1fffef06, 0x1afb1007, 0xfe6edf3,
    // -17, 12, 15, -34, 0, 8, -3, 32, -22, 11, -5, -24, -1, 12, 15, -43, -1, 21, 14, -32, 2, -10, 1, 28, -11, 27, 12, 15, -10, 19, 4, -31
    0xde0f0cef, 0x20fd0800, 0xe8fb0bea, 0xd50f0cff, 0xe00e15ff, 0x1c01f602, 0xf0c1bf5, 0xe10413f6,
    // -2, -1, 7, 44, 62, -9, -3, -61, -45, -12, -4, -33, 8, -19, 20, 16, 9, -7, 9, 48, 52, -43, 3, -65, -36, -43, 2, 30, -19, 1, 19, 22
    0x2c07fffe, 0xc3fdf73e, 0xdffcf4d3, 0x1014ed08, 0x3009f909, 0xbf03d534, 0x1e02d5dc, 0x161301ed,
    // 7, 17, -19, 6, 15, 42, 23, -11, -14, -6, -33, -55, 5, -23, 5, 33, 6, 16, 7, 17, -8, -2, 6, -44, -16, -14, -3, 28, -12, 4, 16, 36
    0x6ed1107, 0xf5172a0f, 0xc9dffaf2, 0x2105e905, 0x11071006, 0xd406fef8, 0x1cfdf2f0, 0x241004f4,
    // 3, 24, 13, 1, -12, -24, 6, -32, 18, 19, 7, -20, 15, 14, 9, 20, 39, 27, 6, 1, -39, 23, 9, 6, 1, 1, -12, 19, -11, -29, -1, 4
    0x10d1803, 0xe006e8f4, 0xec071312, 0x14090e0f, 0x1061b27, 0x60917d9, 0x13f40101, 0x4ffe3f5,
    // -33, 9, -9, -29, -17, -8, -7, 3, 24, 21, 2, -11, 2, 31, -14, -20, 5, 12, 2, -28, -57, 7, -3, 19, 12, -9, -16, 33, -6, -4, -19, -24
    0xe3f709df, 0x3f9f8ef, 0xf5021518, 0xecf21f02, 0xe4020c05, 0x13fd07c7, 0x21f0f70c, 0xe8edfcfa,
    // 1, 19, -16, -27, -9, 22, -6, 23, -6, 17, -19, -26, 14, 13, 11, -2, -26, 7, -9, -42, -8, -28, -13, 6, -11, 17, 3, 17, -16, 34, 7, 15
    0xe5f01301, 0x17fa16f7, 0xe6ed11fa, 0xfe0b0d0e, 0xd6f707e6, 0x6f3e4f8, 0x110311f5, 0xf0722f0,
    // 11, -3, -9, -2, -2, 1, 7, 6, 3, -12, 4, 7, 3, -20, 8, 18, -14, -16, -15, -20, -14, -19, 4, 29, 16, -9, 24, 1, 1, 7, 25, 20
    0xfef7fd0b, 0x60701fe, 0x704f403, 0x1208ec03, 0xecf1f0f2, 0x1d04edf2, 0x118f710, 0x14190701,
    // -20, 29, 5, 33, -20, 1, 7, -43, -7, 34, 5, 2, -3, 10, 15, 17, -46, 25, -4, 26, -28, -24, 9, -59, 25, 49, 0, -24, 24, 38, -3, 44
    0x21051dec, 0xd50701ec, 0x20522f9, 0x110f0afd, 0x1afc19d2, 0xc509e8e4, 0xe8003119, 0x2cfd2618,
    // 40, -14, -4, 10, 0, 43, 45, -11, 11, -39, -11, 7, -15, -16, -16, -65, 19, -1, 9, 21, -17, 11, 18, -10, 40, -22, -5, 1, -5, -2, -8, -23
    0xafcf228, 0xf52d2b00, 0x7f5d90b, 0xbff0f0f1, 0x1509ff13, 0xf6120bef, 0x1fbea28, 0xe9f8fefb,
    // -15, -7, 27, -7, 21, -2, -25, -39, -13, -2, -28, -18, 15, -23, -20, 10, 15, 5, 14, -42, -1, 42, -22, 0, 36, 0, -33, -39, 8, -32, -15, 12
    0xf91bf9f1, 0xd9e7fe15, 0xeee4fef3, 0xaece90f, 0xd60e050f, 0xea2aff, 0xd9df0024, 0xcf1e008,
    // -24, 12, 48, -6, -27, -19, -14, -27, -6, 1, -5, -30, 14, -14, 13, 12, 13, 19, 32, -24, -29, 20, 1, -11, 43, -1, -13, -28, 3, -7, 18, 31
    0xfa300ce8, 0xe5f2ede5, 0xe2fb01fa, 0xc0df20e, 0xe820130d, 0xf50114e3, 0xe4f3ff2b, 0x1f12f903,
    // -18, -8, -32, 16, 11, -34, -15, -15, -25, -4, -4, 22, -3, 29, -5, -7, 21, 2, 3, 23, 12, -30, -17, -27, 6, 7, 3, 16, 3, -16, -24, 47
    0x10e0f8ee, 0xf1f1de0b, 0x16fcfce7, 0xf9fb1dfd, 0x17030215, 0xe5efe20c, 0x10030706, 0x2fe8f003,
    // -62, -28, -59, 1, 2, 5, -10, 8, -7, -21, 10, -10, 3, 35, 20, -51, 6, -15, -23, 4, 3, 21, -10, 17, 18, -23, 13, -25, 2, -10, 10, 1
    0x1c5e4c2, 0x8f60502, 0xf60aebf9, 0xcd142303, 0x4e9f106, 0x11f61503, 0xe70de912, 0x10af602,
    // 18, 1, 54, 7, -24, -14, 1, -27, 22, -34, 0, 19, 16, -22, 1, 29, 15, 4, 40, -4, -43, -17, -7, -7, 40, -21, -8, 20, 14, -20, -3, 40
    0x7360112, 0xe501f2e8, 0x1300de16, 0x1d01ea10, 0xfc28040f, 0xf9f9efd5, 0x14f8eb28, 0x28fdec0e,
    // 10, 2, 49, -2, -13, -27, 6, -6, 12, -36, -1, 13, -5, -48, -32, 17, 12, 0, 41, 1, -30, -29, 5, 10, 44, -32, -4, 27, -3, -42, -14, 37
    0xfe31020a, 0xfa06e5f3, 0xdffdc0c, 0x11e0d0fb, 0x129000c, 0xa05e3e2, 0x1bfce02c, 0x25f2d6fd,
    // -19, -18, -10, -17, 2, -53, -18, -3, -8, -22, 1, 38, -13, 33, -7, -9, -22, -18, -19, -42, -40, -16, -30, 45, 26, -9, -8, 10, 0, 33, -4, -44
    0xeff6eeed, 0xfdeecb02, 0x2601eaf8, 0xf7f921f3, 0xd6edeeea, 0x2de2f0d8, 0xaf8f71a, 0xd4fc2100,
    // 35, 10, -13, 4, -25, 28, -11, 1, 18, -2, -9, -15, 14, 9, 6, -5, 8, 13, -18, -26, -43, 29, -36, 21, 23, 5, -6, 12, 6, 44, 9, -40
    0x4f30a23, 0x1f51ce7, 0xf1f7fe12, 0xfb06090e, 0xe6ee0d08, 0x15dc1dd5, 0xcfa0517, 0xd8092c06,
    // -24, -1, 20, 26, 25, -55, 14, -29, -18, 33, 24, -15, 29, 1, 15, 36, 9, -12, 17, -6, 14, -11, 13, 9, -15, 8, 21, -8, -6, -18, 31, 38
    0x1a14ffe8, 0xe30ec919, 0xf11821ee, 0x240f011d, 0xfa11f409, 0x90df50e, 0xf81508f1, 0x261feefa,
    // 3, -10, 12, -53, 27, -8, -15, 40, -10, 3, -5, 16, -13, -17, -12, 26, 16, -21, -28, -52, 28, 53, 9, 68, 8, -36, -16, -2, -25, -48, -21, 5
    0xcb0cf603, 0x28f1f81b, 0x10fb03f6, 0x1af4eff3, 0xcce4eb10, 0x4409351c, 0xfef0dc08, 0x5ebd0e7,
    // -42, -21, 22, -18, -14, -26, -76, -29, -6, 27, -23, -35, 36, 14, 11, 80, 17, -38, 36, -7, 12, -5, 19, 12, -7, -30, 20, -15, 9, 30, 19, -21
    0xee16ebd6, 0xe3b4e6f2, 0xdde91bfa, 0x500b0e24, 0xf924da11, 0xc13fb0c, 0xf114e2f9, 0xeb131e09,
    // -22, -1, 14, -13, 4, -23, -50, -25, -14, 30, -18, -30, 7, 37, 1, 58, 45, -14, 42, -12, 11, -5, 27, 27, -16, -33, 12, -12, -23, 27, 15, -37
    0xf30effea, 0xe7cee904, 0xe2ee1ef2, 0x3a012507, 0xf42af22d, 0x1b1bfb0b, 0xf40cdff0, 0xdb0f1be9,
    // -16, 61, 22, 13, -6, 6, 26, 35, -19, 68, 18, 7, -32, 32, -19, 1, -4, 42, 31, 11, 13, 2, 73, 32, -15, 41, 36, -5, -25, 41, -23, -70
    0xd163df0, 0x231a06fa, 0x71244ed, 0x1ed20e0, 0xb1f2afc, 0x2049020d, 0xfb2429f1, 0xbae929e7,
    // -39, -14, 19, 21, -12, 11, -47, 10, 22, -4, -18, 9, 16, -3, 9, 46, -12, -21, 22, 36, 24, -2, 14, 4, 13, -38, -2, -6, 16, 18, 14, -17
    0x1513f2d9, 0xad10bf4, 0x9eefc16, 0x2e09fd10, 0x2416ebf4, 0x40efe18, 0xfafeda0d, 0xef0e1210,
    // 50, -32, -17, 38, -4, -1, -6, 17, 43, -36, -45, -9, -13, -33, 1, 25, 75, -29, -4, 32, 8, 7, 2, 49, 36, -55, -24, 0, -24, -27, 1, 10
    0x26efe032, 0x11fafffc, 0xf7d3dc2b, 0x1901dff3, 0x20fce34b, 0x31020708, 0xe8c924, 0xa01e5e8,
    // 25, -46, -25, 51, 3, -16, -33, -9, 36, -50, -52, -4, 3, 7, 27, 46, 45, -34, -17, 43, 7, -2, -28, 24, 32, -60, -39, -9, -7, -10, 15, 27
    0x33e7d219, 0xf7dff003, 0xfcccce24, 0x2e1b0703, 0x2befde2d, 0x18e4fe07, 0xf7d9c420, 0x1b0ff6f9,
    // -1, 74, -38, -58, -12, -3, 7, 10, -24, 34, -8, -3, -2, 13, -31, 37, 27, 43, -29, -42, -25, -11, 11, 0, -14, 5, -7, -8, 9, -4, -28, 41
    0xc6da4aff, 0xa07fdf4, 0xfdf822e8, 0x25e10dfe, 0xd6e32b1b, 0xbf5e7, 0xf8f905f2, 0x29e4fc09,
    // -6, 26, -27, -27, -5, -1, -48, -24, -9, 11, -18, -21, 19, -2, -15, 50, 23, 18, -20, -10, -13, -11, -40, -27, -1, -17, -12, -17, 26, -3, -20, 63
    0xe5e51afa, 0xe8d0fffb, 0xebee0bf7, 0x32f1fe13, 0xf6ec1217, 0xe5d8f5f3, 0xeff4efff, 0x3fecfd1a,
    // 110, 37, -14, -2, 32, -21, 14, -6, -29, -33, -1, 17, -14, -23, -20, -5, 103, 39, -5, -11, 22, -16, 11, -17, -7, -30, 0, 11, -7, -25, -16, 3
    0xfef2256e, 0xfa0eeb20, 0x11ffdfe3, 0xfbece9f2, 0xf5fb2767, 0xef0bf016, 0xb00e2f9, 0x3f0e7f9,
    // 68, -4, 2, -24, -19, 11, -6, -24, -7, -20, 13, 12, 47, -33, 12, 2, 72, -5, 16, -39, -26, 7, -7, -40, 7, -14, 26, 27, 52, -14, 16, 5
    0xe802fc44, 0xe8fa0bed, 0xc0decf9, 0x20cdf2f, 0xd910fb48, 0xd8f907e6, 0x1b1af207, 0x510f234,
    // -18, 24, -23, 5, -12, -24, -28, 0, 5, 8, -49, 40, -20, -12, 7, 68, -32, 17, -37, 11, -3, -12, -27, -15, -1, -4, -37, 0, -6, -5, -4, 35
    0x5e918ee, 0xe4e8f4, 0x28cf0805, 0x4407f4ec, 0xbdb11e0, 0xf1e5f4fd, 0xdbfcff, 0x23fcfbfa,
    // -12, 33, -35, 2, -17, -9, -18, 20, 11, 36, -45, 36, -14, -6, -10, 78, -19, 28, -38, 17, -16, -11, -22, 0, 6, 40, -30, 13, -3, -6, -21, 48
    0x2dd21f4, 0x14eef7ef, 0x24d3240b, 0x4ef6faf2, 0x11da1ced, 0xeaf5f0, 0xde22806, 0x30ebfafd,
    // 14, -17, 20, -11, 7, 31, 33, -26, 20, -35, 8, -13, 2, -7, -4, -71, 23, -22, 29, 38, -2, -8, 51, -23, 35, -87, 22, 53, -14, -36, -13, -54
    0xf514ef0e, 0xe6211f07, 0xf308dd14, 0xb9fcf902, 0x261dea17, 0xe933f8fe, 0x3516a923, 0xcaf3dcf2,
    // -48, 26, -35, -4, 23, 6, -30, -34, -10, 72, -31, -24, 14, 11, 25, 48, -15, 12, 8, -10, -13, -10, -10, -21, -4, 37, -5, 11, -2, -4, 0, 59
    0xfcdd1ad0, 0xdee20617, 0xe8e148f6, 0x30190b0e, 0xf6080cf1, 0xebf6f6f3, 0xbfb25fc, 0x3b00fcfe,
    // -14, -17, 11, -29, 14, -9, -19, 23, -16, -42, 17, 3, -42, 6, 0, -1, -15, -27, 14, -28, 10, -12, -30, -9, -5, -66, 7, 9, -35, -2, 7, -15
    0xe30beff2, 0x17edf70e, 0x311d6f0, 0xff0006d6, 0xe40ee5f1, 0xf7e2f40a, 0x907befb, 0xf107fedd,
    // -25, -33, 21, -23, -29, -8, -49, -11, 12, -50, 8, 11, -5, 2, 13, -2, -22, -36, 15, -13, -25, -16, -53, -23, 30, -80, -1, 16, 2, -8, 19, -17
    0xe915dfe7, 0xf5cff8e3, 0xb08ce0c, 0xfe0d02fb, 0xf30fdcea, 0xe9cbf0e7, 0x10ffb01e, 0xef13f802,
    // -19, 26, -10, -19, -12, -20, 50, -9, 10, -47, 0, 37, 5, 2, -13, -47, -25, 30, -23, -14, 3, 2, 82, 32, 9, -33, 20, 28, -14, -11, -20, -71
    0xedf61aed, 0xf732ecf4, 0x2500d10a, 0xd1f30205, 0xf2e91ee7, 0x20520203, 0x1c14df09, 0xb9ecf5f2,
    // -30, 23, -13, -16, -11, -8, 42, 22, 18, -41, 5, 31, 3, -21, -18, -36, -30, 27, -16, -21, -1, 13, 66, 57, 11, -38, 25, 17, -8, -27, -23, -43
    0xf0f317e2, 0x162af8f5, 0x1f05d712, 0xdceeeb03, 0xebf01be2, 0x39420dff, 0x1119da0b, 0xd5e9e5f8,
    // -8, 31, 30, 5, -1, 4, 60, 66, 12, -16, 6, -19, -13, 41, 1, 40, -4, 17, 22, 25, 8, -3, 42, 31, 15, -56, -2, -12, 2, 34, -6, 43
    0x51e1ff8, 0x423c04ff, 0xed06f00c, 0x280129f3, 0x191611fc, 0x1f2afd08, 0xf4fec80f, 0x2bfa2202,
    // -9, 64, 11, 9, -4, -12, 54, 37, -5, 37, -6, -20, -4, 59, -16, 49, -8, 51, 15, 22, 1, -23, 35, 14, 1, 5, -12, -14, 9, 56, -8, 58
    0x90b40f7, 0x2536f4fc, 0xecfa25fb, 0x31f03bfc, 0x160f33f8, 0xe23e901, 0xf2f40501, 0x3af83809,
    // -22, 51, 6, -41, 6, -4, 22, -8, -8, -44, -4, -33, -28, -16, -31, 34, -23, 53, 25, -43, 4, -7, 15, -16, -10, -23, -10, -35, -25, -1, -15, 40
    0xd70633ea, 0xf816fc06, 0xdffcd4f8, 0x22e1f0e4, 0xd51935e9, 0xf00ff904, 0xddf6e9f6, 0x28f1ffe7,
    // -37, 34, 7, -32, 11, 10, 15, -6, -5, -61, 4, -43, -13, -9, -17, 36, -33, 45, 17, -41, 7, 6, 10, -11, -5, -50, -3, -31, -18, -3, -16, 34
    0xe00722db, 0xfa0f0a0b, 0xd504c3fb, 0x24eff7f3, 0xd7112ddf, 0xf50a0607, 0xe1fdcefb, 0x22f0fdee,
    // -7, 25, -29, -56, -12, 16, -69, -33, -24, -34, -4, -8, 23, -23, -16, 23, 2, 2, -30, -76, -3, 28, -39, -13, -22, -56, 24, -11, 15, -23, -7, -46
    0xc8e319f9, 0xdfbb10f4, 0xf8fcdee8, 0x17f0e917, 0xb4e20202, 0xf3d91cfd, 0xf518c8ea, 0xd2f9e90f,
    // -3, 40, -43, -45, 22, 2, -43, -55, -39, -20, -4, -12, 3, -34, -39, 6, 12, 20, -31, -67, 24, 14, -15, -10, -39, -41, 20, -16, -4, -34, -16, -52
    0xd3d528fd, 0xc9d50216, 0xf4fcecd9, 0x6d9de03, 0xbde1140c, 0xf6f10e18, 0xf014d7d9, 0xccf0defc,
    // -31, 81, -30, 9, -22, -11, 17, 15, -16, 127, -11, 4, -4, 28, -28, 32, 27, -71, -14, 32, 13, 24, -1, -32, 25, -92, -5, 24, 1, -34, 18, -40
    0x9e251e1, 0xf11f5ea, 0x4f57ff0, 0x20e41cfc, 0x20f2b91b, 0xe0ff180d, 0x18fba419, 0xd812de01,
    // -38, 52, -21, 15, -10, 1, 55, -22, -19, 102, 9, -9, -15, 27, -18, 10, 37, -63, 29, 19, 0, 10, 19, 12, 28, -86, 25, 36, -6, -36, 31, -58
    0xfeb34da, 0xea3701f6, 0xf70966ed, 0xaee1bf1, 0x131dc125, 0xc130a00, 0x2419aa1c, 0xc61fdcfa,
    // -15, 24, -19, 25, -14, -7, 3, 9, 13, 22, -19, 46, -21, 14, 9, 69, -7, 48, -6, -11, -30, 20, 39, 52, 5, 77, 11, 42, -46, 7, 3, 71
    0x19ed18f1, 0x903f9f2, 0x2eed160d, 0x45090eeb, 0xf5fa30f9, 0x342714e2, 0x2a0b4d05, 0x470307d2,
    // -9, -10, 7, 29, -6, 2, 2, -19, 18, -3, 1, 30, 0, 12, 14, 35, 8, -4, 13, -7, -24, 38, 40, 32, 4, 47, 26, 19, -16, 10, 19, 27
    0x1d07f6f7, 0xed0202fa, 0x1e01fd12, 0x230e0c00, 0xf90dfc08, 0x202826e8, 0x131a2f04, 0x1b130af0,
    // -15, 13, -1, 48, 0, 1, -3, 1, 34, -25, -30, 24, 29, 8, -11, 53, -37, -3, -6, 33, 7, 9, -20, 1, 29, -44, -32, 11, 25, -3, 2, 51
    0x30ff0df1, 0x1fd0100, 0x18e2e722, 0x35f5081d, 0x21fafddb, 0x1ec0907, 0xbe0d41d, 0x3302fd19,
    // -34, -17, 1, 33, 1, 16, 6, 1, 38, -50, -20, 12, 49, 4, 8, 52, -44, -25, 9, 17, 0, 20, -13, 11, 35, -67, -13, 17, 48, -3, 14, 52
    0x2101efde, 0x1061001, 0xcecce26, 0x34080431, 0x1109e7d4, 0xbf31400, 0x11f3bd23, 0x340efd30,
    // 22, -19, 32, -7, 11, 3, -30, -8, -6, -69, 9, 32, 1, 2, 9, 40, 40, -10, 14, 20, 3, -9, -21, -15, 24, -68, 3, 21, 19, 15, 3, 51
    0xf920ed16, 0xf8e2030b, 0x2009bbfa, 0x28090201, 0x140ef628, 0xf1ebf703, 0x1503bc18, 0x33030f13,
    // 68, 39, 31, -3, 22, 7, 13, 35, -23, -49, 19, 18, -46, -1, -5, 44, 90, 37, 19, 17, 9, -9, 14, 25, 1, -32, 16, 15, -34, 13, -15, 41
    0xfd1f2744, 0x230d0716, 0x1213cfe9, 0x2cfbffd2, 0x1113255a, 0x190ef709, 0xf10e001, 0x29f10dde,
};
static const uint embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias_dwords[16] = {
    // -0.00889, 0.00456, 0.004837, -0.008896, 0.02971, 0.02388, -0.005726, 0.006466, 0.00424, -0.001541, 0.01256, 0.000661, 0.00416, -0.0665, 0.00652, -0.00382
    0x1caba08d, 0xa08e1cf4, 0x261d279b, 0x1e9f9ddd, 0x96501c57, 0x116a226e, 0xac421c43, 0x9bd31ead,
    // -0.03452, -0.003586, 0.00308, 0.09515, -0.00909, -0.0756, -0.02762, -0.03348, 0.014496, 0.00748, -0.01756, -0.0966, 0.013374, -0.03983, -0.0551, 0.02884
    0x9b58a86b, 0x2e171a4f, 0xacd7a0a7, 0xa849a712, 0x1fa9236c, 0xae2fa47f, 0xa91922d9, 0x2762ab0e,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass3(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 16), // threadGroupSliceSize
        uint3(1920, 1080, 16), // storageSize
        uint3(16, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.02335178479552269, storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<512> storage_embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 16, 32), // threadGroupSliceSize
        uint4(2, 2, 16, 32), // storageSize
        uint4(16, 32, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.003455055644735694, storage_embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias = { embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias };
    
    // Fusedquantized_/encoder2/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_6 = uint3(960, 540, 32);
    const int3 groupStart_slice_6 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_6 = uint3(64, 1, 32);
    const uint3 storageSize_slice_6 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_6 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_6 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_6 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_6 = dot(groupStart_slice_6, tensorByteStrides_slice_6);
    const RWBufferStorage storage_slice_6 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_6 = { logicalSize_slice_6, groupStart_slice_6, groupSize_slice_6, storageSize_slice_6, tensorByteStrides_slice_6, paddingBegin_slice_6, paddingEnd_slice_6, threadGroupByteOffsetInTensor_slice_6 + 33177600, storage_slice_6 };
    // Fusedquantized_/encoder2/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs (16, 1080, 1920), (32, 16, 2, 2), (32,) -> (32, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FusedConv2D_k2s2b_QuantizedOutput(0.015390855260193348, 0.018884973600506783, fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias, slice_6, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_3
#ifdef MLSR_PASS_3_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass3_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // Fusedquantized_/encoder2/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_7 = uint3(960, 540, 32);
    const int3 groupStart_slice_7 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_7 = uint3(32, 1, 32);
    const uint3 storageSize_slice_7 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_7 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_7 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_7 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_7 = dot(groupStart_slice_7, tensorByteStrides_slice_7);
    const RWBufferStorage storage_slice_7 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_7 = { logicalSize_slice_7, groupStart_slice_7, groupSize_slice_7, storageSize_slice_7, tensorByteStrides_slice_7, paddingBegin_slice_7, paddingEnd_slice_7, threadGroupByteOffsetInTensor_slice_7 + 33177600, storage_slice_7 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_7, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_3_POST


#ifdef MLSR_PASS_4
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 6, 18, 8, 2, 25, -9, 4, -10, -9, -25, 20, 20, 10, 3, -28, -12, 52, 9, 51, -48, 24, 35, -44, -2, -17, -18, 37, 17, -81, 36, -4, 21
    0x2081206, 0xf604f719, 0x1414e7f7, 0xf4e4030a, 0xd0330934, 0xfed42318, 0x1125eeef, 0x15fc24af,
    // 8, 9, -2, 18, 1, 2, 13, -12, 15, 0, 11, 1, 10, 11, -3, -4, 15, 27, 12, -38, 22, 49, 34, 19, 27, 1, 3, 12, 33, 26, -32, 21
    0x12fe0908, 0xf40d0201, 0x10b000f, 0xfcfd0b0a, 0xda0c1b0f, 0x13223116, 0xc03011b, 0x15e01a21,
    // -21, 5, -22, 10, -29, 8, 47, 15, 58, 99, 7, -56, -13, 30, -36, -69, -59, 12, -16, 64, -15, -26, 19, -26, -9, 12, -26, 21, 54, -30, -14, 5
    0xaea05eb, 0xf2f08e3, 0xc807633a, 0xbbdc1ef3, 0x40f00cc5, 0xe613e6f1, 0x15e60cf7, 0x5f2e236,
    // 10, -11, 1, 7, -4, 4, 1, 0, 15, 3, 11, 9, -7, 9, 3, -5, -22, -62, 3, 2, -31, -31, -65, -17, -25, 34, -1, -12, -33, -55, 77, 15
    0x701f50a, 0x104fc, 0x90b030f, 0xfb0309f9, 0x203c2ea, 0xefbfe1e1, 0xf4ff22e7, 0xf4dc9df,
    // -34, -3, 16, -3, 6, 0, -19, 1, -16, -12, -2, -7, 8, -18, 3, 4, 6, 8, 8, -1, 12, 2, 12, 2, 14, 20, -7, 16, 0, 7, -5, 5
    0xfd10fdde, 0x1ed0006, 0xf9fef4f0, 0x403ee08, 0xff080806, 0x20c020c, 0x10f9140e, 0x5fb0700,
    // -74, -37, -40, 12, -6, 30, 31, -24, -18, -22, -9, -70, 19, 47, 12, 18, -9, -5, 11, -7, 1, 8, 8, 2, 30, -26, -7, 6, 21, 20, -21, -1
    0xcd8dbb6, 0xe81f1efa, 0xbaf7eaee, 0x120c2f13, 0xf90bfbf7, 0x2080801, 0x6f9e61e, 0xffeb1415,
    // 37, 27, 7, -17, -6, -23, -21, -15, -6, -35, 39, 24, -21, -25, -19, -38, -18, -32, -59, 2, 12, -104, -6, -1, 41, 65, -80, 43, -48, 32, 64, -27
    0xef071b25, 0xf1ebe9fa, 0x1827ddfa, 0xdaede7eb, 0x2c5e0ee, 0xfffa980c, 0x2bb04129, 0xe54020d0,
    // -5, -10, 8, -8, 29, -11, -39, -33, 25, 3, -8, -47, 32, 6, 27, -9, 2, 0, -13, -6, 25, 13, -9, 7, -8, -2, 1, 18, 14, -10, -24, 13
    0xf808f6fb, 0xdfd9f51d, 0xd1f80319, 0xf71b0620, 0xfaf30002, 0x7f70d19, 0x1201fef8, 0xde8f60e,
    // 12, 8, 36, -33, -13, 44, 22, 14, -6, 17, 18, 50, -23, -60, -53, 19, 21, 13, -4, 0, 13, 15, -11, -12, -4, 9, 6, 2, -7, -5, -13, 3
    0xdf24080c, 0xe162cf3, 0x321211fa, 0x13cbc4e9, 0xfc0d15, 0xf4f50f0d, 0x20609fc, 0x3f3fbf9,
    // 32, -17, -10, 4, -10, -7, -3, -2, 0, 9, 12, 13, -2, -3, -3, -4, -16, -8, -11, 11, -10, -28, 49, -24, 81, -60, 17, 10, 12, -21, 21, -12
    0x4f6ef20, 0xfefdf9f6, 0xd0c0900, 0xfcfdfdfe, 0xbf5f8f0, 0xe831e4f6, 0xa11c451, 0xf415eb0c,
    // 0, 13, 7, 0, -16, -8, 6, -6, -6, -10, 0, 1, -17, 15, 6, 5, 5, -31, -32, 15, 8, -33, -7, 3, -21, 11, 6, -12, -42, -32, 60, 3
    0x70d00, 0xfa06f8f0, 0x100f6fa, 0x5060fef, 0xfe0e105, 0x3f9df08, 0xf4060beb, 0x33ce0d6,
    // -116, 2, 6, 8, -54, -8, -43, 25, 27, 40, 77, -74, 43, 40, -34, -43, 1, 78, 28, -7, 44, 7, 8, -7, -9, 21, 7, 26, -55, -6, -37, 16
    0x806028c, 0x19d5f8ca, 0xb64d281b, 0xd5de282b, 0xf91c4e01, 0xf908072c, 0x1a0715f7, 0x10dbfac9,
    // -8, -2, -6, -4, 19, -5, -8, 10, 1, -2, 4, 20, -28, -4, 11, -1, -1, 6, 23, -13, 53, 14, -29, 14, 20, -22, -22, 12, -2, -16, -35, 8
    0xfcfafef8, 0xaf8fb13, 0x1404fe01, 0xff0bfce4, 0xf31706ff, 0xee30e35, 0xceaea14, 0x8ddf0fe,
    // -13, 14, -7, -4, 4, -10, 8, 10, 16, -7, 10, 3, 0, 16, -15, -8, -11, -25, -7, 11, 3, -9, -4, -4, -13, 2, 15, 0, 5, 2, 6, 5
    0xfcf90ef3, 0xa08f604, 0x30af910, 0xf8f11000, 0xbf9e7f5, 0xfcfcf703, 0xf02f3, 0x5060205,
    // -10, 6, 20, 27, 7, 16, 10, -9, 1, -22, 27, -40, -15, 8, 4, -10, -14, -22, -1, 14, -3, 3, -11, -5, 7, -21, 11, -9, 2, 11, -1, -3
    0x1b1406f6, 0xf70a1007, 0xd81bea01, 0xf60408f1, 0xeffeaf2, 0xfbf503fd, 0xf70beb07, 0xfdff0b02,
    // -3, 8, -15, 17, 47, 36, -24, -10, -11, -60, 22, 20, -7, -6, -2, -15, -48, 30, 31, -103, -25, 3, -66, -14, 77, -21, 37, 16, -98, 12, -38, 78
    0x11f108fd, 0xf6e8242f, 0x1416c4f5, 0xf1fefaf9, 0x991f1ed0, 0xf2be03e7, 0x1025eb4d, 0x4eda0c9e,
    // -9, -7, 3, 6, 2, -6, -24, -38, -16, 3, -7, -29, 21, 18, 21, -10, -2, -18, -18, 12, -3, -6, -9, 5, -5, -7, 1, 7, 6, 11, 8, -4
    0x603f9f7, 0xdae8fa02, 0xe3f903f0, 0xf6151215, 0xceeeefe, 0x5f7fafd, 0x701f9fb, 0xfc080b06,
    // -30, -1, 12, 29, 17, -1, -4, 29, -4, -7, -30, -2, -18, 9, -7, -18, -25, -2, -2, 15, -10, -8, -14, 6, -9, -3, 0, -2, 5, 16, 16, 4
    0x1d0cffe2, 0x1dfcff11, 0xfee2f9fc, 0xeef909ee, 0xffefee7, 0x6f2f8f6, 0xfe00fdf7, 0x4101005,
    // -6, 19, 10, 12, -20, -2, -25, 3, -31, 3, -25, 0, 5, 4, -15, 4, 35, 63, 9, 12, -26, -17, -38, -2, -5, 0, -10, 11, 8, -8, 0, -30
    0xc0a13fa, 0x3e7feec, 0xe703e1, 0x4f10405, 0xc093f23, 0xfedaefe6, 0xbf600fb, 0xe200f808,
    // 0, 26, 3, 4, -13, 11, -13, -1, -22, -10, -9, 2, -9, 11, 10, 1, -1, 27, -5, 11, -17, 3, -75, -2, -49, -5, -15, 13, -20, -17, 37, -7
    0x4031a00, 0xfff30bf3, 0x2f7f6ea, 0x10a0bf7, 0xbfb1bff, 0xfeb503ef, 0xdf1fbcf, 0xf925efec,
    // -58, -53, 21, -17, 35, 9, 16, -10, 81, 6, 1, -73, 18, -33, -13, 32, 18, 16, 5, -28, -11, 34, -56, 9, -23, 4, -20, 12, 8, 18, 34, 2
    0xef15cbc6, 0xf6100923, 0xb7010651, 0x20f3df12, 0xe4051012, 0x9c822f5, 0xcec04e9, 0x2221208,
    // -16, 11, 7, 0, -22, -2, -18, 11, -22, 13, -24, -11, -10, 8, 13, 16, 14, 52, -9, 26, 23, 15, -72, -21, -9, 18, -15, -31, 26, -3, 12, -25
    0x70bf0, 0xbeefeea, 0xf5e80dea, 0x100d08f6, 0x1af7340e, 0xebb80f17, 0xe1f112f7, 0xe70cfd1a,
    // 2, 4, -7, 1, -9, 4, -25, 13, -7, -9, -2, -1, 11, 16, 5, 0, 2, 26, 14, 4, 4, -6, -15, -10, -18, 10, -15, -1, 16, -14, -30, 7
    0x1f90402, 0xde704f7, 0xfffef7f9, 0x5100b, 0x40e1a02, 0xf6f1fa04, 0xfff10aee, 0x7e2f210,
    // -38, -18, -2, 15, -46, -48, 16, 20, 46, 2, -43, 7, 40, -9, 3, -7, -1, -20, -3, -14, -3, 1, -1, 3, 4, -36, 3, 0, 30, 4, -22, -12
    0xffeeeda, 0x1410d0d2, 0x7d5022e, 0xf903f728, 0xf2fdecff, 0x3ff01fd, 0x3dc04, 0xf4ea041e,
    // -6, 29, -5, -19, -18, -26, 15, -1, -42, -23, 3, 49, -6, 3, -43, 23, -36, 17, 6, 74, 20, 94, 23, 0, 45, 127, 81, -18, -63, -28, 39, 37
    0xedfb1dfa, 0xff0fe6ee, 0x3103e9d6, 0x17d503fa, 0x4a0611dc, 0x175e14, 0xee517f2d, 0x2527e4c1,
    // -19, -41, -14, 10, -3, -19, -9, -5, 28, -15, -10, -43, 42, 5, 23, -28, 7, 38, 7, -12, 7, -13, 2, -13, -5, -4, 4, 10, -5, 6, -15, -4
    0xaf2d7ed, 0xfbf7edfd, 0xd5f6f11c, 0xe417052a, 0xf4072607, 0xf302f307, 0xa04fcfb, 0xfcf106fb,
    // 25, 59, 8, -16, 26, 17, 42, -22, 31, 6, -11, 4, -13, 45, -28, 0, 22, 0, 3, -9, -7, -2, -15, -7, 6, -15, 15, -14, -9, 21, 28, -18
    0xf0083b19, 0xea2a111a, 0x4f5061f, 0xe42df3, 0xf7030016, 0xf9f1fef9, 0xf20ff106, 0xee1c15f7,
    // 9, -8, -8, -8, -2, 21, 1, 6, 11, -19, 4, -1, 4, 9, 3, -2, 2, 14, -2, 32, -20, -47, -1, -3, 50, -10, -10, 11, 28, -33, 2, -29
    0xf8f8f809, 0x60115fe, 0xff04ed0b, 0xfe030904, 0x20fe0e02, 0xfdffd1ec, 0xbf6f632, 0xe302df1c,
    // -18, 38, -2, 12, 8, -1, 15, -17, 1, 1, -6, 9, 21, -1, -14, 5, -1, 17, 11, -6, 35, 53, 21, 17, 3, 5, -31, -12, 19, 1, -31, 39
    0xcfe26ee, 0xef0fff08, 0x9fa0101, 0x5f2ff15, 0xfa0b11ff, 0x11153523, 0xf4e10503, 0x27e10113,
    // 46, 17, 15, -12, -24, -66, -117, 10, -81, -60, 4, -59, -95, -15, 70, 47, -82, 10, -22, 25, 3, -29, 12, 15, 5, 10, -15, 15, 23, -21, 11, 7
    0xf40f112e, 0xa8bbee8, 0xc504c4af, 0x2f46f1a1, 0x19ea0aae, 0xf0ce303, 0xff10a05, 0x70beb17,
    // 3, 19, -6, -11, 5, -2, 20, -8, 2, 7, 0, -4, -6, 22, 7, 2, 36, 41, 24, -42, 31, 18, -15, 8, 56, -3, 10, -16, -9, 25, -8, -26
    0xf5fa1303, 0xf814fe05, 0xfc000702, 0x20716fa, 0xd6182924, 0x8f1121f, 0xf00afd38, 0xe6f819f7,
    // 3, -3, 0, -6, -5, 2, -15, 10, 0, 1, 12, -3, 6, -2, 8, -4, -19, -16, -4, -12, -17, 6, 5, 22, 2, -7, -2, -6, -15, 12, 4, 7
    0xfa00fd03, 0xaf102fb, 0xfd0c0100, 0xfc08fe06, 0xf4fcf0ed, 0x160506ef, 0xfafef902, 0x7040cf1,
    // -9, -51, -21, 9, -31, 50, -2, -24, -8, -29, -24, -53, 10, 15, 6, 27, -5, -19, 3, -10, -11, -2, 6, 12, 13, 2, -4, 6, 4, 5, -18, 11
    0x9ebcdf7, 0xe8fe32e1, 0xcbe8e3f8, 0x1b060f0a, 0xf603edfb, 0xc06fef5, 0x6fc020d, 0xbee0504,
    // -27, 19, -2, -14, -3, 1, -4, -14, 0, 28, 16, -2, -12, 8, 32, 15, -8, 102, -79, 46, 26, -6, -94, -66, 20, -23, -25, -89, -22, -5, 5, -12
    0xf2fe13e5, 0xf2fc01fd, 0xfe101c00, 0xf2008f4, 0x2eb166f8, 0xbea2fa1a, 0xa7e7e914, 0xf405fbea,
    // 28, 8, 11, 5, -12, 11, -37, -7, 10, -5, 28, 7, -1, -8, -24, -21, -5, -7, 1, 4, -2, -2, -7, 6, 12, -12, 12, 10, -3, 2, -11, -2
    0x50b081c, 0xf9db0bf4, 0x71cfb0a, 0xebe8f8ff, 0x401f9fb, 0x6f9fefe, 0xa0cf40c, 0xfef502fd,
    // 37, 1, 41, 1, -37, 18, -17, -4, 16, -49, 16, 35, -34, -3, -29, -18, 5, 6, 10, 5, -6, 1, 14, 5, -5, 14, 1, 20, -19, -6, -24, 13
    0x1290125, 0xfcef12db, 0x2310cf10, 0xeee3fdde, 0x50a0605, 0x50e01fa, 0x14010efb, 0xde8faed,
    // 8, 8, -12, -16, -5, 14, -11, 2, 0, -24, 9, 0, -9, -1, 29, -9, 8, 5, 12, -2, -3, 42, 42, 35, 13, 4, 10, -3, -30, 11, -2, 16
    0xf0f40808, 0x2f50efb, 0x9e800, 0xf71dfff7, 0xfe0c0508, 0x232a2afd, 0xfd0a040d, 0x10fe0be2,
    // 8, 9, -11, 0, -18, 7, -16, 5, -3, -5, 4, 5, 1, -4, 14, -11, -17, 0, -5, 17, -8, 2, 6, 4, 13, 13, -25, 23, -10, -23, -15, 19
    0xf50908, 0x5f007ee, 0x504fbfd, 0xf50efc01, 0x11fb00ef, 0x40602f8, 0x17e70d0d, 0x13f1e9f6,
    // 3, 46, 1, 23, 77, -66, 24, -17, 94, -46, 15, -57, 64, 8, 8, 48, -19, 4, -14, -19, -25, -10, 37, 7, 48, 11, -9, 27, 13, 8, -19, 16
    0x17012e03, 0xef18be4d, 0xc70fd25e, 0x30080840, 0xedf204ed, 0x725f6e7, 0x1bf70b30, 0x10ed080d,
    // 8, 10, -5, -4, -5, 4, -36, 0, -18, -17, 4, -4, -8, 10, 16, -14, -55, -16, -2, 39, -21, -21, -24, 30, 44, 45, -10, 16, -26, -28, 13, -10
    0xfcfb0a08, 0xdc04fb, 0xfc04efee, 0xf2100af8, 0x27fef0c9, 0x1ee8ebeb, 0x10f62d2c, 0xf60de4e6,
    // 0, 10, -1, -6, -6, 5, -20, 10, -21, -14, 8, 9, 6, -10, -5, -5, -8, -16, -3, 0, 18, 36, 4, 7, 10, -23, 16, -2, -1, 12, 11, -2
    0xfaff0a00, 0xaec05fa, 0x908f2eb, 0xfbfbf606, 0xfdf0f8, 0x7042412, 0xfe10e90a, 0xfe0b0cff,
    // 2, -33, -38, 2, 30, 14, 38, 1, -19, 20, 5, 14, 5, 23, 14, 22, 5, 1, 10, -3, 8, 8, 0, -7, 4, -2, -8, -3, 0, 15, -6, 3
    0x2dadf02, 0x1260e1e, 0xe0514ed, 0x160e1705, 0xfd0a0105, 0xf9000808, 0xfdf8fe04, 0x3fa0f00,
    // -13, -18, 5, 22, 40, 31, -16, 2, 11, 43, -6, -1, 14, 39, 1, -17, -11, -9, -12, -1, -61, -48, 30, -5, 7, 93, 10, 17, 53, -75, 26, -43
    0x1605eef3, 0x2f01f28, 0xfffa2b0b, 0xef01270e, 0xfff4f7f5, 0xfb1ed0c3, 0x110a5d07, 0xd51ab535,
    // 5, -10, 11, 9, 20, 27, 8, -2, -19, -20, -13, 15, 3, 42, -10, -1, 8, 0, 5, 13, 36, 30, -9, 13, -7, -11, 0, 13, 3, 6, -10, -1
    0x90bf605, 0xfe081b14, 0xff3eced, 0xfff62a03, 0xd050008, 0xdf71e24, 0xd00f5f9, 0xfff60603,
    // -3, -6, -6, 18, 33, 35, 35, 6, -69, -34, -14, 5, 2, 45, 21, 23, 0, 8, 15, -7, 17, 15, -8, 1, -10, -25, -5, 4, 2, 21, 2, -8
    0x12fafafd, 0x6232321, 0x5f2debb, 0x17152d02, 0xf90f0800, 0x1f80f11, 0x4fbe7f6, 0xf8021502,
    // -2, 1, 9, 5, 30, -1, -17, 2, 4, 10, 22, 10, 1, 1, 5, -7, -60, -7, 10, 37, 61, 1, -40, -22, 9, -5, 9, -1, 91, 9, -30, 1
    0x50901fe, 0x2efff1e, 0xa160a04, 0xf9050101, 0x250af9c4, 0xead8013d, 0xff09fb09, 0x1e2095b,
    // 10, -1, 12, 8, 24, 3, -18, 0, 11, -11, 33, -2, -12, -1, 5, -19, -13, -14, -9, 17, -7, 3, 18, -19, -1, 60, -1, 7, 7, 8, 40, 43
    0x80cff0a, 0xee0318, 0xfe21f50b, 0xed05fff4, 0x11f7f2f3, 0xed1203f9, 0x7ff3cff, 0x2b280807,
    // -26, 53, 20, 6, 25, -27, 22, 39, -13, 13, -47, -8, 9, -33, 4, -2, -6, 13, 41, -15, -11, 27, 5, 3, -43, 9, 2, 17, -26, 55, 9, 21
    0x61435e6, 0x2716e519, 0xf8d10df3, 0xfe04df09, 0xf1290dfa, 0x3051bf5, 0x110209d5, 0x150937e6,
    // 22, -12, -1, 0, -1, 6, -12, -9, -5, 16, 24, 9, 2, -8, 13, -4, 33, -35, 14, -44, -59, 31, 45, -5, 52, 4, 18, 23, 36, -22, -42, 16
    0xfff416, 0xf7f406ff, 0x91810fb, 0xfc0df802, 0xd40edd21, 0xfb2d1fc5, 0x17120434, 0x10d6ea24,
    // 1, 2, 6, -17, -16, -1, 7, 6, 6, 4, 22, 6, -10, 21, 28, -3, 1, -7, 0, -1, 8, -11, 8, 11, 5, -5, 2, 7, 4, -1, -19, -1
    0xef060201, 0x607fff0, 0x6160406, 0xfd1c15f6, 0xff00f901, 0xb08f508, 0x702fb05, 0xffedff04,
    // 53, 22, 26, -7, 13, 16, -17, 16, 12, -11, 36, 16, -25, 2, 4, -35, 2, -6, -8, 2, 3, -3, 19, 11, 12, -3, -2, 2, 5, 9, -15, 4
    0xf91a1635, 0x10ef100d, 0x1024f50c, 0xdd0402e7, 0x2f8fa02, 0xb13fd03, 0x2fefd0c, 0x4f10905,
    // 23, 7, 17, 1, 7, 0, -26, -7, -41, -38, 20, 18, -15, -22, -26, 9, -2, 90, -40, 18, -50, -10, 102, 27, 22, -13, -54, -3, 91, -11, 58, 84
    0x1110717, 0xf9e60007, 0x1214dad7, 0x9e6eaf1, 0x12d85afe, 0x1b66f6ce, 0xfdcaf316, 0x543af55b,
    // -26, 22, 20, -14, 51, -7, -26, -8, -29, -32, 20, -31, -1, 6, 11, -26, -14, 5, 5, 0, 1, -12, 0, 13, 2, 1, -6, 3, -20, -2, -6, 5
    0xf21416e6, 0xf8e6f933, 0xe114e0e3, 0xe60b06ff, 0x505f2, 0xd00f401, 0x3fa0102, 0x5fafeec,
    // 6, 13, -13, 15, 1, -16, -36, -20, -29, 3, 11, -38, -14, -7, 33, -24, -12, -1, -3, 1, 8, -8, 11, 2, 3, -14, -4, -13, 3, 10, 6, 4
    0xff30d06, 0xecdcf001, 0xda0b03e3, 0xe821f9f2, 0x1fdfff4, 0x20bf808, 0xf3fcf203, 0x4060a03,
    // -1, -16, 14, 6, -22, -28, 21, 2, -31, 7, -3, -9, -16, 8, -15, 15, -8, -25, -21, 3, 18, -14, -43, -9, -10, 17, 9, -17, 35, 8, 15, -11
    0x60ef0ff, 0x215e4ea, 0xf7fd07e1, 0xff108f0, 0x3ebe7f8, 0xf7d5f212, 0xef0911f6, 0xf50f0823,
    // 15, -43, -4, 5, -32, -2, 4, 12, 20, -9, -14, -6, 18, 8, -10, 2, 37, 23, 14, 7, 10, 11, 8, -22, 1, 3, 9, 13, 12, 2, -36, 2
    0x5fcd50f, 0xc04fee0, 0xfaf2f714, 0x2f60812, 0x70e1725, 0xea080b0a, 0xd090301, 0x2dc020c,
    // 22, 26, 73, -17, 51, -18, 68, -6, -105, 9, 36, -49, -2, -24, 72, -49, 13, -14, -11, 16, -46, -14, -3, -22, 1, -32, -16, -2, 50, -17, 22, -24
    0xef491a16, 0xfa44ee33, 0xcf240997, 0xcf48e8fe, 0x10f5f20d, 0xeafdf2d2, 0xfef0e001, 0xe816ef32,
    // 12, -8, -10, 11, -5, 8, 15, -8, -4, -11, 3, 13, 22, -7, -8, -6, 41, 11, -14, 2, -19, 13, -23, 0, -33, -30, 24, 50, -15, -4, -46, 3
    0xbf6f80c, 0xf80f08fb, 0xd03f5fc, 0xfaf8f916, 0x2f20b29, 0xe90ded, 0x3218e2df, 0x3d2fcf1,
    // -1, -17, 6, 13, -16, 1, -9, 6, -16, -1, -3, 0, -9, -9, 17, -1, -6, -15, -3, 15, -5, 8, -15, 15, 27, 3, -12, -14, -18, -7, 43, -10
    0xd06efff, 0x6f701f0, 0xfdfff0, 0xff11f7f7, 0xffdf1fa, 0xff108fb, 0xf2f4031b, 0xf62bf9ee,
    // 13, -19, -12, 52, 68, 38, 4, 8, 57, 64, 3, 4, 36, -38, 62, -19, 1, 22, -26, 8, -6, 20, 12, 5, 12, 25, -5, 17, 7, -20, 5, 10
    0x34f4ed0d, 0x8042644, 0x4034039, 0xed3eda24, 0x8e61601, 0x50c14fa, 0x11fb190c, 0xa05ec07,
    // -3, 7, 17, -5, -13, -1, -31, 10, 13, -52, -6, 11, 28, -12, -46, -32, 19, 22, 38, -26, -97, 15, 39, 29, -14, 19, 41, -48, -38, 42, 43, 51
    0xfb1107fd, 0xae1fff3, 0xbfacc0d, 0xe0d2f41c, 0xe6261613, 0x1d270f9f, 0xd02913f2, 0x332b2ada,
    // -43, 40, -19, 21, 41, -9, 9, -15, -37, 19, -13, -18, -10, -26, 4, 23, -10, -5, -3, 6, -8, -7, -15, 16, 14, -41, -8, -24, 26, 7, -12, -21
    0x15ed28d5, 0xf109f729, 0xeef313db, 0x1704e6f6, 0x6fdfbf6, 0x10f1f9f8, 0xe8f8d70e, 0xebf4071a,
    // -13, -8, 5, -4, 10, -22, -3, 53, 57, -18, 12, 37, 1, 29, -69, 23, -7, 26, -6, 3, 8, -7, 9, -3, -21, 20, -11, 2, -14, -5, 3, 12
    0xfc05f8f3, 0x35fdea0a, 0x250cee39, 0x17bb1d01, 0x3fa1af9, 0xfd09f908, 0x2f514eb, 0xc03fbf2,
    // -29, -10, -1, 1, -7, -4, 5, -5, -26, 19, -17, -24, -13, 4, 7, 18, -27, -15, 28, -32, 11, 36, -44, 6, -37, -48, -17, -34, -21, 9, 29, 22
    0x1fff6e3, 0xfb05fcf9, 0xe8ef13e6, 0x120704f3, 0xe01cf1e5, 0x6d4240b, 0xdeefd0db, 0x161d09eb,
    // -12, -32, -7, -15, -10, 2, -14, 9, -7, 0, 1, -26, 1, 14, 17, -5, 17, 42, -14, -24, 0, -28, 10, -27, -37, 6, 11, -6, 18, -5, -28, 5
    0xf1f9e0f4, 0x9f202f6, 0xe60100f9, 0xfb110e01, 0xe8f22a11, 0xe50ae400, 0xfa0b06db, 0x5e4fb12,
    // -12, 122, 19, 4, -5, -49, -38, 60, 50, -35, 57, -16, -40, -20, -108, -60, 3, 17, -4, 9, 30, -13, -22, -13, 17, 25, 13, -21, -29, 17, 29, -12
    0x4137af4, 0x3cdacffb, 0xf039dd32, 0xc494ecd8, 0x9fc1103, 0xf3eaf31e, 0xeb0d1911, 0xf41d11e3,
    // 1, 13, -11, 4, 1, -1, 0, -3, 0, 28, -17, -17, 12, 8, 9, 13, -3, -35, 5, 18, -18, 0, -21, -29, 24, 5, -26, -2, 24, -17, 12, 2
    0x4f50d01, 0xfd00ff01, 0xefef1c00, 0xd09080c, 0x1205ddfd, 0xe3eb00ee, 0xfee60518, 0x20cef18,
    // -8, 4, -11, 1, 10, -6, -24, -7, 22, 12, -9, -14, 19, 10, 17, -1, -5, 21, -20, -2, 5, 1, -40, -21, 12, 10, 27, 25, 10, -23, 28, -17
    0x1f504f8, 0xf9e8fa0a, 0xf2f70c16, 0xff110a13, 0xfeec15fb, 0xebd80105, 0x191b0a0c, 0xef1ce90a,
    // -11, 11, -27, -6, -48, 11, 53, -22, -17, -44, 9, 19, -33, -24, 22, 34, -14, 34, 4, 2, -6, -16, -18, -23, -6, 15, -12, 0, 11, -2, 0, 4
    0xfae50bf5, 0xea350bd0, 0x1309d4ef, 0x2216e8df, 0x20422f2, 0xe9eef0fa, 0xf40ffa, 0x400fe0b,
    // -32, 23, 0, -15, 8, 10, -47, -19, -11, 20, 32, 43, 22, -1, -33, -2, 22, -84, -26, -18, 59, 20, -9, 127, -29, 34, 1, -10, -29, 42, -29, 6
    0xf10017e0, 0xedd10a08, 0x2b2014f5, 0xfedfff16, 0xeee6ac16, 0x7ff7143b, 0xf60122e3, 0x6e32ae3,
    // -13, -10, 24, 11, 18, 3, -4, -9, 23, 48, 4, 11, -2, -8, -11, -9, -9, 0, -6, 1, -10, -13, -16, 1, 4, 32, 18, 18, 4, -11, 12, 7
    0xb18f6f3, 0xf7fc0312, 0xb043017, 0xf7f5f8fe, 0x1fa00f7, 0x1f0f3f6, 0x12122004, 0x70cf504,
    // -8, -14, 15, -10, -7, 36, 59, -28, -58, -45, -31, 4, 12, 6, 25, 18, 6, -13, 10, 5, -33, -6, -6, -11, 1, 7, -5, -4, 10, 5, 6, 3
    0xf60ff2f8, 0xe43b24f9, 0x4e1d3c6, 0x1219060c, 0x50af306, 0xf5fafadf, 0xfcfb0701, 0x306050a,
};
static const uint embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // -0.0002723, 6.5e-06, -7.623e-05, 0.0002477, -0.0001566, -0.000378, -0.0001678, 8.243e-05, -0.0003307, -4.15e-05, -0.0001941, 4.2e-06, 0.0003319, 0.000141, -9.257e-05, 0.0001488
    0x6d8c76, 0xc0f84ff, 0x8e318922, 0x5678980, 0x82b88d6b, 0x468a5c, 0x89f0d70, 0x8e08611,
};
static const uint embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -18, 5, 16, 11, 8, -20, 12, 16, -34, -9, 1, 32, 11, -5, 12, 5, -9, 48, -17, -34, -59, 33, -5, 25, 23, 61, -36, -58, -1, 33, 78, -6
    0xb1005ee, 0x100cec08, 0x2001f7de, 0x50cfb0b, 0xdeef30f7, 0x19fb21c5, 0xc6dc3d17, 0xfa4e21ff,
    // -19, 2, -4, -2, 44, -45, 43, 20, -35, 15, 8, 11, 6, -22, 42, -12, -3, 27, 28, 35, 19, -3, -46, -7, -83, 22, -33, 12, -44, -7, -4, 63
    0xfefc02ed, 0x142bd32c, 0xb080fdd, 0xf42aea06, 0x231c1bfd, 0xf9d2fd13, 0xcdf16ad, 0x3ffcf9d4,
    // 3, -19, -16, -9, 29, 22, -14, 25, 1, 13, 7, -21, -21, 10, 51, -42, 41, -20, 33, 35, 24, 60, -48, 66, 28, -53, -19, 39, -47, -60, 66, 28
    0xf7f0ed03, 0x19f2161d, 0xeb070d01, 0xd6330aeb, 0x2321ec29, 0x42d03c18, 0x27edcb1c, 0x1c42c4d1,
    // -16, 3, 28, 15, -27, 12, 18, -47, -25, -42, 18, -16, 11, 14, -40, 33, -69, -20, 49, -78, 1, -35, 49, 70, -3, 25, 16, -40, -36, -71, -17, -10
    0xf1c03f0, 0xd1120ce5, 0xf012d6e7, 0x21d80e0b, 0xb231ecbb, 0x4631dd01, 0xd81019fd, 0xf6efb9dc,
    // 14, 5, 36, -6, 46, -20, -15, -31, 10, -25, -24, -42, 16, 27, -14, 4, 20, -11, 20, 13, 27, 34, 1, 68, -12, -38, -24, 16, -2, -2, 53, 50
    0xfa24050e, 0xe1f1ec2e, 0xd6e8e70a, 0x4f21b10, 0xd14f514, 0x4401221b, 0x10e8daf4, 0x3235fefe,
    // -9, 1, 20, 15, -15, 35, 2, 0, -9, 36, 17, 15, -39, 22, -8, -2, -31, 44, 26, -35, -9, -17, -22, 68, 6, -37, -23, 6, 48, -31, 34, 41
    0xf1401f7, 0x223f1, 0xf1124f7, 0xfef816d9, 0xdd1a2ce1, 0x44eaeff7, 0x6e9db06, 0x2922e130,
    // 17, 3, -5, 2, -5, -6, 8, 5, 12, -16, -1, 5, 13, -2, -13, 13, -19, -9, -11, -24, -36, 17, -9, 83, 42, -12, 55, 11, 0, -15, -1, -48
    0x2fb0311, 0x508fafb, 0x5fff00c, 0xdf3fe0d, 0xe8f5f7ed, 0x53f711dc, 0xb37f42a, 0xd0fff100,
    // -18, 17, -51, 22, 73, -18, 9, -8, 36, 8, 30, -31, 3, -11, -4, 7, 56, -23, 7, -17, 1, -7, -11, -45, 27, -55, 3, -5, -68, 30, -13, -20
    0x16cd11ee, 0xf809ee49, 0xe11e0824, 0x7fcf503, 0xef07e938, 0xd3f5f901, 0xfb03c91b, 0xecf31ebc,
    // 18, -5, 33, -5, 16, 19, -12, -7, 26, 18, 8, 0, 31, 13, 28, 13, -95, -68, -29, 22, -3, -15, 39, 45, -61, 44, 8, -37, 100, -68, 12, 7
    0xfb21fb12, 0xf9f41310, 0x8121a, 0xd1c0d1f, 0x16e3bca1, 0x2d27f1fd, 0xdb082cc3, 0x70cbc64,
    // -82, 53, 22, 1, -19, 62, 86, 39, -48, 13, 45, -74, 68, 76, -30, 8, 6, -23, -10, 6, -1, 5, 11, 22, -2, 18, -17, 12, 1, 10, -5, -17
    0x11635ae, 0x27563eed, 0xb62d0dd0, 0x8e24c44, 0x6f6e906, 0x160b05ff, 0xcef12fe, 0xeffb0a01,
    // -90, 69, -74, 82, 33, -35, 9, -30, 61, -20, -27, 25, -25, -47, -77, -35, 23, -46, 11, 21, -8, 1, -50, 35, 6, -17, -1, 7, 51, -7, 39, -20
    0x52b645a6, 0xe209dd21, 0x19e5ec3d, 0xddb3d1e7, 0x150bd217, 0x23ce01f8, 0x7ffef06, 0xec27f933,
    // -3, 17, -21, 18, 23, 8, 14, -11, -14, 61, 3, 3, -21, 7, 40, -28, 33, -32, 39, -5, 72, -28, -8, 23, 60, 45, -48, 3, -27, 7, 47, 40
    0x12eb11fd, 0xf50e0817, 0x3033df2, 0xe42807eb, 0xfb27e021, 0x17f8e448, 0x3d02d3c, 0x282f07e5,
    // 7, -12, 1, 12, -19, 20, -28, -36, 19, -2, -16, -8, -1, 21, -22, 21, 42, -67, -2, -13, 55, -16, 6, -41, 46, -8, -32, -2, 7, -45, 26, -128
    0xc01f407, 0xdce414ed, 0xf8f0fe13, 0x15ea15ff, 0xf3febd2a, 0xd706f037, 0xfee0f82e, 0x801ad307,
    // -7, 3, 11, 0, 16, -11, -15, -9, -10, -5, -11, -14, 33, 20, -9, 11, 9, -78, 75, 31, -6, 45, -9, 14, 33, 7, -22, 11, -11, -53, 27, -49
    0xb03f9, 0xf7f1f510, 0xf2f5fbf6, 0xbf71421, 0x1f4bb209, 0xef72dfa, 0xbea0721, 0xcf1bcbf5,
    // -11, 2, 8, -57, -18, -6, -18, -15, 38, -72, -6, -31, 18, -7, -15, 24, -10, 23, -56, -5, -52, 18, 10, -2, -33, -1, 12, 35, -5, 12, 11, -75
    0xc70802f5, 0xf1eefaee, 0xe1fab826, 0x18f1f912, 0xfbc817f6, 0xfe0a12cc, 0x230cffdf, 0xb50b0cfb,
    // 34, -24, -18, 32, 49, 40, -17, 25, -38, -15, 10, -57, -45, 16, -36, -44, -67, 96, 27, 97, -2, -38, 35, 49, -25, -8, 3, -44, 20, -27, -4, -50
    0x20eee822, 0x19ef2831, 0xc70af1da, 0xd4dc10d3, 0x611b60bd, 0x3123dafe, 0xd403f8e7, 0xcefce514,
    // -4, -46, 25, 25, 38, 29, 57, 57, 64, -16, -4, 40, -38, 65, -5, -49, 50, -78, 12, 17, 7, 24, 80, 47, -37, 5, -1, 42, -39, -31, 20, 19
    0x1919d2fc, 0x39391d26, 0x28fcf040, 0xcffb41da, 0x110cb232, 0x2f501807, 0x2aff05db, 0x1314e1d9,
    // -15, 34, -15, -20, 9, 0, -36, 23, 10, 11, -88, -60, -24, -12, 37, 9, -66, -7, 17, 43, -21, -38, 29, 17, -22, 7, 1, -30, -15, 1, 4, 3
    0xecf122f1, 0x17dc0009, 0xc4a80b0a, 0x925f4e8, 0x2b11f9be, 0x111ddaeb, 0xe20107ea, 0x30401f1,
    // -10, 2, -13, 11, 9, -8, 3, -58, 9, -36, -11, -42, 31, 11, 18, 18, -25, 36, -46, 27, -14, -22, 18, -15, 57, 30, 23, -66, 26, -6, -45, 8
    0xbf302f6, 0xc603f809, 0xd6f5dc09, 0x12120b1f, 0x1bd224e7, 0xf112eaf2, 0xbe171e39, 0x8d3fa1a,
    // -3, 47, -5, 11, 34, 44, -67, -46, -27, 20, 21, 52, -38, 47, 39, 13, 55, 45, -19, 6, -50, -11, 53, -4, -3, -16, -31, 46, 47, -5, 16, -24
    0xbfb2ffd, 0xd2bd2c22, 0x341514e5, 0xd272fda, 0x6ed2d37, 0xfc35f5ce, 0x2ee1f0fd, 0xe810fb2f,
    // 10, 14, -32, 31, 55, -51, 13, 30, -17, 24, 7, 8, 20, 8, 8, 25, 25, -23, -11, 32, -21, 51, 67, 22, -45, -48, -17, 4, -27, 17, 46, -28
    0x1fe00e0a, 0x1e0dcd37, 0x80718ef, 0x19080814, 0x20f5e919, 0x164333eb, 0x4efd0d3, 0xe42e11e5,
    // 12, -36, -12, -10, 10, 5, 18, -42, 8, -14, 90, 42, 35, 32, -20, 13, -22, 44, -10, 30, 41, -15, -66, 33, 10, -35, 32, -69, 10, 8, 43, -32
    0xf6f4dc0c, 0xd612050a, 0x2a5af208, 0xdec2023, 0x1ef62cea, 0x21bef129, 0xbb20dd0a, 0xe02b080a,
    // -8, -4, -12, -36, 19, -12, -3, 6, 24, -4, -8, -18, 11, 34, 24, 23, -7, 20, 64, -68, -46, 2, -49, 8, -10, 28, -40, -73, 22, 18, 41, -30
    0xdcf4fcf8, 0x6fdf413, 0xeef8fc18, 0x1718220b, 0xbc4014f9, 0x8cf02d2, 0xb7d81cf6, 0xe2291216,
    // -12, -8, -18, -19, 27, 13, 10, 8, 35, -2, 25, 12, 12, -16, 19, 20, -30, -47, -59, 20, -26, 24, 25, -35, -14, 40, 23, -18, 82, -25, -17, 19
    0xedeef8f4, 0x80a0d1b, 0xc19fe23, 0x1413f00c, 0x14c5d1e2, 0xdd1918e6, 0xee1728f2, 0x13efe752,
    // -76, -55, 59, -46, 42, -63, -72, 31, 27, 19, 54, -10, -46, -43, -3, -30, 13, -25, -6, -6, 0, 1, 2, 17, 5, 18, -2, -5, -5, 10, -3, -24
    0xd23bc9b4, 0x1fb8c12a, 0xf636131b, 0xe2fdd5d2, 0xfafae70d, 0x11020100, 0xfbfe1205, 0xe8fd0afb,
    // -23, 2, -1, -50, -22, -16, 30, -12, -14, -61, -12, -25, 7, -25, 33, -2, 28, 26, -23, 49, 22, 21, -56, -15, -47, 66, -14, -24, -27, -50, 23, -48
    0xceff02e9, 0xf41ef0ea, 0xe7f4c3f2, 0xfe21e707, 0x31e91a1c, 0xf1c81516, 0xe8f242d1, 0xd017cee5,
    // 5, -19, -20, -13, 11, -3, 6, 34, -41, 2, 15, 31, -19, 2, -22, 42, 19, -52, 29, 24, 11, 18, 5, 39, -68, -14, -16, 43, -36, -1, 92, 11
    0xf3eced05, 0x2206fd0b, 0x1f0f02d7, 0x2aea02ed, 0x181dcc13, 0x2705120b, 0x2bf0f2bc, 0xb5cffdc,
    // 90, 40, -80, 49, -25, 58, 51, -43, -18, -27, -65, 12, 44, 49, 19, 45, 23, -8, 14, -10, 0, 14, 0, 15, -1, -1, 0, 23, -9, 17, 12, 3
    0x31b0285a, 0xd5333ae7, 0xcbfe5ee, 0x2d13312c, 0xf60ef817, 0xf000e00, 0x1700ffff, 0x30c11f7,
    // -35, 11, -38, -52, 16, -23, 50, 33, 61, 37, 15, 45, -14, 3, 17, 62, 65, -99, 11, 24, 39, 58, -27, 40, -19, -85, -11, 10, -51, -27, 74, 19
    0xccda0bdd, 0x2132e910, 0x2d0f253d, 0x3e1103f2, 0x180b9d41, 0x28e53a27, 0xaf5abed, 0x134ae5cd,
    // 25, -43, 25, 21, 15, 27, -48, -3, -1, 23, -21, -19, 19, 11, -2, -15, 20, 16, -20, 31, -2, -23, -115, -8, -2, -76, 34, -30, 31, 27, 18, -7
    0x1519d519, 0xfdd01b0f, 0xedeb17ff, 0xf1fe0b13, 0x1fec1014, 0xf88de9fe, 0xe222b4fe, 0xf9121b1f,
    // 36, -65, -33, 8, -16, -71, 65, 46, 26, 11, -15, -56, 35, -34, -32, -24, -52, 62, -10, 4, -29, 46, -43, 42, 7, -3, -2, 0, -85, -23, 18, 37
    0x8dfbf24, 0x2e41b9f0, 0xc8f10b1a, 0xe8e0de23, 0x4f63ecc, 0x2ad52ee3, 0xfefd07, 0x2512e9ab,
    // 87, -48, 73, -79, -14, 49, -1, 16, -15, 38, 44, -30, 17, 36, 73, 5, -26, -57, 13, 17, -24, -16, 69, 17, -6, -9, -37, -7, -72, 10, 18, -8
    0xb149d057, 0x10ff31f2, 0xe22c26f1, 0x5492411, 0x110dc7e6, 0x1145f0e8, 0xf9dbf7fa, 0xf8120ab8,
    // 25, 12, 22, 9, -9, -53, 5, -34, -18, 22, 2, 0, -49, 78, -48, 36, 42, -9, -26, 0, 7, 14, 12, 6, -13, 0, -11, -17, -13, 10, -9, 4
    0x9160c19, 0xde05cbf7, 0x216ee, 0x24d04ecf, 0xe6f72a, 0x60c0e07, 0xeff500f3, 0x4f70af3,
    // 27, 46, -27, -51, 16, -25, 31, -19, 0, -29, 46, 13, -18, -10, 7, 16, 13, -65, -16, -71, 1, 30, 40, -41, 11, -15, 15, -14, 12, -44, 26, 50
    0xcde52e1b, 0xed1fe710, 0xd2ee300, 0x1007f6ee, 0xb9f0bf0d, 0xd7281e01, 0xf20ff10b, 0x321ad40c,
    // -28, -70, 29, 9, 70, 72, 58, -63, -58, 9, -60, -22, -57, -32, -49, 51, 7, 36, -3, -16, -26, 37, -41, -2, 5, -31, -25, 5, -6, -21, 16, 30
    0x91dbae4, 0xc13a4846, 0xeac409c6, 0x33cfe0c7, 0xf0fd2407, 0xfed725e6, 0x5e7e105, 0x1e10ebfa,
    // -16, -9, -43, -7, 27, -36, 7, 30, -37, -46, 18, 1, -23, -18, -22, 2, 57, 72, 36, -25, -5, 14, 7, 6, 0, 1, -20, 16, 85, -78, 24, -4
    0xf9d5f7f0, 0x1e07dc1b, 0x112d2db, 0x2eaeee9, 0xe7244839, 0x6070efb, 0x10ec0100, 0xfc18b255,
    // -100, -114, -42, 85, -44, -38, -21, -59, -77, -82, 36, -92, -5, 36, 100, 30, -8, -48, -11, 40, 54, -14, 47, -20, -20, 1, 62, 14, 4, 28, 28, 51
    0x55d68e9c, 0xc5ebdad4, 0xa424aeb3, 0x1e6424fb, 0x28f5d0f8, 0xec2ff236, 0xe3e01ec, 0x331c1c04,
    // 1, 4, -5, -18, -8, 39, -9, 4, -10, -3, -4, -17, 4, -24, -2, -12, -3, 16, -29, 13, -23, 17, -8, 21, -17, -4, 56, 69, -23, 10, 52, -48
    0xeefb0401, 0x4f727f8, 0xeffcfdf6, 0xf4fee804, 0xde310fd, 0x15f811e9, 0x4538fcef, 0xd0340ae9,
    // -14, -38, -64, -12, -10, 42, -13, 35, -21, -3, 31, 4, -38, -22, 27, -33, 16, -73, 37, 22, 6, 9, -10, 17, -54, -30, 7, 41, 6, 13, 33, -20
    0xf4c0daf2, 0x23f32af6, 0x41ffdeb, 0xdf1beada, 0x1625b710, 0x11f60906, 0x2907e2ca, 0xec210d06,
    // 2, -3, -29, -75, 15, -9, -9, 34, 34, -64, -26, -26, 45, -5, -29, 55, -17, 30, 52, -17, 44, -13, 30, 52, 31, -27, -43, 19, -11, 17, -14, 46
    0xb5e3fd02, 0x22f7f70f, 0xe6e6c022, 0x37e3fb2d, 0xef341eef, 0x341ef32c, 0x13d5e51f, 0x2ef211f5,
    // -8, 1, 22, -27, -29, 16, -16, -16, 19, -69, -3, -11, 23, -1, -45, 23, 25, -5, -28, 11, -32, 52, -1, 7, -55, -28, -28, 28, -22, -44, 37, -67
    0xe51601f8, 0xf0f010e3, 0xf5fdbb13, 0x17d3ff17, 0xbe4fb19, 0x7ff34e0, 0x1ce4e4c9, 0xbd25d4ea,
    // -8, -9, 35, 2, -15, -27, -3, -2, -26, -15, 26, 22, -11, 4, 17, 1, -57, -10, 37, -12, 24, 5, -3, 51, -9, 0, -54, -29, 83, -60, 51, 45
    0x223f7f8, 0xfefde5f1, 0x161af1e6, 0x11104f5, 0xf425f6c7, 0x33fd0518, 0xe3ca00f7, 0x2d33c453,
    // 9, 13, 5, -7, 2, 10, -6, -16, -6, 3, 18, -25, -15, -8, 0, -32, 71, -11, 39, 35, 47, -27, -26, -5, -78, 21, -68, -3, -36, -23, 2, 19
    0xf9050d09, 0xf0fa0a02, 0xe71203fa, 0xe000f8f1, 0x2327f547, 0xfbe6e52f, 0xfdbc15b2, 0x1302e9dc,
    // -32, -46, -46, -70, 17, -3, -5, -50, -8, 27, -24, 38, 40, 39, -48, -61, 6, 8, 4, 35, 25, 16, 119, 22, -32, -9, 3, 19, -18, -24, 7, 18
    0xbad2d2e0, 0xcefbfd11, 0x26e81bf8, 0xc3d02728, 0x23040806, 0x16771019, 0x1303f7e0, 0x1207e8ee,
    // 55, 39, -12, -44, 34, -5, -14, 26, -59, -19, -32, -18, -11, -32, -29, -73, 35, -78, 14, -21, -8, -2, -28, 24, 5, 40, -17, 18, 22, 6, 27, -20
    0xd4f42737, 0x1af2fb22, 0xeee0edc5, 0xb7e3e0f5, 0xeb0eb223, 0x18e4fef8, 0x12ef2805, 0xec1b0616,
    // 28, 71, -50, -16, -13, -54, -44, 65, 58, -4, 60, 19, 49, 33, 37, -46, -2, 4, 12, 10, -22, -6, 29, 32, -9, -9, -44, 36, -23, 13, 10, -7
    0xf0ce471c, 0x41d4caf3, 0x133cfc3a, 0xd2252131, 0xa0c04fe, 0x201dfaea, 0x24d4f7f7, 0xf90a0de9,
    // -8, -5, -4, 10, 10, -1, 14, -13, 12, -6, 5, 5, -17, 18, 7, 47, 48, -86, 36, 52, 95, -15, -27, -74, -48, -61, -43, 37, -6, -57, 14, 32
    0xafcfbf8, 0xf30eff0a, 0x505fa0c, 0x2f0712ef, 0x3424aa30, 0xb6e5f15f, 0x25d5c3d0, 0x200ec7fa,
    // 8, -25, -39, -11, 65, 22, 46, 49, 28, 47, 30, 4, 13, 13, 41, 95, 38, 45, 23, 30, 15, 23, 67, 5, -40, -44, -21, 15, -16, -25, 8, -10
    0xf5d9e708, 0x312e1641, 0x41e2f1c, 0x5f290d0d, 0x1e172d26, 0x543170f, 0xfebd4d8, 0xf608e7f0,
    // 15, 12, 56, 25, -12, -43, -13, -30, 5, 19, -18, 2, 10, 34, -30, -8, 3, -8, -23, 0, -22, 48, 23, 35, 4, -3, -16, -13, 10, 2, 88, 31
    0x19380c0f, 0xe2f3d5f4, 0x2ee1305, 0xf8e2220a, 0xe9f803, 0x231730ea, 0xf3f0fd04, 0x1f58020a,
    // -21, -40, -63, -6, -46, 43, -14, 9, -36, -27, 34, 10, -69, -18, 17, -37, -18, -14, 8, -10, -30, -11, 6, 8, 16, 15, -40, 34, 3, -1, 18, -12
    0xfac1d8eb, 0x9f22bd2, 0xa22e5dc, 0xdb11eebb, 0xf608f2ee, 0x806f5e2, 0x22d80f10, 0xf412ff03,
    // 7, 5, 25, 15, 2, -8, 4, -5, -15, 15, 22, 15, 2, 12, 3, 1, -19, -11, -26, 35, -4, 30, -58, -10, -40, 23, 7, -37, -107, -9, -17, -38
    0xf190507, 0xfb04f802, 0xf160ff1, 0x1030c02, 0x23e6f5ed, 0xf6c61efc, 0xdb0717d8, 0xdaeff795,
    // 1, 18, 5, 44, -9, 16, -3, -23, 9, 9, 6, 28, 1, -4, -17, -10, 66, 17, -17, 50, -10, 50, -28, 0, -42, 41, 14, -11, 94, -13, 18, -34
    0x2c051201, 0xe9fd10f7, 0x1c060909, 0xf6effc01, 0x32ef1142, 0xe432f6, 0xf50e29d6, 0xde12f35e,
    // 1, 20, 8, -50, 33, 8, 15, -13, 9, -44, -15, -7, -11, -6, -21, 29, 0, 31, -22, 18, 19, -13, 7, -2, -57, -7, -7, 39, -22, -4, -21, -63
    0xce081401, 0xf30f0821, 0xf9f1d409, 0x1debfaf5, 0x12ea1f00, 0xfe07f313, 0x27f9f9c7, 0xc1ebfcea,
    // 41, -27, -34, 28, 26, 31, -34, -6, 21, -8, -13, -1, 10, 19, -12, 31, 73, -13, 49, -86, -5, -28, -45, 73, 10, -62, 15, -12, 58, -10, -21, 23
    0x1cdee529, 0xfade1f1a, 0xfff3f815, 0x1ff4130a, 0xaa31f349, 0x49d3e4fb, 0xf40fc20a, 0x17ebf63a,
    // -10, -1, -23, -28, 44, 62, 2, 27, 26, 3, 22, -14, 31, -73, 26, -31, -1, -17, 25, -11, 0, -10, -11, -2, 3, 7, 22, -14, 1, -7, -21, -19
    0xe4e9fff6, 0x1b023e2c, 0xf216031a, 0xe11ab71f, 0xf519efff, 0xfef5f600, 0xf2160703, 0xedebf901,
    // 1, 20, 22, 9, 30, 54, -70, -17, 1, -31, 10, 31, 5, 18, 15, 34, 14, 9, 22, 31, 17, -10, 68, 6, 34, -13, -36, 16, 17, 71, -20, 50
    0x9161401, 0xefba361e, 0x1f0ae101, 0x220f1205, 0x1f16090e, 0x644f611, 0x10dcf322, 0x32ec4711,
    // 26, 60, 34, 40, 8, 5, 8, 69, 17, -8, -2, -42, -57, -44, 44, 59, 16, -51, 2, -11, 10, 10, -99, 36, -33, -16, -33, 65, -21, 6, 34, 5
    0x28223c1a, 0x45080508, 0xd6fef811, 0x3b2cd4c7, 0xf502cd10, 0x249d0a0a, 0x41dff0df, 0x52206eb,
    // -3, 8, 15, 15, 28, -19, -41, 12, -28, 11, -25, 52, 37, 5, 12, -17, 34, -6, -82, -41, -65, -15, -1, 87, -24, -14, 45, 27, -19, 0, 10, -14
    0xf0f08fd, 0xcd7ed1c, 0x34e70be4, 0xef0c0525, 0xd7aefa22, 0x57fff1bf, 0x1b2df2e8, 0xf20a00ed,
    // 8, 9, 1, -13, 60, -28, 33, 40, -44, 14, -13, -5, 14, 20, 5, -13, -29, -27, 35, 10, 84, -24, -26, 41, 3, -80, -53, 79, -28, -10, -10, 4
    0xf3010908, 0x2821e43c, 0xfbf30ed4, 0xf305140e, 0xa23e5e3, 0x29e6e854, 0x4fcbb003, 0x4f6f6e4,
    // 86, -54, -38, 1, 29, -70, -92, -55, 67, -12, -47, 52, -48, -56, 45, 11, 13, -30, 2, -14, 3, 12, -11, 8, 4, 6, 9, 11, -5, -11, 6, 0
    0x1daca56, 0xc9a4ba1d, 0x34d1f443, 0xb2dc8d0, 0xf202e20d, 0x8f50c03, 0xb090604, 0x6f5fb,
    // 12, 2, -12, 56, -19, -54, 64, -47, -47, 88, 21, 12, -32, -3, 67, -61, -2, 63, -45, 36, -75, 0, 5, -25, -70, -30, -46, 58, -67, -63, 28, -69
    0x38f4020c, 0xd140caed, 0xc1558d1, 0xc343fde0, 0x24d33ffe, 0xe70500b5, 0x3ad2e2ba, 0xbb1cc1bd,
    // -7, -12, -18, 25, -14, 6, -12, -18, 6, 11, 9, -3, -18, 18, 24, 12, -54, -10, -17, -17, -46, 44, 55, 38, 14, -30, 30, 31, 18, 87, -22, 4
    0x19eef4f9, 0xeef406f2, 0xfd090b06, 0xc1812ee, 0xefeff6ca, 0x26372cd2, 0x1f1ee20e, 0x4ea5712,
    // 9, 64, -52, -42, -11, -13, -61, -40, -40, 59, 44, -56, 27, -74, -31, 66, -44, 18, -22, 27, 16, -7, -85, 29, -27, -39, -13, 27, 21, -11, 11, 8
    0xd6cc4009, 0xd8c3f3f5, 0xc82c3bd8, 0x42e1b61b, 0x1bea12d4, 0x1dabf910, 0x1bf3d9e5, 0x80bf515,
    // 11, 2, 30, 13, -11, -9, 6, -16, -9, -15, -8, -2, -21, 9, -12, 3, -35, 19, 27, -33, -32, -9, -9, -5, 28, 25, 21, 1, 31, 18, -48, -52
    0xd1e020b, 0xf006f7f5, 0xfef8f1f7, 0x3f409eb, 0xdf1b13dd, 0xfbf7f7e0, 0x115191c, 0xccd0121f,
};
static const uint embedded_encoder3_ResidualBlock_0_body_pw_expand_bias_dwords[32] = {
    // -0.0587, -0.1627, -0.03604, -0.314, -0.05014, -0.033, -0.056, -0.00356, -0.05255, -0.01863, -0.0821, -0.1323, -0.216, -0.010994, -0.03906, -0.08435
    0xb135ab83, 0xb506a89d, 0xa839aa6b, 0x9b4aab2b, 0xa4c5aaba, 0xb03cad41, 0xa1a1b2e9, 0xad66a900,
    // -0.0784, -0.0646, -0.3025, -0.01982, -0.0729, -0.07104, -0.08057, -0.0671, -0.02147, -0.1232, 0.05624, -0.00885, -0.03534, -0.04947, -0.04117, -0.055
    0xac22ad05, 0xa513b4d7, 0xac8cacaa, 0xac4bad28, 0xafe3a57f, 0xa0882b33, 0xaa55a886, 0xab0aa945,
    // 0.06445, -0.0007615, -0.03079, -0.079, -0.0845, -0.1078, 0.04538, -0.007107, 0.001247, -0.1547, -0.1224, -0.0333, 0.02939, -0.0375, -0.1587, -0.0102
    0x923d2c20, 0xad0ea7e2, 0xaee6ad68, 0x9f4729cf, 0xb0f3151c, 0xa843afd5, 0xa8cd2786, 0xa139b114,
    // -0.1412, -0.1163, -0.1296, -0.0895, -0.09454, -0.2336, 0.0437, -0.03458, -0.04977, -0.06082, -0.1522, -0.01663, -0.0334, -0.102, -0.04495, -0.139
    0xaf71b085, 0xadbab026, 0xb37aae0d, 0xa86d2998, 0xabc9aa5f, 0xa442b0df, 0xae87a846, 0xb073a9c1,
};
static const uint embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -2, -47, -20, 4, -15, 7, -28, 38, 30, 6, 49, 9, 20, -12, -5, 5, 11, 4, -2, 8, 5, -24, 9, -2, 22, 26, -4, 0, 25, -6, -23, 60
    0x4ecd1fe, 0x26e407f1, 0x931061e, 0x5fbf414, 0x8fe040b, 0xfe09e805, 0xfc1a16, 0x3ce9fa19,
    // 10, 0, 3, 9, 9, 19, 0, 1, 39, 1, -13, -15, -78, 0, -10, 38, 34, 24, 20, 19, 3, -4, 21, 10, -45, -22, -23, -2, -7, 9, -36, -4
    0x903000a, 0x1001309, 0xf1f30127, 0x26f600b2, 0x13141822, 0xa15fc03, 0xfee9ead3, 0xfcdc09f9,
    // -40, -45, 28, 14, -57, 7, -10, -49, -22, 14, -29, -3, 0, 29, 12, -23, 17, 25, 13, -13, 20, 6, 0, -53, 11, 27, 14, 11, 48, 25, 12, 7
    0xe1cd3d8, 0xcff607c7, 0xfde30eea, 0xe90c1d00, 0xf30d1911, 0xcb000614, 0xb0e1b0b, 0x70c1930,
    // 9, -6, 7, 16, 18, -7, -4, 26, -7, 19, -35, 85, -12, -29, 0, 24, -7, 16, -10, -9, -28, -5, -24, 9, 34, -20, -18, 21, 1, 40, 82, 8
    0x1007fa09, 0x1afcf912, 0x55dd13f9, 0x1800e3f4, 0xf7f610f9, 0x9e8fbe4, 0x15eeec22, 0x8522801,
    // 7, -27, 13, -24, 65, 12, 42, 20, -4, -3, 2, 32, -17, -2, 5, 4, -11, -18, -66, -12, -46, 7, -19, -11, 7, 25, -74, 11, -8, 35, 4, 5
    0xe80de507, 0x142a0c41, 0x2002fdfc, 0x405feef, 0xf4beeef5, 0xf5ed07d2, 0xbb61907, 0x50423f8,
    // -10, 6, 0, 0, -15, -8, -24, -18, 7, -2, 15, 22, 53, -21, 0, -16, -42, 49, 0, 6, 17, 7, 19, -19, -27, 28, -23, -6, 5, 4, 1, -10
    0x6f6, 0xeee8f8f1, 0x160ffe07, 0xf000eb35, 0x60031d6, 0xed130711, 0xfae91ce5, 0xf6010405,
    // 51, 51, -1, -5, -54, 17, -22, -35, -15, -31, -29, -72, -58, -48, -5, -16, -4, 34, 35, -21, -43, 24, 1, 4, -17, 19, 32, 8, 35, -3, 11, -13
    0xfbff3333, 0xddea11ca, 0xb8e3e1f1, 0xf0fbd0c6, 0xeb2322fc, 0x40118d5, 0x82013ef, 0xf30bfd23,
    // -30, 16, -4, 11, 13, 7, 74, -63, 23, -11, -15, -29, 6, -23, 33, 31, 88, -34, 30, 10, 37, -5, 38, -27, -9, 6, -35, -23, -5, -5, -21, -19
    0xbfc10e2, 0xc14a070d, 0xe3f1f517, 0x1f21e906, 0xa1ede58, 0xe526fb25, 0xe9dd06f7, 0xedebfbfb,
    // -21, -58, -35, -10, -22, -28, -38, 1, -13, 1, -90, -12, 23, 1, 22, 39, 1, 52, -62, 25, -5, 43, 20, 8, -11, 26, -32, -13, 19, -25, 14, -87
    0xf6ddc6eb, 0x1dae4ea, 0xf4a601f3, 0x27160117, 0x19c23401, 0x8142bfb, 0xf3e01af5, 0xa90ee713,
    // -26, 31, 17, 29, 2, -32, 13, -5, 34, -38, -11, 22, -2, 4, 0, 8, 39, 18, -20, -9, 2, -10, 43, -3, -3, 14, -24, 0, 2, 35, 4, -26
    0x1d111fe6, 0xfb0de002, 0x16f5da22, 0x80004fe, 0xf7ec1227, 0xfd2bf602, 0xe80efd, 0xe6042302,
    // 16, -21, 67, -15, -25, 19, 60, -58, 2, 1, 36, -14, -1, 13, 62, -35, -2, 20, -15, -13, -68, -11, 6, -20, -20, -15, -13, -1, -70, -51, 12, 39
    0xf143eb10, 0xc63c13e7, 0xf2240102, 0xdd3e0dff, 0xf3f114fe, 0xec06f5bc, 0xfff3f1ec, 0x270ccdba,
    // -78, -19, -11, 12, -22, 1, 29, -23, 69, 4, 43, -85, 33, 37, -4, -19, -28, -60, -27, -55, -40, -58, 52, 13, 28, 20, 16, -18, 7, -9, -31, 7
    0xcf5edb2, 0xe91d01ea, 0xab2b0445, 0xedfc2521, 0xc9e5c4e4, 0xd34c6d8, 0xee10141c, 0x7e1f707,
    // 6, 0, -10, -23, 27, -30, 10, 51, 68, 12, -22, 11, -21, 11, -34, 43, -52, -15, 6, 27, 41, -23, 50, -12, 31, 12, -4, 33, -12, -5, 66, -9
    0xe9f60006, 0x330ae21b, 0xbea0c44, 0x2bde0beb, 0x1b06f1cc, 0xf432e929, 0x21fc0c1f, 0xf742fbf4,
    // -20, 52, 65, 48, 31, 31, -20, 36, -29, 23, -19, -119, -19, 64, 13, 23, -6, -42, 4, -5, 31, 16, 15, 25, -100, 17, 55, 6, 40, -21, -86, -17
    0x304134ec, 0x24ec1f1f, 0x89ed17e3, 0x170d40ed, 0xfb04d6fa, 0x190f101f, 0x637119c, 0xefaaeb28,
    // -10, 71, -3, -15, -29, -33, 37, -44, 40, 30, 14, -15, -5, 43, -20, -5, -15, 2, 4, -6, -19, -28, 0, -38, 15, 20, 24, -8, 35, -2, 9, -29
    0xf1fd47f6, 0xd425dfe3, 0xf10e1e28, 0xfbec2bfb, 0xfa0402f1, 0xda00e4ed, 0xf818140f, 0xe309fe23,
    // -74, -9, -7, -33, -19, -39, -20, 12, -32, 14, -13, 8, 7, 34, -6, 96, -6, 31, 6, -22, 57, -4, 45, 19, -17, 88, -15, 15, 7, 3, -6, 53
    0xdff9f7b6, 0xcecd9ed, 0x8f30ee0, 0x60fa2207, 0xea061ffa, 0x132dfc39, 0xff158ef, 0x35fa0307,
    // -9, 13, 24, 4, -55, -39, 1, -34, -49, 56, -55, -25, -6, 19, -42, -16, 30, 10, 43, 6, 32, 16, -11, -18, 31, 16, 30, 33, 1, 37, 1, -73
    0x4180df7, 0xde01d9c9, 0xe7c938cf, 0xf0d613fa, 0x62b0a1e, 0xeef51020, 0x211e101f, 0xb7012501,
    // -24, -26, 25, 8, 22, 11, 56, 39, -17, -10, 11, 36, 5, -3, -26, 9, 13, -47, -28, -15, -4, 5, 1, 23, 38, -10, 36, 16, 14, -20, 26, -13
    0x819e6e8, 0x27380b16, 0x240bf6ef, 0x9e6fd05, 0xf1e4d10d, 0x170105fc, 0x1024f626, 0xf31aec0e,
    // 51, 50, -3, 31, -52, -40, -19, -37, -16, -7, 19, -22, 36, -6, -24, -20, -28, 19, 20, -7, 24, -3, 16, -15, -36, 38, 46, -27, -20, 13, 12, -4
    0x1ffd3233, 0xdbedd8cc, 0xea13f9f0, 0xece8fa24, 0xf91413e4, 0xf110fd18, 0xe52e26dc, 0xfc0c0dec,
    // -8, -45, 21, 40, -17, -12, -4, -2, -3, 13, 18, -9, 5, 4, -17, -16, 14, 33, -29, -18, 4, -4, -21, 16, -14, 63, 42, -5, 0, 19, -37, 12
    0x2815d3f8, 0xfefcf4ef, 0xf7120dfd, 0xf0ef0405, 0xeee3210e, 0x10ebfc04, 0xfb2a3ff2, 0xcdb1300,
    // -41, 6, 10, 2, 35, 52, 34, 15, 3, 15, -5, 18, 8, -39, -4, 8, 42, -15, -24, 16, -61, 4, -14, -15, 11, 15, -93, -5, -25, 37, -13, -29
    0x20a06d7, 0xf223423, 0x12fb0f03, 0x8fcd908, 0x10e8f12a, 0xf1f204c3, 0xfba30f0b, 0xe3f325e7,
    // -3, -4, 9, 9, -3, 24, -18, 25, 6, 5, 33, -15, -28, -11, -7, 35, 16, -43, 50, 26, 52, -8, -4, -17, 46, -40, -50, 11, 12, -13, -8, -39
    0x909fcfd, 0x19ee18fd, 0xf1210506, 0x23f9f5e4, 0x1a32d510, 0xeffcf834, 0xbced82e, 0xd9f8f30c,
    // 31, 79, 11, -2, 4, 4, 25, 38, 13, 43, 18, -5, 16, 16, -23, 3, -60, -45, 2, 10, -33, -24, 1, 1, 26, 54, 1, 34, 2, 23, 16, 7
    0xfe0b4f1f, 0x26190404, 0xfb122b0d, 0x3e91010, 0xa02d3c4, 0x101e8df, 0x2201361a, 0x7101702,
    // -65, -24, 32, 6, 10, -64, 44, 13, -21, -52, -10, -63, 8, 41, -18, -79, 46, -69, 11, 33, 60, 33, 46, 29, -89, 10, 43, 15, 7, 34, -58, 25
    0x620e8bf, 0xd2cc00a, 0xc1f6cceb, 0xb1ee2908, 0x210bbb2e, 0x1d2e213c, 0xf2b0aa7, 0x19c62207,
    // 37, -3, 30, -27, 50, -21, -8, -65, -48, 34, -31, 27, -36, -6, 2, -38, -28, -39, 6, 16, -37, 7, -2, -26, 16, -7, 49, 38, 48, -46, 20, -46
    0xe51efd25, 0xbff8eb32, 0x1be122d0, 0xda02fadc, 0x1006d9e4, 0xe6fe07db, 0x2631f910, 0xd214d230,
    // 72, 3, 48, -17, 19, -32, -43, -10, 23, 3, -8, -49, -4, 26, 23, -42, -24, 17, -2, -26, 14, 2, -73, 27, -40, 10, 81, 16, 14, -30, -52, 49
    0xef300348, 0xf6d5e013, 0xcff80317, 0xd6171afc, 0xe6fe11e8, 0x1bb7020e, 0x10510ad8, 0x31cce20e,
    // 14, 30, 5, -20, 28, 17, 8, -36, -22, -1, -34, -3, 28, 45, 42, -23, -30, 20, 3, -11, -31, 15, 0, 29, -4, 17, -14, -4, 18, 8, 17, -24
    0xec051e0e, 0xdc08111c, 0xfddeffea, 0xe92a2d1c, 0xf50314e2, 0x1d000fe1, 0xfcf211fc, 0xe8110812,
    // 43, 34, -3, 29, -13, -33, -47, -26, 26, 9, 19, -28, 10, 10, 11, -41, -46, 55, 45, 44, 15, -21, 0, -5, -16, 41, 6, -2, -14, 41, -19, -15
    0x1dfd222b, 0xe6d1dff3, 0xe413091a, 0xd70b0a0a, 0x2c2d37d2, 0xfb00eb0f, 0xfe0629f0, 0xf1ed29f2,
    // -6, 25, -58, 0, -47, -33, 9, 45, 5, -74, 41, 5, 15, -30, 22, 9, 5, 41, -6, -17, -15, 2, 26, 7, -63, 3, 22, -45, 99, -23, -10, 39
    0xc619fa, 0x2d09dfd1, 0x529b605, 0x916e20f, 0xeffa2905, 0x71a02f1, 0xd31603c1, 0x27f6e963,
    // 29, 13, 2, 7, -21, 1, -34, -24, -9, 28, -39, -8, -41, -19, 25, 62, -28, 45, -6, 16, -28, 2, -40, -2, -51, 9, -20, -31, -17, 50, -27, 26
    0x7020d1d, 0xe8de01eb, 0xf8d91cf7, 0x3e19edd7, 0x10fa2de4, 0xfed802e4, 0xe1ec09cd, 0x1ae532ef,
    // -11, 48, 0, -10, -67, -23, 10, 45, -38, 9, 25, -24, 16, -31, 12, -44, 34, 16, 31, -16, 0, -28, 12, -11, -26, 50, -8, -1, 68, 1, 9, 29
    0xf60030f5, 0x2d0ae9bd, 0xe81909da, 0xd40ce110, 0xf01f1022, 0xf50ce400, 0xfff832e6, 0x1d090144,
    // -62, -11, -23, -3, -10, 52, 24, 20, -21, -30, 4, -39, 40, 0, 13, -12, 61, -42, -24, -13, -23, 18, 45, -10, 71, 52, 9, -14, -3, -36, -18, 19
    0xfde9f5c2, 0x141834f6, 0xd904e2eb, 0xf40d0028, 0xf3e8d63d, 0xf62d12e9, 0xf2093447, 0x13eedcfd,
    // 78, 29, -33, 45, 22, 5, 4, -34, 75, -38, -24, 2, 3, -30, -6, 97, 80, 32, 10, 21, -30, 50, 28, 34, -44, 36, -9, -36, -34, -18, -13, 1
    0x2ddf1d4e, 0xde040516, 0x2e8da4b, 0x61fae203, 0x150a2050, 0x221c32e2, 0xdcf724d4, 0x1f3eede,
    // -44, -17, -1, -19, -36, 1, 7, -5, 11, 35, -59, 68, 26, 1, 5, 21, 29, -24, 20, 2, -2, 15, -2, -6, 76, -3, 11, -34, 15, 31, 72, 15
    0xedffefd4, 0xfb0701dc, 0x44c5230b, 0x1505011a, 0x214e81d, 0xfafe0ffe, 0xde0bfd4c, 0xf481f0f,
    // -16, -6, 9, 18, 1, -13, 9, 7, 73, 51, 25, -3, 53, 38, -11, -4, -9, -4, -27, -68, -26, -34, -1, 34, 38, -7, 36, 55, -2, -72, -85, 22
    0x1209faf0, 0x709f301, 0xfd193349, 0xfcf52635, 0xbce5fcf7, 0x22ffdee6, 0x3724f926, 0x16abb8fe,
    // 27, 13, -42, -7, 48, -10, 7, -76, -20, 12, 3, -21, 12, -71, 11, 4, 21, 25, -33, -38, -5, 13, 41, -64, -2, 20, 1, 53, -88, 32, -44, -4
    0xf9d60d1b, 0xb407f630, 0xeb030cec, 0x40bb90c, 0xdadf1915, 0xc0290dfb, 0x350114fe, 0xfcd420a8,
    // 53, 21, 22, 6, -15, 32, -47, -41, 6, 86, 27, -40, -5, -78, 4, -11, 13, 42, 27, -12, 20, 18, 33, 2, 76, 6, -9, 90, -9, 20, 2, 36
    0x6161535, 0xd7d120f1, 0xd81b5606, 0xf504b2fb, 0xf41b2a0d, 0x2211214, 0x5af7064c, 0x240214f7,
    // -11, 3, 16, 52, 91, -28, -32, -26, 26, -27, -46, 29, 5, 3, -18, -10, 18, -31, 26, 43, 63, -6, -36, -12, -1, 75, 34, 92, -6, -26, 26, 9
    0x341003f5, 0xe6e0e45b, 0x1dd2e51a, 0xf6ee0305, 0x2b1ae112, 0xf4dcfa3f, 0x5c224bff, 0x91ae6fa,
    // -22, 2, 1, 35, -37, 41, 50, 26, -19, 41, -55, 49, -6, -27, 38, -60, -29, -83, -26, 13, 23, -91, -11, 14, 43, 1, -4, 40, -15, -31, -27, -53
    0x230102ea, 0x1a3229db, 0x31c929ed, 0xc426e5fa, 0xde6ade3, 0xef5a517, 0x28fc012b, 0xcbe5e1f1,
    // 22, 43, 11, -30, 3, 15, 21, -12, 5, 39, -21, -20, -15, 7, -8, 35, -72, -42, -60, -60, 27, 33, 2, -39, -7, 26, 84, 49, -15, 2, -18, 3
    0xe20b2b16, 0xf4150f03, 0xeceb2705, 0x23f807f1, 0xc4c4d6b8, 0xd902211b, 0x31541af9, 0x3ee02f1,
    // -57, -70, -6, -12, 17, 41, -16, 12, -16, 55, 9, 12, -127, 31, 76, -35, -48, -4, 54, 63, 34, -46, 17, -6, 29, 9, 23, 3, 12, 3, 39, 2
    0xf4fabac7, 0xcf02911, 0xc0937f0, 0xdd4c1f81, 0x3f36fcd0, 0xfa11d222, 0x317091d, 0x227030c,
    // -32, -5, 72, -6, 9, 68, 31, 47, 55, 21, -52, -65, -6, 56, -95, 22, -6, 28, 8, 29, 50, -41, -11, 46, -39, -19, 26, 33, 58, -27, -58, -8
    0xfa48fbe0, 0x2f1f4409, 0xbfcc1537, 0x16a138fa, 0x1d081cfa, 0x2ef5d732, 0x211aedd9, 0xf8c6e53a,
    // 37, -17, -11, 27, -62, -68, -48, -28, -40, 16, 58, 53, -128, -27, -2, -10, 34, 89, 48, -8, 27, 76, 62, -34, 27, -66, 20, 12, -42, 7, -29, 62
    0x1bf5ef25, 0xe4d0bcc2, 0x353a10d8, 0xf6fee580, 0xf8305922, 0xde3e4c1b, 0xc14be1b, 0x3ee307d6,
    // -33, -59, -42, -3, 23, 15, 60, -42, -3, -1, 9, 6, 35, -34, 2, 21, 22, 27, -28, -14, -18, 40, -6, -1, 33, -17, 42, 12, -10, -87, 25, 14
    0xfdd6c5df, 0xd63c0f17, 0x609fffd, 0x1502de23, 0xf2e41b16, 0xfffa28ee, 0xc2aef21, 0xe19a9f6,
    // -5, 83, 41, -11, -67, 26, 84, -63, -101, -21, -14, -5, 71, 28, 4, -74, 2, -9, 13, -26, 19, 34, 54, -74, -31, 9, 7, -37, 11, 99, -4, -34
    0xf52953fb, 0xc1541abd, 0xfbf2eb9b, 0xb6041c47, 0xe60df702, 0xb6362213, 0xdb0709e1, 0xdefc630b,
    // 24, -33, -10, -23, -42, 12, 3, -12, 0, -11, -20, -33, 13, -15, 2, 50, -7, -16, 108, 94, -6, -2, -3, -41, 32, 56, 10, -26, 2, -73, -3, 15
    0xe9f6df18, 0xf4030cd6, 0xdfecf500, 0x3202f10d, 0x5e6cf0f9, 0xd7fdfefa, 0xe60a3820, 0xffdb702,
    // -27, 4, -29, -6, 19, 16, -28, 14, -32, -16, -9, -55, 3, 40, -15, -56, -42, -27, 12, 23, -24, -40, -57, 13, -37, -37, 11, -49, 7, 23, -26, -8
    0xfae304e5, 0xee41013, 0xc9f7f0e0, 0xc8f12803, 0x170ce5d6, 0xdc7d8e8, 0xcf0bdbdb, 0xf8e61707,
    // -18, 29, 24, 13, -35, 42, -3, 22, 9, -28, 43, -31, -15, -1, 24, -3, -4, 9, 7, 0, 5, -26, 12, -2, -78, -12, -45, -29, 11, 6, -39, -42
    0xd181dee, 0x16fd2add, 0xe12be409, 0xfd18fff1, 0x709fc, 0xfe0ce605, 0xe3d3f4b2, 0xd6d9060b,
    // 29, 71, -66, -12, 0, 42, 5, 10, 47, 14, 13, -12, 8, -58, 16, 45, 59, -18, -38, -30, -13, -29, -40, 22, 6, 30, -49, 20, -7, -39, -20, 3
    0xf4be471d, 0xa052a00, 0xf40d0e2f, 0x2d10c608, 0xe2daee3b, 0x16d8e3f3, 0x14cf1e06, 0x3ecd9f9,
    // -29, -16, -27, -54, -2, 34, 1, 6, 27, 16, 58, 92, 1, -33, 34, -16, 12, -34, -17, -13, 61, -9, 2, -36, 58, 14, 12, 26, -14, -6, 63, -42
    0xcae5f0e3, 0x60122fe, 0x5c3a101b, 0xf022df01, 0xf3efde0c, 0xdc02f73d, 0x1a0c0e3a, 0xd63ffaf2,
    // -5, -57, -14, 0, 1, -15, 41, 43, -4, -15, -11, 7, -35, -5, -1, -14, -29, -34, -11, 8, 7, 14, -35, -24, -9, -19, -36, -33, -21, 115, -5, -1
    0xf2c7fb, 0x2b29f101, 0x7f5f1fc, 0xf2fffbdd, 0x8f5dee3, 0xe8dd0e07, 0xdfdcedf7, 0xfffb73eb,
    // -11, 68, 9, 9, 3, 2, 19, 65, -17, 13, -37, -24, -36, -6, 19, 38, -7, -29, -7, -21, -10, -18, -29, 3, -36, -24, 12, -14, 5, 63, -10, -47
    0x90944f5, 0x41130203, 0xe8db0def, 0x2613fadc, 0xebf9e3f9, 0x3e3eef6, 0xf20ce8dc, 0xd1f63f05,
    // 23, 45, 15, -9, 28, 9, -10, 9, 35, 35, -27, -8, 77, 4, 16, 44, 30, -27, -31, 53, 2, -28, -52, 9, 29, 41, -26, 27, 19, -78, 66, -6
    0xf70f2d17, 0x9f6091c, 0xf8e52323, 0x2c10044d, 0x35e1e51e, 0x9cce402, 0x1be6291d, 0xfa42b213,
    // 37, -71, 45, -62, 36, 70, -15, 47, 13, 6, 27, 6, 7, 60, 7, 18, 38, 50, -18, -20, -5, -15, -23, 71, 38, 19, 4, 38, 56, -17, 3, 6
    0xc22db925, 0x2ff14624, 0x61b060d, 0x12073c07, 0xecee3226, 0x47e9f1fb, 0x26041326, 0x603ef38,
    // 6, 23, 15, 23, 50, 27, -12, 19, 55, -32, -11, -21, -46, 54, -32, 65, -9, 3, 38, 17, 22, 7, 18, 69, -37, 21, -29, -47, 50, 60, -8, -17
    0x170f1706, 0x13f41b32, 0xebf5e037, 0x41e036d2, 0x112603f7, 0x45120716, 0xd1e315db, 0xeff83c32,
    // 19, 67, -4, 22, -43, -20, 15, 19, -23, 84, 36, -5, -20, -3, -17, 7, 48, -9, 28, 20, -13, 41, -33, -28, -21, -51, -28, -23, -23, 5, -3, 3
    0x16fc4313, 0x130fecd5, 0xfb2454e9, 0x7effdec, 0x141cf730, 0xe4df29f3, 0xe9e4cdeb, 0x3fd05e9,
    // -8, 34, 19, -25, -17, -1, -3, -73, -47, -17, 9, -6, 1, 3, 13, -83, -27, -30, -27, 53, -24, 9, -15, -82, 21, 52, -12, 1, -26, 5, -7, 35
    0xe71322f8, 0xb7fdffef, 0xfa09efd1, 0xad0d0301, 0x35e5e2e5, 0xaef109e8, 0x1f43415, 0x23f905e6,
    // 13, -32, 30, -78, 3, -23, -8, 54, 9, -79, 41, -53, 27, 28, -20, 31, -31, 52, 45, -55, -10, -87, -23, 40, -38, 28, 25, 3, 30, 2, -46, 12
    0xb21ee00d, 0x36f8e903, 0xcb29b109, 0x1fec1c1b, 0xc92d34e1, 0x28e9a9f6, 0x3191cda, 0xcd2021e,
    // 26, -19, 54, 78, -12, 52, -15, 10, 56, -34, -21, -1, 62, 74, 19, 31, -49, 40, 37, -19, 32, -6, 74, 70, -74, -22, -3, -54, 11, 18, -7, -17
    0x4e36ed1a, 0xaf134f4, 0xffebde38, 0x1f134a3e, 0xed2528cf, 0x464afa20, 0xcafdeab6, 0xeff9120b,
    // -13, 70, 17, 86, -114, 55, -18, -48, 38, 56, 78, -16, -8, -12, 18, -24, -11, -36, 0, 18, -48, 42, 20, -61, -27, 35, 41, -43, -17, -8, -13, 27
    0x561146f3, 0xd0ee378e, 0xf04e3826, 0xe812f4f8, 0x1200dcf5, 0xc3142ad0, 0xd52923e5, 0x1bf3f8ef,
    // 16, 41, -8, -54, 19, -15, -32, -24, -14, 48, 26, -9, -29, 29, 13, 4, 12, 38, 23, 15, 0, 0, -5, -15, 36, -33, 50, 51, 30, -70, 32, 18
    0xcaf82910, 0xe8e0f113, 0xf71a30f2, 0x40d1de3, 0xf17260c, 0xf1fb0000, 0x3332df24, 0x1220ba1e,
    // -16, -51, 21, -46, 32, 4, 23, 17, -8, -15, 19, 2, 12, 34, 26, 5, 0, 21, -16, -21, 31, -36, -29, 27, -8, -18, 35, 41, 12, 4, -7, 32
    0xd215cdf0, 0x11170420, 0x213f1f8, 0x51a220c, 0xebf01500, 0x1be3dc1f, 0x2923eef8, 0x20f9040c,
    // 9, 8, -25, -15, 34, -68, 59, -27, -32, -59, 13, -43, 98, 53, -27, -7, -10, -15, 34, -23, -13, 48, 44, -32, -27, -12, 51, -51, 3, -22, -17, -7
    0xf1e70809, 0xe53bbc22, 0xd50dc5e0, 0xf9e53562, 0xe922f1f6, 0xe02c30f3, 0xcd33f4e5, 0xf9efea03,
    // -24, -61, -32, -23, -39, -24, 7, -12, -10, -30, -19, -43, -1, -49, -19, 4, 14, 14, 33, -9, -7, -38, 28, 11, 3, 3, 29, -32, -33, 54, -1, 40
    0xe9e0c3e8, 0xf407e8d9, 0xd5ede2f6, 0x4edcfff, 0xf7210e0e, 0xb1cdaf9, 0xe01d0303, 0x28ff36df,
};
static const uint embedded_encoder3_ResidualBlock_0_body_pw_contract_bias_dwords[16] = {
    // -8.13e-05, 0.00010914, -5.12e-05, 8.1e-05, -2.24e-05, -8.28e-05, -5.53e-05, -0.00011075, -6.67e-05, -0.0001724, -0.0001022, -4.98e-05, 0.0001465, -5.203e-05, -2.09e-05, -5.764e-05
    0x7278554, 0x54f835b, 0x856d8178, 0x874283a0, 0x89a6845f, 0x834486b3, 0x836908cd, 0x83c7815f,
    // 3.97e-05, -6.5e-06, -7.8e-06, 6.75e-05, -0.0001322, 0.00011396, 8.404e-05, 0.0001225, 5.376e-05, -0.0001029, 0.0001792, 1.75e-05, -8.994e-05, 0.0001619, -1.806e-05, -1.31e-05
    0x806d029a, 0x46c8083, 0x7788855, 0x8040582, 0x86be0386, 0x12609df, 0x94e85e5, 0x80dc812f,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass4(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = {
        uint3(960, 540, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 32), // threadGroupSliceSize
        uint3(960, 540, 32), // storageSize
        uint3(32, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        33177600, // threadGroupStorageByteOffset
        storage_Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped };
    
    const ConstantBufferStorage<576> storage_embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005027378909289837, storage_embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = { embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004323530476540327, storage_embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_encoder3_ResidualBlock_0_body_pw_expand_bias = { embedded_encoder3_ResidualBlock_0_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_encoder3_ResidualBlock_0_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_0_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004300548229366541, storage_embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder3_ResidualBlock_0_body_pw_contract_bias = { embedded_encoder3_ResidualBlock_0_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder3_ResidualBlock_0_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_0_body_pw_contract_bias };
    
    // /encoder3/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_8 = uint3(960, 540, 32);
    const int3 groupStart_slice_8 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_8 = uint3(64, 1, 32);
    const uint3 storageSize_slice_8 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_8 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_8 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_8 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_8 = dot(groupStart_slice_8, tensorByteStrides_slice_8);
    const RWBufferStorage storage_slice_8 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_8 = { logicalSize_slice_8, groupStart_slice_8, groupSize_slice_8, storageSize_slice_8, tensorByteStrides_slice_8, paddingBegin_slice_8, paddingEnd_slice_8, threadGroupByteOffsetInTensor_slice_8 + 49766400, storage_slice_8 };
    // Fusedquantized_/encoder3/ResidualBlock_0/residual_func/Concat_quantized_/encoder3/ResidualBlock_0/body/spatial_mixing/partial_conv/Conv_quantized_/encoder3/ResidualBlock_0/body/spatial_mixing/Concat_quantized_/encoder3/ResidualBlock_0/body/pw_expand/Conv_/encoder3/ResidualBlock_0/body/pw_expand_act/Relu_quantized_/encoder3/ResidualBlock_0/body/pw_contract/Conv_/encoder3/ResidualBlock_0/Add (32, 540, 960), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,) -> (32, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<32, 1>(0.015390855260193348, 0.018884973600506783, 0.014567121863365173, 0.017191138118505478, 0.021955177187919617, Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped, embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias, embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_0_body_pw_expand_bias, embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_0_body_pw_contract_bias, slice_8, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_4
#ifdef MLSR_PASS_4_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass4_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /encoder3/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_9 = uint3(960, 540, 32);
    const int3 groupStart_slice_9 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_9 = uint3(32, 1, 32);
    const uint3 storageSize_slice_9 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_9 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_9 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_9 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_9 = dot(groupStart_slice_9, tensorByteStrides_slice_9);
    const RWBufferStorage storage_slice_9 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_9 = { logicalSize_slice_9, groupStart_slice_9, groupSize_slice_9, storageSize_slice_9, tensorByteStrides_slice_9, paddingBegin_slice_9, paddingEnd_slice_9, threadGroupByteOffsetInTensor_slice_9 + 49766400, storage_slice_9 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_9, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_4_POST


#ifdef MLSR_PASS_5
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // -3, -21, 1, -26, -3, -4, 22, 2, -4, 7, 11, -26, -18, 11, 14, -4, -10, -6, -7, -25, -18, -4, -10, -24, -25, 45, -14, -7, -1, 19, -19, 28
    0xe601ebfd, 0x216fcfd, 0xe60b07fc, 0xfc0e0bee, 0xe7f9faf6, 0xe8f6fcee, 0xf9f22de7, 0x1ced13ff,
    // 22, 20, 4, 7, 7, 0, 12, -11, 7, 18, -1, 2, 1, -17, 10, 0, 28, 2, 5, 0, -19, -8, 12, 6, -20, 51, -11, -61, -11, 31, -2, 7
    0x7041416, 0xf50c0007, 0x2ff1207, 0xaef01, 0x5021c, 0x60cf8ed, 0xc3f533ec, 0x7fe1ff5,
    // 0, 2, -16, 63, -24, 12, -37, -2, -97, 11, 115, 52, -36, 30, 52, 44, 7, -11, -7, -11, 15, 7, 2, 7, -28, 34, -5, -2, -14, -4, 31, 9
    0x3ff00200, 0xfedb0ce8, 0x34730b9f, 0x2c341edc, 0xf5f9f507, 0x702070f, 0xfefb22e4, 0x91ffcf2,
    // 0, -9, -15, -3, 11, 21, -5, 6, -4, -1, 5, 11, -4, -12, 5, -13, -1, -4, -15, -17, -19, -19, -14, 2, -17, 38, 16, -7, 32, 9, 45, 3
    0xfdf1f700, 0x6fb150b, 0xb05fffc, 0xf305f4fc, 0xeff1fcff, 0x2f2eded, 0xf91026ef, 0x32d0920,
    // 19, 15, 9, 15, 18, 11, 14, -4, -36, 17, -22, 8, -31, -17, -44, 21, -20, -10, -2, -31, -10, 19, 10, 17, 5, -13, 5, -24, -12, -1, 32, -15
    0xf090f13, 0xfc0e0b12, 0x8ea11dc, 0x15d4efe1, 0xe1fef6ec, 0x110a13f6, 0xe805f305, 0xf120fff4,
    // 28, 10, 21, -19, 10, 0, 15, -36, -3, -5, -19, -5, 0, 3, -35, 29, 6, 7, 6, -9, 4, 10, -3, -4, 5, 6, 4, 4, 2, -13, 11, -6
    0xed150a1c, 0xdc0f000a, 0xfbedfbfd, 0x1ddd0300, 0xf7060706, 0xfcfd0a04, 0x4040605, 0xfa0bf302,
    // -6, -20, -36, -5, 1, 47, -5, 33, 15, -31, 22, 4, 18, -2, 10, 0, -8, -83, 66, 65, -57, -46, 2, -15, 50, 27, -50, 25, -7, 71, -6, -4
    0xfbdcecfa, 0x21fb2f01, 0x416e10f, 0xafe12, 0x4142adf8, 0xf102d2c7, 0x19ce1b32, 0xfcfa47f9,
    // 23, 25, 40, -9, 10, 5, -5, 13, 17, -9, -16, 12, 14, -5, 19, 10, 24, 15, 12, -3, -17, -18, 9, -14, -19, 5, 7, -51, 36, 15, -5, 14
    0xf7281917, 0xdfb050a, 0xcf0f711, 0xa13fb0e, 0xfd0c0f18, 0xf209eeef, 0xcd0705ed, 0xefb0f24,
    // -26, -6, 21, -3, 33, 39, -10, -21, 24, -30, -42, 62, -51, -37, -13, 19, -12, 5, 4, -8, 27, 2, -9, 24, -33, 4, 9, -3, -2, -22, -12, 18
    0xfd15fae6, 0xebf62721, 0x3ed6e218, 0x13f3dbcd, 0xf80405f4, 0x18f7021b, 0xfd0904df, 0x12f4eafe,
    // 5, -3, -8, 8, -24, -7, 6, -13, -1, -2, -30, -2, 8, 11, 5, -5, 24, -4, 17, 40, -3, -10, 6, -26, 30, 8, -3, 9, -25, 2, 18, 20
    0x8f8fd05, 0xf306f9e8, 0xfee2feff, 0xfb050b08, 0x2811fc18, 0xe606f6fd, 0x9fd081e, 0x141202e7,
    // 6, -3, -7, 27, -13, -2, 9, -10, -4, -5, -11, 5, 1, 0, 6, 2, 28, 19, 30, -6, -6, -60, 53, 27, -17, 10, -33, -55, 8, -9, 28, -26
    0x1bf9fd06, 0xf609fef3, 0x5f5fbfc, 0x2060001, 0xfa1e131c, 0x1b35c4fa, 0xc9df0aef, 0xe61cf708,
    // 22, -45, 111, -86, 56, 79, -29, -23, 36, -35, -27, 11, -66, -20, -15, 35, 13, -3, -42, 22, -17, -25, 13, -4, 11, 5, 1, -15, -4, -25, 17, 17
    0xaa6fd316, 0xe9e34f38, 0xbe5dd24, 0x23f1ecbe, 0x16d6fd0d, 0xfc0de7ef, 0xf101050b, 0x1111e7fc,
    // -1, -20, -5, 18, -18, -4, -8, 15, -19, -3, -7, 4, 8, 16, 3, 20, -2, -30, 17, 20, -10, -2, -9, -24, 14, 51, -17, 19, 9, -7, 17, -4
    0x12fbecff, 0xff8fcee, 0x4f9fded, 0x14031008, 0x1411e2fe, 0xe8f7fef6, 0x13ef330e, 0xfc11f909,
    // 5, -3, -6, 11, -14, 2, -4, -1, -11, -2, -14, 6, 9, 7, -3, 21, 9, -1, -6, -16, 14, 17, 21, -24, -7, 18, 17, 7, 7, -6, -15, 18
    0xbfafd05, 0xfffc02f2, 0x6f2fef5, 0x15fd0709, 0xf0faff09, 0xe815110e, 0x71112f9, 0x12f1fa07,
    // 53, 25, 14, 39, 20, -24, 16, 6, 1, 15, 4, 43, -20, -45, 31, 13, 13, -20, -9, 4, 5, 12, 18, 4, 6, 13, 23, -2, -16, 0, 3, -11
    0x270e1935, 0x610e814, 0x2b040f01, 0xd1fd3ec, 0x4f7ec0d, 0x4120c05, 0xfe170d06, 0xf50300f0,
    // 21, -22, 8, 7, -19, 2, 18, 2, -1, 30, 44, 7, -4, 0, -32, 35, 17, 2, -45, 57, -78, 45, 9, 6, 14, -5, -108, 8, -19, -4, 44, -40
    0x708ea15, 0x21202ed, 0x72c1eff, 0x23e000fc, 0x39d30211, 0x6092db2, 0x894fb0e, 0xd82cfced,
    // 25, -63, 46, -65, -24, -10, 9, -21, 6, -20, -15, 15, 37, 9, -11, -29, -5, -41, 3, -23, 11, 5, 23, 8, -4, 22, 9, 12, -6, -25, -7, 8
    0xbf2ec119, 0xeb09f6e8, 0xff1ec06, 0xe3f50925, 0xe903d7fb, 0x817050b, 0xc0916fc, 0x8f9e7fa,
    // 19, 8, -19, -6, -5, -1, 46, -15, -28, -18, 17, -29, 3, 20, 0, 2, 29, -31, 12, -9, -6, 16, 12, -2, 2, 5, 8, -4, 25, 7, 15, -1
    0xfaed0813, 0xf12efffb, 0xe311eee4, 0x2001403, 0xf70ce11d, 0xfe0c10fa, 0xfc080502, 0xff0f0719,
    // -23, 21, -3, -12, -12, 4, 10, -19, 7, 8, -24, 1, 13, 2, -1, 19, 5, 64, -4, 53, -1, 20, -28, 11, 32, -8, 4, 51, 33, -25, 48, 1
    0xf4fd15e9, 0xed0a04f4, 0x1e80807, 0x13ff020d, 0x35fc4005, 0xbe414ff, 0x3304f820, 0x130e721,
    // -1, 7, 10, -9, 5, 12, 5, 10, 5, 5, -6, -4, 4, -10, 2, 8, 11, 37, 34, -9, -17, -39, 0, -2, 3, -11, 7, -35, -3, -2, -18, -23
    0xf70a07ff, 0xa050c05, 0xfcfa0505, 0x802f604, 0xf722250b, 0xfe00d9ef, 0xdd07f503, 0xe9eefefd,
    // -71, -63, 3, -39, -48, -81, 61, -70, -69, -57, 23, 18, -6, 72, -21, -73, -13, 51, -30, 17, 20, 1, -5, 7, -23, 0, 29, 4, -11, -36, -33, -1
    0xd903c1b9, 0xba3dafd0, 0x1217c7bb, 0xb7eb48fa, 0x11e233f3, 0x7fb0114, 0x41d00e9, 0xffdfdcf5,
    // -14, 10, 1, -12, 1, 18, 0, 12, 15, 2, -10, 15, -1, -5, 4, 16, -16, 36, -25, 21, -17, 24, -32, 22, 5, 11, -26, 34, 15, 10, -9, -5
    0xf4010af2, 0xc001201, 0xff6020f, 0x1004fbff, 0x15e724f0, 0x16e018ef, 0x22e60b05, 0xfbf70a0f,
    // -5, 23, 9, -9, -2, 17, -3, 3, 20, 16, -14, 7, 6, -10, 3, 5, 3, -5, -4, -7, 3, -16, 7, -5, -2, -2, -3, -4, -13, 0, -4, -12
    0xf70917fb, 0x3fd11fe, 0x7f21014, 0x503f606, 0xf9fcfb03, 0xfb07f003, 0xfcfdfefe, 0xf4fc00f3,
    // 6, 10, 2, 28, 1, -2, 24, -11, 45, 11, 20, -14, -16, -18, 11, 16, 16, -17, -5, 1, -15, -22, 11, -11, 15, -20, 1, -17, -1, -3, -10, -16
    0x1c020a06, 0xf518fe01, 0xf2140b2d, 0x100beef0, 0x1fbef10, 0xf50beaf1, 0xef01ec0f, 0xf0f6fdff,
    // 19, -37, -62, 31, 41, -10, -22, -6, 11, 8, 24, 31, -37, -46, 4, 27, -35, 36, 84, -26, -34, -3, -38, 70, -70, 10, 50, -58, 85, 95, 62, -47
    0x1fc2db13, 0xfaeaf629, 0x1f18080b, 0x1b04d2db, 0xe65424dd, 0x46dafdde, 0xc6320aba, 0xd13e5f55,
    // -11, 8, -4, -16, -10, -53, 21, -12, 13, 5, -28, -16, -25, 1, 26, 9, 1, -20, -3, -15, 19, -19, 7, 9, -9, -8, 22, -2, -19, -6, -6, 10
    0xf0fc08f5, 0xf415cbf6, 0xf0e4050d, 0x91a01e7, 0xf1fdec01, 0x907ed13, 0xfe16f8f7, 0xafafaed,
    // -12, -17, 15, 27, 24, 16, -2, 4, -2, 39, -27, 26, -38, -39, -34, -2, 4, 6, -6, -3, 3, -16, 9, 3, 2, -6, 16, -4, -15, -9, -1, 1
    0x1b0feff4, 0x4fe1018, 0x1ae527fe, 0xfeded9da, 0xfdfa0604, 0x309f003, 0xfc10fa02, 0x1fff7f1,
    // 4, 3, -1, 14, -3, -1, -13, -14, 5, 13, -19, 14, 24, 1, 5, 3, 8, 4, -5, 6, 32, 33, 19, 2, -14, -20, 62, 13, -8, -19, 7, 8
    0xeff0304, 0xf2f3fffd, 0xeed0d05, 0x3050118, 0x6fb0408, 0x2132120, 0xd3eecf2, 0x807edf8,
    // 3, 62, -14, 26, 3, 29, 5, -5, 6, 12, -2, 13, 17, -15, 13, -6, -10, 18, -5, -14, -67, -7, 22, 6, -4, 13, -60, -69, 14, 57, -10, -64
    0x1af23e03, 0xfb051d03, 0xdfe0c06, 0xfa0df111, 0xf2fb12f6, 0x616f9bd, 0xbbc40dfc, 0xc0f6390e,
    // 24, -30, 39, 25, 30, -58, 23, 29, 37, 28, 78, -53, -21, -33, -37, -13, -18, -2, -31, -7, -19, 11, -30, -17, 22, -18, -44, 12, 35, 23, -1, -14
    0x1927e218, 0x1d17c61e, 0xcb4e1c25, 0xf3dbdfeb, 0xf9e1feee, 0xefe20bed, 0xcd4ee16, 0xf2ff1723,
    // -13, 21, -2, -5, 9, 6, 0, 6, -1, -14, -14, 7, -3, 10, -6, 27, 17, -11, 8, -18, 21, 2, 24, -20, -17, 21, 30, 6, -9, -18, -3, -54
    0xfbfe15f3, 0x6000609, 0x7f2f2ff, 0x1bfa0afd, 0xee08f511, 0xec180215, 0x61e15ef, 0xcafdeef7,
    // -27, 20, -1, 14, 19, 6, 5, 26, -9, 5, -16, 10, -25, -3, -24, 12, 16, -17, 15, 17, 14, -14, 4, 13, -6, 22, 9, 13, -20, -8, -1, 4
    0xeff14e5, 0x1a050613, 0xaf005f7, 0xce8fde7, 0x110fef10, 0xd04f20e, 0xd0916fa, 0x4fff8ec,
    // 11, -18, 8, -5, 5, -14, -28, 9, -37, 32, -2, 12, 15, -2, -7, 18, 1, 19, -7, 35, 1, 20, -2, -2, 21, 20, -6, 18, 11, 2, 29, -5
    0xfb08ee0b, 0x9e4f205, 0xcfe20db, 0x12f9fe0f, 0x23f91301, 0xfefe1401, 0x12fa1415, 0xfb1d020b,
    // 7, -26, -43, 18, 1, 46, 1, -21, 26, -19, -2, 28, 1, -1, 13, 10, 2, 3, -42, -119, 19, 3, 9, -24, -122, 29, 27, -23, -2, 5, -49, -53
    0x12d5e607, 0xeb012e01, 0x1cfeed1a, 0xa0dff01, 0x89d60302, 0xe8090313, 0xe91b1d86, 0xcbcf05fe,
    // 21, -5, 10, 15, -13, 0, 18, -34, -7, 29, -16, 8, 16, -3, 27, -16, 5, 11, -1, 18, -31, -19, 11, -12, 3, 32, -15, -27, 33, 33, -4, 9
    0xf0afb15, 0xde1200f3, 0x8f01df9, 0xf01bfd10, 0x12ff0b05, 0xf40bede1, 0xe5f12003, 0x9fc2121,
    // -14, -23, -3, 9, 24, 0, -18, -11, 17, -22, -14, 17, -28, 11, 23, -17, 5, -10, 4, 21, 11, -9, 12, 18, -16, 19, -10, 7, -15, -4, -35, 5
    0x9fde9f2, 0xf5ee0018, 0x11f2ea11, 0xef170be4, 0x1504f605, 0x120cf70b, 0x7f613f0, 0x5ddfcf1,
    // 0, 17, -9, -7, 1, 7, -20, -19, 12, 1, 19, -6, -9, -1, 20, -10, 17, -3, 16, 22, 21, -8, -6, -5, 17, 20, -3, -1, -8, -11, 41, -3
    0xf9f71100, 0xedec0701, 0xfa13010c, 0xf614fff7, 0x1610fd11, 0xfbfaf815, 0xfffd1411, 0xfd29f5f8,
    // 2, -10, -12, 7, 3, -4, -13, -9, 1, 3, 27, -6, -17, 1, 6, -16, -19, -26, 60, 1, 2, 0, -38, 52, -9, 58, 25, -24, 8, 7, 17, 25
    0x7f4f602, 0xf7f3fc03, 0xfa1b0301, 0xf00601ef, 0x13ce6ed, 0x34da0002, 0xe8193af7, 0x19110708,
    // -7, 20, -10, -42, 37, 26, -9, -16, 7, -11, -58, -40, -68, 26, -21, -50, -4, -17, 73, -17, 2, -7, -35, -3, 1, 39, -19, -8, 16, 32, 28, 18
    0xd6f614f9, 0xf0f71a25, 0xd8c6f507, 0xceeb1abc, 0xef49effc, 0xfdddf902, 0xf8ed2701, 0x121c2010,
    // -2, -23, 3, 3, 11, 7, -40, 11, -8, -10, 10, 23, -38, -20, 12, -11, -22, -3, -25, 12, 20, -6, -15, 32, -48, -17, -22, -15, -29, 27, 17, 23
    0x303e9fe, 0xbd8070b, 0x170af6f8, 0xf50cecda, 0xce7fdea, 0x20f1fa14, 0xf1eaefd0, 0x17111be3,
    // 7, 10, 7, 13, -9, -4, -22, -10, -23, 5, 1, 1, -2, -4, 0, -6, 22, -4, 11, 22, 18, -21, -8, -20, -15, -5, 21, 16, -35, -19, 1, 2
    0xd070a07, 0xf6eafcf7, 0x10105e9, 0xfa00fcfe, 0x160bfc16, 0xecf8eb12, 0x1015fbf1, 0x201eddd,
    // -22, 21, 5, 12, 4, 13, -21, 22, -1, 27, -2, 8, 21, -14, 31, 22, 7, 15, -7, 6, 14, -4, 16, -31, -14, -2, 15, -7, -14, -11, -12, 4
    0xc0515ea, 0x16eb0d04, 0x8fe1bff, 0x161ff215, 0x6f90f07, 0xe110fc0e, 0xf90ffef2, 0x4f4f5f2,
    // -47, -27, 14, -46, -20, 23, 20, -9, -10, -5, -26, -43, -25, 21, -8, -55, 33, 52, 26, -3, -47, -47, -43, -10, 21, -45, -93, 44, 43, 25, 127, 53
    0xd20ee5d1, 0xf71417ec, 0xd5e6fbf6, 0xc9f815e7, 0xfd1a3421, 0xf6d5d1d1, 0x2ca3d315, 0x357f192b,
    // 6, -30, 3, 20, 7, 17, 0, -13, -16, 34, -9, 8, -38, -10, -42, -10, 5, 26, 13, -7, -5, -25, 3, -28, -9, -1, 5, -21, 7, 12, 3, -3
    0x1403e206, 0xf3001107, 0x8f722f0, 0xf6d6f6da, 0xf90d1a05, 0xe403e7fb, 0xeb05fff7, 0xfd030c07,
    // -15, -13, 13, 1, 26, -11, -7, -9, -1, -17, -34, -12, -11, 17, -1, 29, 1, -23, -1, -1, 14, -22, 13, -13, -14, -16, 26, -21, -25, -8, -8, -18
    0x10df3f1, 0xf7f9f51a, 0xf4deefff, 0x1dff11f5, 0xffffe901, 0xf30dea0e, 0xeb1af0f2, 0xeef8f8e7,
    // 12, -5, 9, 4, 0, 0, 21, -1, 13, 9, 8, -5, 11, -4, -11, 12, 8, -20, -11, -44, 3, -24, 20, -2, 3, 5, -5, -7, -8, -5, -17, -5
    0x409fb0c, 0xff150000, 0xfb08090d, 0xcf5fc0b, 0xd4f5ec08, 0xfe14e803, 0xf9fb0503, 0xfbeffbf8,
    // -18, 6, -4, -6, 1, -1, 19, 2, 12, 16, 3, 0, 11, 8, -1, 14, 8, 11, 22, -17, 1, -18, 15, -6, -1, 34, -5, 43, 24, -9, 6, -20
    0xfafc06ee, 0x213ff01, 0x3100c, 0xeff080b, 0xef160b08, 0xfa0fee01, 0x2bfb22ff, 0xec06f718,
    // -29, -38, 42, 4, 19, -4, -80, -14, 0, 1, -25, 25, 65, 46, 3, 43, 26, -6, 19, -6, -4, 27, 21, 4, 34, 58, -1, 28, 19, -7, 20, -26
    0x42adae3, 0xf2b0fc13, 0x19e70100, 0x2b032e41, 0xfa13fa1a, 0x4151bfc, 0x1cff3a22, 0xe614f913,
    // -11, -29, -9, -5, 19, 19, 2, 18, 18, 9, 1, 33, -19, -25, -9, 12, 8, -8, -12, -37, 23, -33, 40, 2, -7, -4, 33, -6, 4, 1, -6, 4
    0xfbf7e3f5, 0x12021313, 0x21010912, 0xcf7e7ed, 0xdbf4f808, 0x228df17, 0xfa21fcf9, 0x4fa0104,
    // 9, 16, 4, 19, 19, 6, 26, -13, -15, 50, -13, 17, -15, -19, -49, 22, 40, -3, -8, 17, 27, -8, -13, -16, 7, -2, 8, 10, 4, -30, 5, -9
    0x13041009, 0xf31a0613, 0x11f332f1, 0x16cfedf1, 0x11f8fd28, 0xf0f3f81b, 0xa08fe07, 0xf705e204,
    // -10, -4, 12, -9, 20, 13, 22, 20, -8, 6, 31, -14, -44, -16, 7, -15, -1, 22, -4, 0, 15, -11, 19, -9, -24, -7, 13, -1, -8, -22, -10, 10
    0xf70cfcf6, 0x14160d14, 0xf21f06f8, 0xf107f0d4, 0xfc16ff, 0xf713f50f, 0xff0df9e8, 0xaf6eaf8,
    // 8, 30, 22, 2, 34, -8, 5, 34, -15, 18, -47, 29, 13, -13, 64, -22, -77, -67, -39, 0, -75, 65, -63, -68, 22, 21, -3, 46, 15, 74, -45, -22
    0x2161e08, 0x2205f822, 0x1dd112f1, 0xea40f30d, 0xd9bdb3, 0xbcc141b5, 0x2efd1516, 0xead34a0f,
    // 5, 32, -71, 45, -28, 20, 13, -9, 1, 14, -6, 0, 3, 5, -26, 57, 13, -6, -8, -6, 17, -8, 11, -4, -14, -32, 17, -10, -9, 9, -9, -6
    0x2db92005, 0xf70d14e4, 0xfa0e01, 0x39e60503, 0xfaf8fa0d, 0xfc0bf811, 0xf611e0f2, 0xfaf709f7,
    // 20, -4, 29, -12, -15, -21, 30, 5, -29, 32, 23, -48, -12, -22, -22, -9, 4, 2, -16, -27, -13, -12, 8, -12, 17, -31, 15, -24, -3, 18, 38, -6
    0xf41dfc14, 0x51eebf1, 0xd01720e3, 0xf7eaeaf4, 0xe5f00204, 0xf408f4f3, 0xe80fe111, 0xfa2612fd,
    // -20, 4, -9, -16, -20, 23, -3, 13, 13, -5, -7, -8, 18, 8, 11, -3, 39, 26, 1, 29, 27, -1, -4, -42, 18, 1, -6, 42, -10, -30, -4, 25
    0xf0f704ec, 0xdfd17ec, 0xf8f9fb0d, 0xfd0b0812, 0x1d011a27, 0xd6fcff1b, 0x2afa0112, 0x19fce2f6,
    // 5, 31, -7, 22, 9, 9, 9, 2, 9, 15, 9, 14, 1, -22, 19, 5, -4, -54, -61, 29, 22, 26, -36, 6, 29, -26, 51, 24, -1, -7, -9, 10
    0x16f91f05, 0x2090909, 0xe090f09, 0x513ea01, 0x1dc3cafc, 0x6dc1a16, 0x1833e61d, 0xaf7f9ff,
    // -30, -48, 8, -42, 35, -70, 48, -27, 25, -57, 7, -15, -24, 9, -18, -1, -28, 66, 30, 32, 30, 9, -9, 7, -35, -1, -41, 23, -9, -30, -9, -23
    0xd608d0e2, 0xe530ba23, 0xf107c719, 0xffee09e8, 0x201e42e4, 0x7f7091e, 0x17d7ffdd, 0xe9f7e2f7,
    // -2, 2, -15, 3, -13, -4, -4, -10, 6, 0, -5, -15, 3, 16, 20, -30, 9, -28, 9, -57, -29, -40, 2, 18, 9, -48, 39, -48, 63, 53, 37, 33
    0x3f102fe, 0xf6fcfcf3, 0xf1fb0006, 0xe2141003, 0xc709e409, 0x1202d8e3, 0xd027d009, 0x2125353f,
    // 4, 7, -6, 15, -6, 14, -12, -9, 16, 14, -23, 9, 17, 0, 5, -5, 18, -9, 11, -3, 7, 2, -6, -4, 6, -14, 0, -7, 0, -4, 12, -15
    0xffa0704, 0xf7f40efa, 0x9e90e10, 0xfb050011, 0xfd0bf712, 0xfcfa0207, 0xf900f206, 0xf10cfc00,
    // -23, -4, 5, -6, -9, 22, -11, -7, -11, -19, 4, 8, 5, 39, -8, 21, 7, 0, -1, 3, 5, -1, -10, -2, -12, -22, 12, 2, 7, -6, 12, -13
    0xfa05fce9, 0xf9f516f7, 0x804edf5, 0x15f82705, 0x3ff0007, 0xfef6ff05, 0x20ceaf4, 0xf30cfa07,
    // 26, 13, 13, 23, 68, -10, -31, 3, -40, -20, -25, 66, 12, -31, 30, 10, 29, -31, 12, -18, -62, -75, 50, 5, 34, -27, -42, -31, -23, -21, -13, -8
    0x170d0d1a, 0x3e1f644, 0x42e7ecd8, 0xa1ee10c, 0xee0ce11d, 0x532b5c2, 0xe1d6e522, 0xf8f3ebe9,
    // -17, -35, 6, -5, -20, -24, -16, 21, -4, -57, -12, -24, -2, 27, 16, -15, -11, -20, -20, 8, 29, 24, -30, 11, -5, -48, 16, 28, -32, -1, 20, 1
    0xfb06ddef, 0x15f0e8ec, 0xe8f4c7fc, 0xf1101bfe, 0x8ececf5, 0xbe2181d, 0x1c10d0fb, 0x114ffe0,
    // 4, 32, 23, 0, -15, 21, -18, -31, -33, 20, -15, 9, 46, 4, 26, -24, 15, -5, -8, 9, 1, 10, 0, -21, -26, -21, -4, -11, -9, 4, -11, 1
    0x172004, 0xe1ee15f1, 0x9f114df, 0xe81a042e, 0x9f8fb0f, 0xeb000a01, 0xf5fcebe6, 0x1f504f7,
    // -22, -1, 2, -9, -30, 3, 2, 6, -5, 19, -11, -14, 9, 24, -17, 17, 31, -13, -3, -1, -27, 0, 20, -22, 8, -43, 4, -25, -20, 2, 23, -39
    0xf702ffea, 0x60203e2, 0xf2f513fb, 0x11ef1809, 0xfffdf31f, 0xea1400e5, 0xe704d508, 0xd91702ec,
    // -2, -18, 17, -20, -22, -15, 2, 5, -28, 10, -19, -10, -6, 16, -47, 29, 17, -13, 38, 23, -6, 8, 1, 14, -12, 18, 20, -38, 9, 31, -6, 9
    0xec11eefe, 0x502f1ea, 0xf6ed0ae4, 0x1dd110fa, 0x1726f311, 0xe0108fa, 0xda1412f4, 0x9fa1f09,
    // 37, 2, -90, -85, 14, -101, 28, -21, -15, -40, -10, -20, 32, -12, 89, 5, 9, 25, -11, 66, 21, 57, -9, 3, -38, 16, 34, 31, 7, -21, -23, 28
    0xaba60225, 0xeb1c9b0e, 0xecf6d8f1, 0x559f420, 0x42f51909, 0x3f73915, 0x1f2210da, 0x1ce9eb07,
    // -9, -1, 18, -2, -2, 0, 8, 1, -20, 24, -10, 11, -6, -14, -11, 9, 5, 0, -4, 26, 25, 32, 8, 1, -38, -23, -11, 14, -56, -13, -19, 0
    0xfe12fff7, 0x10800fe, 0xbf618ec, 0x9f5f2fa, 0x1afc0005, 0x1082019, 0xef5e9da, 0xedf3c8,
    // 10, 9, 12, 15, -1, 18, -9, -7, -14, 23, -6, 5, 12, -13, 12, 0, -25, 7, 2, -14, -26, -11, 8, -10, -28, -40, -4, -28, -3, 26, -10, -5
    0xf0c090a, 0xf9f712ff, 0x5fa17f2, 0xcf30c, 0xf20207e7, 0xf608f5e6, 0xe4fcd8e4, 0xfbf61afd,
    // -4, -27, 10, 9, 16, -29, -1, -11, -28, -11, -4, -1, -4, 2, -39, 26, 2, 22, 3, 10, 31, -18, 16, -7, -7, -27, 27, 2, -35, -17, 25, -21
    0x90ae5fc, 0xf5ffe310, 0xfffcf5e4, 0x1ad902fc, 0xa031602, 0xf910ee1f, 0x21be5f9, 0xeb19efdd,
    // 12, 1, 26, 16, -38, -34, 39, 17, -14, -5, -14, -64, 11, 34, -25, 33, -27, 73, -94, -20, -16, 50, -54, -18, 31, 93, -81, 37, 49, -10, -19, 9
    0x101a010c, 0x1127deda, 0xc0f2fbf2, 0x21e7220b, 0xeca249e5, 0xeeca32f0, 0x25af5d1f, 0x9edf631,
    // -5, 1, 5, -12, 26, -10, 13, 38, -22, -18, 18, -4, -6, -23, 11, -17, 16, 25, -4, 4, -12, -10, 9, -22, -19, -36, 9, -14, -18, 5, -9, -12
    0xf40501fb, 0x260df61a, 0xfc12eeea, 0xef0be9fa, 0x4fc1910, 0xea09f6f4, 0xf209dced, 0xf4f705ee,
    // -9, -13, 1, -17, 4, 1, 11, -17, 18, 9, 18, 0, 3, -7, 30, -25, 7, 37, 5, 17, 10, -10, 13, -16, -27, -7, -5, 4, -32, -18, -30, 1
    0xef01f3f7, 0xef0b0104, 0x120912, 0xe71ef903, 0x11052507, 0xf00df60a, 0x4fbf9e5, 0x1e2eee0,
};
static const uint embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // 4.2e-06, 0.0002856, 0.0003257, 9.686e-05, 0.0003023, -0.0004, 0.0003886, 0.0003169, -5.573e-05, -0.0003464, -5.51e-05, -1.055e-05, 0.000357, -8.78e-05, 0.0005064, -0.0002608
    0xcae0046, 0x6590d56, 0x8e8e0cf4, 0xd310e5e, 0x8dad83a7, 0x80b1839c, 0x85c10dd9, 0x8c461026,
};
static const uint embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -11, -19, -21, -31, 15, -27, -7, 52, 41, -68, -35, 8, 17, -22, -63, -39, -2, 20, 12, 54, 1, 3, 23, 29, -50, -7, -38, -14, 16, -60, 7, 24
    0xe1ebedf5, 0x34f9e50f, 0x8ddbc29, 0xd9c1ea11, 0x360c14fe, 0x1d170301, 0xf2daf9ce, 0x1807c410,
    // 41, 45, 54, -95, 36, -6, 41, 3, -41, -48, -29, 89, -39, 78, -84, -6, 0, 1, 3, 51, -7, -5, -64, 23, -21, -53, -25, 10, 31, 24, 11, 31
    0xa1362d29, 0x329fa24, 0x59e3d0d7, 0xfaac4ed9, 0x33030100, 0x17c0fbf9, 0xae7cbeb, 0x1f0b181f,
    // 21, 47, 20, -77, 24, -55, 9, 7, -21, 51, 61, -5, 70, -30, 54, 48, 17, -10, 11, 33, -18, -14, 22, 15, 12, -9, -10, -4, 28, 11, 12, 0
    0xb3142f15, 0x709c918, 0xfb3d33eb, 0x3036e246, 0x210bf611, 0xf16f2ee, 0xfcf6f70c, 0xc0b1c,
    // 10, -19, -42, -16, 72, 65, -61, -22, -53, 48, 37, 9, -7, 17, -27, 84, -42, 25, 14, 79, -59, 20, 24, 31, -13, -34, -41, -25, 57, 1, 84, 91
    0xf0d6ed0a, 0xeac34148, 0x92530cb, 0x54e511f9, 0x4f0e19d6, 0x1f1814c5, 0xe7d7def3, 0x5b540139,
    // 12, 2, 3, 7, -3, 28, -10, -7, -2, 19, 8, 17, -4, -1, -7, 9, -50, -89, 57, 61, 80, 71, 60, 31, -83, -94, -114, 4, 39, -38, -31, -18
    0x703020c, 0xf9f61cfd, 0x110813fe, 0x9f9fffc, 0x3d39a7ce, 0x1f3c4750, 0x48ea2ad, 0xeee1da27,
    // -32, 68, 50, 54, -72, -53, 92, -67, 36, 1, -52, -18, -54, -55, -52, -30, -11, -3, 6, 19, -43, -40, 33, 41, -18, 16, -19, -18, -14, -13, 26, -46
    0x363244e0, 0xbd5ccbb8, 0xeecc0124, 0xe2ccc9ca, 0x1306fdf5, 0x2921d8d5, 0xeeed10ee, 0xd21af3f2,
    // -18, -52, 53, -13, -39, 12, -2, 31, 10, 5, 8, -31, 0, -30, 4, 19, -128, 2, -19, -11, -67, -9, -74, 1, -57, -2, -38, -36, 98, -76, -5, -20
    0xf335ccee, 0x1ffe0cd9, 0xe108050a, 0x1304e200, 0xf5ed0280, 0x1b6f7bd, 0xdcdafec7, 0xecfbb462,
    // -47, -74, 17, -62, 48, -45, 8, -78, -4, 56, 7, 41, -35, -36, 58, -49, 6, -51, 8, 49, -24, -15, -1, 20, 1, -14, -13, -12, 16, 17, 11, 19
    0xc211b6d1, 0xb208d330, 0x290738fc, 0xcf3adcdd, 0x3108cd06, 0x14fff1e8, 0xf4f3f201, 0x130b1110,
    // -6, -14, 8, 12, -9, 28, -14, 14, -9, 14, 17, 4, -4, -5, 8, 15, -58, -58, 36, -7, -4, 70, 24, 23, -124, -53, -56, -10, 51, -13, -19, -12
    0xc08f2fa, 0xef21cf7, 0x4110ef7, 0xf08fbfc, 0xf924c6c6, 0x171846fc, 0xf6c8cb84, 0xf4edf333,
    // 5, -14, 9, -10, -15, 9, -5, -13, -1, 9, 12, -15, -15, -8, -23, 7, -50, 100, -33, -38, -43, 4, 30, 32, -35, -14, -4, 4, 22, -16, 74, 2
    0xf609f205, 0xf3fb09f1, 0xf10c09ff, 0x7e9f8f1, 0xdadf64ce, 0x201e04d5, 0x4fcf2dd, 0x24af016,
    // 11, 12, -16, -19, -16, 2, -1, 4, 33, 25, -25, 21, 6, 27, 10, -3, 69, 75, 48, 2, -96, -1, 21, 16, -13, 6, -7, -49, -52, 24, 11, 75
    0xedf00c0b, 0x4ff02f0, 0x15e71921, 0xfd0a1b06, 0x2304b45, 0x1015ffa0, 0xcff906f3, 0x4b0b18cc,
    // -82, 57, 6, -20, 41, 57, -71, 55, 20, -30, -87, 32, 16, -23, 83, 2, 19, -28, 6, 71, -23, -13, -1, 16, 8, -26, -8, -37, 14, 39, 13, 15
    0xec0639ae, 0x37b93929, 0x20a9e214, 0x253e910, 0x4706e413, 0x10fff3e9, 0xdbf8e608, 0xf0d270e,
    // -22, -10, 4, 28, 23, 13, -17, -10, -48, 7, 23, 10, -11, -27, -44, 23, 2, 15, -73, 46, 3, 63, 44, -30, -82, 69, 5, -22, -5, -5, 33, -62
    0x1c04f6ea, 0xf6ef0d17, 0xa1707d0, 0x17d4e5f5, 0x2eb70f02, 0xe22c3f03, 0xea0545ae, 0xc221fbfb,
    // -48, -35, 15, -1, -39, -28, 9, 32, -25, -17, -37, -19, 11, 33, 53, 38, -40, 25, -57, 42, -27, 83, 70, -42, -55, 19, -4, 16, -18, -31, 0, 3
    0xff0fddd0, 0x2009e4d9, 0xeddbefe7, 0x2635210b, 0x2ac719d8, 0xd64653e5, 0x10fc13c9, 0x300e1ee,
    // -27, 17, -17, 13, 35, -9, 5, -21, -34, -16, 44, 2, 18, -1, -5, -6, -29, 36, 19, 25, 60, -28, -37, -32, -11, 55, -19, -19, 12, -101, 38, -9
    0xdef11e5, 0xeb05f723, 0x22cf0de, 0xfafbff12, 0x191324e3, 0xe0dbe43c, 0xeded37f5, 0xf7269b0c,
    // 25, 32, -31, -18, 34, -44, -20, -10, 31, -26, 19, 31, 22, -32, -32, -26, -25, -81, -54, -36, -43, -1, -102, -17, 19, 11, -29, 6, 49, -40, -1, 53
    0xeee12019, 0xf6ecd422, 0x1f13e61f, 0xe6e0e016, 0xdccaafe7, 0xef9affd5, 0x6e30b13, 0x35ffd831,
    // 13, -14, 33, 11, 13, -19, -6, 19, -6, -19, 0, -17, -5, -7, 0, -18, -48, 6, -55, -87, -64, 76, 80, 77, 20, -62, 6, 97, 1, 49, 23, 13
    0xb21f20d, 0x13faed0d, 0xef00edfa, 0xee00f9fb, 0xa9c906d0, 0x4d504cc0, 0x6106c214, 0xd173101,
    // 31, -62, 54, 59, 18, -66, 14, -48, 77, -82, 38, 21, 45, 64, -40, 76, -19, -17, -1, 25, -22, -17, 11, 20, 16, 6, -12, -29, 4, -11, 7, -14
    0x3b36c21f, 0xd00ebe12, 0x1526ae4d, 0x4cd8402d, 0x19ffefed, 0x140befea, 0xe3f40610, 0xf207f504,
    // 21, -41, 29, -40, -22, 15, -4, 25, 42, 30, -46, -17, 5, 18, 0, 23, -3, 29, -67, -75, -36, 21, -1, 72, -11, -10, -37, 70, -6, 13, -21, -35
    0xd81dd715, 0x19fc0fea, 0xefd21e2a, 0x17001205, 0xb5bd1dfd, 0x48ff15dc, 0x46dbf6f5, 0xddeb0dfa,
    // 71, 18, -8, -52, -64, -28, -57, -65, -41, -70, 19, -61, -61, 28, 44, 4, -13, 7, 5, 20, -4, -31, 14, 25, 1, 9, 7, -16, -17, 7, 23, -19
    0xccf81247, 0xbfc7e4c0, 0xc313bad7, 0x42c1cc3, 0x140507f3, 0x190ee1fc, 0xf0070901, 0xed1707ef,
    // -88, 72, 78, 1, -52, -14, -57, -35, 34, 45, 47, -19, 49, 55, -38, -72, 34, -32, -2, 20, -5, 0, -11, 28, -1, -17, -17, -9, -9, 7, 13, -7
    0x14e48a8, 0xddc7f2cc, 0xed2f2d22, 0xb8da3731, 0x14fee022, 0x1cf500fb, 0xf7efefff, 0xf90d07f7,
    // -36, -31, -44, 6, -36, 50, -4, -14, 34, -67, -8, 1, -32, 36, -40, -74, 7, -20, 1, 27, 3, -15, 35, 17, -20, 1, 8, -12, -36, 3, -1, 13
    0x6d4e1dc, 0xf2fc32dc, 0x1f8bd22, 0xb6d824e0, 0x1b01ec07, 0x1123f103, 0xf40801ec, 0xdff03dc,
    // 41, -36, 55, -31, 7, -4, 16, 51, 41, -26, -30, -31, 16, -24, 12, -49, -19, -57, 15, -47, 8, -24, 47, 67, -55, -18, -122, -10, 8, 34, -8, -49
    0xe137dc29, 0x3310fc07, 0xe1e2e629, 0xcf0ce810, 0xd10fc7ed, 0x432fe808, 0xf686eec9, 0xcff82208,
    // 2, 28, 28, 18, 79, -40, -25, 33, 3, -19, 56, 23, 19, -27, -9, -35, -36, -22, 7, 66, 50, -11, -55, 37, -46, -13, -90, -3, -46, 13, 35, 18
    0x121c1c02, 0x21e7d84f, 0x1738ed03, 0xddf7e513, 0x4207eadc, 0x25c9f532, 0xfda6f3d2, 0x12230dd2,
    // 65, 0, 51, 60, -46, -33, -40, 28, -17, 37, 11, 7, -33, 61, 24, -15, -73, -11, 13, -49, 10, 32, -66, -19, -15, -21, 8, -20, 45, -62, -38, -10
    0x3c330041, 0x1cd8dfd2, 0x70b25ef, 0xf1183ddf, 0xcf0df5b7, 0xedbe200a, 0xec08ebf1, 0xf6dac22d,
    // 46, -34, -14, -2, 21, 48, 39, -81, -51, 48, -31, -61, 41, 38, 8, -49, -7, -19, 4, 27, -18, -18, -66, 13, 8, -26, -1, -28, 29, 30, 18, 27
    0xfef2de2e, 0xaf273015, 0xc3e130cd, 0xcf082629, 0x1b04edf9, 0xdbeeeee, 0xe4ffe608, 0x1b121e1d,
    // -49, 22, 21, 23, 81, 34, 44, 38, 32, 40, 8, -17, -46, 57, 8, 9, -11, -8, 18, 44, -5, -16, 1, 24, 9, -2, -11, -29, 21, 45, 15, 8
    0x171516cf, 0x262c2251, 0xef082820, 0x90839d2, 0x2c12f8f5, 0x1801f0fb, 0xe3f5fe09, 0x80f2d15,
    // -13, 46, -37, -5, -11, 34, 10, 26, 12, -36, -32, -81, 63, -15, -54, 36, -5, -41, -11, 50, -29, -15, 9, 28, -2, -15, -28, -11, -1, 14, 17, -3
    0xfbdb2ef3, 0x1a0a22f5, 0xafe0dc0c, 0x24caf13f, 0x32f5d7fb, 0x1c09f1e3, 0xf5e4f1fe, 0xfd110eff,
    // -9, -1, 3, 0, 7, 6, -17, -12, -1, 15, 6, -1, -3, 3, -14, 13, -63, -45, 7, -4, -16, 7, -6, 5, -15, -41, 6, -48, -99, 3, 19, 18
    0x3fff7, 0xf4ef0607, 0xff060fff, 0xdf203fd, 0xfc07d3c1, 0x5fa07f0, 0xd006d7f1, 0x1213039d,
    // -11, -3, -33, 9, -32, 28, 4, -29, 7, 28, 48, 18, -18, -31, -38, 56, 15, 5, 1, -21, 88, 22, -48, 27, -6, 82, -7, 2, -15, 1, 17, -42
    0x9dffdf5, 0xe3041ce0, 0x12301c07, 0x38dae1ee, 0xeb01050f, 0x1bd01658, 0x2f952fa, 0xd61101f1,
    // -33, -41, 28, -34, -17, -13, 19, 14, 34, -1, -29, -33, 10, 0, -1, 13, -46, 23, 4, -35, -14, 9, -29, 51, 74, -19, -11, -11, 38, 17, 40, 90
    0xde1cd7df, 0xe13f3ef, 0xdfe3ff22, 0xdff000a, 0xdd0417d2, 0x33e309f2, 0xf5f5ed4a, 0x5a281126,
    // 21, 23, -18, 12, 28, -25, 10, -4, -8, -17, 8, 0, 9, 7, -3, -30, -22, 42, 29, -37, 6, -89, 54, 43, 29, -84, 10, 1, -20, -109, 40, 41
    0xcee1715, 0xfc0ae71c, 0x8eff8, 0xe2fd0709, 0xdb1d2aea, 0x2b36a706, 0x10aac1d, 0x292893ec,
    // -3, -11, 32, -29, 35, -62, -1, 10, -16, -53, -23, -46, 12, -4, 6, -46, 40, -35, -9, 24, -1, 23, 5, 40, -21, -49, -76, -41, -6, -25, 13, 7
    0xe320f5fd, 0xaffc223, 0xd2e9cbf0, 0xd206fc0c, 0x18f7dd28, 0x280517ff, 0xd7b4cfeb, 0x70de7fa,
    // -3, 28, -39, 0, 14, 3, 10, -19, 4, 9, -13, 7, -2, 31, 26, 7, -87, -15, -89, -34, 72, -49, 10, 70, 28, -94, -78, 33, 55, -79, -37, -6
    0xd91cfd, 0xed0a030e, 0x7f30904, 0x71a1ffe, 0xdea7f1a9, 0x460acf48, 0x21b2a21c, 0xfadbb137,
    // 65, 32, -36, 16, -16, 8, -68, -13, 33, 68, -7, 30, -64, 26, -38, 36, -38, 97, -38, 87, -22, -1, 2, 52, -34, -69, -26, 31, -11, -22, 56, 77
    0x10dc2041, 0xf3bc08f0, 0x1ef94421, 0x24da1ac0, 0x57da61da, 0x3402ffea, 0x1fe6bbde, 0x4d38eaf5,
    // -3, -1, 9, 9, 6, -11, 17, 22, -8, -6, 4, 1, 15, 26, 40, -15, 52, 8, 93, -93, -37, 99, 67, -54, -67, -50, -57, -73, 15, 34, 64, 49
    0x909fffd, 0x1611f506, 0x104faf8, 0xf1281a0f, 0xa35d0834, 0xca4363db, 0xb7c7cebd, 0x3140220f,
    // 17, -5, -9, -38, -16, -56, 12, -7, 30, -4, -25, -25, 1, 26, -1, -13, 45, 1, 68, -12, -21, -24, 6, -48, 46, 57, 71, 60, -49, 64, -52, -19
    0xdaf7fb11, 0xf90cc8f0, 0xe7e7fc1e, 0xf3ff1a01, 0xf444012d, 0xd006e8eb, 0x3c47392e, 0xedcc40cf,
    // 7, -30, 30, -38, 3, 1, 20, 34, 26, -12, -24, -24, 5, 8, 18, -24, -6, 18, -42, 38, -6, 1, -41, -18, -12, 47, -83, -14, -2, -13, -10, -31
    0xda1ee207, 0x22140103, 0xe8e8f41a, 0xe8120805, 0x26d612fa, 0xeed701fa, 0xf2ad2ff4, 0xe1f6f3fe,
    // 20, 4, 52, -24, 35, -26, 51, -24, 5, 6, -5, -43, -24, -88, 11, 44, -20, -23, 12, 15, -18, -9, 39, 7, -14, 29, -8, -3, 7, 8, 18, -23
    0xe8340414, 0xe833e623, 0xd5fb0605, 0x2c0ba8e8, 0xf0ce9ec, 0x727f7ee, 0xfdf81df2, 0xe9120807,
    // -29, -22, 11, -10, -19, 10, 7, -5, -15, -13, -6, -12, -4, -11, 0, 27, 26, -41, 67, 22, 16, -2, -79, -13, 12, 42, -2, 25, -37, -18, -54, 0
    0xf60beae3, 0xfb070aed, 0xf4faf3f1, 0x1b00f5fc, 0x1643d71a, 0xf3b1fe10, 0x19fe2a0c, 0xcaeedb,
    // -20, -51, 71, -34, 49, -15, 1, 44, 17, -38, -23, -45, 29, -42, -1, -73, -33, -61, 9, -5, -16, 4, 16, 20, 28, 0, -36, -53, 49, -36, 35, 4
    0xde47cdec, 0x2c01f131, 0xd3e9da11, 0xb7ffd61d, 0xfb09c3df, 0x141004f0, 0xcbdc001c, 0x423dc31,
    // -23, -6, 1, -7, -22, 0, 12, -9, -1, -1, -9, -9, 0, 2, -4, 5, 82, 67, 31, 35, -4, 24, 34, 44, -7, 4, -4, 64, 123, -12, 0, 6
    0xf901fae9, 0xf70c00ea, 0xf7f7ffff, 0x5fc0200, 0x231f4352, 0x2c2218fc, 0x40fc04f9, 0x600f47b,
    // 1, -3, 16, 16, -9, -4, -23, 27, -25, -6, 20, -6, -41, -5, -7, 25, 11, -24, 43, 34, 59, -41, -7, 23, -96, -9, -49, 52, -38, 5, 61, -37
    0x1010fd01, 0x1be9fcf7, 0xfa14fae7, 0x19f9fbd7, 0x222be80b, 0x17f9d73b, 0x34cff7a0, 0xdb3d05da,
    // 7, 29, -63, -77, -64, -18, 55, 59, -47, 42, 11, -59, -49, 14, -84, -49, -2, -49, -22, 37, -40, -32, 5, 22, 4, -7, -9, -14, 10, -3, 9, 15
    0xb3c11d07, 0x3b37eec0, 0xc50b2ad1, 0xcfac0ecf, 0x25eacffe, 0x1605e0d8, 0xf2f7f904, 0xf09fd0a,
    // -23, -12, 4, -5, -37, -28, 4, -8, -26, -9, -12, -21, -22, 1, -4, 38, -30, 2, -27, 12, -16, 75, -63, 42, -78, 13, -22, 36, -12, 65, 18, -23
    0xfb04f4e9, 0xf804e4db, 0xebf4f7e6, 0x26fc01ea, 0xce502e2, 0x2ac14bf0, 0x24ea0db2, 0xe91241f4,
    // -12, 5, 1, -20, -3, 0, 74, 41, 58, -15, -4, 14, 70, 21, 39, -53, -20, 78, -48, -38, -16, 69, -35, 50, -4, 38, -50, 24, -10, -9, 16, -49
    0xec0105f4, 0x294a00fd, 0xefcf13a, 0xcb271546, 0xdad04eec, 0x32dd45f0, 0x18ce26fc, 0xcf10f7f6,
    // -30, 4, 17, 28, -9, -34, 13, 29, 3, 9, -3, 12, -2, -7, -1, 16, -63, -27, 55, -67, 32, -29, 95, 104, -2, -3, -19, -35, 12, -54, 20, 58
    0x1c1104e2, 0x1d0ddef7, 0xcfd0903, 0x10fff9fe, 0xbd37e5c1, 0x685fe320, 0xddedfdfe, 0x3a14ca0c,
    // 2, -23, 23, -41, -41, 1, 12, 25, 43, -1, -24, -10, 16, 0, 10, -8, -45, -1, 7, -34, 83, -14, -45, 98, -27, 44, -35, -8, 10, 42, 3, 81
    0xd717e902, 0x190c01d7, 0xf6e8ff2b, 0xf80a0010, 0xde07ffd3, 0x62d3f253, 0xf8dd2ce5, 0x51032a0a,
    // 5, -6, -10, -16, 17, 4, -12, 2, 34, 14, 7, 9, 3, -16, -25, -18, -55, -23, 73, -26, 49, 19, 97, 46, -78, -75, -40, 6, 32, -12, 35, 68
    0xf0f6fa05, 0x2f40411, 0x9070e22, 0xeee7f003, 0xe649e9c9, 0x2e611331, 0x6d8b5b2, 0x4423f420,
    // 22, 9, -4, 16, 17, -3, -6, -12, -5, -13, 12, 3, -7, -15, -6, -21, 10, -59, -11, 55, 102, -24, 23, -46, 43, 10, -89, 17, 13, -14, -19, -53
    0x10fc0916, 0xf4fafd11, 0x30cf3fb, 0xebfaf1f9, 0x37f5c50a, 0xd217e866, 0x11a70a2b, 0xcbedf20d,
    // 1, 55, -46, 0, 94, 13, 12, 21, 27, -5, -7, 20, 2, 46, 24, -16, 43, -29, -49, -76, -31, 24, -76, -39, 29, 38, 10, -44, 37, -23, -58, 2
    0xd23701, 0x150c0d5e, 0x14f9fb1b, 0xf0182e02, 0xb4cfe32b, 0xd9b418e1, 0xd40a261d, 0x2c6e925,
    // 18, 24, -25, 15, 16, -16, 0, -15, 0, 10, -15, 15, 7, 19, 16, -14, -57, 62, -17, -41, -8, -56, -54, -55, 5, 53, 30, 90, -2, 29, -28, 17
    0xfe71812, 0xf100f010, 0xff10a00, 0xf2101307, 0xd7ef3ec7, 0xc9cac8f8, 0x5a1e3505, 0x11e41dfe,
    // 29, 4, -2, -13, 21, 34, 6, 19, 26, 6, 12, 17, 28, -3, 9, -38, 12, -3, 13, -71, -22, -32, 61, 113, 13, 21, 5, 6, -4, -45, 27, -50
    0xf3fe041d, 0x13062215, 0x110c061a, 0xda09fd1c, 0xb90dfd0c, 0x713de0ea, 0x605150d, 0xce1bd3fc,
    // 48, -21, 24, -1, 10, 28, -17, -4, -14, -11, 34, -4, -8, -69, -57, -32, -3, 35, 26, -47, 24, -36, -72, 38, -17, -87, -10, -2, 26, 10, 27, 25
    0xff18eb30, 0xfcef1c0a, 0xfc22f5f2, 0xe0c7bbf8, 0xd11a23fd, 0x26b8dc18, 0xfef6a9ef, 0x191b0a1a,
    // -4, 26, -23, 7, 15, -17, 7, -24, -1, -3, 18, -5, 2, -5, -15, -3, 11, 96, 48, 80, 13, -4, -74, -71, 23, -7, -63, -64, -14, -83, 40, 20
    0x7e91afc, 0xe807ef0f, 0xfb12fdff, 0xfdf1fb02, 0x5030600b, 0xb9b6fc0d, 0xc0c1f917, 0x1428adf2,
    // 11, 9, -8, -49, 7, -91, 43, -15, 21, -47, -61, -49, 12, 59, 16, -51, 60, 10, -76, 36, -64, 38, -79, 18, 34, 23, -20, 24, -59, 0, 23, -10
    0xcff8090b, 0xf12ba507, 0xcfc3d115, 0xcd103b0c, 0x24b40a3c, 0x12b126c0, 0x18ec1722, 0xf61700c5,
    // 14, -15, 36, -27, -61, 35, 32, -14, -16, -28, -24, -19, 20, -11, 39, -11, -13, 70, -14, -32, 28, -1, 112, 13, 12, 25, 17, -18, -1, -20, -14, -9
    0xe524f10e, 0xf22023c3, 0xede8e4f0, 0xf527f514, 0xe0f246f3, 0xd70ff1c, 0xee11190c, 0xf7f2ecff,
    // -29, -19, -84, 82, -12, -66, -40, 1, 53, 54, 6, -72, -2, -3, 69, -11, -22, 18, -2, 46, -2, 12, 36, 31, -48, -48, -11, 18, -46, -44, 23, 40
    0x52acede3, 0x1d8bef4, 0xb8063635, 0xf545fdfe, 0x2efe12ea, 0x1f240cfe, 0x12f5d0d0, 0x2817d4d2,
    // -13, -25, -7, 3, 4, -38, -26, 19, 55, -8, -27, -19, 3, 4, 8, 12, -14, 74, -44, -14, -4, 27, -11, 12, -33, -47, -53, 19, -42, 6, -3, -13
    0x3f9e7f3, 0x13e6da04, 0xede5f837, 0xc080403, 0xf2d44af2, 0xcf51bfc, 0x13cbd1df, 0xf3fd06d6,
    // -8, -60, -10, 66, 1, -96, -43, 41, -21, 42, -92, 81, 83, -30, -83, 1, -25, -6, 14, 29, -27, -29, 15, 11, -8, 22, -15, -32, 8, 13, 3, -11
    0x42f6c4f8, 0x29d5a001, 0x51a42aeb, 0x1ade253, 0x1d0efae7, 0xb0fe3e5, 0xe0f116f8, 0xf5030d08,
    // -28, 61, -60, 42, -36, 39, 38, -20, 14, 19, 75, 79, -20, -48, 1, 44, -14, -34, -12, 89, -105, 0, 29, 26, -14, -16, -45, -35, 45, -39, 89, 66
    0x2ac43de4, 0xec2627dc, 0x4f4b130e, 0x2c01d0ec, 0x59f4def2, 0x1a1d0097, 0xddd3f0f2, 0x4259d92d,
    // -16, 12, -15, -30, 26, 14, 8, -29, 2, -2, 14, 2, 18, -4, -18, -2, 20, 64, 47, -37, -74, 89, 15, -23, 36, 22, 1, 18, -38, -57, 21, -1
    0xe2f10cf0, 0xe3080e1a, 0x20efe02, 0xfeeefc12, 0xdb2f4014, 0xe90f59b6, 0x12011624, 0xff15c7da,
    // 72, -66, -74, -16, 29, -9, 65, 68, -26, -64, -63, 33, -49, -73, 54, 60, 19, 15, 6, 59, -19, 3, 20, 23, 3, 2, -36, -1, 7, -30, 17, 29
    0xf0b6be48, 0x4441f71d, 0x21c1c0e6, 0x3c36b7cf, 0x3b060f13, 0x171403ed, 0xffdc0203, 0x1d11e207,
    // -37, -60, -81, -63, 12, 39, -27, 72, -25, -46, 64, 46, 71, 51, 44, -27, -1, -5, -15, 27, -5, 14, 58, 19, 4, -13, -19, -13, -15, 28, 17, 39
    0xc1afc4db, 0x48e5270c, 0x2e40d2e7, 0xe52c3347, 0x1bf1fbff, 0x133a0efb, 0xf3edf304, 0x27111cf1,
};
static const uint embedded_encoder3_ResidualBlock_1_body_pw_expand_bias_dwords[32] = {
    // -0.02057, -0.08014, -0.05704, -0.09576, -0.0764, -0.06506, -0.012245, -0.0738, 0.04184, -0.03586, -0.05667, -0.06946, -0.07385, -0.04626, -0.1676, -0.01994
    0xad21a544, 0xae21ab4d, 0xac2aace4, 0xacb9a245, 0xa897295b, 0xac72ab41, 0xa9ecacba, 0xa51bb15d,
    // -0.0642, -0.03317, 0.1013, -0.0498, -0.06015, -0.02345, -0.0725, -0.07416, -0.0825, -0.05118, -0.0538, -0.0666, -0.05, -0.0374, -0.0919, -0.0729
    0xa83fac1c, 0xaa602e7c, 0xa601abb3, 0xacbfaca4, 0xaa8dad48, 0xac43aae3, 0xa8caaa66, 0xacaaade2,
    // 0.01904, -0.1338, 0.01107, -0.08496, -0.3723, -0.0655, -0.0482, -0.2002, -0.07263, -0.00456, -0.03102, -0.09125, -0.03848, 0.037, -0.0626, -0.04877
    0xb04824e0, 0xad7021ab, 0xac31b5f5, 0xb268aa2b, 0x9cabaca6, 0xadd7a7f1, 0x28bca8ed, 0xaa3eac02,
    // -0.01884, -0.3123, -0.1197, -0.369, -0.03757, -0.02759, -0.1588, -0.07855, -0.1272, -0.0684, 0.006798, -0.05548, -0.0894, -0.01802, -0.04504, -0.0737
    0xb4ffa4d3, 0xb5e7afa9, 0xa710a8cf, 0xad07b115, 0xac61b012, 0xab1a1ef6, 0xa49dadb9, 0xacb8a9c4,
};
static const uint embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -20, 9, 18, 30, 25, 16, 50, 40, 16, -13, 30, 76, -15, -48, -24, 14, -45, 83, 15, -14, -35, 15, 10, -62, -21, 14, -59, -30, -1, -60, 14, -45
    0x1e1209ec, 0x28321019, 0x4c1ef310, 0xee8d0f1, 0xf20f53d3, 0xc20a0fdd, 0xe2c50eeb, 0xd30ec4ff,
    // -31, 4, 43, -74, 0, -44, 16, -64, -56, -72, -14, 79, -28, 1, 20, -27, -12, -32, 3, -26, -45, 13, -50, 1, -59, 17, 10, 0, 38, 12, 8, -6
    0xb62b04e1, 0xc010d400, 0x4ff2b8c8, 0xe51401e4, 0xe603e0f4, 0x1ce0dd3, 0xa11c5, 0xfa080c26,
    // 5, 44, 37, 10, -41, 15, -12, -78, -23, 28, 17, -59, 5, 4, -31, 71, 19, -71, -7, -48, 72, 48, 25, -27, 21, 7, 28, 21, 20, -4, 22, -17
    0xa252c05, 0xb2f40fd7, 0xc5111ce9, 0x47e10405, 0xd0f9b913, 0xe5193048, 0x151c0715, 0xef16fc14,
    // 9, -43, 3, 70, -16, -22, -39, -19, 32, 48, 20, -84, 7, 20, 19, -4, -44, 38, 13, 10, -9, 45, -16, 26, 27, 7, 6, -43, -58, -47, 30, 62
    0x4603d509, 0xedd9eaf0, 0xac143020, 0xfc131407, 0xa0d26d4, 0x1af02df7, 0xd506071b, 0x3e1ed1c6,
    // -29, 4, 21, 8, -24, -25, -48, -13, -16, -19, 2, 1, 34, 37, -13, -5, 42, -5, 5, 37, -89, -38, -43, 12, -23, -1, -30, -17, 22, -40, 28, 13
    0x81504e3, 0xf3d0e7e8, 0x102edf0, 0xfbf32522, 0x2505fb2a, 0xcd5daa7, 0xefe2ffe9, 0xd1cd816,
    // -1, 17, -21, 10, -21, 1, 71, 6, 7, 8, -19, 12, 26, -10, -35, -17, -4, 13, -5, 37, 39, -12, -10, -46, 8, 18, 75, 35, 1, -15, 73, -14
    0xaeb11ff, 0x64701eb, 0xced0807, 0xefddf61a, 0x25fb0dfc, 0xd2f6f427, 0x234b1208, 0xf249f101,
    // 15, -29, 32, -15, 43, -14, 2, -39, 26, -6, -9, -49, 44, 15, -38, -32, -15, -21, -20, 28, -34, 67, 4, -47, 15, -37, -6, -46, -12, -3, 41, 27
    0xf120e30f, 0xd902f22b, 0xcff7fa1a, 0xe0da0f2c, 0x1cecebf1, 0xd10443de, 0xd2fadb0f, 0x1b29fdf4,
    // -15, 36, 13, 1, 25, -15, 51, 32, -24, -2, 61, -25, 21, 36, 32, 12, -21, -39, 38, 50, 21, 0, 5, -40, 4, -35, 21, 40, 20, -27, -22, 7
    0x10d24f1, 0x2033f119, 0xe73dfee8, 0xc202415, 0x3226d9eb, 0xd8050015, 0x2815dd04, 0x7eae514,
    // -63, 34, -78, -29, -39, -93, -40, 29, -27, -37, 14, -31, 21, 3, 4, -60, 21, -56, -10, 72, -16, -74, 21, 8, -6, 60, 82, 82, -29, -25, -8, 19
    0xe3b222c1, 0x1dd8a3d9, 0xe10edbe5, 0xc4040315, 0x48f6c815, 0x815b6f0, 0x52523cfa, 0x13f8e7e3,
    // 52, -22, -29, 41, 10, 52, -41, -51, 8, -9, 2, -47, -5, -21, -5, -48, 18, -8, -1, -12, 2, -13, 19, 26, -34, 1, 16, 97, 106, -18, -19, -82
    0x29e3ea34, 0xcdd7340a, 0xd102f708, 0xd0fbebfb, 0xf4fff812, 0x1a13f302, 0x611001de, 0xaeedee6a,
    // 18, -30, -40, -5, 5, 0, 49, 36, 48, -35, 20, 62, 83, -2, 54, -18, -26, 44, 35, -16, -24, -71, 15, -13, 27, 38, -50, 19, -59, 89, 14, -4
    0xfbd8e212, 0x24310005, 0x3e14dd30, 0xee36fe53, 0xf0232ce6, 0xf30fb9e8, 0x13ce261b, 0xfc0e59c5,
    // -19, -5, 16, -4, 7, -36, -17, 20, -74, -46, 70, 65, -48, -7, -25, 21, -17, -41, 47, 17, -42, -34, -12, 26, 41, -11, 54, -45, 16, 39, 35, -38
    0xfc10fbed, 0x14efdc07, 0x4146d2b6, 0x15e7f9d0, 0x112fd7ef, 0x1af4ded6, 0xd336f529, 0xda232710,
    // 7, 18, -25, 51, -46, -25, 33, 9, -4, 20, -4, -15, -65, -8, -18, -46, 49, 17, -23, -43, -33, 12, 23, -13, 0, -56, -44, 44, -13, 21, 16, -45
    0x33e71207, 0x921e7d2, 0xf1fc14fc, 0xd2eef8bf, 0xd5e91131, 0xf3170cdf, 0x2cd4c800, 0xd31015f3,
    // 43, -94, -22, 54, 72, 65, -4, -9, 23, 14, -52, 29, -35, 5, -6, 23, 27, 43, -12, 21, -47, 42, 15, 40, -25, 18, -45, -25, 49, 5, -25, -20
    0x36eaa22b, 0xf7fc4148, 0x1dcc0e17, 0x17fa05dd, 0x15f42b1b, 0x280f2ad1, 0xe7d312e7, 0xece70531,
    // -10, -33, -47, 10, 54, -7, 3, 16, 0, -4, -14, -4, 4, -23, 19, -2, 0, -1, 10, 2, -5, -21, -11, -91, 11, 49, 15, 17, 31, 1, -26, 16
    0xad1dff6, 0x1003f936, 0xfcf2fc00, 0xfe13e904, 0x20aff00, 0xa5f5ebfb, 0x110f310b, 0x10e6011f,
    // 9, 23, -15, 37, -7, 35, -7, 17, 10, -17, 15, -8, 22, -9, 11, -25, -34, 102, 15, -3, -13, 22, -5, 16, -6, -28, -4, 0, 33, -10, 15, -25
    0x25f11709, 0x11f923f9, 0xf80fef0a, 0xe70bf716, 0xfd0f66de, 0x10fb16f3, 0xfce4fa, 0xe70ff621,
    // -28, 38, -54, 10, 33, -50, 108, -5, 37, 77, -1, -51, -39, 19, -55, 54, 5, -46, -27, 4, -42, -44, 14, -16, -10, -2, -21, -34, 96, -6, -69, 34
    0xaca26e4, 0xfb6cce21, 0xcdff4d25, 0x36c913d9, 0x4e5d205, 0xf00ed4d6, 0xdeebfef6, 0x22bbfa60,
    // 13, 40, 35, -8, -46, 20, 66, -50, 63, 51, 27, -28, 21, -7, -12, -12, -60, 46, 63, 4, 19, 36, -17, -45, 20, 21, 28, 9, 60, 0, 35, -44
    0xf823280d, 0xce4214d2, 0xe41b333f, 0xf4f4f915, 0x43f2ec4, 0xd3ef2413, 0x91c1514, 0xd423003c,
    // 8, 24, -37, 1, 49, -40, -22, 69, -18, -15, 16, 88, -36, -9, 38, 55, 25, 44, -6, 21, -33, 1, -65, 25, 62, 82, 63, 63, -44, -14, -15, -8
    0x1db1808, 0x45ead831, 0x5810f1ee, 0x3726f7dc, 0x15fa2c19, 0x19bf01df, 0x3f3f523e, 0xf8f1f2d4,
    // -29, 20, -81, 49, -13, -23, -53, 32, -11, -31, 48, 56, -32, -21, 57, 16, -66, 82, -39, -47, -48, 18, -10, -21, -16, 7, -15, 1, -10, 5, -66, -4
    0x31af14e3, 0x20cbe9f3, 0x3830e1f5, 0x1039ebe0, 0xd1d952be, 0xebf612d0, 0x1f107f0, 0xfcbe05f6,
    // 51, 16, -34, -19, 13, -5, -58, 11, -8, 1, 3, 43, -15, 11, -18, -18, 34, 25, -5, -10, 66, -10, -21, 2, 1, 38, 37, 83, 3, -14, 27, -18
    0xedde1033, 0xbc6fb0d, 0x2b0301f8, 0xeeee0bf1, 0xf6fb1922, 0x2ebf642, 0x53252601, 0xee1bf203,
    // 22, -30, -17, -27, -2, -48, -88, -31, -18, 4, -8, -7, 21, -20, -23, -21, 44, -26, -32, 5, 0, -3, 15, 6, -48, 21, 13, 14, 1, 14, -74, -26
    0xe5efe216, 0xe1a8d0fe, 0xf9f804ee, 0xebe9ec15, 0x5e0e62c, 0x60ffd00, 0xe0d15d0, 0xe6b60e01,
    // -59, -62, -28, 29, 57, 2, 88, 12, 36, 32, 19, 36, 36, 30, -5, -24, 23, 39, 17, -36, -17, -50, -9, 28, 14, -7, -68, -22, 13, 10, -5, -46
    0x1de4c2c5, 0xc580239, 0x24132024, 0xe8fb1e24, 0xdc112717, 0x1cf7ceef, 0xeabcf90e, 0xd2fb0a0d,
    // 10, -2, 3, 13, 32, -5, -9, 49, -50, 24, 82, 33, -74, 38, -3, 49, -2, 56, 27, 20, -28, -9, 28, 25, 85, -10, 15, -27, 0, 16, -23, -23
    0xd03fe0a, 0x31f7fb20, 0x215218ce, 0x31fd26b6, 0x141b38fe, 0x191cf7e4, 0xe50ff655, 0xe9e91000,
    // -68, -15, -43, -8, 39, -45, 127, -28, -18, 74, 0, -6, 9, -40, -12, -61, -14, 1, 46, -36, 12, -72, 34, -18, 74, 36, -53, 15, -33, 60, -1, -13
    0xf8d5f1bc, 0xe47fd327, 0xfa004aee, 0xc3f4d809, 0xdc2e01f2, 0xee22b80c, 0xfcb244a, 0xf3ff3cdf,
    // -44, 2, 99, -3, 19, 24, -43, 58, -38, -9, 96, -17, -57, 45, -54, 79, 36, -24, 95, 45, -65, 7, -43, 35, 62, -7, 70, -4, 86, 39, -30, -46
    0xfd6302d4, 0x3ad51813, 0xef60f7da, 0x4fca2dc7, 0x2d5fe824, 0x23d507bf, 0xfc46f93e, 0xd2e22756,
    // 9, -32, -16, -13, 71, -8, -118, -19, -66, 16, -7, -40, 57, 64, -16, -37, 24, -23, -38, 43, -11, 15, -75, 7, 5, -27, 31, -7, 5, 22, 39, 53
    0xf3f0e009, 0xed8af847, 0xd8f910be, 0xdbf04039, 0x2bdae918, 0x7b50ff5, 0xf91fe505, 0x35271605,
    // -77, 29, -32, 100, 15, 0, 10, 25, -22, 33, -2, -13, 26, -8, 46, 15, 10, 24, -4, -40, -11, 9, 21, 4, -3, -27, -43, 35, 16, -41, -35, -16
    0x64e01db3, 0x190a000f, 0xf3fe21ea, 0xf2ef81a, 0xd8fc180a, 0x41509f5, 0x23d5e5fd, 0xf0ddd710,
    // 21, -57, 37, 2, 6, 52, -81, 2, -27, -54, 3, 2, 46, -8, 102, 11, 52, 18, 10, -15, -29, -2, -29, 24, 21, 12, 42, -2, -45, 41, -12, 5
    0x225c715, 0x2af3406, 0x203cae5, 0xb66f82e, 0xf10a1234, 0x18e3fee3, 0xfe2a0c15, 0x5f429d3,
    // -24, 37, -56, -16, 3, 8, 34, 64, -31, -51, -52, 20, 18, 11, 4, 23, -31, -47, -3, -27, 21, -29, 23, -4, 2, -85, 1, 2, -50, 32, 26, 36
    0xf0c825e8, 0x40220803, 0x14cccde1, 0x17040b12, 0xe5fdd1e1, 0xfc17e315, 0x201ab02, 0x241a20ce,
    // -37, 4, 30, 19, -13, 49, -8, 45, 31, -52, -40, 45, -16, -7, 18, 14, 15, 46, -31, -17, -10, -8, -12, 1, -62, 18, 35, 26, -52, 19, 21, 37
    0x131e04db, 0x2df831f3, 0x2dd8cc1f, 0xe12f9f0, 0xefe12e0f, 0x1f4f8f6, 0x1a2312c2, 0x251513cc,
    // 47, -1, -23, 10, 2, -7, 7, 26, -11, 5, -48, 41, 32, -20, 28, -25, -84, 17, -27, -7, -17, 2, -7, -17, -58, 9, -17, -41, -44, 14, 9, 10
    0xae9ff2f, 0x1a07f902, 0x29d005f5, 0xe71cec20, 0xf9e511ac, 0xeff902ef, 0xd7ef09c6, 0xa090ed4,
    // 51, -26, -44, 30, 36, -20, 27, -5, -30, 31, -4, 10, -15, -28, 33, 6, 46, -17, 11, -3, 17, -58, 45, -40, 32, 32, 25, 8, -37, -4, 21, -57
    0x1ed4e633, 0xfb1bec24, 0xafc1fe2, 0x621e4f1, 0xfd0bef2e, 0xd82dc611, 0x8192020, 0xc715fcdb,
    // 38, -21, 10, -43, 0, -19, -15, -4, 10, -51, -9, 0, -29, -27, -28, 23, 11, -3, 14, 52, -4, -41, 14, 39, 11, -48, 32, -8, 37, -9, 66, -9
    0xd50aeb26, 0xfcf1ed00, 0xf7cd0a, 0x17e4e5e3, 0x340efd0b, 0x270ed7fc, 0xf820d00b, 0xf742f725,
    // 40, 36, 19, -24, 32, -10, -4, 63, -34, -1, -33, 44, -22, -50, 31, -15, -15, 49, 0, 30, -29, 9, 73, -5, -25, 38, 17, 80, -101, -39, -41, 20
    0xe8132428, 0x3ffcf620, 0x2cdfffde, 0xf11fceea, 0x1e0031f1, 0xfb4909e3, 0x501126e7, 0x14d7d99b,
    // 0, 7, 26, -24, 21, 5, 37, -20, -23, -74, 23, 47, -7, 15, 27, -68, 18, 54, 13, 0, -35, -33, -63, 35, -113, 20, 0, 50, -24, -63, -20, -4
    0xe81a0700, 0xec250515, 0x2f17b6e9, 0xbc1b0ff9, 0xd3612, 0x23c1dfdd, 0x3200148f, 0xfcecc1e8,
    // -23, -16, 3, 3, 115, 0, 90, -27, 46, 47, 5, 6, 20, 1, -24, 2, 18, 3, -47, -65, 24, -22, -31, -32, -37, 8, -17, -23, -23, -32, 52, 29
    0x303f0e9, 0xe55a0073, 0x6052f2e, 0x2e80114, 0xbfd10312, 0xe0e1ea18, 0xe9ef08db, 0x1d34e0e9,
    // 39, -8, 10, -1, 38, -23, -22, -37, 23, -38, -3, 12, -37, 7, 18, 14, 52, 75, 22, 90, -31, 20, -98, 19, -19, -11, -25, -38, -2, -41, 25, 45
    0xff0af827, 0xdbeae926, 0xcfdda17, 0xe1207db, 0x5a164b34, 0x139e14e1, 0xdae7f5ed, 0x2d19d7fe,
    // 0, 39, -45, -47, 55, -50, -31, -35, 79, -45, 13, -58, 27, -9, -51, 36, 50, -39, 9, -37, -5, -22, -95, -28, 4, -54, -70, -19, 7, -16, -8, -15
    0xd1d32700, 0xdde1ce37, 0xc60dd34f, 0x24cdf71b, 0xdb09d932, 0xe4a1eafb, 0xedbaca04, 0xf1f8f007,
    // -19, 49, -53, 4, -54, 32, -4, -62, -34, 14, 0, -25, 29, 10, 50, -23, 5, -30, 3, 14, 23, -7, -32, 3, -22, 44, -21, -37, -51, 51, -31, -55
    0x4cb31ed, 0xc2fc20ca, 0xe7000ede, 0xe9320a1d, 0xe03e205, 0x3e0f917, 0xdbeb2cea, 0xc9e133cd,
    // -16, -28, -15, -17, 75, -1, 94, 23, 125, -82, 97, 8, 28, -16, -80, 66, -48, 13, -75, 6, -19, -1, -60, 11, 41, 10, 17, 50, -5, -29, 72, -16
    0xeff1e4f0, 0x175eff4b, 0x861ae7d, 0x42b0f01c, 0x6b50dd0, 0xbc4ffed, 0x32110a29, 0xf048e3fb,
    // 5, 68, 1, 53, 11, -24, 5, -60, 7, 3, 50, 31, -76, -78, -6, 29, 53, -52, 62, 44, -114, 5, -76, 16, 15, -52, -74, 12, 2, 89, -31, -4
    0x35014405, 0xc405e80b, 0x1f320307, 0x1dfab2b4, 0x2c3ecc35, 0x10b4058e, 0xcb6cc0f, 0xfce15902,
    // 3, -14, 67, -35, -12, 52, 71, 57, 7, 26, 24, 59, -9, 16, -5, 36, -9, 35, -13, 69, 24, 61, 82, 5, 11, 71, 71, 45, -16, -8, -49, 19
    0xdd43f203, 0x394734f4, 0x3b181a07, 0x24fb10f7, 0x45f323f7, 0x5523d18, 0x2d47470b, 0x13cff8f0,
    // -24, -14, 30, -33, -9, -56, 20, 23, -2, -21, 51, 43, 58, -35, -28, -5, -99, 71, 56, 47, 52, -53, -37, -32, 69, -20, -21, 64, 6, -14, 6, 32
    0xdf1ef2e8, 0x1714c8f7, 0x2b33ebfe, 0xfbe4dd3a, 0x2f38479d, 0xe0dbcb34, 0x40ebec45, 0x2006f206,
    // 2, 97, -31, -92, 19, -60, 111, 51, 98, 47, -26, 13, -14, -35, 10, 103, -31, -14, 4, -13, -23, -25, -27, -39, 1, 44, -11, 69, 20, 34, 88, -28
    0xa4e16102, 0x336fc413, 0xde62f62, 0x670addf2, 0xf304f2e1, 0xd9e5e7e9, 0x45f52c01, 0xe4582214,
    // -15, -21, -5, -12, 14, 40, -1, 80, 54, 16, -69, -8, 14, -23, -29, 31, -73, -22, 49, 91, -16, 5, 36, -56, -40, 58, 24, -19, -19, -17, -40, -29
    0xf4fbebf1, 0x50ff280e, 0xf8bb1036, 0x1fe3e90e, 0x5b31eab7, 0xc82405f0, 0xed183ad8, 0xe3d8efed,
    // -10, -8, -32, -51, -13, -4, -52, 54, 48, -77, -49, 25, 19, 38, 19, 23, -23, 25, 14, 13, -47, -19, -65, 5, 50, 26, 13, 70, 0, -50, 92, 31
    0xcde0f8f6, 0x36ccfcf3, 0x19cfb330, 0x17132613, 0xd0e19e9, 0x5bfedd1, 0x460d1a32, 0x1f5cce00,
    // -57, -24, -43, 34, -21, 22, -9, -30, -1, 0, 22, 26, -6, -20, 10, -1, 73, -80, 6, -77, 6, 43, 51, -18, 10, 1, -49, 19, -40, 31, -17, -22
    0x22d5e8c7, 0xe2f716eb, 0x1a1600ff, 0xff0aecfa, 0xb306b049, 0xee332b06, 0x13cf010a, 0xeaef1fd8,
    // -13, 36, -35, 5, 3, -12, 39, -26, 42, 18, 15, -3, 40, -37, -2, 23, -22, -15, 31, -50, 25, -52, 11, -19, -13, 12, -19, -8, 2, -12, -13, -38
    0x5dd24f3, 0xe627f403, 0xfd0f122a, 0x17fedb28, 0xce1ff1ea, 0xed0bcc19, 0xf8ed0cf3, 0xdaf3f402,
    // -29, 80, -20, -81, -44, 23, -15, -24, 33, 4, 0, -20, 39, 25, 18, -55, 56, -20, -32, -14, 18, -16, 16, 38, -14, 43, -23, -52, -57, 20, 48, -30
    0xafec50e3, 0xe8f117d4, 0xec000421, 0xc9121927, 0xf2e0ec38, 0x2610f012, 0xcce92bf2, 0xe23014c7,
    // 4, 64, -41, 0, -3, -26, -26, 21, -30, -8, 40, 14, -12, 61, -17, -14, 0, 30, -33, -41, -37, -46, 21, 26, -27, -17, -64, 29, 95, -19, -14, 51
    0xd74004, 0x15e6e6fd, 0xe28f8e2, 0xf2ef3df4, 0xd7df1e00, 0x1a15d2db, 0x1dc0efe5, 0x33f2ed5f,
    // -30, 30, -16, 7, -19, 1, -32, -56, 1, 124, 54, 15, 66, -13, -17, 4, -23, 18, -35, -48, 69, 89, 8, -14, -26, 81, -75, -54, -5, -14, -27, -31
    0x7f01ee2, 0xc8e001ed, 0xf367c01, 0x4eff342, 0xd0dd12e9, 0xf2085945, 0xcab551e6, 0xe1e5f2fb,
    // 28, 1, -25, 7, 22, -13, -2, -19, -66, -23, 12, -29, -22, -84, -1, 49, 14, -28, -4, 9, 3, 11, -95, 32, 20, 1, 17, 25, -61, 16, 30, -109
    0x7e7011c, 0xedfef316, 0xe30ce9be, 0x31ffacea, 0x9fce40e, 0x20a10b03, 0x19110114, 0x931e10c3,
    // 41, 34, -1, -14, -10, -34, 0, -40, 55, -40, -49, -6, -79, -5, -56, 97, -11, -26, -20, 20, -89, -49, -28, 60, -26, -27, -53, 22, 34, 18, 12, -9
    0xf2ff2229, 0xd800def6, 0xfacfd837, 0x61c8fbb1, 0x14ece6f5, 0x3ce4cfa7, 0x16cbe5e6, 0xf70c1222,
    // 36, -21, 19, 53, 4, -15, -40, 59, 28, -3, 26, 22, -3, 48, -2, -48, -21, 26, 7, 24, -12, 4, 58, 19, 11, 15, 53, 60, 43, -26, 4, 22
    0x3513eb24, 0x3bd8f104, 0x161afd1c, 0xd0fe30fd, 0x18071aeb, 0x133a04f4, 0x3c350f0b, 0x1604e62b,
    // 45, 11, -18, -2, 42, -24, -1, 7, -47, 17, -28, 40, 34, -30, 71, -8, 51, -101, -8, 35, 56, 69, 40, 7, -9, -43, 19, 14, 62, 35, 5, 16
    0xfeee0b2d, 0x7ffe82a, 0x28e411d1, 0xf847e222, 0x23f89b33, 0x7284538, 0xe13d5f7, 0x1005233e,
    // 34, -11, 55, -1, -37, 36, 0, -41, 19, 28, 29, -38, -30, 23, 3, -4, 3, -7, -30, 17, -29, 56, -123, -3, -29, -51, -28, -28, -15, 43, 21, 8
    0xff37f522, 0xd70024db, 0xda1d1c13, 0xfc0317e2, 0x11e2f903, 0xfd8538e3, 0xe4e4cde3, 0x8152bf1,
    // -13, -31, 36, 69, -4, 29, 52, -38, 2, 19, 12, 4, 3, 24, -32, -9, -94, 9, -5, -85, -15, -22, 47, -91, 21, 7, 15, 11, -34, 10, 11, 44
    0x4524e1f3, 0xda341dfc, 0x40c1302, 0xf7e01803, 0xabfb09a2, 0xa52feaf1, 0xb0f0715, 0x2c0b0ade,
    // -13, -43, -19, 32, 21, -16, -6, -45, 40, -13, -21, -34, -24, 19, 18, -46, -21, -20, -18, -35, 2, -20, 31, -42, -11, -62, -46, -78, 3, -21, -26, 48
    0x20edd5f3, 0xd3faf015, 0xdeebf328, 0xd21213e8, 0xddeeeceb, 0xd61fec02, 0xb2d2c2f5, 0x30e6eb03,
    // 43, 10, 51, 78, 24, 74, 19, 53, -38, -6, -55, -10, 15, -11, 78, -55, 18, -89, 5, 55, 39, 37, 82, 38, 5, -41, 28, -40, -11, -41, 7, -10
    0x4e330a2b, 0x35134a18, 0xf6c9fada, 0xc94ef50f, 0x3705a712, 0x26522527, 0xd81cd705, 0xf607d7f5,
    // 4, -15, 20, -19, 96, 28, 12, 19, -31, -14, 57, 6, -47, -36, -37, 23, -3, 12, -16, 6, -4, -2, -99, 22, 24, 14, 31, 11, -69, 3, 13, -60
    0xed14f104, 0x130c1c60, 0x639f2e1, 0x17dbdcd1, 0x6f00cfd, 0x169dfefc, 0xb1f0e18, 0xc40d03bb,
    // 5, -29, -3, -17, -3, -84, 8, -39, -42, -66, 45, 15, -45, 2, -14, 22, 28, 63, 7, 84, -87, -58, -61, 16, 38, -28, -54, 17, -8, 47, 14, 19
    0xeffde305, 0xd908acfd, 0xf2dbed6, 0x16f202d3, 0x54073f1c, 0x10c3c6a9, 0x11cae426, 0x130e2ff8,
    // -5, -5, 38, -6, 57, 28, 12, -23, -53, 101, 1, -30, -35, -20, 71, -21, 98, -11, 7, 15, 43, 71, 3, 27, 4, -37, -14, -21, -38, -23, -7, 16
    0xfa26fbfb, 0xe90c1c39, 0xe20165cb, 0xeb47ecdd, 0xf07f562, 0x1b03472b, 0xebf2db04, 0x10f9e9da,
    // -12, 22, 53, 6, 38, -4, 29, -36, 46, -14, 9, -17, 32, 21, -106, -99, -53, 59, 25, -39, 75, -70, -19, -20, 42, 5, 33, 21, -7, -12, -20, 0
    0x63516f4, 0xdc1dfc26, 0xef09f22e, 0x9d961520, 0xd9193bcb, 0xecedba4b, 0x1521052a, 0xecf4f9,
};
static const uint embedded_encoder3_ResidualBlock_1_body_pw_contract_bias_dwords[16] = {
    // -6.69e-05, 0.0003777, 0.0001095, 9.423e-05, -0.0005555, -0.0001307, -0.00011885, -5.84e-06, -0.0002025, -0.000223, -0.0001076, -0.000156, -0.0009146, 0.0001569, 9.114e-05, 7.427e-05
    0xe308462, 0x62d072d, 0x8848908d, 0x806287ca, 0x8b4f8aa3, 0x891d870d, 0x924937e, 0x4de05f9,
    // -9.71e-05, 0.0003011, 0.00011957, -0.0009346, 0.0002257, 0.0003762, -0.0003955, 5.955e-05, -0.000306, -0.0006647, 0.0001518, 0.000626, 0.0001507, -0.0006404, 0.0002059, -1.27e-05
    0xcef865d, 0x93a807d6, 0xe2a0b65, 0x3e78e7b, 0x91728d03, 0x112108f9, 0x913f08f0, 0x80d50abf,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass5(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage__encoder3_ResidualBlock_1_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _encoder3_ResidualBlock_1_residual_func_Split_output_grouped = {
        uint3(960, 540, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 32), // threadGroupSliceSize
        uint3(960, 540, 32), // storageSize
        uint3(32, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        49766400, // threadGroupStorageByteOffset
        storage__encoder3_ResidualBlock_1_residual_func_Split_output_grouped };
    
    const ConstantBufferStorage<576> storage_embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005069198086857796, storage_embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = { embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.003858785377815366, storage_embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_encoder3_ResidualBlock_1_body_pw_expand_bias = { embedded_encoder3_ResidualBlock_1_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_encoder3_ResidualBlock_1_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_1_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0038207604084163904, storage_embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder3_ResidualBlock_1_body_pw_contract_bias = { embedded_encoder3_ResidualBlock_1_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder3_ResidualBlock_1_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_1_body_pw_contract_bias };
    
    // fused_quantized_NHWC_/encoder3/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_10 = uint3(960, 540, 32);
    const int3 groupStart_slice_10 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_10 = uint3(64, 1, 32);
    const uint3 storageSize_slice_10 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_10 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_10 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_10 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_10 = dot(groupStart_slice_10, tensorByteStrides_slice_10);
    const float quantizationScale_slice_10 = 0.019347405061125755;
    const RWBufferStorage storage_slice_10 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_10 = { logicalSize_slice_10, groupStart_slice_10, groupSize_slice_10, storageSize_slice_10, tensorByteStrides_slice_10, paddingBegin_slice_10, paddingEnd_slice_10, threadGroupByteOffsetInTensor_slice_10 + 33177600, quantizationScale_slice_10, storage_slice_10 };
    // Fusedquantized_/encoder3/ResidualBlock_1/residual_func/Concat_quantized_/encoder3/ResidualBlock_1/body/spatial_mixing/partial_conv/Conv_quantized_/encoder3/ResidualBlock_1/body/spatial_mixing/Concat_quantized_/encoder3/ResidualBlock_1/body/pw_expand/Conv_/encoder3/ResidualBlock_1/body/pw_expand_act/Relu_quantized_/encoder3/ResidualBlock_1/body/pw_contract/Conv_/encoder3/ResidualBlock_1/Add (32, 540, 960), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,) -> (32, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<32, 1>(0.017191138118505478, 0.021955177187919617, 0.01790967583656311, _encoder3_ResidualBlock_1_residual_func_Split_output_grouped, embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias, embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_1_body_pw_expand_bias, embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_1_body_pw_contract_bias, slice_10, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_5
#ifdef MLSR_PASS_5_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass5_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/encoder3/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_11 = uint3(960, 540, 32);
    const int3 groupStart_slice_11 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_11 = uint3(32, 1, 32);
    const uint3 storageSize_slice_11 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_11 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_11 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_11 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_11 = dot(groupStart_slice_11, tensorByteStrides_slice_11);
    const float quantizationScale_slice_11 = 0.019347405061125755;
    const RWBufferStorage storage_slice_11 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_11 = { logicalSize_slice_11, groupStart_slice_11, groupSize_slice_11, storageSize_slice_11, tensorByteStrides_slice_11, paddingBegin_slice_11, paddingEnd_slice_11, threadGroupByteOffsetInTensor_slice_11 + 33177600, quantizationScale_slice_11, storage_slice_11 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_11, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_5_POST


#ifdef MLSR_PASS_6
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FusedConv2D_k2s2b_QuantizedOutput.hlsli"

static const uint embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias_dwords[32] = {
    // -0.08716, 0.0647, 0.02882, -0.00856, -0.0599, -0.014984, -0.005127, 0.0836, -0.03052, 0.006626, -0.003181, -0.03656, 0.0737, -0.0858, -0.00916, 0.02977
    0x2c24ad94, 0xa0622761, 0xa3acabab, 0x2d5a9d40, 0x1ec9a7d0, 0xa8ae9a84, 0xad7e2cb8, 0x279fa0b1,
    // 0.01395, -0.02528, 0.03357, 0.1168, -0.06042, 0.01718, -0.004486, 0.1327, 0.0617, 0.05774, 0.2142, 0.06616, -0.04285, -0.1495, -0.1189, -0.01451
    0xa6792324, 0x2f7a284c, 0x2466abbc, 0x303f9c98, 0x2b642be6, 0x2c3c32db, 0xb0c9a97c, 0xa36eaf9c,
    // 0.10474, -0.0683, -0.138, -0.03406, -0.10986, -0.3708, 0.0709, 0.2112, -0.04718, 0.02599, -0.1241, -0.1256, 0.00848, -0.00703, -0.06213, 0.01197
    0xac5f2eb4, 0xa85cb06a, 0xb5efaf08, 0x32c22c8a, 0x26a7aa0a, 0xb005aff1, 0x9f332057, 0x2221abf4,
    // -0.3228, 0.013596, 0.0485, 0.09515, 0.02615, -0.1127, -0.1439, -0.08264, 0.0905, 0.2107, 0.04724, -0.057, 0.02467, 0.02661, 0.04214, -0.03217
    0x22f6b52a, 0x2e172a35, 0xaf3626b2, 0xad4ab09b, 0x32be2dcb, 0xab4c2a0c, 0x26d02651, 0xa81e2965,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass6(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(960, 540, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 32), // threadGroupSliceSize
        uint3(960, 540, 32), // storageSize
        uint3(32, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        33177600, // threadGroupStorageByteOffset
        0.019347405061125755, storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const BufferStorage storage__encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 32, 64), // threadGroupSliceSize
        uint4(2, 2, 32, 64), // storageSize
        uint4(32, 64, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        9856, // threadGroupStorageByteOffset
        0.0031457620207220316, storage__encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias = { embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias };
    
    // Fusedquantized_/encoder3/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_12 = uint3(480, 270, 64);
    const int3 groupStart_slice_12 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 64);
    const uint3 groupSize_slice_12 = uint3(64, 1, 64);
    const uint3 storageSize_slice_12 = uint3(480, 270, 64);
    const uint3 tensorByteStrides_slice_12 = uint3(64, 30720, 1);
    const uint3 paddingBegin_slice_12 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_12 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_12 = dot(groupStart_slice_12, tensorByteStrides_slice_12);
    const RWBufferStorage storage_slice_12 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_12 = { logicalSize_slice_12, groupStart_slice_12, groupSize_slice_12, storageSize_slice_12, tensorByteStrides_slice_12, paddingBegin_slice_12, paddingEnd_slice_12, threadGroupByteOffsetInTensor_slice_12 + 49766400, storage_slice_12 };
    // Fusedquantized_/encoder3/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs (32, 540, 960), (64, 32, 2, 2), (64,) -> (64, 270, 480)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FusedConv2D_k2s2b_QuantizedOutput(0.019169600680470467, 0.028077777475118637, fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, _encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias, slice_12, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_6
#ifdef MLSR_PASS_6_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass6_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // Fusedquantized_/encoder3/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_13 = uint3(480, 270, 64);
    const int3 groupStart_slice_13 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 64);
    const uint3 groupSize_slice_13 = uint3(32, 1, 64);
    const uint3 storageSize_slice_13 = uint3(480, 270, 64);
    const uint3 tensorByteStrides_slice_13 = uint3(64, 30720, 1);
    const uint3 paddingBegin_slice_13 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_13 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_13 = dot(groupStart_slice_13, tensorByteStrides_slice_13);
    const RWBufferStorage storage_slice_13 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_13 = { logicalSize_slice_13, groupStart_slice_13, groupSize_slice_13, storageSize_slice_13, tensorByteStrides_slice_13, paddingBegin_slice_13, paddingEnd_slice_13, threadGroupByteOffsetInTensor_slice_13 + 49766400, storage_slice_13 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_13, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_6_POST


#ifdef MLSR_PASS_7
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords[16] = {
    // 0.0001848, 0.0002161, 0.0001363, -0.0004954, 4.244e-05, 0.0002959, 0.0002615, 7.93e-05, 0.0003352, -0.000266, 0.0001979, 0.0002828, 0.0002587, -0.00011533, -0.0002025, 0.000728
    0xb150a0e, 0x900f0877, 0xcd902c8, 0x5320c49, 0x8c5c0d7e, 0xca20a7c, 0x878f0c3d, 0x11f78aa3,
    // 0.00074, 9.13e-05, 0.0004458, -0.0003188, -0.0001704, -0.0001448, -0.0003605, 0.0006056, 0.0002873, -6.39e-05, -0.0001559, -4.053e-05, -0.0002491, 0.0003078, 0.0001361, 0.0003462
    0x5fc1210, 0x8d390f4e, 0x88bf8995, 0x10f68de8, 0x84300cb5, 0x82a8891c, 0xd0b8c15, 0xdac0876,
};
static const uint embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias_dwords[64] = {
    // -0.0903, -0.0904, -0.0687, -0.08075, -0.03986, -0.1069, -0.1106, -0.1315, -0.2495, 0.00424, -0.1165, -0.1278, -0.2627, 0.1082, -0.03128, -0.1633
    0xadc9adc7, 0xad2bac66, 0xaed7a91a, 0xb035af14, 0x1c57b3fc, 0xb017af75, 0x2eedb434, 0xb13aa801,
    // -0.04675, 0.10724, -0.1887, -0.2617, -0.0787, -0.2378, -0.0767, -0.01825, -0.0972, -0.2183, 0.03842, -0.1162, -0.1377, -0.00409, -0.4055, -0.228
    0x2edda9fc, 0xb430b20a, 0xb39cad09, 0xa4acace9, 0xb2fcae39, 0xaf7028eb, 0x9c30b068, 0xb34cb67d,
    // 0.09534, -0.1129, -0.03638, -0.259, 0.01411, 0.001223, 0.0022, -0.0206, 0.02121, -0.1323, 0.09955, -0.0908, -0.1142, 0.0156, -0.1256, -0.0793
    0xaf3a2e1a, 0xb425a8a8, 0x15022339, 0xa5461881, 0xb03c256e, 0xadd02e5f, 0x23fdaf4f, 0xad13b005,
    // -0.0975, -0.2747, -0.1415, -0.1522, -0.0843, -0.5225, -0.1304, -0.09247, -0.1146, -0.0652, -0.05267, -0.05414, -0.1232, -0.06143, -0.1176, -0.02065
    0xb465ae3d, 0xb0dfb087, 0xb82ead65, 0xadebb02c, 0xac2caf56, 0xaaeeaabe, 0xabddafe3, 0xa549af87,
    // -0.0453, -0.11224, -0.1324, -0.1663, -0.04855, -0.04257, -0.05292, -0.2166, -0.2174, -0.06134, -0.1089, 0.0191, -0.1532, -0.03616, -0.07074, -0.01697
    0xaf2fa9cc, 0xb152b03d, 0xa973aa37, 0xb2eeaac6, 0xabdab2f5, 0x24e4aef8, 0xa8a1b0e7, 0xa458ac87,
    // 0.004314, -0.1508, -0.02852, -0.2046, -0.1544, -0.1418, -0.0836, -0.1693, -0.1837, -0.0757, -0.05804, -0.06366, 0.007324, -0.186, -0.04105, -0.08185
    0xb0d31c6b, 0xb28ca74d, 0xb08ab0f1, 0xb16bad5a, 0xacd8b1e1, 0xac13ab6e, 0xb1f41f80, 0xad3da941,
    // -0.06137, -0.1814, -0.0206, -0.0936, 0.05704, -0.04672, 0.00972, 0.03232, -0.05597, -0.356, -0.08276, -0.0957, -0.03995, -0.1296, -0.0527, -0.01826
    0xb1ceabdb, 0xadfea546, 0xa9fb2b4d, 0x282320fa, 0xb5b2ab2a, 0xae20ad4c, 0xb026a91d, 0xa4adaabf,
    // -0.157, -0.1431, -0.1565, -0.0601, -0.1394, -0.012924, -0.1698, -0.10785, -0.18, -0.06207, 0.03976, -0.1953, -0.0448, -0.0912, -0.00977, -0.0859
    0xb094b106, 0xabb1b102, 0xa29eb076, 0xaee7b16f, 0xabf2b1c3, 0xb2402917, 0xadd6a9bc, 0xad7fa101,
};
static const uint embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias_dwords[32] = {
    // 0.001483, -4.905e-05, 0.0003948, 0.00067, -0.0002127, -0.001156, -0.0004866, -0.00241, -0.0004568, 0.0001916, -0.0001335, -0.0002828, 0.0002878, -0.001048, 0.0006795, -0.000644
    0x83371613, 0x117d0e78, 0x94bc8af8, 0x98f08ff9, 0xa478f7c, 0x8ca28860, 0x944b0cb7, 0x91471191,
    // -0.000896, -0.000992, -0.000719, -0.001174, 0.000541, 0.0001678, 0.000839, -0.0004005, -0.0008492, 0.0004137, -0.001783, -0.001812, -0.0005927, 0.0003786, 0.00017, -0.000398
    0x94109357, 0x94cf91e4, 0x980106f, 0x8e9012e0, 0xec792f5, 0x976c974e, 0xe3490db, 0x8e850992,
    // 0.0002071, -0.0003765, -0.002426, 0.0007224, 0.000898, -0.001654, -0.001173, 0.0003068, 0.000994, -0.0007367, 0.00011176, -0.001341, -0.0011835, -0.000929, -0.000569, 0.0004733
    0x8e2b0ac9, 0x11eb98f8, 0x96c6135b, 0xd0794ce, 0x92091412, 0x957e0753, 0x939c94d9, 0xfc190a9,
    // 0.0002309, 0.0004084, 0.001113, 0.0005393, 0.0004814, -0.0006766, -0.000478, -0.0002341, 0.0002756, 0.001221, 0.00104, 0.001036, -0.000904, 0.0001857, -0.0016365, -0.000946
    0xeb10b91, 0x106b148f, 0x918b0fe3, 0x8bac8fd5, 0x15000c84, 0x143e1443, 0xa169368, 0x93c096b4,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass7(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = {
        uint3(480, 270, 64), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(480, 270, 64), // threadGroupSliceSize
        uint3(480, 270, 64), // storageSize
        uint3(64, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        49766400, // threadGroupStorageByteOffset
        storage_Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped };
    
    const BufferStorage storage__bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 32), // threadGroupSliceSize
        uint4(3, 3, 16, 32), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        18048, // threadGroupStorageByteOffset
        0.005512189585715532, storage__bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = { embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 128), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 128), // threadGroupSliceSize
        uint4(1, 1, 64, 128), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        22656, // threadGroupStorageByteOffset
        0.005283745471388102, storage__bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<64> storage_embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias = { embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<64> > embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias = {
        128, // logicalSize
        0, // threadGroupSliceStart
        128, // threadGroupSliceSize
        128, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 128, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 128, 64), // threadGroupSliceSize
        uint4(1, 1, 128, 64), // storageSize
        uint4(128, 128, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        30848, // threadGroupStorageByteOffset
        0.005271106027066708, storage__bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias = { embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias };
    
    // /bottleneck/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_14 = uint3(480, 270, 64);
    const int3 groupStart_slice_14 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 64);
    const uint3 groupSize_slice_14 = uint3(64, 1, 64);
    const uint3 storageSize_slice_14 = uint3(480, 270, 64);
    const uint3 tensorByteStrides_slice_14 = uint3(64, 30720, 1);
    const uint3 paddingBegin_slice_14 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_14 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_14 = dot(groupStart_slice_14, tensorByteStrides_slice_14);
    const RWBufferStorage storage_slice_14 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_14 = { logicalSize_slice_14, groupStart_slice_14, groupSize_slice_14, storageSize_slice_14, tensorByteStrides_slice_14, paddingBegin_slice_14, paddingEnd_slice_14, threadGroupByteOffsetInTensor_slice_14 + 58060800, storage_slice_14 };
    // Fusedquantized_/bottleneck/ResidualBlock_0/residual_func/Concat_quantized_/bottleneck/ResidualBlock_0/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_0/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_0/body/pw_expand/Conv_/bottleneck/ResidualBlock_0/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_0/body/pw_contract/Conv_/bottleneck/ResidualBlock_0/Add (64, 270, 480), (32, 16, 3, 3), (32,), (128, 64, 1, 1), (128,), (64, 128, 1, 1), (64,) -> (64, 270, 480)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<64, 2>(0.019169600680470467, 0.028077777475118637, 0.02192646823823452, 0.021226389333605766, 0.03648017346858978, Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped, _bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias, _bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias, _bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias, slice_14, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_7
#ifdef MLSR_PASS_7_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass7_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /bottleneck/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_15 = uint3(480, 270, 64);
    const int3 groupStart_slice_15 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 64);
    const uint3 groupSize_slice_15 = uint3(32, 1, 64);
    const uint3 storageSize_slice_15 = uint3(480, 270, 64);
    const uint3 tensorByteStrides_slice_15 = uint3(64, 30720, 1);
    const uint3 paddingBegin_slice_15 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_15 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_15 = dot(groupStart_slice_15, tensorByteStrides_slice_15);
    const RWBufferStorage storage_slice_15 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_15 = { logicalSize_slice_15, groupStart_slice_15, groupSize_slice_15, storageSize_slice_15, tensorByteStrides_slice_15, paddingBegin_slice_15, paddingEnd_slice_15, threadGroupByteOffsetInTensor_slice_15 + 58060800, storage_slice_15 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_15, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_7_POST


#ifdef MLSR_PASS_8
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords[16] = {
    // -5.92e-05, -0.0004106, -0.000236, -0.000282, 0.0001861, -0.0002084, 8.93e-05, 0.000303, -4.36e-05, -8.83e-05, 0.0002618, 0.000495, 0.0005927, 0.0001143, -0.0003254, 0.0001788
    0x8eba83e1, 0x8c9f8bbc, 0x8ad40a19, 0xcf705da, 0x85c982db, 0x100e0c4a, 0x77e10db, 0x9dc8d55,
    // 0.0001787, -8.22e-05, 8.37e-05, -0.0001382, 0.00010824, -7.045e-05, 0.0002079, 0.0001025, -0.0001633, -0.0001432, -0.0001109, 0.0003653, -2.12e-05, -4.74e-05, 0.000246, 0.000491
    0x856309db, 0x8887057c, 0x849e0718, 0x6b80ad0, 0x88b1895a, 0xdfc8745, 0x831b8164, 0x10060c08,
};
static const uint embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias_dwords[64] = {
    // -0.2688, 0.135, 0.05725, -0.012245, -0.10767, 0.111, -0.0789, -0.1233, 0.01361, -0.0772, -0.1375, 0.04916, 0.0868, 0.2, -0.06775, 0.1202
    0x3052b44d, 0xa2452b54, 0x2f1baee4, 0xafe4ad0d, 0xacf122f8, 0x2a4bb066, 0x32662d8e, 0x2fb1ac56,
    // 0.1283, -0.1405, -0.06964, -0.259, 0.003443, -0.05774, 0.04935, -0.09357, -0.1182, -0.01129, -0.02086, -0.02522, -0.2255, -0.3025, -0.051, -0.05136
    0xb07f301b, 0xb425ac75, 0xab641b0d, 0xadfd2a51, 0xa1c8af91, 0xa675a557, 0xb4d7b337, 0xaa93aa87,
    // -0.04773, -0.1687, -0.0423, -0.1714, -0.10425, -0.05243, 0.0478, 0.01145, -0.05893, 0.004814, -0.09033, -0.3757, 0.0081, 0.0976, 0.005394, -0.1277
    0xb166aa1c, 0xb17ca96a, 0xaab6aeac, 0x21dd2a1e, 0x1ceeab8b, 0xb603adc8, 0x2e3f2026, 0xb0161d86,
    // -0.0549, 0.02051, -0.1956, -0.0544, -0.4756, -0.132, 0.1442, -0.0497, 0.0326, -0.1838, 0.0729, -0.1704, -0.09125, -0.1758, -0.001501, -0.12445
    0x2540ab07, 0xaaf7b242, 0xb039b79c, 0xaa5d309d, 0xb1e2282c, 0xb1742caa, 0xb1a0add7, 0xaff79626,
    // -0.0785, -0.08, 0.08057, 0.05936, -0.10425, -0.001803, -0.01511, -0.2227, 0.048, 0.0922, -0.03568, -0.058, -0.04953, -0.03134, 0.193, -0.08875
    0xad1fad06, 0x2b992d28, 0x9763aeac, 0xb320a3bc, 0x2de72a25, 0xab6da891, 0xa803aa57, 0xadae322d,
    // -0.1667, 0.03357, -0.1337, 0.03397, 0.07306, -0.12244, -0.2532, -0.001885, -0.1395, -0.0825, -0.2756, 0.02046, -0.01156, 0.077, -0.1768, -0.2673
    0x284cb156, 0x2859b047, 0xafd62cad, 0x97b9b40d, 0xad48b077, 0x253db469, 0x2ceea1eb, 0xb447b1a8,
    // -0.1742, -0.173, -0.1414, -0.188, -0.07745, 0.12427, 0.03955, -0.1046, 0.07385, -0.09235, -0.1912, -0.04315, -0.01645, -0.1312, 0.09174, 0.02184
    0xb189b193, 0xb204b086, 0x2ff4acf5, 0xaeb22910, 0xade92cba, 0xa986b21e, 0xb033a436, 0x25972ddf,
    // 0.03134, -0.0881, -0.0633, 0.04523, -0.1443, -0.1306, -0.0369, 0.004566, -0.2106, -0.06683, 0.02428, -0.02873, -0.1975, -0.10266, 0.05527, -0.2145
    0xada32803, 0x29caac0d, 0xb02eb09e, 0x1cada8b9, 0xac47b2bd, 0xa75b2637, 0xae92b252, 0xb2dd2b13,
};
static const uint embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias_dwords[32] = {
    // -0.0003078, -0.000251, -0.0002937, -0.000756, 0.0002217, -0.0003762, -0.0001273, 0.0004735, -6.17e-05, -8.625e-05, 0.0002766, 0.0001438, -1.305e-05, 7.15e-06, 0.0004594, -0.0003562
    0x8c1d8d0b, 0x92318cd0, 0x8e2a0b44, 0xfc2882c, 0x85a7840b, 0x8b60c88, 0x7880db, 0x8dd60f87,
    // -0.00016, 6.94e-05, -0.0001392, 5.7e-06, 4.92e-05, 0.000246, 0.000295, 0.000297, 0.0002742, -3.916e-05, -0.0002365, -0.000671, -0.0003598, 0.0003545, -0.0003748, 0.0003824
    0x48c893e, 0x608890, 0xc080339, 0xcde0cd5, 0x82910c7e, 0x917f8bc0, 0xdcf8de5, 0xe448e24,
    // -2.676e-05, -0.0003812, 7.683e-05, -0.000716, 0.000569, 0.0001694, 0.0002987, -0.0004501, 6.133e-05, -0.00026, -0.0002708, -0.0004406, -1.556e-05, 0.0004377, 0.0001665, -0.000557
    0x8e3f81c1, 0x91de0509, 0x98d10a9, 0x8f600ce5, 0x8c430405, 0x8f388c70, 0xf2c8105, 0x90900975,
    // -0.00010973, -0.0003493, -0.0001009, -0.00010014, 3.17e-05, 0.000706, 0.000719, -9.63e-05, 0.0002011, 0.0001425, 3.75e-05, -0.0002708, -6.44e-06, -0.0004013, 0.0001482, 0.00047
    0x8db98731, 0x8690869d, 0x11c90214, 0x865011e4, 0x8ab0a97, 0x8c700275, 0x8e93806c, 0xfb308db,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass8(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage__bottleneck_ResidualBlock_1_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _bottleneck_ResidualBlock_1_residual_func_Split_output_grouped = {
        uint3(480, 270, 64), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(480, 270, 64), // threadGroupSliceSize
        uint3(480, 270, 64), // storageSize
        uint3(64, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        58060800, // threadGroupStorageByteOffset
        storage__bottleneck_ResidualBlock_1_residual_func_Split_output_grouped };
    
    const BufferStorage storage__bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 32), // threadGroupSliceSize
        uint4(3, 3, 16, 32), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        39040, // threadGroupStorageByteOffset
        0.0033285829704254866, storage__bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = { embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 128), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 128), // threadGroupSliceSize
        uint4(1, 1, 64, 128), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        43648, // threadGroupStorageByteOffset
        0.005735259968787432, storage__bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<64> storage_embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias = { embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<64> > embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias = {
        128, // logicalSize
        0, // threadGroupSliceStart
        128, // threadGroupSliceSize
        128, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 128, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 128, 64), // threadGroupSliceSize
        uint4(1, 1, 128, 64), // storageSize
        uint4(128, 128, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        51840, // threadGroupStorageByteOffset
        0.005727430339902639, storage__bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias = { embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias };
    
    // /bottleneck/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_16 = uint3(480, 270, 64);
    const int3 groupStart_slice_16 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 64);
    const uint3 groupSize_slice_16 = uint3(64, 1, 64);
    const uint3 storageSize_slice_16 = uint3(480, 270, 64);
    const uint3 tensorByteStrides_slice_16 = uint3(64, 30720, 1);
    const uint3 paddingBegin_slice_16 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_16 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_16 = dot(groupStart_slice_16, tensorByteStrides_slice_16);
    const RWBufferStorage storage_slice_16 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_16 = { logicalSize_slice_16, groupStart_slice_16, groupSize_slice_16, storageSize_slice_16, tensorByteStrides_slice_16, paddingBegin_slice_16, paddingEnd_slice_16, threadGroupByteOffsetInTensor_slice_16 + 49766400, storage_slice_16 };
    // Fusedquantized_/bottleneck/ResidualBlock_1/residual_func/Concat_quantized_/bottleneck/ResidualBlock_1/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_1/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_1/body/pw_expand/Conv_/bottleneck/ResidualBlock_1/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_1/body/pw_contract/Conv_/bottleneck/ResidualBlock_1/Add (64, 270, 480), (32, 16, 3, 3), (32,), (128, 64, 1, 1), (128,), (64, 128, 1, 1), (64,) -> (64, 270, 480)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<64, 2>(0.021226389333605766, 0.03648017346858978, 0.029691703617572784, 0.020896881818771362, 0.03844049945473671, _bottleneck_ResidualBlock_1_residual_func_Split_output_grouped, _bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias, _bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias, _bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias, slice_16, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_8
#ifdef MLSR_PASS_8_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass8_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /bottleneck/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_17 = uint3(480, 270, 64);
    const int3 groupStart_slice_17 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 64);
    const uint3 groupSize_slice_17 = uint3(32, 1, 64);
    const uint3 storageSize_slice_17 = uint3(480, 270, 64);
    const uint3 tensorByteStrides_slice_17 = uint3(64, 30720, 1);
    const uint3 paddingBegin_slice_17 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_17 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_17 = dot(groupStart_slice_17, tensorByteStrides_slice_17);
    const RWBufferStorage storage_slice_17 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_17 = { logicalSize_slice_17, groupStart_slice_17, groupSize_slice_17, storageSize_slice_17, tensorByteStrides_slice_17, paddingBegin_slice_17, paddingEnd_slice_17, threadGroupByteOffsetInTensor_slice_17 + 49766400, storage_slice_17 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_17, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_8_POST


#ifdef MLSR_PASS_9
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FNB_CT2D_ADD.hlsli"

static const uint embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords[16] = {
    // -0.001455, -0.0016775, -0.003057, -0.00243, 0.001711, -0.002403, -0.001219, -0.000507, 0.001209, -0.000524, -0.001795, 0.004036, 3.46e-05, 0.00198, -0.001009, 0.0007315
    0x96df95f6, 0x98fa9a43, 0x98ec1702, 0x902794fe, 0x904b14f4, 0x1c22975a, 0x180e0244, 0x11fe9422,
    // 0.00171, 0.000519, -0.001083, 0.0010805, 0.0005574, 0.003056, 0.00214, -0.000596, -0.001103, 0.0003183, 0.0001327, -0.001451, 0.001736, 0.00151, -0.0005627, 0.0004992
    0x10401701, 0x146d9470, 0x1a421091, 0x90e21862, 0xd379485, 0x95f10859, 0x162f171c, 0x1017909c,
};
static const uint embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias_dwords[64] = {
    // -0.2725, 0.03772, -0.1975, 0.11426, 0.003963, -0.4478, -0.2483, -0.0809, -0.1829, -0.06183, 0.02715, -0.0789, -0.05887, -0.1423, 0.109, -0.3677
    0x28d4b45c, 0x2f50b252, 0xb72a1c0f, 0xad2db3f2, 0xabeab1da, 0xad0d26f3, 0xb08eab89, 0xb5e22efa,
    // 0.0725, -0.04752, -0.021, 0.0513, 0.04156, 0.1085, 0.0938, -0.1545, -0.1465, -0.2979, -0.09406, -0.0971, -0.01542, 0.01062, -0.1443, -0.342
    0xaa152ca4, 0x2a91a560, 0x2ef22952, 0xb0f22e01, 0xb4c4b0b0, 0xae37ae05, 0x2170a3e5, 0xb579b09e,
    // -0.0652, -0.0951, 0.075, -0.03848, -0.0556, -0.2036, 0.02014, 0.04404, -0.189, -0.0656, -0.10504, -0.149, -0.02155, -0.00702, 0.04602, 0.0802
    0xae16ac2c, 0xa8ed2ccd, 0xb284ab1e, 0x29a32528, 0xac33b20c, 0xb0c5aeb9, 0x9f30a584, 0x2d2229e4,
    // -0.2844, -0.1506, -0.04788, -0.316, -0.2251, -0.003868, 0.02054, -0.11163, -0.0531, -0.231, 0.02612, 0.0652, 0.0633, -0.08417, 0.02805, -0.2573
    0xb0d2b48d, 0xb50eaa21, 0x9becb334, 0xaf252542, 0xb364aacc, 0x2c2c26b0, 0xad632c0d, 0xb41e272e,
    // -0.0008693, -0.3008, -0.466, 0.0226, -0.05835, -0.1311, 0.196, -0.10956, -0.05338, -0.02498, 0.03946, -0.010666, 0.02615, -0.336, -0.04337, -0.1382
    0xb4d0931f, 0x25c9b775, 0xb032ab78, 0xaf033246, 0xa665aad5, 0xa176290d, 0xb56026b2, 0xb06ca98d,
    // -0.05872, 0.01642, -0.005848, 0.001409, -0.324, 0.0393, 0.07324, -0.1332, 0.04346, -0.02481, -0.0855, -0.004654, -0.04575, -0.2145, 0.094, -0.3892
    0x2434ab84, 0x15c59dfd, 0x2908b52f, 0xb0432cb0, 0xa65a2990, 0x9cc4ad79, 0xb2dda9db, 0xb63a2e04,
    // -0.123, -0.1718, -0.04343, -0.07965, -0.01237, -0.05548, -0.02527, -0.512, 0.0515, -0.04065, 0.0241, -0.1365, -0.06305, -0.4587, -0.1239, -0.1002
    0xb17fafdf, 0xad19a98f, 0xab1aa255, 0xb819a678, 0xa9342a98, 0xb05e262b, 0xb757ac09, 0xae6aafee,
    // -0.4155, -0.0509, -0.05142, -0.1315, -0.319, 0.0838, -0.2664, -0.138, -0.2295, -0.05634, -0.161, -0.01052, -0.2196, -0.01509, -0.1178, -0.1421
    0xaa84b6a6, 0xb035aa95, 0x2d5db51b, 0xb06ab443, 0xab36b358, 0xa163b127, 0xa3bab307, 0xb08caf8a,
};
static const uint embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias_dwords[32] = {
    // -0.001064, -0.0004644, -0.0005803, 0.0001581, -0.00107, 0.00058, -0.0009, -0.000556, 0.000294, -0.000985, -0.001564, -0.001472, -0.000324, -0.001587, 0.000568, 0.0003395
    0x8f9c945c, 0x92e90c1, 0x10c09462, 0x908e935f, 0x94090cd1, 0x96089668, 0x96808d4f, 0xd9010a7,
    // 0.000701, 0.000981, 4.8e-05, -0.0004818, -0.000856, 9e-05, -0.0003824, -0.0001843, 0.0007057, -0.0005436, -0.000761, 0.0001843, -0.0005693, -0.0004609, -0.0004241, -0.0009003
    0x140511be, 0x8fe50325, 0x5e69303, 0x8a0a8e44, 0x907411c8, 0xa0a923c, 0x8f8d90aa, 0x93608ef3,
    // -0.0004115, 0.002651, 0.0003583, 0.000637, -0.001706, 0.00414, -5.49e-05, -0.002079, -0.001298, 0.0006766, 0.0014715, 0.001597, 0.000649, 0.001798, 0.003002, 0.00394
    0x196e8ebe, 0x11380ddf, 0x1c3d96fd, 0x98428399, 0x118b9551, 0x168b1607, 0x175d1151, 0x1c091a26,
    // 0.003742, -0.000909, -0.003296, -0.00124, -0.000248, 0.000969, 0.0006576, 0.0004323, -0.001748, -0.002102, 0.002129, 0.002415, -0.002716, -0.001217, 0.006065, 2.265e-05
    0x93721baa, 0x95149ac0, 0x13f08c10, 0xf151163, 0x984e9729, 0x18f2185c, 0x94fc9990, 0x17c1e36,
};
static const uint embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias_dwords[16] = {
    // 0.009674, -0.04907, 0.04117, -0.01744, 0.02936, -0.0436, 0.007263, 0.003704, 0.02795, 0.05374, -0.003025, -0.01125, -0.02525, 0.01339, 0.01448, 0.01915
    0xaa4820f4, 0xa4772945, 0xa9952784, 0x1b961f70, 0x2ae12728, 0xa1c39a32, 0x22dba677, 0x24e7236a,
    // -0.10706, -0.134, -0.00568, -0.04672, -0.06223, -0.1307, -0.0005307, 0.0775, -0.01435, 0.04678, -0.02652, 0.03824, 0.1357, -0.00905, -0.07477, 0.0181
    0xb04aaeda, 0xa9fb9dd1, 0xb02fabf7, 0x2cf69059, 0x29fda359, 0x28e5a6ca, 0xa0a23058, 0x24a2acc9,
};

[numthreads(8, 8, 1)]
void fsr4_model_v07_i8_pass9(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(8, 8, 1);
    
    const RWBufferStorage storage__bottleneck_ResidualBlock_2_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _bottleneck_ResidualBlock_2_residual_func_Split_output_grouped = {
        uint3(480, 270, 64), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(480, 270, 64), // threadGroupSliceSize
        uint3(480, 270, 64), // storageSize
        uint3(64, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        49766400, // threadGroupStorageByteOffset
        storage__bottleneck_ResidualBlock_2_residual_func_Split_output_grouped };
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(960, 540, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 32), // threadGroupSliceSize
        uint3(960, 540, 32), // storageSize
        uint3(32, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        33177600, // threadGroupStorageByteOffset
        0.019347405061125755, storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const BufferStorage storage__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 32), // threadGroupSliceSize
        uint4(3, 3, 16, 32), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        60032, // threadGroupStorageByteOffset
        0.0035890890285372734, storage__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = { embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 128), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 128), // threadGroupSliceSize
        uint4(1, 1, 64, 128), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        64640, // threadGroupStorageByteOffset
        0.006621810141950846, storage__bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<64> storage_embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias = { embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<64> > embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias = {
        128, // logicalSize
        0, // threadGroupSliceStart
        128, // threadGroupSliceSize
        128, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 128, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 128, 64), // threadGroupSliceSize
        uint4(1, 1, 128, 64), // storageSize
        uint4(128, 128, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        72832, // threadGroupStorageByteOffset
        0.006558050401508808, storage__bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias = { embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias };
    
    const BufferStorage storage_hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_HWCN< BufferStorage > hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 32, 64), // threadGroupSliceSize
        uint4(2, 2, 32, 64), // storageSize
        uint4(2048, 4096, 64, 1), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        81024, // threadGroupStorageByteOffset
        0.003301001852378249, storage_hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias = { embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias };
    
    // FusedFusedquantized_/bottleneck/ResidualBlock_2/residual_func/Concat_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_2/body/pw_expand/Conv_/bottleneck/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_2/body/pw_contract/Conv_/bottleneck/ResidualBlock_2/Add_Fusedquantized_/bottleneck/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_Fusedquantized_/decoder3/skip_pop_0/Add_QuantizedOutput_output_grouped
    const uint3 logicalSize_slice_18 = uint3(960, 540, 32);
    const int3 groupStart_slice_18 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(16, 16, 32);
    const uint3 groupSize_slice_18 = uint3(16, 16, 32);
    const uint3 storageSize_slice_18 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_18 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_18 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_18 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_18 = dot(groupStart_slice_18, tensorByteStrides_slice_18);
    const RWBufferStorage storage_slice_18 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_18 = { logicalSize_slice_18, groupStart_slice_18, groupSize_slice_18, storageSize_slice_18, tensorByteStrides_slice_18, paddingBegin_slice_18, paddingEnd_slice_18, threadGroupByteOffsetInTensor_slice_18 + 66355200, storage_slice_18 };
    // FusedFusedquantized_/bottleneck/ResidualBlock_2/residual_func/Concat_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_2/body/pw_expand/Conv_/bottleneck/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_2/body/pw_contract/Conv_/bottleneck/ResidualBlock_2/Add_Fusedquantized_/bottleneck/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_Fusedquantized_/decoder3/skip_pop_0/Add_QuantizedOutput (64, 270, 480), (32, 540, 960), (32, 16, 3, 3), (32,), (128, 64, 1, 1), (128,), (64, 128, 1, 1), (64,), (64, 32, 2, 2), (32,) -> (32, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FNB_CT2D_ADD<64, 2>(0.020896881818771362, 0.03844049945473671, 0.022666048258543015, 0.02807541936635971, 0.021412165835499763, 0.03075222671031952, _bottleneck_ResidualBlock_2_residual_func_Split_output_grouped, fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, _bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias, _bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias, _bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias, hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias, slice_18, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_9
#ifdef MLSR_PASS_9_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass9_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // FusedFusedquantized_/bottleneck/ResidualBlock_2/residual_func/Concat_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_2/body/pw_expand/Conv_/bottleneck/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_2/body/pw_contract/Conv_/bottleneck/ResidualBlock_2/Add_Fusedquantized_/bottleneck/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_Fusedquantized_/decoder3/skip_pop_0/Add_QuantizedOutput_output_grouped
    const uint3 logicalSize_slice_19 = uint3(960, 540, 32);
    const int3 groupStart_slice_19 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_19 = uint3(32, 1, 32);
    const uint3 storageSize_slice_19 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_19 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_19 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_19 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_19 = dot(groupStart_slice_19, tensorByteStrides_slice_19);
    const RWBufferStorage storage_slice_19 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_19 = { logicalSize_slice_19, groupStart_slice_19, groupSize_slice_19, storageSize_slice_19, tensorByteStrides_slice_19, paddingBegin_slice_19, paddingEnd_slice_19, threadGroupByteOffsetInTensor_slice_19 + 66355200, storage_slice_19 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_19, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_9_POST


#ifdef MLSR_PASS_10
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // -12, 22, 2, 11, 16, 8, -8, 2, -24, 21, -1, 11, 2, -12, -8, 20, 14, 3, -21, -1, 1, 2, 0, 7, 22, 11, 9, -8, 18, -9, 8, -5
    0xb0216f4, 0x2f80810, 0xbff15e8, 0x14f8f402, 0xffeb030e, 0x7000201, 0xf8090b16, 0xfb08f712,
    // 11, -9, -12, 6, 9, -2, 6, -8, 9, 20, 5, -7, -2, -14, -7, 6, 1, 15, -5, 2, -4, 4, -11, -12, -31, -4, 2, 44, -4, -2, 5, 13
    0x6f4f70b, 0xf806fe09, 0xf9051409, 0x6f9f2fe, 0x2fb0f01, 0xf4f504fc, 0x2c02fce1, 0xd05fefc,
    // 16, -39, 23, -1, 15, -9, -19, 40, -19, 25, -117, 17, 19, 18, 74, -51, 15, -23, -10, -8, -25, -21, 23, -17, 6, 8, -8, -15, 8, 1, -22, -3
    0xff17d910, 0x28edf70f, 0x118b19ed, 0xcd4a1213, 0xf8f6e90f, 0xef17ebe7, 0xf1f80806, 0xfdea0108,
    // -15, 7, -4, -5, 14, 13, -5, 4, -9, 5, 9, 11, -16, -1, 23, 3, 15, -8, 2, 4, -2, 1, 4, 5, -21, 7, 7, -10, -6, 17, -5, -5
    0xfbfc07f1, 0x4fb0d0e, 0xb0905f7, 0x317fff0, 0x402f80f, 0x50401fe, 0xf60707eb, 0xfbfb11fa,
    // -5, -18, -10, -18, -6, -19, 18, -4, -1, 5, 23, -23, 15, 13, 12, 0, 3, -1, 3, -18, -13, 5, 10, 0, 27, -5, -4, -5, 3, 12, 10, -6
    0xeef6eefb, 0xfc12edfa, 0xe91705ff, 0xc0d0f, 0xee03ff03, 0xa05f3, 0xfbfcfb1b, 0xfa0a0c03,
    // 15, 20, 3, -6, -12, -10, 30, 0, 18, -15, 1, 7, -22, 0, -3, 7, 3, 0, 13, -10, -11, -3, 18, -2, 11, -4, -5, -3, 1, 10, -7, -4
    0xfa03140f, 0x1ef6f4, 0x701f112, 0x7fd00ea, 0xf60d0003, 0xfe12fdf5, 0xfdfbfc0b, 0xfcf90a01,
    // 8, 24, 0, -14, -13, -2, 1, 6, 24, -2, 3, -4, -3, 12, -3, -15, 26, 17, 28, -32, -38, -96, 9, 24, 6, -23, -46, 45, -22, 2, 48, -11
    0xf2001808, 0x601fef3, 0xfc03fe18, 0xf1fd0cfd, 0xe01c111a, 0x1809a0da, 0x2dd2e906, 0xf53002ea,
    // 6, 19, 16, -10, 9, -8, 5, 2, 5, -9, 13, 8, -13, 7, -11, 3, 3, 8, 5, -15, 0, -1, -5, -2, 9, -9, 0, 18, 3, 7, 1, -4
    0xf6101306, 0x205f809, 0x80df705, 0x3f507f3, 0xf1050803, 0xfefbff00, 0x1200f709, 0xfc010703,
    // 5, 31, 12, 0, -3, 2, 1, -1, 2, -1, -12, 44, -48, -6, -14, -9, 6, 10, 10, -7, -4, -2, 6, 9, 6, -8, 0, 11, -11, 8, -12, -7
    0xc1f05, 0xff0102fd, 0x2cf4ff02, 0xf7f2fad0, 0xf90a0a06, 0x906fefc, 0xb00f806, 0xf9f408f5,
    // -14, 24, -2, 7, -6, 5, -13, 2, -17, 3, -2, 14, -6, 2, 7, 10, -18, 27, -6, -12, -25, 2, -3, -7, -16, 3, -18, 5, -11, 14, 19, 5
    0x7fe18f2, 0x2f305fa, 0xefe03ef, 0xa0702fa, 0xf4fa1bee, 0xf9fd02e7, 0x5ee03f0, 0x5130ef5,
    // -2, 17, -9, 3, 2, -1, -9, 0, 11, 17, -9, 1, 2, 0, 0, 0, -16, 26, -12, -10, -20, -3, -7, -8, -22, -5, 0, 30, -6, 24, 14, 22
    0x3f711fe, 0xf7ff02, 0x1f7110b, 0x2, 0xf6f41af0, 0xf8f9fdec, 0x1e00fbea, 0x160e18fa,
    // -9, 49, 8, 72, -46, 31, 16, 22, -26, -11, 58, 9, -87, -16, -24, -40, 14, -2, -32, 7, -30, 2, -4, -8, 19, 13, -14, -1, 9, 1, -4, 10
    0x480831f7, 0x16101fd2, 0x93af5e6, 0xd8e8f0a9, 0x7e0fe0e, 0xf8fc02e2, 0xfff20d13, 0xafc0109,
    // -3, 0, -9, 10, -18, -9, -1, -5, -7, 0, 11, -1, -9, 7, 3, -2, 12, 16, -7, -3, -31, -37, 11, 3, -6, -4, 3, -13, -9, 13, -3, 3
    0xaf700fd, 0xfbfff7ee, 0xff0b00f9, 0xfe0307f7, 0xfdf9100c, 0x30bdbe1, 0xf303fcfa, 0x3fd0df7,
    // 0, 1, -11, 2, -11, -23, 6, -3, 15, 14, 9, -13, 10, 6, 7, -3, -15, 0, 3, -20, -2, 27, -9, 1, 4, -9, -8, -9, 5, 8, 19, 1
    0x2f50100, 0xfd06e9f5, 0xf3090e0f, 0xfd07060a, 0xec0300f1, 0x1f71bfe, 0xf7f8f704, 0x1130805,
    // -4, -5, 18, 1, 27, 12, -14, -8, -8, 2, -10, 10, 17, -3, -3, 13, 3, 21, 0, 14, 13, 17, 5, -2, 16, 11, -6, 19, -9, -23, 16, 4
    0x112fbfc, 0xf8f20c1b, 0xaf602f8, 0xdfdfd11, 0xe001503, 0xfe05110d, 0x13fa0b10, 0x410e9f7,
    // -18, -9, 46, -40, -10, 5, -7, 48, 6, 11, -20, -42, 8, 28, 12, -9, -14, 40, 67, -44, 44, 31, 9, -29, 1, -12, 35, 27, -47, -38, 14, -47
    0xd82ef7ee, 0x30f905f6, 0xd6ec0b06, 0xf70c1c08, 0xd44328f2, 0xe3091f2c, 0x1b23f401, 0xd10edad1,
    // 4, -13, -14, 3, 23, -7, 8, -19, 12, 9, -10, -7, -20, -31, -36, 3, 1, -11, -6, -10, 0, 3, -7, 6, -10, -16, 7, -5, 0, 17, 5, 4
    0x3f2f304, 0xed08f917, 0xf9f6090c, 0x3dce1ec, 0xf6faf501, 0x6f90300, 0xfb07f0f6, 0x4051100,
    // 17, -16, -5, 5, 18, -12, 2, 15, 9, -3, 15, -9, -13, 2, -27, -7, -3, -9, -6, -18, -14, -24, 17, 8, 4, 4, 3, -32, 23, 12, 2, 4
    0x5fbf011, 0xf02f412, 0xf70ffd09, 0xf9e502f3, 0xeefaf7fd, 0x811e8f2, 0xe0030404, 0x4020c17,
    // 0, 13, -4, 14, 21, 2, 2, 3, 0, 30, 6, 3, -2, -21, -9, 12, 16, 1, -16, 9, 7, -7, 41, -5, 40, -4, 8, -18, -17, -28, 7, -10
    0xefc0d00, 0x3020215, 0x3061e00, 0xcf7ebfe, 0x9f00110, 0xfb29f907, 0xee08fc28, 0xf607e4ef,
    // -6, -25, 2, -3, -13, -20, 30, -16, 5, -6, -10, -21, 9, -1, -21, 6, -15, 15, -18, -3, -25, 18, -19, 8, 9, 2, -13, -10, 5, -5, 19, -26
    0xfd02e7fa, 0xf01eecf3, 0xebf6fa05, 0x6ebff09, 0xfdee0ff1, 0x8ed12e7, 0xf6f30209, 0xe613fb05,
    // 9, 6, 17, 50, -33, 27, -2, -22, -22, 65, -18, -8, 42, -2, -41, -49, -6, -20, 27, 1, -6, -39, 24, 11, -24, -25, 17, -5, -14, -9, -17, 24
    0x32110609, 0xeafe1bdf, 0xf8ee41ea, 0xcfd7fe2a, 0x11becfa, 0xb18d9fa, 0xfb11e7e8, 0x18eff7f2,
    // -17, 11, 16, -31, -2, 21, -11, 17, -7, 0, -7, -8, 12, 21, 33, -8, 1, 0, 3, -9, -2, 12, -13, -4, -2, -9, 18, 1, -10, 17, 39, 13
    0xe1100bef, 0x11f515fe, 0xf8f900f9, 0xf821150c, 0xf7030001, 0xfcf30cfe, 0x112f7fe, 0xd2711f6,
    // -12, 2, 22, -18, -2, -1, 1, 17, -19, -26, 5, 16, -21, 13, 1, 1, -8, -3, 2, -12, -8, -1, -4, 15, 9, 19, -21, -25, 4, -5, -2, 2
    0xee1602f4, 0x1101fffe, 0x1005e6ed, 0x1010deb, 0xf402fdf8, 0xffcfff8, 0xe7eb1309, 0x2fefb04,
    // -15, -13, -20, -22, -6, -19, 7, -31, 4, 11, -28, -22, 10, 10, -21, 8, 2, -7, 17, 9, 7, -13, 4, 5, 5, 2, -19, -1, -6, -20, -4, 13
    0xeaecf3f1, 0xe107edfa, 0xeae40b04, 0x8eb0a0a, 0x911f902, 0x504f307, 0xffed0205, 0xdfcecfa,
    // -5, 13, -1, 16, -3, -17, -34, -1, -17, 22, 0, 7, 4, -24, -3, 28, -6, -16, -84, -17, 28, -51, 1, -22, 44, -26, -13, 50, 6, 32, 15, 23
    0x10ff0dfb, 0xffdeeffd, 0x70016ef, 0x1cfde804, 0xefacf0fa, 0xea01cd1c, 0x32f3e62c, 0x170f2006,
    // -14, -8, -7, 26, -3, -14, 2, 17, -17, 6, 19, 0, -30, -19, -15, 2, -7, 20, -8, -10, 14, 10, -15, 3, -12, 7, 1, 12, -11, -3, 8, -4
    0x1af9f8f2, 0x1102f2fd, 0x1306ef, 0x2f1ede2, 0xf6f814f9, 0x3f10a0e, 0xc0107f4, 0xfc08fdf5,
    // 5, 12, -1, -2, -21, 3, -23, 22, -1, 16, 18, -17, 29, 30, 29, 5, -3, 1, 3, -17, -10, -1, -4, 1, -4, -6, 6, -3, -4, 12, 14, -1
    0xfeff0c05, 0x16e903eb, 0xef1210ff, 0x51d1e1d, 0xef0301fd, 0x1fcfff6, 0xfd06fafc, 0xff0e0cfc,
    // -6, 9, -4, 16, 4, 5, 0, 5, -3, -1, 4, 13, 3, -10, -4, 4, -10, -5, -23, -20, -10, 33, 12, 4, 38, -6, -5, -25, 17, 12, 2, -31
    0x10fc09fa, 0x5000504, 0xd04fffd, 0x4fcf603, 0xece9fbf6, 0x40c21f6, 0xe7fbfa26, 0xe1020c11,
    // 7, -15, -4, -6, -13, -6, 7, -12, 11, -1, -13, -15, 18, 7, -26, 3, -15, 0, -16, -16, 12, 10, 4, -8, 7, -27, 11, 9, -2, 7, 7, -14
    0xfafcf107, 0xf407faf3, 0xf1f3ff0b, 0x3e60712, 0xf0f000f1, 0xf8040a0c, 0x90be507, 0xf20707fe,
    // 10, -43, 10, 79, 71, 8, -15, -15, 42, -5, 16, 55, -48, -59, 8, 46, -2, -2, 6, -8, 10, -14, -1, 31, -5, -21, 16, -9, 20, -2, -22, 3
    0x4f0ad50a, 0xf1f10847, 0x3710fb2a, 0x2e08c5d0, 0xf806fefe, 0x1ffff20a, 0xf710ebfb, 0x3eafe14,
    // -3, -4, -6, -6, -9, 5, 5, 9, 11, -2, -1, -3, 10, 12, 13, -8, -4, -8, 5, -23, 2, 1, 9, 1, 10, -24, 13, -5, 19, 19, 18, -5
    0xfafafcfd, 0x90505f7, 0xfdfffe0b, 0xf80d0c0a, 0xe905f8fc, 0x1090102, 0xfb0de80a, 0xfb121313,
    // 1, -4, 2, 7, 3, -2, 5, 4, 1, -5, -3, 5, -2, -3, -17, 7, -8, 15, 4, 6, -8, 4, -10, -9, -29, -26, 12, 15, 0, -1, 11, 2
    0x702fc01, 0x405fe03, 0x5fdfb01, 0x7effdfe, 0x6040ff8, 0xf7f604f8, 0xf0ce6e3, 0x20bff00,
    // -23, -1, -10, -12, 1, 13, -11, 1, -7, -12, 4, -7, 10, 10, 33, -18, -9, -1, 4, -2, -5, 1, 0, 3, -8, -15, -14, -12, 9, -9, 6, -5
    0xf4f6ffe9, 0x1f50d01, 0xf904f4f9, 0xee210a0a, 0xfe04fff7, 0x30001fb, 0xf4f2f1f8, 0xfb06f709,
    // -26, -23, 7, 0, 15, -3, -13, -11, -23, -38, 13, 1, -9, 20, 22, -18, 56, -27, 34, -39, 7, -21, 18, 14, -34, -41, 8, -7, 18, 16, -27, -25
    0x7e9e6, 0xf5f3fd0f, 0x10ddae9, 0xee1614f7, 0xd922e538, 0xe12eb07, 0xf908d7de, 0xe7e51012,
    // -10, -18, 5, 24, 21, 7, -7, 1, -5, -22, -6, -9, 21, -6, 5, -3, -10, -2, -11, 5, 0, -3, -8, -13, -25, -26, 13, 6, -1, -5, 2, -7
    0x1805eef6, 0x1f90715, 0xf7faeafb, 0xfd05fa15, 0x5f5fef6, 0xf3f8fd00, 0x60de6e7, 0xf902fbff,
    // -11, -22, 8, 6, 7, -13, -5, -5, -11, -18, 5, 7, 2, -1, -6, -12, 0, -2, 7, 19, 4, -11, 2, 6, -20, -4, -13, -2, -6, -17, -25, -6
    0x608eaf5, 0xfbfbf307, 0x705eef5, 0xf4faff02, 0x1307fe00, 0x602f504, 0xfef3fcec, 0xfae7effa,
    // -5, 15, 6, 1, 3, -2, 1, 4, -18, -2, -2, 3, 2, 1, -13, 7, -1, 16, -10, -10, -15, -8, 2, -16, -2, -6, -5, -17, 13, 3, -6, -9
    0x1060ffb, 0x401fe03, 0x3fefeee, 0x7f30102, 0xf6f610ff, 0xf002f8f1, 0xeffbfafe, 0xf7fa030d,
    // 2, 10, 1, 0, 6, -4, 1, 0, 6, 2, -7, 1, -1, -6, -14, 3, 9, 12, 5, 8, 2, -11, -5, -10, -25, -26, -4, 22, -2, 3, -17, 6
    0x10a02, 0x1fc06, 0x1f90206, 0x3f2faff, 0x8050c09, 0xf6fbf502, 0x16fce6e7, 0x6ef03fe,
    // -59, -22, 61, -25, -32, -17, -12, -114, 31, 41, 64, -4, 65, 8, 49, 13, 21, 8, -13, 20, -7, -3, 8, 5, -8, -18, -11, 7, 3, 2, -27, -10
    0xe73deac5, 0x8ef4efe0, 0xfc40291f, 0xd310841, 0x14f30815, 0x508fdf9, 0x7f5eef8, 0xf6e50203,
    // -16, 13, -3, 7, 6, 3, 1, -4, -11, -7, 9, 13, -9, -1, 3, 1, -2, 17, -7, 11, -14, -5, 12, -11, -12, -11, -4, -8, -6, 4, -14, -5
    0x7fd0df0, 0xfc010306, 0xd09f9f5, 0x103fff7, 0xbf911fe, 0xf50cfbf2, 0xf8fcf5f4, 0xfbf204fa,
    // -10, 1, 3, 2, 2, -10, 3, -4, -6, -6, 10, -6, 4, 4, -3, -6, 7, 12, 5, 4, -1, 7, -6, -1, -11, -2, 14, 23, -2, 5, -4, 4
    0x20301f6, 0xfc03f602, 0xfa0afafa, 0xfafd0404, 0x4050c07, 0xfffa07ff, 0x170efef5, 0x4fc05fe,
    // 12, 16, -10, -10, 6, 12, -5, 5, -1, 4, 9, 16, -12, 8, 8, -11, 5, 14, 7, -5, 0, 7, 2, 0, 9, 1, -10, 8, 5, 1, 4, -4
    0xf6f6100c, 0x5fb0c06, 0x100904ff, 0xf50808f4, 0xfb070e05, 0x20700, 0x8f60109, 0xfc040105,
    // -4, -1, -5, -23, 20, 4, 6, -18, 29, -22, 35, 34, -32, 6, 27, -12, -9, 1, -52, -48, 35, -23, -13, -42, -128, 2, -22, -36, 9, 13, -11, -26
    0xe9fbfffc, 0xee060414, 0x2223ea1d, 0xf41b06e0, 0xd0cc01f7, 0xd6f3e923, 0xdcea0280, 0xe6f50d09,
    // 8, 15, 2, 28, 8, 14, 3, 17, 7, 6, 5, 16, -16, -19, -20, 6, 16, -7, -6, -8, -20, -2, 18, -4, 23, 4, 4, -19, 7, 19, 10, -14
    0x1c020f08, 0x11030e08, 0x10050607, 0x6ecedf0, 0xf8faf910, 0xfc12feec, 0xed040417, 0xf20a1307,
    // 8, 0, -13, -29, 1, -32, 12, 2, 18, -19, 25, -6, 6, 7, 7, 14, 11, 3, 10, 6, 0, -5, 13, -1, 16, 8, -15, 0, -3, -5, -16, 2
    0xe3f30008, 0x20ce001, 0xfa19ed12, 0xe070706, 0x60a030b, 0xff0dfb00, 0xf10810, 0x2f0fbfd,
    // 5, 1, 0, -6, -8, 9, -6, 5, 18, 14, -7, -4, 5, 4, 7, -6, 6, -18, -19, 4, -4, 20, 0, -25, 26, 2, -4, -11, 17, 5, 1, -5
    0xfa000105, 0x5fa09f8, 0xfcf90e12, 0xfa070405, 0x4edee06, 0xe70014fc, 0xf5fc021a, 0xfb010511,
    // 11, -10, 11, 6, -12, 0, 10, -3, 22, 0, -12, -3, 6, 5, 3, -2, 14, 1, 12, 11, 18, 4, -30, 3, 2, 17, -11, 9, 11, 14, 8, -11
    0x60bf60b, 0xfd0a00f4, 0xfdf40016, 0xfe030506, 0xb0c010e, 0x3e20412, 0x9f51102, 0xf5080e0b,
    // -35, -4, 16, 67, 55, -52, 32, -5, -20, 29, 73, -31, -3, 33, 31, -67, 13, -16, 7, 30, 19, -4, 4, 5, 22, 9, -13, 2, -19, -8, -4, 5
    0x4310fcdd, 0xfb20cc37, 0xe1491dec, 0xbd1f21fd, 0x1e07f00d, 0x504fc13, 0x2f30916, 0x5fcf8ed,
    // -3, 6, 9, 9, 8, 15, -14, 0, -3, 10, 1, 22, -6, 1, -2, 5, 9, -9, 4, 23, 10, 16, -13, -6, -13, 9, -6, 31, -26, -2, -16, -5
    0x90906fd, 0xf20f08, 0x16010afd, 0x5fe01fa, 0x1704f709, 0xfaf3100a, 0x1ffa09f3, 0xfbf0fee6,
    // 2, -3, 10, 14, -4, -5, 2, -8, -3, 8, -8, 8, -5, -3, -9, -1, -2, -14, -2, -7, -12, 3, 7, -1, 17, -4, 0, -2, 5, 15, 8, -19
    0xe0afd02, 0xf802fbfc, 0x8f808fd, 0xfff7fdfb, 0xf9fef2fe, 0xff0703f4, 0xfe00fc11, 0xed080f05,
    // 14, -4, 29, 15, -20, -7, 5, -29, -22, 13, -16, 12, -3, -3, -3, 20, 13, 12, 9, 26, 12, 10, 5, -9, -6, 8, 3, 27, -6, -6, 12, -5
    0xf1dfc0e, 0xe305f9ec, 0xcf00dea, 0x14fdfdfd, 0x1a090c0d, 0xf7050a0c, 0x1b0308fa, 0xfb0cfafa,
    // 6, -15, 6, 13, -46, 25, 9, 15, -4, -13, -15, -13, 37, 20, 4, -15, 40, -41, -29, 36, 19, 31, -12, -40, -20, -30, -27, 19, 1, -7, 2, 60
    0xd06f106, 0xf0919d2, 0xf3f1f3fc, 0xf1041425, 0x24e3d728, 0xd8f41f13, 0x13e5e2ec, 0x3c02f901,
    // 23, -10, -2, 34, -17, 20, 17, -31, -21, -17, -9, 33, -1, -6, -5, -2, 4, -5, 8, 10, 2, 4, 4, 2, -11, -1, 1, 4, 14, 8, 6, -2
    0x22fef617, 0xe11114ef, 0x21f7efeb, 0xfefbfaff, 0xa08fb04, 0x2040402, 0x401fff5, 0xfe06080e,
    // 7, -16, 14, 5, -12, 6, 22, -4, -17, -4, -7, -12, -9, -8, 16, 13, 0, -12, 3, 1, -5, -1, 9, -3, -1, 0, -2, -1, 12, 6, 9, -5
    0x50ef007, 0xfc1606f4, 0xf4f9fcef, 0xd10f8f7, 0x103f400, 0xfd09fffb, 0xfffe00ff, 0xfb09060c,
    // 12, -19, 0, -3, 4, -2, 0, -1, 0, -6, -6, -14, 15, -13, -27, -4, 19, -3, -8, -4, -16, -14, 22, -30, -5, -46, -4, -15, 11, -28, -11, 0
    0xfd00ed0c, 0xff00fe04, 0xf2fafa00, 0xfce5f30f, 0xfcf8fd13, 0xe216f2f0, 0xf1fcd2fb, 0xf5e40b,
    // 8, -16, 5, 5, 3, 3, -2, 0, -8, -24, 6, -4, 3, -10, -16, -4, 20, 15, -4, 19, 13, -8, -17, -15, -9, -21, 8, 10, 20, -35, -28, 11
    0x505f008, 0xfe0303, 0xfc06e8f8, 0xfcf0f603, 0x13fc0f14, 0xf1eff80d, 0xa08ebf7, 0xbe4dd14,
    // -3, -14, -64, -11, -45, -30, 37, 16, -1, -39, 17, -34, -25, -41, 34, -81, -2, -10, -3, 1, -2, 0, 3, -16, -13, -29, 8, -9, -4, -12, -20, -12
    0xf5c0f2fd, 0x1025e2d3, 0xde11d9ff, 0xaf22d7e7, 0x1fdf6fe, 0xf00300fe, 0xf708e3f3, 0xf4ecf4fc,
    // -8, 0, 4, -3, 16, 11, -8, 1, -8, -14, -2, 11, 2, -17, -15, -3, 8, 10, -1, 1, -29, 6, 5, -6, -19, -30, 10, -9, -1, -17, -5, -12
    0xfd0400f8, 0x1f80b10, 0xbfef2f8, 0xfdf1ef02, 0x1ff0a08, 0xfa0506e3, 0xf70ae2ed, 0xf4fbefff,
    // -2, -8, -8, -18, 0, 4, -2, -6, -2, -31, 19, -13, 19, 12, 15, -15, -11, 6, 1, -11, -14, -10, 22, 4, 24, -8, -4, -2, -7, 15, 8, -14
    0xeef8f8fe, 0xfafe0400, 0xf313e1fe, 0xf10f0c13, 0xf50106f5, 0x416f6f2, 0xfefcf818, 0xf2080ff9,
    // -9, 23, 17, 4, 10, -14, -11, -4, 21, -10, -20, 7, -1, 3, -14, 5, 3, 16, 5, 5, 4, -12, 15, -3, 23, -7, 3, 11, -16, 9, 3, -7
    0x41117f7, 0xfcf5f20a, 0x7ecf615, 0x5f203ff, 0x5051003, 0xfd0ff404, 0xb03f917, 0xf90309f0,
    // -11, 29, 5, 11, 12, -15, -8, 5, -5, -17, 12, 2, 8, -1, -17, -3, 13, -28, -56, 42, 61, 63, -10, 50, 3, -22, -9, -38, 21, 43, 12, -3
    0xb051df5, 0x5f8f10c, 0x20ceffb, 0xfdefff08, 0x2ac8e40d, 0x32f63f3d, 0xdaf7ea03, 0xfd0c2b15,
    // -14, 15, 5, -6, 17, 7, 5, -19, 7, -34, 4, -3, -5, 21, -6, -12, -27, 22, 8, 2, 5, -2, 9, 13, 5, 3, -9, 17, -16, -2, 3, -4
    0xfa050ff2, 0xed050711, 0xfd04de07, 0xf4fa15fb, 0x20816e5, 0xd09fe05, 0x11f70305, 0xfc03fef0,
    // -18, 19, 12, 16, 4, 11, -1, 5, -4, -7, 1, -7, 4, 8, 5, -7, -13, 11, 4, -21, -6, -13, 5, -2, 22, -12, 9, -1, 3, 25, 23, -10
    0x100c13ee, 0x5ff0b04, 0xf901f9fc, 0xf9050804, 0xeb040bf3, 0xfe05f3fa, 0xff09f416, 0xf6171903,
    // 8, -9, 4, -8, -11, -7, 17, 6, 19, 3, -4, -3, -3, 16, 1, -14, 9, -24, 6, -29, 4, -10, 4, 6, -1, 19, 4, 10, -8, 25, -9, -15
    0xf804f708, 0x611f9f5, 0xfdfc0313, 0xf20110fd, 0xe306e809, 0x604f604, 0xa0413ff, 0xf1f719f8,
    // 9, -5, 13, 5, -2, -4, 8, 6, -4, 4, 4, 13, -2, 5, -3, 2, 22, 8, -1, 14, 22, -22, 5, -4, -19, 9, 6, 23, -6, 6, -13, 12
    0x50dfb09, 0x608fcfe, 0xd0404fc, 0x2fd05fe, 0xeff0816, 0xfc05ea16, 0x170609ed, 0xcf306fa,
    // -19, -32, -39, -15, -41, 35, 2, 16, 54, 26, 106, 4, 27, -10, -6, -11, 7, -6, 18, -5, 2, 6, 12, -1, -6, -3, 5, 13, -21, 30, 10, -2
    0xf1d9e0ed, 0x100223d7, 0x46a1a36, 0xf5faf61b, 0xfb12fa07, 0xff0c0602, 0xd05fdfa, 0xfe0a1eeb,
    // 0, 16, -4, -3, 13, -2, 1, 0, -12, -4, -1, 32, -11, -10, -11, -7, 11, -11, 6, -11, 8, 4, -4, 31, -2, 22, 13, 4, -3, 11, -5, -10
    0xfdfc1000, 0x1fe0d, 0x20fffcf4, 0xf9f5f6f5, 0xf506f50b, 0x1ffc0408, 0x40d16fe, 0xf6fb0bfd,
    // 1, -2, 6, -14, -8, 5, 8, 4, 3, -5, 3, 8, 5, 17, 11, -10, -13, -11, 8, -17, -17, 18, 10, 16, 4, -6, 0, -12, 2, 15, -1, -5
    0xf206fe01, 0x40805f8, 0x803fb03, 0xf60b1105, 0xef08f5f3, 0x100a12ef, 0xf400fa04, 0xfbff0f02,
    // -24, -18, -11, -27, -24, 17, 13, -39, -14, 6, -7, -36, 6, 12, -13, 17, -5, -7, 13, -14, -8, 9, 1, -10, -5, -5, -9, -8, 8, 21, 0, 6
    0xe5f5eee8, 0xd90d11e8, 0xdcf906f2, 0x11f30c06, 0xf20df9fb, 0xf60109f8, 0xf8f7fbfb, 0x6001508,
    // 12, -1, 31, 0, 6, -16, -11, 18, -28, 4, -25, 4, 3, -11, -18, 29, 40, 63, 5, -16, -7, 3, -29, 39, -64, 19, 42, -21, 29, -44, 3, 44
    0x1fff0c, 0x12f5f006, 0x4e704e4, 0x1deef503, 0xf0053f28, 0x27e303f9, 0xeb2a13c0, 0x2c03d41d,
    // -4, 10, -14, -1, -3, 3, 1, 2, -12, -4, 11, 3, 7, -19, 4, 0, 0, 0, 0, -1, 1, 6, 3, 7, -1, 12, -2, 6, 1, -5, -11, 1
    0xfff20afc, 0x20103fd, 0x30bfcf4, 0x4ed07, 0xff000000, 0x7030601, 0x6fe0cff, 0x1f5fb01,
    // 3, 11, 1, 4, 20, -4, 15, -9, -17, 3, 2, -1, -19, -13, -15, 4, 2, 0, -3, 4, 2, 1, 10, -7, -3, 12, 5, 0, 2, -12, -8, 5
    0x4010b03, 0xf70ffc14, 0xff0203ef, 0x4f1f3ed, 0x4fd0002, 0xf90a0102, 0x50cfd, 0x5f8f402,
};
static const uint embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // 0.0001801, -0.000285, -0.0007896, -3.874e-05, -0.0004907, -4.91e-05, -0.0003884, 0.0001488, -0.0002942, 0.000512, -0.0001918, -0.00010276, 0.000263, -0.0003283, -0.0001665, -0.0004454
    0x8cab09e7, 0x828a9278, 0x83389005, 0x8e08e5d, 0x10328cd2, 0x86bc8a49, 0x8d610c4f, 0x8f4c8975,
};
static const uint embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -20, -27, 25, 27, 7, -22, 69, -17, -44, -56, -1, 28, -8, 6, 6, -13, -57, -9, -10, 78, 0, -7, -15, -13, -96, 17, -20, -15, 36, -5, 61, 26
    0x1b19e5ec, 0xef45ea07, 0x1cffc8d4, 0xf30606f8, 0x4ef6f7c7, 0xf3f1f900, 0xf1ec11a0, 0x1a3dfb24,
    // 56, 16, -43, -29, -37, 21, 2, 46, -78, 17, 16, 21, 36, 26, -47, 20, 72, 8, -3, 71, -23, 45, 74, 82, 50, -4, 14, -28, -6, -18, 56, -38
    0xe3d51038, 0x2e0215db, 0x151011b2, 0x14d11a24, 0x47fd0848, 0x524a2de9, 0xe40efc32, 0xda38eefa,
    // 27, -1, -29, -30, -54, 23, 58, 14, 55, -46, -61, 60, -38, -22, -15, -35, -87, -19, 44, 80, 18, -76, 14, 23, -73, -4, -46, -39, -35, 15, 64, 46
    0xe2e3ff1b, 0xe3a17ca, 0x3cc3d237, 0xddf1eada, 0x502ceda9, 0x170eb412, 0xd9d2fcb7, 0x2e400fdd,
    // 22, 4, 16, -11, 6, 6, -18, -13, -13, -10, 7, -16, -26, -22, 16, -12, -48, -51, 5, -43, 21, -29, 6, -7, -19, -9, -9, -70, -92, -33, 13, 14
    0xf5100416, 0xf3ee0606, 0xf007f6f3, 0xf410eae6, 0xd505cdd0, 0xf906e315, 0xbaf7f7ed, 0xe0ddfa4,
    // -11, -7, -21, 12, -6, -8, 8, 5, 12, -10, 4, -17, 37, -16, -25, 8, 15, 19, 13, -31, -97, -32, 13, 21, -40, 33, 44, 1, -7, 9, 40, -14
    0xcebf9f5, 0x508f8fa, 0xef04f60c, 0x8e7f025, 0xe10d130f, 0x150de09f, 0x12c21d8, 0xf22809f9,
    // 3, -22, 2, -10, -6, -16, 11, 9, -1, -11, 0, 16, 26, 4, -2, 3, 119, 49, 20, 64, -23, 25, 35, 28, 32, -30, 32, 27, 101, 30, 46, -18
    0xf602ea03, 0x90bf0fa, 0x1000f5ff, 0x3fe041a, 0x40143177, 0x1c2319e9, 0x1b20e220, 0xee2e1e65,
    // 17, -84, -93, -32, -56, 99, 11, 31, 71, 107, 43, -56, -44, -3, 84, -1, -15, -18, 3, 32, 5, -75, 42, 29, -1, 32, 8, -31, 5, -9, -27, 46
    0xe0a3ac11, 0x1f0b63c8, 0xc82b6b47, 0xff54fdd4, 0x2003eef1, 0x1d2ab505, 0xe10820ff, 0x2ee5f705,
    // -66, -43, 40, 32, 19, 64, 12, -25, -5, 24, -20, -17, -6, -21, 39, -51, -51, 93, 19, 23, 6, -1, 3, 47, -46, -32, -27, 1, 3, 9, 21, 11
    0x2028d5be, 0xe70c4013, 0xefec18fb, 0xcd27ebfa, 0x17135dcd, 0x2f03ff06, 0x1e5e0d2, 0xb150903,
    // 47, 2, -53, -14, 19, -12, -85, -7, 50, 66, 4, -11, 4, -40, 17, 27, 57, 6, 19, -79, 29, -10, 12, -4, -16, 26, -23, 31, -28, -2, -30, -18
    0xf2cb022f, 0xf9abf413, 0xf5044232, 0x1b11d804, 0xb1130639, 0xfc0cf61d, 0x1fe91af0, 0xeee2fee4,
    // -8, -17, 0, 11, 2, 16, -2, 15, -6, -32, -13, -21, 18, -12, -34, 5, -14, 21, 5, 48, 65, -30, -35, -36, -27, 3, -38, 25, -25, -98, -27, 7
    0xb00eff8, 0xffe1002, 0xebf3e0fa, 0x5def412, 0x300515f2, 0xdcdde241, 0x19da03e5, 0x7e59ee7,
    // -43, 19, 63, -46, -7, 72, 41, -11, 8, -39, -19, -15, -24, 2, 12, 117, 6, -16, 8, 33, 3, -54, -13, -17, 20, 8, 6, -51, 24, 1, -31, -43
    0xd23f13d5, 0xf52948f9, 0xf1edd908, 0x750c02e8, 0x2108f006, 0xeff3ca03, 0xcd060814, 0xd5e10118,
    // 13, 56, -20, -32, -9, 10, -70, -15, 13, -51, 8, -57, -20, -28, -32, 83, 14, -38, 33, 23, 0, -27, -44, 5, 37, -41, 3, -1, 24, 29, -13, -18
    0xe0ec380d, 0xf1ba0af7, 0xc708cd0d, 0x53e0e4ec, 0x1721da0e, 0x5d4e500, 0xff03d725, 0xeef31d18,
    // -20, -40, -5, -4, 20, -15, -5, 18, 21, -1, -2, 26, 19, 14, -6, 6, -23, -43, 24, 6, 8, -54, 8, 96, 35, -80, -4, 14, -27, 12, 50, 4
    0xfcfbd8ec, 0x12fbf114, 0x1afeff15, 0x6fa0e13, 0x618d5e9, 0x6008ca08, 0xefcb023, 0x4320ce5,
    // 32, 12, 1, 34, 19, -23, -11, -13, -81, -35, -18, -37, -1, -14, -6, 5, 38, -8, -5, 13, -38, 23, -22, 5, 61, -33, 26, -10, 14, 3, -8, -31
    0x22010c20, 0xf3f5e913, 0xdbeeddaf, 0x5faf2ff, 0xdfbf826, 0x5ea17da, 0xf61adf3d, 0xe1f8030e,
    // 0, 57, -65, 18, -25, 54, 25, -1, 73, -13, -41, 86, -42, -76, -52, -5, 19, 82, 25, -43, 33, 7, 28, 36, -40, 27, -37, 51, -31, 8, 13, -16
    0x12bf3900, 0xff1936e7, 0x56d7f349, 0xfbccb4d6, 0xd5195213, 0x241c0721, 0x33db1bd8, 0xf00d08e1,
    // 29, 45, 1, -16, -29, -26, 19, -66, 8, 46, 17, 7, -26, 8, 39, -4, 33, 64, 28, -16, -20, 20, -22, -4, -52, -7, 4, -20, 6, 49, 84, 57
    0xf0012d1d, 0xbe13e6e3, 0x7112e08, 0xfc2708e6, 0xf01c4021, 0xfcea14ec, 0xec04f9cc, 0x39543106,
    // 2, 11, 15, -7, -8, -4, 10, 7, 4, 13, 15, 22, -28, 4, 34, -11, 100, 53, 43, 2, 58, -26, -5, -62, -9, 3, -27, -58, -40, -83, 89, 90
    0xf90f0b02, 0x70afcf8, 0x160f0d04, 0xf52204e4, 0x22b3564, 0xc2fbe63a, 0xc6e503f7, 0x5a59add8,
    // 4, -11, -13, 86, 19, -85, 65, -15, -117, -105, 24, -27, -48, 44, 28, -38, 46, 31, -40, 51, -13, -52, 20, 2, -55, 68, 46, -47, -66, -27, -25, -51
    0x56f3f504, 0xf141ab13, 0xe518978b, 0xda1c2cd0, 0x33d81f2e, 0x214ccf3, 0xd12e44c9, 0xcde7e5be,
    // 21, 5, 55, -54, -4, -64, 32, 23, -10, -34, 25, -10, 70, 47, 25, 27, -73, 72, 25, 63, 30, -53, 35, 36, -62, 65, -59, 8, 9, 12, 1, 4
    0xca370515, 0x1720c0fc, 0xf619def6, 0x1b192f46, 0x3f1948b7, 0x2423cb1e, 0x8c541c2, 0x4010c09,
    // 64, 42, -30, -26, 12, -82, -61, -3, 27, -13, -19, 30, 28, -29, -22, -16, -23, 25, 45, 11, 33, -108, -18, -12, -10, 52, 10, -43, 20, 12, -19, 43
    0xe6e22a40, 0xfdc3ae0c, 0x1eedf31b, 0xf0eae31c, 0xb2d19e9, 0xf4ee9421, 0xd50a34f6, 0x2bed0c14,
    // 58, 21, -11, -51, -33, 43, -5, 8, -103, 38, 2, 20, -28, 39, -26, -6, -20, -45, -3, -5, 18, -10, 38, 13, -25, 63, -26, 3, 0, -57, -6, -10
    0xcdf5153a, 0x8fb2bdf, 0x14022699, 0xfae627e4, 0xfbfdd3ec, 0xd26f612, 0x3e63fe7, 0xf6fac700,
    // -6, 36, 61, -40, 22, 4, -38, -12, 49, -9, -56, 28, 34, -10, -78, 26, -5, -78, 52, 0, 11, 15, -50, -8, -29, -50, -68, -8, 43, 19, 91, 50
    0xd83d24fa, 0xf4da0416, 0x1cc8f731, 0x1ab2f622, 0x34b2fb, 0xf8ce0f0b, 0xf8bccee3, 0x325b132b,
    // -7, -4, -17, 11, -3, -2, 2, 29, 5, -19, -43, -3, 43, -33, 1, 8, 13, -6, -47, 87, 0, 56, -6, -11, -57, -31, 48, -10, 7, -6, -18, -41
    0xbeffcf9, 0x1d02fefd, 0xfdd5ed05, 0x801df2b, 0x57d1fa0d, 0xf5fa3800, 0xf630e1c7, 0xd7eefa07,
    // 1, -55, 20, -2, 22, 13, -6, 0, 77, 7, -31, -11, -38, 21, -2, 10, 0, -19, 63, 24, -89, 40, 3, 41, 89, -84, 46, 1, 46, 70, 4, 8
    0xfe14c901, 0xfa0d16, 0xf5e1074d, 0xafe15da, 0x183fed00, 0x290328a7, 0x12eac59, 0x804462e,
    // -32, -10, 4, 37, 21, -48, 2, -44, 101, -54, 46, -29, -46, -40, 37, -10, 14, -24, -6, -15, 42, -26, -31, 4, -63, 29, -15, -4, 45, 20, 4, 28
    0x2504f6e0, 0xd402d015, 0xe32eca65, 0xf625d8d2, 0xf1fae80e, 0x4e1e62a, 0xfcf11dc1, 0x1c04142d,
    // 11, 19, -54, 5, 19, 4, -55, -12, 54, 74, 14, -70, 9, 59, -26, 17, 37, -26, -46, 21, 29, 42, -8, -24, -28, 11, 34, -9, -13, -21, -22, -20
    0x5ca130b, 0xf4c90413, 0xba0e4a36, 0x11e63b09, 0x15d2e625, 0xe8f82a1d, 0xf7220be4, 0xeceaebf3,
    // 9, -12, -15, -12, -1, 0, -11, -2, 11, 4, 3, 6, 11, -2, -15, 5, -1, -30, -11, 15, -43, 1, -34, 57, 11, -88, 24, -7, 35, -60, 38, 34
    0xf4f1f409, 0xfef500ff, 0x603040b, 0x5f1fe0b, 0xff5e2ff, 0x39de01d5, 0xf918a80b, 0x2226c423,
    // 5, 47, -16, -32, -4, 12, -74, 73, 41, 25, 31, -23, 17, -53, 25, -61, 36, 64, 26, 61, 31, 39, 57, -23, -34, -28, -49, 20, -47, 6, -3, -18
    0xe0f02f05, 0x49b60cfc, 0xe91f1929, 0xc319cb11, 0x3d1a4024, 0xe939271f, 0x14cfe4de, 0xeefd06d1,
    // -14, -39, -41, 16, -16, 5, 2, 9, -15, 10, 64, -42, -33, 43, -2, -31, 110, -2, -11, -42, -10, 88, 41, 28, -14, -68, -2, 25, -49, -4, 68, -6
    0x10d7d9f2, 0x90205f0, 0xd6400af1, 0xe1fe2bdf, 0xd6f5fe6e, 0x1c2958f6, 0x19febcf2, 0xfa44fccf,
    // 127, 8, 45, 71, 71, 11, 39, 24, 37, 33, 69, -1, -6, -5, -46, -22, 12, -22, 12, -3, -2, -7, -13, -2, 28, -18, 0, 6, -14, -1, -13, -22
    0x472d087f, 0x18270b47, 0xff452125, 0xead2fbfa, 0xfd0cea0c, 0xfef3f9fe, 0x600ee1c, 0xeaf3fff2,
    // -27, 42, 26, 46, -16, 36, 27, -41, -4, 9, 23, -63, 36, -53, -46, 21, 4, -51, 12, 32, -40, 66, 23, 107, 16, -3, 8, 10, -71, -5, 17, -4
    0x2e1a2ae5, 0xd71b24f0, 0xc11709fc, 0x15d2cb24, 0x200ccd04, 0x6b1742d8, 0xa08fd10, 0xfc11fbb9,
    // -19, 36, 15, 77, -86, 67, -43, 8, 38, -54, 10, -25, 59, 116, -9, -14, -15, -46, 26, 61, -10, -24, 23, 2, 3, -25, -14, -27, 13, 10, 17, 4
    0x4d0f24ed, 0x8d543aa, 0xe70aca26, 0xf2f7743b, 0x3d1ad2f1, 0x217e8f6, 0xe5f2e703, 0x4110a0d,
    // 59, -82, -4, -17, -16, -19, 15, 12, -25, 22, 29, -119, 11, 67, 94, 1, 11, -52, -19, 47, -10, -48, 48, 3, -17, 41, 15, -17, -38, -9, -60, -43
    0xeffcae3b, 0xc0fedf0, 0x891d16e7, 0x15e430b, 0x2fedcc0b, 0x330d0f6, 0xef0f29ef, 0xd5c4f7da,
    // 37, 50, -62, -13, -12, -43, -31, 71, 50, -75, 52, -18, -26, -11, 0, 64, -28, 25, 25, -5, 1, -4, 21, 35, -30, 18, -27, 33, 17, 27, 21, 61
    0xf3c23225, 0x47e1d5f4, 0xee34b532, 0x4000f5e6, 0xfb1919e4, 0x2315fc01, 0x21e512e2, 0x3d151b11,
    // -59, -11, -49, 60, -25, 15, 44, 16, -15, 9, 41, -42, -2, 54, 10, -37, 22, -23, -23, 59, 14, 7, 101, 37, -18, 34, -18, 34, -72, 9, 2, -37
    0x3ccff5c5, 0x102c0fe7, 0xd62909f1, 0xdb0a36fe, 0x3be9e916, 0x2565070e, 0x22ee22ee, 0xdb0209b8,
    // 11, -1, -7, 1, 16, 9, -24, 26, -26, 14, -8, 7, -32, 22, 15, 13, 5, -1, -42, 80, 57, 17, -41, -16, -56, -43, -12, -32, -4, 4, -12, -49
    0x1f9ff0b, 0x1ae80910, 0x7f80ee6, 0xd0f16e0, 0x50d6ff05, 0xf0d71139, 0xe0f4d5c8, 0xcff404fc,
    // -31, -17, 12, -24, 2, 0, -29, -2, 38, -15, 70, 14, 0, 5, -28, -32, -74, -19, 24, -29, 56, 18, 28, 14, -12, -34, 10, 17, 15, -33, -40, 40
    0xe80cefe1, 0xfee30002, 0xe46f126, 0xe0e40500, 0xe318edb6, 0xe1c1238, 0x110adef4, 0x28d8df0f,
    // -31, -28, 36, 89, -88, -64, -27, 43, -5, 67, -29, -11, -58, -25, -43, 53, 7, -24, -4, -9, -6, 11, -22, 4, 31, -38, -1, -6, 11, -9, -16, -15
    0x5924e4e1, 0x2be5c0a8, 0xf5e343fb, 0x35d5e7c6, 0xf7fce807, 0x4ea0bfa, 0xfaffda1f, 0xf1f0f70b,
    // 4, -34, 67, -12, -25, 24, 45, 0, -47, -88, -2, 35, -35, -17, -25, -19, -3, -12, -36, -44, -22, 11, -4, -7, 13, 20, 22, 26, -3, 45, 27, -14
    0xf443de04, 0x2d18e7, 0x23fea8d1, 0xede7efdd, 0xd4dcf4fd, 0xf9fc0bea, 0x1a16140d, 0xf21b2dfd,
    // 41, 7, -11, 4, 7, 7, -77, -21, -36, 12, -40, -13, -15, 1, -24, -48, -34, 52, 49, 15, -5, 2, 12, 52, 6, -50, -17, 16, -5, -25, 54, 35
    0x4f50729, 0xebb30707, 0xf3d80cdc, 0xd0e801f1, 0xf3134de, 0x340c02fb, 0x10efce06, 0x2336e7fb,
    // -116, -12, -37, -64, -68, -11, -30, -33, -35, -27, -64, -2, -1, 8, 37, 28, -1, -2, -11, -1, 1, 2, 20, 10, -4, 19, -2, -6, 4, -6, -6, 1
    0xc0dbf48c, 0xdfe2f5bc, 0xfec0e5dd, 0x1c2508ff, 0xfff5feff, 0xa140201, 0xfafe13fc, 0x1fafa04,
    // 2, 13, -4, -15, 9, -4, -1, -6, 13, 9, -1, 13, -10, 23, 11, -12, 8, -12, -11, 22, 6, 50, -50, -19, -41, 19, 22, -26, 14, -59, 42, 91
    0xf1fc0d02, 0xfafffc09, 0xdff090d, 0xf40b17f6, 0x16f5f408, 0xedce3206, 0xe61613d7, 0x5b2ac50e,
    // 13, -42, 53, -29, 29, -55, -37, -16, -81, -7, 49, -8, 12, 10, 25, 30, 29, 28, -38, -45, 6, 17, 12, 13, -27, 60, -2, 42, 11, -22, -9, -40
    0xe335d60d, 0xf0dbc91d, 0xf831f9af, 0x1e190a0c, 0xd3da1c1d, 0xd0c1106, 0x2afe3ce5, 0xd8f7ea0b,
    // 12, -69, -2, -20, 34, -2, -65, -7, -11, -15, 20, 19, -46, 22, -8, -10, 9, -34, 8, 119, -40, -31, -3, 40, -48, -1, -34, -12, 29, -27, 85, 10
    0xecfebb0c, 0xf9bffe22, 0x1314f1f5, 0xf6f816d2, 0x7708de09, 0x28fde1d8, 0xf4deffd0, 0xa55e51d,
    // -70, 14, -8, -31, -40, 58, 93, 66, -44, -21, 66, 8, -3, 40, 28, 96, -40, 54, -25, 29, 17, 11, 67, 33, -48, 26, -53, -2, -1, -36, 27, 21
    0xe1f80eba, 0x425d3ad8, 0x842ebd4, 0x601c28fd, 0x1de736d8, 0x21430b11, 0xfecb1ad0, 0x151bdcff,
    // -3, 2, 3, -7, -38, 10, 41, -40, -13, -13, 51, -8, 10, -43, 8, -25, 27, 102, -17, -56, 25, 6, 39, -19, 35, 50, 76, 13, -42, 23, -21, 6
    0xf90302fd, 0xd8290ada, 0xf833f3f3, 0xe708d50a, 0xc8ef661b, 0xed270619, 0xd4c3223, 0x6eb17d6,
    // 13, -43, 69, 6, 21, 41, -1, -69, 1, 67, -109, 29, 30, 1, -8, -47, 23, -34, 13, 62, -5, -101, -23, -23, -17, 32, 10, -50, -6, 6, -20, -26
    0x645d50d, 0xbbff2915, 0x1d934301, 0xd1f8011e, 0x3e0dde17, 0xe9e99bfb, 0xce0a20ef, 0xe6ec06fa,
    // 21, -22, 58, -71, -49, 15, 6, 30, 72, 11, 1, -41, 26, 5, 31, -13, -66, 6, 5, -40, 22, -3, 58, 34, -2, 46, -43, 33, 35, -23, -16, 33
    0xb93aea15, 0x1e060fcf, 0xd7010b48, 0xf31f051a, 0xd80506be, 0x223afd16, 0x21d52efe, 0x21f0e923,
    // -44, -14, -80, 19, 31, 59, -4, -30, 43, 71, 23, 49, -34, -30, -23, 43, 64, -23, 40, 49, 27, -59, 33, 67, -16, 31, -43, 9, 49, 2, 25, 43
    0x13b0f2d4, 0xe2fc3b1f, 0x3117472b, 0x2be9e2de, 0x3128e940, 0x4321c51b, 0x9d51ff0, 0x2b190231,
    // -32, -30, 48, -10, 48, -33, -56, 14, -22, 23, 49, 13, 44, -13, 22, 28, -62, 32, -4, -12, -4, 27, 10, 7, -11, -23, -58, 39, -86, 12, 33, 31
    0xf630e2e0, 0xec8df30, 0xd3117ea, 0x1c16f32c, 0xf4fc20c2, 0x70a1bfc, 0x27c6e9f5, 0x1f210caa,
    // -99, 24, 9, -104, 103, -59, 102, 39, -7, 80, -36, -115, -73, 18, -128, -61, -17, -53, 9, 76, -6, -35, 15, -1, 22, -20, -17, -19, 14, 3, 8, -35
    0x9809189d, 0x2766c567, 0x8ddc50f9, 0xc38012b7, 0x4c09cbef, 0xff0fddfa, 0xedefec16, 0xdd08030e,
    // -25, -17, 20, 13, -23, 2, 44, -20, -24, -28, 15, 12, 11, 11, -6, 11, -60, 62, 18, -63, 6, 34, -38, 73, -8, -41, -71, 6, 44, -3, 45, -17
    0xd14efe7, 0xec2c02e9, 0xc0fe4e8, 0xbfa0b0b, 0xc1123ec4, 0x49da2206, 0x6b9d7f8, 0xef2dfd2c,
    // 0, -11, -20, 12, -4, -12, 11, -8, 4, 9, -2, 7, 47, -28, -18, 24, 6, -18, -22, -16, 58, 7, -24, 3, -5, -19, 12, 25, 8, -11, -90, -45
    0xcecf500, 0xf80bf4fc, 0x7fe0904, 0x18eee42f, 0xf0eaee06, 0x3e8073a, 0x190cedfb, 0xd3a6f508,
    // -14, -1, -8, 1, 18, 18, -9, 36, -22, 41, 15, 27, 40, -34, 23, 5, 3, 14, 40, 59, -7, -64, -22, -15, -68, -43, 19, -32, -76, -15, 19, 32
    0x1f8fff2, 0x24f71212, 0x1b0f29ea, 0x517de28, 0x3b280e03, 0xf1eac0f9, 0xe013d5bc, 0x2013f1b4,
    // -21, 65, 43, -13, -19, 28, -10, -11, -20, 5, 12, -5, -9, -26, 10, -44, 33, -20, -64, 81, 20, 97, 0, -16, 5, 80, -4, 48, -41, 56, 27, 10
    0xf32b41eb, 0xf5f61ced, 0xfb0c05ec, 0xd40ae6f7, 0x51c0ec21, 0xf0006114, 0x30fc5005, 0xa1b38d7,
    // -62, 9, -108, 82, -14, 58, 57, 8, 16, 20, -6, 9, -97, 24, -11, -24, 77, -20, -14, 59, -8, -70, 52, 24, -5, 52, 20, -7, -43, -13, -31, -44
    0x529409c2, 0x8393af2, 0x9fa1410, 0xe8f5189f, 0x3bf2ec4d, 0x1834baf8, 0xf91434fb, 0xd4e1f3d5,
    // 27, 25, -35, -75, 88, 55, 19, -59, 14, -61, 23, 14, 53, 24, 28, -39, -6, 20, -8, 17, 6, -14, 13, 11, -19, 33, -6, 12, -14, 3, 3, 7
    0xb5dd191b, 0xc5133758, 0xe17c30e, 0xd91c1835, 0x11f814fa, 0xb0df206, 0xcfa21ed, 0x70303f2,
    // -44, -8, -19, -85, 88, -72, 90, 31, -60, 85, -30, -33, -41, -108, -22, -24, -26, 36, 16, 30, 9, -32, -2, 25, -42, 31, -2, -11, -14, -18, -6, 24
    0xabedf8d4, 0x1f5ab858, 0xdfe255c4, 0xe8ea94d7, 0x1e1024e6, 0x19fee009, 0xf5fe1fd6, 0x18faeef2,
    // 49, -27, -14, -14, -21, 41, 8, -4, -3, -30, -14, -15, -60, -20, -3, -4, -52, -65, -47, 62, -14, 67, -35, -23, -74, -32, -28, -30, 0, -13, 56, -9
    0xf2f2e531, 0xfc0829eb, 0xf1f2e2fd, 0xfcfdecc4, 0x3ed1bfcc, 0xe9dd43f2, 0xe2e4e0b6, 0xf738f300,
    // -10, -44, -32, 5, -3, 7, 7, 23, 12, -12, 4, 0, 40, -5, -54, 13, 6, -19, 37, -24, -71, 29, -35, 38, -93, 13, 65, -45, 17, -29, 74, 9
    0x5e0d4f6, 0x170707fd, 0x4f40c, 0xdcafb28, 0xe825ed06, 0x26dd1db9, 0xd3410da3, 0x94ae311,
    // 24, 4, -39, -33, -26, 2, -35, 78, 44, 17, 8, -20, -5, 32, 21, -23, -62, 13, 16, 59, 42, -52, -47, 27, 0, -18, -55, -25, 9, -22, 40, 54
    0xdfd90418, 0x4edd02e6, 0xec08112c, 0xe91520fb, 0x3b100dc2, 0x1bd1cc2a, 0xe7c9ee00, 0x3628ea09,
    // -23, 18, -7, -10, -14, -25, 9, -1, 39, 28, 16, 27, 34, 19, -15, -47, 18, 6, -27, -42, -13, 2, -5, 26, 57, 55, 7, -5, -13, 16, 67, 21
    0xf6f912e9, 0xff09e7f2, 0x1b101c27, 0xd1f11322, 0xd6e50612, 0x1afb02f3, 0xfb073739, 0x154310f3,
    // -2, 90, 28, 2, -1, 35, -41, 10, 8, 39, -21, -29, -20, -17, 49, -34, 84, 91, -79, -1, -34, -97, 84, -82, -90, -58, -48, -31, -44, -87, 77, -86
    0x21c5afe, 0xad723ff, 0xe3eb2708, 0xde31efec, 0xffb15b54, 0xae549fde, 0xe1d0c6a6, 0xaa4da9d4,
    // -8, 4, -6, 1, 7, -22, 15, 26, 18, 2, -24, 28, 27, 5, 18, 2, -5, -14, -23, 35, -46, 89, 72, -7, -20, -15, 53, -15, -24, 52, 36, 2
    0x1fa04f8, 0x1a0fea07, 0x1ce80212, 0x212051b, 0x23e9f2fb, 0xf94859d2, 0xf135f1ec, 0x22434e8,
};
static const uint embedded_decoder3_ResidualBlock_1_body_pw_expand_bias_dwords[32] = {
    // -0.1678, -0.1414, -0.1584, -0.0794, -0.1439, -0.1259, -0.1449, -0.07904, -0.0914, -0.219, -0.1268, 0.01247, 0.02177, 0.0277, -0.2408, 0.1881
    0xb086b15f, 0xad15b112, 0xb007b09b, 0xad0fb0a3, 0xb302add9, 0x2262b00f, 0x27172593, 0x3205b3b5,
    // -0.3389, -0.1692, -0.1387, -0.34, -0.02899, -0.3135, 0.00953, -0.02594, -0.02895, -0.108, -0.02701, -0.03738, -0.11865, 0.02147, -0.1715, -0.1381
    0xb16ab56c, 0xb571b070, 0xb504a76c, 0xa6a420e1, 0xaee9a769, 0xa8c9a6ea, 0x257faf98, 0xb06bb17d,
    // -0.1492, -0.1904, -0.0721, 0.00805, -0.1252, 0.03412, -0.1816, -0.155, 0.0389, -0.0514, -0.2346, 0.0782, -0.1393, -0.42, -0.1934, -0.182
    0xb218b0c6, 0x201fac9d, 0x285eb002, 0xb0f6b1d0, 0xaa9428fb, 0x2d01b382, 0xb6b8b075, 0xb1d3b230,
    // -0.2476, -0.00883, -0.01886, -0.1078, -0.04007, -0.085, -0.08374, -0.215, 0.0306, -0.2452, 0.05917, 0.04477, -0.1305, -0.1237, -0.6772, -0.03912
    0xa085b3ec, 0xaee6a4d4, 0xad71a921, 0xb2e1ad5c, 0xb3d927d5, 0x29bb2b93, 0xafebb02d, 0xa902b96b,
};
static const uint embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 55, 8, 44, 3, -42, -17, 29, 9, 32, -18, 13, -29, -10, -33, -11, 43, 46, -37, -9, -56, -40, 8, -38, -18, 57, 9, 27, -24, 37, -4, 45, -7
    0x32c0837, 0x91defd6, 0xe30dee20, 0x2bf5dff6, 0xc8f7db2e, 0xeeda08d8, 0xe81b0939, 0xf92dfc25,
    // -4, 12, -69, -9, -4, 28, 5, 14, -3, -17, -11, 23, -19, 45, -29, -13, 17, 25, 36, 20, -21, -11, 6, 4, -35, 27, 19, -11, -36, 61, 7, -18
    0xf7bb0cfc, 0xe051cfc, 0x17f5effd, 0xf3e32ded, 0x14241911, 0x406f5eb, 0xf5131bdd, 0xee073ddc,
    // -38, -30, 50, 31, 54, 38, -5, -63, 21, 9, 11, -84, 0, -48, 47, 42, -6, 30, 7, -108, 18, 0, 55, 55, -51, -26, -8, 17, 52, 23, -75, -44
    0x1f32e2da, 0xc1fb2636, 0xac0b0915, 0x2a2fd000, 0x94071efa, 0x37370012, 0x11f8e6cd, 0xd4b51734,
    // 49, 76, -6, -12, -46, -89, 14, 52, -25, -23, -34, -18, -2, 33, 74, 5, -14, -28, 2, -4, -51, -1, 2, -31, 88, -41, 38, 11, 32, -3, 7, 14
    0xf4fa4c31, 0x340ea7d2, 0xeedee9e7, 0x54a21fe, 0xfc02e4f2, 0xe102ffcd, 0xb26d758, 0xe07fd20,
    // 40, -47, 22, -50, -5, -13, 107, -55, -3, 16, 14, -2, 26, -17, -18, -5, -7, -117, 35, -90, 89, 11, 11, 14, -69, 74, 2, -37, -2, -55, -12, 116
    0xce16d128, 0xc96bf3fb, 0xfe0e10fd, 0xfbeeef1a, 0xa6238bf9, 0xe0b0b59, 0xdb024abb, 0x74f4c9fe,
    // 59, -9, 5, 35, -13, -51, -18, 47, 48, 3, 30, 9, -28, -22, 42, -72, -63, 38, -128, -14, 53, 9, -4, -33, 66, 80, -3, -20, -51, -15, -21, -53
    0x2305f73b, 0x2feecdf3, 0x91e0330, 0xb82aeae4, 0xf28026c1, 0xdffc0935, 0xecfd5042, 0xcbebf1cd,
    // 17, -8, -44, 15, 32, -4, -63, 8, 86, 11, 19, 54, 24, -7, 20, 0, 2, 73, 43, 4, 39, -11, -9, -14, -48, -13, 20, -15, 1, -69, -31, 68
    0xfd4f811, 0x8c1fc20, 0x36130b56, 0x14f918, 0x42b4902, 0xf2f7f527, 0xf114f3d0, 0x44e1bb01,
    // -44, -48, -14, 36, -54, 74, -88, -25, 84, -7, -25, 51, 0, 51, -42, 53, 4, -35, -83, 4, -32, 11, 45, 43, -87, 33, 20, 10, -31, -23, 11, -11
    0x24f2d0d4, 0xe7a84aca, 0x33e7f954, 0x35d63300, 0x4addd04, 0x2b2d0be0, 0xa1421a9, 0xf50be9e1,
    // -4, 26, 16, 20, 20, -12, -38, 9, 57, -11, 35, 33, -32, 55, 21, 41, 22, 36, -44, 65, -51, 59, 33, -16, 63, -36, -38, 38, -27, -74, -15, -49
    0x14101afc, 0x9daf414, 0x2123f539, 0x291537e0, 0x41d42416, 0xf0213bcd, 0x26dadc3f, 0xcff1b6e5,
    // -19, -45, 101, -46, -14, -47, -47, -12, 91, 1, 47, -70, -6, -55, -35, 63, 72, 60, -5, -25, -4, 14, 8, -23, 40, -9, 13, -64, 2, -28, -2, 5
    0xd265d3ed, 0xf4d1d1f2, 0xba2f015b, 0x3fddc9fa, 0xe7fb3c48, 0xe9080efc, 0xc00df728, 0x5fee402,
    // -15, 19, -46, 11, 35, -41, -51, 41, 72, -8, -2, 45, -9, 50, 21, 16, -27, 38, 21, 60, -15, 3, -7, -33, 17, -22, 65, 20, -18, 37, 85, 73
    0xbd213f1, 0x29cdd723, 0x2dfef848, 0x101532f7, 0x3c1526e5, 0xdff903f1, 0x1441ea11, 0x495525ee,
    // -36, -29, 18, -8, -3, -84, -51, -37, -45, -1, -70, 27, 2, 39, -33, 41, 46, -35, -56, 6, 31, -30, 15, 29, 88, 58, 12, -18, -30, 48, 16, -9
    0xf812e3dc, 0xdbcdacfd, 0x1bbaffd3, 0x29df2702, 0x6c8dd2e, 0x1d0fe21f, 0xee0c3a58, 0xf71030e2,
    // 22, -26, -15, 26, -23, 16, 0, -12, 19, -21, -32, -5, -55, 6, 6, 84, 1, -12, 36, -26, 22, 46, 8, 50, -20, 19, -19, -45, 41, 1, 5, -46
    0x1af1e616, 0xf40010e9, 0xfbe0eb13, 0x540606c9, 0xe624f401, 0x32082e16, 0xd3ed13ec, 0xd2050129,
    // -13, 20, 14, -54, 6, 44, -1, 45, -5, 67, -21, -67, 13, 5, -24, 52, -14, -4, 18, -6, 1, 40, -24, -3, -54, 13, 18, -30, -1, -40, -31, 17
    0xca0e14f3, 0x2dff2c06, 0xbdeb43fb, 0x34e8050d, 0xfa12fcf2, 0xfde82801, 0xe2120dca, 0x11e1d8ff,
    // 36, 29, -64, -47, 6, -61, 41, -2, 27, -2, 65, -25, -18, -37, 36, -6, -24, -50, 47, 16, -46, -1, 25, 6, 44, -8, -31, 11, 2, 42, 41, -26
    0xd1c01d24, 0xfe29c306, 0xe741fe1b, 0xfa24dbee, 0x102fcee8, 0x619ffd2, 0xbe1f82c, 0xe6292a02,
    // -22, -26, 21, 7, 43, 21, -9, 41, -43, 11, -81, 2, -4, -61, 11, -27, 14, -20, 17, -11, 23, -16, 9, 45, -16, -10, -47, 25, -28, 33, -16, 15
    0x715e6ea, 0x29f7152b, 0x2af0bd5, 0xe50bc3fc, 0xf511ec0e, 0x2d09f017, 0x19d1f6f0, 0xff021e4,
    // 27, -82, -62, -91, -6, -119, 14, -51, 38, 9, -79, -20, 48, -55, -20, 13, 14, -39, 73, -10, 84, 32, 22, 4, -36, 18, -44, -18, -8, 52, -25, -58
    0xa5c2ae1b, 0xcd0e89fa, 0xecb10926, 0xdecc930, 0xf649d90e, 0x4162054, 0xeed412dc, 0xc6e734f8,
    // -119, 22, 39, 38, -52, 67, -30, -10, -62, -14, 39, 44, 36, -29, 98, 3, 70, 86, 27, -13, 0, 4, -5, 100, -70, -61, -35, -27, -20, -15, -10, 4
    0x26271689, 0xf6e243cc, 0x2c27f2c2, 0x362e324, 0xf31b5646, 0x64fb0400, 0xe5ddc3ba, 0x4f6f1ec,
    // -45, -71, -28, -56, -16, 24, -51, -55, -11, -42, -41, -62, 15, 3, -5, 20, -8, 12, -1, -26, 61, 5, 42, 22, -70, -30, 5, 75, -3, -22, 7, 108
    0xc8e4b9d3, 0xc9cd18f0, 0xc2d7d6f5, 0x14fb030f, 0xe6ff0cf8, 0x162a053d, 0x4b05e2ba, 0x6c07eafd,
    // -30, 69, 11, -22, 24, 39, 45, 42, 24, 25, 4, -60, 21, -13, 109, 28, 5, -22, -64, -73, -29, 50, 7, 42, -42, 108, -26, 35, 38, 54, 15, 67
    0xea0b45e2, 0x2a2d2718, 0xc4041918, 0x1c6df315, 0xb7c0ea05, 0x2a0732e3, 0x23e66cd6, 0x430f3626,
    // 11, -52, 40, 78, 13, 117, -16, -93, 22, 21, -117, -5, 15, 75, 59, 32, -21, 24, -17, 66, 103, 30, -49, -17, -101, 35, 24, -33, -6, -4, 10, -85
    0x4e28cc0b, 0xa3f0750d, 0xfb8b1516, 0x203b4b0f, 0x42ef18eb, 0xefcf1e67, 0xdf18239b, 0xab0afcfa,
    // 45, -16, -7, 29, 8, -24, -26, -8, -13, 6, -58, -21, 96, -16, 50, -14, -31, -58, 80, -19, 29, -39, 5, -81, 17, -35, 5, -3, -26, 17, -3, -21
    0x1df9f02d, 0xf8e6e808, 0xebc606f3, 0xf232f060, 0xed50c6e1, 0xaf05d91d, 0xfd05dd11, 0xebfd11e6,
    // -17, 9, 65, -26, 58, -19, 16, 24, 50, 5, 18, -8, 8, 13, -86, 25, -100, -5, -25, -23, -11, -13, 60, -13, -4, -20, 35, 26, 13, -6, -21, -18
    0xe64109ef, 0x1810ed3a, 0xf8120532, 0x19aa0d08, 0xe9e7fb9c, 0xf33cf3f5, 0x1a23ecfc, 0xeeebfa0d,
    // -12, -4, -58, 23, 28, 14, -29, -26, 8, 35, 66, 17, -39, -7, 10, -11, -27, 11, 50, 1, 17, -62, 0, 18, -11, -31, -5, 42, -43, 15, -21, -19
    0x17c6fcf4, 0xe6e30e1c, 0x11422308, 0xf50af9d9, 0x1320be5, 0x1200c211, 0x2afbe1f5, 0xedeb0fd5,
    // -53, 25, 20, 52, -3, 30, -63, -17, -43, -22, -17, 30, -4, 81, -3, -15, -51, 64, 16, 28, 38, 12, 21, -29, 8, -10, -7, 22, -16, 11, 89, 40
    0x341419cb, 0xefc11efd, 0x1eefead5, 0xf1fd51fc, 0x1c1040cd, 0xe3150c26, 0x16f9f608, 0x28590bf0,
    // -47, -63, 2, -4, 4, 55, 47, 14, -15, -8, 7, -7, -10, 17, -1, 71, 41, -16, -36, 37, 26, -56, -10, 11, -55, 5, -2, -26, 78, -10, -8, -6
    0xfc02c1d1, 0xe2f3704, 0xf907f8f1, 0x47ff11f6, 0x25dcf029, 0xbf6c81a, 0xe6fe05c9, 0xfaf8f64e,
    // -44, -10, 7, -11, 71, -41, 11, -3, -12, 23, -8, 37, -6, -15, -4, 74, -48, -23, -8, 31, -21, 4, 29, -4, 0, 15, -59, -20, 26, -24, -13, 8
    0xf507f6d4, 0xfd0bd747, 0x25f817f4, 0x4afcf1fa, 0x1ff8e9d0, 0xfc1d04eb, 0xecc50f00, 0x8f3e81a,
    // -26, -38, 10, -79, -18, -10, 23, -18, 51, -7, 29, 0, -16, -41, -63, -17, 10, -8, -24, 15, 72, 29, -29, 0, 15, 7, -54, 36, -18, -11, 10, 3
    0xb10adae6, 0xee17f6ee, 0x1df933, 0xefc1d7f0, 0xfe8f80a, 0xe31d48, 0x24ca070f, 0x30af5ee,
    // -42, -55, -87, -89, 1, -74, -30, -39, -13, 18, 10, 41, 27, -48, -55, -36, 26, 4, 30, -4, 22, -41, 6, 16, -29, -30, 32, 18, -20, -80, -25, -43
    0xa7a9c9d6, 0xd9e2b601, 0x290a12f3, 0xdcc9d01b, 0xfc1e041a, 0x1006d716, 0x1220e2e3, 0xd5e7b0ec,
    // -77, -17, -18, -29, 3, -58, 33, 73, 86, -5, 22, 10, 32, 7, -24, 9, 27, 26, 69, -10, -47, 76, 2, 107, 50, -18, -22, 7, 9, 11, 23, 62
    0xe3eeefb3, 0x4921c603, 0xa16fb56, 0x9e80720, 0xf6451a1b, 0x6b024cd1, 0x7eaee32, 0x3e170b09,
    // -40, 4, 38, -8, 1, -15, -56, -23, 5, -13, -38, 8, 0, 35, -67, 5, 5, 42, -40, 40, -1, -20, 9, -11, -21, -21, 12, 13, -12, 127, -32, 76
    0xf82604d8, 0xe9c8f101, 0x8daf305, 0x5bd2300, 0x28d82a05, 0xf509ecff, 0xd0cebeb, 0x4ce07ff4,
    // -3, -11, -6, 3, 1, -26, -16, 9, -117, 2, 56, -28, 90, -1, -17, 31, 45, 40, -56, -14, 2, 41, 4, 13, 27, 65, -5, 21, -9, -16, -3, 0
    0x3faf5fd, 0x9f0e601, 0xe438028b, 0x1fefff5a, 0xf2c8282d, 0xd042902, 0x15fb411b, 0xfdf0f7,
    // 23, 9, 43, -20, 29, -19, -1, 3, -7, -10, -8, 36, 68, -7, -30, -15, 11, -49, 18, 48, 30, -25, -65, -22, -15, -31, 21, -49, -69, -16, 108, -20
    0xec2b0917, 0x3ffed1d, 0x24f8f6f9, 0xf1e2f944, 0x3012cf0b, 0xeabfe71e, 0xcf15e1f1, 0xec6cf0bb,
    // -5, -42, 26, 17, 33, -23, 62, 9, 12, -39, -23, 8, 6, 57, -30, 19, 27, 79, -3, 41, -28, 18, -15, -5, 19, 2, -6, 47, 12, 5, 63, 7
    0x111ad6fb, 0x93ee921, 0x8e9d90c, 0x13e23906, 0x29fd4f1b, 0xfbf112e4, 0x2ffa0213, 0x73f050c,
    // 49, -42, -5, 39, 2, -42, 29, -74, 36, -45, 17, 51, 38, 21, -37, -48, 19, -9, -27, 13, 4, 0, -30, 31, -23, 2, 14, -29, -29, 24, 19, -9
    0x27fbd631, 0xb61dd602, 0x3311d324, 0xd0db1526, 0xde5f713, 0x1fe20004, 0xe30e02e9, 0xf71318e3,
    // 8, 10, 20, -45, -20, 5, 28, 18, -14, -7, -35, 119, -12, -57, 12, -7, 23, 12, 7, -3, -35, -76, 17, 6, -3, 1, 51, 9, -32, -53, 16, -66
    0xd3140a08, 0x121c05ec, 0x77ddf9f2, 0xf90cc7f4, 0xfd070c17, 0x611b4dd, 0x93301fd, 0xbe10cbe0,
    // 64, 6, 31, -6, 6, -7, -18, -34, -7, -23, -15, 20, 21, -11, -23, 8, -80, 13, 26, 3, -10, -9, -68, -25, 0, -16, 50, 3, 28, 10, 31, 6
    0xfa1f0640, 0xdeeef906, 0x14f1e9f9, 0x8e9f515, 0x31a0db0, 0xe7bcf7f6, 0x332f000, 0x61f0a1c,
    // -20, -29, -16, 36, -23, 5, 19, -39, -4, 1, -8, 31, 9, 55, -26, 11, 12, -13, -19, -25, 22, 1, 52, 5, -6, 5, 26, 7, -9, 58, 15, -11
    0x24f0e3ec, 0xd91305e9, 0x1ff801fc, 0xbe63709, 0xe7edf30c, 0x5340116, 0x71a05fa, 0xf50f3af7,
    // -18, 0, -30, -3, 24, -7, -5, -5, 26, -91, -28, -26, -68, 16, -13, 16, -20, 2, 11, 16, -12, 89, 61, -27, -8, 26, -3, 26, 67, -1, -12, -44
    0xfde200ee, 0xfbfbf918, 0xe6e4a51a, 0x10f310bc, 0x100b02ec, 0xe53d59f4, 0x1afd1af8, 0xd4f4ff43,
    // -27, -7, 69, -9, -14, -5, 10, -48, 18, -43, -17, -85, 9, -31, -25, 2, -69, 9, -36, -35, -75, -73, -28, -22, 10, 1, -14, 4, -36, 6, 69, 32
    0xf745f9e5, 0xd00afbf2, 0xabefd512, 0x2e7e109, 0xdddc09bb, 0xeae4b7b5, 0x4f2010a, 0x204506dc,
    // 32, 13, 16, -11, 98, -4, 5, -19, -18, -68, -15, 1, 2, 21, -12, -33, -101, -8, -6, 6, 12, -24, 1, 37, -1, 2, 45, -7, -9, 5, 20, 1
    0xf5100d20, 0xed05fc62, 0x1f1bcee, 0xdff41502, 0x6faf89b, 0x2501e80c, 0xf92d02ff, 0x11405f7,
    // 10, -6, -9, 14, -1, 26, 21, 14, -5, -92, 19, 14, 9, 13, 9, -3, 21, -24, 7, -23, -42, 31, -16, 4, -39, -10, -4, 37, 5, -4, -32, -43
    0xef7fa0a, 0xe151aff, 0xe13a4fb, 0xfd090d09, 0xe907e815, 0x4f01fd6, 0x25fcf6d9, 0xd5e0fc05,
    // 47, 18, -3, -12, 85, 17, 36, -5, 14, -3, -5, 9, -6, -6, -2, -5, 2, -12, -10, 29, -29, -27, 44, -2, -9, 20, 31, -43, -60, -6, 53, 15
    0xf4fd122f, 0xfb241155, 0x9fbfd0e, 0xfbfefafa, 0x1df6f402, 0xfe2ce5e3, 0xd51f14f7, 0xf35fac4,
    // 15, -10, 14, 59, -32, 12, -36, -36, -1, 9, -8, 46, 9, 53, -7, -42, -77, -4, 26, 33, -22, -39, -22, -9, 0, 6, 57, 50, 17, 66, 8, -24
    0x3b0ef60f, 0xdcdc0ce0, 0x2ef809ff, 0xd6f93509, 0x211afcb3, 0xf7ead9ea, 0x32390600, 0xe8084211,
    // 96, -22, 18, -42, -23, -63, -1, -29, 5, 71, -19, 25, 66, 3, -11, 18, -1, -27, 7, 35, -47, 11, -35, 4, 2, 20, 60, -64, -31, 0, -9, 4
    0xd612ea60, 0xe3ffc1e9, 0x19ed4705, 0x12f50342, 0x2307e5ff, 0x4dd0bd1, 0xc03c1402, 0x4f700e1,
    // -17, -30, 7, 42, -67, 3, -10, -50, 16, 43, 10, 92, 0, 45, -17, -16, -13, 6, -4, 40, 64, -27, 50, -4, 0, 3, 74, -17, -8, 6, -3, -89
    0x2a07e2ef, 0xcef603bd, 0x5c0a2b10, 0xf0ef2d00, 0x28fc06f3, 0xfc32e540, 0xef4a0300, 0xa7fd06f8,
    // -11, -41, -35, 51, -46, 9, -31, 9, 11, 40, 5, -14, -32, 9, -2, -15, 43, 22, -24, -18, 7, 14, -25, 24, -13, -42, -78, 24, -51, 14, 39, 19
    0x33ddd7f5, 0x9e109d2, 0xf205280b, 0xf1fe09e0, 0xeee8162b, 0x18e70e07, 0x18b2d6f3, 0x13270ecd,
    // 2, 33, 33, -51, -3, 12, -19, 77, -1, -27, 26, -17, 15, -62, 12, 4, -30, -7, -5, -71, -31, 54, 28, 5, -14, 11, -10, -37, -10, -53, 61, 62
    0xcd212102, 0x4ded0cfd, 0xef1ae5ff, 0x40cc20f, 0xb9fbf9e2, 0x51c36e1, 0xdbf60bf2, 0x3e3dcbf6,
    // 7, -22, 14, 1, 84, 14, -23, 6, -14, 23, 9, -44, -13, -33, -6, 30, 56, -5, -19, -28, 13, 72, 28, -12, 1, -42, 88, -9, 85, 10, 98, -12
    0x10eea07, 0x6e90e54, 0xd40917f2, 0x1efadff3, 0xe4edfb38, 0xf41c480d, 0xf758d601, 0xf4620a55,
    // -8, 40, 24, 58, 28, 0, -15, 56, -18, 41, -22, -18, -9, -16, 23, 3, 24, 18, 7, 7, -39, 25, -80, -12, -4, 7, 1, 62, 11, 5, 97, 63
    0x3a1828f8, 0x38f1001c, 0xeeea29ee, 0x317f0f7, 0x7071218, 0xf4b019d9, 0x3e0107fc, 0x3f61050b,
    // -56, 16, -2, -3, 31, 52, 1, 1, -10, -50, -15, -9, -3, 51, -6, 1, 24, -30, -1, -16, -51, -12, 77, 89, -28, 24, 48, -35, 6, -10, 16, -28
    0xfdfe10c8, 0x101341f, 0xf7f1cef6, 0x1fa33fd, 0xf0ffe218, 0x594df4cd, 0xdd3018e4, 0xe410f606,
    // -5, -25, -40, 52, 66, 8, -12, 3, 1, -15, -55, 20, -33, -103, -12, -16, -33, 29, 11, 8, 0, -55, -53, -42, -13, 3, 42, 20, 11, -58, -33, 48
    0x34d8e7fb, 0x3f40842, 0x14c9f101, 0xf0f499df, 0x80b1ddf, 0xd6cbc900, 0x142a03f3, 0x30dfc60b,
    // 29, 20, -13, -50, 36, -13, 9, -4, -20, 50, -24, 5, -3, -18, -12, 26, 13, -43, -9, 0, 17, 91, -58, 1, 11, -4, 14, -18, 60, 0, 63, -43
    0xcef3141d, 0xfc09f324, 0x5e832ec, 0x1af4eefd, 0xf7d50d, 0x1c65b11, 0xee0efc0b, 0xd53f003c,
    // -16, -36, 66, 19, -7, -8, 24, -43, -13, -19, -21, 15, 27, -62, -19, 0, 22, 9, -11, 72, 19, 23, -14, -6, -15, -6, 9, -27, 3, -12, -3, 6
    0x1342dcf0, 0xd518f8f9, 0xfebedf3, 0xedc21b, 0x48f50916, 0xfaf21713, 0xe509faf1, 0x6fdf403,
    // -51, 15, -21, 33, -44, -35, 31, 24, -40, 29, 39, -7, -82, 30, -45, -22, 16, 14, -40, -71, 6, -11, 43, -13, 56, -19, 62, 13, -104, 1, -34, -3
    0x21eb0fcd, 0x181fddd4, 0xf9271dd8, 0xead31eae, 0xb9d80e10, 0xf32bf506, 0xd3eed38, 0xfdde0198,
    // -8, 27, 36, 15, 22, -5, 35, -15, -7, 12, -57, 49, -30, -15, 27, -8, 16, -2, 28, 2, 17, 61, -35, -8, 1, -27, 3, -11, 33, -55, -46, 17
    0xf241bf8, 0xf123fb16, 0x31c70cf9, 0xf81bf1e2, 0x21cfe10, 0xf8dd3d11, 0xf503e501, 0x11d2c921,
    // -10, -20, -6, 24, -4, -17, -16, -17, 7, 24, -22, -16, -40, 16, -4, 4, 49, 22, 12, 10, 7, -40, 44, -35, -15, 18, -53, 26, 110, 8, 54, 33
    0x18faecf6, 0xeff0effc, 0xf0ea1807, 0x4fc10d8, 0xa0c1631, 0xdd2cd807, 0x1acb12f1, 0x2136086e,
    // -28, -4, 32, -13, -18, 14, 6, 32, -17, 12, -65, 5, -2, 2, 37, -33, 80, 77, -13, -6, 7, 45, 40, -13, -17, 0, -38, -11, 0, 15, 31, 23
    0xf320fce4, 0x20060eee, 0x5bf0cef, 0xdf2502fe, 0xfaf34d50, 0xf3282d07, 0xf5da00ef, 0x171f0f00,
    // 46, -19, 34, 46, -15, -35, -13, -22, 2, 99, -12, 13, -32, 15, -21, -27, 14, -6, -3, -38, 29, -22, 87, -34, -46, 19, -44, -18, 28, 1, -18, -17
    0x2e22ed2e, 0xeaf3ddf1, 0xdf46302, 0xe5eb0fe0, 0xdafdfa0e, 0xde57ea1d, 0xeed413d2, 0xefee011c,
    // -9, 2, -42, -26, 42, -3, -19, 61, -7, 51, 23, 3, 9, 6, -7, 34, -2, -9, -17, -2, 25, 21, -97, 2, 7, 2, 19, 40, 47, -3, 44, -18
    0xe6d602f7, 0x3dedfd2a, 0x31733f9, 0x22f90609, 0xfeeff7fe, 0x29f1519, 0x28130207, 0xee2cfd2f,
    // 1, 1, 2, -23, -4, -34, -7, 8, 46, 14, 26, -8, -92, 25, -1, 2, 0, 17, 22, 24, -16, -30, 31, 1, -7, 1, -15, 43, -35, -13, -14, 11
    0xe9020101, 0x8f9defc, 0xf81a0e2e, 0x2ff19a4, 0x18161100, 0x11fe2f0, 0x2bf101f9, 0xbf2f3dd,
    // 1, 6, -15, 1, 1, -11, -11, -1, 17, -1, 0, -32, 10, 22, 1, -6, -22, -1, -18, -36, 46, 20, 4, 23, 2, 15, -44, 26, 19, -27, 2, -25
    0x1f10601, 0xfff5f501, 0xe000ff11, 0xfa01160a, 0xdceeffea, 0x1704142e, 0x1ad40f02, 0xe702e513,
    // 33, 26, 30, 9, 23, -3, -8, 33, 5, 4, -8, -21, 96, -14, 2, -6, -37, 12, -5, -42, -13, 15, -1, -10, 15, -3, -40, -15, 12, -2, -89, 21
    0x91e1a21, 0x21f8fd17, 0xebf80405, 0xfa02f260, 0xd6fb0cdb, 0xf6ff0ff3, 0xf1d8fd0f, 0x15a7fe0c,
    // -15, 1, -16, -9, -74, 5, 9, -50, 7, -66, 18, 2, 2, -30, -18, -3, 5, -19, 4, 14, -90, -8, -2, -14, 6, 3, -4, 93, -9, 41, 95, -54
    0xf7f001f1, 0xce0905b6, 0x212be07, 0xfdeee202, 0xe04ed05, 0xf2fef8a6, 0x5dfc0306, 0xca5f29f7,
};
static const uint embedded_decoder3_ResidualBlock_1_body_pw_contract_bias_dwords[16] = {
    // -4.12e-05, 0.0001911, -6.35e-05, -8.45e-05, -0.0002289, -5.496e-05, 7.5e-06, 3.94e-05, 0.0003128, 0.0001056, 1.395e-05, 0.0001309, -5.317e-05, 0.0004637, -0.0002892, 5.61e-05
    0xa4382b3, 0x858a8429, 0x839a8b80, 0x295007e, 0x6ec0d20, 0x84a00ea, 0xf99837c, 0x3ad8cbd,
    // 4.66e-05, 0.0002329, -0.0002959, -0.0001316, 0.0001262, 0.0002708, 4.256e-05, 0.0003428, -5.25e-05, 0.000328, -4.506e-05, 0.00011, 0.000181, -0.0001024, -0.0001326, 7.707e-05
    0xba2030e, 0x88508cd9, 0xc700823, 0xd9e02ca, 0xd608371, 0x73582f4, 0x86b609ee, 0x50d8858,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass10(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped = {
        uint3(960, 540, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 32), // threadGroupSliceSize
        uint3(960, 540, 32), // storageSize
        uint3(32, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        66355200, // threadGroupStorageByteOffset
        storage_FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped };
    
    const ConstantBufferStorage<576> storage_embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.006604361813515425, storage_embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = { embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004052944015711546, storage_embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_decoder3_ResidualBlock_1_body_pw_expand_bias = { embedded_decoder3_ResidualBlock_1_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_decoder3_ResidualBlock_1_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_1_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.00404848949983716, storage_embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder3_ResidualBlock_1_body_pw_contract_bias = { embedded_decoder3_ResidualBlock_1_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder3_ResidualBlock_1_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_1_body_pw_contract_bias };
    
    // /decoder3/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_20 = uint3(960, 540, 32);
    const int3 groupStart_slice_20 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_20 = uint3(64, 1, 32);
    const uint3 storageSize_slice_20 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_20 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_20 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_20 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_20 = dot(groupStart_slice_20, tensorByteStrides_slice_20);
    const RWBufferStorage storage_slice_20 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_20 = { logicalSize_slice_20, groupStart_slice_20, groupSize_slice_20, storageSize_slice_20, tensorByteStrides_slice_20, paddingBegin_slice_20, paddingEnd_slice_20, threadGroupByteOffsetInTensor_slice_20 + 33177600, storage_slice_20 };
    // Fusedquantized_/decoder3/ResidualBlock_1/residual_func/Concat_quantized_/decoder3/ResidualBlock_1/body/spatial_mixing/partial_conv/Conv_quantized_/decoder3/ResidualBlock_1/body/spatial_mixing/Concat_quantized_/decoder3/ResidualBlock_1/body/pw_expand/Conv_/decoder3/ResidualBlock_1/body/pw_expand_act/Relu_quantized_/decoder3/ResidualBlock_1/body/pw_contract/Conv_/decoder3/ResidualBlock_1/Add (32, 540, 960), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,) -> (32, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<32, 1>(0.021412165835499763, 0.03075222671031952, 0.022227706387639046, 0.0215474721044302, 0.02673504687845707, FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped, embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias, embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_1_body_pw_expand_bias, embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_1_body_pw_contract_bias, slice_20, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_10
#ifdef MLSR_PASS_10_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass10_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /decoder3/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_21 = uint3(960, 540, 32);
    const int3 groupStart_slice_21 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_21 = uint3(32, 1, 32);
    const uint3 storageSize_slice_21 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_21 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_21 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_21 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_21 = dot(groupStart_slice_21, tensorByteStrides_slice_21);
    const RWBufferStorage storage_slice_21 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_21 = { logicalSize_slice_21, groupStart_slice_21, groupSize_slice_21, storageSize_slice_21, tensorByteStrides_slice_21, paddingBegin_slice_21, paddingEnd_slice_21, threadGroupByteOffsetInTensor_slice_21 + 33177600, storage_slice_21 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_21, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_10_POST


#ifdef MLSR_PASS_11
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FNB_CT2D_ADD.hlsli"

static const uint embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // -13, -7, -8, -9, -5, 26, 1, -8, 13, -34, 19, -2, 3, 11, 21, -17, 23, -12, 61, 24, 32, 8, 4, -22, 10, -29, 5, 31, 0, -40, -11, 25
    0xf7f8f9f3, 0xf8011afb, 0xfe13de0d, 0xef150b03, 0x183df417, 0xea040820, 0x1f05e30a, 0x19f5d800,
    // 1, -14, 5, 9, 3, -2, -7, -8, 16, -20, -10, 16, 5, -13, 13, 30, -1, 20, 90, 77, 17, -55, -9, 33, -1, 24, 63, -16, 48, -19, 34, 94
    0x905f201, 0xf8f9fe03, 0x10f6ec10, 0x1e0df305, 0x4d5a14ff, 0x21f7c911, 0xf03f18ff, 0x5e22ed30,
    // -14, 72, -55, 33, -18, 11, 40, -11, 6, 68, 21, -56, -53, 11, 18, -26, 13, 16, -1, -9, 2, -40, 16, 17, 5, -26, 43, -25, 2, -17, 23, 38
    0x21c948f2, 0xf5280bee, 0xc8154406, 0xe6120bcb, 0xf7ff100d, 0x1110d802, 0xe72be605, 0x2617ef02,
    // 5, -1, -19, -27, -9, -16, -8, -4, 12, -7, 7, 14, -16, -2, 10, 11, -11, 8, -22, -17, -1, -36, -4, -8, 22, -7, 46, -32, 0, 30, 25, 33
    0xe5edff05, 0xfcf8f0f7, 0xe07f90c, 0xb0afef0, 0xefea08f5, 0xf8fcdcff, 0xe02ef916, 0x21191e00,
    // -9, 0, 14, 22, -22, -3, -13, -10, -8, 12, -3, 13, 8, 7, 12, -27, 7, 31, 24, 14, 3, 18, -12, -8, -13, 28, 13, -9, 1, -4, -9, -2
    0x160e00f7, 0xf6f3fdea, 0xdfd0cf8, 0xe50c0708, 0xe181f07, 0xf8f41203, 0xf70d1cf3, 0xfef7fc01,
    // 14, -7, -8, 6, -25, 12, 35, 78, 52, -35, 31, -9, -4, -17, 28, -51, 6, -49, 40, -8, 13, 1, -6, -36, -24, 5, 13, -10, -14, 8, -20, 18
    0x6f8f90e, 0x4e230ce7, 0xf71fdd34, 0xcd1ceffc, 0xf828cf06, 0xdcfa010d, 0xf60d05e8, 0x12ec08f2,
    // -21, 11, -16, 4, 9, 20, 15, 8, -9, -4, -12, 0, 5, -10, -22, 0, 71, -9, -2, 28, -48, -10, -71, -50, 56, -46, -15, 47, 30, 29, 67, 46
    0x4f00beb, 0x80f1409, 0xf4fcf7, 0xeaf605, 0x1cfef747, 0xceb9f6d0, 0x2ff1d238, 0x2e431d1e,
    // 27, 60, 20, -9, -38, -37, 32, 66, 20, -31, 102, 7, 29, -9, 39, 37, -25, 0, 6, -12, 4, 3, 15, -32, -4, -14, -6, 9, -4, -8, 25, -4
    0xf7143c1b, 0x4220dbda, 0x766e114, 0x2527f71d, 0xf40600e7, 0xe00f0304, 0x9faf2fc, 0xfc19f8fc,
    // -11, 3, 18, 36, 11, 12, 10, 37, -20, 10, -27, -54, -2, 6, 12, -12, -13, 1, 18, 10, 14, -15, -1, -5, -3, 15, -19, -9, 18, -5, -6, -2
    0x241203f5, 0x250a0c0b, 0xcae50aec, 0xf40c06fe, 0xa1201f3, 0xfbfff10e, 0xf7ed0ffd, 0xfefafb12,
    // 10, -5, 12, 8, 29, 11, 6, -19, 1, -34, 22, 21, -35, -19, 55, -30, 3, -17, 3, -24, 30, 21, 6, -35, 1, -2, -34, -36, 10, 11, -8, 13
    0x80cfb0a, 0xed060b1d, 0x1516de01, 0xe237eddd, 0xe803ef03, 0xdd06151e, 0xdcdefe01, 0xdf80b0a,
    // 13, 7, 23, -12, -10, 20, -15, 9, -28, -10, -22, -22, 2, -9, -25, 37, -6, -21, -21, -38, -9, 6, 33, -1, 26, 27, -70, -41, -8, 34, 23, -54
    0xf417070d, 0x9f114f6, 0xeaeaf6e4, 0x25e7f702, 0xdaebebfa, 0xff2106f7, 0xd7ba1b1a, 0xca1722f8,
    // 29, 61, 41, 119, 45, 9, -5, 44, -20, -45, 17, 32, -83, -73, 27, 96, -1, 20, -38, -7, 43, -11, -1, -9, -6, 24, 3, -19, 12, -4, 10, 15
    0x77293d1d, 0x2cfb092d, 0x2011d3ec, 0x601bb7ad, 0xf9da14ff, 0xf7fff52b, 0xed0318fa, 0xf0afc0c,
    // 3, -33, 29, 50, -7, -12, -24, -17, 14, 29, -5, 1, -5, -1, -10, 11, 6, 3, -27, -17, 21, -49, 4, -14, 17, 42, 7, -27, 28, 24, 19, 4
    0x321ddf03, 0xefe8f4f9, 0x1fb1d0e, 0xbf6fffb, 0xefe50306, 0xf204cf15, 0xe5072a11, 0x413181c,
    // 8, -5, -31, -16, -22, -25, -7, 23, 29, -8, 5, -16, -20, -15, -26, 31, -5, -4, 12, 10, 4, -8, -15, -3, 1, -24, 32, 30, -10, -21, 4, 11
    0xf0e1fb08, 0x17f9e7ea, 0xf005f81d, 0x1fe6f1ec, 0xa0cfcfb, 0xfdf1f804, 0x1e20e801, 0xb04ebf6,
    // -4, 3, -31, 9, -42, -22, -20, -19, 19, 11, 4, -16, 7, 25, 14, -31, 3, 49, 20, 7, -22, 4, -15, -27, 21, -22, -25, 17, -4, 2, -2, 0
    0x9e103fc, 0xedecead6, 0xf0040b13, 0xe10e1907, 0x7143103, 0xe5f104ea, 0x11e7ea15, 0xfe02fc,
    // -7, -6, 29, -16, -49, -44, -16, 46, 32, 12, -24, -9, 11, 10, 18, 18, 12, 34, 26, -106, 93, 24, 92, -82, 33, -42, -71, 12, -18, 22, 61, 60
    0xf01dfaf9, 0x2ef0d4cf, 0xf7e80c20, 0x12120a0b, 0x961a220c, 0xae5c185d, 0xcb9d621, 0x3c3d16ee,
    // -1, -40, -38, 66, 19, 16, -22, -43, 35, 27, -47, 13, -4, -18, -21, -27, -15, 7, 14, 2, -6, 20, -21, -27, 22, -10, 15, 21, -2, 5, -10, -11
    0x42dad8ff, 0xd5ea1013, 0xdd11b23, 0xe5ebeefc, 0x20e07f1, 0xe5eb14fa, 0x150ff616, 0xf5f605fe,
    // -22, -15, 20, 35, -4, -1, -12, 11, 0, 1, -13, -10, -21, -7, 14, -13, 2, 14, 5, -12, -10, -21, -8, -10, 13, -18, 13, 2, 5, -1, 18, -7
    0x2314f1ea, 0xbf4fffc, 0xf6f30100, 0xf30ef9eb, 0xf4050e02, 0xf6f8ebf6, 0x20dee0d, 0xf912ff05,
    // 9, -30, -3, -17, -14, -4, 19, 13, 30, 1, -10, -10, 10, 10, -14, 3, -19, -40, 32, 24, 21, -2, -10, -37, -17, -23, 4, 27, -4, -24, -9, 31
    0xeffde209, 0xd13fcf2, 0xf6f6011e, 0x3f20a0a, 0x1820d8ed, 0xdbf6fe15, 0x1b04e9ef, 0x1ff7e8fc,
    // -7, -13, -3, -33, 9, -9, 8, -12, 5, 3, 4, -20, 27, 20, 3, -16, 18, -24, 43, -5, -29, -15, 35, -41, -20, -41, 1, 59, -38, -30, 27, -25
    0xdffdf3f9, 0xf408f709, 0xec040305, 0xf003141b, 0xfb2be812, 0xd723f1e3, 0x3b01d7ec, 0xe71be2da,
    // 27, 92, 22, -28, -28, 0, 42, 10, -34, 15, -27, 19, 115, -17, -2, -35, 30, -6, -7, 57, -34, 35, -5, 11, 45, -32, 9, 58, 4, -26, 48, 45
    0xe4165c1b, 0xa2a00e4, 0x13e50fde, 0xddfeef73, 0x39f9fa1e, 0xbfb23de, 0x3a09e02d, 0x2d30e604,
    // -8, -12, 10, -27, -10, 6, 14, 18, 30, 9, -3, -27, 4, 16, 1, 4, -24, -47, -2, 2, 31, -27, -10, -27, 23, -20, 66, 4, -30, -23, 6, 62
    0xe50af4f8, 0x120e06f6, 0xe5fd091e, 0x4011004, 0x2fed1e8, 0xe5f6e51f, 0x442ec17, 0x3e06e9e2,
    // -15, 14, 22, -17, 27, 15, 2, -32, -5, 23, -4, -28, 4, 11, 22, -7, 16, 41, -1, -25, -21, 27, 1, 8, 10, 20, -27, -40, 22, 9, -42, 25
    0xef160ef1, 0xe0020f1b, 0xe4fc17fb, 0xf9160b04, 0xe7ff2910, 0x8011beb, 0xd8e5140a, 0x19d60916,
    // 15, 28, -3, 2, 7, -7, 18, 50, 25, -13, -15, 17, -5, -39, -7, -6, 3, 10, -33, -16, 2, -11, 17, 14, 34, 13, -5, -5, 29, 9, -6, -30
    0x2fd1c0f, 0x3212f907, 0x11f1f319, 0xfaf9d9fb, 0xf0df0a03, 0xe11f502, 0xfbfb0d22, 0xe2fa091d,
    // 13, 48, -1, 22, 51, 37, -7, -34, -25, -31, 25, 5, 5, -17, -13, 12, -76, -50, 15, -33, -6, -42, 21, 13, -11, -48, 7, -18, 9, -8, 46, 8
    0x16ff300d, 0xdef92533, 0x519e1e7, 0xcf3ef05, 0xdf0fceb4, 0xd15d6fa, 0xee07d0f5, 0x82ef809,
    // 14, -7, -50, 69, 15, 36, 14, -11, 61, -2, -1, 17, 13, -11, 6, 12, 9, 45, -18, -33, 10, 9, 4, -8, -22, -34, -18, -5, 11, 11, 18, -25
    0x45cef90e, 0xf50e240f, 0x11fffe3d, 0xc06f50d, 0xdfee2d09, 0xf804090a, 0xfbeedeea, 0xe7120b0b,
    // 25, 44, 47, 31, 26, 13, 5, 25, -28, -24, -72, 24, -21, -23, -12, -44, 9, 14, 14, 18, 30, 6, 3, -18, -18, 18, -45, -20, 48, 26, 29, -30
    0x1f2f2c19, 0x19050d1a, 0x18b8e8e4, 0xd4f4e9eb, 0x120e0e09, 0xee03061e, 0xecd312ee, 0xe21d1a30,
    // -3, 13, 5, 16, -18, -10, -20, 10, 13, 23, 1, 16, 13, 6, -39, 15, 8, 54, 1, 9, -4, -21, -46, -11, 14, 13, 8, 58, -32, -5, -3, 26
    0x10050dfd, 0xaecf6ee, 0x1001170d, 0xfd9060d, 0x9013608, 0xf5d2ebfc, 0x3a080d0e, 0x1afdfbe0,
    // -14, 15, -33, -2, 2, -31, -19, 10, 39, 25, 9, 19, 11, -7, -1, -12, -15, 3, -22, -23, 1, 17, -33, 24, 14, -18, 0, 23, -30, 18, -20, 0
    0xfedf0ff2, 0xaede102, 0x13091927, 0xf4fff90b, 0xe9ea03f1, 0x18df1101, 0x1700ee0e, 0xec12e2,
    // 3, -4, 55, 2, -9, -83, 34, 62, -49, -46, 70, -8, 54, 29, -4, 45, -34, 9, -34, 38, 8, 23, -12, 1, 62, 15, 24, 45, 18, 7, 13, 8
    0x237fc03, 0x3e22adf7, 0xf846d2cf, 0x2dfc1d36, 0x26de09de, 0x1f41708, 0x2d180f3e, 0x80d0712,
    // -3, 9, 6, -6, 4, 3, -10, 17, -1, -8, 8, -2, 1, 13, 7, -8, -12, 52, -17, -30, 19, -25, -41, -10, -14, -12, 25, 26, 10, 31, 21, 12
    0xfa0609fd, 0x11f60304, 0xfe08f8ff, 0xf8070d01, 0xe2ef34f4, 0xf6d7e713, 0x1a19f4f2, 0xc151f0a,
    // -3, 23, 21, 39, 22, 4, -25, -17, -4, 19, -46, 19, 16, 23, 14, -33, -6, -21, -16, 5, 5, -3, 7, 16, -8, 0, 8, 3, -12, 12, 13, -18
    0x271517fd, 0xefe70416, 0x13d213fc, 0xdf0e1710, 0x5f0ebfa, 0x1007fd05, 0x30800f8, 0xee0d0cf4,
    // -36, -63, -11, -28, 17, 6, 11, -9, -24, -8, -9, -15, 6, 14, -4, 26, -4, -12, -15, -14, 1, 3, 0, 13, -4, 2, -6, -2, 14, 22, 2, -9
    0xe4f5c1dc, 0xf70b0611, 0xf1f7f8e8, 0x1afc0e06, 0xf2f1f4fc, 0xd000301, 0xfefa02fc, 0xf702160e,
    // 11, -35, 42, -11, -12, -42, 23, 57, -6, -2, 7, -25, 22, 4, 15, 37, 13, 25, -61, -22, 47, 26, -58, -91, 13, 36, -31, 20, -83, 65, -37, 23
    0xf52add0b, 0x3917d6f4, 0xe707fefa, 0x250f0416, 0xeac3190d, 0xa5c61a2f, 0x14e1240d, 0x17db41ad,
    // 1, 6, -39, 45, 21, 9, -10, 36, 32, -8, 46, 29, 30, -28, 36, 62, -2, -6, -18, -8, -1, 12, 9, 13, 9, 3, -9, 2, 7, 3, 2, -5
    0x2dd90601, 0x24f60915, 0x1d2ef820, 0x3e24e41e, 0xf8eefafe, 0xd090cff, 0x2f70309, 0xfb020307,
    // -4, 15, -5, -4, 0, -5, -14, 40, -18, -22, 0, 14, -20, -26, -17, 31, -17, 4, 13, 4, 28, 7, -2, 2, -32, 29, -30, -21, 25, 4, 10, -21
    0xfcfb0ffc, 0x28f2fb00, 0xe00eaee, 0x1fefe6ec, 0x40d04ef, 0x2fe071c, 0xebe21de0, 0xeb0a0419,
    // -14, 23, -9, -3, 8, 2, -3, 18, 8, -18, 6, 23, -1, -20, -11, 21, -40, 20, 0, 31, -14, -17, 10, 71, 17, -9, -14, 54, 20, -39, -31, 5
    0xfdf717f2, 0x12fd0208, 0x1706ee08, 0x15f5ecff, 0x1f0014d8, 0x470aeff2, 0x36f2f711, 0x5e1d914,
    // -24, -14, -10, 21, -5, -8, 3, 15, 21, -6, -8, 9, 10, -17, -15, -5, -61, 16, -15, -25, 15, 23, -1, 37, 19, -22, -15, -3, 10, -17, -11, 10
    0x15f6f2e8, 0xf03f8fb, 0x9f8fa15, 0xfbf1ef0a, 0xe7f110c3, 0x25ff170f, 0xfdf1ea13, 0xaf5ef0a,
    // 15, 43, -10, 5, -2, -62, 34, -93, -22, 53, -54, 54, -51, -67, -57, -48, -54, 15, 6, 32, 15, -18, 14, 31, -11, -9, 6, 32, 3, -25, 19, -30
    0x5f62b0f, 0xa322c2fe, 0x36ca35ea, 0xd0c7bdcd, 0x20060fca, 0x1f0eee0f, 0x2006f7f5, 0xe213e703,
    // -23, 19, 22, -4, 16, 25, 1, 1, -10, -32, -5, 19, -10, 7, 2, 5, -35, 28, 22, 18, 0, 33, 27, 6, -2, -7, -18, 52, -12, -19, 10, -22
    0xfc1613e9, 0x1011910, 0x13fbe0f6, 0x50207f6, 0x12161cdd, 0x61b2100, 0x34eef9fe, 0xea0aedf4,
    // -2, -8, 1, 15, 10, -12, -5, 6, 8, -15, 6, 12, -26, -8, -6, -26, -12, 26, -8, -15, 4, 20, 4, -1, 1, -8, 9, 22, -1, -4, -8, 21
    0xf01f8fe, 0x6fbf40a, 0xc06f108, 0xe6faf8e6, 0xf1f81af4, 0xff041404, 0x1609f801, 0x15f8fcff,
    // -15, 24, -21, -16, -18, -5, 15, 7, 13, 17, -11, -9, 59, -42, -22, 12, -9, 6, -17, 3, -18, 0, 25, 19, 43, 13, -11, -1, 39, -15, -21, -9
    0xf0eb18f1, 0x70ffbee, 0xf7f5110d, 0xcead63b, 0x3ef06f7, 0x131900ee, 0xfff50d2b, 0xf7ebf127,
    // -15, 12, -1, -40, 4, 25, -3, -6, 2, -17, 15, -31, 70, -15, -23, 11, 65, -20, 7, 78, -33, 37, -27, -28, -16, -73, 78, -46, -18, 15, 20, -24
    0xd8ff0cf1, 0xfafd1904, 0xe10fef02, 0xbe9f146, 0x4e07ec41, 0xe4e525df, 0xd24eb7f0, 0xe8140fee,
    // -39, -33, -25, 32, 18, 19, 9, -62, 27, 15, -18, 10, 60, -22, 16, -64, -36, 1, 24, -20, 17, 9, 21, -20, -17, -16, -3, -3, 7, -18, 13, 14
    0x20e7dfd9, 0xc2091312, 0xaee0f1b, 0xc010ea3c, 0xec1801dc, 0xec150911, 0xfdfdf0ef, 0xe0dee07,
    // -47, 2, -13, -43, 16, 1, 37, -19, -43, -27, -17, -43, 42, -51, 48, -9, -41, -7, 5, 17, 22, 16, 37, 9, 1, -20, -2, 7, 9, -31, 30, -15
    0xd5f302d1, 0xed250110, 0xd5efe5d5, 0xf730cd2a, 0x1105f9d7, 0x9251016, 0x7feec01, 0xf11ee109,
    // -3, 24, 31, -5, 5, 8, -8, -25, -38, -7, -21, -33, -15, -2, 24, -3, -27, 44, 31, -42, 25, 26, -13, -11, -17, -48, -10, -41, -44, -41, 20, 8
    0xfb1f18fd, 0xe7f80805, 0xdfebf9da, 0xfd18fef1, 0xd61f2ce5, 0xf5f31a19, 0xd7f6d0ef, 0x814d7d4,
    // 4, 36, -17, -34, -24, -4, -11, 3, 15, -36, -19, -21, -6, -30, 0, 36, -36, -14, 26, 39, 73, -29, -10, -47, -27, -8, 16, -34, -19, -11, 32, -58
    0xdeef2404, 0x3f5fce8, 0xebeddc0f, 0x2400e2fa, 0x271af2dc, 0xd1f6e349, 0xde10f8e5, 0xc620f5ed,
    // 14, 3, 47, -13, 38, 7, -20, -7, 40, -26, 35, -43, 33, 6, -34, -18, -9, 7, -43, -16, -2, -10, -4, 43, 58, -35, -25, -48, 1, -45, -55, 92
    0xf32f030e, 0xf9ec0726, 0xd523e628, 0xeede0621, 0xf0d507f7, 0x2bfcf6fe, 0xd0e7dd3a, 0x5cc9d301,
    // 8, -18, -16, 47, 3, -53, -16, -33, -17, 4, -1, -10, 9, 8, 18, -65, -4, -29, -7, 69, 4, -84, 0, -3, 35, -7, -15, -8, 6, -40, -50, -21
    0x2ff0ee08, 0xdff0cb03, 0xf6ff04ef, 0xbf120809, 0x45f9e3fc, 0xfd00ac04, 0xf8f1f923, 0xebced806,
    // 14, -24, -23, 10, -35, -50, 2, 17, 21, 15, -17, -36, 33, -10, -35, 23, 5, -11, 31, -14, -22, 15, -5, -13, -11, 34, 12, -20, 0, -29, -17, 32
    0xae9e80e, 0x1102cedd, 0xdcef0f15, 0x17ddf621, 0xf21ff505, 0xf3fb0fea, 0xec0c22f5, 0x20efe300,
    // 73, 40, 28, -16, -33, 11, -16, 11, 18, 28, 24, 31, -37, -66, 20, 3, 17, -21, -18, -17, 0, -2, -2, -14, 24, 26, 14, 8, 0, -42, 18, -2
    0xf01c2849, 0xbf00bdf, 0x1f181c12, 0x314bedb, 0xefeeeb11, 0xf2fefe00, 0x80e1a18, 0xfe12d600,
    // 14, -7, -18, -15, 26, 43, -39, -25, -15, 17, 22, 8, -18, -36, 22, 2, -4, -34, 4, -19, -7, -9, 50, -57, -19, 37, 28, -23, -25, 16, 23, 19
    0xf1eef90e, 0xe7d92b1a, 0x81611f1, 0x216dcee, 0xed04defc, 0xc732f7f9, 0xe91c25ed, 0x131710e7,
    // 19, -41, -61, 20, -12, 30, -6, -8, 23, 57, 8, -1, 13, -34, 5, 23, 2, -26, 4, -9, 16, -7, 0, -15, -38, -13, 20, 11, -20, -37, 19, -24
    0x14c3d713, 0xf8fa1ef4, 0xff083917, 0x1705de0d, 0xf704e602, 0xf100f910, 0xb14f3da, 0xe813dbec,
    // 34, -11, 24, 16, 3, 5, -7, -3, -35, 15, -37, 19, -24, -52, 9, -23, 13, -54, 23, 11, 0, -6, 4, -22, -11, 27, -20, -8, 26, -10, 22, -6
    0x1018f522, 0xfdf90503, 0x13db0fdd, 0xe909cce8, 0xb17ca0d, 0xea04fa00, 0xf8ec1bf5, 0xfa16f61a,
    // -2, -5, 13, 9, -8, 1, -2, 0, 0, -12, 4, 16, 8, 7, -4, -1, 13, 34, 34, -3, 0, 6, 26, -65, -16, -22, -16, -15, -17, 4, 27, 6
    0x90dfbfe, 0xfe01f8, 0x1004f400, 0xfffc0708, 0xfd22220d, 0xbf1a0600, 0xf1f0eaf0, 0x61b04ef,
    // -8, -8, -15, 0, -13, -9, -10, 7, -4, 2, 4, -3, 11, 9, -7, 4, -29, -47, -35, -35, 7, -16, 22, -12, 30, 2, -54, -7, -51, 19, 21, -62
    0xf1f8f8, 0x7f6f7f3, 0xfd0402fc, 0x4f9090b, 0xddddd1e3, 0xf416f007, 0xf9ca021e, 0xc21513cd,
    // -42, 14, -79, 24, -32, 31, -60, -68, -7, 0, -16, -69, -43, 26, -12, -73, -4, 44, 6, -37, 25, -8, -16, -21, 12, -13, 23, -43, 14, 3, 19, 26
    0x18b10ed6, 0xbcc41fe0, 0xbbf000f9, 0xb7f41ad5, 0xdb062cfc, 0xebf0f819, 0xd517f30c, 0x1a13030e,
    // 13, -10, 9, 34, -38, 16, 19, -15, -7, -12, -15, 19, -4, 2, -11, 11, -6, 22, -6, 7, -37, 12, 46, -62, -14, -80, -34, 42, -9, -4, -43, 17
    0x2209f60d, 0xf11310da, 0x13f1f4f9, 0xbf502fc, 0x7fa16fa, 0xc22e0cdb, 0x2adeb0f2, 0x11d5fcf7,
    // -2, 10, -3, 34, -10, 5, 13, -17, -10, -3, -44, 26, 13, -2, -20, 5, -2, 8, 0, -8, -17, 1, -3, -1, 1, 24, -17, -9, 13, 21, -24, 28
    0x22fd0afe, 0xef0d05f6, 0x1ad4fdf6, 0x5ecfe0d, 0xf80008fe, 0xfffd01ef, 0xf7ef1801, 0x1ce8150d,
    // -9, -2, 9, 5, -8, 25, 33, 32, -7, -25, 8, 13, -44, -24, 29, -5, -3, 10, -23, -6, 6, 4, 14, 2, 9, 12, 14, 13, 0, 11, 22, -44
    0x509fef7, 0x202119f8, 0xd08e7f9, 0xfb1de8d4, 0xfae90afd, 0x20e0406, 0xd0e0c09, 0xd4160b00,
    // -45, -29, -23, 13, 18, 9, 13, -44, -5, -15, 6, 18, -63, -9, 18, -29, 64, 49, -12, 49, 42, -70, -98, -16, 2, 25, -9, -4, 67, 53, 37, 70
    0xde9e3d3, 0xd40d0912, 0x1206f1fb, 0xe312f7c1, 0x31f43140, 0xf09eba2a, 0xfcf71902, 0x46253543,
    // -34, -26, -13, 5, 2, 48, 1, -49, -20, -6, -42, -2, -73, 3, -34, 13, -16, -2, -16, -2, -18, 12, 16, 22, 10, 5, 20, -7, -7, 23, 4, 5
    0x5f3e6de, 0xcf013002, 0xfed6faec, 0xdde03b7, 0xfef0fef0, 0x16100cee, 0xf914050a, 0x50417f9,
    // -23, -27, 23, 8, -27, 25, 49, 3, 12, -12, 4, -10, -33, -30, -8, 22, -8, -8, -1, -18, -11, -2, 1, 4, 10, 3, 27, -7, 19, 20, 4, 14
    0x817e5e9, 0x33119e5, 0xf604f40c, 0x16f8e2df, 0xeefff8f8, 0x401fef5, 0xf91b030a, 0xe041413,
    // 14, 27, 5, -1, -33, 25, -23, -19, 19, 34, -26, -32, 34, 28, -40, 0, 40, 61, 16, 8, -7, 6, -34, 28, 42, -2, -15, 20, -16, 1, -2, -15
    0xff051b0e, 0xede919df, 0xe0e62213, 0xd81c22, 0x8103d28, 0x1cde06f9, 0x14f1fe2a, 0xf1fe01f0,
    // 4, 0, -12, -11, -1, 1, -14, -4, 17, 20, 4, -7, 17, 14, -5, -24, -4, 18, -24, 17, 16, 40, -21, -64, 6, -40, 22, 31, -33, -28, -10, -21
    0xf5f40004, 0xfcf201ff, 0xf9041411, 0xe8fb0e11, 0x11e812fc, 0xc0eb2810, 0x1f16d806, 0xebf6e4df,
    // -48, -23, -37, -1, 7, 63, 67, -87, 63, 10, -39, -16, -87, 47, -61, -74, -5, -11, 19, 3, 2, 11, -13, -26, 16, 1, 15, -7, 4, 6, 5, -18
    0xffdbe9d0, 0xa9433f07, 0xf0d90a3f, 0xb6c32fa9, 0x313f5fb, 0xe6f30b02, 0xf90f0110, 0xee050604,
    // -28, 5, 5, -25, 5, 5, -11, 19, 36, 15, 1, -31, -3, 13, 19, -2, -32, -33, 1, -4, 47, -10, -26, 8, 32, 24, 58, -52, -12, 15, 40, 23
    0xe70505e4, 0x13f50505, 0xe1010f24, 0xfe130dfd, 0xfc01dfe0, 0x8e6f62f, 0xcc3a1820, 0x17280ff4,
    // -17, 11, 14, -10, 14, 4, -12, 1, 27, 1, 14, -4, -4, 4, 11, -8, -7, 16, 11, -7, 0, 11, 12, -15, -24, 4, 7, -2, -19, 4, 14, 13
    0xf60e0bef, 0x1f4040e, 0xfc0e011b, 0xf80b04fc, 0xf90b10f9, 0xf10c0b00, 0xfe0704e8, 0xd0e04ed,
    // 20, 64, 7, -9, -8, 12, 12, 0, -10, 21, -4, 15, -46, 4, 1, 11, 9, 36, -19, -18, -14, 7, 11, -12, 19, 1, -6, 2, -7, -6, 9, 20
    0xf7074014, 0xc0cf8, 0xffc15f6, 0xb0104d2, 0xeeed2409, 0xf40b07f2, 0x2fa0113, 0x1409faf9,
    // 3, 12, 25, 22, 24, -19, 26, -12, -14, 15, 14, -1, -10, 20, 27, -2, -65, -80, 28, 28, -92, 54, -128, -67, -23, -22, -2, 86, 18, -52, 8, -32
    0x16190c03, 0xf41aed18, 0xff0e0ff2, 0xfe1b14f6, 0x1c1cb0bf, 0xbd8036a4, 0x56feeae9, 0xe008cc12,
    // 6, 5, -50, 17, 2, 11, 22, -7, 25, 21, -23, 6, -1, 4, -25, 41, 5, -7, -4, 13, 0, -19, 11, -8, -13, 12, 4, 0, -11, 5, 5, -18
    0x11ce0506, 0xf9160b02, 0x6e91519, 0x29e704ff, 0xdfcf905, 0xf80bed00, 0x40cf3, 0xee0505f5,
    // -4, -2, -18, 19, -4, -43, 15, 3, 9, 32, 8, 4, -9, 4, -2, 6, 12, -4, -3, -1, -20, -20, 14, 9, 8, 17, 3, -6, -1, 4, -7, 6
    0x13eefefc, 0x30fd5fc, 0x4082009, 0x6fe04f7, 0xfffdfc0c, 0x90eecec, 0xfa031108, 0x6f904ff,
};
static const uint embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // -6.384e-05, -0.0004108, -1.38e-05, 8.35e-05, -0.0001802, -5.4e-05, 8.56e-05, 0.0002391, -0.0001957, 2.01e-05, 4.65e-06, -2e-07, 0.0002015, -0.00010735, 0.0001949, 4.16e-05
    0x8ebb842f, 0x57980e8, 0x838a89e8, 0xbd6059c, 0x1518a6a, 0x8003004e, 0x87090a9a, 0x2ba0a63,
};
static const uint embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -37, -32, -4, -6, 34, 50, -10, -16, 11, -54, 18, -21, -37, -53, -63, -33, -10, 57, 30, -10, 7, -20, -42, 15, 31, 6, -13, -62, 42, 16, -10, -45
    0xfafce0db, 0xf0f63222, 0xeb12ca0b, 0xdfc1cbdb, 0xf61e39f6, 0xfd6ec07, 0xc2f3061f, 0xd3f6102a,
    // 2, 1, 12, 0, -20, -8, 21, 8, 16, -13, -4, -11, -5, 9, -6, 25, 31, -15, -25, 64, -23, 71, 8, -17, 37, 41, -22, 1, -12, 47, -18, -78
    0xc0102, 0x815f8ec, 0xf5fcf310, 0x19fa09fb, 0x40e7f11f, 0xef0847e9, 0x1ea2925, 0xb2ee2ff4,
    // -2, -7, -4, 10, 8, 23, -1, -16, 21, -6, 3, 16, -9, -14, 8, -7, -15, -15, -38, 12, 5, 16, -5, -17, -67, -5, 14, -27, 16, -18, -4, -25
    0xafcf9fe, 0xf0ff1708, 0x1003fa15, 0xf908f2f7, 0xcdaf1f1, 0xeffb1005, 0xe50efbbd, 0xe7fcee10,
    // 8, -5, 24, 8, -6, 40, 9, 6, 11, -16, -8, 3, -3, 5, 7, 6, -28, -32, -26, 7, -8, 23, -28, 7, -24, 12, -12, 10, 6, 12, -13, -46
    0x818fb08, 0x60928fa, 0x3f8f00b, 0x60705fd, 0x7e6e0e4, 0x7e417f8, 0xaf40ce8, 0xd2f30c06,
    // 3, -10, 5, -38, 12, -46, -15, 10, 55, -17, -9, -6, -31, 27, -19, 9, -44, 12, 36, -14, -26, 14, 13, 9, -10, 13, 30, -5, 9, 12, -7, -5
    0xda05f603, 0xaf1d20c, 0xfaf7ef37, 0x9ed1be1, 0xf2240cd4, 0x90d0ee6, 0xfb1e0df6, 0xfbf90c09,
    // -34, -11, -19, -28, -4, -3, -20, 25, -38, -23, 8, -26, -17, -25, 22, -3, -30, 31, -25, 8, -5, -5, -1, 7, -15, 46, 15, -32, 2, -9, -18, 21
    0xe4edf5de, 0x19ecfdfc, 0xe608e9da, 0xfd16e7ef, 0x8e71fe2, 0x7fffbfb, 0xe00f2ef1, 0x15eef702,
    // 13, 1, -2, 6, 7, -3, 3, -6, -7, -12, 32, -9, 18, 9, 9, -1, -29, 4, 10, -5, 4, -67, 10, 19, 2, -8, -10, 11, -23, -28, 12, -13
    0x6fe010d, 0xfa03fd07, 0xf720f4f9, 0xff090912, 0xfb0a04e3, 0x130abd04, 0xbf6f802, 0xf30ce4e9,
    // 24, 14, -12, -2, -35, -17, -14, 27, 22, 39, 36, 29, 31, 61, -4, -41, 19, -32, -7, 13, -26, -16, 5, 31, -16, 34, 28, 32, -37, -31, 31, -20
    0xfef40e18, 0x1bf2efdd, 0x1d242716, 0xd7fc3d1f, 0xdf9e013, 0x1f05f0e6, 0x201c22f0, 0xec1fe1db,
    // -6, -1, -33, 3, -8, -11, 33, 10, -14, -22, -6, -4, -4, 3, -4, 7, 8, 12, 0, 13, -60, 37, 21, -19, 21, 16, -4, -7, 17, 14, 5, -8
    0x3dffffa, 0xa21f5f8, 0xfcfaeaf2, 0x7fc03fc, 0xd000c08, 0xed1525c4, 0xf9fc1015, 0xf8050e11,
    // 25, 29, 46, 8, 47, -12, 25, -11, -7, 29, 0, -30, -52, 1, 51, 18, 14, -5, -37, 8, 0, 21, 0, 9, -4, 15, 2, 26, -25, 5, 27, 24
    0x82e1d19, 0xf519f42f, 0xe2001df9, 0x123301cc, 0x8dbfb0e, 0x9001500, 0x1a020ffc, 0x181b05e7,
    // -6, -10, 6, 6, 1, 11, -22, -24, -37, -4, -21, 30, -3, -29, -19, 41, -4, 0, -7, -15, 11, 40, -11, 23, 5, 10, -57, 17, -2, -61, 10, -13
    0x606f6fa, 0xe8ea0b01, 0x1eebfcdb, 0x29ede3fd, 0xf1f900fc, 0x17f5280b, 0x11c70a05, 0xf30ac3fe,
    // -8, -8, 29, -19, -6, 8, -5, 16, 8, -2, 16, 11, -12, -6, -6, 12, -19, 42, 3, 2, -15, -53, 23, 13, -35, -27, -25, 15, -20, 26, -22, -11
    0xed1df8f8, 0x10fb08fa, 0xb10fe08, 0xcfafaf4, 0x2032aed, 0xd17cbf1, 0xfe7e5dd, 0xf5ea1aec,
    // 10, 1, 11, 9, 3, -4, -21, -9, 4, 3, 40, 9, 3, 1, -4, -17, -24, -6, -20, 62, -6, 0, 12, -14, -62, -39, -20, 19, 0, 37, -12, -6
    0x90b010a, 0xf7ebfc03, 0x9280304, 0xeffc0103, 0x3eecfae8, 0xf20c00fa, 0x13ecd9c2, 0xfaf42500,
    // 5, -1, 43, 17, -27, -25, 12, -2, 19, 0, 24, -45, 1, -20, 6, -9, 10, 4, -3, 63, 4, -37, -35, -23, -9, -2, -20, -15, -27, -8, 9, -17
    0x112bff05, 0xfe0ce7e5, 0xd3180013, 0xf706ec01, 0x3ffd040a, 0xe9dddb04, 0xf1ecfef7, 0xef09f8e5,
    // -15, 6, -47, 14, 0, 35, 32, 4, -10, 24, 52, -9, 14, -3, 6, -8, 11, 13, 24, 25, 14, -35, 15, -21, 5, -2, -30, -32, -8, -23, 11, 15
    0xed106f1, 0x4202300, 0xf73418f6, 0xf806fd0e, 0x19180d0b, 0xeb0fdd0e, 0xe0e2fe05, 0xf0be9f8,
    // 6, -7, 5, -5, -9, 8, -11, 11, -23, 7, 3, 10, 4, -3, 8, -39, 18, -27, 64, -45, 33, -53, -25, 1, 53, 14, 19, 8, -31, -11, -18, 58
    0xfb05f906, 0xbf508f7, 0xa0307e9, 0xd908fd04, 0xd340e512, 0x1e7cb21, 0x8130e35, 0x3aeef5e1,
    // 2, -14, 16, -5, -24, 33, 9, 11, 7, -8, 32, 33, -21, -8, 21, -13, -3, 51, -19, 20, 22, 2, -41, -86, 12, -11, -46, -30, 3, -38, 37, 30
    0xfb10f202, 0xb0921e8, 0x2120f807, 0xf315f8eb, 0x14ed33fd, 0xaad70216, 0xe2d2f50c, 0x1e25da03,
    // -52, -36, -2, 33, -6, 5, 14, -17, 34, 11, 47, -35, 7, 54, 53, -10, -7, 2, -11, 15, 2, 6, 6, 2, -24, -30, -3, 22, 10, -11, 17, 16
    0x21fedccc, 0xef0e05fa, 0xdd2f0b22, 0xf6353607, 0xff502f9, 0x2060602, 0x16fde2e8, 0x1011f50a,
    // 5, -23, -4, 11, 30, -7, -12, -16, 42, 2, 4, -2, -1, -10, -9, 1, 58, -11, 8, 15, 4, -30, -22, -51, -15, -37, 20, 9, -26, 52, 20, -31
    0xbfce905, 0xf0f4f91e, 0xfe04022a, 0x1f7f6ff, 0xf08f53a, 0xcdeae204, 0x914dbf1, 0xe11434e6,
    // 3, -11, 19, -9, -16, 25, 16, 28, -1, 5, 8, -19, 1, 19, 13, -8, 39, 53, -18, -12, 6, 59, 12, -1, -50, -44, 12, 40, -32, -22, 31, 1
    0xf713f503, 0x1c1019f0, 0xed0805ff, 0xf80d1301, 0xf4ee3527, 0xff0c3b06, 0x280cd4ce, 0x11feae0,
    // -22, 5, -9, 2, 1, 23, 28, -15, 11, 5, 19, -11, -6, -23, 7, 41, -16, 77, 28, 1, -48, -38, 70, 5, -38, 38, 19, -7, -44, 21, 2, -6
    0x2f705ea, 0xf11c1701, 0xf513050b, 0x2907e9fa, 0x11c4df0, 0x546dad0, 0xf91326da, 0xfa0215d4,
    // 53, -97, -30, 27, -47, 2, -13, -25, -19, 9, 2, -12, -66, -18, 18, -5, -10, -22, 14, 53, 30, 4, 16, 19, 2, -4, -13, 31, -35, -49, 2, 24
    0x1be29f35, 0xe7f302d1, 0xf40209ed, 0xfb12eebe, 0x350eeaf6, 0x1310041e, 0x1ff3fc02, 0x1802cfdd,
    // 28, 8, 48, -27, -12, 33, 53, -48, -17, -14, 13, 0, -32, 33, -48, -59, 32, 7, -22, -39, -9, 25, 20, 21, 15, 33, -25, -15, -13, -15, -2, -51
    0xe530081c, 0xd03521f4, 0xdf2ef, 0xc5d021e0, 0xd9ea0720, 0x151419f7, 0xf1e7210f, 0xcdfef1f3,
    // 39, 17, -10, 26, -38, 12, 11, 48, 31, 7, 35, -58, 14, -68, 28, 4, 2, -37, 15, 45, -7, -31, -10, -10, 6, -9, 14, -22, 13, -6, -7, -8
    0x1af61127, 0x300b0cda, 0xc623071f, 0x41cbc0e, 0x2d0fdb02, 0xf6f6e1f9, 0xea0ef706, 0xf8f9fa0d,
    // 13, -4, -5, 1, 10, 0, -11, -1, -6, -1, -16, -4, 15, 15, 2, -6, 6, 58, -48, 2, 14, -8, -1, -14, 34, 30, 39, -29, -5, -14, 66, 13
    0x1fbfc0d, 0xfff5000a, 0xfcf0fffa, 0xfa020f0f, 0x2d03a06, 0xf2fff80e, 0xe3271e22, 0xd42f2fb,
    // -3, -4, -26, 7, 1, 2, 17, 1, 12, 10, -24, 2, -9, -5, 5, -16, -12, -28, -16, 17, 72, 10, 2, 13, -50, 12, -23, -2, 4, 6, -17, 1
    0x7e6fcfd, 0x1110201, 0x2e80a0c, 0xf005fbf7, 0x11f0e4f4, 0xd020a48, 0xfee90cce, 0x1ef0604,
    // 42, -2, -22, -58, -13, -21, -8, -57, 14, -9, -7, 15, 19, -25, 61, 5, -8, 31, -12, 13, 1, 3, 5, 14, -22, 34, -25, 5, 2, 16, 5, -2
    0xc6eafe2a, 0xc7f8ebf3, 0xff9f70e, 0x53de713, 0xdf41ff8, 0xe050301, 0x5e722ea, 0xfe051002,
    // 15, 13, -11, -45, 29, -18, 13, -2, 38, 50, 26, -16, -5, 26, -42, 5, 18, -5, 2, -8, -33, 3, -15, -7, 22, -38, 20, 15, 19, 27, 52, 6
    0xd3f50d0f, 0xfe0dee1d, 0xf01a3226, 0x5d61afb, 0xf802fb12, 0xf9f103df, 0xf14da16, 0x6341b13,
    // 9, -3, 24, 13, -16, -8, 4, 7, 1, -13, 39, 26, 0, 5, 17, -22, 9, -4, 21, 15, -5, -37, -23, -11, -62, 14, -52, 18, -16, -19, -11, -48
    0xd18fd09, 0x704f8f0, 0x1a27f301, 0xea110500, 0xf15fc09, 0xf5e9dbfb, 0x12cc0ec2, 0xd0f5edf0,
    // 8, 2, -42, 19, 49, 7, -21, -9, -28, -18, 3, 9, 3, 5, -2, -9, -34, 51, -9, 7, 24, -24, -8, -3, -40, 25, -14, 10, -3, 17, 7, 28
    0x13d60208, 0xf7eb0731, 0x903eee4, 0xf7fe0503, 0x7f733de, 0xfdf8e818, 0xaf219d8, 0x1c0711fd,
    // 42, -77, 26, -8, 66, 16, 73, -3, -3, 39, 24, -25, 77, -48, -3, 19, -34, 2, 7, 28, -12, -17, -38, -20, -35, -16, -10, 2, 33, 0, 19, 35
    0xf81ab32a, 0xfd491042, 0xe71827fd, 0x13fdd04d, 0x1c0702de, 0xecdaeff4, 0x2f6f0dd, 0x23130021,
    // 0, -5, 14, -4, -8, -5, 1, 9, 0, -38, -6, -43, 4, 15, -2, -4, -3, 5, -19, 30, -18, -46, -59, 40, -1, 59, 11, 9, -24, 51, 11, 23
    0xfc0efb00, 0x901fbf8, 0xd5fada00, 0xfcfe0f04, 0x1eed05fd, 0x28c5d2ee, 0x90b3bff, 0x170b33e8,
    // -11, -25, -23, 48, -18, -2, -24, -11, 39, -15, -1, -6, 46, -42, 38, 11, 15, 87, 9, 28, 34, 5, 18, 54, -20, -19, -34, 62, -38, -42, 50, 20
    0x30e9e7f5, 0xf5e8feee, 0xfafff127, 0xb26d62e, 0x1c09570f, 0x36120522, 0x3edeedec, 0x1432d6da,
    // -8, 2, -18, -13, -17, -17, 5, 1, 0, -7, 4, 15, -12, -6, 6, -7, -35, -22, -12, 18, -10, 20, 3, 6, 46, -26, 14, -48, -98, 23, -2, 5
    0xf3ee02f8, 0x105efef, 0xf04f900, 0xf906faf4, 0x12f4eadd, 0x60314f6, 0xd00ee62e, 0x5fe179e,
    // -1, -4, -4, 10, 0, -3, 5, -2, -13, 10, 10, 11, 3, -20, 11, -12, 31, -21, 6, 5, -21, -26, -2, 57, 52, -8, 3, 29, 18, -2, 26, 3
    0xafcfcff, 0xfe05fd00, 0xb0a0af3, 0xf40bec03, 0x506eb1f, 0x39fee6eb, 0x1d03f834, 0x31afe12,
    // -1, -1, 0, 2, -6, 7, -1, -8, 12, 13, -3, 28, -11, -18, -7, -1, 8, 27, 3, 5, 5, 14, -26, -21, 31, -56, 43, -42, 25, -55, 1, 41
    0x200ffff, 0xf8ff07fa, 0x1cfd0d0c, 0xfff9eef5, 0x5031b08, 0xebe60e05, 0xd62bc81f, 0x2901c919,
    // -30, 1, -28, -17, 17, -8, -1, 3, 22, -13, -23, -37, -24, -27, -3, 17, 17, -29, 48, 59, 28, -52, 12, 60, -65, -11, -57, 29, -36, 53, 8, -15
    0xefe401e2, 0x3fff811, 0xdbe9f316, 0x11fde5e8, 0x3b30e311, 0x3c0ccc1c, 0x1dc7f5bf, 0xf10835dc,
    // -23, -25, 46, 24, -23, 17, 72, -71, 14, 17, 50, -65, -4, 46, -5, -45, -13, -45, 14, 62, 2, -36, -17, -5, 13, 9, 1, -32, 17, -7, -14, -9
    0x182ee7e9, 0xb94811e9, 0xbf32110e, 0xd3fb2efc, 0x3e0ed3f3, 0xfbefdc02, 0xe001090d, 0xf7f2f911,
    // -4, -9, 0, 1, 7, -23, -15, 14, 0, 29, 22, 24, -9, -7, 4, -51, 11, -10, -7, 0, -38, 18, -6, 7, 26, 28, 22, -1, -11, 27, 70, 33
    0x100f7fc, 0xef1e907, 0x18161d00, 0xcd04f9f7, 0xf9f60b, 0x7fa12da, 0xff161c1a, 0x21461bf5,
    // 4, 1, -24, 18, 2, 28, 36, -7, -5, -13, 34, -10, 17, 54, 4, -34, 12, -31, 40, 37, 7, -11, -1, 9, 4, -32, 6, -33, 4, -8, 11, 16
    0x12e80104, 0xf9241c02, 0xf622f3fb, 0xde043611, 0x2528e10c, 0x9fff507, 0xdf06e004, 0x100bf804,
    // -1, 7, 7, 2, -6, 30, 3, -22, -9, -16, -3, -36, 8, 0, 4, 47, -55, 39, -31, 35, -11, -20, 20, 9, 12, 3, 21, 23, 16, 22, -28, 14
    0x20707ff, 0xea031efa, 0xdcfdf0f7, 0x2f040008, 0x23e127c9, 0x914ecf5, 0x1715030c, 0xee41610,
    // -14, -46, -44, 12, -69, 47, -36, 29, 30, -32, 20, 18, 76, 7, -52, -42, 13, 65, -17, 18, 24, -6, -30, 39, -17, -40, -28, 1, -7, 5, 35, -55
    0xcd4d2f2, 0x1ddc2fbb, 0x1214e01e, 0xd6cc074c, 0x12ef410d, 0x27e2fa18, 0x1e4d8ef, 0xc92305f9,
    // 0, 2, -19, -6, 17, -6, -8, 1, -3, 4, -25, -13, -3, 13, -1, -1, 9, -7, -17, -20, 78, -29, 10, -9, -26, -42, -6, -2, -5, -9, -24, 4
    0xfaed0200, 0x1f8fa11, 0xf3e704fd, 0xffff0dfd, 0xeceff909, 0xf70ae34e, 0xfefad6e6, 0x4e8f7fb,
    // 16, -2, 12, 22, -19, -14, 5, -3, -24, -7, 1, -11, 21, 1, 22, -39, -46, 20, -11, -25, -1, -5, 1, 34, -10, 19, -4, -15, 17, 17, 14, 47
    0x160cfe10, 0xfd05f2ed, 0xf501f9e8, 0xd9160115, 0xe7f514d2, 0x2201fbff, 0xf1fc13f6, 0x2f0e1111,
    // 5, 1, 0, -11, -2, -19, 13, 10, 7, -28, 13, -14, -3, 24, -6, 19, 32, 15, -9, 8, -11, -62, -21, -40, -8, -24, -37, 4, -8, -71, 1, 39
    0xf5000105, 0xa0dedfe, 0xf20de407, 0x13fa18fd, 0x8f70f20, 0xd8ebc2f5, 0x4dbe8f8, 0x2701b9f8,
    // -53, 42, -108, 11, -10, -55, 61, -1, -49, 25, 1, -26, -6, -5, -27, 17, -25, 49, -29, 43, -22, -76, 74, -82, -13, -128, -43, 1, -22, 0, 33, -16
    0xb942acb, 0xff3dc9f6, 0xe60119cf, 0x11e5fbfa, 0x2be331e7, 0xae4ab4ea, 0x1d580f3, 0xf02100ea,
    // 19, -9, -29, -42, 37, -10, -3, -68, -10, 22, -5, -28, 8, -49, -8, -8, -2, 63, 59, 61, 34, -51, -10, 4, -7, -38, -5, 22, 26, -11, 6, 47
    0xd6e3f713, 0xbcfdf625, 0xe4fb16f6, 0xf8f8cf08, 0x3d3b3ffe, 0x4f6cd22, 0x16fbdaf9, 0x2f06f51a,
    // 9, -7, -8, 59, 27, -16, -19, 18, 16, -4, -21, 20, 29, -15, 35, 64, -16, 11, 6, -28, 0, 19, 2, 6, -11, -19, -18, 41, -14, 33, 21, 18
    0x3bf8f909, 0x12edf01b, 0x14ebfc10, 0x4023f11d, 0xe4060bf0, 0x6021300, 0x29eeedf5, 0x121521f2,
    // -5, 13, -18, 10, -22, -13, 39, -5, 13, -15, 8, 28, -17, -9, 5, 36, 55, 39, 28, 51, 5, -11, 49, -50, -34, -27, -26, -20, 0, -75, 6, -12
    0xaee0dfb, 0xfb27f3ea, 0x1c08f10d, 0x2405f7ef, 0x331c2737, 0xce31f505, 0xece6e5de, 0xf406b500,
    // -1, 2, 46, 24, -41, -13, 24, -8, 27, 36, 12, -63, 10, -22, 1, -13, -2, -31, 10, 39, -16, 12, -51, 5, -30, -35, 27, -36, 18, -6, 26, 16
    0x182e02ff, 0xf818f3d7, 0xc10c241b, 0xf301ea0a, 0x270ae1fe, 0x5cd0cf0, 0xdc1bdde2, 0x101afa12,
    // -39, 27, 21, 79, 20, 3, 6, 79, -8, 12, -9, 5, -24, 32, -25, -7, 20, 11, 23, 47, 4, -45, -1, -17, 32, -19, -14, 24, 3, -49, 0, 16
    0x4f151bd9, 0x4f060314, 0x5f70cf8, 0xf9e720e8, 0x2f170b14, 0xefffd304, 0x18f2ed20, 0x1000cf03,
    // 4, 28, 36, 57, 27, 15, 38, -2, -29, 8, -9, -3, -13, 46, -60, 2, -15, 3, 23, -41, -22, 44, 22, -1, -7, -41, -21, 48, -10, 29, 34, 11
    0x39241c04, 0xfe260f1b, 0xfdf708e3, 0x2c42ef3, 0xd71703f1, 0xff162cea, 0x30ebd7f9, 0xb221df6,
    // -1, -2, 16, 0, -11, -15, 0, 20, -9, -11, -31, -28, -12, 14, 11, -13, 0, 41, 22, 31, 39, -41, -38, -8, 47, -12, -68, 13, 0, 25, -11, 44
    0x10feff, 0x1400f1f5, 0xe4e1f5f7, 0xf30b0ef4, 0x1f162900, 0xf8dad727, 0xdbcf42f, 0x2cf51900,
    // 54, 3, 8, 6, -5, 30, 27, -49, -7, -11, 13, -15, -1, -14, -26, -54, 2, 83, 17, 20, 33, 24, 26, 50, -20, -18, -31, 53, -13, -19, 30, 15
    0x6080336, 0xcf1b1efb, 0xf10df5f9, 0xcae6f2ff, 0x14115302, 0x321a1821, 0x35e1eeec, 0xf1eedf3,
    // -2, 13, 15, -17, -9, 11, 15, 9, 33, 18, -50, -4, 4, 15, -14, 33, -17, -5, -19, 35, 62, 12, -3, 8, -20, -38, -34, 4, -30, -24, -38, -21
    0xef0f0dfe, 0x90f0bf7, 0xfcce1221, 0x21f20f04, 0x23edfbef, 0x8fd0c3e, 0x4dedaec, 0xebdae8e2,
    // 44, 2, -55, 26, 14, 39, 18, 14, 32, -29, 64, -42, 12, 18, 38, -14, 2, -29, 12, 42, 4, -5, 22, -2, -15, -12, 8, -23, 8, 2, -5, 10
    0x1ac9022c, 0xe12270e, 0xd640e320, 0xf226120c, 0x2a0ce302, 0xfe16fb04, 0xe908f4f1, 0xafb0208,
    // -11, -27, -20, 0, -38, -12, -30, 40, 39, -21, 0, 3, 26, -34, 70, 44, 43, -1, -41, -43, -4, 2, 2, -1, 5, 24, -5, -19, 6, -1, 14, -48
    0xece5f5, 0x28e2f4da, 0x300eb27, 0x2c46de1a, 0xd5d7ff2b, 0xff0202fc, 0xedfb1805, 0xd00eff06,
    // -45, 74, 47, -40, 47, 21, 48, 16, 22, -43, 5, 9, 71, -49, 40, -78, -18, 6, 16, 57, 23, -21, 12, 35, 28, -28, -5, 42, -30, -14, -6, 9
    0xd82f4ad3, 0x1030152f, 0x905d516, 0xb228cf47, 0x391006ee, 0x230ceb17, 0x2afbe41c, 0x9faf2e2,
    // 6, 5, 0, 2, -2, -27, -1, -7, -12, 14, 9, 19, 19, -4, -7, -24, 31, -31, -3, 72, -25, 58, -8, -34, 7, -39, 22, -16, -17, -8, 15, -31
    0x2000506, 0xf9ffe5fe, 0x13090ef4, 0xe8f9fc13, 0x48fde11f, 0xdef83ae7, 0xf016d907, 0xe10ff8ef,
    // 6, 14, -5, 3, 3, 13, -17, -19, -4, -1, -15, -21, 7, 11, -6, -6, 49, 28, 9, 2, 38, -2, -8, 0, -64, 22, -18, 43, 105, -15, 20, 14
    0x3fb0e06, 0xedef0d03, 0xebf1fffc, 0xfafa0b07, 0x2091c31, 0xf8fe26, 0x2bee16c0, 0xe14f169,
    // -11, 25, -1, -26, -1, -10, -13, 10, -15, 42, -7, -21, 15, 26, -11, 42, 20, -3, -14, -12, 14, 13, -22, 9, 10, 21, 3, 16, -22, 0, -28, -39
    0xe6ff19f5, 0xaf3f6ff, 0xebf92af1, 0x2af51a0f, 0xf4f2fd14, 0x9ea0d0e, 0x1003150a, 0xd9e400ea,
    // 14, 36, 34, 7, 58, -15, 31, -31, -20, 18, -5, -14, -57, -7, -30, -5, 9, -11, 10, 21, -3, -44, -13, -18, -8, 44, 14, -55, 4, 24, -8, -2
    0x722240e, 0xe11ff13a, 0xf2fb12ec, 0xfbe2f9c7, 0x150af509, 0xeef3d4fd, 0xc90e2cf8, 0xfef81804,
    // -21, 85, -14, 74, -38, 29, -40, -47, 30, -3, 32, -36, -21, 18, 4, -12, -25, 12, 18, 27, -4, -25, -42, -19, -15, -17, 8, -22, -14, -10, 17, 10
    0x4af255eb, 0xd1d81dda, 0xdc20fd1e, 0xf40412eb, 0x1b120ce7, 0xedd6e7fc, 0xea08eff1, 0xa11f6f2,
    // 8, -13, 8, 13, 8, -21, -18, 14, 24, 1, -1, -9, 1, 3, 13, -47, -25, -5, 25, -30, 20, -44, -29, 20, -40, -11, 7, -23, 2, 7, 1, 4
    0xd08f308, 0xeeeeb08, 0xf7ff0118, 0xd10d0301, 0xe219fbe7, 0x14e3d414, 0xe907f5d8, 0x4010702,
};
static const uint embedded_decoder3_ResidualBlock_2_body_pw_expand_bias_dwords[32] = {
    // 0.03653, -0.1023, -0.014694, 0.1217, 0.1488, 0.09296, 0.032, -0.03114, -0.0285, -0.108, -0.1237, -0.02997, 0.03848, -0.042, -0.05865, -0.351
    0xae8c28ad, 0x2fcaa386, 0x2df330c3, 0xa7f92819, 0xaee9a74c, 0xa7acafeb, 0xa96028ed, 0xb59eab82,
    // -0.649, -0.084, -0.11566, -0.1633, -0.1521, 0.0944, -0.1666, -0.06854, 0.03084, 0.0498, -0.174, -0.1449, -0.0751, 0.05035, -0.137, 0.03473
    0xad60b931, 0xb13aaf67, 0x2e0bb0de, 0xac63b155, 0x2a6027e5, 0xb0a3b191, 0x2a72acce, 0x2872b062,
    // -0.2432, -0.03882, -0.111, -0.3064, -0.139, -0.0985, -0.03683, -0.2085, 0.1343, -0.04034, -0.06287, 0.0789, 0.0919, -0.687, 0.0406, -0.1044
    0xa8f8b3c8, 0xb4e7af1b, 0xae4eb073, 0xb2aca8b7, 0xa92a304c, 0x2d0dac06, 0xb97f2de2, 0xaeae2932,
    // -0.11884, -0.3098, 0.0696, -0.1831, -0.1128, -0.1716, -0.1503, -0.1777, -0.1641, 0.1492, -0.2083, -0.1571, 0.127, -0.0098, -0.1142, -0.003439
    0xb4f5af9b, 0xb1dc2c74, 0xb17eaf38, 0xb1b0b0cf, 0x30c6b140, 0xb107b2aa, 0xa1053010, 0x9b0baf4f,
};
static const uint embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 7, 26, 4, 14, -22, 13, 14, -35, -18, 3, 9, -12, -18, 3, 29, -6, 12, 26, 3, 17, -3, 3, -10, -11, -2, -3, 28, -15, 0, -29, -10, -1
    0xe041a07, 0xdd0e0dea, 0xf40903ee, 0xfa1d03ee, 0x11031a0c, 0xf5f603fd, 0xf11cfdfe, 0xfff6e300,
    // 17, 16, 9, -11, -14, 28, -27, 27, 13, 1, -5, -6, 12, -7, 20, 3, -12, -32, -33, -32, -18, 10, 9, 18, 10, 6, 52, 37, -1, -3, 18, -26
    0xf5091011, 0x1be51cf2, 0xfafb010d, 0x314f90c, 0xe0dfe0f4, 0x12090aee, 0x2534060a, 0xe612fdff,
    // -13, -1, -5, 6, -43, 47, -27, -32, 17, 34, 61, -43, 1, 9, 21, 8, 5, -20, -11, -37, 3, 52, -34, 18, 11, 6, 2, -2, -26, 49, -4, 52
    0x6fbfff3, 0xe0e52fd5, 0xd53d2211, 0x8150901, 0xdbf5ec05, 0x12de3403, 0xfe02060b, 0x34fc31e6,
    // 26, -21, 19, -14, 34, 8, -30, -50, 29, 52, 25, 21, -23, 116, 30, -25, -43, 23, -5, 12, -21, -18, -28, -28, 19, -46, 1, -28, 33, 1, -37, 4
    0xf213eb1a, 0xcee20822, 0x1519341d, 0xe71e74e9, 0xcfb17d5, 0xe4e4eeeb, 0xe401d213, 0x4db0121,
    // -39, -1, 8, 2, 7, 21, 20, 13, 7, 43, -34, 15, 19, -4, 7, 7, 9, -33, -11, 6, 37, 4, -27, 28, 6, 21, -44, -7, 17, -41, 15, -21
    0x208ffd9, 0xd141507, 0xfde2b07, 0x707fc13, 0x6f5df09, 0x1ce50425, 0xf9d41506, 0xeb0fd711,
    // -61, 31, -17, 17, -13, -36, 1, 21, -7, 30, -34, -11, -1, -14, -4, -17, 10, -52, -9, 2, 1, 60, 25, 17, 45, 7, -4, 32, 15, 20, 28, -30
    0x11ef1fc3, 0x1501dcf3, 0xf5de1ef9, 0xeffcf2ff, 0x2f7cc0a, 0x11193c01, 0x20fc072d, 0xe21c140f,
    // 40, -5, 12, 11, -32, 20, -30, -20, 24, 3, 4, -19, -3, 48, -12, 6, 17, -24, -23, -60, 5, 32, -8, 8, -6, 33, -61, -27, 13, 7, 5, -22
    0xb0cfb28, 0xece214e0, 0xed040318, 0x6f430fd, 0xc4e9e811, 0x8f82005, 0xe5c321fa, 0xea05070d,
    // -46, 19, 38, -10, 12, 11, 25, -4, -17, 25, 30, 7, -26, -3, -24, -20, -21, 17, 80, -13, 4, 46, -16, -19, 0, -34, -10, -13, -22, -24, -34, 18
    0xf62613d2, 0xfc190b0c, 0x71e19ef, 0xece8fde6, 0xf35011eb, 0xedf02e04, 0xf3f6de00, 0x12dee8ea,
    // -34, 12, -34, -9, -1, 16, -59, 10, -10, -3, 14, -1, -51, -18, 28, -7, 5, -9, 33, -4, -32, -33, -15, -29, 25, -26, 37, 18, -59, -26, 3, 45
    0xf7de0cde, 0xac510ff, 0xff0efdf6, 0xf91ceecd, 0xfc21f705, 0xe3f1dfe0, 0x1225e619, 0x2d03e6c5,
    // 10, -18, -12, -47, 11, 35, -29, -13, 34, -25, -9, 37, 25, -23, -6, 31, 29, 1, 2, -18, -10, -41, 26, -43, 7, 44, 24, -39, 31, 26, 13, -18
    0xd1f4ee0a, 0xf3e3230b, 0x25f7e722, 0x1ffae919, 0xee02011d, 0xd51ad7f6, 0xd9182c07, 0xee0d1a1f,
    // -6, 2, 3, 24, 0, -2, 33, 3, -3, -1, -25, 20, 0, 13, 21, -12, 5, -6, 24, 7, -36, -1, 55, 25, 1, -42, 45, 13, 20, -39, 12, 23
    0x180302fa, 0x321fe00, 0x14e7fffd, 0xf4150d00, 0x718fa05, 0x1937ffdc, 0xd2dd601, 0x170cd914,
    // -20, 15, -8, 8, -25, -6, -36, -14, 11, -26, -24, 22, 38, -9, 33, -4, -19, -5, -34, 6, -11, 12, 0, 2, -37, -15, -4, 31, -13, -9, -3, -24
    0x8f80fec, 0xf2dcfae7, 0x16e8e60b, 0xfc21f726, 0x6defbed, 0x2000cf5, 0x1ffcf1db, 0xe8fdf7f3,
    // 2, 5, -33, -12, 15, 19, 9, 32, -17, -12, 6, 18, 17, 16, -14, 5, -22, 9, 36, 19, -20, -3, -11, 12, -19, -16, -41, 2, -8, 9, 11, 47
    0xf4df0502, 0x2009130f, 0x1206f4ef, 0x5f21011, 0x132409ea, 0xcf5fdec, 0x2d7f0ed, 0x2f0b09f8,
    // 2, -14, -57, -43, 0, -4, -51, -44, 39, 5, -14, 20, 40, -73, 7, -16, -17, 15, -13, 10, -52, 31, -15, -6, 15, -9, -4, 16, 42, 11, 4, 1
    0xd5c7f202, 0xd4cdfc00, 0x14f20527, 0xf007b728, 0xaf30fef, 0xfaf11fcc, 0x10fcf70f, 0x1040b2a,
    // -48, -17, 12, 9, 9, -5, 16, 19, -14, -13, 5, 6, 8, -10, -19, 5, 19, 22, 6, -7, 13, -39, -59, -58, 10, -20, 49, -4, 0, 8, 0, -14
    0x90cefd0, 0x1310fb09, 0x605f3f2, 0x5edf608, 0xf9061613, 0xc6c5d90d, 0xfc31ec0a, 0xf2000800,
    // 65, 47, -21, 2, -37, 29, 5, 55, -8, 21, -13, -9, 3, -7, 38, 64, 11, -14, -18, -16, 6, -84, -24, -25, 22, 26, -1, 46, 5, 37, 30, -27
    0x2eb2f41, 0x37051ddb, 0xf7f315f8, 0x4026f903, 0xf0eef20b, 0xe7e8ac06, 0x2eff1a16, 0xe51e2505,
    // 21, 13, -12, -17, 24, 2, -32, 0, -4, 26, 18, -28, -7, 4, -47, 2, 0, -53, 9, -37, -16, -32, 8, 50, 22, -47, 7, 25, -34, -14, -78, 29
    0xeff40d15, 0xe00218, 0xe4121afc, 0x2d104f9, 0xdb09cb00, 0x3208e0f0, 0x1907d116, 0x1db2f2de,
    // -69, 70, -35, 8, 16, -73, -11, -26, 0, 37, 36, -5, 24, 45, -16, -46, 4, 3, -11, 29, 24, 55, 6, 19, 11, 19, 0, 105, -3, -44, 85, -23
    0x8dd46bb, 0xe6f5b710, 0xfb242500, 0xd2f02d18, 0x1df50304, 0x13063718, 0x6900130b, 0xe955d4fd,
    // -26, -14, -5, 8, -55, 29, 0, -28, -33, 52, -27, 13, 15, -7, 47, 6, 17, -54, -2, -37, 10, -76, -10, 69, -3, 31, -34, -4, 4, -25, -8, -3
    0x8fbf2e6, 0xe4001dc9, 0xde534df, 0x62ff90f, 0xdbfeca11, 0x45f6b40a, 0xfcde1ffd, 0xfdf8e704,
    // -34, 16, 39, -31, 1, -21, -10, -39, 28, 39, -5, 16, -16, -32, 23, -43, 3, 34, -20, 16, 2, 49, -31, -8, -15, 79, 30, -5, 41, 2, 39, 4
    0xe12710de, 0xd9f6eb01, 0x10fb271c, 0xd517e0f0, 0x10ec2203, 0xf8e13102, 0xfb1e4ff1, 0x4270229,
    // 32, -1, -4, 9, 35, -20, -1, -20, -8, 32, 9, 2, 6, -4, -12, -10, 17, -38, -10, -9, -6, -10, -45, 61, 1, -18, -57, -7, 6, -8, 52, -35
    0x9fcff20, 0xecffec23, 0x20920f8, 0xf6f4fc06, 0xf7f6da11, 0x3dd3f6fa, 0xf9c7ee01, 0xdd34f806,
    // -88, -75, 15, 12, -40, -56, -18, -26, 4, 18, -28, -19, -19, -19, 8, -5, -9, -30, -7, 40, 9, 78, 20, 65, 36, 25, -2, -64, 0, -54, -75, 7
    0xc0fb5a8, 0xe6eec8d8, 0xede41204, 0xfb08eded, 0x28f9e2f7, 0x41144e09, 0xc0fe1924, 0x7b5ca00,
    // -15, -12, -40, 7, -23, 12, 44, 7, -7, 29, 16, 20, 50, 26, -17, 23, 25, -20, -5, -45, 6, 16, 4, 6, 10, -19, 21, -15, 58, 18, -20, -50
    0x7d8f4f1, 0x72c0ce9, 0x14101df9, 0x17ef1a32, 0xd3fbec19, 0x6041006, 0xf115ed0a, 0xceec123a,
    // 8, -11, 29, 4, -45, 14, 9, 40, -10, 77, -34, -3, -14, -65, -70, -28, -62, 5, 21, -12, 10, -1, -48, 1, -30, -1, 28, 21, 17, -2, 28, 6
    0x41df508, 0x28090ed3, 0xfdde4df6, 0xe4babff2, 0xf41505c2, 0x1d0ff0a, 0x151cffe2, 0x61cfe11,
    // -7, 16, -19, 9, -22, 11, 35, -4, -7, -3, -5, 18, 30, 22, -17, -8, -12, -8, 19, 53, -40, -10, -24, -13, -9, -40, -25, -1, 20, -15, 15, 33
    0x9ed10f9, 0xfc230bea, 0x12fbfdf9, 0xf8ef161e, 0x3513f8f4, 0xf3e8f6d8, 0xffe7d8f7, 0x210ff114,
    // -36, -50, 20, 10, -7, 0, 21, -46, -3, -1, 8, 21, 41, -113, -37, 38, -12, 35, 26, -6, 19, -2, -9, -14, 70, -1, -7, -4, -13, -15, -15, -2
    0xa14cedc, 0xd21500f9, 0x1508fffd, 0x26db8f29, 0xfa1a23f4, 0xf2f7fe13, 0xfcf9ff46, 0xfef1f1f3,
    // -4, 2, 13, 15, 26, -22, 9, -13, 23, 3, 27, 20, 51, -27, -2, 10, 19, 16, 19, 41, 25, 16, 11, -14, -11, 8, 37, 19, 25, -19, -9, -27
    0xf0d02fc, 0xf309ea1a, 0x141b0317, 0xafee533, 0x29131013, 0xf20b1019, 0x132508f5, 0xe5f7ed19,
    // -9, 5, -20, 51, 8, 3, -51, 45, 56, -17, -19, -25, 5, -9, 11, 21, -16, -29, -25, 2, -38, -29, -17, 29, -1, -34, -45, 36, 37, 5, -8, -17
    0x33ec05f7, 0x2dcd0308, 0xe7edef38, 0x150bf705, 0x2e7e3f0, 0x1defe3da, 0x24d3deff, 0xeff80525,
    // 30, 7, -26, -3, 10, 18, 2, 21, -13, -12, -4, 23, 19, -9, 34, -9, -21, 13, -12, 28, -29, 10, -23, 25, -28, -3, 40, 11, 14, 10, -70, 29
    0xfde6071e, 0x1502120a, 0x17fcf4f3, 0xf722f713, 0x1cf40deb, 0x19e90ae3, 0xb28fde4, 0x1dba0a0e,
    // -40, 82, -51, -13, -9, -4, 29, -38, -23, -16, -8, 1, 16, -2, 23, -33, 14, 31, -32, -26, -30, 57, -17, 4, 45, -38, 10, 54, -17, -13, 70, 32
    0xf3cd52d8, 0xda1dfcf7, 0x1f8f0e9, 0xdf17fe10, 0xe6e01f0e, 0x4ef39e2, 0x360ada2d, 0x2046f3ef,
    // 29, -24, 9, -19, -7, -25, -12, -52, 34, -28, -26, -30, -4, -1, 1, 14, 1, 5, 38, -18, 20, -24, -22, 8, -10, 39, 15, 22, 6, 7, -10, -20
    0xed09e81d, 0xccf4e7f9, 0xe2e6e422, 0xe01fffc, 0xee260501, 0x8eae814, 0x160f27f6, 0xecf60706,
    // 33, 7, 50, 0, -3, 26, -38, -3, 22, -29, -1, -7, -26, 99, -27, -10, -35, 15, 9, -60, 34, -10, -7, -15, 34, 24, -34, 16, 8, -20, 13, -4
    0x320721, 0xfdda1afd, 0xf9ffe316, 0xf6e563e6, 0xc4090fdd, 0xf1f9f622, 0x10de1822, 0xfc0dec08,
    // 13, -17, 44, 25, 20, 7, -2, -47, -17, 28, 20, -15, 33, 40, -32, -27, 51, -21, -15, -31, -4, 28, 4, -18, 0, 3, 49, -27, -44, 5, -11, 9
    0x192cef0d, 0xd1fe0714, 0xf1141cef, 0xe5e02821, 0xe1f1eb33, 0xee041cfc, 0xe5310300, 0x9f505d4,
    // -19, 77, 9, 21, 29, 4, -9, -15, 4, 26, -1, 42, -18, -31, 21, 0, -28, 13, -44, 4, 40, -25, -5, 3, -11, 42, -4, -10, -42, -42, -4, -18
    0x15094ded, 0xf1f7041d, 0x2aff1a04, 0x15e1ee, 0x4d40de4, 0x3fbe728, 0xf6fc2af5, 0xeefcd6d6,
    // -32, 3, 39, 43, -13, -28, -18, 21, 26, 27, -11, -7, -30, -50, 47, 18, 8, 20, -15, -17, 25, 54, 6, 32, -33, 41, -27, 39, -9, -50, -2, -37
    0x2b2703e0, 0x15eee4f3, 0xf9f51b1a, 0x122fcee2, 0xeff11408, 0x20063619, 0x27e529df, 0xdbfecef7,
    // -3, 36, 43, -1, -4, -5, 28, 22, -23, 2, -5, -47, -43, -17, 3, -14, -34, -25, -13, 20, 2, -69, 41, 29, 15, -19, -12, 18, 11, 12, 9, 5
    0xff2b24fd, 0x161cfbfc, 0xd1fb02e9, 0xf203efd5, 0x14f3e7de, 0x1d29bb02, 0x12f4ed0f, 0x5090c0b,
    // -10, 11, 44, 35, -15, -33, -18, -22, 19, 21, 7, -29, -37, -63, 33, -29, 47, -5, -47, 16, 49, 12, -5, 6, 33, 41, 38, -7, -27, -9, -3, -32
    0x232c0bf6, 0xeaeedff1, 0xe3071513, 0xe321c1db, 0x10d1fb2f, 0x6fb0c31, 0xf9262921, 0xe0fdf7e5,
    // 0, 11, 4, 21, 23, -7, -6, 52, 9, 13, 40, -21, -26, 4, -1, 3, 15, -14, -10, -7, -23, -11, 44, 33, 7, -15, -5, 13, 5, 2, -9, 20
    0x15040b00, 0x34faf917, 0xeb280d09, 0x3ff04e6, 0xf9f6f20f, 0x212cf5e9, 0xdfbf107, 0x14f70205,
    // 24, -79, 54, -4, 30, 12, 11, 55, -12, -28, 23, 20, -17, 39, -21, 65, 34, 6, 34, 27, 30, -29, 15, 7, 16, 69, -25, 17, 62, 21, 16, -25
    0xfc36b118, 0x370b0c1e, 0x1417e4f4, 0x41eb27ef, 0x1b220622, 0x70fe31e, 0x11e74510, 0xe710153e,
    // 2, 19, 41, -21, 35, 3, -11, 13, -7, -31, 0, 18, -14, -38, -14, 37, -43, -37, -19, 34, 44, -14, 3, 11, 26, 3, -37, 4, 7, 19, -3, 47
    0xeb291302, 0xdf50323, 0x1200e1f9, 0x25f2daf2, 0x22eddbd5, 0xb03f22c, 0x4db031a, 0x2ffd1307,
    // -3, -3, 13, -5, -19, -10, -68, 9, 27, 11, -20, -54, -62, -19, 18, -3, 21, -9, -19, 16, 20, -9, 11, 10, -7, 45, -2, 5, -46, -14, 5, 8
    0xfb0dfdfd, 0x9bcf6ed, 0xcaec0b1b, 0xfd12edc2, 0x10edf715, 0xa0bf714, 0x5fe2df9, 0x805f2d2,
    // 3, -2, -5, -3, 22, 4, 24, 5, -25, 1, 37, -17, -46, 12, 0, -6, 6, 30, 4, 0, 16, 11, 63, 14, 6, 8, 14, -15, -15, -4, -5, -5
    0xfdfbfe03, 0x5180416, 0xef2501e7, 0xfa000cd2, 0x41e06, 0xe3f0b10, 0xf10e0806, 0xfbfbfcf1,
    // -5, -45, 50, 1, -21, -12, 10, 34, -56, -30, -15, 42, 8, 57, -8, 31, 9, -4, -19, -38, 8, 5, -1, 6, 16, 22, 2, -2, 6, -9, -9, 8
    0x132d3fb, 0x220af4eb, 0x2af1e2c8, 0x1ff83908, 0xdaedfc09, 0x6ff0508, 0xfe021610, 0x8f7f706,
    // 20, -17, 36, 20, 7, 4, -30, 6, 11, -11, -16, -23, 23, 93, -3, -10, -32, -17, 10, -21, 58, 9, -41, -8, 3, 12, -25, -20, -1, 20, 8, -3
    0x1424ef14, 0x6e20407, 0xe9f0f50b, 0xf6fd5d17, 0xeb0aefe0, 0xf8d7093a, 0xece70c03, 0xfd0814ff,
    // 16, -21, 62, 35, -7, -11, 18, 6, -24, 11, -3, 27, 24, -52, 36, 19, 12, 10, -32, 25, 45, 11, 8, -9, -30, 17, 29, 12, 27, -29, 4, -59
    0x233eeb10, 0x612f5f9, 0x1bfd0be8, 0x1324cc18, 0x19e00a0c, 0xf7080b2d, 0xc1d11e2, 0xc504e31b,
    // -19, 16, 19, 42, -46, -6, -2, 53, -4, 13, -79, -47, -32, 4, -18, -5, -12, -57, -27, -2, -16, 6, -25, 52, -7, -4, -52, -11, 22, -19, 1, -45
    0x2a1310ed, 0x35fefad2, 0xd1b10dfc, 0xfbee04e0, 0xfee5c7f4, 0x34e706f0, 0xf5ccfcf9, 0xd301ed16,
    // -15, 36, -28, -9, 14, 0, 39, 18, 37, -16, -8, 23, 27, 38, -33, -47, 19, 4, 58, -35, -11, 14, 6, 17, 4, -72, 13, 26, 29, 2, 24, 18
    0xf7e424f1, 0x1227000e, 0x17f8f025, 0xd1df261b, 0xdd3a0413, 0x11060ef5, 0x1a0db804, 0x1218021d,
    // 20, -1, -40, 37, 34, 10, 6, -14, 11, 11, 10, 18, 72, 127, -14, 12, 46, 10, 4, 8, -68, -21, 0, -21, 8, 1, 49, -10, -9, 12, -7, 40
    0x25d8ff14, 0xf2060a22, 0x120a0b0b, 0xcf27f48, 0x8040a2e, 0xeb00ebbc, 0xf6310108, 0x28f90cf7,
    // -63, -55, 67, -9, 41, 11, -30, -2, -30, 8, -19, 5, 23, 41, -53, -28, -3, -4, 7, 31, -3, 45, -27, -15, -64, 21, 52, -27, 14, 30, -9, 32
    0xf743c9c1, 0xfee20b29, 0x5ed08e2, 0xe4cb2917, 0x1f07fcfd, 0xf1e52dfd, 0xe53415c0, 0x20f71e0e,
    // 32, -68, -56, -39, -2, 21, -70, -42, 1, 17, 4, 20, -38, -71, 6, -11, 0, 37, -69, -14, 22, -42, -16, -21, -25, -50, -27, -12, -24, 57, 1, 8
    0xd9c8bc20, 0xd6ba15fe, 0x14041101, 0xf506b9da, 0xf2bb2500, 0xebf0d616, 0xf4e5cee7, 0x80139e8,
    // -6, -27, 17, -2, -5, -30, -18, -61, 0, 9, -23, 1, 26, 6, -5, -4, -24, -9, 25, 36, -16, -98, -12, 21, -31, -6, -38, 52, -49, -11, 30, 19
    0xfe11e5fa, 0xc3eee2fb, 0x1e90900, 0xfcfb061a, 0x2419f7e8, 0x15f49ef0, 0x34dafae1, 0x131ef5cf,
    // -10, 9, -13, 3, -34, -4, -28, 5, 3, 71, 42, 17, 27, 56, 17, 47, -8, 43, 29, 23, 35, 26, -16, 8, -19, 35, -6, -33, -3, -52, -11, -6
    0x3f309f6, 0x5e4fcde, 0x112a4703, 0x2f11381b, 0x171d2bf8, 0x8f01a23, 0xdffa23ed, 0xfaf5ccfd,
    // 8, -3, -21, -1, -19, 13, 20, -45, 21, -13, 29, 7, -11, 18, 12, 8, 1, -2, 7, -16, 39, 33, 6, -2, -48, 1, 14, -38, 34, -12, 11, -5
    0xffebfd08, 0xd3140ded, 0x71df315, 0x80c12f5, 0xf007fe01, 0xfe062127, 0xda0e01d0, 0xfb0bf422,
    // 9, 8, 26, -56, -17, 5, -30, 17, 41, 2, -28, 17, -7, 13, -18, 15, 37, -46, 20, -8, -4, 6, 20, 14, -19, 22, -73, 9, -24, -34, 20, 14
    0xc81a0809, 0x11e205ef, 0x11e40229, 0xfee0df9, 0xf814d225, 0xe1406fc, 0x9b716ed, 0xe14dee8,
    // 32, -1, 9, -45, -1, 34, -41, -2, -18, -33, -7, -31, -3, 4, 15, 8, -27, -10, -11, -31, -39, 57, 12, 5, 17, -7, 24, -37, -18, 20, 7, 4
    0xd309ff20, 0xfed722ff, 0xe1f9dfee, 0x80f04fd, 0xe1f5f6e5, 0x50c39d9, 0xdb18f911, 0x40714ee,
    // -28, 70, -27, -22, -37, 13, 20, -29, -17, -12, 5, 7, 1, 23, 33, -37, -12, 59, -37, -25, 9, 13, 8, -31, -1, -26, 37, 1, -6, 22, -2, 11
    0xeae546e4, 0xe3140ddb, 0x705f4ef, 0xdb211701, 0xe7db3bf4, 0xe1080d09, 0x125e6ff, 0xbfe16fa,
    // -19, -12, -50, -15, -12, 9, 25, 26, -42, 3, -23, 14, -8, 26, 1, -2, -2, -9, 24, 26, -3, -52, 11, 18, -11, -36, -27, -14, 12, -11, -2, 15
    0xf1cef4ed, 0x1a1909f4, 0xee903d6, 0xfe011af8, 0x1a18f7fe, 0x120bccfd, 0xf2e5dcf5, 0xffef50c,
    // 34, 99, -39, -33, -31, -8, -11, -42, 0, -21, -38, -1, -5, -1, 23, -2, -2, -8, -24, -8, -34, 19, 33, -29, -4, 16, 11, -61, 6, 20, -38, 1
    0xdfd96322, 0xd6f5f8e1, 0xffdaeb00, 0xfe17fffb, 0xf8e8f8fe, 0xe32113de, 0xc30b10fc, 0x1da1406,
    // 0, -21, 49, 2, -2, 10, -24, -11, -60, 5, 19, 21, 6, 36, 15, 3, -17, 16, 4, 28, -5, 14, 5, 14, 18, -41, -11, 9, -40, 3, 5, -1
    0x231eb00, 0xf5e80afe, 0x151305c4, 0x30f2406, 0x1c0410ef, 0xe050efb, 0x9f5d712, 0xff0503d8,
    // 31, -14, 22, 0, -65, -12, -9, -32, 1, -35, -68, 7, 61, 20, 1, -6, 76, -30, 24, 8, 20, 25, -53, 7, 17, -51, -17, 12, -2, 3, 4, -22
    0x16f21f, 0xe0f7f4bf, 0x7bcdd01, 0xfa01143d, 0x818e24c, 0x7cb1914, 0xcefcd11, 0xea0403fe,
    // -6, -5, -3, 29, 13, -9, -38, 3, 28, 0, -4, -19, -15, -28, -28, 29, -26, 3, -2, -14, 1, 6, 15, -2, -66, 31, 7, -24, -35, 9, -10, -3
    0x1dfdfbfa, 0x3daf70d, 0xedfc001c, 0x1de4e4f1, 0xf2fe03e6, 0xfe0f0601, 0xe8071fbe, 0xfdf609dd,
    // -10, 1, -13, 9, 27, -8, -17, 18, 2, -15, 65, 24, -58, 5, 15, 3, -7, 63, 5, -9, 28, -3, 32, -8, 4, 6, -13, 34, 8, 0, -3, 14
    0x9f301f6, 0x12eff81b, 0x1841f102, 0x30f05c6, 0xf7053ff9, 0xf820fd1c, 0x22f30604, 0xefd0008,
    // 23, 30, -1, 35, 12, -11, -9, 54, -22, 17, -1, 35, 9, -51, 34, -24, 87, 1, 5, 30, 78, 10, 10, -4, 0, -22, 4, -15, -41, -21, 0, 16
    0x23ff1e17, 0x36f7f50c, 0x23ff11ea, 0xe822cd09, 0x1e050157, 0xfc0a0a4e, 0xf104ea00, 0x1000ebd7,
    // -28, -11, 20, -31, 50, -1, -4, 21, 9, 10, -34, -31, 8, 2, -7, -9, 24, -34, -2, -1, -20, 0, -1, 18, 3, -20, -26, -17, 10, -11, -3, -36
    0xe114f5e4, 0x15fcff32, 0xe1de0a09, 0xf7f90208, 0xfffede18, 0x12ff00ec, 0xefe6ec03, 0xdcfdf50a,
};
static const uint embedded_decoder3_ResidualBlock_2_body_pw_contract_bias_dwords[16] = {
    // -0.0006366, -1.127e-05, 0.00023, -0.0005045, 0.0005198, -0.0003781, 0.0001522, -0.0001634, 0.0005693, -0.001489, 0.0009475, -0.000769, 6.324e-05, -5.454e-05, -0.0001283, -0.000734
    0x80bd9137, 0x90220b89, 0x8e321042, 0x895b08fd, 0x961910aa, 0x924d13c3, 0x83930425, 0x92038834,
    // 0.0003982, 0.0001317, -0.0001593, 0.001778, -0.0001262, -0.00097, -0.000842, 0.0008307, -0.001689, -0.0001881, 0.0002291, -0.0005007, -0.001178, 7.766e-05, -0.0001421, 0.0001755
    0x8510e86, 0x17488938, 0x93f28823, 0x12ce92e6, 0x8a2a96eb, 0x901a0b82, 0x51794d3, 0x9c088a8,
};
static const uint embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -3, 16, -12, 4, 11, 0, -17, -23, 8, -14, 22, -28, -16, -32, -1, -13, 24, 7, -7, 0, 67, -3, -75, 55, -14, -29, -42, -61, -15, 8, -25, -2
    0x4f410fd, 0xe9ef000b, 0xe416f208, 0xf3ffe0f0, 0xf90718, 0x37b5fd43, 0xc3d6e3f2, 0xfee708f1,
    // 41, -1, 16, -18, -21, -10, -7, 21, 0, -26, -42, 7, 7, 47, 9, 12, 31, -21, 42, -19, 0, -15, 26, 22, -39, -52, -92, -77, -2, -70, 77, -17
    0xee10ff29, 0x15f9f6eb, 0x7d6e600, 0xc092f07, 0xed2aeb1f, 0x161af100, 0xb3a4ccd9, 0xef4dbafe,
    // 10, 3, 29, -51, 39, -31, 10, 14, 7, -11, -67, -41, 80, 54, 0, 47, 41, 27, 22, -41, 13, 48, 75, 6, -61, -27, 35, -9, -54, -32, 31, 42
    0xcd1d030a, 0xe0ae127, 0xd7bdf507, 0x2f003650, 0xd7161b29, 0x64b300d, 0xf723e5c3, 0x2a1fe0ca,
    // 56, 23, 8, -17, 33, -1, 2, -8, 8, 18, 26, -19, 40, 17, 13, 15, 15, 10, -10, 62, 14, -2, -39, -17, 19, 2, 74, 2, 6, -59, -116, -37
    0xef081738, 0xf802ff21, 0xed1a1208, 0xf0d1128, 0x3ef60a0f, 0xefd9fe0e, 0x24a0213, 0xdb8cc506,
    // 71, 49, 9, 29, 6, 1, -10, -27, -6, -3, -38, 22, 10, 18, -5, 31, -13, -7, 13, 30, 7, -8, -23, -28, -18, -18, 13, -47, 18, -4, -37, -34
    0x1d093147, 0xe5f60106, 0x16dafdfa, 0x1ffb120a, 0x1e0df9f3, 0xe4e9f807, 0xd10deeee, 0xdedbfc12,
    // 58, 21, -28, 11, 51, 55, 59, 7, 45, 13, 15, 12, -112, 36, -79, -24, 30, -5, -21, 58, -2, -6, 10, -62, 17, -3, -16, -19, 9, 1, 58, -57
    0xbe4153a, 0x73b3733, 0xc0f0d2d, 0xe8b12490, 0x3aebfb1e, 0xc20afafe, 0xedf0fd11, 0xc73a0109,
    // 3, -40, 17, 35, -6, 48, -11, 16, 8, 7, -4, 23, -31, 11, -6, -7, -18, 1, 16, 36, 9, 14, 19, 11, -29, -36, -14, 15, -21, -113, -52, -59
    0x2311d803, 0x10f530fa, 0x17fc0708, 0xf9fa0be1, 0x241001ee, 0xb130e09, 0xff2dce3, 0xc5cc8feb,
    // -68, -110, 21, 24, -16, 65, -10, 52, 22, -21, -19, 34, -52, -29, -17, -39, -44, 26, 8, -2, -10, -31, 57, 9, -3, -8, -2, 13, -27, -48, 0, 4
    0x181592bc, 0x34f641f0, 0x22edeb16, 0xd9efe3cc, 0xfe081ad4, 0x939e1f6, 0xdfef8fd, 0x400d0e5,
    // -53, -36, -5, -30, 24, -4, 1, 35, 11, 18, 12, -16, 3, -22, -20, -10, 33, 18, -11, -34, -5, 41, 43, 19, 1, 2, -9, 58, -38, 18, 25, 24
    0xe2fbdccb, 0x2301fc18, 0xf00c120b, 0xf6ecea03, 0xdef51221, 0x132b29fb, 0x3af70201, 0x181912da,
    // -7, -18, 4, 2, 24, 21, 27, 28, 21, -7, -18, -7, -44, 26, -21, 5, 18, -2, -1, 27, -12, 0, 23, 44, -1, 3, 46, -21, -14, -31, 30, 67
    0x204eef9, 0x1c1b1518, 0xf9eef915, 0x5eb1ad4, 0x1bfffe12, 0x2c1700f4, 0xeb2e03ff, 0x431ee1f2,
    // -35, -10, 24, -2, -15, 21, 115, -12, -2, -41, 1, -6, -48, 52, 22, -3, -79, -12, 28, 25, 13, -48, 9, 33, -16, 15, -20, -64, -30, -82, -8, 23
    0xfe18f6dd, 0xf47315f1, 0xfa01d7fe, 0xfd1634d0, 0x191cf4b1, 0x2109d00d, 0xc0ec0ff0, 0x17f8aee2,
    // 19, 39, -11, 3, 23, -16, 1, -6, 1, 26, 35, 1, 14, -11, -24, -2, -18, -21, -6, -36, -26, -64, -52, 44, -8, -24, 40, 12, 10, -10, 78, -9
    0x3f52713, 0xfa01f017, 0x1231a01, 0xfee8f50e, 0xdcfaebee, 0x2cccc0e6, 0xc28e8f8, 0xf74ef60a,
    // -12, -7, 8, -2, -2, -28, -46, 15, -16, 9, -24, -11, 11, -2, 3, 35, -4, 3, 82, 4, 49, 24, -3, -60, 5, 7, 11, 38, -17, -14, 46, -3
    0xfe08f9f4, 0xfd2e4fe, 0xf5e809f0, 0x2303fe0b, 0x45203fc, 0xc4fd1831, 0x260b0705, 0xfd2ef2ef,
    // -36, -57, 12, 1, -39, 24, -26, 0, 5, -16, 20, 17, 9, -11, 29, -24, -44, 32, 1, -11, -17, -16, 31, 7, 28, 37, 6, 36, -2, -32, -67, -73
    0x10cc7dc, 0xe618d9, 0x1114f005, 0xe81df509, 0xf50120d4, 0x71ff0ef, 0x2406251c, 0xb7bde0fe,
    // 3, 17, -1, 29, 11, 4, -23, -9, 2, 11, 17, 13, 16, -20, -1, 10, -18, 24, -18, -2, -2, 17, -13, 17, 11, 8, 22, 19, 10, 13, -40, -41
    0x1dff1103, 0xf7e9040b, 0xd110b02, 0xaffec10, 0xfeee18ee, 0x11f311fe, 0x1316080b, 0xd7d80d0a,
    // -45, 45, -6, 13, -13, -19, 27, -62, -6, 6, 83, -4, 54, -22, -16, -8, 16, -2, -73, -4, 25, 24, -66, 18, -2, -7, -54, 15, -24, 1, 9, -71
    0xdfa2dd3, 0xc21bedf3, 0xfc5306fa, 0xf8f0ea36, 0xfcb7fe10, 0x12be1819, 0xfcaf9fe, 0xb90901e8,
    // -3, 3, 0, 1, 6, 23, 2, -4, 38, -11, -4, -19, 0, -25, 23, 2, 40, 43, -5, 0, 66, -12, -75, 54, -24, -21, -56, -27, 15, -12, -26, 14
    0x10003fd, 0xfc021706, 0xedfcf526, 0x217e700, 0xfb2b28, 0x36b5f442, 0xe5c8ebe8, 0xee6f40f,
    // 64, 31, -31, -8, -24, -24, -17, 42, -51, -55, 21, -16, 12, 35, -26, -19, 33, -41, 39, -27, 9, -23, 34, 43, -35, -42, -102, -81, -3, -79, 58, -17
    0xf8e11f40, 0x2aefe8e8, 0xf015c9cd, 0xede6230c, 0xe527d721, 0x2b22e909, 0xaf9ad6dd, 0xef3ab1fd,
    // 14, 40, -45, -11, 19, -30, 11, 62, -63, -7, 14, -68, 79, 37, -38, 2, 24, 26, 6, -40, 13, 35, 77, 8, -62, -17, 30, -14, -72, -33, 16, 37
    0xf5d3280e, 0x3e0be213, 0xbc0ef9c1, 0x2da254f, 0xd8061a18, 0x84d230d, 0xf21eefc2, 0x2510dfb8,
    // 46, 22, 10, -2, 24, 37, 4, -4, 23, 28, 5, -20, 19, 19, 0, -17, 13, 12, -11, 68, 11, 3, -45, -15, 16, 3, 71, 6, 3, -51, -114, -41
    0xfe0a162e, 0xfc042518, 0xec051c17, 0xef001313, 0x44f50c0d, 0xf1d3030b, 0x6470310, 0xd78ecd03,
    // 73, 48, 2, 17, 4, -8, -3, -4, 0, -7, -26, 11, 15, 22, 5, 23, -13, -11, 9, 28, 14, -9, -20, -24, -12, -13, 14, -47, 3, -12, -45, -29
    0x11023049, 0xfcfdf804, 0xbe6f900, 0x1705160f, 0x1c09f5f3, 0xe8ecf70e, 0xd10ef3f4, 0xe3d3f403,
    // 47, 11, -14, -8, 72, 49, 55, -55, 56, 5, -12, 53, -100, 35, -97, -4, 3, -13, -20, 54, 10, 13, 8, -42, 34, -13, -18, -43, -21, 15, 63, -43
    0xf8f20b2f, 0xc9373148, 0x35f40538, 0xfc9f239c, 0x36ecf303, 0xd6080d0a, 0xd5eef322, 0xd53f0feb,
    // 15, -23, -15, 17, 14, 9, -28, -32, -20, -16, 3, 50, -27, 5, -28, -1, -13, -24, 23, 36, 19, 19, 28, 20, -24, -43, -11, 3, -14, -92, -60, -72
    0x11f1e90f, 0xe0e4090e, 0x3203f0ec, 0xffe405e5, 0x2417e8f3, 0x141c1313, 0x3f5d5e8, 0xb8c4a4f2,
    // -52, -76, -19, 5, 17, -5, -38, -37, -39, -39, 9, 91, -34, -33, -40, -6, -45, 8, 21, 5, -4, -30, 64, 10, -3, -20, -5, 12, 7, -26, -2, 4
    0x5edb4cc, 0xdbdafb11, 0x5b09d9d9, 0xfad8dfde, 0x51508d3, 0xa40e2fc, 0xcfbecfd, 0x4fee607,
    // -58, -36, 0, -28, 19, -7, 5, 15, -3, 22, 10, -11, 12, -25, -24, -6, 28, 24, -10, -30, -8, 43, 36, 15, -3, -3, -7, 58, -40, 25, 25, 25
    0xe400dcc6, 0xf05f913, 0xf50a16fd, 0xfae8e70c, 0xe2f6181c, 0xf242bf8, 0x3af9fdfd, 0x191919d8,
    // 0, 1, -25, -3, 38, -12, 20, -13, -20, -19, 3, 21, -34, 17, -33, 9, 13, -7, 6, 30, -9, -4, 25, 42, -6, -7, 47, -16, -6, -18, 26, 70
    0xfde70100, 0xf314f426, 0x1503edec, 0x9df11de, 0x1e06f90d, 0x2a19fcf7, 0xf02ff9fa, 0x461aeefa,
    // -20, 11, -17, -4, 0, -13, 103, -26, -31, -41, 17, 7, -53, 47, 29, 8, -55, -13, 47, 18, 12, -62, 13, 40, -23, 2, -23, -44, 32, -81, -12, 19
    0xfcef0bec, 0xe667f300, 0x711d7e1, 0x81d2fcb, 0x122ff3c9, 0x280dc20c, 0xd4e902e9, 0x13f4af20,
    // 25, 14, 28, -11, 19, -3, 14, 3, 49, 23, -11, 5, -2, 1, 14, 4, 6, -13, 2, -35, -23, -57, -44, 34, -15, -24, 45, 29, 25, -6, 76, -12
    0xf51c0e19, 0x30efd13, 0x5f51731, 0x40e01fe, 0xdd02f306, 0x22d4c7e9, 0x1d2de8f1, 0xf44cfa19,
    // 6, 3, -14, 7, -15, -12, -38, 34, -17, -4, 4, -33, 20, -11, -8, 13, -16, 11, 61, 4, 52, 24, -7, -54, 15, 20, 6, 31, -42, -29, 41, 5
    0x7f20306, 0x22daf4f1, 0xdf04fcef, 0xdf8f514, 0x43d0bf0, 0xcaf91834, 0x1f06140f, 0x529e3d6,
    // -57, -51, 9, 10, -28, 16, -45, -40, -13, 1, 22, 21, -2, -1, 16, -21, -50, 14, 9, -9, -23, -9, 30, 7, 29, 22, 9, 26, 11, -16, -60, -83
    0xa09cdc7, 0xd8d310e4, 0x151601f3, 0xeb10fffe, 0xf7090ece, 0x71ef7e9, 0x1a09161d, 0xadc4f00b,
    // -9, -9, 22, 14, 8, 4, -16, -4, 30, 18, -10, 7, 5, -10, 17, 6, -10, 19, -14, 5, -2, 26, -11, 11, 9, 13, 30, 13, 1, 16, -39, -50
    0xe16f7f7, 0xfcf00408, 0x7f6121e, 0x611f605, 0x5f213f6, 0xbf51afe, 0xd1e0d09, 0xced91001,
    // -61, -5, 44, 5, -20, 31, 48, -14, 93, 40, -5, -11, 34, -4, 51, 19, 21, 17, -62, -15, 23, 23, -70, 12, -11, -16, -56, 32, -23, -12, 19, -67
    0x52cfbc3, 0xf2301fec, 0xf5fb285d, 0x1333fc22, 0xf1c21115, 0xcba1717, 0x20c8f0f5, 0xbd13f4e9,
    // 20, -18, -6, 13, 14, 10, -24, 0, -13, 0, -2, -23, -17, -24, -28, -29, 15, -42, 49, -17, 19, 11, -85, 40, -1, 3, -45, -4, -46, -23, -28, 32
    0xdfaee14, 0xe80a0e, 0xe9fe00f3, 0xe3e4e8ef, 0xef31d60f, 0x28ab0b13, 0xfcd303ff, 0x20e4e9d2,
    // 30, -3, -16, -45, -78, -5, -11, -41, 58, -15, 1, 32, -7, 37, -3, -20, 64, -40, 93, -19, -30, -13, 18, 16, -46, -49, -80, -53, -5, -33, 59, -27
    0xd3f0fd1e, 0xd7f5fbb2, 0x2001f13a, 0xecfd25f9, 0xed5dd840, 0x1012f3e2, 0xcbb0cfd2, 0xe53bdffb,
    // -21, 28, 14, -54, -15, -20, 11, -70, 71, 43, -24, 1, 29, 32, -17, -23, 45, 36, 32, -47, 0, 38, 55, -5, -55, -24, 36, -6, -54, -7, 22, 44
    0xca0e1ceb, 0xba0becf1, 0x1e82b47, 0xe9ef201d, 0xd120242d, 0xfb372600, 0xfa24e8c9, 0x2c16f9ca,
    // 33, 35, -5, -1, 18, 29, 7, -51, -12, 14, -20, -6, 2, 27, -4, -4, 6, 23, -26, 61, 26, -8, -35, -22, 19, -31, 69, 27, -5, -49, -120, -24
    0xfffb2321, 0xcd071d12, 0xfaec0ef4, 0xfcfc1b02, 0x3de61706, 0xeaddf81a, 0x1b45e113, 0xe888cffb,
    // 74, 19, -9, 18, -2, 8, -13, -48, 12, 0, -13, 10, 6, 22, 1, 24, 3, -37, 22, 37, 4, -4, -18, -36, -29, 3, 30, -34, 5, -7, -46, -28
    0x12f7134a, 0xd0f308fe, 0xaf3000c, 0x18011606, 0x2516db03, 0xdceefc04, 0xde1e03e3, 0xe4d2f905,
    // 94, 50, 20, 62, 62, 32, 67, 61, 29, -25, 60, -15, -51, 30, -21, 34, 18, -9, -11, 45, -2, 6, 16, -33, 25, -13, -18, -9, -9, 4, 63, -45
    0x3e14325e, 0x3d43203e, 0xf13ce71d, 0x22eb1ecd, 0x2df5f712, 0xdf1006fe, 0xf7eef319, 0xd33f04f7,
    // 16, 0, 21, 22, -16, -4, -12, 41, 12, -4, 20, 41, 12, -7, 22, 18, -8, 24, 31, 35, 6, 17, 23, 17, -16, -84, -10, 7, -2, -67, -62, -85
    0x16150010, 0x29f4fcf0, 0x2914fc0c, 0x1216f90c, 0x231f18f8, 0x11171106, 0x7f6acf0, 0xabc2bdfe,
    // -44, -32, 57, 37, -13, -13, -2, 127, 34, -15, 59, 50, 3, -63, 43, 11, -49, 61, -4, -7, 1, -32, 58, 20, -2, -36, -18, -16, -7, -22, -7, -26
    0x2539e0d4, 0x7ffef3f3, 0x323bf122, 0xb2bc103, 0xf9fc3dcf, 0x143ae001, 0xf0eedcfe, 0xe6f9eaf9,
    // -60, -26, 10, -18, 20, -2, 10, 25, -1, 8, 6, -28, 7, -20, -13, -14, 22, 32, -23, -30, 6, 32, 43, 18, 2, -15, -13, 50, -39, 18, 30, 33
    0xee0ae6c4, 0x190afe14, 0xe40608ff, 0xf2f3ec07, 0xe2e92016, 0x122b2006, 0x32f3f102, 0x211e12d9,
    // -4, 15, 24, 3, 9, -8, 31, 31, 43, 5, 35, 4, -19, 8, 5, 8, 19, 14, 8, 22, -20, 0, 15, 34, 3, -20, 43, -23, -7, -6, 25, 61
    0x3180ffc, 0x1f1ff809, 0x423052b, 0x80508ed, 0x16080e13, 0x220f00ec, 0xe92bec03, 0x3d19faf9,
    // -39, 30, 21, -31, -19, -20, 107, 25, 9, -2, 22, 42, -54, 21, 6, 0, -57, -5, 62, 2, -11, -34, -9, 37, -11, -2, -26, -72, -3, -57, -25, -18
    0xe1151ed9, 0x196beced, 0x2a16fe09, 0x615ca, 0x23efbc7, 0x25f7def5, 0xb8e6fef5, 0xeee7c7fd,
    // 24, -3, -35, 0, 36, 21, -4, -22, -20, -5, -6, -28, 9, 21, -24, -1, -18, -29, -22, -20, -13, -61, -35, 45, -3, -14, 45, 13, 8, -24, 86, 4
    0xddfd18, 0xeafc1524, 0xe4fafbec, 0xffe81509, 0xeceae3ee, 0x2dddc3f3, 0xd2df2fd, 0x456e808,
    // -26, 2, -2, -2, -21, -23, -29, -45, 0, 11, -14, -4, -20, -16, 27, -1, 7, 31, 20, 10, 103, -23, 6, -37, 15, 4, 22, -2, -3, -21, 59, -2
    0xfefe02e6, 0xd3e3e9eb, 0xfcf20b00, 0xff1bf0ec, 0xa141f07, 0xdb06e967, 0xfe16040f, 0xfe3bebfd,
    // -49, -25, 17, 2, -24, 2, -23, 42, -17, -9, 12, 34, 2, -31, 18, -6, -45, 65, -23, -10, -2, -13, 33, 17, 29, 14, 6, 2, 11, -14, -70, -115
    0x211e7cf, 0x2ae902e8, 0x220cf7ef, 0xfa12e102, 0xf6e941d3, 0x1121f3fe, 0x2060e1d, 0x8dbaf20b,
    // 14, -10, 0, 18, 32, 0, -20, 9, -27, -2, -7, -8, 37, -3, 8, 27, -9, 17, -16, 1, -1, 12, -5, 6, 8, 19, 30, 25, -2, -8, -44, -34
    0x1200f60e, 0x9ec0020, 0xf8f9fee5, 0x1b08fd25, 0x1f011f7, 0x6fb0cff, 0x191e1308, 0xded4f8fe,
    // -26, -12, -28, 6, 45, 7, 11, -9, -79, -8, -34, -19, 33, 12, -64, 5, -5, -38, -52, -15, 11, 43, -58, 27, 9, 22, -64, 40, -38, -52, 18, -51
    0x6e4f4e6, 0xf70b072d, 0xeddef8b1, 0x5c00c21, 0xf1ccdafb, 0x1bc62b0b, 0x28c01609, 0xcd12ccda,
    // 7, -13, -14, 13, 18, 20, -9, 30, 16, -8, -22, 4, -3, -14, -5, -20, 28, -8, 55, -23, 16, 9, -81, 27, -13, 11, -51, 25, -34, -34, -35, 35
    0xdf2f307, 0x1ef71412, 0x4eaf810, 0xecfbf2fd, 0xe937f81c, 0x1baf0910, 0x19cd0bf3, 0x23dddede,
    // 23, 1, -6, -20, -77, 25, -17, -52, 2, -3, 43, -10, 7, 39, -68, -44, 43, -50, 95, -27, -16, -21, 12, 27, -56, -40, -97, -56, -3, -32, 51, -12
    0xecfa0117, 0xccef19b3, 0xf62bfd02, 0xd4bc2707, 0xe55fce2b, 0x1b0cebf0, 0xc89fd8c8, 0xf433e0fd,
    // -33, 35, 1, -18, -21, 15, 12, -46, -6, 77, 28, -48, 45, 25, -78, -47, 21, 31, 25, -42, 6, 26, 46, -2, -71, -16, 22, -8, -45, -12, 25, 48
    0xee0123df, 0xd20c0feb, 0xd01c4dfa, 0xd1b2192d, 0xd6191f15, 0xfe2e1a06, 0xf816f0b9, 0x3019f4d3,
    // 47, 44, -7, 21, 10, 42, 9, -23, 1, 7, -17, -5, 2, 25, 11, -17, 2, 26, -30, 68, 21, 0, -36, -17, 20, -35, 63, 26, -11, -55, -118, -24
    0x15f92c2f, 0xe9092a0a, 0xfbef0701, 0xef0b1902, 0x44e21a02, 0xefdc0015, 0x1a3fdd14, 0xe88ac9f5,
    // 60, 13, -17, 12, -7, 16, -8, -30, 13, 11, -6, -4, -3, 31, -8, 6, 2, -36, 19, 29, 9, -8, -19, -37, -22, 9, 29, -33, -9, -15, -55, -24
    0xcef0d3c, 0xe2f810f9, 0xfcfa0b0d, 0x6f81ffd, 0x1d13dc02, 0xdbedf809, 0xdf1d09ea, 0xe8c9f1f7,
    // 103, 31, 34, 37, 89, 9, 69, 9, 45, -49, 46, 24, -27, 19, -30, 55, 8, -10, -12, 45, 10, 20, 16, -20, 27, -6, -14, -35, -33, -2, 66, -35
    0x25221f67, 0x9450959, 0x182ecf2d, 0x37e213e5, 0x2df4f608, 0xec10140a, 0xddf2fa1b, 0xdd42fedf,
    // 33, -15, 38, 10, -3, -15, -22, -15, -14, -4, 35, 27, 29, -7, -6, 23, -8, 6, 40, 33, 16, 7, 17, 25, -21, -87, -18, -2, 15, -65, -60, -78
    0xa26f121, 0xf1eaf1fd, 0x1b23fcf2, 0x17faf91d, 0x212806f8, 0x19110710, 0xfeeea9eb, 0xb2c4bf0f,
    // -26, -48, 64, 0, 27, -52, -28, 16, -23, -13, 73, 63, 22, -58, 5, 54, -38, 33, 9, 2, 11, -41, 57, 29, -13, -36, -26, -6, 61, -20, 3, -11
    0x40d0e6, 0x10e4cc1b, 0x3f49f3e9, 0x3605c616, 0x20921da, 0x1d39d70b, 0xfae6dcf3, 0xf503ec3d,
    // -59, -24, 1, -20, 15, -13, 12, 9, -11, 5, 12, -16, 16, -26, -13, -6, 24, 34, -24, -26, -1, 37, 39, 14, -3, -17, -11, 52, -34, 17, 27, 32
    0xec01e8c5, 0x90cf30f, 0xf00c05f5, 0xfaf3e610, 0xe6e82218, 0xe2725ff, 0x34f5effd, 0x201b11de,
    // 2, 5, 30, -4, 28, -18, 21, -16, 2, 15, 48, 5, 2, 5, -16, 23, 10, 3, 17, 27, -17, -6, 8, 37, -7, -25, 37, -21, 15, -6, 33, 73
    0xfc1e0502, 0xf015ee1c, 0x5300f02, 0x17f00502, 0x1b11030a, 0x2508faef, 0xeb25e7f9, 0x4921fa0f,
    // -40, 24, 32, -27, -4, -10, 94, -17, -22, 17, 17, 37, -48, 34, -2, 10, -46, -5, 93, -7, -13, -60, -19, 46, -21, -27, -42, -43, 69, -58, -17, -5
    0xe52018d8, 0xef5ef6fc, 0x251111ea, 0xafe22d0, 0xf95dfbd2, 0x2eedc4f3, 0xd5d6e5eb, 0xfbefc645,
    // 34, -6, -23, -11, 27, 14, 8, 12, 33, -23, -35, -13, -12, 23, 18, -9, 5, -21, -21, -23, -13, -60, -26, 36, -5, -13, 55, 22, 7, -23, 82, -3
    0xf5e9fa22, 0xc080e1b, 0xf3dde921, 0xf71217f4, 0xe9ebeb05, 0x24e6c4f3, 0x1637f3fb, 0xfd52e907,
    // -10, 0, 7, 9, -29, 0, -23, -23, -13, 2, -4, -36, -6, -30, 2, -24, -8, 46, 13, 3, 108, -33, -5, -23, 12, 22, 15, -10, 0, -44, 58, 3
    0x90700f6, 0xe9e900e3, 0xdcfc02f3, 0xe802e2fa, 0x30d2ef8, 0xe9fbdf6c, 0xf60f160c, 0x33ad400,
    // -55, -19, 19, 4, -13, -13, -37, 6, -33, 5, 8, 42, -2, -26, 17, 11, -39, 44, -10, -11, -12, -9, 32, 26, 32, -4, 3, 1, 35, -2, -63, -118
    0x413edc9, 0x6dbf3f3, 0x2a0805df, 0xb11e6fe, 0xf5f62cd9, 0x1a20f7f4, 0x103fc20, 0x8ac1fe23,
    // 6, -13, -15, 8, 17, -13, -17, 24, -3, -3, -14, -1, 8, 4, 37, 12, 9, 13, -19, 4, -5, 20, 3, 1, 22, 18, 40, 24, -19, -5, -52, -48
    0x8f1f306, 0x18eff311, 0xfff2fdfd, 0xc250408, 0x4ed0d09, 0x10314fb, 0x18281216, 0xd0ccfbed,
    // -31, -13, -45, -2, 24, 6, 29, 66, 27, -17, -94, 18, 2, 21, 25, 5, 16, -12, -42, -29, 2, 40, -49, 14, 24, 4, -54, 58, -68, -55, 7, -65
    0xfed3f3e1, 0x421d0618, 0x12a2ef1b, 0x5191502, 0xe3d6f410, 0xecf2802, 0x3aca0418, 0xbf07c9bc,
};
static const uint embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias_dwords[8] = {
    // -0.02177, -0.05197, -0.03262, 0.02022, 0.02696, -0.004246, -0.02986, -0.03668, -0.03976, 0.004795, 0.04672, -0.0006204, -0.0373, 0.005333, 0.0199, -0.006847
    0xaaa7a593, 0x252da82d, 0x9c5926e7, 0xa8b2a7a5, 0x1ce9a917, 0x911529fb, 0x1d76a8c6, 0x9f032518,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass11(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage__decoder3_ResidualBlock_2_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _decoder3_ResidualBlock_2_residual_func_Split_output_grouped = {
        uint3(960, 540, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 32), // threadGroupSliceSize
        uint3(960, 540, 32), // storageSize
        uint3(32, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        33177600, // threadGroupStorageByteOffset
        storage__decoder3_ResidualBlock_2_residual_func_Split_output_grouped };
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 16), // threadGroupSliceSize
        uint3(1920, 1080, 16), // storageSize
        uint3(16, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.02335178479552269, storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004134095273911953, storage_embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = { embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005980394314974546, storage_embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_decoder3_ResidualBlock_2_body_pw_expand_bias = { embedded_decoder3_ResidualBlock_2_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_decoder3_ResidualBlock_2_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_2_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.00594315817579627, storage_embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder3_ResidualBlock_2_body_pw_contract_bias = { embedded_decoder3_ResidualBlock_2_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder3_ResidualBlock_2_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_2_body_pw_contract_bias };
    
    const ConstantBufferStorage<512> storage_embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_HWCN< ConstantBufferStorage<512> > embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 16, 32), // threadGroupSliceSize
        uint4(2, 2, 16, 32), // storageSize
        uint4(512, 1024, 32, 1), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0023969162721186876, storage_embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias = { embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias };
    
    // fused_fused_quantized_NHWC_/decoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_22 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_22 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(128, 2, 16);
    const uint3 groupSize_slice_22 = uint3(128, 2, 16);
    const uint3 storageSize_slice_22 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_22 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_22 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_22 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_22 = dot(groupStart_slice_22, tensorByteStrides_slice_22);
    const float quantizationScale_slice_22 = 0.027206305414438248;
    const RWBufferStorage storage_slice_22 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_22 = { logicalSize_slice_22, groupStart_slice_22, groupSize_slice_22, storageSize_slice_22, tensorByteStrides_slice_22, paddingBegin_slice_22, paddingEnd_slice_22, threadGroupByteOffsetInTensor_slice_22 + 49766400, quantizationScale_slice_22, storage_slice_22 };
    // FusedFusedquantized_/decoder3/ResidualBlock_2/residual_func/Concat_quantized_/decoder3/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/decoder3/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/decoder3/ResidualBlock_2/body/pw_expand/Conv_/decoder3/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/decoder3/ResidualBlock_2/body/pw_contract/Conv_/decoder3/ResidualBlock_2/Add_Fusedquantized_/decoder3/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_quantized_/decoder2/skip_pop_0/Add (32, 540, 960), (16, 1080, 1920), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,), (32, 16, 2, 2), (16,) -> (16, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FNB_CT2D_ADD<32, 1>(0.0215474721044302, 0.02673504687845707, 0.020062033087015152, 0.02540108747780323, _decoder3_ResidualBlock_2_residual_func_Split_output_grouped, fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias, embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_2_body_pw_expand_bias, embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_2_body_pw_contract_bias, embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias, slice_22, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_11
#ifdef MLSR_PASS_11_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass11_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_fused_quantized_NHWC_/decoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_23 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_23 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_23 = uint3(32, 1, 16);
    const uint3 storageSize_slice_23 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_23 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_23 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_23 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_23 = dot(groupStart_slice_23, tensorByteStrides_slice_23);
    const float quantizationScale_slice_23 = 0.027206305414438248;
    const RWBufferStorage storage_slice_23 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_23 = { logicalSize_slice_23, groupStart_slice_23, groupSize_slice_23, storageSize_slice_23, tensorByteStrides_slice_23, paddingBegin_slice_23, paddingEnd_slice_23, threadGroupByteOffsetInTensor_slice_23 + 49766400, quantizationScale_slice_23, storage_slice_23 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_23, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_11_POST


#ifdef MLSR_PASS_12
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/ConvNextBlock.hlsli"

static const uint embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 0, -10, -3, 1, 3, 0, -1, 7, -3, -5, 4, -18, -2, -16, -6, 9, 7, -2, -9, 0, 1, 11, -7, 4, -1, -6, 13, -1, -2, 8, 8, -6
    0x1fdf600, 0x7ff0003, 0xee04fbfd, 0x9faf0fe, 0xf7fe07, 0x4f90b01, 0xff0dfaff, 0xfa0808fe,
    // -3, 1, 3, -4, -2, 0, -7, -4, -6, 6, -2, -3, -4, 7, 4, -3, 4, 26, -23, -5, 21, 6, -5, 3, 9, 0, -21, 40, -5, 7, -1, 7
    0xfc0301fd, 0xfcf900fe, 0xfdfe06fa, 0xfd0407fc, 0xfbe91a04, 0x3fb0615, 0x28eb0009, 0x7ff07fb,
    // -5, -30, 9, -1, 68, -23, -5, -8, -2, 105, -19, -6, 7, 19, -57, 64, -10, 11, -5, 3, -19, -1, -6, 15, -2, -8, -3, 2, 7, -5, 1, 0
    0xff09e2fb, 0xf8fbe944, 0xfaed69fe, 0x40c71307, 0x3fb0bf6, 0xffaffed, 0x2fdf8fe, 0x1fb07,
    // -1, 3, 18, -1, 15, -8, -4, -8, -7, -12, -3, -14, 6, 13, 17, 4, 12, 14, -6, 5, -6, 5, -16, -21, 16, 23, -1, -1, 8, 56, -8, 20
    0xff1203ff, 0xf8fcf80f, 0xf2fdf4f9, 0x4110d06, 0x5fa0e0c, 0xebf005fa, 0xffff1710, 0x14f83808,
    // -4, -14, -6, -16, 13, 10, 4, 14, -21, 8, -7, -6, -7, -14, -8, -1, 6, 6, 2, 14, 0, -3, 0, -14, 8, -3, -14, 9, -2, 2, 2, -8
    0xf0faf2fc, 0xe040a0d, 0xfaf908eb, 0xfff8f2f9, 0xe020606, 0xf200fd00, 0x9f2fd08, 0xf80202fe,
    // -15, -3, 17, -4, 27, -15, -1, -28, -3, -12, -11, 41, -10, 6, 18, 7, 5, 7, 10, 1, 0, -1, -3, 11, -4, -1, -14, 4, -2, -3, 8, -4
    0xfc11fdf1, 0xe4fff11b, 0x29f5f4fd, 0x71206f6, 0x10a0705, 0xbfdff00, 0x4f2fffc, 0xfc08fdfe,
    // -1, -2, 6, 1, 1, 4, -2, 4, -4, 15, -1, 17, -8, -1, 7, 0, 56, 14, 71, 21, -83, 20, -52, 40, -102, -22, 33, -68, 25, 51, 10, 18
    0x106feff, 0x4fe0401, 0x11ff0ffc, 0x7fff8, 0x15470e38, 0x28cc14ad, 0xbc21ea9a, 0x120a3319,
    // 2, -19, 15, -10, 16, -5, 12, 14, -5, 8, 3, 4, 0, -2, 1, -14, -10, -9, -1, 0, 6, -7, 14, 12, -13, -1, 3, -4, -1, -16, -2, 11
    0xf60fed02, 0xe0cfb10, 0x40308fb, 0xf201fe00, 0xfff7f6, 0xc0ef906, 0xfc03fff3, 0xbfef0ff,
    // -11, -5, -21, -14, -6, 13, 13, 44, -2, 9, -9, -13, -15, -38, -28, -12, -6, -2, -6, -4, -6, -3, 6, 2, 10, 7, 5, 10, -4, -10, -11, 7
    0xf2ebfbf5, 0x2c0d0dfa, 0xf3f709fe, 0xf4e4daf1, 0xfcfafefa, 0x206fdfa, 0xa05070a, 0x7f5f6fc,
    // 3, -16, 7, -14, 1, -6, -5, -8, -5, -4, 9, 2, -1, 10, -8, -3, 16, 12, -19, -6, 6, 24, -5, 13, 0, 17, -12, -11, -7, 2, 40, -17
    0xf207f003, 0xf8fbfa01, 0x209fcfb, 0xfdf80aff, 0xfaed0c10, 0xdfb1806, 0xf5f41100, 0xef2802f9,
    // 6, 15, -9, 11, -10, 15, -17, -22, 7, -10, -1, -3, 2, 18, -4, -19, 21, -22, 19, 17, -27, 10, 2, 19, 5, 2, 8, -22, -2, -3, -12, -2
    0xbf70f06, 0xeaef0ff6, 0xfdfff607, 0xedfc1202, 0x1113ea15, 0x13020ae5, 0xea080205, 0xfef4fdfe,
    // -56, 75, -28, -3, 4, -10, -37, 37, -21, 100, -30, -9, 25, 11, 47, 69, -4, -6, 14, 14, 5, -19, -6, -34, 20, 0, 16, 0, 4, 29, -5, 28
    0xfde44bc8, 0x25dbf604, 0xf7e264eb, 0x452f0b19, 0xe0efafc, 0xdefaed05, 0x100014, 0x1cfb1d04,
    // -4, 4, -6, 6, -20, 2, -5, -7, 2, 2, 20, 5, -1, -7, 5, -14, -17, -5, -2, -8, 16, -13, 18, -7, 11, -1, -15, 1, -3, -17, -19, -5
    0x6fa04fc, 0xf9fb02ec, 0x5140202, 0xf205f9ff, 0xf8fefbef, 0xf912f310, 0x1f1ff0b, 0xfbedeffd,
    // -7, 3, 0, 6, 12, 3, -6, 6, -7, -2, -2, -2, 6, 0, 4, -9, 0, 9, -10, 1, 0, 7, 1, -3, 19, 7, -6, 4, 2, -1, 11, -2
    0x60003f9, 0x6fa030c, 0xfefefef9, 0xf7040006, 0x1f60900, 0xfd010700, 0x4fa0713, 0xfe0bff02,
    // 9, -10, 7, -10, 11, -5, 6, -9, 0, 2, 5, 3, 1, 16, 32, 10, -1, 5, -13, 6, -5, 8, -6, 0, -8, -4, -1, -3, -2, 8, -4, -24
    0xf607f609, 0xf706fb0b, 0x3050200, 0xa201001, 0x6f305ff, 0xfa08fb, 0xfdfffcf8, 0xe8fc08fe,
    // 6, 2, -3, -13, 3, 5, 3, 13, -11, -1, 8, 1, -2, -8, -11, -7, -27, 34, 2, 50, -40, -28, 2, 22, 10, -47, -13, 38, 3, -103, 72, -37
    0xf3fd0206, 0xd030503, 0x108fff5, 0xf9f5f8fe, 0x320222e5, 0x1602e4d8, 0x26f3d10a, 0xdb489903,
    // -4, 4, 6, 11, -2, -8, 2, -21, -5, 5, -2, -7, 7, 17, 5, 20, -1, -7, -2, -5, 0, -10, 1, 9, -8, -7, 13, -13, -1, 7, 4, 16
    0xb0604fc, 0xeb02f8fe, 0xf9fe05fb, 0x14051107, 0xfbfef9ff, 0x901f600, 0xf30df9f8, 0x100407ff,
    // 4, -5, -19, -14, 21, 37, 0, -11, -24, 45, -24, -29, -5, 44, -32, 19, -8, 16, -8, 6, -15, -9, -16, -13, 26, -6, 13, 1, 2, 7, -8, 16
    0xf2edfb04, 0xf5002515, 0xe3e82de8, 0x13e02cfb, 0x6f810f8, 0xf3f0f7f1, 0x10dfa1a, 0x10f80702,
    // 6, 2, -5, 0, 24, 8, -13, -3, 4, 7, -7, 4, -3, 12, 26, -4, 11, -4, 7, 6, 4, 4, -22, 10, -13, 6, 2, -18, 6, 11, 17, 7
    0xfb0206, 0xfdf30818, 0x4f90704, 0xfc1a0cfd, 0x607fc0b, 0xaea0404, 0xee0206f3, 0x7110b06,
    // -8, 8, -5, -1, -13, 9, 4, -9, 0, -8, -3, 5, -5, -18, -15, -13, 1, -2, 1, 10, 5, -7, 0, -3, -19, -6, -15, 6, -1, 15, 2, 10
    0xfffb08f8, 0xf70409f3, 0x5fdf800, 0xf3f1eefb, 0xa01fe01, 0xfd00f905, 0x6f1faed, 0xa020fff,
    // 46, -41, -17, -31, -17, 23, 12, -5, 35, -9, 20, 41, -18, 39, -104, 33, -10, 7, -8, 18, 22, -29, 22, -13, 32, -26, -1, 7, -2, -18, -24, 0
    0xe1efd72e, 0xfb0c17ef, 0x2914f723, 0x219827ee, 0x12f807f6, 0xf316e316, 0x7ffe620, 0xe8eefe,
    // -7, -3, 3, -10, -2, -1, 6, -6, 2, -14, -3, -6, -6, -9, -5, 6, 13, -3, 1, -10, 16, 17, -3, -10, -23, 22, -7, 0, 3, 17, 4, 4
    0xf603fdf9, 0xfa06fffe, 0xfafdf202, 0x6fbf7fa, 0xf601fd0d, 0xf6fd1110, 0xf916e9, 0x4041103,
    // -1, 7, -1, 16, -24, -11, 9, -24, 13, 6, 3, 4, 8, 11, 3, -13, -7, 9, 0, 3, -2, 1, -13, 3, 7, 5, -6, 8, 4, 12, 0, -2
    0x10ff07ff, 0xe809f5e8, 0x403060d, 0xf3030b08, 0x30009f9, 0x3f301fe, 0x8fa0507, 0xfe000c04,
    // 0, 15, -15, -3, 32, 9, -8, -5, -10, 13, -17, 0, 5, 5, 67, 6, -5, -4, -8, -9, -1, -5, -4, 3, -2, 0, 0, -1, -1, -13, -1, 11
    0xfdf10f00, 0xfbf80920, 0xef0df6, 0x6430505, 0xf7f8fcfb, 0x3fcfbff, 0xff0000fe, 0xbfff3ff,
    // 10, -6, 4, -3, 9, 6, 12, -12, -2, -13, 6, -17, 8, 1, 66, 9, -25, 24, 10, 4, 35, -60, -68, -34, 88, 46, 42, 18, 14, 30, -66, 21
    0xfd04fa0a, 0xf40c0609, 0xef06f3fe, 0x9420108, 0x40a18e7, 0xdebcc423, 0x122a2e58, 0x15be1e0e,
    // -4, -3, -5, 0, -1, 5, 18, -8, -20, 19, -11, -11, -2, 12, -12, 13, 1, -2, -18, -8, 11, 12, 4, 4, 15, 12, -6, 4, -4, -6, -8, 8
    0xfbfdfc, 0xf81205ff, 0xf5f513ec, 0xdf40cfe, 0xf8eefe01, 0x4040c0b, 0x4fa0c0f, 0x8f8fafc,
    // 7, -20, -11, -14, 30, 14, 25, 21, -12, 17, -25, -24, -1, -8, -11, -9, -18, 10, -19, 14, -16, 3, 10, -4, 10, 0, 0, 3, 2, -11, -6, -4
    0xf2f5ec07, 0x15190e1e, 0xe8e711f4, 0xf7f5f8ff, 0xeed0aee, 0xfc0a03f0, 0x300000a, 0xfcfaf502,
    // -18, -3, -1, -5, -10, -4, 6, -4, 10, -8, 4, -9, -3, -13, -6, 15, 17, -20, 12, -4, -23, 7, 6, 8, 13, -1, 13, -23, 1, 1, -26, -9
    0xfbfffdee, 0xfc06fcf6, 0xf704f80a, 0xffaf3fd, 0xfc0cec11, 0x80607e9, 0xe90dff0d, 0xf7e60101,
    // 11, -1, -8, 5, -21, 0, 1, -3, 17, 12, 13, 5, -3, 4, -1, -12, 27, 8, -33, -6, -13, 44, 19, 7, 51, 34, -7, -28, 1, 7, 6, -19
    0x5f8ff0b, 0xfd0100eb, 0x50d0c11, 0xf4ff04fd, 0xfadf081b, 0x7132cf3, 0xe4f92233, 0xed060701,
    // -23, -21, 3, 18, 16, -46, 24, -41, -73, -93, 9, 71, -18, -42, -96, -35, -1, -7, 18, -13, -1, 0, -5, -10, -20, -1, -12, 1, 8, 12, 26, 1
    0x1203ebe9, 0xd718d210, 0x4709a3b7, 0xdda0d6ee, 0xf312f9ff, 0xf6fb00ff, 0x1f4ffec, 0x11a0c08,
    // 16, 0, -13, 14, -6, 16, 7, -10, 25, 18, 3, 9, -3, 21, -2, -9, 3, -1, 23, 5, -7, 0, -15, -5, -16, -13, -1, -10, 7, 8, 25, 13
    0xef30010, 0xf60710fa, 0x9031219, 0xf7fe15fd, 0x517ff03, 0xfbf100f9, 0xf6fff3f0, 0xd190807,
    // 12, -8, 24, -12, 12, -8, -1, 9, -12, 18, -6, 1, 3, 12, 5, 12, -7, -14, 6, -9, -20, 2, 21, 14, 3, 11, 9, -12, -1, -20, -12, 2
    0xf418f80c, 0x9fff80c, 0x1fa12f4, 0xc050c03, 0xf706f2f9, 0xe1502ec, 0xf4090b03, 0x2f4ecff,
    // -12, 15, 5, 5, -46, 9, 3, 3, -1, -7, 5, -10, 8, 0, -21, -6, 9, -1, 15, -4, 1, -3, -1, 24, -3, 9, -2, 4, 4, 1, 5, 10
    0x5050ff4, 0x30309d2, 0xf605f9ff, 0xfaeb0008, 0xfc0fff09, 0x18fffd01, 0x4fe09fd, 0xa050104,
    // -28, 7, 7, 23, -32, -31, 9, -17, -10, -24, -2, 10, 2, -20, -46, 3, -52, -31, 7, 29, -48, -6, 20, -91, -128, 62, -42, -35, -13, 23, -60, 22
    0x170707e4, 0xef09e1e0, 0xafee8f6, 0x3d2ec02, 0x1d07e1cc, 0xa514fad0, 0xddd63e80, 0x16c417f3,
    // 0, 6, -10, -18, 12, -13, 0, 19, 25, -15, 5, 9, 3, -15, 2, -18, 2, -6, 10, -8, 9, -3, -4, 17, -10, -5, 4, -11, 2, -4, 7, 15
    0xeef60600, 0x1300f30c, 0x905f119, 0xee02f103, 0xf80afa02, 0x11fcfd09, 0xf504fbf6, 0xf07fc02,
    // 19, -8, -1, -36, 13, 27, 14, 25, -4, 22, -19, -12, 1, 22, -6, 9, 9, -8, 0, 4, 2, 9, 4, -4, -19, -2, -3, -5, -4, 4, 1, 0
    0xdcfff813, 0x190e1b0d, 0xf4ed16fc, 0x9fa1601, 0x400f809, 0xfc040902, 0xfbfdfeed, 0x104fc,
    // -3, 6, -3, -6, 3, 7, 1, 0, 3, 9, 0, 2, 7, 6, 21, 4, -11, 5, -13, 1, -23, 10, -18, 11, -12, -1, -1, -29, 1, 6, -10, 10
    0xfafd06fd, 0x10703, 0x2000903, 0x4150607, 0x1f305f5, 0xbee0ae9, 0xe3fffff4, 0xaf60601,
    // 3, -14, -10, 12, 3, -8, 28, -9, 2, 22, 2, 13, -2, 3, -5, -11, -27, -11, 15, -4, 6, -8, -10, 6, -20, 1, 18, -5, 4, 7, -22, 5
    0xcf6f203, 0xf71cf803, 0xd021602, 0xf5fb03fe, 0xfc0ff5e5, 0x6f6f806, 0xfb1201ec, 0x5ea0704,
    // -23, 60, -5, -18, 10, 3, -49, -16, -38, 104, -32, -59, 24, 53, -11, 53, -1, -3, 10, 8, 24, 8, -12, 3, -15, 8, -4, 6, 2, -7, 11, -8
    0xeefb3ce9, 0xf0cf030a, 0xc5e068da, 0x35f53518, 0x80afdff, 0x3f40818, 0x6fc08f1, 0xf80bf902,
    // 7, -11, -9, 5, -8, -1, 26, -4, 12, 26, -14, 3, 1, 10, -3, -8, 1, 1, 17, 7, -4, 6, -2, -12, -22, -10, -2, -5, -6, 6, 9, 3
    0x5f7f507, 0xfc1afff8, 0x3f21a0c, 0xf8fd0a01, 0x7110101, 0xf4fe06fc, 0xfbfef6ea, 0x30906fa,
    // -6, 11, 3, 5, -12, -12, -1, -4, 29, -6, 7, 5, -1, -8, -2, 8, 3, 2, -11, -4, 1, 15, 10, -13, 8, -1, 6, -3, -1, -10, 7, -11
    0x5030bfa, 0xfcfff4f4, 0x507fa1d, 0x8fef8ff, 0xfcf50203, 0xf30a0f01, 0xfd06ff08, 0xf507f6ff,
    // -26, -8, 24, 5, 0, -39, 23, -33, 2, -21, -8, 31, -3, -14, -30, 14, -6, 5, 7, 0, 14, -7, -1, 2, -4, -16, -7, 5, 8, 7, -1, -12
    0x518f8e6, 0xdf17d900, 0x1ff8eb02, 0xee2f2fd, 0x705fa, 0x2fff90e, 0x5f9f0fc, 0xf4ff0708,
    // 24, -5, 5, -16, -11, 12, -1, 13, 34, -9, -9, -38, 9, 37, -40, 0, -22, 14, -61, 28, 114, 13, -50, -20, 37, 122, 4, -13, 10, 44, -15, 41
    0xf005fb18, 0xdff0cf5, 0xdaf7f722, 0xd82509, 0x1cc30eea, 0xecce0d72, 0xf3047a25, 0x29f12c0a,
    // 5, -1, 2, 1, -18, 7, 4, -15, -7, 11, -6, -21, -2, 20, -8, 13, -4, -1, -6, 9, -2, 6, -11, 4, -16, 2, 19, 12, -5, -3, 10, -3
    0x102ff05, 0xf10407ee, 0xebfa0bf9, 0xdf814fe, 0x9fafffc, 0x4f506fe, 0xc1302f0, 0xfd0afdfb,
    // -5, -7, -5, -29, -3, -10, 38, 22, 11, -16, -19, -13, 6, -36, 6, -13, 4, 4, 3, -7, 2, -1, -8, -3, 6, 1, 8, 11, -4, 3, 0, 1
    0xe3fbf9fb, 0x1626f6fd, 0xf3edf00b, 0xf306dc06, 0xf9030404, 0xfdf8ff02, 0xb080106, 0x10003fc,
    // 7, -4, 0, 19, 21, 15, -18, 5, -4, 19, 3, -7, -1, 6, 21, -4, -9, 3, -1, 5, 7, -17, 17, -10, -2, -7, -13, 21, 1, -14, -11, 16
    0x1300fc07, 0x5ee0f15, 0xf90313fc, 0xfc1506ff, 0x5ff03f7, 0xf611ef07, 0x15f3f9fe, 0x10f5f201,
    // -9, 5, 14, 2, 19, 1, -19, 3, -7, -9, 0, -6, -2, -5, -2, 20, 2, -3, 17, 7, 9, -15, -13, 0, 1, 3, -4, -4, 11, 21, 5, 20
    0x20e05f7, 0x3ed0113, 0xfa00f7f9, 0x14fefbfe, 0x711fd02, 0xf3f109, 0xfcfc0301, 0x1405150b,
    // -3, -21, -80, -52, -75, 15, 44, 21, -52, 25, -29, 29, -22, -12, -109, 57, 30, -7, 5, -2, -23, 22, 3, -29, -19, 33, -20, -24, -3, 43, 18, 34
    0xccb0ebfd, 0x152c0fb5, 0x1de319cc, 0x3993f4ea, 0xfe05f91e, 0xe30316e9, 0xe8ec21ed, 0x22122bfd,
    // -9, 5, 17, 5, -1, 4, -14, -1, -6, 3, -4, 5, -1, -4, -11, 10, 4, 3, -4, 10, -12, -14, 3, -35, -2, 1, 4, 8, 4, 16, 5, 8
    0x51105f7, 0xfff204ff, 0x5fc03fa, 0xaf5fcff, 0xafc0304, 0xdd03f2f4, 0x80401fe, 0x8051004,
    // 8, -2, -1, 12, -2, 6, -12, -7, -4, 10, 4, -3, 3, 17, 5, 0, -6, 7, -18, 6, 29, -3, -10, 16, 2, 1, 0, 2, 10, 8, 3, 12
    0xcfffe08, 0xf9f406fe, 0xfd040afc, 0x51103, 0x6ee07fa, 0x10f6fd1d, 0x2000102, 0xc03080a,
    // -7, 38, -36, -19, -31, 11, 18, -1, 15, 15, -37, 7, -7, -11, 44, 11, -9, 8, -11, 7, 9, 21, -24, 12, -24, -13, -12, -2, -7, 7, 4, -7
    0xeddc26f9, 0xff120be1, 0x7db0f0f, 0xb2cf5f9, 0x7f508f7, 0xce81509, 0xfef4f3e8, 0xf90407f9,
    // 10, 0, 7, -10, -12, -8, 5, -11, 2, 1, 0, -9, 9, 27, -49, -6, 33, -86, 91, 81, 1, 1, -16, -45, -33, -34, 33, 37, -16, 31, -46, -67
    0xf607000a, 0xf505f8f4, 0xf7000102, 0xfacf1b09, 0x515baa21, 0xd3f00101, 0x2521dedf, 0xbdd21ff0,
    // 39, -7, 16, -22, -11, 12, -4, 14, -7, 10, -3, 0, 6, 26, -1, 17, -11, 5, -18, -10, -12, 2, 7, 7, 11, 1, 9, -5, -5, -21, -22, -2
    0xea10f927, 0xefc0cf5, 0xfd0af9, 0x11ff1a06, 0xf6ee05f5, 0x70702f4, 0xfb09010b, 0xfeeaebfb,
    // -11, 12, -26, -11, -14, -27, 41, -12, 15, -21, -19, 10, 6, -34, -16, -28, 1, 0, -4, -13, 7, -2, -12, 11, -3, 14, 3, -7, -4, 7, -7, 2
    0xf5e60cf5, 0xf429e5f2, 0xaedeb0f, 0xe4f0de06, 0xf3fc0001, 0xbf4fe07, 0xf9030efd, 0x2f907fc,
    // 17, 10, -2, -2, -3, 10, 4, -12, 16, 1, -7, 1, -6, -2, 15, -4, 42, 3, 1, 11, 3, 33, -40, 8, 19, -19, 11, -13, 3, 28, 12, -23
    0xfefe0a11, 0xf4040afd, 0x1f90110, 0xfc0ffefa, 0xb01032a, 0x8d82103, 0xf30bed13, 0xe90c1c03,
    // -2, 10, -10, 1, -26, 8, 24, 20, 12, 11, -15, 6, -6, -23, -13, 6, -10, -4, 8, -9, 24, 6, -5, -26, -20, -16, -6, 38, -10, 10, 45, 8
    0x1f60afe, 0x141808e6, 0x6f10b0c, 0x6f3e9fa, 0xf708fcf6, 0xe6fb0618, 0x26faf0ec, 0x82d0af6,
    // -30, 28, -29, 26, -41, -77, -16, 28, 22, 18, 35, -15, 23, -62, 90, 76, -6, -25, -3, -24, 50, 33, 0, 50, -67, 5, -19, -21, -8, -33, 25, -18
    0x1ae31ce2, 0x1cf0b3d7, 0xf1231216, 0x4c5ac217, 0xe8fde7fa, 0x32002132, 0xebed05bd, 0xee19dff8,
    // -4, -1, 10, -1, 1, -18, 10, 4, -3, -9, -9, -4, 7, -11, -9, -11, -10, 2, 1, 11, 24, 0, -30, -15, -13, 18, 11, 9, 0, 23, 5, 4
    0xff0afffc, 0x40aee01, 0xfcf7f7fd, 0xf5f7f507, 0xb0102f6, 0xf1e20018, 0x90b12f3, 0x4051700,
    // 6, 5, 21, -11, -27, -5, -5, -5, 13, 6, 3, 9, 0, 12, -8, 17, -3, 5, 29, 2, -28, -10, 10, -3, 10, -6, -9, 12, -6, -4, -38, -2
    0xf5150506, 0xfbfbfbe5, 0x903060d, 0x11f80c00, 0x21d05fd, 0xfd0af6e4, 0xcf7fa0a, 0xfedafcfa,
    // -13, -29, 3, 2, 41, -8, 11, -8, 32, -2, 29, -19, -4, -14, -13, 1, 29, -1, 9, -3, -19, 19, -15, 23, -8, 7, -2, 2, -7, -2, 16, -8
    0x203e3f3, 0xf80bf829, 0xed1dfe20, 0x1f3f2fc, 0xfd09ff1d, 0x17f113ed, 0x2fe07f8, 0xf810fef9,
    // 5, -24, 34, 28, -9, -27, 13, 0, -51, -24, 22, -10, 1, -22, -10, -5, 3, 17, -11, -59, 82, -14, 19, -12, 40, -64, -8, 23, -2, 29, -87, -50
    0x1c22e805, 0xde5f7, 0xf616e8cd, 0xfbf6ea01, 0xc5f51103, 0xf413f252, 0x17f8c028, 0xcea91dfe,
    // 21, -39, 21, -5, 47, 22, -21, 40, -18, 22, 6, 4, -8, 14, 10, 12, 1, -14, 3, -9, -11, -5, 11, 26, -1, 8, 22, -7, -2, -14, -2, 9
    0xfb15d915, 0x28eb162f, 0x40616ee, 0xc0a0ef8, 0xf703f201, 0x1a0bfbf5, 0xf91608ff, 0x9fef2fe,
    // 0, 1, -1, -10, 16, 18, 11, 8, -6, 17, -29, -7, -1, 11, -5, -1, 6, 5, 16, 3, -7, -2, -2, -24, 8, 6, -2, 1, 3, 20, 4, 16
    0xf6ff0100, 0x80b1210, 0xf9e311fa, 0xfffb0bff, 0x3100506, 0xe8fefef9, 0x1fe0608, 0x10041403,
    // -8, 11, 17, 0, -11, -15, 4, -9, -9, -17, -11, 14, 7, 14, -15, 2, -5, -28, 6, 0, 34, -16, 18, -5, 0, 5, 23, -7, -6, -4, -13, 6
    0x110bf8, 0xf704f1f5, 0xef5eff7, 0x2f10e07, 0x6e4fb, 0xfb12f022, 0xf9170500, 0x6f3fcfa,
    // 4, -4, -8, -18, -14, 8, -5, 11, -8, -4, 6, -5, 0, -12, 7, -8, -11, 3, -15, -2, 26, 9, -5, 0, -13, 2, 6, -25, -7, -22, 14, 6
    0xeef8fc04, 0xbfb08f2, 0xfb06fcf8, 0xf807f400, 0xfef103f5, 0xfb091a, 0xe70602f3, 0x60eeaf9,
    // -16, 39, -3, 30, -69, 20, -18, 0, -17, 120, -69, -25, 18, 43, -22, 31, -8, -3, -5, -3, 20, -2, 6, 5, -7, -16, 0, 1, -2, 3, -18, -11
    0x1efd27f0, 0xee14bb, 0xe7bb78ef, 0x1fea2b12, 0xfdfbfdf8, 0x506fe14, 0x100f0f9, 0xf5ee03fe,
    // 8, -3, -7, -8, -8, 2, -1, 4, 5, -8, 3, 0, -3, 0, -7, -2, -3, -6, 2, 11, -15, 4, -5, -7, -20, -10, 11, 7, 0, 0, 10, -3
    0xf8f9fd08, 0x4ff02f8, 0x3f805, 0xfef900fd, 0xb02fafd, 0xf9fb04f1, 0x70bf6ec, 0xfd0a0000,
    // -11, 13, 6, 0, 0, -11, 1, 2, 10, -1, -7, -3, 7, 2, 1, 0, 7, -16, -16, 3, -4, -1, 24, 1, 9, 15, 0, -3, -2, 3, 16, -12
    0x60df5, 0x201f500, 0xfdf9ff0a, 0x10207, 0x3f0f007, 0x118fffc, 0xfd000f09, 0xf41003fe,
    // 6, -4, 9, 1, -20, 13, 8, 2, -2, -7, 17, -12, 3, 8, -25, -20, -6, 4, 2, -4, -4, -5, 2, 0, 12, -6, 4, 5, 0, -10, -16, 10
    0x109fc06, 0x2080dec, 0xf411f9fe, 0xece70803, 0xfc0204fa, 0x2fbfc, 0x504fa0c, 0xaf0f600,
    // 3, -6, -2, -6, -16, 7, -3, 1, 0, 2, 13, 1, -1, 2, -18, -25, 5, 35, 91, 6, 46, -4, -18, 26, 22, 5, -41, -11, 14, 59, -50, -111
    0xfafefa03, 0x1fd07f0, 0x10d0200, 0xe7ee02ff, 0x65b2305, 0x1aeefc2e, 0xf5d70516, 0x91ce3b0e,
    // -6, 6, -10, 0, 10, 6, 0, 5, -14, 1, -1, -12, -4, -8, -2, -16, -9, 7, 7, -1, -15, 1, 3, -3, 2, -11, 4, 4, -3, -7, -3, 8
    0xf606fa, 0x500060a, 0xf4ff01f2, 0xf0fef8fc, 0xff0707f7, 0xfd0301f1, 0x404f502, 0x8fdf9fd,
    // 1, -3, -8, -2, 5, -5, 2, 6, 5, 12, 6, -3, 2, -2, -4, -14, -4, -10, -5, 1, -4, -1, 5, 5, -3, 5, 8, 6, 2, 11, 6, -8
    0xfef8fd01, 0x602fb05, 0xfd060c05, 0xf2fcfe02, 0x1fbf6fc, 0x505fffc, 0x60805fd, 0xf8060b02,
};
static const uint embedded_decoder2_ResidualBlock_1_body_conv_dw_bias_dwords[8] = {
    // 0.02924, 0.00257, -0.0003932, -0.002708, 0.00988, 0.01339, -0.0408, -0.01321, -8.61e-05, 0.0247, -0.005768, -0.01117, 0.02104, -0.002993, 0.02068, -0.008545
    0x1943277c, 0x998c8e71, 0x22db210f, 0xa2c3a939, 0x265385a5, 0xa1b89de8, 0x9a212563, 0xa060254b,
};
static const uint embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -49, -3, -70, 0, 31, -71, 37, -23, -58, -111, -50, -51, -7, 27, -57, 33, -9, -36, -39, 60, -37, -37, -3, 13, 20, 30, 24, -25, -6, 2, -90, 54
    0xbafdcf, 0xe925b91f, 0xcdce91c6, 0x21c71bf9, 0x3cd9dcf7, 0xdfddbdb, 0xe7181e14, 0x36a602fa,
    // -100, 22, 66, 32, 28, 32, 54, 61, -87, 90, 28, -2, 10, 1, 69, -64, -62, -4, -23, 76, 82, -32, -61, -14, 44, 26, -30, 22, -13, 14, 65, -2
    0x2042169c, 0x3d36201c, 0xfe1c5aa9, 0xc045010a, 0x4ce9fcc2, 0xf2c3e052, 0x16e21a2c, 0xfe410ef3,
    // 56, -53, 14, -71, 19, -35, 9, -11, -10, -51, 49, 43, 92, 25, 3, 54, -96, 72, 12, -34, -107, -53, -45, -100, 53, 23, -57, -3, 12, -30, 23, 4
    0xb90ecb38, 0xf509dd13, 0x2b31cdf6, 0x3603195c, 0xde0c48a0, 0x9cd3cb95, 0xfdc71735, 0x417e20c,
    // -38, -84, 52, 46, -13, -29, 57, 14, -17, 9, 3, 16, -41, -41, 3, 0, 87, -43, 100, -24, -17, -53, 73, 31, -32, 6, 9, -11, 20, -32, -51, -40
    0x2e34acda, 0xe39e3f3, 0x100309ef, 0x3d7d7, 0xe864d557, 0x1f49cbef, 0xf50906e0, 0xd8cde014,
    // 49, -44, 101, -52, 28, 74, -51, -60, 49, 121, 70, -25, -62, 35, 22, -25, 73, 2, -26, -3, 73, 60, 40, 118, -2, -15, -14, 58, -22, 52, -27, 40
    0xcc65d431, 0xc4cd4a1c, 0xe7467931, 0xe71623c2, 0xfde60249, 0x76283c49, 0x3af2f1fe, 0x28e534ea,
    // 66, -66, -87, -2, 43, 82, 16, -115, -54, 47, -40, 21, 75, -41, 44, -47, -102, -18, 1, 20, -40, -47, -18, 9, -90, 25, -29, 75, -48, 67, -74, 40
    0xfea9be42, 0x8d10522b, 0x15d82fca, 0xd12cd74b, 0x1401ee9a, 0x9eed1d8, 0x4be319a6, 0x28b643d0,
    // 75, 57, 74, 27, -33, 32, -51, -28, 60, 46, -54, -11, 38, -26, 56, 56, 52, -101, -86, -34, 41, 64, 45, -53, -58, 54, -37, 38, -29, 15, -105, -22
    0x1b4a394b, 0xe4cd20df, 0xf5ca2e3c, 0x3838e626, 0xdeaa9b34, 0xcb2d4029, 0x26db36c6, 0xea970fe3,
    // 27, -7, -14, -98, -6, 17, -36, 27, -48, -40, -68, 1, -44, -88, -7, 9, 13, 38, -81, -3, -52, 76, -65, 9, -50, 26, -1, 28, 35, 4, 1, -5
    0x9ef2f91b, 0x1bdc11fa, 0x1bcd8d0, 0x9f9a8d4, 0xfdaf260d, 0x9bf4ccc, 0x1cff1ace, 0xfb010423,
    // 33, -12, 13, -45, -57, -50, -11, 127, 58, 17, 33, 23, -48, 5, 50, 4, -10, 17, -25, -34, 16, -16, -35, 43, 31, 91, 0, 2, 49, -41, -101, -39
    0xd30df421, 0x7ff5cec7, 0x1721113a, 0x43205d0, 0xdee711f6, 0x2bddf010, 0x2005b1f, 0xd99bd731,
    // -81, -33, -18, 32, 44, 58, 7, 1, 50, -30, 65, -62, 14, 26, -9, 30, -79, 18, 65, 103, -49, 60, -22, 19, 13, -121, -98, 9, 55, -31, -88, 4
    0x20eedfaf, 0x1073a2c, 0xc241e232, 0x1ef71a0e, 0x674112b1, 0x13ea3ccf, 0x99e870d, 0x4a8e137,
    // -10, 105, -92, -47, 6, -9, 49, 29, -27, -47, -8, 72, -23, -19, -13, 34, -51, 57, 85, 57, -1, 90, -56, -5, 4, -76, -24, 78, 43, -60, -75, -113
    0xd1a469f6, 0x1d31f706, 0x48f8d1e5, 0x22f3ede9, 0x395539cd, 0xfbc85aff, 0x4ee8b404, 0x8fb5c42b,
    // 25, -84, 25, -67, 78, 86, -47, -26, 48, 94, 5, -81, -37, 17, 79, 74, 54, -46, -15, -39, 2, -13, -99, -8, 11, -60, -3, -7, 20, 32, -6, 13
    0xbd19ac19, 0xe6d1564e, 0xaf055e30, 0x4a4f11db, 0xd9f1d236, 0xf89df302, 0xf9fdc40b, 0xdfa2014,
    // 63, 91, 20, -96, 63, -62, -45, 114, 105, 18, 70, 11, -46, -39, 82, -59, -39, -17, 59, 41, -93, -57, -46, -54, 16, -4, 49, -93, 60, -57, 57, -55
    0xa0145b3f, 0x72d3c23f, 0xb461269, 0xc552d9d2, 0x293befd9, 0xcad2c7a3, 0xa331fc10, 0xc939c73c,
    // -38, 43, -20, -5, -65, 5, -74, 15, -35, 58, -47, -75, -1, 37, 49, -83, 32, 101, 13, 36, 12, -44, -70, -21, -81, 73, -29, 26, -78, -60, -32, 87
    0xfbec2bda, 0xfb605bf, 0xb5d13add, 0xad3125ff, 0x240d6520, 0xebbad40c, 0x1ae349af, 0x57e0c4b2,
    // -17, -68, -29, -33, -14, 64, 40, -87, -64, 94, -48, 82, -31, 45, -120, 41, -52, 1, -45, 10, 49, -77, -14, -42, -88, -59, 26, 9, -23, 16, -69, -83
    0xdfe3bcef, 0xa92840f2, 0x52d05ec0, 0x29882de1, 0xad301cc, 0xd6f2b331, 0x91ac5a8, 0xadbb10e9,
    // -15, 26, -47, 33, -60, -7, 47, 35, -48, -15, 111, 67, -4, -16, -8, -34, 105, 32, -21, 56, 0, 5, 14, 56, -7, -10, -1, -56, 14, 27, -25, -33
    0x21d11af1, 0x232ff9c4, 0x436ff1d0, 0xdef8f0fc, 0x38eb2069, 0x380e0500, 0xc8fff6f9, 0xdfe71b0e,
};
static const uint embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords[16] = {
    // 0.01457, 0.0263, -0.01868, 0.005577, 0.0004244, 0.0295, -0.01554, -0.00011224, 0.02151, 0.04257, -0.05942, -0.01808, 0.02884, -0.012764, -0.02751, -0.00476
    0x26bc2376, 0x1db6a4c8, 0x278d0ef4, 0x875ba3f5, 0x29732582, 0xa4a1ab9b, 0xa2892762, 0x9ce0a70b,
    // 0.006027, -0.02101, 0.05353, 0.03372, 0.007027, -0.036, -0.003677, -0.003342, 0.00945, -0.014534, -0.014786, 0.02992, 0.011566, -0.00546, -0.01674, 0.006935
    0xa5611e2c, 0x28512ada, 0xa89c1f32, 0x9ad89b88, 0xa37120d7, 0x27a9a392, 0x9d9721ec, 0x1f1aa449,
};
static const uint embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -4, 1, -18, -6, 4, -26, -33, -9, -21, 19, 14, -30, 49, 25, 9, 14, 27, -9, 17, 8, -17, -5, 23, 40, -22, -11, -8, -8, -12, 27, -48, 5
    0xfaee01fc, 0xf7dfe604, 0xe20e13eb, 0xe091931, 0x811f71b, 0x2817fbef, 0xf8f8f5ea, 0x5d01bf4,
    // 16, 45, 100, 83, 6, 65, 77, -50, -58, -19, -7, 103, -9, 36, 80, 11, 55, -29, -69, -121, -58, 113, 24, 12, -12, -30, 27, 89, -48, -12, 112, 9
    0x53642d10, 0xce4d4106, 0x67f9edc6, 0xb5024f7, 0x87bbe337, 0xc1871c6, 0x591be2f4, 0x970f4d0,
    // 111, -17, -27, -5, 10, -51, 84, 62, 111, -3, 7, -9, -72, -23, -41, -5, -78, 96, -36, -95, 40, 69, -94, 34, 30, 43, 83, -30, 10, -80, -62, 41
    0xfbe5ef6f, 0x3e54cd0a, 0xf707fd6f, 0xfbd7e9b8, 0xa1dc60b2, 0x22a24528, 0xe2532b1e, 0x29c2b00a,
    // -40, 34, -18, -60, 29, 27, -41, -28, 36, -6, -51, -28, 38, -10, -73, -20, -50, -2, 81, 13, 69, 16, 4, 25, 53, -14, 45, -3, 46, 89, -80, -25
    0xc4ee22d8, 0xe4d71b1d, 0xe4cdfa24, 0xecb7f626, 0xd51fece, 0x19041045, 0xfd2df235, 0xe7b0592e,
    // -9, 37, 48, 25, 46, -82, 44, -42, -121, 18, -36, -61, 15, -86, 99, -24, -43, -68, -19, 17, -77, -9, 75, 17, 75, 93, -39, 20, 120, 55, 110, -60
    0x193025f7, 0xd62cae2e, 0xc3dc1287, 0xe863aa0f, 0x11edbcd5, 0x114bf7b3, 0x14d95d4b, 0xc46e3778,
    // 12, 42, -6, 45, -34, 1, -56, -34, 7, 42, 54, -7, 27, 16, 24, 13, 9, 5, 61, 48, 6, -30, 3, 49, -18, 5, -13, -37, -3, -67, -99, -6
    0x2dfa2a0c, 0xdec801de, 0xf9362a07, 0xd18101b, 0x303d0509, 0x3103e206, 0xdbf305ee, 0xfa9dbdfd,
    // -79, -68, -16, 31, 7, 97, 42, 100, -41, -12, -35, -31, 9, 73, -2, 77, 127, 28, 55, 26, 14, 3, 45, -27, -51, -62, -35, -57, -9, 71, -7, 105
    0x1ff0bcb1, 0x642a6107, 0xe1ddf4d7, 0x4dfe4909, 0x1a371c7f, 0xe52d030e, 0xc7ddc2cd, 0x69f947f7,
    // 47, 21, 20, 15, -61, -15, 20, 12, -61, 119, 32, -37, 74, 105, 16, -50, 26, 74, 18, -69, -106, 39, 11, -80, -19, -31, 50, -102, -61, 14, 5, -62
    0xf14152f, 0xc14f1c3, 0xdb2077c3, 0xce10694a, 0xbb124a1a, 0xb00b2796, 0x9a32e1ed, 0xc2050ec3,
    // 43, -72, 0, -51, 24, 107, -48, 88, -92, -36, -116, -18, 12, -62, -45, 54, -92, -10, 77, -45, -65, 54, 49, -99, 114, -68, 4, -22, 80, -35, 87, 82
    0xcd00b82b, 0x58d06b18, 0xee8cdca4, 0x36d3c20c, 0xd34df6a4, 0x9d3136bf, 0xea04bc72, 0x5257dd50,
    // 12, 58, 30, -20, -19, -36, -33, -18, -36, 23, 6, -20, -52, -34, -2, -37, 32, 24, 12, -61, 83, 83, -12, -43, -38, 35, 16, -24, 59, 61, -100, -1
    0xec1e3a0c, 0xeedfdced, 0xec0617dc, 0xdbfedecc, 0xc30c1820, 0xd5f45353, 0xe81023da, 0xff9c3d3b,
    // 20, -20, 41, 72, -35, -29, -12, 16, 18, 22, 16, 25, -44, -33, 32, 80, -37, 4, -24, 11, -47, -37, -41, -10, 30, 35, 6, -8, 11, -33, 66, 21
    0x4829ec14, 0x10f4e3dd, 0x19101612, 0x5020dfd4, 0xbe804db, 0xf6d7dbd1, 0xf806231e, 0x1542df0b,
    // 18, -10, -12, -11, 5, 34, -3, 8, 2, -9, -1, -5, -19, -2, -22, -20, -18, -12, 23, 20, 5, -18, -2, 7, 19, -15, -9, -7, 8, -20, -28, 12
    0xf5f4f612, 0x8fd2205, 0xfbfff702, 0xeceafeed, 0x1417f4ee, 0x7feee05, 0xf9f7f113, 0xce4ec08,
    // -30, 9, 4, -20, 6, -6, 13, -2, -24, -11, -17, -14, 23, 21, -14, -10, 42, -1, -17, -23, -21, 15, 12, -18, -24, -2, 5, 22, -20, 58, 53, -22
    0xec0409e2, 0xfe0dfa06, 0xf2eff5e8, 0xf6f21517, 0xe9efff2a, 0xee0c0feb, 0x1605fee8, 0xea353aec,
    // 19, -25, 22, 40, -24, -64, -4, -19, -64, 4, 0, -47, -60, -31, -66, 33, 66, 56, -6, -17, 31, 72, 50, -56, -80, 82, 36, -21, 36, -8, -1, -48
    0x2816e713, 0xedfcc0e8, 0xd10004c0, 0x21bee1c4, 0xeffa3842, 0xc832481f, 0xeb2452b0, 0xd0fff824,
    // -20, 75, 88, -36, 87, 6, -53, -59, 69, 75, -5, -57, -22, 53, 37, 1, -43, -100, 68, 19, 19, -49, -53, -30, 53, -20, -57, 32, -33, 2, -46, -48
    0xdc584bec, 0xc5cb0657, 0xc7fb4b45, 0x12535ea, 0x13449cd5, 0xe2cbcf13, 0x20c7ec35, 0xd0d202df,
    // 34, 91, 19, -75, 92, 15, -36, -62, -41, -10, 9, 26, 8, 20, 12, -42, 25, -87, 51, -10, 31, 43, 50, 76, -31, -34, -12, 59, -27, -57, -37, -11
    0xb5135b22, 0xc2dc0f5c, 0x1a09f6d7, 0xd60c1408, 0xf633a919, 0x4c322b1f, 0x3bf4dee1, 0xf5dbc7e5,
};
static const uint embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords[8] = {
    // -0.03387, -0.2191, -0.001048, 0.03342, 0.00492, 0.01964, 0.0357, 0.04498, -0.03745, 0.04465, -0.006176, 0.02927, -0.06006, 0.04153, 0.01591, -0.06158
    0xb303a856, 0x2847944b, 0x25071d0a, 0x29c22892, 0x29b7a8cb, 0x277e9e53, 0x2951abb0, 0xabe22413,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass12(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 16), // threadGroupSliceSize
        uint3(1920, 1080, 16), // storageSize
        uint3(16, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        49766400, // threadGroupStorageByteOffset
        0.027206305414438248, storage_fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005350596271455288, storage_embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_1_body_conv_dw_bias = { embedded_decoder2_ResidualBlock_1_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_1_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_1_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0051390123553574085, storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias = { embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005128493066877127, storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias = { embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias };
    
    // fused_quantized_NHWC_/decoder2/ResidualBlock_2/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_24 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_24 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 16);
    const uint3 groupSize_slice_24 = uint3(64, 1, 16);
    const uint3 storageSize_slice_24 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_24 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_24 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_24 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_24 = dot(groupStart_slice_24, tensorByteStrides_slice_24);
    const float quantizationScale_slice_24 = 0.035173576325178146;
    const RWBufferStorage storage_slice_24 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_24 = { logicalSize_slice_24, groupStart_slice_24, groupSize_slice_24, storageSize_slice_24, tensorByteStrides_slice_24, paddingBegin_slice_24, paddingEnd_slice_24, threadGroupByteOffsetInTensor_slice_24 + 0, quantizationScale_slice_24, storage_slice_24 };
    // ConvNextBlock (16, 1080, 1920), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,) -> (16, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    ConvNextBlock(35.15770233112976, 0.028443269431591034, 25.313606416359107, 0.03950444608926773, fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_1_body_conv_dw_bias, embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias, embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias, slice_24, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_12
#ifdef MLSR_PASS_12_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass12_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/decoder2/ResidualBlock_2/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_25 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_25 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_25 = uint3(32, 1, 16);
    const uint3 storageSize_slice_25 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_25 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_25 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_25 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_25 = dot(groupStart_slice_25, tensorByteStrides_slice_25);
    const float quantizationScale_slice_25 = 0.035173576325178146;
    const RWBufferStorage storage_slice_25 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_25 = { logicalSize_slice_25, groupStart_slice_25, groupSize_slice_25, storageSize_slice_25, tensorByteStrides_slice_25, paddingBegin_slice_25, paddingEnd_slice_25, threadGroupByteOffsetInTensor_slice_25 + 0, quantizationScale_slice_25, storage_slice_25 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_25, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_12_POST


#ifdef MLSR_PASS_13
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/float16_NHWC/Fused/CNB_CT2D.hlsli"

static const uint embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 14, -13, 10, 11, -11, -2, -15, 2, 0, 1, -11, 10, -2, -15, -29, -47, 28, -12, -30, 7, -5, -2, -14, 9, -6, 22, -12, -25, 6, -21, -27, -56
    0xb0af30e, 0x2f1fef5, 0xaf50100, 0xd1e3f1fe, 0x7e2f41c, 0x9f2fefb, 0xe7f416fa, 0xc8e5eb06,
    // -16, -10, -4, 9, 3, 6, -6, 18, -6, -6, 11, 2, -31, -29, -45, 0, 18, 8, 2, 35, -7, -11, -9, 0, -32, 56, 7, 20, 3, -52, -29, -73
    0x9fcf6f0, 0x12fa0603, 0x20bfafa, 0xd3e3e1, 0x23020812, 0xf7f5f9, 0x140738e0, 0xb7e3cc03,
    // 69, 45, -60, 9, -47, -31, 92, 69, 4, 56, -71, -91, 53, 17, -41, -76, -6, -6, 15, 17, 31, 6, -7, 8, -12, 32, 5, 7, -2, -39, -56, -48
    0x9c42d45, 0x455ce1d1, 0xa5b93804, 0xb4d71135, 0x110ffafa, 0x8f9061f, 0x70520f4, 0xd0c8d9fe,
    // -25, -8, 4, 16, 6, 7, 9, 0, -6, 19, 0, 7, -10, -13, -16, -15, 11, -2, -29, 5, -28, -15, 0, 9, -15, 8, 6, 7, 1, -7, -33, -34
    0x1004f8e7, 0x90706, 0x70013fa, 0xf1f0f3f6, 0x5e3fe0b, 0x900f1e4, 0x70608f1, 0xdedff901,
    // -31, -19, 3, 25, 11, 6, -5, 7, 1, -14, 1, 5, -13, -13, -43, -27, 2, -3, -13, 8, 4, -5, 9, -3, -12, 15, 5, 1, 2, 2, 8, 2
    0x1903ede1, 0x7fb060b, 0x501f201, 0xe5d5f3f3, 0x8f3fd02, 0xfd09fb04, 0x1050ff4, 0x2080202,
    // -11, 1, 27, 12, 25, -15, 24, 2, -19, -17, 5, 22, -15, 25, 4, 20, -2, -2, -10, 11, 4, -3, -2, -9, -4, 1, -11, 1, 7, 15, -2, -12
    0xc1b01f5, 0x218f119, 0x1605efed, 0x140419f1, 0xbf6fefe, 0xf7fefd04, 0x1f501fc, 0xf4fe0f07,
    // 11, -6, -9, 37, 8, 13, 16, 13, -8, -21, -4, 6, -16, 18, -28, 20, -19, -21, -39, 39, 43, 33, 52, 74, -59, -105, -2, -45, 9, 120, 11, 73
    0x25f7fa0b, 0xd100d08, 0x6fcebf8, 0x14e412f0, 0x27d9ebed, 0x4a34212b, 0xd3fe97c5, 0x490b7809,
    // 1, -4, -7, 36, -5, 2, 9, 17, -8, -31, 16, -2, -9, 37, 7, 33, 7, 5, -10, 16, -4, -16, -6, 6, -9, -1, 8, 7, 5, 1, 3, -15
    0x24f9fc01, 0x110902fb, 0xfe10e1f8, 0x210725f7, 0x10f60507, 0x6faf0fc, 0x708fff7, 0xf1030105,
    // -12, -6, -4, 34, 9, -8, 4, 15, -7, -25, 19, 22, 0, 5, -1, 8, -9, -2, -14, 11, 1, -3, -6, 8, -5, 10, 9, 10, -3, -2, 1, 3
    0x22fcfaf4, 0xf04f809, 0x1613e7f9, 0x8ff0500, 0xbf2fef7, 0x8fafd01, 0xa090afb, 0x301fefd,
    // 0, -6, 3, -2, 0, 3, 11, -6, -7, 11, -1, -10, -4, -5, 4, -2, 2, -1, -2, -9, 1, -4, 3, -8, 8, -6, -6, -8, -6, 15, -3, 7
    0xfe03fa00, 0xfa0b0300, 0xf6ff0bf9, 0xfe04fbfc, 0xf7feff02, 0xf803fc01, 0xf8fafa08, 0x7fd0ffa,
    // 0, -1, -1, 13, 8, -2, 3, -6, 0, 4, -3, 2, -9, 0, -4, -2, 17, 1, 7, 4, -4, 0, -8, 15, -12, -1, 2, -23, 0, -25, 12, -30
    0xdffff00, 0xfa03fe08, 0x2fd0400, 0xfefc00f7, 0x4070111, 0xff800fc, 0xe902fff4, 0xe20ce700,
    // 2, 3, -32, 52, 59, -45, -111, 99, 58, -95, 10, 24, 7, -62, -27, 43, -19, 8, 13, 16, 6, 14, 0, 15, -5, -5, 3, 0, -4, -5, 15, -14
    0x34e00302, 0x6391d33b, 0x180aa13a, 0x2be5c207, 0x100d08ed, 0xf000e06, 0x3fbfb, 0xf20ffbfc,
    // 2, 3, 2, 6, -4, 2, -3, -3, -9, 11, 9, 11, -4, -9, 7, -12, 0, 1, 0, -7, 15, 4, 9, -2, -3, -4, -13, -12, 6, -2, -7, -9
    0x6020302, 0xfdfd02fc, 0xb090bf7, 0xf407f7fc, 0xf9000100, 0xfe09040f, 0xf4f3fcfd, 0xf7f9fe06,
    // -23, -6, 9, -3, 11, 5, 5, -4, 0, 5, -8, -1, 5, -10, -3, -17, -8, -8, -5, 1, -12, -6, 9, 4, 2, 30, -3, -13, 7, -15, 25, 2
    0xfd09fae9, 0xfc05050b, 0xfff80500, 0xeffdf605, 0x1fbf8f8, 0x409faf4, 0xf3fd1e02, 0x219f107,
    // -10, -17, 13, 35, 4, -2, -7, 6, 9, 35, -7, -18, 3, 17, 38, -19, -8, -7, -4, 12, -13, -5, 1, 10, 16, 16, -7, -13, 11, 1, 24, 0
    0x230deff6, 0x6f9fe04, 0xeef92309, 0xed261103, 0xcfcf9f8, 0xa01fbf3, 0xf3f91010, 0x18010b,
    // -3, 9, -2, -20, -11, -5, 11, 3, 28, 28, -13, 20, -3, 18, 8, 27, -114, 34, 69, -24, -41, 24, -38, 0, 116, 95, -24, 56, -43, 48, 21, 85
    0xecfe09fd, 0x30bfbf5, 0x14f31c1c, 0x1b0812fd, 0xe845228e, 0xda18d7, 0x38e85f74, 0x551530d5,
    // -29, 6, -12, 9, -39, -13, -4, 13, 27, 25, -22, 2, 13, 11, 14, 29, 2, -11, -9, 3, -3, 1, -8, -2, 2, 5, -13, -10, -2, 6, -2, 6
    0x9f406e3, 0xdfcf3d9, 0x2ea191b, 0x1d0e0b0d, 0x3f7f502, 0xfef801fd, 0xf6f30502, 0x6fe06fe,
    // -13, -32, -10, 25, -9, 7, -24, 8, 28, 3, -13, 6, -4, 7, 12, 13, -9, -12, -15, 2, -10, 1, -9, 4, 11, 16, -3, -4, 1, 8, 3, 15
    0x19f6e0f3, 0x8e807f7, 0x6f3031c, 0xd0c07fc, 0x2f1f4f7, 0x4f701f6, 0xfcfd100b, 0xf030801,
    // -10, -5, -22, -9, 10, -10, -20, -1, -8, -11, 4, -11, 6, -2, -2, 6, -20, 0, -29, -49, 7, 1, -23, -3, -24, -12, 13, -9, -1, 9, 6, -2
    0xf7eafbf6, 0xffecf60a, 0xf504f5f8, 0x6fefe06, 0xcfe300ec, 0xfde90107, 0xf70df4e8, 0xfe0609ff,
    // -4, -11, -19, -16, 0, -9, -18, 3, -10, 19, -3, 4, 6, -3, 4, 9, -13, -16, 1, 5, 17, -16, -38, -9, -34, -19, 10, 2, 13, 13, -18, -6
    0xf0edf5fc, 0x3eef700, 0x4fd13f6, 0x904fd06, 0x501f0f3, 0xf7daf011, 0x20aedde, 0xfaee0d0d,
    // -121, 11, 12, -80, 9, 42, -76, 17, -70, 24, 60, -7, -52, 4, -21, 40, -27, -28, -24, -25, 19, -10, -45, 6, -26, 12, 6, -7, 6, -35, -10, -6
    0xb00c0b87, 0x11b42a09, 0xf93c18ba, 0x28eb04cc, 0xe7e8e4e5, 0x6d3f613, 0xf9060ce6, 0xfaf6dd06,
    // -22, -12, -15, -11, 16, -3, -14, -1, -12, -2, -1, -15, 12, -10, -7, 3, 4, 8, -25, -39, 3, -19, -31, 14, -19, -14, 19, -3, 6, -3, 6, -5
    0xf5f1f4ea, 0xfff2fd10, 0xf1fffef4, 0x3f9f60c, 0xd9e70804, 0xee1ed03, 0xfd13f2ed, 0xfb06fd06,
    // -7, -3, -25, -25, -6, 0, -11, -1, -16, 21, 11, 5, -1, -14, 1, 3, 23, 8, 14, 7, -4, -2, -1, -1, 6, -5, -14, 20, 3, 13, 4, -19
    0xe7e7fdf9, 0xfff500fa, 0x50b15f0, 0x301f2ff, 0x70e0817, 0xfffffefc, 0x14f2fb06, 0xed040d03,
    // 7, 8, 12, -19, -2, 10, 12, -7, -2, -9, -1, -1, 9, 21, 39, -23, 5, 3, 10, 6, 6, -2, 11, 7, -6, -15, -1, -3, -4, 6, -2, -9
    0xed0c0807, 0xf90c0afe, 0xfffff7fe, 0xe9271509, 0x60a0305, 0x70bfe06, 0xfdfff1fa, 0xf7fe06fc,
    // 21, 17, 7, 28, 0, -12, -13, 24, -12, -9, -9, 29, -1, -9, -8, -27, 23, 50, 104, -72, -7, 27, -10, 52, 3, -27, 8, -49, 9, 50, 26, -79
    0x1c071115, 0x18f3f400, 0x1df7f7f4, 0xe5f8f7ff, 0xb8683217, 0x34f61bf9, 0xcf08e503, 0xb11a3209,
    // -9, 8, 26, 18, 16, 13, -2, 20, -10, -17, 11, 6, -23, -3, -21, 7, -3, -1, 20, 9, 5, 2, 8, 6, 2, -6, -11, -8, -5, -4, 0, -9
    0x121a08f7, 0x14fe0d10, 0x60beff6, 0x7ebfde9, 0x914fffd, 0x6080205, 0xf8f5fa02, 0xf700fcfb,
    // 22, 14, 13, -11, -12, -5, 13, -7, -2, 1, 19, 9, 2, 25, 16, -24, 13, -1, 8, 10, -1, -7, -3, 4, 3, -17, 12, -1, -6, 10, -2, -8
    0xf50d0e16, 0xf90dfbf4, 0x91301fe, 0xe8101902, 0xa08ff0d, 0x4fdf9ff, 0xff0cef03, 0xf8fe0afa,
    // -8, 4, 7, 0, 0, 2, 6, -5, 2, 0, 0, 7, -8, 6, -6, -11, -44, 3, 6, -12, -8, 19, 1, -10, 3, -6, 11, 18, -20, 14, 9, -10
    0x704f8, 0xfb060200, 0x7000002, 0xf5fa06f8, 0xf40603d4, 0xf60113f8, 0x120bfa03, 0xf6090eec,
    // -16, 4, 2, 5, -8, 3, 10, 9, -6, 1, 0, 6, -17, -6, -15, -7, -32, 4, 9, -20, 0, 8, 1, -11, 6, -5, 5, 40, -25, 16, 1, -4
    0x50204f0, 0x90a03f8, 0x60001fa, 0xf9f1faef, 0xec0904e0, 0xf5010800, 0x2805fb06, 0xfc0110e7,
    // -51, 16, -6, -13, 9, 5, 0, 18, -3, -44, 15, 6, -33, 53, 14, 49, -57, 0, 5, 4, 2, 11, -1, 4, -5, 2, 3, 22, -34, -4, -27, 12
    0xf3fa10cd, 0x12000509, 0x60fd4fd, 0x310e35df, 0x40500c7, 0x4ff0b02, 0x160302fb, 0xce5fcde,
    // -17, -3, 5, -3, 7, 8, 14, -2, 4, -2, -5, -6, -14, 1, -16, 7, -57, -5, 11, -8, 3, 10, -6, 9, -2, -7, 3, 16, -51, -2, -30, 26
    0xfd05fdef, 0xfe0e0807, 0xfafbfe04, 0x7f001f2, 0xf80bfbc7, 0x9fa0a03, 0x1003f9fe, 0x1ae2fecd,
    // -29, 0, 2, 4, 3, 2, 10, 9, -7, -4, -8, 1, -18, -9, -18, 15, -21, -7, -13, -14, -4, -6, -5, 23, 4, 3, 8, -10, 3, -11, 6, 18
    0x40200e3, 0x90a0203, 0x1f8fcf9, 0xfeef7ee, 0xf2f3f9eb, 0x17fbfafc, 0xf6080304, 0x1206f503,
    // -22, -3, -23, -17, -14, 6, -5, 18, 0, 4, 10, -14, -2, 4, 17, 0, 1, 1, -6, -8, -5, 3, -4, 15, -4, -10, 11, 4, -3, 1, -4, -1
    0xefe9fdea, 0x12fb06f2, 0xf20a0400, 0x1104fe, 0xf8fa0101, 0xffc03fb, 0x40bf6fc, 0xfffc01fd,
    // -18, -10, 2, 11, -5, 10, -10, 15, 11, 25, 8, -41, 10, -14, -2, 11, -31, -12, 51, 8, -16, -24, 0, -7, -10, -60, 12, 68, 1, 59, 40, 75
    0xb02f6ee, 0xff60afb, 0xd708190b, 0xbfef20a, 0x833f4e1, 0xf900e8f0, 0x440cc4f6, 0x4b283b01,
    // -16, 9, 2, 21, 13, 2, -13, 10, -3, 4, 6, -4, -8, -8, -6, -20, 10, 5, -16, 5, -10, -5, -6, 1, 10, 6, 11, 25, 7, 19, -11, 2
    0x150209f0, 0xaf3020d, 0xfc0604fd, 0xecfaf8f8, 0x5f0050a, 0x1fafbf6, 0x190b060a, 0x2f51307,
    // -3, -5, -4, -18, 8, 14, 20, -2, -5, -7, -29, -19, -2, 0, -5, -2, -15, 4, -7, -5, 11, 1, 1, 2, -5, 0, -15, -7, -7, -5, -8, 4
    0xeefcfbfd, 0xfe140e08, 0xede3f9fb, 0xfefb00fe, 0xfbf904f1, 0x201010b, 0xf9f100fb, 0x4f8fbf9,
    // -5, -8, 10, -3, 2, 1, 2, 1, 2, -9, -1, -19, -3, 2, -13, -12, 28, 0, 10, 23, 14, -1, -5, 9, -14, -22, 8, -20, -3, -13, -32, -24
    0xfd0af8fb, 0x1020102, 0xedfff702, 0xf4f302fd, 0x170a001c, 0x9fbff0e, 0xec08eaf2, 0xe8e0f3fd,
    // 17, 5, 13, 0, 1, 2, 10, 3, -4, -4, 1, 3, -7, -4, -6, -9, -10, -12, 13, -22, -1, 10, 8, -7, 6, -11, 9, -35, 6, 11, -4, -4
    0xd0511, 0x30a0201, 0x301fcfc, 0xf7fafcf9, 0xea0df4f6, 0xf9080aff, 0xdd09f506, 0xfcfc0b06,
    // 24, 5, 19, -20, 28, -21, -26, -22, 2, -7, -10, 52, -8, 61, -128, 36, 9, 4, 6, -19, 2, 1, 10, -7, -1, 8, -14, -12, 10, 13, -2, -34
    0xec130518, 0xeae6eb1c, 0x34f6f902, 0x24803df8, 0xed060409, 0xf90a0102, 0xf4f208ff, 0xdefe0d0a,
    // 6, 4, 3, 6, -2, 2, 4, 6, 2, -7, 10, 15, -3, 7, -8, -17, -17, 9, 21, 1, 10, 18, -4, 20, -8, -11, -20, -5, -17, -22, -22, -17
    0x6030406, 0x60402fe, 0xf0af902, 0xeff807fd, 0x11509ef, 0x14fc120a, 0xfbecf5f8, 0xefeaeaef,
    // -21, 0, 13, -5, 7, 8, 3, 11, -6, -7, -14, -3, -2, -17, -2, -27, 2, -13, 5, 14, 4, -1, -3, -7, -3, -3, -5, -25, -2, -9, -23, -5
    0xfb0d00eb, 0xb030807, 0xfdf2f9fa, 0xe5feeffe, 0xe05f302, 0xf9fdff04, 0xe7fbfdfd, 0xfbe9f7fe,
    // 34, 0, 8, -12, 2, 2, 7, -31, -2, 5, -2, -12, -1, 9, 10, -15, 6, -9, 1, 10, 6, -4, -2, -7, -4, -6, -4, 0, -7, 1, -11, 4
    0xf4080022, 0xe1070202, 0xf4fe05fe, 0xf10a09ff, 0xa01f706, 0xf9fefc06, 0xfcfafc, 0x4f501f9,
    // 8, -5, -13, 18, -2, -1, 2, -1, -7, -6, -3, -23, 4, -20, -14, -8, -2, 35, 7, -62, -54, -3, 37, -35, 19, -102, 21, 60, -39, -22, 37, 43
    0x12f3fb08, 0xff02fffe, 0xe9fdfaf9, 0xf8f2ec04, 0xc20723fe, 0xdd25fdca, 0x3c159a13, 0x2b25ead9,
    // -36, -5, -9, 1, -1, 6, 4, 0, -5, -13, -13, 0, -8, -11, -11, 4, 4, -1, 6, 12, 2, -6, 0, -5, -4, 1, 6, -2, 5, -6, 9, -8
    0x1f7fbdc, 0x406ff, 0xf3f3fb, 0x4f5f5f8, 0xc06ff04, 0xfb00fa02, 0xfe0601fc, 0xf809fa05,
    // -1, -6, 14, -11, 9, 5, 12, -12, -7, 3, -11, -10, -4, -13, 18, -25, -7, -10, 8, 7, 8, 1, -2, 0, -1, -8, -12, -7, -1, -3, 0, -11
    0xf50efaff, 0xf40c0509, 0xf6f503f9, 0xe712f3fc, 0x708f6f9, 0xfe0108, 0xf9f4f8ff, 0xf500fdff,
    // 3, 7, 6, -8, 3, 2, 4, -4, 0, -9, -2, -2, -4, 10, 7, 5, -6, -7, 7, -12, 7, -7, 1, 4, -8, -22, 7, 15, -11, 4, -25, 24
    0xf8060703, 0xfc040203, 0xfefef700, 0x5070afc, 0xf407f9fa, 0x401f907, 0xf07eaf8, 0x18e704f5,
    // 8, 4, 13, -2, 3, 1, 11, -8, 4, -11, 0, 2, 3, 6, -3, -6, -8, 3, 4, 13, -15, -5, 8, 7, 9, -6, -11, 7, -11, -2, -12, 16
    0xfe0d0408, 0xf80b0103, 0x200f504, 0xfafd0603, 0xd0403f8, 0x708fbf1, 0x7f5fa09, 0x10f4fef5,
    // -18, 7, -51, -55, -69, 0, 20, 50, 19, -25, -31, -7, 16, 2, -93, 51, 26, 7, -1, 2, -10, -1, 4, -10, 19, 1, 3, 13, -13, 11, -6, 12
    0xc9cd07ee, 0x321400bb, 0xf9e1e713, 0x33a30210, 0x2ff071a, 0xf604fff6, 0xd030113, 0xcfa0bf3,
    // 9, 10, 8, -7, -4, 5, 5, -2, 3, -6, -1, 8, 5, 9, 3, -10, 16, 4, 2, -13, -3, 4, 2, -6, 1, -12, 14, 10, 11, 10, 14, -6
    0xf9080a09, 0xfe0505fc, 0x8fffa03, 0xf6030905, 0xf3020410, 0xfa0204fd, 0xa0ef401, 0xfa0e0a0b,
    // 6, 10, 5, -6, -2, 1, 2, -2, 6, -6, 3, -3, 8, 4, 11, 6, 8, 4, 16, 23, 8, 11, 12, -2, -10, 8, 4, -26, -1, -22, 7, -1
    0xfa050a06, 0xfe0201fe, 0xfd03fa06, 0x60b0408, 0x17100408, 0xfe0c0b08, 0xe60408f6, 0xff07eaff,
    // 22, 12, -7, 10, -10, -11, 5, 20, -6, -3, -5, -30, 15, -21, 9, 26, -3, 1, 6, 15, 18, 2, -8, -13, 3, 0, 1, -7, 0, -10, -4, 13
    0xaf90c16, 0x1405f5f6, 0xe2fbfdfa, 0x1a09eb0f, 0xf0601fd, 0xf3f80212, 0xf9010003, 0xdfcf600,
    // 18, 2, 14, 11, 8, -7, 15, -31, -21, 20, 9, -35, 6, -21, 24, -9, 16, -28, -45, -121, -31, -48, -42, -71, -19, 91, -6, 27, 41, 25, 126, 44
    0xb0e0212, 0xe10ff908, 0xdd0914eb, 0xf718eb06, 0x87d3e410, 0xb9d6d0e1, 0x1bfa5bed, 0x2c7e1929,
    // -19, 3, 8, 13, 15, 1, -12, -36, 2, -24, -7, 1, -6, 15, -5, -1, -3, 7, 0, 21, -5, 2, -10, 3, -12, 7, 6, 13, -12, -16, 16, -2
    0xd0803ed, 0xdcf4010f, 0x1f9e802, 0xfffb0ffa, 0x150007fd, 0x3f602fb, 0xd0607f4, 0xfe10f0f4,
    // -41, -5, 6, -15, 9, 31, 8, 22, 9, 0, -27, -3, -15, -5, -3, 52, -29, 0, 9, 25, 17, 8, -1, 2, -1, -15, -13, -11, -9, -4, -11, 16
    0xf106fbd7, 0x16081f09, 0xfde50009, 0x34fdfbf1, 0x190900e3, 0x2ff0811, 0xf5f3f1ff, 0x10f5fcf7,
    // 11, -5, 12, -9, -8, 5, -4, 8, -5, -10, 1, -1, -1, 3, 4, -27, -34, -5, 11, -28, -9, 11, 18, 10, 19, -22, 10, -3, -6, 29, 6, 5
    0xf70cfb0b, 0x8fc05f8, 0xff01f6fb, 0xe50403ff, 0xe40bfbde, 0xa120bf7, 0xfd0aea13, 0x5061dfa,
    // 3, -5, -1, -4, -13, -3, 6, 7, 3, 2, 7, -2, 0, -1, 4, -11, 37, -2, 9, 13, -2, -15, 9, -18, -13, 3, -3, 21, -1, -11, 0, -60
    0xfcfffb03, 0x706fdf3, 0xfe070203, 0xf504ff00, 0xd09fe25, 0xee09f1fe, 0x15fd03f3, 0xc400f5ff,
    // -17, -40, 3, -38, 90, 23, 48, -91, 51, -21, 21, 12, -17, 69, -121, -49, 9, -15, 14, 9, 8, -6, -2, -22, 5, -6, 4, 11, -6, 4, -16, -12
    0xda03d8ef, 0xa530175a, 0xc15eb33, 0xcf8745ef, 0x90ef109, 0xeafefa08, 0xb04fa05, 0xf4f004fa,
    // 11, -2, 5, -8, 1, 5, 9, 5, -2, 0, -13, -10, -6, -1, -12, -11, 41, -12, -15, -21, -13, -7, 4, -6, 6, -9, -8, -11, 19, 24, -12, -19
    0xf805fe0b, 0x5090501, 0xf6f300fe, 0xf5f4fffa, 0xebf1f429, 0xfa04f9f3, 0xf5f8f706, 0xedf41813,
    // 22, -7, 0, -8, -12, -2, -3, -8, 14, 0, 0, 2, 4, 16, -1, -20, -7, -1, 10, -2, 5, 4, 10, -6, -2, 0, 3, -16, -6, 5, 5, 5
    0xf800f916, 0xf8fdfef4, 0x200000e, 0xecff1004, 0xfe0afff9, 0xfa0a0405, 0xf00300fe, 0x50505fa,
    // -16, 8, 24, -25, -6, 23, 35, -30, 14, 44, 16, 26, -24, 9, 40, 2, 1, 2, 4, 11, -1, -6, 0, 0, 5, 2, -11, -1, 0, 7, 6, 6
    0xe71808f0, 0xe22317fa, 0x1a102c0e, 0x22809e8, 0xb040201, 0xfaff, 0xfff50205, 0x6060700,
    // 18, 7, 2, 42, 4, 8, -3, 19, -6, -20, -4, -34, 0, -15, -28, 1, 61, 0, -20, 37, -16, -37, -25, -13, -49, 82, -51, 5, 25, -15, -37, 45
    0x2a020712, 0x13fd0804, 0xdefcecfa, 0x1e4f100, 0x25ec003d, 0xf3e7dbf0, 0x5cd52cf, 0x2ddbf119,
    // -52, -4, -11, 13, -9, 9, -29, 25, -15, -13, -18, -3, 0, -14, -26, 33, 8, 8, 1, 0, 0, -8, -8, -6, -8, 2, 13, -6, 9, -4, 9, -9
    0xdf5fccc, 0x19e309f7, 0xfdeef3f1, 0x21e6f200, 0x10808, 0xfaf8f800, 0xfa0d02f8, 0xf709fc09,
    // 19, 0, 5, -39, -4, 7, 9, -14, -1, 60, -20, -15, 17, -36, 31, -35, -9, 0, 9, -10, 1, 4, 1, 3, -2, 5, -15, -8, 11, -9, 8, -1
    0xd9050013, 0xf20907fc, 0xf1ec3cff, 0xdd1fdc11, 0xf60900f7, 0x3010401, 0xf8f105fe, 0xff08f70b,
    // -12, -4, -14, 11, 1, -8, -11, 10, 4, 6, -4, 4, 9, -18, -8, 28, -3, -6, -8, -8, 4, -4, -13, -26, -10, 19, 10, -15, 7, -5, 26, 9
    0xbf2fcf4, 0xaf5f801, 0x4fc0604, 0x1cf8ee09, 0xf8f8fafd, 0xe6f3fc04, 0xf10a13f6, 0x91afb07,
    // -11, -3, -12, 1, 12, 0, -10, 5, -12, 2, 5, 6, -5, -9, 2, 7, -1, -6, -41, -1, -4, 0, -25, 31, 14, 22, -18, -12, 22, -19, -20, 40
    0x1f4fdf5, 0x5f6000c, 0x60502f4, 0x702f7fb, 0xffd7faff, 0x1fe700fc, 0xf4ee160e, 0x28eced16,
    // -2, -6, -55, -45, 52, -19, 1, -73, 40, 92, 9, -9, 23, 28, 41, 34, -32, 11, -11, 4, 0, 9, 4, 28, -13, 0, 12, 8, -20, -12, -10, 29
    0xd3c9fafe, 0xb701ed34, 0xf7095c28, 0x22291c17, 0x4f50be0, 0x1c040900, 0x80c00f3, 0x1df6f4ec,
    // -8, 3, -1, 10, -6, -1, -10, 5, 8, 9, 6, 10, 5, -10, 15, 11, 10, 5, 17, -3, 5, 4, 7, -20, 5, 1, -3, -4, 11, 2, 41, -25
    0xaff03f8, 0x5f6fffa, 0xa060908, 0xb0ff605, 0xfd11050a, 0xec070405, 0xfcfd0105, 0xe729020b,
    // -13, 6, -2, 6, 7, 2, 4, 13, -9, 5, 1, 0, -14, -15, 12, 11, -1, 9, -3, 2, 7, 1, 1, -1, -6, -2, 7, 0, -2, -5, 28, 20
    0x6fe06f3, 0xd040207, 0x105f7, 0xb0cf1f2, 0x2fd09ff, 0xff010107, 0x7fefa, 0x141cfbfe,
    // -1, 11, -16, 2, -3, -2, -15, 2, -5, 10, -6, 1, -2, -6, 14, 26, -1, 3, 0, -1, 11, -5, -12, -5, 1, 9, -2, -9, 4, -2, 27, 14
    0x2f00bff, 0x2f1fefd, 0x1fa0afb, 0x1a0efafe, 0xff0003ff, 0xfbf4fb0b, 0xf7fe0901, 0xe1bfe04,
    // 6, 12, 4, -9, 13, -4, -10, -14, -8, 15, -3, 7, 3, 5, 30, 18, -4, 59, -26, 8, 46, -6, 10, 10, -18, -21, -6, -33, -5, 4, 0, 126
    0xf7040c06, 0xf2f6fc0d, 0x7fd0ff8, 0x121e0503, 0x8e63bfc, 0xa0afa2e, 0xdffaebee, 0x7e0004fb,
    // -4, 5, -3, -5, 10, -5, -5, -10, -3, 16, -5, -5, 8, -24, 31, 13, -7, -5, 0, 2, 7, 3, -4, -1, -10, 3, -9, -13, -2, -15, 21, 19
    0xfbfd05fc, 0xf6fbfb0a, 0xfbfb10fd, 0xd1fe808, 0x200fbf9, 0xfffc0307, 0xf3f703f6, 0x1315f1fe,
    // -3, 7, -11, 4, 16, -8, -9, -1, -1, 0, -6, -16, 2, -2, 11, 35, 13, 4, -5, 3, 2, -4, 1, -8, -5, 12, 1, -3, 1, 3, 19, 21
    0x4f507fd, 0xfff7f810, 0xf0fa00ff, 0x230bfe02, 0x3fb040d, 0xf801fc02, 0xfd010cfb, 0x15130301,
};
static const uint embedded_decoder2_ResidualBlock_2_body_conv_dw_bias_dwords[8] = {
    // 0.1598, 0.04514, -0.00645, -0.10126, -0.3906, 0.1573, 0.1255, -0.2866, -0.06125, -0.1365, -0.0514, 0.06635, -0.10516, 0.1004, 0.0709, 0.0512
    0x29c7311d, 0xae7b9e9b, 0x3109b640, 0xb4963004, 0xb05eabd7, 0x2c3faa94, 0x2e6daebb, 0x2a8e2c8a,
};
static const uint embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -13, -50, 57, -11, -1, 30, -6, 72, -86, -26, -15, -32, 17, 39, -40, -1, -1, 9, -33, 57, -41, -22, -3, -8, -36, -14, -26, -19, -8, 16, 24, -38
    0xf539cef3, 0x48fa1eff, 0xe0f1e6aa, 0xffd82711, 0x39df09ff, 0xf8fdead7, 0xede6f2dc, 0xda1810f8,
    // -33, 15, -12, -16, -3, -8, 3, -12, -43, -33, 17, 18, -27, 3, 22, 36, 21, -16, 4, -17, -14, 41, -41, -19, -21, 21, -36, 16, 15, 27, 56, -10
    0xf0f40fdf, 0xf403f8fd, 0x1211dfd5, 0x241603e5, 0xef04f015, 0xedd729f2, 0x10dc15eb, 0xf6381b0f,
    // 50, -34, 37, 113, 34, 68, 7, 41, 45, -75, 27, -22, -29, 30, 18, 40, 9, 8, -8, -17, -18, 14, 5, -16, 20, -17, 1, -14, 22, -6, -20, -108
    0x7125de32, 0x29074422, 0xea1bb52d, 0x28121ee3, 0xeff80809, 0xf0050eee, 0xf201ef14, 0x94ecfa16,
    // -46, -71, -107, 68, 25, -23, 9, -9, 119, -52, -17, 127, 123, -43, 42, 4, 15, 6, 8, -36, 50, -6, 18, -10, 32, 35, -10, -5, 0, -9, -16, 20
    0x4495b9d2, 0xf709e919, 0x7fefcc77, 0x42ad57b, 0xdc08060f, 0xf612fa32, 0xfbf62320, 0x14f0f700,
    // -17, -30, -19, 8, 18, -28, 32, 5, -15, -38, 3, 8, 12, 2, 7, -40, 31, -63, -5, -22, -12, 20, -56, -34, -45, -11, 5, 40, 20, 31, 92, -45
    0x8ede2ef, 0x520e412, 0x803daf1, 0xd807020c, 0xeafbc11f, 0xdec814f4, 0x2805f5d3, 0xd35c1f14,
    // 12, 12, 3, -26, 38, -21, -14, 17, 11, -18, -25, -14, 28, -21, -10, -112, 0, -8, -20, 24, 18, -3, 55, 38, 2, -4, 6, -28, 4, -11, -2, 18
    0xe6030c0c, 0x11f2eb26, 0xf2e7ee0b, 0x90f6eb1c, 0x18ecf800, 0x2637fd12, 0xe406fc02, 0x12fef504,
    // 17, -15, -8, 2, -15, 45, 6, 2, 59, 31, 52, -37, 28, -9, -39, -72, 20, 8, -26, -2, -2, 40, 27, -74, -63, -16, -11, -17, -2, -24, -5, 12
    0x2f8f111, 0x2062df1, 0xdb341f3b, 0xb8d9f71c, 0xfee60814, 0xb61b28fe, 0xeff5f0c1, 0xcfbe8fe,
    // 4, -2, 2, 26, -11, -17, -15, 10, -16, -34, -3, -13, 23, -6, -4, -124, -25, -26, 12, 17, 122, 29, 47, -11, 32, 71, 81, -16, 36, -47, 33, 4
    0x1a02fe04, 0xaf1eff5, 0xf3fddef0, 0x84fcfa17, 0x110ce6e7, 0xf52f1d7a, 0xf0514720, 0x421d124,
    // 12, 0, -9, -4, -14, 22, 1, -1, 36, 9, 15, -21, 22, -10, -27, -73, 11, -47, -33, 48, -10, -89, 9, 9, -42, 99, 67, -2, 24, -44, -4, 2
    0xfcf7000c, 0xff0116f2, 0xeb0f0924, 0xb7e5f616, 0x30dfd10b, 0x909a7f6, 0xfe4363d6, 0x2fcd418,
    // 7, 6, -12, 5, 25, -57, -9, 13, -26, -14, -95, -15, 16, 1, 11, -56, -27, -42, -111, 13, 65, 62, 5, 30, -40, 92, 2, 31, -21, 79, 41, -105
    0x5f40607, 0xdf7c719, 0xf1a1f2e6, 0xc80b0110, 0xd91d6e5, 0x1e053e41, 0x1f025cd8, 0x97294feb,
    // 23, -62, 21, -6, 9, -76, -39, -69, -16, -74, 43, -30, -24, 82, -24, -12, -93, -91, 70, 9, 8, -105, 5, -66, 127, -67, -40, -126, -23, -56, 17, 7
    0xfa15c217, 0xbbd9b409, 0xe22bb6f0, 0xf4e852e8, 0x946a5a3, 0xbe059708, 0x82d8bd7f, 0x711c8e9,
    // -21, 7, 14, 43, 17, -76, -29, 14, -98, -61, -31, 25, -22, 1, 70, -17, -4, -16, 6, -9, -9, -21, -52, -31, 23, -12, -33, -22, -14, 22, -39, 16
    0x2b0e07eb, 0xee3b411, 0x19e1c39e, 0xef4601ea, 0xf706f0fc, 0xe1ccebf7, 0xeadff417, 0x10d916f2,
    // -16, 17, 23, -28, 91, -65, -24, 4, -51, -45, -42, 21, -13, -13, 47, -3, 27, 17, -7, -25, -20, -26, 1, 12, 3, -26, 18, -30, 50, 56, 39, 40
    0xe41711f0, 0x4e8bf5b, 0x15d6d3cd, 0xfd2ff3f3, 0xe7f9111b, 0xc01e6ec, 0xe212e603, 0x28273832,
    // -41, -28, 90, 26, 28, 13, 5, -46, 24, 24, -13, -21, 65, -35, 71, -15, -6, 5, 40, 10, 24, -25, -5, -55, -13, -17, 46, 23, -6, 37, -37, -26
    0x1a5ae4d7, 0xd2050d1c, 0xebf31818, 0xf147dd41, 0xa2805fa, 0xc9fbe718, 0x172eeff3, 0xe6db25fa,
    // -51, -118, 103, 42, 34, 42, 6, 49, -98, 28, -52, 1, -40, -66, -83, -67, 12, -16, 11, -14, -1, 11, 1, 7, -18, -12, 42, 33, -9, -38, 63, -33
    0x2a678acd, 0x31062a22, 0x1cc1c9e, 0xbdadbed8, 0xf20bf00c, 0x7010bff, 0x212af4ee, 0xdf3fdaf7,
    // 43, -71, -59, -12, -19, -49, -47, -10, 16, -57, -35, 40, -59, -75, -22, 9, 14, -7, 32, 2, -22, -2, 35, -11, 24, 30, -38, 36, -18, 19, 15, -28
    0xf4c5b92b, 0xf6d1cfed, 0x28ddc710, 0x9eab5c5, 0x220f90e, 0xf523feea, 0x24da1e18, 0xe40f13ee,
};
static const uint embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias_dwords[16] = {
    // 0.1946, 0.1984, 0.4238, 0.2493, 0.1327, 0.3396, -0.0521, 0.4258, 0.192, -0.171, -0.10156, 0.454, -0.701, 0.4155, -0.2086, -0.0451
    0x3259323a, 0x33fa36c8, 0x356f303f, 0x36d0aaab, 0xb1793225, 0x3744ae80, 0x36a6b99c, 0xa9c6b2ad,
    // -0.07166, 0.151, 0.00814, -0.1157, -0.1951, -0.0362, -0.0785, 0.2385, -0.05798, -0.2292, 0.1312, 0.06573, -0.3599, -0.0445, -0.0714, 0.423
    0x30d5ac96, 0xaf68202b, 0xa8a2b23e, 0x33a2ad06, 0xb356ab6c, 0x2c353033, 0xa9b2b5c2, 0x36c5ac92,
};
static const uint embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -5, 0, -25, 37, 3, -5, -24, 9, -31, 36, 22, -27, -2, 17, 18, 14, 3, -21, 4, 0, 17, -31, -14, 24, 0, 5, -8, 12, -30, 15, -2, -33
    0x25e700fb, 0x9e8fb03, 0xe51624e1, 0xe1211fe, 0x4eb03, 0x18f2e111, 0xcf80500, 0xdffe0fe2,
    // -2, 20, 43, -1, 65, 33, -6, -35, 6, 6, 22, 11, -23, -23, 78, 23, 61, 34, -80, -7, -4, -7, 48, 2, 21, 10, -16, 56, -26, 58, 9, -38
    0xff2b14fe, 0xddfa2141, 0xb160606, 0x174ee9e9, 0xf9b0223d, 0x230f9fc, 0x38f00a15, 0xda093ae6,
    // 82, 16, -32, 14, 47, 105, -48, 5, 10, 1, 62, -15, -55, 14, 94, -63, -57, -99, 54, 104, -24, -38, -76, -48, -91, 49, -26, 17, 113, -15, -69, 8
    0xee01052, 0x5d0692f, 0xf13e010a, 0xc15e0ec9, 0x68369dc7, 0xd0b4dae8, 0x11e631a5, 0x8bbf171,
    // 11, 56, -18, -5, 8, 11, -40, -45, -2, -37, -92, -55, 26, 12, 20, -121, -73, 45, 94, -100, 34, 60, 30, 51, -58, -19, 31, -31, 30, 18, 16, -1
    0xfbee380b, 0xd3d80b08, 0xc9a4dbfe, 0x87140c1a, 0x9c5e2db7, 0x331e3c22, 0xe11fedc6, 0xff10121e,
    // -18, -3, 14, -14, 22, -16, 10, 18, -17, -28, -23, -21, 42, -5, -72, 16, -24, -88, 20, -92, 24, 36, 10, 25, 42, -13, 89, -9, -42, 63, 32, -14
    0xf20efdee, 0x120af016, 0xebe9e4ef, 0x10b8fb2a, 0xa414a8e8, 0x190a2418, 0xf759f32a, 0xf2203fd6,
    // 17, -11, -5, -1, -3, 12, 30, 3, 13, -22, -2, -1, 4, -11, 15, 9, 3, 4, 3, 34, -39, 10, -22, -23, -11, 2, 12, -29, 40, -4, -7, -10
    0xfffbf511, 0x31e0cfd, 0xfffeea0d, 0x90ff504, 0x22030403, 0xe9ea0ad9, 0xe30c02f5, 0xf6f9fc28,
    // -85, 29, -11, 36, -18, 44, 82, -25, 5, 39, 3, -36, -37, -69, 91, -52, -8, 94, 17, 50, -34, -44, -2, -10, -61, -57, -34, 39, -117, 11, 24, 19
    0x24f51dab, 0xe7522cee, 0xdc032705, 0xcc5bbbdb, 0x32115ef8, 0xf6fed4de, 0x27dec7c3, 0x13180b8b,
    // 58, -6, -15, 4, 80, -5, -120, -12, -40, 3, 13, 18, -31, -75, 59, 13, 46, -14, -20, -84, 81, 28, -8, 28, -27, 23, 17, -47, 74, 24, -19, 18
    0x4f1fa3a, 0xf488fb50, 0x120d03d8, 0xd3bb5e1, 0xacecf22e, 0x1cf81c51, 0xd11117e5, 0x12ed184a,
    // -5, 22, -13, -6, 37, 23, 5, -51, -7, -18, -8, 34, -43, 22, 122, -63, 24, 99, -25, 16, -2, 11, 23, -8, -66, -5, 81, -41, 25, -6, -28, 15
    0xfaf316fb, 0xcd051725, 0x22f8eef9, 0xc17a16d5, 0x10e76318, 0xf8170bfe, 0xd751fbbe, 0xfe4fa19,
    // -28, 16, 11, -5, 112, -90, 70, -23, 34, -8, -111, 27, 47, -27, -43, -48, -2, -61, 2, 75, -59, -2, 94, -47, 31, 7, -19, -20, -17, -49, -9, 21
    0xfb0b10e4, 0xe946a670, 0x1b91f822, 0xd0d5e52f, 0x4b02c3fe, 0xd15efec5, 0xeced071f, 0x15f7cfef,
    // 23, -26, 2, -18, -31, 8, 23, 17, 33, -31, 10, -6, 2, -23, -37, 32, -21, -29, -3, 29, -36, 4, -23, -31, 18, 14, 36, -18, 51, -11, -14, 23
    0xee02e617, 0x111708e1, 0xfa0ae121, 0x20dbe902, 0x1dfde3eb, 0xe1e904dc, 0xee240e12, 0x17f2f533,
    // 9, 0, -5, -6, -11, 2, 19, -2, 10, -16, -7, 2, -5, 3, 9, -12, 0, 22, 6, 17, -19, 13, -5, -16, -13, 0, 12, -24, 29, -5, -7, -5
    0xfafb0009, 0xfe1302f5, 0x2f9f00a, 0xf40903fb, 0x11061600, 0xf0fb0ded, 0xe80c00f3, 0xfbf9fb1d,
    // -10, 13, 2, 24, 4, -17, -27, 0, -25, 28, 6, -16, 2, -5, -10, -2, 19, -8, 4, -25, 32, -14, 12, 26, 13, -4, -22, 25, -44, 15, 13, -20
    0x18020df6, 0xe5ef04, 0xf0061ce7, 0xfef6fb02, 0xe704f813, 0x1a0cf220, 0x19eafc0d, 0xec0d0fd4,
    // -56, 5, -16, 29, 84, 58, 11, 0, -14, 57, 30, -16, -37, 1, 57, -16, -9, -89, 27, 31, 5, -62, -49, -4, -54, -23, -41, 37, -102, 2, 14, 26
    0x1df005c8, 0xb3a54, 0xf01e39f2, 0xf03901db, 0x1f1ba7f7, 0xfccfc205, 0x25d7e9ca, 0x1a0e029a,
    // 54, 14, 39, 56, -2, -81, -127, -2, -31, 91, -111, -12, 72, 13, -95, -19, -2, 50, 19, 109, 30, -128, 97, -30, 66, 27, -52, 43, 49, 37, -74, -3
    0x38270e36, 0xfe81affe, 0xf4915be1, 0xeda10d48, 0x6d1332fe, 0xe261801e, 0x2bcc1b42, 0xfdb62531,
    // -20, 4, 22, -6, 60, -12, -16, -21, 2, 1, -27, 13, 11, 44, 30, 13, 50, 53, -51, -35, 21, 11, 53, -2, 12, -14, -24, 33, -22, 26, 16, -28
    0xfa1604ec, 0xebf0f43c, 0xde50102, 0xd1e2c0b, 0xddcd3532, 0xfe350b15, 0x21e8f20c, 0xe4101aea,
};
static const uint embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias_dwords[8] = {
    // -0.2258, -0.1826, -0.0564, 0.0636, 0.2256, 0.02374, 0.0848, 0.0645, -0.1866, 0.1653, 0.118, 0.005898, -0.07574, 0.01033, 0.06824, -0.001302
    0xb1d8b33a, 0x2c12ab38, 0x26143338, 0x2c212d6d, 0x314ab1f9, 0x1e0a2f8d, 0x214aacd9, 0x95552c5e,
};
static const uint embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 5, 13, 33, -9, -23, 5, 13, 11, 6, -42, -10, 7, -11, 23, -36, -2, -12, 16, -14, -57, -60, 3, -23, 17, -63, -2, -7, -15, -4, -9, -25, 53
    0xf7210d05, 0xb0d05e9, 0x7f6d606, 0xfedc17f5, 0xc7f210f4, 0x11e903c4, 0xf1f9fec1, 0x35e7f7fc,
    // -11, 45, 12, -24, -14, -4, -18, 41, 19, 76, -34, -24, 10, 29, -26, 70, -128, 2, 63, 36, 26, 56, -90, 36, 36, -2, 50, 94, -90, -113, -21, -20
    0xe80c2df5, 0x29eefcf2, 0xe8de4c13, 0x46e61d0a, 0x243f0280, 0x24a6381a, 0x5e32fe24, 0xeceb8fa6,
    // 24, -17, -27, 9, -28, 5, -25, -3, 18, 3, 3, -27, -35, 25, -1, -14, -3, -1, -5, -12, -3, -11, 6, 19, -3, 9, -16, 54, 22, -6, -5, -32
    0x9e5ef18, 0xfde705e4, 0xe5030312, 0xf2ff19dd, 0xf4fbfffd, 0x1306f5fd, 0x36f009fd, 0xe0fbfa16,
    // -54, 1, 5, -15, 13, 14, 5, 3, 1, -8, -45, -33, -12, -5, 4, -22, 11, -12, -4, -5, -3, -35, 20, 28, -11, 9, 8, 14, -35, -5, -2, -5
    0xf10501ca, 0x3050e0d, 0xdfd3f801, 0xea04fbf4, 0xfbfcf40b, 0x1c14ddfd, 0xe0809f5, 0xfbfefbdd,
    // 7, 17, 28, -7, -28, 6, 14, 11, 4, -44, -9, 11, -15, 20, -35, 1, 11, 18, -28, -83, 55, -3, -25, 17, 53, -21, 27, 4, 5, 8, 2, -4
    0xf91c1107, 0xb0e06e4, 0xbf7d404, 0x1dd14f1, 0xade4120b, 0x11e7fd37, 0x41beb35, 0xfc020805,
    // 0, 41, 6, -31, 15, -1, -19, 41, 53, 70, -22, -17, 12, 38, -18, 61, -103, -5, 114, -39, -74, 68, -64, -12, 15, 32, 45, 89, -83, -83, 59, -32
    0xe1062900, 0x29edff0f, 0xefea4635, 0x3dee260c, 0xd972fb99, 0xf4c044b6, 0x592d200f, 0xe03badad,
    // 8, -11, -14, 10, -20, -25, 1, 11, 3, 8, 37, -28, -19, 12, -2, -5, -4, -8, -19, 1, -8, 1, -2, 17, -2, 2, 20, 72, 22, 23, 4, -7
    0xaf2f508, 0xb01e7ec, 0xe4250803, 0xfbfe0ced, 0x1edf8fc, 0x11fe01f8, 0x481402fe, 0xf9041716,
    // 12, -39, 0, -16, 4, 21, 8, 13, 8, 10, -26, -24, -3, -14, -3, 7, 7, -14, -4, -8, 7, -13, 10, 15, -9, 3, -21, 24, -48, 1, 3, 1
    0xf000d90c, 0xd081504, 0xe8e60a08, 0x7fdf2fd, 0xf8fcf207, 0xf0af307, 0x18eb03f7, 0x10301d0,
    // 12, 19, 30, -15, -4, 6, 17, 12, 23, -43, -5, 13, -13, 26, -31, -11, -15, 17, -25, -53, -73, 4, -25, 10, -56, -16, 1, -12, 0, -11, -22, 48
    0xf11e130c, 0xc1106fc, 0xdfbd517, 0xf5e11af3, 0xcbe711f1, 0xae704b7, 0xf401f0c8, 0x30eaf500,
    // -27, 25, -44, -8, -75, -3, 42, 20, 39, -30, -17, 25, -14, -51, 14, 57, -103, -5, -14, 9, 62, 57, -3, -75, 29, 78, 41, 68, -72, -29, -120, 4
    0xf8d419e5, 0x142afdb5, 0x19efe227, 0x390ecdf2, 0x9f2fb99, 0xb5fd393e, 0x44294e1d, 0x488e3b8,
    // 21, -29, -7, 3, -11, -16, 5, 9, 6, 7, 25, -37, -28, 4, -2, 18, -18, -15, -3, -10, 2, -8, 5, 17, -4, 5, -4, 54, 23, 5, 0, -1
    0x3f9e315, 0x905f0f5, 0xdb190706, 0x12fe04e4, 0xf6fdf1ee, 0x1105f802, 0x36fc05fc, 0xff000517,
    // -33, 23, -27, 10, -20, 20, 1, 25, -2, 10, -1, -30, 7, 14, 3, -76, -13, 5, -14, 5, -9, -16, -18, -7, 4, -6, -12, 8, -31, 23, 4, -18
    0xae517df, 0x190114ec, 0xe2ff0afe, 0xb4030e07, 0x5f205f3, 0xf9eef0f7, 0x8f4fa04, 0xee0417e1,
    // 9, 15, 26, -11, -10, 8, 16, 12, 21, -48, -3, 17, -13, 28, -28, -12, 5, 17, -32, -79, 38, -6, -25, 9, 51, -33, 28, -1, 6, -6, 5, -3
    0xf51a0f09, 0xc1008f6, 0x11fdd015, 0xf4e41cf3, 0xb1e01105, 0x9e7fa26, 0xff1cdf33, 0xfd05fa06,
    // -20, 21, -42, -15, -54, -6, 42, 18, 60, -31, -12, 20, -13, -55, 19, 55, -76, -11, 37, -69, -23, 71, 32, -124, 15, 111, 40, 65, -61, 9, -33, -15
    0xf1d615ec, 0x122afaca, 0x14f4e13c, 0x3713c9f3, 0xbb25f5b4, 0x842047e9, 0x41286f0f, 0xf1df09c3,
    // -8, -17, -13, -2, -12, -18, 25, 35, -4, 11, 29, -22, -20, 4, 0, -16, -9, -10, -11, -3, -12, -10, -4, 11, 2, 4, 9, 61, 34, 14, -2, -8
    0xfef3eff8, 0x2319eef4, 0xea1d0bfc, 0xf00004ec, 0xfdf5f6f7, 0xbfcf6f4, 0x3d090402, 0xf8fe0e22,
    // -51, -8, 0, -8, 1, 11, 6, 5, 6, -6, -9, -56, -1, 2, 2, -7, 23, 9, -14, 9, -15, -11, -35, -25, 15, -6, -16, -5, -36, 19, 0, -17
    0xf800f8cd, 0x5060b01, 0xc8f7fa06, 0xf90202ff, 0x9f20917, 0xe7ddf5f1, 0xfbf0fa0f, 0xef0013dc,
};
static const uint embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias_dwords[4] = {
    // -0.11914, -0.4111, -0.385, 0.169, -0.02339, 0.02756, -0.04733, -0.06204
    0xb694afa0, 0x3168b629, 0x270ea5fd, 0xabf1aa0f,
};

[numthreads(8, 8, 1)]
void fsr4_model_v07_i8_pass13(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(8, 8, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 16), // threadGroupSliceSize
        uint3(1920, 1080, 16), // storageSize
        uint3(16, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.035173576325178146, storage_fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.007368451915681362, storage_embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_2_body_conv_dw_bias = { embedded_decoder2_ResidualBlock_2_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_2_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_2_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.007268762681633234, storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias = { embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.007326302584260702, storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias = { embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias };
    
    const ConstantBufferStorage<128> storage_embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_HWCN< ConstantBufferStorage<128> > embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 8, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 8, 16), // threadGroupSliceSize
        uint4(2, 2, 8, 16), // storageSize
        uint4(128, 256, 16, 1), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0070633538998663425, storage_embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<4> storage_embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias = { embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<4> > embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias = {
        8, // logicalSize
        0, // threadGroupSliceStart
        8, // threadGroupSliceSize
        8, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias };
    
    // fused_quantized_NHWC_output
    const uint3 logicalSize_fused_quantized_NHWC_output = uint3(3840, 2160, 8);
    const int3 groupStart_fused_quantized_NHWC_output = int3(0, 0, 0) + ml2c_groupId.xyz * int3(16, 16, 8);
    const uint3 groupSize_fused_quantized_NHWC_output = uint3(16, 16, 8);
    const uint3 storageSize_fused_quantized_NHWC_output = uint3(3840, 2160, 8);
    const uint3 tensorByteStrides_fused_quantized_NHWC_output = uint3(16, 61440, 2);
    const uint3 paddingBegin_fused_quantized_NHWC_output = uint3(0, 0, 0);
    const uint3 paddingEnd_fused_quantized_NHWC_output = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_fused_quantized_NHWC_output = dot(groupStart_fused_quantized_NHWC_output, tensorByteStrides_fused_quantized_NHWC_output);
    const RWBufferStorage storage_fused_quantized_NHWC_output = { buffer_fused_quantized_NHWC_output };
    const Tensor3h_NHWC<RWBufferStorage> fused_quantized_NHWC_output = { logicalSize_fused_quantized_NHWC_output, groupStart_fused_quantized_NHWC_output, groupSize_fused_quantized_NHWC_output, storageSize_fused_quantized_NHWC_output, tensorByteStrides_fused_quantized_NHWC_output, paddingBegin_fused_quantized_NHWC_output, paddingEnd_fused_quantized_NHWC_output, threadGroupByteOffsetInTensor_fused_quantized_NHWC_output + 0, storage_fused_quantized_NHWC_output };
    // FusedConvNextBlock_quantized_/decoder2/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose (16, 1080, 1920), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,), (16, 8, 2, 2), (8,) -> (8, 2160, 3840)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    CNB_CT2D<8>(16.584852442729886, 0.06029598414897919, 22.7801944733756, 0.043897781521081924, 0.06884194910526276, fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_2_body_conv_dw_bias, embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias, embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias, embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias, fused_quantized_NHWC_output, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_13


