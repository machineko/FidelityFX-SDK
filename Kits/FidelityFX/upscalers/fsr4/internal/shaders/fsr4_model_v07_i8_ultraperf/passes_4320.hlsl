// Copyright(C) 2024-2025 Advanced Micro Devices, Inc. All rights reserved.
// Autogenerated 2025-02-26 12:48:03 using ML2Code from "models\2024\October\Release7\UltraPerf\fsr4_model_v07_i8.onnx". Do not edit.
// Compile with dxc.exe -no-warnings -O3 -enable-16bit-types -HV 2021 -T cs_6_6 -I . -I hlsl -E fsr4_model_v07_i8_pass0 "generated\hlsl\fsr4_model_v07_i8.hlsl"

// Scratch memory size needed: 331776000 (316.4MB)

// This file was generated for navi48 SKU
#define WMMA_ENABLED  0
#define FP8_ENABLED  1
#define DOT4_ENABLED  1


ByteAddressBuffer buffer_NHWC_inputs : register(t0);
RWByteAddressBuffer buffer_fused_quantized_NHWC_output : register(u0);
ByteAddressBuffer InitializerBuffer : register(t1);
RWByteAddressBuffer ScratchBuffer : register(u1);

#ifdef MLSR_PASS_0
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Conv2D_k2s2b.hlsli"

static const uint embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight_dwords[256] = {
    // 0.1537, -0.1125, -0.1558, 0.0194, -0.06354, 0.0769, -0.03766, 0.0, 0.4497, 0.0829, -0.1101, -0.08093, -0.007233, -0.01619, 0.00691, 0.0
    0xaf3330eb, 0x24f7b0fc, 0x2cecac11, 0xa8d2, 0x2d4e3732, 0xad2eaf0c, 0xa4259f68, 0x1f13,
    // -0.408, -0.1045, -0.221, 0.1215, -0.006416, -0.02164, -0.1295, 0.0, -0.3145, -0.02995, -0.04388, 0.077, 0.0948, -0.06946, -0.08044, 0.0
    0xaeb0b687, 0x2fc7b312, 0xa58a9e92, 0xb025, 0xa7abb508, 0x2ceea99e, 0xac722e11, 0xad26,
    // 0.09106, -0.2185, -0.588, -0.00816, -0.1777, 0.1622, -0.1968, 0.0, 0.0537, -0.1387, -0.5933, 0.04684, 0.03098, 0.02483, -0.005234, 0.0
    0xb2fe2dd4, 0xa02eb8b4, 0x3131b1b0, 0xb24c, 0xb0702ae0, 0x29ffb8bf, 0x265b27ee, 0x9d5c,
    // 0.2295, -0.08887, -0.4058, 0.11786, 0.03314, -0.0928, -0.08795, 0.0, 0.2283, -0.1115, -0.409, 0.1323, 0.10547, -0.0654, -0.001252, 0.0
    0xadb03358, 0x2f8bb67e, 0xadf0283e, 0xada1, 0xaf23334e, 0x303cb68b, 0xac302ec0, 0x9521,
    // -0.2024, 0.09094, 0.553, -0.010414, -0.01047, 0.02092, -0.08185, 0.0, -0.07324, 0.09406, 0.523, 0.1384, 0.10583, -0.00947, -0.04947, 0.0
    0x2dd2b27a, 0xa155386d, 0x255ba15c, 0xad3d, 0x2e05acb0, 0x306e382f, 0xa0d92ec6, 0xaa55,
    // -0.2073, 0.1921, 0.349, -0.131, 0.1431, -0.1343, 0.1289, 0.0, -0.2393, 0.2175, 0.4868, -0.11426, 0.0422, -0.10675, 0.08606, 0.0
    0x3226b2a2, 0xb0313596, 0xb04c3094, 0x3020, 0x32f6b3a8, 0xaf5037ca, 0xaed52967, 0x2d82,
    // 0.5474, -0.0818, -0.04407, -0.031, -0.04855, 0.00623, 0.01417, 0.0, -0.111, -0.0283, -0.08496, -0.00932, -0.018, 0.02707, 0.002443, 0.0
    0xad3c3861, 0xa7f0a9a4, 0x1e61aa37, 0x2341, 0xa73faf1b, 0xa0c6ad70, 0x26eea49c, 0x1901,
    // 0.1156, 0.0651, 0.1132, -0.007797, 0.00903, -0.02579, -0.001712, 0.0, -0.6504, 0.0994, 0.1711, 0.02489, 0.05026, -0.02657, 0.00949, 0.0
    0x2c2b2f66, 0x9ffc2f3f, 0xa69a20a0, 0x9703, 0x2e5db934, 0x265f317a, 0xa6cd2a6f, 0x20dc,
    // 0.2269, -0.1854, -0.03424, -0.00631, 0.02754, -0.1442, -0.1043, 0.0, 0.2158, -0.01434, 0.02397, 0.0703, 0.077, -0.07916, -0.02397, 0.0
    0xb1ef3343, 0x9e76a862, 0xb09d270d, 0xaead, 0xa35832e8, 0x2c802623, 0xad112cee, 0xa623,
    // -0.04114, -0.07983, 0.02995, -0.065, 0.00347, 0.0633, 0.05487, 0.0, 0.0373, 0.10114, 0.01875, 0.0374, -0.01952, 0.1957, 0.08527, 0.0
    0xad1ca944, 0xac2927ab, 0x2c0d1b1b, 0x2b06, 0x2e7928c6, 0x28ca24cd, 0x3243a4ff, 0x2d75,
    // 0.2206, -0.11035, 0.1774, -0.07025, -0.1416, 0.1853, 0.0952, 0.0, 0.2805, -0.01337, 0.211, -0.0846, -0.1635, 0.2233, 0.0298, 0.0
    0xaf10330f, 0xac7f31ad, 0x31eeb088, 0x2e18, 0xa2d8347d, 0xad6a32c1, 0x3325b13b, 0x27a1,
    // 0.1483, 0.0557, 0.2593, 9.57e-05, 0.04922, -0.0567, -0.03412, 0.0, 0.2869, 0.09314, 0.1584, 0.010155, -0.09485, -0.009056, -0.12036, 0.0
    0x2b2130bf, 0x6463426, 0xab422a4d, 0xa85e, 0x2df63497, 0x21333112, 0xa0a3ae12, 0xafb4,
    // -0.0584, 0.1355, -0.593, 0.2113, 0.1085, -0.03235, -0.3213, 0.0, -0.05386, 0.0761, -0.6, 0.2556, 0.03516, 0.07654, -0.378, 0.0
    0x3056ab7a, 0x32c3b8be, 0xa8242ef2, 0xb524, 0x2cdfaae5, 0x3417b8cd, 0x2ce62880, 0xb60c,
    // -0.0398, 0.0662, -0.5317, 0.2273, -0.01125, -0.02553, -0.2408, 0.0, -0.0953, -0.01121, -0.4983, 0.208, -0.11957, 0.1307, -0.3398, 0.0
    0x2c3da918, 0x3346b841, 0xa689a1c3, 0xb3b5, 0xa1bdae19, 0x32a8b7f9, 0x302fafa7, 0xb570,
    // 0.2115, -0.0527, -0.1477, -0.01595, 0.2339, -0.509, 0.1631, 0.0, 0.1582, -0.1455, -0.09906, 0.04315, 0.2103, -0.406, 0.0008388, 0.0
    0xaabf32c5, 0xa415b0ba, 0xb812337c, 0x3138, 0xb0a83110, 0x2986ae57, 0xb67f32bb, 0x12df,
    // 0.1573, -0.1035, 0.014404, 0.05804, 0.25, -0.4414, -0.01761, 0.0, 0.2039, -0.1857, -0.11304, 0.06665, 0.2235, -0.3906, -0.03067, 0.0
    0xaea03109, 0x2b6e2360, 0xb7103400, 0xa482, 0xb1f13286, 0x2c44af3c, 0xb6403327, 0xa7da,
    // -0.0619, 0.07526, 0.06555, 0.2727, -0.277, -0.2341, 0.2012, 0.0, -0.01636, 0.07745, 0.1142, 0.408, -0.2559, -0.1818, 0.2693, 0.0
    0x2cd1abec, 0x345d2c32, 0xb37eb46f, 0x3270, 0x2cf5a430, 0x36872f4f, 0xb1d1b418, 0x344f,
    // -0.0471, 0.0638, 0.01935, 0.3455, -0.2212, -0.1112, 0.2275, 0.0, -0.05188, 0.05524, 0.1017, 0.3752, -0.2097, -0.12427, 0.2117, 0.0
    0x2c15aa07, 0x358724f4, 0xaf1eb314, 0x3348, 0x2b12aaa4, 0x36012e82, 0xaff4b2b6, 0x32c6,
    // 0.1113, -0.136, -0.975, -0.0421, 0.09283, 0.04022, 0.09894, 0.0, 0.0871, -0.0961, -0.9404, 0.0006294, 0.1425, 0.01729, 0.1576, 0.0
    0xb05a2f20, 0xa964bbcd, 0x29262df1, 0x2e55, 0xae272d93, 0x1128bb86, 0x246d308f, 0x310b,
    // 0.04276, -0.1055, -0.8906, -0.04526, 0.10974, 0.02647, 0.12415, 0.0, 0.08575, -0.04892, -0.9355, -0.04623, 0.06323, 0.00614, 0.104, 0.0
    0xaec12979, 0xa9cbbb20, 0x26c72f06, 0x2ff2, 0xaa432d7d, 0xa9ebbb7c, 0x1e4a2c0c, 0x2ea8,
    // -0.0985, 0.0938, -0.703, 0.04486, -0.003523, 0.003881, 0.006786, 0.0, -0.06116, 0.1256, -0.621, -0.02522, 0.001027, -0.09174, 0.01426, 0.0
    0x2e01ae4e, 0x29beb9a0, 0x1bf39b37, 0x1ef3, 0x3005abd4, 0xa675b8f8, 0xaddf1435, 0x234d,
    // -0.0679, 0.0863, -0.583, -0.005795, -0.02435, -0.02982, -0.01, 0.0, -0.10864, 0.1211, -0.5054, -0.04703, -0.08124, -0.07135, -0.01915, 0.0
    0x2d86ac58, 0x9defb8aa, 0xa7a2a63c, 0xa11f, 0x2fc0aef4, 0xaa05b80b, 0xac91ad33, 0xa4e7,
    // -0.05328, 0.1879, 0.2008, -0.1536, 0.1781, 0.05963, -0.01198, 0.0, -0.02835, 0.1383, 0.1893, -0.0883, 0.1169, 0.1588, 0.074, 0.0
    0x3203aad2, 0xb0ea326d, 0x2ba231b3, 0xa222, 0x306da742, 0xada7320f, 0x31152f7b, 0x2cbc,
    // -0.05716, 0.1792, 0.1713, 0.03102, 0.1434, -0.04385, 0.02657, 0.0, -0.1284, 0.1252, 0.1732, 0.09894, 0.04376, -0.04633, -0.0158, 0.0
    0x31bcab51, 0x27f1317b, 0xa99d3097, 0x26cd, 0x3002b01c, 0x2e55318b, 0xa9ee299a, 0xa40b,
    // 0.0941, -0.2615, 0.7036, 0.2039, 0.05508, 0.0735, -0.2058, 0.0, 0.0708, -0.12354, 0.7837, 0.05676, 0.04242, -0.001545, -0.03903, 0.0
    0xb42f2e06, 0x328639a1, 0x2cb42b0d, 0xb296, 0xafe82c88, 0x2b443a45, 0x9654296e, 0xa8ff,
    // 0.08124, -0.167, 0.6304, 0.1023, -0.05746, 0.13, -0.0678, 0.0, 0.1439, -0.0447, 0.7764, 0.04535, -0.1359, 0.00422, -0.10736, 0.0
    0xb1582d33, 0x2e8c390b, 0x3029ab5b, 0xac57, 0xa9b9309b, 0x29ce3a36, 0x1c52b059, 0xaedf,
    // 0.0918, 0.1868, 0.001615, 0.1871, -0.013466, 0.1582, -0.2484, 0.0, -0.001718, 0.1759, 0.0751, 0.01727, 0.1119, -0.0583, -0.1553, 0.0
    0x31fa2de0, 0x31fd169d, 0x3110a2e5, 0xb3f3, 0x31a19709, 0x246c2cce, 0xab762f29, 0xb0f8,
    // -0.01927, 0.07007, -0.0468, 0.0912, -0.07135, 0.1425, -0.1917, 0.0, -0.0573, 0.10443, 0.02748, -0.07916, 0.2573, -0.1, -0.0709, 0.0
    0x2c7ca4ef, 0x2dd6a9fe, 0x308fac91, 0xb222, 0x2eafab56, 0xad112709, 0xae66341e, 0xac8a,
    // -0.2751, -0.1782, 0.1294, -0.0354, -0.004215, -0.07336, -0.01817, 0.0, -0.182, 0.0646, 0.04977, -0.071, 0.05963, -0.03424, 0.02477, 0.0
    0xb1b4b467, 0xa8883024, 0xacb29c51, 0xa4a7, 0x2c22b1d3, 0xac8b2a5f, 0xa8622ba2, 0x2657,
    // -0.04575, 0.11566, 0.1919, 0.02405, 0.0805, -0.03268, -0.0799, 0.0, -0.02733, 0.3804, 0.04996, 0.0758, 0.2349, -0.07654, -0.01297, 0.0
    0x2f67a9db, 0x26283224, 0xa82f2d27, 0xad1d, 0x3616a6ff, 0x2cda2a65, 0xace63384, 0xa2a4,
    // 0.1005, -0.2306, -0.5947, 0.07086, -0.01947, 0.06714, -0.01502, 0.0, 0.10944, -0.1173, -0.4905, 0.1664, -0.1714, 0.11884, -0.1512, 0.0
    0xb3612e6f, 0x2c89b8c2, 0x2c4ca4fc, 0xa3b1, 0xaf822f01, 0x3153b7d9, 0x2f9bb17c, 0xb0d7,
    // 0.0648, -0.0655, -0.5664, 0.001044, -0.1372, -0.02332, 0.05453, 0.0, 0.1632, 0.06052, -0.5386, 0.02365, -0.1345, -0.11456, -0.01935, 0.0
    0xac312c26, 0x1447b888, 0xa5f8b064, 0x2afb, 0x2bbf3139, 0x260eb84f, 0xaf55b04e, 0xa4f4,
};
static const uint embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias_dwords[8] = {
    // -0.09534, 0.0265, -0.0444, -0.01598, 0.11224, 0.2029, 0.02411, 0.00877, 0.02945, 0.0369, 0.0431, 0.09283, -0.0886, 0.1261, -0.0162, 0.04175
    0x26c9ae1a, 0xa417a9af, 0x327e2f2f, 0x207e262c, 0x28b9278a, 0x2df12984, 0x3009adac, 0x2958a426,
};

[numthreads(8, 8, 1)]
void fsr4_model_v07_i8_pass0(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(8, 8, 1);
    
    const BufferStorage storage_NHWC_inputs = { buffer_NHWC_inputs };
    const Tensor3h_NHWC< BufferStorage > NHWC_inputs = {
        uint3(7680, 4320, 7), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(7680, 4320, 7), // threadGroupSliceSize
        uint3(7680, 4320, 8), // storageSize
        uint3(16, 122880, 2), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_NHWC_inputs };
    const ConstantBufferStorage<256> storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight = { embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight_dwords };
    const Tensor4h_NHWC< ConstantBufferStorage<256> > embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight = {
        uint4(2, 2, 7, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 7, 16), // threadGroupSliceSize
        uint4(2, 2, 8, 16), // storageSize
        uint4(16, 32, 2, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight };
    
    const ConstantBufferStorage<8> storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias = { embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias };
    
    // quantized_NHWC_/encoder2/ResidualBlock_0/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_0 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_0 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(8, 8, 16);
    const uint3 groupSize_slice_0 = uint3(8, 8, 16);
    const uint3 storageSize_slice_0 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_0 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_0 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_0 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_0 = dot(groupStart_slice_0, tensorByteStrides_slice_0);
    const float quantizationScale_slice_0 = 0.011951033025979996;
    const RWBufferStorage storage_slice_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_0 = { logicalSize_slice_0, groupStart_slice_0, groupSize_slice_0, storageSize_slice_0, tensorByteStrides_slice_0, paddingBegin_slice_0, paddingEnd_slice_0, threadGroupByteOffsetInTensor_slice_0 + 0, quantizationScale_slice_0, storage_slice_0 };
    // /encoder1/DownscaleStridedConv2x2/downscale_conv/Conv (7, 4320, 7680), (16, 7, 2, 2), (16,) -> (16, 2160, 3840)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    Conv2D_k2s2b(NHWC_inputs, embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight, embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias, slice_0, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_0
#ifdef MLSR_PASS_0_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass0_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // quantized_NHWC_/encoder2/ResidualBlock_0/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_1 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_1 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_1 = uint3(32, 1, 16);
    const uint3 storageSize_slice_1 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_1 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_1 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_1 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_1 = dot(groupStart_slice_1, tensorByteStrides_slice_1);
    const float quantizationScale_slice_1 = 0.011951033025979996;
    const RWBufferStorage storage_slice_1 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_1 = { logicalSize_slice_1, groupStart_slice_1, groupSize_slice_1, storageSize_slice_1, tensorByteStrides_slice_1, paddingBegin_slice_1, paddingEnd_slice_1, threadGroupByteOffsetInTensor_slice_1 + 0, quantizationScale_slice_1, storage_slice_1 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_1, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_0_POST


#ifdef MLSR_PASS_1
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/ConvNextBlock.hlsli"

static const uint embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // -11, -17, -8, -3, 15, 20, -4, 4, 1, 6, 5, 15, -7, 10, -6, 17, 1, 10, -1, -31, 4, 27, 2, 12, 4, 4, -3, 16, 0, 14, -12, 19
    0xfdf8eff5, 0x4fc140f, 0xf050601, 0x11fa0af9, 0xe1ff0a01, 0xc021b04, 0x10fd0404, 0x13f40e00,
    // -11, 4, -9, -6, 1, 7, -1, 3, 2, -4, 6, 0, 0, -1, 7, -3, -2, 0, -19, -10, 4, 10, -10, 7, -8, 3, 11, -2, -1, 13, -15, -6
    0xfaf704f5, 0x3ff0701, 0x6fc02, 0xfd07ff00, 0xf6ed00fe, 0x7f60a04, 0xfe0b03f8, 0xfaf10dff,
    // 35, -83, 13, 11, -25, -43, -1, 5, 8, -4, 28, -5, -8, -35, 0, -44, 40, -18, -10, -24, 50, 2, 5, 2, -10, -2, -20, -10, -7, -12, -6, 12
    0xb0dad23, 0x5ffd5e7, 0xfb1cfc08, 0xd400ddf8, 0xe8f6ee28, 0x2050232, 0xf6ecfef6, 0xcfaf4f9,
    // 2, -3, 4, -6, -6, -1, 6, 3, -7, 10, -13, 5, -12, -6, 4, 6, -20, 13, -9, -4, -51, -11, 6, -6, 1, 23, -24, -3, 12, -14, 8, 19
    0xfa04fd02, 0x306fffa, 0x5f30af9, 0x604faf4, 0xfcf70dec, 0xfa06f5cd, 0xfde81701, 0x1308f20c,
    // 7, 13, 15, 9, -15, -4, 1, -3, 0, -7, 0, -9, -8, 1, 12, -3, -2, -3, -7, -10, 1, -1, 8, -9, -1, -8, -3, 6, -4, -4, -7, -9
    0x90f0d07, 0xfd01fcf1, 0xf700f900, 0xfd0c01f8, 0xf6f9fdfe, 0xf708ff01, 0x6fdf8ff, 0xf7f9fcfc,
    // 12, -7, -22, -21, 1, -2, -3, -2, -3, 2, -23, -3, 7, 2, -24, -5, -21, 6, -11, 12, 4, 5, -15, 2, -5, -8, -6, 3, -6, -1, 2, 5
    0xebeaf90c, 0xfefdfe01, 0xfde902fd, 0xfbe80207, 0xcf506eb, 0x2f10504, 0x3faf8fb, 0x502fffa,
    // 1, -6, -18, -7, -12, -8, 3, -5, -5, -6, -23, -13, 9, -14, -8, 13, 13, 42, -22, -48, 1, -20, -8, 10, -22, 8, -85, -29, 53, -24, 20, 25
    0xf9eefa01, 0xfb03f8f4, 0xf3e9fafb, 0xdf8f209, 0xd0ea2a0d, 0xaf8ec01, 0xe3ab08ea, 0x1914e835,
    // -8, 10, -34, 33, 26, 18, -19, 8, -1, 5, -2, 1, 14, 9, -12, 13, 5, 0, 2, -8, 3, 1, -3, -3, -4, -5, -11, 1, -4, 1, -2, 11
    0x21de0af8, 0x8ed121a, 0x1fe05ff, 0xdf4090e, 0xf8020005, 0xfdfd0103, 0x1f5fbfc, 0xbfe01fc,
    // 11, -10, -13, 13, 29, 3, -10, 3, -1, 22, -12, 0, 19, 1, -17, 3, 1, 0, -24, 19, 15, 7, -16, -3, -3, -11, -5, -3, -15, 2, -10, 3
    0xdf3f60b, 0x3f6031d, 0xf416ff, 0x3ef0113, 0x13e80001, 0xfdf0070f, 0xfdfbf5fd, 0x3f602f1,
    // -13, 2, -2, 11, -21, -10, -5, -4, 4, 5, -5, 4, 0, 13, -7, 0, -1, -7, 22, 32, -54, -44, 20, -19, -10, -2, -25, -20, 24, -46, 8, -5
    0xbfe02f3, 0xfcfbf6eb, 0x4fb0504, 0xf90d00, 0x2016f9ff, 0xed14d4ca, 0xece7fef6, 0xfb08d218,
    // 60, -23, 28, -13, -1, -34, 0, -17, -9, 11, -7, -14, 0, -7, -3, -4, 15, 9, 4, -14, 22, 27, -24, 13, 2, 4, 4, 10, 7, 26, -36, 10
    0xf31ce93c, 0xef00deff, 0xf2f90bf7, 0xfcfdf900, 0xf204090f, 0xde81b16, 0xa040402, 0xadc1a07,
    // -47, 25, -18, 99, 1, 25, -2, 32, -8, -1, -66, 3, -1, 21, -70, 14, 12, -11, 27, -14, -38, -51, 0, -32, -6, 10, -9, -21, 10, -30, 19, 16
    0x63ee19d1, 0x20fe1901, 0x3befff8, 0xeba15ff, 0xf21bf50c, 0xe000cdda, 0xebf70afa, 0x1013e20a,
    // -6, -14, -19, 4, 31, 21, -7, 2, 8, 0, 8, 7, -4, 28, -19, -10, -15, 9, -11, -20, 21, 23, 0, 14, -2, -7, -18, 5, -6, 17, 0, 16
    0x4edf2fa, 0x2f9151f, 0x7080008, 0xf6ed1cfc, 0xecf509f1, 0xe001715, 0x5eef9fe, 0x100011fa,
    // -12, 13, 5, 8, 9, 3, -4, -3, -1, -2, -1, -4, -2, 0, -3, -2, 0, 1, -9, -4, -7, 9, -9, 1, 7, 3, -4, 1, -1, -1, -5, -13
    0x8050df4, 0xfdfc0309, 0xfcfffeff, 0xfefd00fe, 0xfcf70100, 0x1f709f9, 0x1fc0307, 0xf3fbffff,
    // 3, 0, 1, 14, 5, 2, -1, 1, -6, -15, 12, -14, 1, -2, -25, -13, -6, -2, 1, -15, 9, -6, -8, -5, -4, 11, 7, -1, -5, 2, 4, -8
    0xe010003, 0x1ff0205, 0xf20cf1fa, 0xf3e7fe01, 0xf101fefa, 0xfbf8fa09, 0xff070bfc, 0xf80402fb,
    // 3, 9, 8, 10, -38, -26, 6, -4, 3, -2, 6, -4, 17, -13, -9, -18, -27, -15, 11, -102, 9, 55, -18, 18, 5, -20, 32, 27, -41, 22, 5, -10
    0xa080903, 0xfc06e6da, 0xfc06fe03, 0xeef7f311, 0x9a0bf1e5, 0x12ee3709, 0x1b20ec05, 0xf60516d7,
    // -17, 22, -16, 5, -21, 17, 3, -5, -2, 0, -27, 12, 3, -2, -33, -11, -14, 19, 2, 2, -3, -26, 8, -9, -1, -5, -8, -15, -6, -22, 18, -6
    0x5f016ef, 0xfb0311eb, 0xce500fe, 0xf5dffe03, 0x20213f2, 0xf708e6fd, 0xf1f8fbff, 0xfa12eafa,
    // 26, -8, 7, -6, 11, -14, 6, 6, -2, -14, -12, -20, 4, -5, -36, -14, 6, -4, 11, 5, -13, -13, -2, -6, 1, -9, 10, -9, 8, -6, 12, 2
    0xfa07f81a, 0x606f20b, 0xecf4f2fe, 0xf2dcfb04, 0x50bfc06, 0xfafef3f3, 0xf70af701, 0x20cfa08,
    // -19, 21, -19, -6, 5, 10, -1, 0, -7, -22, 11, 0, 1, -13, -26, -16, 17, 6, -21, -19, 3, -19, -3, -18, 13, 15, -4, -3, 6, 6, 32, -22
    0xfaed15ed, 0xff0a05, 0xbeaf9, 0xf0e6f301, 0xedeb0611, 0xeefded03, 0xfdfc0f0d, 0xea200606,
    // 35, 8, 9, -15, -23, -32, -5, -3, -2, -16, -15, -28, 0, -25, -8, 5, 15, -15, -7, -18, 77, 34, 9, 1, -4, -6, -11, 17, -21, -2, -6, 5
    0xf1090823, 0xfdfbe0e9, 0xe4f1f0fe, 0x5f8e700, 0xeef9f10f, 0x109224d, 0x11f5fafc, 0x5fafeeb,
    // -1, 31, 31, 64, 78, 61, -46, -8, 12, 19, 10, 52, -11, 53, 57, 31, 29, 39, 22, -8, -32, -22, 26, -8, 4, -14, -30, -15, 10, -43, 42, -23
    0x401f1fff, 0xf8d23d4e, 0x340a130c, 0x1f3935f5, 0xf816271d, 0xf81aeae0, 0xf1e2f204, 0xe92ad50a,
    // -7, 3, 3, -14, 0, 15, 2, 7, -10, -13, 0, 4, -5, -12, -33, 2, 11, 5, -1, -50, 57, 0, -19, -10, 11, 6, 8, 3, -4, 4, -3, -19
    0xf20303f9, 0x7020f00, 0x400f3f6, 0x2dff4fb, 0xceff050b, 0xf6ed0039, 0x308060b, 0xedfd04fc,
    // -17, -20, -1, 14, -27, -27, 12, -5, 2, -14, 4, -12, 20, -18, 3, 12, 1, 1, 1, 8, -7, -2, 4, -2, -3, -9, -2, -4, 5, 5, -1, 2
    0xeffecef, 0xfb0ce5e5, 0xf404f202, 0xc03ee14, 0x8010101, 0xfe04fef9, 0xfcfef7fd, 0x2ff0505,
    // 35, 9, 18, 3, -12, -15, 1, -4, -2, -8, -15, -14, 0, -19, -17, 8, -1, 0, 13, -4, -11, 2, 14, -3, 2, 2, -7, 1, 2, -2, -9, -9
    0x3120923, 0xfc01f1f4, 0xf2f1f8fe, 0x8efed00, 0xfc0d00ff, 0xfd0e02f5, 0x1f90202, 0xf7f7fe02,
    // -30, 14, -1, 31, -13, -7, -8, 3, -12, -1, 14, -12, 9, -3, 8, 4, -25, 7, 3, -110, -21, -31, 10, -12, 0, 20, -5, -8, 1, -21, 14, -14
    0x1fff0ee2, 0x3f8f9f3, 0xf40efff4, 0x408fd09, 0x920307e7, 0xf40ae1eb, 0xf8fb1400, 0xf20eeb01,
    // -21, -19, -2, 13, 25, 3, 3, 2, 1, 7, 5, 7, 9, 14, -5, 9, 12, -18, -15, -7, 7, 14, 0, 4, -2, -5, 8, 1, -2, 11, -4, -12
    0xdfeedeb, 0x2030319, 0x7050701, 0x9fb0e09, 0xf9f1ee0c, 0x4000e07, 0x108fbfe, 0xf4fc0bfe,
    // 9, 15, -21, -5, 9, 30, -10, 6, 1, -9, -1, 16, -8, 10, -22, -11, -7, 14, 2, 12, -7, 7, 7, -4, 7, -13, -5, 5, -21, 6, -11, -21
    0xfbeb0f09, 0x6f61e09, 0x10fff701, 0xf5ea0af8, 0xc020ef9, 0xfc0707f9, 0x5fbf307, 0xebf506eb,
    // -11, -26, 8, 19, 29, 10, 5, -8, 5, 5, 17, 1, 9, -4, 12, 5, 2, -13, 15, -8, -12, -6, 3, 1, -10, 6, -15, -5, -8, 13, 24, 44
    0x1308e6f5, 0xf8050a1d, 0x1110505, 0x50cfc09, 0xf80ff302, 0x103faf4, 0xfbf106f6, 0x2c180df8,
    // 32, 2, 3, -17, 5, -11, 5, -6, 8, 3, -14, 6, -7, -10, 19, -6, -28, -13, -16, 11, 3, 1, 36, -17, -1, 5, -24, -6, -25, -16, 18, 20
    0xef030220, 0xfa05f505, 0x6f20308, 0xfa13f6f9, 0xbf0f3e4, 0xef240103, 0xfae805ff, 0x1412f0e7,
    // -16, 17, -18, -103, 59, 38, -33, 19, 0, 7, -9, -3, 5, 46, 48, 27, -63, 7, -16, 23, -39, -10, 6, -7, -7, -9, -27, -21, -24, -45, 14, 6
    0x99ee11f0, 0x13df263b, 0xfdf70700, 0x1b302e05, 0x17f007c1, 0xf906f6d9, 0xebe5f7f9, 0x60ed3e8,
    // -19, -6, -7, 12, -8, -3, -3, -6, -3, 3, -12, 4, -4, 4, 25, 11, 23, -24, 13, -28, 19, -5, 10, 5, -13, 32, 3, 4, 13, -15, 0, 21
    0xcf9faed, 0xfafdfdf8, 0x4f403fd, 0xb1904fc, 0xe40de817, 0x50afb13, 0x40320f3, 0x1500f10d,
    // -10, -29, -5, -20, -24, -13, -5, -13, 2, 13, -5, -6, 7, 6, 24, 46, -7, 3, 5, 9, 13, 6, 1, -14, 7, -2, -3, 7, -8, 5, 9, -20
    0xecfbe3f6, 0xf3fbf3e8, 0xfafb0d02, 0x2e180607, 0x90503f9, 0xf201060d, 0x7fdfe07, 0xec0905f8,
    // -25, 18, -11, -20, -5, 16, -14, 3, 11, 19, -3, 0, -9, 6, -6, 19, -3, 4, 7, 15, -10, 4, 4, -2, -1, -7, -8, 5, 7, 8, -5, -10
    0xecf512e7, 0x3f210fb, 0xfd130b, 0x13fa06f7, 0xf0704fd, 0xfe0404f6, 0x5f8f9ff, 0xf6fb0807,
    // 17, 12, 4, -29, 6, 10, -5, 0, 8, 21, 3, -1, -3, -2, -18, -8, 14, 34, -26, 26, 3, 1, -3, 14, 12, 84, 14, 5, -20, -4, -52, 18
    0xe3040c11, 0xfb0a06, 0xff031508, 0xf8eefefd, 0x1ae6220e, 0xefd0103, 0x50e540c, 0x12ccfcec,
    // 13, -7, -4, -4, -25, -7, 6, -9, -4, 34, -23, 1, 13, -17, -8, 10, 1, -1, 13, 16, 2, -5, 8, -9, 4, 1, -17, -2, -3, -8, -11, -9
    0xfcfcf90d, 0xf706f9e7, 0x1e922fc, 0xaf8ef0d, 0x100dff01, 0xf708fb02, 0xfeef0104, 0xf7f5f8fd,
    // -4, 12, 0, -9, -15, -15, 15, -1, 0, 31, -9, -11, 10, -8, -12, 4, 3, -11, 7, 4, -12, -8, -2, -8, -3, 7, 5, 2, 15, 1, 4, 4
    0xf7000cfc, 0xff0ff1f1, 0xf5f71f00, 0x4f4f80a, 0x407f503, 0xf8fef8f4, 0x20507fd, 0x404010f,
    // 24, -23, -1, 7, -14, -23, 10, -7, -3, 3, -6, -10, -4, -15, -9, -9, 21, 14, -1, 42, -24, -17, 0, -7, 3, 17, -6, 7, -5, -1, 4, -20
    0x7ffe918, 0xf90ae9f2, 0xf6fa03fd, 0xf7f7f1fc, 0x2aff0e15, 0xf900efe8, 0x7fa1103, 0xec04fffb,
    // -2, -5, -6, -14, 8, 18, 8, -2, 5, -3, 2, 3, -11, 19, 17, 10, 50, -16, 19, 78, -36, -52, 15, -13, -10, 20, 3, -16, 5, -46, 25, -13
    0xf2fafbfe, 0xfe081208, 0x302fd05, 0xa1113f5, 0x4e13f032, 0xf30fccdc, 0xf00314f6, 0xf319d205,
    // -14, 43, -29, -95, 36, 25, -36, 6, -2, 49, -18, 2, 13, 16, -35, 36, -50, 3, -29, 46, 61, 31, 5, 29, -5, -12, -1, 11, 9, 44, -23, 14
    0xa1e32bf2, 0x6dc1924, 0x2ee31fe, 0x24dd100d, 0x2ee303ce, 0x1d051f3d, 0xbfff4fb, 0xee92c09,
    // -19, -3, -14, -4, -33, -17, 2, -4, -2, 10, 11, -1, 7, -17, 22, -17, 42, 0, -25, 5, -11, 8, -2, -6, 7, -7, -15, 7, -10, -2, -16, -12
    0xfcf2fded, 0xfc02efdf, 0xff0b0afe, 0xef16ef07, 0x5e7002a, 0xfafe08f5, 0x7f1f907, 0xf4f0fef6,
    // 6, 1, -5, -7, 19, 13, 8, 6, -3, -6, -11, 13, -16, 16, -1, -9, -17, -3, -12, -9, 30, 18, -12, 1, 6, 2, -4, 4, -17, 14, -9, 15
    0xf9fb0106, 0x6080d13, 0xdf5fafd, 0xf7ff10f0, 0xf7f4fdef, 0x1f4121e, 0x4fc0206, 0xff70eef,
    // -44, 6, 9, 14, -17, 6, 13, 4, -10, 2, -2, 10, -16, -10, 7, 7, 18, -1, 7, -23, 7, 1, -7, -5, -2, 11, 6, 5, -11, 0, -17, -4
    0xe0906d4, 0x40d06ef, 0xafe02f6, 0x707f6f0, 0xe907ff12, 0xfbf90107, 0x5060bfe, 0xfcef00f5,
    // 2, 11, 5, -15, 39, 34, -10, 7, 2, 4, 5, 13, -28, 20, -3, 12, -23, 23, -24, 75, 11, -17, -3, -2, -12, 36, -70, -5, 9, -13, -62, -25
    0xf1050b02, 0x7f62227, 0xd050402, 0xcfd14e4, 0x4be817e9, 0xfefdef0b, 0xfbba24f4, 0xe7c2f309,
    // -33, -10, 0, 0, -15, -15, 14, -22, -4, 4, 3, 3, -12, -22, 26, 15, 13, -20, -21, -4, 15, 8, -10, -1, 3, -12, 3, 2, -5, 5, -3, -14
    0xf6df, 0xea0ef1f1, 0x30304fc, 0xf1aeaf4, 0xfcebec0d, 0xfff6080f, 0x203f403, 0xf2fd05fb,
    // 3, 12, -5, 6, -18, 9, 12, 6, -3, -20, -11, 5, -9, -12, 12, -9, 0, 10, 10, -5, -13, -5, -3, -3, -3, -7, 5, -4, -8, -7, 6, 0
    0x6fb0c03, 0x60c09ee, 0x5f5ecfd, 0xf70cf4f7, 0xfb0a0a00, 0xfdfdfbf3, 0xfc05f9fd, 0x6f9f8,
    // -14, -18, 3, -12, 20, 21, -2, -3, 6, -6, 24, 19, 7, -1, 8, 13, -22, 21, -22, -11, 21, 40, -13, 24, 0, -23, -21, 30, 14, 32, 3, -21
    0xf403eef2, 0xfdfe1514, 0x1318fa06, 0xd08ff07, 0xf5ea15ea, 0x18f32815, 0x1eebe900, 0xeb03200e,
    // 5, 9, -1, -11, -13, 14, 15, -9, 7, 2, -3, 16, 11, -2, 19, 1, -14, -25, 4, -16, 60, 22, 14, 11, 13, -9, -88, 5, -17, -4, 5, 35
    0xf5ff0905, 0xf70f0ef3, 0x10fd0207, 0x113fe0b, 0xf004e7f2, 0xb0e163c, 0x5a8f70d, 0x2305fcef,
    // 30, 26, 0, 24, 67, 1, 16, -42, -3, -40, -51, -15, 71, 30, -47, -11, 23, -8, 25, -25, 45, -11, -3, 9, -6, -29, -33, -36, 1, -21, 7, -4
    0x18001a1e, 0xd6100143, 0xf1cdd8fd, 0xf5d11e47, 0xe719f817, 0x9fdf52d, 0xdcdfe3fa, 0xfc07eb01,
    // 28, -25, -19, -33, -30, -7, -4, -3, -1, 5, 18, 4, 12, -6, 14, -12, -2, 15, -32, 2, -24, -12, -10, 10, -9, -11, -28, 1, 31, -34, 8, -43
    0xdfede71c, 0xfdfcf9e2, 0x41205ff, 0xf40efa0c, 0x2e00ffe, 0xaf6f4e8, 0x1e4f5f7, 0xd508de1f,
    // 0, -9, 15, 17, -23, -33, 14, -15, 0, 7, -29, -10, 2, -22, 35, -14, 1, -1, 4, 2, -5, 12, -4, 5, -6, -3, -10, -4, 2, 12, -6, 6
    0x110ff700, 0xf10edfe9, 0xf6e30700, 0xf223ea02, 0x204ff01, 0x5fc0cfb, 0xfcf6fdfa, 0x6fa0c02,
    // -28, 16, -22, -8, 4, 30, -2, 5, -6, 0, 26, 0, -2, 6, -4, 1, -7, -2, 10, 7, -7, 3, 5, 2, 1, 0, -24, -2, 2, -5, -16, -2
    0xf8ea10e4, 0x5fe1e04, 0x1a00fa, 0x1fc06fe, 0x70afef9, 0x20503f9, 0xfee80001, 0xfef0fb02,
    // 29, -12, -5, -30, 17, 11, -2, 8, -9, -3, 25, -5, -2, 9, -10, 4, 25, -26, -21, 92, 40, 32, 25, 10, -23, 11, 65, -1, -19, 23, -57, 19
    0xe2fbf41d, 0x8fe0b11, 0xfb19fdf7, 0x4f609fe, 0x5cebe619, 0xa192028, 0xff410be9, 0x13c717ed,
    // 30, -14, 21, -37, -9, -20, 12, -2, -5, 6, 24, -15, -3, -11, -8, 1, 9, 13, -2, 15, -31, -6, 7, -3, -8, -11, -9, -6, 2, -16, 11, -16
    0xdb15f21e, 0xfe0cecf7, 0xf11806fb, 0x1f8f5fd, 0xffe0d09, 0xfd07fae1, 0xfaf7f5f8, 0xf00bf002,
    // 13, 9, -20, -5, -51, -9, 10, -15, -9, 0, 10, -15, -20, -28, 22, -11, 10, 13, 15, -13, -17, -12, 6, -7, -1, -1, -11, -10, -12, -20, 8, -16
    0xfbec090d, 0xf10af7cd, 0xf10a00f7, 0xf516e4ec, 0xf30f0d0a, 0xf906f4ef, 0xf6f5ffff, 0xf008ecf4,
    // 3, -4, -10, -5, 21, 7, 12, 0, 1, -14, 4, 9, -3, -23, -26, -12, -25, 16, -33, 10, -3, 18, -5, 8, -10, -21, -20, -6, 7, 37, -8, 5
    0xfbf6fc03, 0xc0715, 0x904f201, 0xf4e6e9fd, 0xadf10e7, 0x8fb12fd, 0xfaecebf6, 0x5f82507,
    // -26, 9, 16, 13, 24, 18, -4, 0, 6, -5, 16, 14, -12, 17, -31, 8, 23, -30, -2, 0, -1, 9, 19, -13, -6, -13, -24, -7, 3, -21, -7, 12
    0xd1009e6, 0xfc1218, 0xe10fb06, 0x8e111f4, 0xfee217, 0xf31309ff, 0xf9e8f3fa, 0xcf9eb03,
    // 26, 32, 5, 91, 31, -27, -20, 21, 1, 38, -120, 13, 16, 10, -4, -51, 3, -44, -18, -13, 33, 15, 9, -11, 19, 27, -19, 25, 12, -7, 16, 3
    0x5b05201a, 0x15ece51f, 0xd882601, 0xcdfc0a10, 0xf3eed403, 0xf5090f21, 0x19ed1b13, 0x310f90c,
    // -4, -17, 5, 9, -24, -17, 2, -6, -4, -2, 3, -16, -14, -2, 0, 12, -7, -9, 10, 20, -22, -32, 3, -8, -2, 15, -2, -12, 39, -26, 47, -19
    0x905effc, 0xfa02efe8, 0xf003fefc, 0xc00fef2, 0x140af7f9, 0xf803e0ea, 0xf4fe0ffe, 0xed2fe627,
    // 13, -14, -20, -16, -2, 3, -4, -16, 12, -36, 5, -20, -30, 6, -6, -4, 6, -7, -5, 15, -4, -3, -3, -10, -5, -1, 0, -6, 1, -8, 7, -2
    0xf0ecf20d, 0xf0fc03fe, 0xec05dc0c, 0xfcfa06e2, 0xffbf906, 0xf6fdfdfc, 0xfa00fffb, 0xfe07f801,
    // 17, -28, 3, -3, 11, 1, -2, -13, 6, -3, 16, 6, -9, 1, 14, -8, -1, 5, -14, 15, 6, 1, -4, -9, -3, 1, -3, -2, -8, -4, 1, -4
    0xfd03e411, 0xf3fe010b, 0x610fd06, 0xf80e01f7, 0xff205ff, 0xf7fc0106, 0xfefd01fd, 0xfc01fcf8,
    // -17, -17, 2, 34, -6, -4, 3, -16, 5, -2, 15, 1, -9, -4, 26, 0, 0, -87, 50, 22, -28, -10, 33, -48, 20, -33, 108, 28, -45, 9, 51, -33
    0x2202efef, 0xf003fcfa, 0x10ffe05, 0x1afcf7, 0x1632a900, 0xd021f6e4, 0x1c6cdf14, 0xdf3309d3,
    // 14, -16, 13, -8, 3, 6, 8, -14, 7, -11, 14, 11, -26, 7, -4, -8, 2, 0, -3, -1, -1, -3, -2, -6, -5, 4, -7, -10, -5, -6, -6, -2
    0xf80df00e, 0xf2080603, 0xb0ef507, 0xf8fc07e6, 0xfffd0002, 0xfafefdff, 0xf6f904fb, 0xfefafafb,
    // -14, -8, -10, 4, -7, -4, 7, -8, 5, -9, 13, 6, -8, 8, -6, -19, -3, -6, -11, -17, 7, -1, -4, -6, 2, -4, 5, 3, -18, -3, -7, -10
    0x4f6f8f2, 0xf807fcf9, 0x60df705, 0xedfa08f8, 0xeff5fafd, 0xfafcff07, 0x305fc02, 0xf6f9fdee,
    // 15, -29, -3, 12, -48, -23, -33, 2, -17, -16, -27, -39, -19, 45, -2, 30, -34, 11, 1, 4, 63, 8, -21, 6, 34, -10, -1, 29, -9, -61, -29, -29
    0xcfde30f, 0x2dfe9d0, 0xd9e5f0ef, 0x1efe2ded, 0x4010bde, 0x6eb083f, 0x1dfff622, 0xe3e3c3f7,
    // 14, -36, -55, 6, -12, 13, 24, -10, -7, 4, -14, -14, 3, 42, 13, -14, 34, 27, 22, 3, -2, -31, -74, 18, -7, 12, 44, -3, 16, 34, -20, -31
    0x6c9dc0e, 0xf6180df4, 0xf2f204f9, 0xf20d2a03, 0x3161b22, 0x12b6e1fe, 0xfd2c0cf9, 0xe1ec2210,
    // -1, -83, -53, 9, 15, 50, -50, 33, 12, -117, 10, -85, 10, -71, -94, 38, -25, 47, 11, 18, 25, -6, -3, 10, -29, -44, -7, -25, -11, 61, 27, -15
    0x9cbadff, 0x21ce320f, 0xab0a8b0c, 0x26a2b90a, 0x120b2fe7, 0xafdfa19, 0xe7f9d4e3, 0xf11b3df5,
    // -13, -28, 1, 13, -8, -10, -7, 1, -18, 20, 19, 19, 11, -16, -3, -7, 31, 9, 4, 19, -43, 17, -16, -39, 15, -81, -54, -43, -27, -8, -6, 75
    0xd01e4f3, 0x1f9f6f8, 0x131314ee, 0xf9fdf00b, 0x1304091f, 0xd9f011d5, 0xd5caaf0f, 0x4bfaf8e5,
    // -2, -22, 33, 0, -13, 13, 25, 16, -1, 73, -11, 45, 46, -5, 22, -35, 6, -4, 3, 14, -2, -34, 32, -11, -3, -6, -7, -7, 10, -14, -7, 4
    0x21eafe, 0x10190df3, 0x2df549ff, 0xdd16fb2e, 0xe03fc06, 0xf520defe, 0xf9f9fafd, 0x4f9f20a,
    // 5, 18, 30, -8, -24, -10, -3, -1, 0, -4, -20, 0, 8, 7, -14, 22, 15, -3, 12, -1, -1, -18, -1, -3, -2, 5, 13, -18, 15, -11, -6, 2
    0xf81e1205, 0xfffdf6e8, 0xecfc00, 0x16f20708, 0xff0cfd0f, 0xfdffeeff, 0xee0d05fe, 0x2faf50f,
    // 24, -18, -8, -2, -6, -7, -12, -8, -8, -8, 37, -27, 19, 16, 18, 6, -54, -55, -19, -38, 61, 35, 38, 17, 45, -8, -51, 92, -64, 127, -104, -79
    0xfef8ee18, 0xf8f4f9fa, 0xe525f8f8, 0x6121013, 0xdaedc9ca, 0x1126233d, 0x5ccdf82d, 0xb1987fc0,
    // -17, -34, -18, 1, 27, -34, -1, 2, 5, 8, 1, -9, 10, 16, 8, 11, -8, -18, -10, 16, -26, -13, -1, 4, -5, 13, -13, -16, 12, -4, 14, 4
    0x1eedeef, 0x2ffde1b, 0xf7010805, 0xb08100a, 0x10f6eef8, 0x4fff3e6, 0xf0f30dfb, 0x40efc0c,
    // 23, -15, -5, -2, -34, 1, 6, -5, 4, 16, -26, 37, -14, -11, -23, -1, 7, 32, -2, 1, 8, 7, -14, -6, -1, -16, -6, -21, -16, -4, 21, -12
    0xfefbf117, 0xfb0601de, 0x25e61004, 0xffe9f5f2, 0x1fe2007, 0xfaf20708, 0xebfaf0ff, 0xf415fcf0,
};
static const uint embedded_encoder2_ResidualBlock_0_body_conv_dw_bias_dwords[8] = {
    // -0.02026, -0.00648, -0.002924, 0.01015, -0.005993, -0.00886, -0.04663, 0.03708, -0.00529, 0.04294, 0.0197, -0.01651, -0.006645, 0.01278, -0.013626, 0.03735
    0x9ea3a530, 0x213299fd, 0xa0899e23, 0x28bfa9f8, 0x297f9d6b, 0xa43a250b, 0x228b9ece, 0x28c8a2fa,
};
static const uint embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 82, -39, 6, 52, 7, -35, -13, 84, -29, -12, -88, -88, 17, 2, 38, -20, 47, 51, 23, -51, -36, 66, -19, -35, 14, 22, 2, 19, 16, -49, 21, -54
    0x3406d952, 0x54f3dd07, 0xa8a8f4e3, 0xec260211, 0xcd17332f, 0xdded42dc, 0x1302160e, 0xca15cf10,
    // 45, 22, -30, 7, -12, 85, 12, -2, -17, 13, -2, -37, -25, 14, 2, -26, -36, -1, -52, 1, 19, -38, -3, -5, -6, 76, -18, -21, -36, -23, 18, 36
    0x7e2162d, 0xfe0c55f4, 0xdbfe0def, 0xe6020ee7, 0x1ccffdc, 0xfbfdda13, 0xebee4cfa, 0x2412e9dc,
    // 48, -33, 95, -52, 23, -53, -31, -7, -44, 37, 7, 8, 4, 6, -20, -57, 0, -75, 20, 102, 16, -24, -3, 37, 15, -7, 13, 31, -51, 2, 19, 127
    0xcc5fdf30, 0xf9e1cb17, 0x80725d4, 0xc7ec0604, 0x6614b500, 0x25fde810, 0x1f0df90f, 0x7f1302cd,
    // -68, -42, 28, 74, 40, -105, 102, -28, 59, 26, -12, 39, 28, -29, 20, 43, 81, 6, -38, -37, -20, -32, -27, 19, -28, 7, 20, 46, 59, 12, -5, -7
    0x4a1cd6bc, 0xe4669728, 0x27f41a3b, 0x2b14e31c, 0xdbda0651, 0x13e5e0ec, 0x2e1407e4, 0xf9fb0c3b,
    // -29, -17, -4, -42, 2, 9, -24, 73, 43, 17, -47, 81, -9, 1, -49, -15, 2, 52, -70, 53, -20, 31, 4, -37, 94, -30, -17, -26, 4, 19, -3, 11
    0xd6fcefe3, 0x49e80902, 0x51d1112b, 0xf1cf01f7, 0x35ba3402, 0xdb041fec, 0xe6efe25e, 0xbfd1304,
    // 2, 9, 0, -26, 7, 36, 51, 35, 7, 23, 17, -91, 119, -4, -116, 56, -70, -9, 20, 64, -31, -2, -39, 6, -25, 21, -17, -21, 47, 5, -8, -27
    0xe6000902, 0x23332407, 0xa5111707, 0x388cfc77, 0x4014f7ba, 0x6d9fee1, 0xebef15e7, 0xe5f8052f,
    // -22, 2, 18, -39, -17, -105, 17, 10, -37, 1, -18, 30, 29, -10, 20, 60, -47, -86, -9, 36, -14, 80, 3, 7, 11, -5, -31, -1, 0, 53, 2, 39
    0xd91202ea, 0xa1197ef, 0x1eee01db, 0x3c14f61d, 0x24f7aad1, 0x70350f2, 0xffe1fb0b, 0x27023500,
    // 35, -27, -19, 18, -16, -5, 84, 29, -7, 11, -9, 20, -44, 52, -56, 9, 63, -12, -45, -95, 53, 28, 42, 27, 41, -34, 17, 15, -14, 15, 28, 43
    0x12ede523, 0x1d54fbf0, 0x14f70bf9, 0x9c834d4, 0xa1d3f43f, 0x1b2a1c35, 0xf11de29, 0x2b1c0ff2,
    // 26, 22, -41, 56, -35, 107, 9, -9, -9, -23, -3, -41, 0, 3, -21, -19, 13, 27, 56, -45, 15, 86, -2, -36, 24, -1, -31, -59, -45, 17, 1, -2
    0x38d7161a, 0xf7096bdd, 0xd7fde9f7, 0xedeb0300, 0xd3381b0d, 0xdcfe560f, 0xc5e1ff18, 0xfe0111d3,
    // -6, 28, 1, -14, 25, 65, -23, 53, 25, 46, 2, -59, 98, 45, -73, 67, -6, -74, -30, -21, 10, 5, -36, -44, -35, -30, 10, -13, 8, 77, -24, 15
    0xf2011cfa, 0x35e94119, 0xc5022e19, 0x43b72d62, 0xebe2b6fa, 0xd4dc050a, 0xf30ae2dd, 0xfe84d08,
    // -82, 8, 72, 7, 10, 94, 31, -44, 18, -11, -44, -60, -64, -12, -2, 19, 56, 14, 21, -14, -69, 20, -69, 31, -39, 10, -13, 1, -16, 30, -21, 76
    0x74808ae, 0xd41f5e0a, 0xc4d4f512, 0x13fef4c0, 0xf2150e38, 0x1fbb14bb, 0x1f30ad9, 0x4ceb1ef0,
    // 43, -46, 95, -83, 36, -27, -19, 10, -89, 41, 15, 35, -12, -14, -10, -9, 31, -68, -4, -29, -9, -30, -46, -18, -18, 2, -10, 3, 4, 104, -2, 10
    0xad5fd22b, 0xaede524, 0x230f29a7, 0xf7f6f2f4, 0xe3fcbc1f, 0xeed2e2f7, 0x3f602ee, 0xafe6804,
    // 23, 59, -33, -99, -38, 46, -42, -5, -48, -9, -7, -45, 2, -4, -40, -97, 26, 23, 56, 69, -77, -21, -29, -34, -8, -39, -13, 79, -73, -30, 18, -22
    0x9ddf3b17, 0xfbd62eda, 0xd3f9f7d0, 0x9fd8fc02, 0x4538171a, 0xdee3ebb3, 0x4ff3d9f8, 0xea12e2b7,
    // -43, 37, 27, -53, -37, 18, 29, 67, 48, 25, 4, 64, 1, -66, -5, -61, -69, 51, -6, 52, 72, -72, -15, -6, -28, -56, -21, -3, 39, 31, -70, -2
    0xcb1b25d5, 0x431d12db, 0x40041930, 0xc3fbbe01, 0x34fa33bb, 0xfaf1b848, 0xfdebc8e4, 0xfeba1f27,
    // -13, -12, 35, -90, -34, -18, -102, 14, 75, 7, 8, -30, -6, 13, 49, -5, 1, -68, -20, 37, -21, 63, 22, -10, -16, -11, -21, 20, -42, 62, 15, 8
    0xa623f4f3, 0xe9aeede, 0xe208074b, 0xfb310dfa, 0x25ecbc01, 0xf6163feb, 0x14ebf5f0, 0x80f3ed6,
    // -52, -15, -38, -12, 26, -84, 41, 55, 0, -12, 22, -61, -26, 29, -28, -73, 1, -32, -36, -1, 17, 34, -19, -46, -8, -9, -15, -9, -17, 98, -11, -31
    0xf4daf1cc, 0x3729ac1a, 0xc316f400, 0xb7e41de6, 0xffdce001, 0xd2ed2211, 0xf7f1f7f8, 0xe1f562ef,
};
static const uint embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias_dwords[16] = {
    // 0.0863, -0.2117, 0.0714, 0.10767, -0.1495, 0.0465, 0.04117, 0.04056, 0.012726, 0.0435, 0.0897, -0.003326, -0.01906, 0.02583, -0.0169, 0.003149
    0xb2c62d86, 0x2ee42c92, 0x29f4b0c9, 0x29312945, 0x29912284, 0x9ad02dbe, 0x269da4e1, 0x1a73a454,
    // -0.1121, -0.0628, -0.01313, -0.2086, 0.06323, 0.0759, 0.04987, -0.00795, 0.1106, -0.2302, -0.0684, 0.1648, 0.1075, -0.0829, 0.01135, 0.01662
    0xac05af2d, 0xb2ada2b9, 0x2cdc2c0c, 0xa0122a62, 0xb35e2f14, 0x3146ac61, 0xad4e2ee1, 0x244121d0,
};
static const uint embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 39, -27, 1, 49, -26, -128, -22, -7, 59, -1, 92, 70, 22, 31, -22, -95, 28, -14, 62, -10, 25, -9, 12, 65, 98, 8, -12, -48, 102, -17, -2, 7
    0x3101e527, 0xf9ea80e6, 0x465cff3b, 0xa1ea1f16, 0xf63ef21c, 0x410cf719, 0xd0f40862, 0x7feef66,
    // 15, -4, 33, -39, -3, -7, 26, 68, 39, 64, 23, 24, 104, 13, 40, 24, -56, 50, 26, 43, -31, 45, -1, 14, 34, 8, -50, 4, -58, -34, 55, -6
    0xd921fc0f, 0x441af9fd, 0x18174027, 0x18280d68, 0x2b1a32c8, 0xeff2de1, 0x4ce0822, 0xfa37dec6,
    // -20, 15, 56, -6, 41, -24, 8, 77, -66, 93, -13, -52, 55, -9, -25, 20, -74, 61, 22, -67, -45, 3, -62, 54, 22, 2, 23, -6, 24, 0, -53, 38
    0xfa380fec, 0x4d08e829, 0xccf35dbe, 0x14e7f737, 0xbd163db6, 0x36c203d3, 0xfa170216, 0x26cb0018,
    // -25, -22, -29, 27, -95, -9, -15, 80, 21, -79, -38, -14, -38, -48, -45, 42, 105, 58, 19, -24, -88, 5, 95, 42, 18, -3, -1, 7, 9, 18, -11, -2
    0x1be3eae7, 0x50f1f7a1, 0xf2dab115, 0x2ad3d0da, 0xe8133a69, 0x2a5f05a8, 0x7fffd12, 0xfef51209,
    // -11, 2, -85, -51, 22, 24, 35, -47, 59, -15, 42, -16, -36, 86, 13, 5, 72, 4, 96, 20, 12, 29, -11, 7, -40, 18, 11, -3, 37, -53, -83, -22
    0xcdab02f5, 0xd1231816, 0xf02af13b, 0x50d56dc, 0x14600448, 0x7f51d0c, 0xfd0b12d8, 0xeaadcb25,
    // -1, 4, -50, -76, 10, -20, 46, -35, 2, 54, -33, 0, 90, -33, -84, 22, -1, -30, 18, 33, 87, -17, -11, -19, 13, -15, 0, 57, -2, 45, 44, -26
    0xb4ce04ff, 0xdd2eec0a, 0xdf3602, 0x16acdf5a, 0x2112e2ff, 0xedf5ef57, 0x3900f10d, 0xe62c2dfe,
    // -41, 4, -1, -23, -22, -11, -30, -13, -16, 5, -10, -2, 61, -17, -26, 26, -24, -37, -12, -9, 27, 28, 7, 5, 8, -18, -26, 8, 20, 8, -77, 36
    0xe9ff04d7, 0xf3e2f5ea, 0xfef605f0, 0x1ae6ef3d, 0xf7f4dbe8, 0x5071c1b, 0x8e6ee08, 0x24b30814,
    // 88, -43, -11, -20, -2, 20, 19, 13, 15, 5, -12, -12, 22, -18, -35, -16, 27, 3, -38, 10, 2, 8, 0, -24, -11, -59, 9, 10, -6, 51, -69, -36
    0xecf5d558, 0xd1314fe, 0xf4f4050f, 0xf0ddee16, 0xada031b, 0xe8000802, 0xa09c5f5, 0xdcbb33fa,
    // 25, 16, -17, -15, -15, -3, -11, -5, -6, 9, 23, 22, 41, -4, -6, 32, -19, -6, 10, 5, 5, -17, 8, 9, -3, 79, -18, 10, 6, -55, 28, 16
    0xf1ef1019, 0xfbf5fdf1, 0x161709fa, 0x20fafc29, 0x50afaed, 0x908ef05, 0xaee4ffd, 0x101cc906,
    // 15, -41, 8, -15, -25, -51, -7, 18, 54, 22, 5, -1, 58, -21, -21, -23, -1, 11, 20, 65, 15, -16, 18, -75, 4, 27, -67, 12, -6, -25, -51, -16
    0xf108d70f, 0x12f9cde7, 0xff051636, 0xe9ebeb3a, 0x41140bff, 0xb512f00f, 0xcbd1b04, 0xf0cde7fa,
    // 29, 39, 5, -38, -14, 32, 45, 17, 26, -2, -35, -20, 53, 19, 40, 12, 30, 14, -59, -48, 17, -7, 28, 44, -15, -14, -10, -25, 11, -65, 46, 43
    0xda05271d, 0x112d20f2, 0xecddfe1a, 0xc281335, 0xd0c50e1e, 0x2c1cf911, 0xe7f6f2f1, 0x2b2ebf0b,
    // 41, 66, -53, -20, -19, 36, 0, -2, 14, -1, -20, 23, -10, 30, 21, -78, 11, 12, 23, -77, -10, 21, 8, 103, -26, 39, 16, 56, -9, -42, -49, 96
    0xeccb4229, 0xfe0024ed, 0x17ecff0e, 0xb2151ef6, 0xb3170c0b, 0x670815f6, 0x381027e6, 0x60cfd6f7,
    // 19, -38, -16, -8, -19, -27, 104, 29, -53, 4, 2, -41, 25, -24, -34, -64, 39, 27, -95, 49, 12, -75, 46, 9, 5, -36, -3, -8, -4, 22, 9, -18
    0xf8f0da13, 0x1d68e5ed, 0xd70204cb, 0xc0dee819, 0x31a11b27, 0x92eb50c, 0xf8fddc05, 0xee0916fc,
    // -34, 44, -67, -29, 3, 14, -4, 8, 25, -23, 119, 56, -44, -20, 38, 16, 27, 42, 53, -20, -48, -34, -3, -14, -20, 55, 15, 72, -50, -7, 71, 3
    0xe3bd2cde, 0x8fc0e03, 0x3877e919, 0x1026ecd4, 0xec352a1b, 0xf2fdded0, 0x480f37ec, 0x347f9ce,
    // 0, 17, 72, 21, 7, -60, -31, -36, -24, -1, -8, -46, -12, 36, 47, 14, -49, -55, -25, -45, 30, -45, -12, 41, 31, 22, 15, 23, -41, -68, 49, 1
    0x15481100, 0xdce1c407, 0xd2f8ffe8, 0xe2f24f4, 0xd3e7c9cf, 0x29f4d31e, 0x170f161f, 0x131bcd7,
    // 8, -17, -57, 22, 54, -14, -30, 25, 81, 18, -60, 32, -66, 5, -17, 2, -3, 85, -84, 21, -94, -51, -64, -4, -15, -34, -31, 17, 20, -13, 66, -14
    0x16c7ef08, 0x19e2f236, 0x20c41251, 0x2ef05be, 0x15ac55fd, 0xfcc0cda2, 0x11e1def1, 0xf242f314,
};
static const uint embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias_dwords[8] = {
    // -0.2008, -0.1178, -0.02055, 0.02122, -0.01358, 0.07355, 0.02487, -0.00867, -0.003042, 0.0353, -0.03293, -0.01479, 0.004276, 0.0316, -0.0456, 0.07196
    0xaf8ab26d, 0x256fa543, 0x2cb5a2f4, 0xa070265e, 0x28859a3b, 0xa393a837, 0x280b1c61, 0x2c9ba9d6,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass1(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(3840, 2160, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(3840, 2160, 16), // threadGroupSliceSize
        uint3(3840, 2160, 16), // storageSize
        uint3(16, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.011951033025979996, storage_quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005296443123370409, storage_embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_0_body_conv_dw_bias = { embedded_encoder2_ResidualBlock_0_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_0_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_0_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.00530614610761404, storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias = { embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005339715164154768, storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias = { embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias };
    
    // fused_quantized_NHWC_/encoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_2 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_2 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 16);
    const uint3 groupSize_slice_2 = uint3(64, 1, 16);
    const uint3 storageSize_slice_2 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_2 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_2 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_2 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_2 = dot(groupStart_slice_2, tensorByteStrides_slice_2);
    const float quantizationScale_slice_2 = 0.016850261017680168;
    const RWBufferStorage storage_slice_2 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_2 = { logicalSize_slice_2, groupStart_slice_2, groupSize_slice_2, storageSize_slice_2, tensorByteStrides_slice_2, paddingBegin_slice_2, paddingEnd_slice_2, threadGroupByteOffsetInTensor_slice_2 + 132710400, quantizationScale_slice_2, storage_slice_2 };
    // ConvNextBlock (16, 2160, 3840), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,) -> (16, 2160, 3840)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    ConvNextBlock(41.959295949110285, 0.023832621052861214, 53.0461190299257, 0.018851520493626595, quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_0_body_conv_dw_bias, embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias, embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias, slice_2, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_1
#ifdef MLSR_PASS_1_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass1_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/encoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_3 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_3 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_3 = uint3(32, 1, 16);
    const uint3 storageSize_slice_3 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_3 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_3 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_3 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_3 = dot(groupStart_slice_3, tensorByteStrides_slice_3);
    const float quantizationScale_slice_3 = 0.016850261017680168;
    const RWBufferStorage storage_slice_3 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_3 = { logicalSize_slice_3, groupStart_slice_3, groupSize_slice_3, storageSize_slice_3, tensorByteStrides_slice_3, paddingBegin_slice_3, paddingEnd_slice_3, threadGroupByteOffsetInTensor_slice_3 + 132710400, quantizationScale_slice_3, storage_slice_3 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_3, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_1_POST


#ifdef MLSR_PASS_2
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/ConvNextBlock.hlsli"

static const uint embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // -27, -1, 10, 9, -10, -8, 2, -8, -4, -11, 5, -8, 15, -14, -3, 15, -17, 0, 5, 2, 32, -14, -16, 8, -4, -12, 28, -6, 7, -1, -24, 0
    0x90affe5, 0xf802f8f6, 0xf805f5fc, 0xffdf20f, 0x20500ef, 0x8f0f220, 0xfa1cf4fc, 0xe8ff07,
    // -25, -7, 21, 4, 16, 2, -12, -3, -3, -19, -13, 4, 1, 0, -9, 26, 3, -3, -17, 3, 32, 4, -1, -9, -10, 2, 8, 7, -2, -10, -19, -11
    0x415f9e7, 0xfdf40210, 0x4f3edfd, 0x1af70001, 0x3effd03, 0xf7ff0420, 0x70802f6, 0xf5edf6fe,
    // 35, 30, -13, -11, -83, -17, -10, 4, -22, 7, 63, 3, -58, -28, 59, 44, 19, 2, 10, -17, 27, 3, 4, 4, -11, -30, -3, -12, -22, -3, -12, 4
    0xf5f31e23, 0x4f6efad, 0x33f07ea, 0x2c3be4c6, 0xef0a0213, 0x404031b, 0xf4fde2f5, 0x4f4fdea,
    // 0, 1, 16, 0, 7, 7, -3, -5, 0, -9, -22, -3, -2, 8, 3, 2, 10, -9, 10, -6, 36, -7, 10, 19, -10, -4, 20, -22, -2, 0, 10, -21
    0x100100, 0xfbfd0707, 0xfdeaf700, 0x20308fe, 0xfa0af70a, 0x130af924, 0xea14fcf6, 0xeb0a00fe,
    // -8, 2, 17, -5, 10, -5, 7, 7, -1, -16, -20, -5, 4, 24, 14, -5, -7, 18, -15, -3, -5, -8, -2, 7, -2, -9, 6, -6, 12, 27, 5, -5
    0xfb1102f8, 0x707fb0a, 0xfbecf0ff, 0xfb0e1804, 0xfdf112f9, 0x7fef8fb, 0xfa06f7fe, 0xfb051b0c,
    // -8, 25, 0, 5, 10, 0, -4, 3, 13, -9, -6, 18, 2, 3, -2, 16, -5, 17, 3, -6, -6, -6, 4, -8, -5, 2, 16, -5, -14, 1, -15, -3
    0x50019f8, 0x3fc000a, 0x12faf70d, 0x10fe0302, 0xfa0311fb, 0xf804fafa, 0xfb1002fb, 0xfdf101f2,
    // -17, -1, -9, 4, 33, 0, 3, 6, 9, -3, 6, 8, 12, 6, 11, -12, 27, 11, 11, 40, -16, 1, -37, 21, 4, -41, -34, -2, 81, -22, 64, 36
    0x4f7ffef, 0x6030021, 0x806fd09, 0xf40b060c, 0x280b0b1b, 0x15db01f0, 0xfeded704, 0x2440ea51,
    // 5, 17, 2, -2, 38, -5, -4, 5, -6, 16, -43, 2, -19, 9, -1, -21, -14, -2, -16, 3, 1, -8, 1, -3, 2, -1, 15, -9, -14, -11, -3, -14
    0xfe021105, 0x5fcfb26, 0x2d510fa, 0xebff09ed, 0x3f0fef2, 0xfd01f801, 0xf70fff02, 0xf2fdf5f2,
    // 13, 7, -20, -1, 35, -4, -13, 4, -7, -8, -12, -7, -23, 13, 17, -1, 2, 2, -1, -12, 8, -11, 10, -1, -9, 9, 8, -7, -8, 23, 18, -19
    0xffec070d, 0x4f3fc23, 0xf9f4f8f9, 0xff110de9, 0xf4ff0202, 0xff0af508, 0xf90809f7, 0xed1217f8,
    // 0, -1, -2, 0, 11, 0, -5, -4, -7, 0, 8, -1, -3, 1, 9, 16, -11, 1, -10, -7, 1, -8, -11, 5, -2, 21, -9, -11, -8, 3, -16, 8
    0xfeff00, 0xfcfb000b, 0xff0800f9, 0x100901fd, 0xf9f601f5, 0x5f5f801, 0xf5f715fe, 0x8f003f8,
    // 6, 10, 0, -6, 13, 2, -4, -4, -8, -4, 4, 1, -15, 3, 9, 7, -14, -16, -2, -11, -3, -4, -11, 4, -4, 17, -24, -4, -12, 1, -18, 10
    0xfa000a06, 0xfcfc020d, 0x104fcf8, 0x70903f1, 0xf5fef0f2, 0x4f5fcfd, 0xfce811fc, 0xaee01f4,
    // -21, -35, -73, -10, -5, 8, -6, 26, -33, 78, -105, -64, 18, -8, -58, 79, -7, -22, -15, 7, 3, -5, -5, 7, -5, 12, -24, 8, -11, 4, -8, 3
    0xf6b7ddeb, 0x1afa08fb, 0xc0974edf, 0x4fc6f812, 0x7f1eaf9, 0x7fbfb03, 0x8e80cfb, 0x3f804f5,
    // 3, 15, 12, 5, 4, -5, -3, 1, -7, 9, 4, -7, -1, 3, 5, -3, -11, 7, -1, 1, -10, -3, -2, 1, -3, 29, -24, -11, -7, -8, -11, 31
    0x50c0f03, 0x1fdfb04, 0xf90409f9, 0xfd0503ff, 0x1ff07f5, 0x1fefdf6, 0xf5e81dfd, 0x1ff5f8f9,
    // 5, 6, -2, 1, -5, -8, -2, 0, -9, 4, 3, 3, -6, 0, -7, 5, -9, 17, 3, -7, 1, 10, -6, 11, -5, -4, -13, -5, -2, 22, 20, -13
    0x1fe0605, 0xfef8fb, 0x30304f7, 0x5f900fa, 0xf90311f7, 0xbfa0a01, 0xfbf3fcfb, 0xf31416fe,
    // 8, 2, -26, 9, -4, 13, 1, -1, 4, 15, 5, 5, -1, 1, 6, -19, 8, 4, -5, 7, -24, -1, 6, 5, -8, -17, -21, 5, 7, 11, -4, 3
    0x9e60208, 0xff010dfc, 0x5050f04, 0xed0601ff, 0x7fb0408, 0x506ffe8, 0x5ebeff8, 0x3fc0b07,
    // -27, 19, -12, -10, -1, 2, -18, 11, -2, 4, 4, 5, 8, 10, -4, -1, -25, 38, -14, -73, -7, 5, 44, -42, 5, 2, 91, 12, -25, 37, 48, 19
    0xf6f413e5, 0xbee02ff, 0x50404fe, 0xfffc0a08, 0xb7f226e7, 0xd62c05f9, 0xc5b0205, 0x133025e7,
    // 11, 12, -11, 23, -13, -29, -6, 2, -8, 22, 8, 1, 26, 18, -2, -13, 4, 13, 7, -1, -15, -1, -8, 6, -6, -11, -14, 2, 3, 8, -17, -1
    0x17f50c0b, 0x2fae3f3, 0x10816f8, 0xf3fe121a, 0xff070d04, 0x6f8fff1, 0x2f2f5fa, 0xffef0803,
    // 28, 34, -4, 5, -20, -5, -13, -1, -3, 6, 1, -6, -2, 5, -8, 19, 10, 0, 0, 18, -11, -9, -2, 5, -5, -4, -15, -4, 19, 5, 7, -2
    0x5fc221c, 0xfff3fbec, 0xfa0106fd, 0x13f805fe, 0x1200000a, 0x5fef7f5, 0xfcf1fcfb, 0xfe070513,
    // 28, 0, -17, -13, 16, 1, 33, 8, -2, 2, -36, 15, -6, 17, -19, 2, 22, 8, 3, 7, 54, -15, 8, -10, -14, -22, -16, 14, -3, 2, 18, 11
    0xf3ef001c, 0x8210110, 0xfdc02fe, 0x2ed11fa, 0x7030816, 0xf608f136, 0xef0eaf2, 0xb1202fd,
    // 1, -11, -17, 0, -5, -2, 15, 15, 3, 6, -9, -8, 7, 7, 21, -7, 19, 5, -20, -9, 9, -14, 19, 2, -15, -46, -18, 6, 6, 20, 10, 9
    0xeff501, 0xf0ffefb, 0xf8f70603, 0xf9150707, 0xf7ec0513, 0x213f209, 0x6eed2f1, 0x90a1406,
    // -7, -110, -58, 18, 53, -101, -42, 30, -27, -27, 36, 58, -128, -7, -82, -13, 1, -26, -15, 2, -17, -12, -4, 7, -11, -21, -36, 8, 12, -9, 34, 23
    0x12c692f9, 0x1ed69b35, 0x3a24e5e5, 0xf3aef980, 0x2f1e601, 0x7fcf4ef, 0x8dcebf5, 0x1722f70c,
    // -5, 6, -13, -4, -4, -6, 30, 12, -11, 8, -28, 18, 6, -5, 4, 29, 16, -9, -25, 14, -20, -10, -9, -4, -21, -22, -27, 18, -9, 1, 38, 35
    0xfcf306fb, 0xc1efafc, 0x12e408f5, 0x1d04fb06, 0xee7f710, 0xfcf7f6ec, 0x12e5eaeb, 0x232601f7,
    // 5, 1, -13, -3, -6, -13, 23, 0, -14, 18, -1, -2, -4, 8, 15, -7, 31, 14, 2, -3, -7, 1, -3, 6, -3, 3, -31, 14, -13, 41, -9, -13
    0xfdf30105, 0x17f3fa, 0xfeff12f2, 0xf90f08fc, 0xfd020e1f, 0x6fd01f9, 0xee103fd, 0xf3f729f3,
    // 5, 25, -14, -6, 6, -14, 9, -7, 0, 0, -13, 8, -3, -12, 19, -6, -2, -10, 2, -1, -1, 12, -1, 11, 4, -13, 2, 15, 4, 3, -3, 15
    0xfaf21905, 0xf909f206, 0x8f30000, 0xfa13f4fd, 0xff02f6fe, 0xbff0cff, 0xf02f304, 0xffd0304,
    // 14, 22, 38, -4, 7, -17, 10, 7, 2, 14, -10, -21, 1, -1, 23, 6, 8, 28, -28, -56, 54, -3, 30, 19, -21, 45, -12, -33, -1, -91, -20, 6
    0xfc26160e, 0x70aef07, 0xebf60e02, 0x617ff01, 0xc8e41c08, 0x131efd36, 0xdff42deb, 0x6eca5ff,
    // -17, 34, 29, -18, 29, -2, 2, -7, 10, 8, 25, 0, 0, 29, 30, -15, -1, -2, -14, 0, -2, 2, 12, 2, -3, -17, 7, 14, 0, -17, 0, 4
    0xee1d22ef, 0xf902fe1d, 0x19080a, 0xf11e1d00, 0xf2feff, 0x20c02fe, 0xe07effd, 0x400ef00,
    // 1, 26, -17, 0, -8, 16, 4, -4, -1, -6, 24, 15, 11, -22, 37, -6, 1, 7, 16, -17, 25, 9, 10, 11, 5, -15, -1, 2, -3, 15, 3, 1
    0xef1a01, 0xfc0410f8, 0xf18faff, 0xfa25ea0b, 0xef100701, 0xb0a0919, 0x2fff105, 0x1030ffd,
    // -16, 9, -21, 17, 19, -25, -41, -17, 10, -12, 5, 20, 6, -60, 15, 11, 34, 17, -26, -20, -41, -29, 2, 0, 14, -5, 22, 5, -11, -18, -25, 11
    0x11eb09f0, 0xefd7e713, 0x1405f40a, 0xb0fc406, 0xece61122, 0x2e3d7, 0x516fb0e, 0xbe7eef5,
    // 7, 1, -12, 6, 1, 11, -8, 6, 17, -12, -24, 30, -14, -6, 10, 5, 29, 13, -19, -2, -13, -22, -8, -7, 3, 8, -18, 10, -36, -34, -6, 22
    0x6f40107, 0x6f80b01, 0x1ee8f411, 0x50afaf2, 0xfeed0d1d, 0xf9f8eaf3, 0xaee0803, 0x16fadedc,
    // 25, -23, -86, -18, 52, 29, 21, -5, 16, -21, 24, -13, 17, 99, -101, 76, 22, -34, -1, -10, -44, 3, -9, 2, 17, -8, 38, -2, -13, -12, 6, 7
    0xeeaae919, 0xfb151d34, 0xf318eb10, 0x4c9b6311, 0xf6ffde16, 0x2f703d4, 0xfe26f811, 0x706f4f3,
    // -16, -30, -13, 11, 29, -4, -20, -8, 6, -6, -8, 1, -17, -6, 31, -18, -9, -3, 10, -6, -2, -8, 1, -8, 23, -5, 1, 1, -26, 3, 6, -16
    0xbf3e2f0, 0xf8ecfc1d, 0x1f8fa06, 0xee1ffaef, 0xfa0afdf7, 0xf801f8fe, 0x101fb17, 0xf00603e6,
    // -6, -6, -18, 2, -14, 19, -18, -9, 11, -17, -7, 27, -21, -41, 14, -11, -19, -1, -12, 7, 19, -10, -14, -4, -1, 5, 12, -1, 2, -11, -6, 1
    0x2eefafa, 0xf7ee13f2, 0x1bf9ef0b, 0xf50ed7eb, 0x7f4ffed, 0xfcf2f613, 0xff0c05ff, 0x1faf502,
    // 3, 2, -16, 7, -1, -1, 8, 0, 3, 13, 11, 1, 0, 16, -9, 23, -7, 15, -2, -5, 16, -9, -8, -3, -4, 8, -10, 7, 2, 10, -6, 2
    0x7f00203, 0x8ffff, 0x10b0d03, 0x17f71000, 0xfbfe0ff9, 0xfdf8f710, 0x7f608fc, 0x2fa0a02,
    // -12, -10, -31, 4, 1, 6, 7, -2, -1, 14, 22, -4, 4, -6, -6, 0, 36, 39, 43, -6, -35, -31, 49, -18, 33, 36, 11, 11, -63, 11, 59, -24
    0x4e1f6f4, 0xfe070601, 0xfc160eff, 0xfafa04, 0xfa2b2724, 0xee31e1dd, 0xb0b2421, 0xe83b0bc1,
    // -8, -15, 4, -29, -9, 5, 4, -4, 5, 18, 19, 6, -6, -13, -10, 8, -3, -4, -12, 4, 22, 3, -7, -8, 1, 9, 5, -1, 4, 4, 15, -21
    0xe304f1f8, 0xfc0405f7, 0x6131205, 0x8f6f3fa, 0x4f4fcfd, 0xf8f90316, 0xff050901, 0xeb0f0404,
    // -14, -8, -15, 0, 13, 10, 16, 2, 6, 19, 19, 2, -3, -5, -5, 2, -7, -8, -14, 6, 1, 10, -3, -4, -7, -2, -4, 10, -6, -32, 0, 15
    0xf1f8f2, 0x2100a0d, 0x2131306, 0x2fbfbfd, 0x6f2f8f9, 0xfcfd0a01, 0xafcfef9, 0xf00e0fa,
    // -1, -16, 6, -5, 9, 13, 11, 1, 20, -15, 15, -5, 22, 2, 19, -14, -23, 1, 14, 36, 0, 12, -12, -2, 9, 6, 26, -20, -21, 7, 9, -28
    0xfb06f0ff, 0x10b0d09, 0xfb0ff114, 0xf2130216, 0x240e01e9, 0xfef40c00, 0xec1a0609, 0xe40907eb,
    // -7, -8, 15, 12, 11, 11, 6, -12, 17, -8, 11, 0, 1, -3, 2, -5, -31, 29, -6, 22, 6, -1, -3, 13, 13, -13, 8, 0, -10, 26, -22, -9
    0xc0ff8f9, 0xf4060b0b, 0xbf811, 0xfb02fd01, 0x16fa1de1, 0xdfdff06, 0x8f30d, 0xf7ea1af6,
    // -25, -32, -47, -84, -73, -39, 1, -19, -36, 52, -82, -83, -60, -55, 9, 31, -5, 12, -8, 14, -20, -8, 10, 4, 10, 11, -29, -13, -15, 19, -20, 5
    0xacd1e0e7, 0xed01d9b7, 0xadae34dc, 0x1f09c9c4, 0xef80cfb, 0x40af8ec, 0xf3e30b0a, 0x5ec13f1,
    // -14, -33, -23, 8, -13, 8, 9, -1, 19, -27, 19, 15, 7, -4, 11, -7, -5, -41, -52, 26, 12, 3, -2, -9, 2, 5, 6, 2, -41, -4, 11, -17
    0x8e9dff2, 0xff0908f3, 0xf13e513, 0xf90bfc07, 0x1accd7fb, 0xf7fe030c, 0x2060502, 0xef0bfcd7,
    // 15, -27, -2, -15, 24, 9, 9, 8, 10, 9, -1, 13, -1, 24, -19, -11, -10, 42, -17, 4, -30, -29, -11, -3, 6, -17, 12, 10, 7, -9, -25, 15
    0xf1fee50f, 0x8090918, 0xdff090a, 0xf5ed18ff, 0x4ef2af6, 0xfdf5e3e2, 0xa0cef06, 0xfe7f707,
    // -2, 66, -30, -4, 3, 15, -38, 21, 14, 6, 46, 14, 33, 21, -38, -11, -6, 27, 23, 1, 9, -5, -22, 10, -13, -4, -3, -5, 12, 8, -12, 20
    0xfce242fe, 0x15da0f03, 0xe2e060e, 0xf5da1521, 0x1171bfa, 0xaeafb09, 0xfbfdfcf3, 0x14f4080c,
    // 6, 34, 7, -6, 31, 12, -6, 21, 16, 17, 22, -4, 39, -27, -22, -13, -75, -1, 69, -81, 20, 6, -22, -46, 23, -50, 39, 38, -29, -12, -16, -45
    0xfa072206, 0x15fa0c1f, 0xfc161110, 0xf3eae527, 0xaf45ffb5, 0xd2ea0614, 0x2627ce17, 0xd3f0f4e3,
    // -29, -2, 17, -15, 58, 13, -9, 2, -2, 19, 23, 11, -28, -19, -35, 50, 10, 13, 5, 7, -30, -14, -6, 0, 8, 6, 13, -12, 22, -28, -12, -26
    0xf111fee3, 0x2f70d3a, 0xb1713fe, 0x32ddede4, 0x7050d0a, 0xfaf2e2, 0xf40d0608, 0xe6f4e416,
    // -31, -9, -41, -4, 24, 7, -22, 6, 1, 33, 20, -5, 14, -28, -37, 13, -7, 1, 17, -15, -16, -11, -8, -7, -6, 17, 5, 0, -8, -24, -18, 22
    0xfcd7f7e1, 0x6ea0718, 0xfb142101, 0xddbe40e, 0xf11101f9, 0xf9f8f5f0, 0x511fa, 0x16eee8f8,
    // -8, -5, -10, 2, -2, 7, -2, 3, 0, -3, 6, -6, 7, -7, 5, -11, -1, 31, 4, -1, 10, 0, -2, 3, 5, 4, 8, -2, -3, -6, -9, 6
    0x2f6fbf8, 0x3fe07fe, 0xfa06fd00, 0xf505f907, 0xff041fff, 0x3fe000a, 0xfe080405, 0x6f7fafd,
    // 2, 1, 1, -4, -9, 1, 9, -1, 2, -2, 3, 2, -6, -8, 4, -14, -7, 25, -11, -9, 6, 14, 2, -2, 2, 5, 24, 10, -4, -4, -8, -15
    0xfc010102, 0xff0901f7, 0x203fe02, 0xf204f8fa, 0xf7f519f9, 0xfe020e06, 0xa180502, 0xf1f8fcfc,
    // 3, 52, -7, 44, 10, 4, 2, 6, 1, 20, 50, -9, 11, -19, -104, -14, 0, 18, -3, 12, -14, 13, 6, 3, 1, 10, 14, -3, 10, -20, -1, -23
    0x2cf93403, 0x602040a, 0xf7321401, 0xf298ed0b, 0xcfd1200, 0x3060df2, 0xfd0e0a01, 0xe9ffec0a,
    // -8, 0, -7, -2, -1, -3, 2, 0, -2, -4, 6, -3, 11, 3, 6, -15, -1, 24, 11, 0, 13, 0, 2, 3, 7, 9, 10, -5, 1, -5, -16, 0
    0xfef900f8, 0x2fdff, 0xfd06fcfe, 0xf106030b, 0xb18ff, 0x302000d, 0xfb0a0907, 0xf0fb01,
    // 2, -3, 0, 2, 0, -6, 7, 1, 2, 1, 7, -1, -1, -2, -4, -22, 13, 24, -16, -1, -16, 13, -11, 4, -12, 16, -40, 4, -22, 27, 4, -8
    0x200fd02, 0x107fa00, 0xff070102, 0xeafcfeff, 0xfff0180d, 0x4f50df0, 0x4d810f4, 0xf8041bea,
    // -1, 3, -10, -8, 18, 5, -1, -6, 15, 8, -14, 28, -24, -19, 25, 38, 13, -4, -24, 3, -21, 0, -3, -3, -5, -3, 1, -1, -7, -26, 5, 10
    0xf8f603ff, 0xfaff0512, 0x1cf2080f, 0x2619ede8, 0x3e8fc0d, 0xfdfd00eb, 0xff01fdfb, 0xa05e6f9,
    // -17, 6, -4, -17, 11, -12, -28, -2, 8, 12, -20, 16, -13, 14, 38, 0, -34, -65, 30, -7, -50, -30, 15, -28, 34, -81, 68, 22, 18, -87, -83, -27
    0xeffc06ef, 0xfee4f40b, 0x10ec0c08, 0x260ef3, 0xf91ebfde, 0xe40fe2ce, 0x1644af22, 0xe5ada912,
    // 0, 25, -19, 10, -2, -6, -3, 11, 2, 15, -52, 12, -29, 38, -11, -25, -12, -15, 10, 2, 7, -7, -5, -7, 4, 13, 12, -12, -7, -25, -6, 9
    0xaed1900, 0xbfdfafe, 0xccc0f02, 0xe7f526e3, 0x20af1f4, 0xf9fbf907, 0xf40c0d04, 0x9fae7f9,
    // -1, 27, 14, 0, 0, 14, -9, -3, 24, 9, -20, -6, -11, 22, -2, 1, 8, 1, 11, -14, 9, -17, 8, 10, -5, 19, -35, -8, -5, 59, -27, -38
    0xe1bff, 0xfdf70e00, 0xfaec0918, 0x1fe16f5, 0xf20b0108, 0xa08ef09, 0xf8dd13fb, 0xdae53bfb,
    // -6, -33, -7, 12, 9, 5, -13, -4, -12, 10, 37, 4, 13, -4, 19, 4, 6, -7, 0, 25, 18, 2, -6, 7, -3, -1, -2, 11, 12, 15, 9, 18
    0xcf9dffa, 0xfcf30509, 0x4250af4, 0x413fc0d, 0x1900f906, 0x7fa0212, 0xbfefffd, 0x12090f0c,
    // 12, 2, -12, 12, -14, -4, 5, -3, 0, 4, 11, -1, -4, 7, 2, -5, -22, -10, -32, 27, 17, -5, -22, -3, -9, -12, 26, 18, -3, 5, 0, -8
    0xcf4020c, 0xfd05fcf2, 0xff0b0400, 0xfb0207fc, 0x1be0f6ea, 0xfdeafb11, 0x121af4f7, 0xf80005fd,
    // -17, 16, -4, -84, 34, 0, 14, 17, 1, -18, -34, -18, 7, -10, 7, -34, 5, 11, 4, 22, -36, -13, 6, 6, -6, -4, -19, -7, 9, -31, 6, -19
    0xacfc10ef, 0x110e0022, 0xeedeee01, 0xde07f607, 0x16040b05, 0x606f3dc, 0xf9edfcfa, 0xed06e109,
    // -9, -12, -19, 15, 5, 9, -11, 0, -5, 6, 15, 0, 10, 20, 14, -14, -5, 12, 19, 13, 8, 8, 13, -1, 3, -2, -5, -8, 4, -15, 11, 0
    0xfedf4f7, 0xf50905, 0xf06fb, 0xf20e140a, 0xd130cfb, 0xff0d0808, 0xf8fbfe03, 0xbf104,
    // 3, -5, 3, 12, -16, 6, 6, 1, 6, 4, 9, -3, 11, -7, 22, -19, -2, -20, 13, -3, 3, 16, 12, 1, 0, 18, 6, 9, -13, -14, 7, 24
    0xc03fb03, 0x10606f0, 0xfd090406, 0xed16f90b, 0xfd0decfe, 0x10c1003, 0x9061200, 0x1807f2f3,
    // 32, -11, -7, -14, -23, -4, 27, -5, 6, -16, 25, -3, 12, 7, 33, -29, -6, -14, -2, 6, -3, 20, 4, -7, -4, 22, -6, 3, -5, -7, -3, -13
    0xf2f9f520, 0xfb1bfce9, 0xfd19f006, 0xe321070c, 0x6fef2fa, 0xf90414fd, 0x3fa16fc, 0xf3fdf9fb,
    // 22, 22, 55, -15, -11, -2, -1, 0, -5, 0, -16, -7, -3, -1, 4, 16, -19, 32, -13, -65, 21, 22, 18, -6, 7, -49, -7, -24, 42, 12, -35, -18
    0xf1371616, 0xfffef5, 0xf9f000fb, 0x1004fffd, 0xbff320ed, 0xfa121615, 0xe8f9cf07, 0xeedd0c2a,
    // 0, -3, -3, 21, 8, -8, -11, -6, -18, -3, 18, 4, -30, -8, -22, -17, 1, 23, 32, -4, 2, 4, 15, -4, -7, 8, -25, -5, -20, 7, -5, 17
    0x15fdfd00, 0xfaf5f808, 0x412fdee, 0xefeaf8e2, 0xfc201701, 0xfc0f0402, 0xfbe708f9, 0x11fb07ec,
    // 7, 10, 17, 2, -2, -36, 2, 3, -10, -23, -9, -9, -12, 7, 1, 11, -18, 4, -3, 14, -9, -3, 1, -6, -14, 14, -9, 3, -22, -15, -38, 1
    0x2110a07, 0x302dcfe, 0xf7f7e9f6, 0xb0107f4, 0xefd04ee, 0xfa01fdf7, 0x3f70ef2, 0x1daf1ea,
    // 11, -8, 2, 3, 12, 8, 25, -9, 3, -3, 7, 3, -10, -22, -10, -6, -1, -4, 20, 9, 10, 5, 18, -11, 9, 11, 3, -2, -18, -31, 5, -9
    0x302f80b, 0xf719080c, 0x307fd03, 0xfaf6eaf6, 0x914fcff, 0xf512050a, 0xfe030b09, 0xf705e1ee,
    // 11, -19, -4, 0, 5, 9, 3, -5, 13, -1, 18, -12, 0, 9, 23, -28, 31, 26, 20, -1, -29, 10, 22, -14, -3, -7, -22, 10, -25, -5, -30, -3
    0xfced0b, 0xfb030905, 0xf412ff0d, 0xe4170900, 0xff141a1f, 0xf2160ae3, 0xaeaf9fd, 0xfde2fbe7,
    // -34, 4, -23, -45, 21, 26, -69, 51, 10, 38, 46, 23, 4, 9, 66, -22, 18, 14, 2, 37, -12, -3, 16, -9, 8, 3, -2, -6, -5, -13, 31, -11
    0xd3e904de, 0x33bb1a15, 0x172e260a, 0xea420904, 0x25020e12, 0xf710fdf4, 0xfafe0308, 0xf51ff3fb,
    // -1, 24, 16, -8, -15, 1, -1, 2, 5, -4, -29, 11, -12, -2, -11, -9, 14, 7, 20, 8, -27, -33, 3, 1, 0, 18, 10, -6, -4, 9, 13, 0
    0xf81018ff, 0x2ff01f1, 0xbe3fc05, 0xf7f5fef4, 0x814070e, 0x103dfe5, 0xfa0a1200, 0xd09fc,
    // 10, 10, -2, 5, 7, -14, -7, -2, -5, 6, -8, -9, 14, 24, 13, -16, -2, -26, 16, 4, -1, -1, -4, 2, 10, 0, -11, -1, -4, 19, 24, 8
    0x5fe0a0a, 0xfef9f207, 0xf7f806fb, 0xf00d180e, 0x410e6fe, 0x2fcffff, 0xfff5000a, 0x81813fc,
    // -2, -11, 12, 15, 33, 8, 3, -1, 4, 6, 21, -16, -12, 6, 37, 4, 17, -17, 7, -1, -5, 10, -6, -1, -1, 1, -21, 8, -9, 14, 7, 4
    0xf0cf5fe, 0xff030821, 0xf0150604, 0x42506f4, 0xff07ef11, 0xfffa0afb, 0x8eb01ff, 0x4070ef7,
    // 9, -37, 24, 10, 37, 1, 5, -6, 9, 16, 4, -7, -7, -13, 55, 21, -52, -19, -29, 91, 126, -7, 8, -33, 2, 22, 108, 33, -41, 59, 104, 102
    0xa18db09, 0xfa050125, 0xf9041009, 0x1537f3f9, 0x5be3edcc, 0xdf08f97e, 0x216c1602, 0x66683bd7,
    // -6, -34, -3, 3, 29, -21, -2, -17, -1, 22, 37, -1, -11, -6, 28, -24, -7, 4, 24, 0, -21, -17, -6, 0, 4, -4, -36, -1, -3, -6, 8, 4
    0x3fddefa, 0xeffeeb1d, 0xff2516ff, 0xe81cfaf5, 0x1804f9, 0xfaefeb, 0xffdcfc04, 0x408fafd,
    // 5, 24, 32, -5, 11, -32, -17, -8, -6, -4, -14, -11, -4, -11, 0, 26, 6, 10, -4, -5, -48, -14, 4, -7, 2, 8, -22, 17, -4, -4, -4, -14
    0xfb201805, 0xf8efe00b, 0xf5f2fcfa, 0x1a00f5fc, 0xfbfc0a06, 0xf904f2d0, 0x11ea0802, 0xf2fcfcfc,
};
static const uint embedded_encoder2_ResidualBlock_1_body_conv_dw_bias_dwords[8] = {
    // -0.02078, -0.0256, -0.01855, 0.00655, -0.0629, 0.0639, 0.0859, -0.05078, -0.003378, -0.00591, 0.02663, 0.0152, -0.0423, -0.07684, 0.011505, -0.1262
    0xa68ea552, 0x1eb5a4c0, 0x2c17ac07, 0xaa802d7f, 0x9e0d9aeb, 0x23c826d1, 0xaceba96a, 0xb00a21e4,
};
static const uint embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -31, -24, 30, 17, 14, 3, 12, -34, 34, 12, -79, -5, 43, 40, 20, 2, -59, -38, 21, 8, -35, -25, 35, 43, 20, 18, 13, 17, -25, 15, -25, 8
    0x111ee8e1, 0xde0c030e, 0xfbb10c22, 0x214282b, 0x815dac5, 0x2b23e7dd, 0x110d1214, 0x8e70fe7,
    // -82, 51, 26, -56, -128, -14, -101, 46, 15, -81, -102, -74, 20, -47, 38, 126, 13, 13, 7, -37, -15, -44, 6, 11, 12, 4, -3, 6, -19, -42, 60, 10
    0xc81a33ae, 0x2e9bf280, 0xb69aaf0f, 0x7e26d114, 0xdb070d0d, 0xb06d4f1, 0x6fd040c, 0xa3cd6ed,
    // 19, -17, 28, 54, 20, 1, 6, -25, 30, 7, -7, -37, -2, -25, 26, 37, -1, -51, -7, 88, 7, -30, -16, 34, 38, -19, -66, 32, 1, -8, 10, 25
    0x361cef13, 0xe7060114, 0xdbf9071e, 0x251ae7fe, 0x58f9cdff, 0x22f0e207, 0x20beed26, 0x190af801,
    // 20, 5, 10, -28, -6, 28, -1, 25, 41, -25, -87, -20, -24, -46, -31, -14, 0, 34, -43, -31, -17, -25, -38, 17, -43, -8, 40, 27, -45, -29, 4, -6
    0xe40a0514, 0x19ff1cfa, 0xeca9e729, 0xf2e1d2e8, 0xe1d52200, 0x11dae7ef, 0x1b28f8d5, 0xfa04e3d3,
    // -3, 10, 97, 9, -6, 19, 9, 33, 42, -26, -23, -5, 32, 12, 11, -10, -22, 62, -6, 39, -2, 29, -4, -30, 8, 3, -21, 61, -24, -24, -18, -1
    0x9610afd, 0x210913fa, 0xfbe9e62a, 0xf60b0c20, 0x27fa3eea, 0xe2fc1dfe, 0x3deb0308, 0xffeee8e8,
    // -28, -2, 33, -21, 32, -32, 32, -61, -38, -57, 23, 14, -22, 12, -4, 52, 15, -79, 16, -44, 14, 30, 31, 14, -19, -30, -10, -18, 10, -30, 2, 24
    0xeb21fee4, 0xc320e020, 0xe17c7da, 0x34fc0cea, 0xd410b10f, 0xe1f1e0e, 0xeef6e2ed, 0x1802e20a,
    // 14, 41, 9, -15, 3, -3, -14, 44, 42, 13, -77, 1, -4, 38, -4, -6, 58, -47, 15, -74, -33, 46, 25, 36, -21, -22, -13, 1, -19, 20, 40, 10
    0xf109290e, 0x2cf2fd03, 0x1b30d2a, 0xfafc26fc, 0xb60fd13a, 0x24192edf, 0x1f3eaeb, 0xa2814ed,
    // -13, 31, -16, -14, -12, 2, 6, -27, -29, 24, -26, 0, 58, 18, 8, -11, -23, -57, 28, 3, -16, -20, -30, -29, 1, -26, 0, -29, -17, 41, -20, -23
    0xf2f01ff3, 0xe50602f4, 0xe618e3, 0xf508123a, 0x31cc7e9, 0xe3e2ecf0, 0xe300e601, 0xe9ec29ef,
    // -5, 6, -12, -46, 12, -30, 3, -39, 0, -5, -47, 15, 17, 5, -23, -25, 38, -32, 44, -85, 25, 41, -39, -44, 82, 4, 90, 62, 30, 41, -58, -2
    0xd2f406fb, 0xd903e20c, 0xfd1fb00, 0xe7e90511, 0xab2ce026, 0xd4d92919, 0x3e5a0452, 0xfec6291e,
    // 27, -5, -2, -5, 20, -19, 2, 45, 10, -6, -92, 12, 16, -18, -18, 4, -69, -46, 5, -24, 25, 42, -12, 34, 16, 13, 10, 22, -21, -34, 27, -1
    0xfbfefb1b, 0x2d02ed14, 0xca4fa0a, 0x4eeee10, 0xe805d2bb, 0x22f42a19, 0x160a0d10, 0xff1bdeeb,
    // -29, 12, -21, -4, 23, -15, 12, -1, 63, -49, 35, -24, 42, -51, 2, -22, 20, -63, 42, 32, -14, 28, -19, 50, 41, -3, 7, -11, -9, -19, -19, 20
    0xfceb0ce3, 0xff0cf117, 0xe823cf3f, 0xea02cd2a, 0x202ac114, 0x32ed1cf2, 0xf507fd29, 0x14ededf7,
    // 10, -9, 1, -8, 1, 35, 3, -23, 7, -3, -39, -12, -74, 15, 12, 6, 33, 15, -15, 12, 13, 9, 7, 58, 1, 10, 13, 35, 9, -3, 23, 8
    0xf801f70a, 0xe9032301, 0xf4d9fd07, 0x60c0fb6, 0xcf10f21, 0x3a07090d, 0x230d0a01, 0x817fd09,
    // -17, -64, 19, -13, 11, -25, 14, 12, -8, 2, 0, -8, -9, -2, 6, -40, -47, 3, -17, 12, -13, -45, -4, 57, -43, -3, -89, -85, 37, 1, 12, 46
    0xf313c0ef, 0xc0ee70b, 0xf80002f8, 0xd806fef7, 0xcef03d1, 0x39fcd3f3, 0xaba7fdd5, 0x2e0c0125,
    // 24, -14, -33, 13, 35, -35, 15, -15, -9, -9, -61, 16, 2, 61, 13, 25, -18, -4, -8, 14, 17, -18, -5, -13, -17, 0, -79, 9, -7, 10, 11, 36
    0xddff218, 0xf10fdd23, 0x10c3f7f7, 0x190d3d02, 0xef8fcee, 0xf3fbee11, 0x9b100ef, 0x240b0af9,
    // 19, 58, 19, -64, 62, -85, -7, 11, -4, 5, -7, -15, -80, -44, -65, 44, -21, 24, 93, -33, -1, -17, -5, -20, 4, -24, -17, -13, -40, -16, -29, -19
    0xc0133a13, 0xbf9ab3e, 0xf1f905fc, 0x2cbfd4b0, 0xdf5d18eb, 0xecfbefff, 0xf3efe804, 0xede3f0d8,
    // -3, -14, 61, -8, 0, 11, 3, -17, 4, 10, 21, 2, 16, -17, -2, 8, -5, -20, -15, -14, 28, 34, -19, 15, -2, 10, -20, 2, 52, 12, -20, 2
    0xf83df2fd, 0xef030b00, 0x2150a04, 0x8feef10, 0xf2f1ecfb, 0xfed221c, 0x2ec0afe, 0x2ec0c34,
};
static const uint embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords[16] = {
    // 0.01602, 0.0539, -0.3037, 0.04736, 0.03406, 0.01593, -0.01668, -0.4463, -0.02264, 0.05927, -0.0169, 0.0385, -0.004265, -0.1504, -0.1302, 0.02191
    0x2ae6241a, 0x2a10b4dc, 0x2414285c, 0xb724a445, 0x2b96a5cc, 0x28eea454, 0xb0d09c5e, 0x259cb02b,
    // -0.2876, -0.146, -0.05093, 0.03537, 0.09393, 0.01608, 0.0586, -0.2273, 0.0881, -0.10114, -0.3784, 0.04535, 0.0892, 0.02986, 0.015274, -0.0486
    0xb0acb49a, 0x2887aa85, 0x241e2e03, 0xb3462b80, 0xae792da3, 0x29ceb60e, 0x27a52db5, 0xaa3923d2,
};
static const uint embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -77, -21, 49, 13, -54, -89, 88, -17, 10, -62, -13, 80, 5, -75, 32, -26, 0, 44, 10, 70, 29, -20, 51, -7, 25, 38, 28, -47, 42, 38, 6, -6
    0xd31ebb3, 0xef58a7ca, 0x50f3c20a, 0xe620b505, 0x460a2c00, 0xf933ec1d, 0xd11c2619, 0xfa06262a,
    // 1, 9, 28, 0, 31, 3, -3, -17, 9, -32, -25, -19, 38, 13, 9, 4, 29, -65, 83, -36, -4, 63, 13, -10, 7, -33, -15, -10, 16, -1, 2, 52
    0x1c0901, 0xeffd031f, 0xede7e009, 0x4090d26, 0xdc53bf1d, 0xf60d3ffc, 0xf6f1df07, 0x3402ff10,
    // -8, 17, 15, -40, -54, -20, 11, -37, -68, 28, 14, 19, -23, -57, -2, -7, -23, 15, -14, 30, -64, -32, 75, 22, 13, 2, -25, 44, 23, 9, 7, -47
    0xd80f11f8, 0xdb0becca, 0x130e1cbc, 0xf9fec7e9, 0x1ef20fe9, 0x164be0c0, 0x2ce7020d, 0xd1070917,
    // -80, 23, 39, -28, -22, -26, -6, -45, -36, 11, 36, -17, -78, 22, 58, -20, -31, -44, -8, 24, 9, -34, -30, 57, -19, -21, -4, -32, 86, 49, 9, -9
    0xe42717b0, 0xd3fae6ea, 0xef240bdc, 0xec3a16b2, 0x18f8d4e1, 0x39e2de09, 0xe0fcebed, 0xf7093156,
    // 16, -2, 127, -19, 8, -29, -35, 12, 21, -51, 56, 52, -14, -30, -35, 12, 23, -49, -94, 69, -12, -31, 65, -25, -22, -26, 0, 47, -19, -14, -4, -29
    0xed7ffe10, 0xcdde308, 0x3438cd15, 0xcdde2f2, 0x45a2cf17, 0xe741e1f4, 0x2f00e6ea, 0xe3fcf2ed,
    // 60, 20, -68, 2, -26, -53, 12, 19, 55, -13, 46, 10, -19, -17, -47, -11, -14, -1, -65, -44, -20, -1, 41, 56, -12, 19, 1, -10, -30, 47, 60, 38
    0x2bc143c, 0x130ccbe6, 0xa2ef337, 0xf5d1efed, 0xd4bffff2, 0x3829ffec, 0xf60113f4, 0x263c2fe2,
    // -31, 16, -39, -61, -18, 5, -5, -8, 11, 28, -9, 19, -26, -12, 14, -16, 23, -52, 9, 3, 2, 18, 6, -12, 5, 1, -21, -6, 14, -13, 5, -14
    0xc3d910e1, 0xf8fb05ee, 0x13f71c0b, 0xf00ef4e6, 0x309cc17, 0xf4061202, 0xfaeb0105, 0xf205f30e,
    // 30, -60, -5, 12, -2, -17, -32, 8, 21, 12, 31, 14, 36, 10, 2, 58, -6, -25, -74, 31, -5, -20, -10, 44, 11, -11, 32, 20, -18, 31, -14, -35
    0xcfbc41e, 0x8e0effe, 0xe1f0c15, 0x3a020a24, 0x1fb6e7fa, 0x2cf6ecfb, 0x1420f50b, 0xddf21fee,
    // -2, 28, -39, 3, -19, -1, -10, -6, -14, 2, 8, 10, 0, 10, 6, 27, 5, -46, 13, -2, -3, -7, -23, 11, 5, -82, -26, 18, 3, -14, -41, 13
    0x3d91cfe, 0xfaf6ffed, 0xa0802f2, 0x1b060a00, 0xfe0dd205, 0xbe9f9fd, 0x12e6ae05, 0xdd7f203,
    // -6, -15, -106, 7, 31, -1, 7, 22, 32, 14, 6, 21, -11, -40, 41, 5, 33, -85, -22, -6, 4, 64, 32, 33, 15, -63, 57, -80, 0, 9, 59, -24
    0x796f1fa, 0x1607ff1f, 0x15060e20, 0x529d8f5, 0xfaeaab21, 0x21204004, 0xb039c10f, 0xe83b0900,
    // 13, -18, 46, 19, 42, -11, -36, 2, -27, 34, 34, 27, 35, -6, 7, 5, 27, 91, -36, 14, 10, -51, -10, -23, -21, -47, -35, 20, -4, -27, -31, -37
    0x132eee0d, 0x2dcf52a, 0x1b2222e5, 0x507fa23, 0xedc5b1b, 0xe9f6cd0a, 0x14ddd1eb, 0xdbe1e5fc,
    // -41, -16, 27, 45, 11, 21, 1, -16, -98, -58, -5, 51, 14, 0, -2, -27, 14, 5, 41, 2, 5, 11, 29, -33, 4, -5, -62, 62, 27, -94, -61, -16
    0x2d1bf0d7, 0xf001150b, 0x33fbc69e, 0xe5fe000e, 0x229050e, 0xdf1d0b05, 0x3ec2fb04, 0xf0c3a21b,
    // 49, -34, -46, 61, 31, -30, -4, 6, 38, 5, 18, 22, 77, -5, -40, 10, -48, -78, -54, -60, 23, -56, 25, 12, -64, -23, 39, -13, -19, 30, 24, 20
    0x3dd2de31, 0x6fce21f, 0x16120526, 0xad8fb4d, 0xc4cab2d0, 0xc19c817, 0xf327e9c0, 0x14181eed,
    // 12, 27, -22, 6, 13, -3, -27, 12, -3, -56, 32, 0, -54, 22, 6, -12, 5, 31, -43, -51, -20, -12, -33, 4, 35, -10, -22, 13, -8, -3, -10, -2
    0x6ea1b0c, 0xce5fd0d, 0x20c8fd, 0xf40616ca, 0xcdd51f05, 0x4dff4ec, 0xdeaf623, 0xfef6fdf8,
    // 8, 11, 95, -12, 0, 30, 34, 4, -8, 30, -63, -45, 32, 6, -3, 4, 16, -28, 80, -36, 3, 51, -60, 6, -39, -88, -24, -26, 2, -33, -57, 37
    0xf45f0b08, 0x4221e00, 0xd3c11ef8, 0x4fd0620, 0xdc50e410, 0x6c43303, 0xe6e8a8d9, 0x25c7df02,
    // -21, -1, 8, 17, 21, -30, 8, 10, -1, 19, -12, 2, 30, -16, 27, 2, 5, -9, -13, -41, -22, 24, 57, -13, -59, -22, 16, 12, 2, 7, -13, 31
    0x1108ffeb, 0xa08e215, 0x2f413ff, 0x21bf01e, 0xd7f3f705, 0xf33918ea, 0xc10eac5, 0x1ff30702,
};
static const uint embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords[8] = {
    // -0.05258, -0.05338, -0.004936, 0.00707, 0.03079, -0.00474, -0.0231, -0.05414, -0.01077, 0.0571, -0.04605, -0.0042, -0.01295, 0.02304, 0.04236, 0.03857
    0xaad5aabb, 0x1f3d9d0e, 0x9cdb27e2, 0xaaeea5ea, 0x2b4fa184, 0x9c4da9e5, 0x25e6a2a1, 0x28f0296c,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass2(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(3840, 2160, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(3840, 2160, 16), // threadGroupSliceSize
        uint3(3840, 2160, 16), // storageSize
        uint3(16, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        132710400, // threadGroupStorageByteOffset
        0.016850261017680168, storage_fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.00646417448297143, storage_embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_1_body_conv_dw_bias = { embedded_encoder2_ResidualBlock_1_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_1_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_1_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.00672558881342411, storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias = { embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.006663109641522169, storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias = { embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias };
    
    // fused_quantized_NHWC_/encoder2/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_4 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_4 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 16);
    const uint3 groupSize_slice_4 = uint3(64, 1, 16);
    const uint3 storageSize_slice_4 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_4 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_4 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_4 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_4 = dot(groupStart_slice_4, tensorByteStrides_slice_4);
    const float quantizationScale_slice_4 = 0.015938660129904747;
    const RWBufferStorage storage_slice_4 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_4 = { logicalSize_slice_4, groupStart_slice_4, groupSize_slice_4, storageSize_slice_4, tensorByteStrides_slice_4, paddingBegin_slice_4, paddingEnd_slice_4, threadGroupByteOffsetInTensor_slice_4 + 0, quantizationScale_slice_4, storage_slice_4 };
    // ConvNextBlock (16, 2160, 3840), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,) -> (16, 2160, 3840)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    ConvNextBlock(31.89079297554309, 0.03135701268911362, 68.7875599112978, 0.014537512324750423, fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_1_body_conv_dw_bias, embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias, embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias, slice_4, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_2
#ifdef MLSR_PASS_2_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass2_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/encoder2/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_5 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_5 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_5 = uint3(32, 1, 16);
    const uint3 storageSize_slice_5 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_5 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_5 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_5 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_5 = dot(groupStart_slice_5, tensorByteStrides_slice_5);
    const float quantizationScale_slice_5 = 0.015938660129904747;
    const RWBufferStorage storage_slice_5 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_5 = { logicalSize_slice_5, groupStart_slice_5, groupSize_slice_5, storageSize_slice_5, tensorByteStrides_slice_5, paddingBegin_slice_5, paddingEnd_slice_5, threadGroupByteOffsetInTensor_slice_5 + 0, quantizationScale_slice_5, storage_slice_5 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_5, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_2_POST


#ifdef MLSR_PASS_3
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FusedConv2D_k2s2b_QuantizedOutput.hlsli"

static const uint embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 15, 34, 16, 9, -51, -27, -20, -3, 15, -37, -54, 32, 28, 65, -7, 12, -34, -29, 16, -23, -9, 3, -33, -8, 22, 20, -40, -60, 23, -25, -43, 48
    0x910220f, 0xfdece5cd, 0x20cadb0f, 0xcf9411c, 0xe910e3de, 0xf8df03f7, 0xc4d81416, 0x30d5e717,
    // -15, 50, 31, 46, -6, -57, -24, 27, -8, -20, 10, 44, -28, 84, -17, -28, -30, -2, 14, 52, -9, -26, -13, 14, -34, 5, 27, -7, -35, -17, -12, 71
    0x2e1f32f1, 0x1be8c7fa, 0x2c0aecf8, 0xe4ef54e4, 0x340efee2, 0xef3e6f7, 0xf91b05de, 0x47f4efdd,
    // -35, -21, 4, 36, -8, 27, -14, 42, 47, -8, 41, 9, 14, -55, -7, -77, 25, 19, -36, -36, -8, -38, -7, -48, 31, 14, -46, -23, 6, -36, 1, -18
    0x2404ebdd, 0x2af21bf8, 0x929f82f, 0xb3f9c90e, 0xdcdc1319, 0xd0f9daf8, 0xe9d20e1f, 0xee01dc06,
    // -1, -30, -13, 43, 15, 17, 12, -15, -3, 8, 12, -4, -23, -37, -5, 49, 16, -7, -27, -29, -4, -8, -11, 3, -96, 21, 46, 36, -57, 40, 40, 57
    0x2bf3e2ff, 0xf10c110f, 0xfc0c08fd, 0x31fbdbe9, 0xe3e5f910, 0x3f5f8fc, 0x242e15a0, 0x392828c7,
    // -32, -9, 1, 20, -29, 47, -15, 49, 31, -67, -4, 38, 64, 91, 41, -96, 18, 0, -14, 57, -61, 18, 28, -41, -20, 0, -28, -15, 23, -34, -20, 47
    0x1401f7e0, 0x31f12fe3, 0x26fcbd1f, 0xa0295b40, 0x39f20012, 0xd71c12c3, 0xf1e400ec, 0x2fecde17,
    // 22, 29, -50, -22, 37, -14, 57, -1, -12, -13, -21, -14, -5, 14, -18, -50, -40, -40, -47, 3, 26, -24, -53, -29, 10, 32, 29, -37, -17, -55, -50, 2
    0xeace1d16, 0xff39f225, 0xf2ebf3f4, 0xceee0efb, 0x3d1d8d8, 0xe3cbe81a, 0xdb1d200a, 0x2cec9ef,
    // 27, 48, 60, -16, -4, -18, -24, 0, -15, -9, -48, 11, 21, 85, 6, 12, -1, -24, 21, 17, -27, 18, 60, -23, -23, -12, 2, 39, -26, -73, 4, 71
    0xf03c301b, 0xe8eefc, 0xbd0f7f1, 0xc065515, 0x1115e8ff, 0xe93c12e5, 0x2702f4e9, 0x4704b7e6,
    // -48, -1, 41, -25, 58, 12, -49, 89, 15, 8, -14, -15, 7, 83, -26, -41, 29, -8, -10, 3, 20, -4, 55, -45, 30, 11, -27, -4, -56, -120, 3, 48
    0xe729ffd0, 0x59cf0c3a, 0xf1f2080f, 0xd7e65307, 0x3f6f81d, 0xd337fc14, 0xfce50b1e, 0x300388c8,
    // 71, 20, 11, -10, -66, -24, 23, -53, 30, -22, -68, -21, 78, 49, 26, -25, -44, -13, -3, 29, -4, -2, -47, -1, 26, -6, 65, 49, -67, -49, 19, -6
    0xf60b1447, 0xcb17e8be, 0xebbcea1e, 0xe71a314e, 0x1dfdf3d4, 0xffd1fefc, 0x3141fa1a, 0xfa13cfbd,
    // -4, 18, -44, 14, 5, 0, 10, -22, -9, 7, -24, -43, 55, 38, -38, -22, -80, -24, -35, 29, 43, 1, -20, 40, -69, 11, 73, 1, -67, -4, 9, 18
    0xed412fc, 0xea0a0005, 0xd5e807f7, 0xeada2637, 0x1ddde8b0, 0x28ec012b, 0x1490bbb, 0x1209fcbd,
    // 9, 9, -23, -19, -1, -15, -28, 28, 23, 34, -52, -38, 27, 0, -26, 6, -8, -19, 0, 0, 5, 3, -28, 30, -85, 44, -16, -47, 23, 3, -8, -6
    0xede90909, 0x1ce4f1ff, 0xdacc2217, 0x6e6001b, 0xedf8, 0x1ee40305, 0xd1f02cab, 0xfaf80317,
    // 9, 0, 7, -2, 9, 13, -21, 45, -71, 31, -7, -28, 23, 15, 4, -3, 0, 0, 7, -3, 24, -7, -53, 32, 46, 36, -11, -52, 8, -11, -23, -4
    0xfe070009, 0x2deb0d09, 0xe4f91fb9, 0xfd040f17, 0xfd070000, 0x20cbf918, 0xccf5242e, 0xfce9f508,
    // 14, -2, -47, -5, 1, 12, 0, -23, -17, 4, 42, -1, 1, 8, 37, -38, -34, -44, -65, -28, 4, 22, 27, 23, -27, -11, 19, -8, 9, -58, 25, -32
    0xfbd1fe0e, 0xe9000c01, 0xff2a04ef, 0xda250801, 0xe4bfd4de, 0x171b1604, 0xf813f5e5, 0xe019c609,
    // -2, -20, -56, 40, 28, 14, -5, 6, 19, 0, 54, 7, -11, 6, 12, -58, 31, -9, -78, 33, 6, 0, 56, -52, 11, 5, 1, -18, 2, -82, -3, -25
    0x28c8ecfe, 0x6fb0e1c, 0x7360013, 0xc60c06f5, 0x21b2f71f, 0xcc380006, 0xee01050b, 0xe7fdae02,
    // 20, 5, 16, -30, -7, -5, -40, 22, 12, 26, 24, 26, -72, -5, 47, 1, 9, -41, 4, -22, 14, 21, -24, -22, -1, 5, 2, 33, -54, -50, 43, -2
    0xe2100514, 0x16d8fbf9, 0x1a181a0c, 0x12ffbb8, 0xea04d709, 0xeae8150e, 0x210205ff, 0xfe2bceca,
    // 39, 1, -10, -43, 19, -6, 32, 0, -51, 10, -25, 11, -2, -27, 46, -49, -2, -44, 2, -32, 22, 13, 14, 37, -30, -19, 23, 16, -18, -8, 56, -29
    0xd5f60127, 0x20fa13, 0xbe70acd, 0xcf2ee5fe, 0xe002d4fe, 0x250e0d16, 0x1017ede2, 0xe338f8ee,
    // 7, 29, 58, -10, -30, 30, 26, 42, -6, -32, 16, 6, 32, -7, 25, -60, -10, 11, 4, -23, 27, 27, 1, 16, 20, -17, 11, -9, 41, 25, 5, -76
    0xf63a1d07, 0x2a1a1ee2, 0x610e0fa, 0xc419f920, 0xe9040bf6, 0x10011b1b, 0xf70bef14, 0xb4051929,
    // -9, 34, 29, -4, 30, 40, -32, 6, 70, -7, 16, -36, 39, 15, -38, -45, -15, 36, 33, 18, -8, 16, -20, 25, 50, -50, 14, 28, 2, -6, 36, -64
    0xfc1d22f7, 0x6e0281e, 0xdc10f946, 0xd3da0f27, 0x122124f1, 0x19ec10f8, 0x1c0ece32, 0xc024fa02,
    // -24, -66, -7, -21, 66, 68, -40, 29, -9, 26, 28, 5, -36, 41, 21, 26, -12, -57, -21, 20, 15, 32, -25, 24, 3, 5, 28, 6, -17, 5, 27, -19
    0xebf9bee8, 0x1dd84442, 0x51c1af7, 0x1a1529dc, 0x14ebc7f4, 0x18e7200f, 0x61c0503, 0xed1b05ef,
    // -62, -70, 8, 27, 34, 20, -67, 46, 5, -25, 60, 64, -86, 43, 55, 1, -66, -51, -39, 36, 40, 10, -22, 44, -35, -2, 47, 28, -52, 26, 33, -18
    0x1b08bac2, 0x2ebd1422, 0x403ce705, 0x1372baa, 0x24d9cdbe, 0x2cea0a28, 0x1c2ffedd, 0xee211acc,
    // 61, -7, -21, -31, -30, -7, 39, -45, -17, 21, -70, 6, 1, -69, -23, 48, 41, -23, -3, -31, -33, 14, 59, -31, 10, 13, -39, -15, 41, -49, 12, 11
    0xe1ebf93d, 0xd327f9e2, 0x6ba15ef, 0x30e9bb01, 0xe1fde929, 0xe13b0edf, 0xf1d90d0a, 0xb0ccf29,
    // -20, -44, -9, -14, -7, 62, -26, 25, 16, -12, 20, 8, -7, -20, 57, 0, -30, -28, 18, -31, 1, 82, -29, 15, 29, -38, 28, 1, 20, 26, 64, -15
    0xf2f7d4ec, 0x19e63ef9, 0x814f410, 0x39ecf9, 0xe112e4e2, 0xfe35201, 0x11cda1d, 0xf1401a14,
    // 7, -12, 48, -55, -54, 33, 27, -28, 5, -18, -46, -27, 70, -37, 1, 22, 18, -1, 45, -71, -3, 62, -7, 41, -14, 0, 13, 3, 9, 54, 26, -6
    0xc930f407, 0xe41b21ca, 0xe5d2ee05, 0x1601db46, 0xb92dff12, 0x29f93efd, 0x30d00f2, 0xfa1a3609,
    // 12, -26, 3, -13, 1, 6, 46, -31, 15, 5, 1, -7, -33, -77, -7, 32, 33, -9, -30, -37, 56, 8, 0, -9, 9, 38, -19, 7, -48, -24, -11, -8
    0xf303e60c, 0xe12e0601, 0xf901050f, 0x20f9b3df, 0xdbe2f721, 0xf7000838, 0x7ed2609, 0xf8f5e8d0,
    // -6, 44, 66, -47, 48, -18, -26, 29, 18, -21, -10, -4, -3, 34, -11, -50, -54, -47, 9, -8, 42, 14, 9, 2, 47, 11, 92, -4, -54, -107, 9, 25
    0xd1422cfa, 0x1de6ee30, 0xfcf6eb12, 0xcef522fd, 0xf809d1ca, 0x2090e2a, 0xfc5c0b2f, 0x190995ca,
    // 20, 38, 42, -47, 19, -49, 37, -6, -10, 24, -55, -23, 53, 33, -50, 41, -27, -48, 0, -2, 27, 19, 35, -13, -56, 16, 76, -10, -14, -34, -14, 100
    0xd12a2614, 0xfa25cf13, 0xe9c918f6, 0x29ce2135, 0xfe00d0e5, 0xf323131b, 0xf64c10c8, 0x64f2def2,
    // -20, -38, -35, 34, -15, -1, -45, -15, -6, 39, 54, -1, -47, -22, -24, 91, -12, -2, 46, -3, 13, 35, -3, 16, -14, -18, -4, 21, -6, 38, 19, 29
    0x22dddaec, 0xf1d3fff1, 0xff3627fa, 0x5be8ead1, 0xfd2efef4, 0x10fd230d, 0x15fceef2, 0x1d1326fa,
    // -15, -34, -26, 37, 19, -21, 35, -32, -21, 26, 23, -45, 15, -60, -28, 40, 3, 28, 39, -12, -22, -40, 8, 31, 40, -39, -52, 17, 60, 73, 6, -85
    0x25e6def1, 0xe023eb13, 0xd3171aeb, 0x28e4c40f, 0xf4271c03, 0x1f08d8ea, 0x11ccd928, 0xab06493c,
    // 8, -61, 30, 3, -25, 3, 22, 9, 115, -32, -40, 10, 36, -35, 0, -35, 6, -26, -1, 9, 10, -31, 2, 17, 41, 2, -10, -14, 49, 14, 10, -40
    0x31ec308, 0x91603e7, 0xad8e073, 0xdd00dd24, 0x9ffe606, 0x1102e10a, 0xf2f60229, 0xd80a0e31,
    // -37, -59, 20, 4, 2, 11, 32, 40, -60, -25, 9, 34, 9, -5, 64, -1, 32, -23, -3, -9, -53, -25, 84, 26, -28, -23, -48, 15, 31, 42, 22, -36
    0x414c5db, 0x28200b02, 0x2209e7c4, 0xff40fb09, 0xf7fde920, 0x1a54e7cb, 0xfd0e9e4, 0xdc162a1f,
    // -54, -21, 21, -27, -9, 20, 45, 4, 1, -39, 33, 45, -39, -100, 19, 19, 45, 79, -25, -20, -13, -59, 4, -33, 1, -38, -51, 7, 16, 80, 18, -59
    0xe515ebca, 0x42d14f7, 0x2d21d901, 0x13139cd9, 0xece74f2d, 0xdf04c5f3, 0x7cdda01, 0xc5125010,
    // -55, -25, 9, 6, 38, 23, 4, 26, -1, -1, 50, -37, -17, -68, -18, 26, 4, 69, 27, -28, 34, -37, -56, 10, -1, 49, -47, -35, 18, 127, -64, -25
    0x609e7c9, 0x1a041726, 0xdb32ffff, 0x1aeebcef, 0xe41b4504, 0xac8db22, 0xddd131ff, 0xe7c07f12,
    // 44, 11, 4, 15, 0, 2, 34, 52, 22, -34, -51, 0, 57, 17, -73, -31, 2, 7, 21, 27, -2, -1, -24, 41, 12, -16, 11, 31, 29, 12, -8, -29
    0xf040b2c, 0x34220200, 0xcdde16, 0xe1b71139, 0x1b150702, 0x29e8fffe, 0x1f0bf00c, 0xe3f80c1d,
    // 51, 62, 56, -10, -64, -46, 16, -3, -57, -27, -23, 80, -39, -21, 37, 16, -19, 17, 62, -73, -18, 46, -85, -43, 41, -47, 82, 62, -7, -13, 44, -1
    0xf6383e33, 0xfd10d2c0, 0x50e9e5c7, 0x1025ebd9, 0xb73e11ed, 0xd5ab2eee, 0x3e52d129, 0xff2cf3f9,
    // 46, -49, -20, 4, -64, -7, 89, -61, 1, 20, -85, -53, 55, -92, -43, 10, 20, -8, 13, -16, -27, -49, 27, 21, -65, -22, 14, 37, 1, 42, 36, -61
    0x4eccf2e, 0xc359f9c0, 0xcbab1401, 0xad5a437, 0xf00df814, 0x151bcfe5, 0x250eeabf, 0xc3242a01,
    // -41, -55, -13, -4, 7, 59, 3, 27, -35, 5, 31, -2, -50, -78, 4, 75, -6, -18, -23, -18, 85, -13, -39, -24, 17, 25, 53, 24, -33, 27, -11, 45
    0xfcf3c9d7, 0x1b033b07, 0xfe1f05dd, 0x4b04b2ce, 0xeee9eefa, 0xe8d9f355, 0x18351911, 0x2df51bdf,
    // 55, 74, -28, 46, 18, -50, 96, 34, -49, 5, 40, 21, -27, 24, 13, -54, 21, -12, -30, -15, 57, 26, 41, -31, -25, 73, -24, -81, 80, 26, -46, 24
    0x2ee44a37, 0x2260ce12, 0x152805cf, 0xca0d18e5, 0xf1e2f415, 0xe1291a39, 0xafe849e7, 0x18d21a50,
    // -21, 14, 3, -24, 26, 21, -28, -27, -26, 44, 0, -10, 9, 31, -24, 2, -31, 36, 54, -9, -90, 14, -83, -53, 38, 0, 6, 23, -49, -53, 25, -17
    0xe8030eeb, 0xe5e4151a, 0xf6002ce6, 0x2e81f09, 0xf73624e1, 0xcbad0ea6, 0x17060026, 0xef19cbcf,
    // -43, 7, -4, 3, 59, 58, 2, 42, -18, 16, 23, -63, 55, 8, -18, -37, 18, 84, -22, 33, -23, -45, 2, -7, -2, -17, 45, 41, -10, 56, 49, -68
    0x3fc07d5, 0x2a023a3b, 0xc11710ee, 0xdbee0837, 0x21ea5412, 0xf902d3e9, 0x292deffe, 0xbc3138f6,
    // 23, 33, 30, 41, -21, 15, -17, -4, 11, 13, 7, 14, 4, -16, 14, -20, 26, 42, -26, -6, 7, -1, 14, -57, -36, 25, -6, -15, 20, 22, -66, 40
    0x291e2117, 0xfcef0feb, 0xe070d0b, 0xec0ef004, 0xfae62a1a, 0xc70eff07, 0xf1fa19dc, 0x28be1614,
    // 3, -45, -23, -61, 59, -15, -16, -11, -7, 52, -2, -12, 3, 21, 3, 39, -20, -50, 8, 12, 12, -32, 10, -3, -13, 40, 46, 2, -1, -31, 20, 2
    0xc3e9d303, 0xf5f0f13b, 0xf4fe34f9, 0x27031503, 0xc08ceec, 0xfd0ae00c, 0x22e28f3, 0x214e1ff,
    // 8, -7, 27, 25, -3, -48, -17, -15, 37, 55, 13, 28, -55, 17, 45, -5, -27, -42, 20, 24, 19, -26, -26, -36, 78, 50, 38, -8, -29, -26, 23, -20
    0x191bf908, 0xf1efd0fd, 0x1c0d3725, 0xfb2d11c9, 0x1814d6e5, 0xdce6e613, 0xf826324e, 0xec17e6e3,
    // -13, -3, 80, 83, -37, -1, -45, 64, -22, 4, -1, 27, 31, 9, 5, -73, 6, -22, 31, 12, -28, -15, -37, 23, -41, 13, -23, 26, 18, 3, 18, -48
    0x5350fdf3, 0x40d3ffdb, 0x1bff04ea, 0xb705091f, 0xc1fea06, 0x17dbf1e4, 0x1ae90dd7, 0xd0120312,
    // -28, -24, 8, -31, 21, -2, -62, 24, 24, 22, -4, -8, 22, -68, 4, -56, -11, -30, 7, -53, 44, -22, -41, 60, 15, 29, -15, 8, 17, -46, 13, -61
    0xe108e8e4, 0x18c2fe15, 0xf8fc1618, 0xc804bc16, 0xcb07e2f5, 0x3cd7ea2c, 0x8f11d0f, 0xc30dd211,
    // 15, -34, -11, -2, -4, 23, 25, 0, 25, 10, -8, -48, 43, -6, -21, 25, 104, 32, -45, 37, -62, -39, 29, -52, 49, 5, -49, -26, 45, -22, -27, -13
    0xfef5de0f, 0x1917fc, 0xd0f80a19, 0x19ebfa2b, 0x25d32068, 0xcc1dd9c2, 0xe6cf0531, 0xf3e5ea2d,
    // -43, -14, -24, -32, 69, 12, -16, 19, 13, -9, 65, -28, -70, -25, 4, -30, -43, 14, -44, -26, 25, -18, -9, 38, -20, -44, 20, 4, -25, -18, 22, -62
    0xe0e8f2d5, 0x13f00c45, 0xe441f70d, 0xe204e7ba, 0xe6d40ed5, 0x26f7ee19, 0x414d4ec, 0xc216eee7,
    // -13, -20, -46, 17, -4, 47, 36, 84, -15, 23, -102, -64, 40, 39, -44, 32, -14, -25, -19, 18, 3, 13, 9, 35, -16, 33, -105, -63, -6, 11, -24, 65
    0x11d2ecf3, 0x54242ffc, 0xc09a17f1, 0x20d42728, 0x12ede7f2, 0x23090d03, 0xc19721f0, 0x41e80bfa,
    // 38, -21, -44, 15, -41, -1, 14, -3, 30, 27, -127, -50, 14, -6, -14, 37, 3, -64, 4, -28, 17, 28, 3, 29, 29, 32, -85, -57, 7, 26, -4, 76
    0xfd4eb26, 0xfd0effd7, 0xce811b1e, 0x25f2fa0e, 0xe404c003, 0x1d031c11, 0xc7ab201d, 0x4cfc1a07,
    // -8, -57, 17, -71, 25, 33, -2, -17, -78, 6, -51, -1, 54, 32, 3, -31, -6, -55, 57, -7, -52, 20, 11, -22, -37, -18, -47, 13, 60, -34, -24, -43
    0xb911c7f8, 0xeffe2119, 0xffcd06b2, 0xe1032036, 0xf939c9fa, 0xea0b14cc, 0xdd1eedb, 0xd5e8de3c,
    // 6, -40, 54, 33, -37, 14, -4, -29, -26, -16, -38, 33, 50, 45, -22, -71, -44, -34, 48, 71, -35, 44, -7, 6, -24, -43, -67, 21, 88, -28, 5, -78
    0x2136d806, 0xe3fc0edb, 0x21daf0e6, 0xb9ea2d32, 0x4730ded4, 0x6f92cdd, 0x15bdd5e8, 0xb205e458,
    // 6, 7, 38, 49, 17, -13, -15, -42, 3, -10, 21, 55, -33, 12, 7, -27, -25, 16, 7, 19, -3, 10, 0, 17, 13, -9, 36, -2, -32, -36, -12, -51
    0x31260706, 0xd6f1f311, 0x3715f603, 0xe5070cdf, 0x130710e7, 0x11000afd, 0xfe24f70d, 0xcdf4dce0,
    // -4, 43, -15, -60, -24, -10, 4, 0, 16, -31, -22, -5, 21, 26, 6, -42, 13, 41, -22, -72, -2, 44, 65, -23, -36, 41, -60, -99, 81, -15, -19, 40
    0xc4f12bfc, 0x4f6e8, 0xfbeae110, 0xd6061a15, 0xb8ea290d, 0xe9412cfe, 0x9dc429dc, 0x28edf151,
    // -18, -25, 26, 19, -75, 1, -19, 5, 25, -11, -33, 10, 20, -91, 29, -40, -47, -10, 16, 7, 65, 19, -41, 66, 5, -14, 7, 1, 28, 74, -52, -29
    0x131ae7ee, 0x5ed01b5, 0xadff519, 0xd81da514, 0x710f6d1, 0x42d71341, 0x107f205, 0xe3cc4a1c,
    // -44, -21, -8, 15, 30, 66, 16, 12, 19, 7, -1, -57, 47, -41, -52, 6, 84, 73, -26, 16, -50, -54, 13, -65, -17, 16, -12, 35, -27, 13, 19, 44
    0xff8ebd4, 0xc10421e, 0xc7ff0713, 0x6ccd72f, 0x10e64954, 0xbf0dcace, 0x23f410ef, 0x2c130de5,
    // 46, 34, 30, -48, -55, 19, 27, -29, -17, -11, -46, -24, 78, 20, 64, -5, 8, 30, 27, -77, 11, 55, 34, 7, 18, -1, -7, -18, 54, 56, 43, -39
    0xd01e222e, 0xe31b13c9, 0xe8d2f5ef, 0xfb40144e, 0xb31b1e08, 0x722370b, 0xeef9ff12, 0xd92b3836,
    // 2, 68, 21, -24, 63, -2, 6, -38, 38, 16, 18, 9, -21, -28, -18, -32, -24, 14, 13, 26, 70, 0, 7, 41, -30, 6, 72, 33, -60, 4, -38, -30
    0xe8154402, 0xda06fe3f, 0x9121026, 0xe0eee4eb, 0x1a0d0ee8, 0x29070046, 0x214806e2, 0xe2da04c4,
    // 21, 34, -8, 3, 2, 0, 70, 22, -14, 67, 96, -11, -11, 19, 22, 72, 26, 50, -12, 0, -4, -9, 72, 11, -16, 64, 89, 20, -32, 24, 16, 39
    0x3f82215, 0x16460002, 0xf56043f2, 0x481613f5, 0xf4321a, 0xb48f7fc, 0x145940f0, 0x271018e0,
    // -1, 62, -21, -9, 0, -5, 89, 16, -34, 59, 99, 3, -29, 25, 19, 43, 3, 69, -32, -33, 22, -17, 87, 40, -30, 36, 85, 23, -34, 44, 77, 22
    0xf7eb3eff, 0x1059fb00, 0x3633bde, 0x2b1319e3, 0xdfe04503, 0x2857ef16, 0x175524e2, 0x164d2cde,
    // 3, 66, -48, -56, 8, 5, -52, -9, 4, 44, 21, -38, 7, -58, -30, 0, -17, 42, 16, -20, -6, 26, -29, 27, -3, 61, 19, -71, 51, -74, -60, -20
    0xc8d04203, 0xf7cc0508, 0xda152c04, 0xe2c607, 0xec102aef, 0x1be31afa, 0xb9133dfd, 0xecc4b633,
    // -6, 38, 11, 9, 3, 13, -27, 59, -29, 35, 90, 0, -9, 7, 12, -53, 14, 47, -2, 42, 3, 23, -4, 18, 13, 40, 39, -56, 42, -45, -36, -56
    0x90b26fa, 0x3be50d03, 0x5a23e3, 0xcb0c07f7, 0x2afe2f0e, 0x12fc1703, 0xc827280d, 0xc8dcd32a,
    // 7, -38, -10, -53, 11, -28, 12, 43, -90, -10, 10, 14, -12, -7, 25, 80, -24, -54, -12, -9, 32, -40, -13, 34, -46, -42, 44, -12, 1, 7, -13, 13
    0xcbf6da07, 0x2b0ce40b, 0xe0af6a6, 0x5019f9f4, 0xf7f4cae8, 0x22f3d820, 0xf42cd6d2, 0xdf30701,
    // 15, -28, 16, 5, 10, -86, -39, 8, 23, -33, 6, 7, -45, 0, 38, 16, 16, -43, 18, 10, 23, -82, 24, 23, -29, -21, 24, 3, -24, 3, 52, 24
    0x510e40f, 0x8d9aa0a, 0x706df17, 0x102600d3, 0xa12d510, 0x1718ae17, 0x318ebe3, 0x183403e8,
    // 28, 32, -72, -28, 15, -70, 61, 43, -24, -75, 24, 67, -34, 42, 58, -51, -13, 21, -19, -25, -20, -52, 2, -11, 20, -15, 13, 8, -14, -31, 55, -13
    0xe4b8201c, 0x2b3dba0f, 0x4318b5e8, 0xcd3a2ade, 0xe7ed15f3, 0xf502ccec, 0x80df114, 0xf337e1f2,
    // 33, -9, 23, -8, 23, -2, -2, 50, -18, 33, -48, -15, 18, 102, 5, 8, 7, -39, 43, 31, -49, 41, -72, 18, 62, -3, -17, -22, 19, -27, -15, 39
    0xf817f721, 0x32fefe17, 0xf1d021ee, 0x8056612, 0x1f2bd907, 0x12b829cf, 0xeaeffd3e, 0x27f1e513,
};
static const uint embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias_dwords[16] = {
    // -0.0114, -0.01264, -0.01017, 0.007748, -0.012856, -0.03864, -0.02362, -0.02455, -0.06775, 0.08777, 0.02267, 0.01648, -0.001612, -0.01439, -0.0267, 0.00724
    0xa279a1d6, 0x1fefa135, 0xa8f2a295, 0xa649a60c, 0x2d9eac56, 0x243825ce, 0xa35e969a, 0x1f6aa6d6,
    // -0.0662, 0.0003653, -0.007023, 0.01741, 0.05713, 0.051, -0.01405, 0.05084, 0.0543, 0.010826, -0.01836, 0.02829, -0.03119, -0.02242, 0.02525, 0.01627
    0xdfcac3d, 0x24759f31, 0x2a872b50, 0x2a82a332, 0x218b2af3, 0x273ea4b3, 0xa5bda7fc, 0x242a2677,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass3(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(3840, 2160, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(3840, 2160, 16), // threadGroupSliceSize
        uint3(3840, 2160, 16), // storageSize
        uint3(16, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.015938660129904747, storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<512> storage_embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 16, 32), // threadGroupSliceSize
        uint4(2, 2, 16, 32), // storageSize
        uint4(16, 32, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.002673944691196084, storage_embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias = { embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias };
    
    // Fusedquantized_/encoder2/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_6 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_6 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_6 = uint3(64, 1, 32);
    const uint3 storageSize_slice_6 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_6 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_6 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_6 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_6 = dot(groupStart_slice_6, tensorByteStrides_slice_6);
    const RWBufferStorage storage_slice_6 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_6 = { logicalSize_slice_6, groupStart_slice_6, groupSize_slice_6, storageSize_slice_6, tensorByteStrides_slice_6, paddingBegin_slice_6, paddingEnd_slice_6, threadGroupByteOffsetInTensor_slice_6 + 132710400, storage_slice_6 };
    // Fusedquantized_/encoder2/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs (16, 2160, 3840), (32, 16, 2, 2), (32,) -> (32, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FusedConv2D_k2s2b_QuantizedOutput(0.014482999220490456, 0.01414661668241024, fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias, slice_6, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_3
#ifdef MLSR_PASS_3_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass3_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // Fusedquantized_/encoder2/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_7 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_7 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_7 = uint3(32, 1, 32);
    const uint3 storageSize_slice_7 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_7 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_7 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_7 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_7 = dot(groupStart_slice_7, tensorByteStrides_slice_7);
    const RWBufferStorage storage_slice_7 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_7 = { logicalSize_slice_7, groupStart_slice_7, groupSize_slice_7, storageSize_slice_7, tensorByteStrides_slice_7, paddingBegin_slice_7, paddingEnd_slice_7, threadGroupByteOffsetInTensor_slice_7 + 132710400, storage_slice_7 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_7, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_3_POST


#ifdef MLSR_PASS_4
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 10, 6, -5, -10, 15, 7, -2, -14, 9, 4, -3, -24, 8, 9, -7, 9, -5, -1, -28, 32, 6, 27, 1, -33, 12, 1, 2, -22, 16, -3, -9, 2
    0xf6fb060a, 0xf2fe070f, 0xe8fd0409, 0x9f90908, 0x20e4fffb, 0xdf011b06, 0xea02010c, 0x2f7fd10,
    // -5, -1, 6, -9, 0, -2, 7, 9, -5, -8, -2, 11, -3, 4, -1, -5, -30, -7, 28, -23, 32, 21, -18, 14, 0, 14, 25, -21, -1, -18, 3, 19
    0xf706fffb, 0x907fe00, 0xbfef8fb, 0xfbff04fd, 0xe91cf9e2, 0xeee1520, 0xeb190e00, 0x1303eeff,
    // -55, -5, -41, -31, -17, -6, -29, 15, 14, -10, 7, 18, 8, 86, -8, 0, 29, 16, 8, 10, 14, -15, 21, -5, -1, 8, 6, 25, -4, 20, 1, 3
    0xe1d7fbc9, 0xfe3faef, 0x1207f60e, 0xf85608, 0xa08101d, 0xfb15f10e, 0x190608ff, 0x30114fc,
    // -3, -9, -1, -6, -10, -3, 6, 7, 9, -1, 4, -5, 3, -1, 9, -10, -1, 19, 25, 1, -2, -15, -1, 2, -12, -8, 7, -20, -12, -4, -8, -2
    0xfafff7fd, 0x706fdf6, 0xfb04ff09, 0xf609ff03, 0x11913ff, 0x2fff1fe, 0xec07f8f4, 0xfef8fcf4,
    // 16, -2, -2, 1, 13, -4, 5, -11, -1, -5, 4, 5, -7, 9, -7, 11, -7, 21, 10, -13, -3, -10, -6, 3, -3, 3, 26, 9, 6, 4, 6, -4
    0x1fefe10, 0xf505fc0d, 0x504fbff, 0xbf909f9, 0xf30a15f9, 0x3faf6fd, 0x91a03fd, 0xfc060406,
    // -23, -26, 23, 5, 3, 16, -3, 20, 2, -20, 3, 10, 5, -1, 13, -24, 2, -3, 21, -7, -7, -11, 1, 10, -2, 8, 8, 1, 2, -6, 6, 6
    0x517e6e9, 0x14fd1003, 0xa03ec02, 0xe80dff05, 0xf915fd02, 0xa01f5f9, 0x10808fe, 0x606fa02,
    // -9, -23, -26, -17, 15, 31, -5, 7, 13, 4, -33, -7, -10, -23, 17, -5, 19, -23, -42, 36, -30, -6, 30, 18, 1, -5, 22, 8, -64, 61, 5, 27
    0xefe6e9f7, 0x7fb1f0f, 0xf9df040d, 0xfb11e9f6, 0x24d6e913, 0x121efae2, 0x816fb01, 0x1b053dc0,
    // 3, -1, -13, -12, -15, -13, 8, 8, -15, -2, -3, -21, 16, 6, -7, 12, 4, 6, 0, 2, -4, -4, -4, 1, 3, 5, 0, 20, 9, 3, -3, -1
    0xf4f3ff03, 0x808f3f1, 0xebfdfef1, 0xcf90610, 0x2000604, 0x1fcfcfc, 0x14000503, 0xfffd0309,
    // 4, -10, 31, 26, -17, -20, -15, -7, -4, -4, 1, -23, -18, 6, -12, 0, 7, 2, 3, -6, 5, -6, 3, -8, -11, 5, 0, -18, 3, 7, -11, 4
    0x1a1ff604, 0xf9f1ecef, 0xe901fcfc, 0xf406ee, 0xfa030207, 0xf803fa05, 0xee0005f5, 0x4f50703,
    // 14, -3, 5, -6, 15, 6, 2, -2, -7, 4, 0, -12, -12, 11, -1, 18, -14, 13, 28, 8, -4, 23, 13, -17, 6, -18, -8, -10, -1, 24, -7, 6
    0xfa05fd0e, 0xfe02060f, 0xf40004f9, 0x12ff0bf4, 0x81c0df2, 0xef0d17fc, 0xf6f8ee06, 0x6f918ff,
    // -6, 1, 1, -2, -5, -3, -9, 9, -2, 3, 8, 1, 8, 8, 1, -2, 17, -15, -5, 10, -37, 24, 33, 3, -19, -18, 3, 20, 18, 8, 20, -3
    0xfe0101fa, 0x9f7fdfb, 0x10803fe, 0xfe010808, 0xafbf111, 0x32118db, 0x1403eeed, 0xfd140812,
    // -7, 29, 7, 57, -8, -8, 9, 34, 31, 10, 32, -30, 49, -8, -9, -39, 4, 7, 15, -9, -16, -17, 3, -13, 6, 10, 13, -13, -21, -20, -8, -9
    0x39071df9, 0x2209f8f8, 0xe2200a1f, 0xd9f7f831, 0xf70f0704, 0xf303eff0, 0xf30d0a06, 0xf7f8eceb,
    // 8, 16, 13, 10, -7, 5, 2, 8, 2, -2, 5, 13, -6, 8, -11, -3, -20, -8, -28, 0, 20, -35, -2, -8, -9, 6, -5, -9, 18, 0, 0, 4
    0xa0d1008, 0x80205f9, 0xd05fe02, 0xfdf508fa, 0xe4f8ec, 0xf8fedd14, 0xf7fb06f7, 0x4000012,
    // 11, -12, 0, -7, -2, -1, 0, 2, 0, -4, -2, -2, 3, -5, -9, 13, 3, 13, 4, 0, 21, -5, -14, 0, 9, 2, -6, -14, -10, 10, -5, -7
    0xf900f40b, 0x200fffe, 0xfefefc00, 0xdf7fb03, 0x40d03, 0xf2fb15, 0xf2fa0209, 0xf9fb0af6,
    // -16, -18, 2, -17, -16, -5, 13, -2, -4, -6, -1, 2, -22, -31, 7, 10, 20, 2, -1, -5, -5, -1, 14, 0, -10, 10, 0, -4, 1, 9, -1, 8
    0xef02eef0, 0xfe0dfbf0, 0x2fffafc, 0xa07e1ea, 0xfbff0214, 0xefffb, 0xfc000af6, 0x8ff0901,
    // -29, -23, 6, -18, -11, 4, 26, -14, -11, 5, -12, -7, 41, 7, 8, -1, 14, -68, -12, 6, 25, 6, -30, -22, 1, 16, 0, -10, 19, -66, 0, -72
    0xee06e9e3, 0xf21a04f5, 0xf9f405f5, 0xff080729, 0x6f4bc0e, 0xeae20619, 0xf6001001, 0xb800be13,
    // 2, -13, -29, 19, 46, 2, 22, 15, 11, -27, 18, -10, -15, -9, -3, 28, 1, -12, -2, -7, 1, -2, 12, 20, 13, -1, 10, 7, 5, 9, 5, 2
    0x13e3f302, 0xf16022e, 0xf612e50b, 0x1cfdf7f1, 0xf9fef401, 0x140cfe01, 0x70aff0d, 0x2050905,
    // -5, 41, -7, 14, 3, -4, -9, -15, -13, -4, 1, -6, -12, 17, -10, 9, -9, 2, 17, 6, -19, 0, -16, -8, -7, 12, 5, -3, 7, 20, -2, -12
    0xef929fb, 0xf1f7fc03, 0xfa01fcf3, 0x9f611f4, 0x61102f7, 0xf8f000ed, 0xfd050cf9, 0xf4fe1407,
    // -6, -2, 5, -11, 3, 4, -13, -8, 2, 3, 0, -6, -1, -3, 2, -4, 18, 2, -29, -19, 3, 7, -20, 1, 3, 10, 4, -29, -11, -38, -2, 26
    0xf505fefa, 0xf8f30403, 0xfa000302, 0xfc02fdff, 0xede30212, 0x1ec0703, 0xe3040a03, 0x1afedaf5,
    // 13, 15, 12, 1, 5, 2, 3, -14, 3, -13, -12, -2, 4, 23, -12, -4, 33, 11, -22, -4, -1, -2, 48, -9, 14, 4, -14, 3, 3, 7, 13, -15
    0x10c0f0d, 0xf2030205, 0xfef4f303, 0xfcf41704, 0xfcea0b21, 0xf730feff, 0x3f2040e, 0xf10d0703,
    // -32, -32, 8, 33, 16, 13, 15, -16, -8, -19, 18, -16, -8, 16, 2, -31, 18, -24, 6, 7, -30, -5, -6, 33, 4, 29, 12, -4, 22, -16, 0, 53
    0x2108e0e0, 0xf00f0d10, 0xf012edf8, 0xe10210f8, 0x706e812, 0x21fafbe2, 0xfc0c1d04, 0x3500f016,
    // -13, -4, 0, 18, 10, -5, -10, 10, -5, 3, -16, 0, -6, -7, -14, 7, 8, -34, -6, 0, -4, 5, -7, -3, 5, 3, 18, 35, 6, -3, -2, -9
    0x1200fcf3, 0xaf6fb0a, 0xf003fb, 0x7f2f9fa, 0xfade08, 0xfdf905fc, 0x23120305, 0xf7fefd06,
    // 17, 1, -13, -2, 0, -7, -4, 17, -3, -15, 9, -5, -5, 8, -1, 2, 6, -13, -3, -10, 11, 6, 5, -13, 2, 9, -12, -14, -4, 0, 2, 16
    0xfef30111, 0x11fcf900, 0xfb09f1fd, 0x2ff08fb, 0xf6fdf306, 0xf305060b, 0xf2f40902, 0x100200fc,
    // 24, 27, -17, -6, 9, -14, -28, -9, -5, 3, -30, 22, -11, 12, -27, 1, 6, -5, -4, 12, -5, 1, -4, -3, -7, 0, -5, 4, 7, 11, -2, 3
    0xfaef1b18, 0xf7e4f209, 0x16e203fb, 0x1e50cf5, 0xcfcfb06, 0xfdfc01fb, 0x4fb00f9, 0x3fe0b07,
    // 7, 1, 31, -22, 8, 7, 12, 12, 0, 12, 26, -8, 12, 14, 6, 11, 82, 20, -9, 53, -13, 29, 85, 0, 1, -15, 1, 12, 21, -58, 38, -22
    0xea1f0107, 0xc0c0708, 0xf81a0c00, 0xb060e0c, 0x35f71452, 0x551df3, 0xc01f101, 0xea26c615,
    // 10, 7, 0, 18, -1, 0, 4, 1, 24, 3, -27, 15, 8, 9, 0, 13, -18, -11, 5, -8, -5, -4, 3, -1, 5, 5, -1, -7, -1, -1, 0, -10
    0x1200070a, 0x10400ff, 0xfe50318, 0xd000908, 0xf805f5ee, 0xff03fcfb, 0xf9ff0505, 0xf600ffff,
    // 12, 13, 10, 1, 6, -15, 6, -4, -10, 4, 18, 7, -22, 18, -7, 13, 8, -13, 3, 1, 9, -10, -6, 1, 2, -10, 9, 17, 2, 1, 1, -2
    0x10a0d0c, 0xfc06f106, 0x71204f6, 0xdf912ea, 0x103f308, 0x1faf609, 0x1109f602, 0xfe010102,
    // 8, -6, 13, -24, 11, 3, -18, -10, -4, 12, 4, -16, -1, -2, -2, 14, 42, 27, -10, 3, -3, -17, 9, -6, 3, -1, -1, -18, -10, 19, -19, -5
    0xe80dfa08, 0xf6ee030b, 0xf0040cfc, 0xefefeff, 0x3f61b2a, 0xfa09effd, 0xeeffff03, 0xfbed13f6,
    // 7, 2, -10, 30, -6, -3, -28, -19, 12, 10, 10, 7, 26, 13, -1, 20, -7, 13, -13, 27, -28, -15, -14, 9, 0, -21, 5, -16, -13, -2, 8, -20
    0x1ef60207, 0xede4fdfa, 0x70a0a0c, 0x14ff0d1a, 0x1bf30df9, 0x9f2f1e4, 0xf005eb00, 0xec08fef3,
    // -27, -32, -16, -27, -22, 27, -17, -13, 14, -17, 17, -18, 32, 11, -7, -15, -7, -19, 18, -43, -28, -9, -2, 27, -15, 7, -17, -20, 3, 3, 1, -23
    0xe5f0e0e5, 0xf3ef1bea, 0xee11ef0e, 0xf1f90b20, 0xd512edf9, 0x1bfef7e4, 0xecef07f1, 0xe9010303,
    // -16, 10, 1, -14, 9, -8, 23, -7, 5, 12, -2, 9, 6, -15, 7, -4, 11, 14, 27, -2, -28, -6, 18, 18, -12, 2, 6, -28, -1, 7, -5, 33
    0xf2010af0, 0xf917f809, 0x9fe0c05, 0xfc07f106, 0xfe1b0e0b, 0x1212fae4, 0xe40602f4, 0x21fb07ff,
    // 9, 3, 2, 15, -10, 0, 0, 9, 5, 0, 0, 12, 10, 10, 1, 2, -12, -3, -13, 10, -12, -16, -7, 3, 1, 2, -5, 6, -5, -1, -4, -11
    0xf020309, 0x90000f6, 0xc000005, 0x2010a0a, 0xaf3fdf4, 0x3f9f0f4, 0x6fb0201, 0xf5fcfffb,
    // -10, 7, 28, -1, -7, -10, 5, 21, -15, -27, 0, 34, 9, -1, -8, -28, 0, 6, 7, -7, 3, 5, 23, 10, -2, -3, -5, 10, -7, 10, 0, -2
    0xff1c07f6, 0x1505f6f9, 0x2200e5f1, 0xe4f8ff09, 0xf9070600, 0xa170503, 0xafbfdfe, 0xfe000af9,
    // 18, 27, -13, 18, -28, -2, 17, -22, -8, -17, 9, 18, -22, -15, -17, 10, 0, 15, -23, -30, -30, -7, -40, -26, 14, 35, -4, 4, -19, 6, 40, 57
    0x12f31b12, 0xea11fee4, 0x1209eff8, 0xaeff1ea, 0xe2e90f00, 0xe6d8f9e2, 0x4fc230e, 0x392806ed,
    // 15, -1, 18, 11, -4, -2, 14, 7, 4, 6, -4, -10, 25, 18, 1, 43, -7, 11, 9, 14, -2, -9, 3, 8, -5, 5, 11, 8, 11, 13, -13, -5
    0xb12ff0f, 0x70efefc, 0xf6fc0604, 0x2b011219, 0xe090bf9, 0x803f7fe, 0x80b05fb, 0xfbf30d0b,
    // 10, -3, 28, -5, -18, 17, -1, -7, 8, 4, -9, -7, -11, -3, 11, 3, 14, -9, -5, 6, 29, -2, 7, -3, -13, -4, 7, 19, -18, 15, -1, -16
    0xfb1cfd0a, 0xf9ff11ee, 0xf9f70408, 0x30bfdf5, 0x6fbf70e, 0xfd07fe1d, 0x1307fcf3, 0xf0ff0fee,
    // 17, 0, -11, 6, 4, -6, -4, -9, -1, 5, -7, -2, -1, -11, 7, 2, -12, -19, 24, 23, 0, 17, 19, -17, 7, 2, -7, -5, 0, 23, 16, 29
    0x6f50011, 0xf7fcfa04, 0xfef905ff, 0x207f5ff, 0x1718edf4, 0xef131100, 0xfbf90207, 0x1d101700,
    // 11, 3, 0, 1, -1, 3, -6, 4, 5, -1, -2, 7, 1, 9, -2, 4, 2, 8, 16, 18, -23, 3, -4, 6, -5, -17, 26, 1, 1, 16, -5, 0
    0x100030b, 0x4fa03ff, 0x7feff05, 0x4fe0901, 0x12100802, 0x6fc03e9, 0x11aeffb, 0xfb1001,
    // 35, -63, 21, 44, 27, -13, 19, 41, -16, 3, -51, -3, -22, 18, -9, -42, 4, -12, 20, 8, -1, 14, -6, 0, 1, -9, -17, 4, -2, 10, -5, 3
    0x2c15c123, 0x2913f31b, 0xfdcd03f0, 0xd6f712ea, 0x814f404, 0xfa0eff, 0x4eff701, 0x3fb0afe,
    // 4, 12, 6, 2, 2, -1, 9, 11, 2, -4, 4, -2, 0, 4, 3, 1, 6, -4, 34, -3, -20, 23, 5, -9, 4, 16, 8, 33, 4, 28, 0, -20
    0x2060c04, 0xb09ff02, 0xfe04fc02, 0x1030400, 0xfd22fc06, 0xf70517ec, 0x21081004, 0xec001c04,
    // 1, -6, -5, 2, 3, -3, 12, 14, -1, 1, 9, 7, 9, 3, 8, 9, -2, 1, -1, 1, 4, 0, 13, 5, -5, 4, -2, 5, -13, -11, 5, -1
    0x2fbfa01, 0xe0cfd03, 0x70901ff, 0x9080309, 0x1ff01fe, 0x50d0004, 0x5fe04fb, 0xff05f5f3,
    // -15, -8, 25, -5, -3, 3, 5, 19, -18, -36, -49, 30, -15, 27, 4, -16, -2, -6, -4, 1, 1, -5, -6, 12, -6, -3, 2, -2, -7, -6, 14, -4
    0xfb19f8f1, 0x130503fd, 0x1ecfdcee, 0xf0041bf1, 0x1fcfafe, 0xcfafb01, 0xfe02fdfa, 0xfc0efaf9,
    // -5, 9, 1, -4, 13, -7, -7, 3, 2, 13, -6, -10, 19, 24, -4, -10, 10, -25, 105, -4, 21, 13, -35, 21, 5, -4, -23, 15, 52, -17, -31, 0
    0xfc0109fb, 0x3f9f90d, 0xf6fa0d02, 0xf6fc1813, 0xfc69e70a, 0x15dd0d15, 0xfe9fc05, 0xe1ef34,
    // 19, -17, 8, -17, -10, -15, -5, 28, 3, 2, -4, 20, -16, -29, 4, -6, -4, -4, -2, -8, -4, -3, 9, -3, 1, 5, 2, -2, 5, 1, 1, 0
    0xef08ef13, 0x1cfbf1f6, 0x14fc0203, 0xfa04e3f0, 0xf8fefcfc, 0xfd09fdfc, 0xfe020501, 0x10105,
    // 6, 8, 28, 2, -6, -7, 2, 10, -2, 4, 22, 4, -11, 10, -1, 13, -2, -4, -4, 4, -11, -3, 2, 10, 5, 1, -6, 1, 15, 0, 1, 12
    0x21c0806, 0xa02f9fa, 0x41604fe, 0xdff0af5, 0x4fcfcfe, 0xa02fdf5, 0x1fa0105, 0xc01000f,
    // -5, -14, -9, 8, -4, -5, 10, -7, -1, 2, -8, 1, 4, -4, 9, -3, -5, -20, 7, -14, 9, 10, -43, 7, 4, 12, 27, -4, 18, 27, -12, 13
    0x8f7f2fb, 0xf90afbfc, 0x1f802ff, 0xfd09fc04, 0xf207ecfb, 0x7d50a09, 0xfc1b0c04, 0xdf41b12,
    // -6, 15, -9, 7, 3, -4, 10, -16, 1, 7, 6, 6, 4, 5, 1, -5, 23, 25, 17, -8, 5, 14, -14, 3, 17, 13, 37, -2, -16, -1, -15, -4
    0x7f70ffa, 0xf00afc03, 0x6060701, 0xfb010504, 0xf8111917, 0x3f20e05, 0xfe250d11, 0xfcf1fff0,
    // -20, -56, 42, 34, -16, 7, -7, 48, -9, -3, 8, -48, 44, -51, -3, -21, -14, 3, 9, -34, 17, -18, 6, 2, -13, -19, -1, -1, -7, -17, -6, -19
    0x222ac8ec, 0x30f907f0, 0xd008fdf7, 0xebfdcd2c, 0xde0903f2, 0x206ee11, 0xffffedf3, 0xedfaeff9,
    // 0, -2, 4, 6, 2, -2, -14, -6, -3, 1, -3, -3, -6, -8, -2, 2, 20, -17, 9, 5, -8, -14, -22, -1, -6, -12, -8, 3, -19, 10, 0, 2
    0x604fe00, 0xfaf2fe02, 0xfdfd01fd, 0x2fef8fa, 0x509ef14, 0xffeaf2f8, 0x3f8f4fa, 0x2000aed,
    // 9, 6, 8, -3, 21, -17, 9, -1, -8, -5, 8, -6, -12, 12, 1, -7, -18, 7, 5, -10, -15, -10, -2, 7, -6, 1, 16, 19, 12, -13, -2, -6
    0xfd080609, 0xff09ef15, 0xfa08fbf8, 0xf9010cf4, 0xf60507ee, 0x7fef6f1, 0x131001fa, 0xfafef30c,
    // -5, 3, -16, 16, -2, -13, 14, 12, -3, -1, -19, 30, -34, -21, 11, -9, -19, 7, 3, 0, 6, 1, 24, 0, 4, -3, 3, 8, -16, -3, 4, -10
    0x10f003fb, 0xc0ef3fe, 0x1eedfffd, 0xf70bebde, 0x307ed, 0x180106, 0x803fd04, 0xf604fdf0,
    // 10, 11, 2, -3, -14, 14, 10, 5, 9, -7, -15, 7, 16, 15, 1, -21, -24, -11, -10, 22, 29, -13, 6, 14, 14, 8, -5, -1, 32, -5, -22, -79
    0xfd020b0a, 0x50a0ef2, 0x7f1f909, 0xeb010f10, 0x16f6f5e8, 0xe06f31d, 0xfffb080e, 0xb1eafb20,
    // 6, 11, 15, -4, 20, -5, -7, -32, 5, 1, -32, 26, -12, 4, -2, -14, -13, -16, -14, -5, -4, 2, -13, -5, 7, 3, -8, 3, -2, -33, 0, 2
    0xfc0f0b06, 0xe0f9fb14, 0x1ae00105, 0xf2fe04f4, 0xfbf2f0f3, 0xfbf302fc, 0x3f80307, 0x200dffe,
    // -6, -23, 5, -8, -21, -3, -37, -3, -5, -2, -23, 1, -1, -30, 16, 6, 26, -5, -11, 2, 30, -2, 14, -8, -14, -20, 3, -13, -27, 7, -3, 2
    0xf805e9fa, 0xfddbfdeb, 0x1e9fefb, 0x610e2ff, 0x2f5fb1a, 0xf80efe1e, 0xf303ecf2, 0x2fd07e5,
    // -7, 17, -9, 1, -10, 2, 3, 9, 1, -2, 17, 10, 15, -8, -7, -7, -14, 17, -15, 18, 17, 7, -8, -17, 3, 3, -5, 2, -10, -16, -2, -3
    0x1f711f9, 0x90302f6, 0xa11fe01, 0xf9f9f80f, 0x12f111f2, 0xeff80711, 0x2fb0303, 0xfdfef0f6,
    // -14, -1, 24, -9, -7, -6, 4, 19, -5, -5, 0, 1, -2, 3, 5, -5, -29, 5, 7, 31, 18, -14, -10, 10, -13, -4, 24, -12, 3, -10, 5, 11
    0xf718fff2, 0x1304faf9, 0x100fbfb, 0xfb0503fe, 0x1f0705e3, 0xaf6f212, 0xf418fcf3, 0xb05f603,
    // 21, -62, 0, 29, 21, -4, -14, -35, -13, -1, 5, -9, 14, -128, 22, -24, 23, -10, 0, -15, -43, -5, -20, 15, 5, 13, -30, -6, -5, -4, -1, -5
    0x1d00c215, 0xddf2fc15, 0xf705fff3, 0xe816800e, 0xf100f617, 0xfecfbd5, 0xfae20d05, 0xfbfffcfb,
    // 12, 4, -2, 1, -9, 3, -6, 0, -2, -3, -5, -3, -1, 6, -13, -10, -24, -3, -2, -14, 10, 10, 6, 2, 11, 11, -11, -7, -3, -10, 19, -3
    0x1fe040c, 0xfa03f7, 0xfdfbfdfe, 0xf6f306ff, 0xf2fefde8, 0x2060a0a, 0xf9f50b0b, 0xfd13f6fd,
    // 3, 10, 6, -5, 12, 11, 8, -14, 3, -1, -1, -9, 1, 3, -7, 6, 17, -13, 14, -33, 14, 8, 0, 0, 8, 10, 22, -15, 7, 0, -2, 18
    0xfb060a03, 0xf2080b0c, 0xf7ffff03, 0x6f90301, 0xdf0ef311, 0x80e, 0xf1160a08, 0x12fe0007,
    // 12, 11, 10, -5, -20, -17, 19, 5, -12, -1, -3, -3, 6, 5, -12, -21, 9, 4, 4, 13, 11, 5, -9, -6, 5, -3, -11, -12, -9, 14, -13, 5
    0xfb0a0b0c, 0x513efec, 0xfdfdfff4, 0xebf40506, 0xd040409, 0xfaf7050b, 0xf4f5fd05, 0x5f30ef7,
    // -42, -22, -3, 8, 14, -4, -6, 5, -2, -6, -46, -2, -8, -2, 7, 0, -49, -33, -10, -12, -26, 3, -17, -2, 10, 19, 4, 1, -27, -1, 41, 54
    0x8fdead6, 0x5fafc0e, 0xfed2fafe, 0x7fef8, 0xf4f6dfcf, 0xfeef03e6, 0x104130a, 0x3629ffe5,
    // -7, 18, -9, -10, -16, 0, -9, -22, -14, 11, 9, 10, -13, -9, -2, -53, -1, -12, 4, 2, -1, 3, -14, 1, 0, 5, -7, -6, -9, 2, -2, -8
    0xf6f712f9, 0xeaf700f0, 0xa090bf2, 0xcbfef7f3, 0x204f4ff, 0x1f203ff, 0xfaf90500, 0xf8fe02f7,
    // 29, -46, -14, 4, 22, -1, -15, 8, -20, -19, 18, 22, -1, -7, -9, -28, -5, 1, -10, -1, 12, 4, 3, -6, -2, -5, 5, 0, -5, 4, 3, 4
    0x4f2d21d, 0x8f1ff16, 0x1612edec, 0xe4f7f9ff, 0xfff601fb, 0xfa03040c, 0x5fbfe, 0x40304fb,
    // 14, 15, -1, 0, 7, -7, -15, -1, 4, -3, -6, 10, 2, -2, -11, 6, 3, -20, 1, 49, -4, 11, 6, -12, 3, 15, -25, -15, -18, -8, 26, 18
    0xff0f0e, 0xfff1f907, 0xafafd04, 0x6f5fe02, 0x3101ec03, 0xf4060bfc, 0xf1e70f03, 0x121af8ee,
    // -2, 0, 1, -19, -1, -10, 14, 12, -1, 0, -4, 8, -20, -23, 5, -9, 7, -20, 18, 10, 7, 12, 9, 9, -10, 12, -43, 9, -34, 7, 15, 4
    0xed0100fe, 0xc0ef6ff, 0x8fc00ff, 0xf705e9ec, 0xa12ec07, 0x9090c07, 0x9d50cf6, 0x40f07de,
    // -11, 7, -6, -38, -69, 12, -29, -11, -10, -12, -5, 23, -6, -31, 20, 52, 8, 0, -1, 12, 21, -17, 9, 12, -5, -10, -2, 26, -10, 12, 12, 0
    0xdafa07f5, 0xf5e30cbb, 0x17fbf4f6, 0x3414e1fa, 0xcff0008, 0xc09ef15, 0x1afef6fb, 0xc0cf6,
    // 6, 9, 1, 8, -9, -5, -6, 1, 6, -7, 0, 7, -4, 0, 0, 2, -11, -24, -10, 13, 23, -23, -10, 12, 1, 9, -16, 10, 15, -9, -4, -6
    0x8010906, 0x1fafbf7, 0x700f906, 0x20000fc, 0xdf6e8f5, 0xcf6e917, 0xaf00901, 0xfafcf70f,
    // 13, -11, -3, -4, 12, -14, 13, 5, -1, -4, -2, 5, -12, -6, 0, 15, -21, 11, 7, 6, -9, -5, -8, 6, 5, 0, 23, 12, 20, -2, -1, -13
    0xfcfdf50d, 0x50df20c, 0x5fefcff, 0xf00faf4, 0x6070beb, 0x6f8fbf7, 0xc170005, 0xf3fffe14,
    // -13, 22, -23, 13, -15, -10, 27, -7, 10, 2, 4, 6, -26, -11, 26, -18, -7, 0, 18, -14, 7, -1, 17, 7, -7, -9, -4, -3, -13, -10, 4, -4
    0xde916f3, 0xf91bf6f1, 0x604020a, 0xee1af5e6, 0xf21200f9, 0x711ff07, 0xfdfcf7f9, 0xfc04f6f3,
    // 11, 24, -14, 29, -5, -8, -21, 14, 5, -19, 32, -2, -2, 1, 4, -2, 54, 8, 2, 0, 3, -1, 35, -6, 24, 25, -23, -15, 46, 30, -27, 8
    0x1df2180b, 0xeebf8fb, 0xfe20ed05, 0xfe0401fe, 0x20836, 0xfa23ff03, 0xf1e91918, 0x8e51e2e,
    // 4, -7, -10, 2, 11, 0, 26, -1, -10, 4, 22, -4, -23, -1, -9, 4, 10, 1, -2, 14, -1, -1, -24, -7, -9, -9, -18, -7, -19, 1, -4, -2
    0x2f6f904, 0xff1a000b, 0xfc1604f6, 0x4f7ffe9, 0xefe010a, 0xf9e8ffff, 0xf9eef7f7, 0xfefc01ed,
    // 26, -5, 12, 22, 17, 7, -9, -4, -23, -22, 36, 18, -19, 36, -16, 1, 0, 8, 1, -4, -12, -6, -6, -8, -1, 4, -4, -2, 4, 10, 5, 0
    0x160cfb1a, 0xfcf70711, 0x1224eae9, 0x1f024ed, 0xfc010800, 0xf8fafaf4, 0xfefc04ff, 0x50a04,
};
static const uint embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // -9.83e-05, 6.4e-05, -0.0006194, 0.0001849, -0.0003185, -0.000687, -0.000675, 6.77e-05, 0.000626, 0.000469, -3.004e-05, 0.0001027, -0.000296, -0.0002077, 0.0002121, 0.0001364
    0x4328671, 0xa0f9113, 0x91a18d38, 0x4709188, 0xfaf1121, 0x6bb81f8, 0x8ace8cda, 0x8780af3,
};
static const uint embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 16, 6, 16, -45, 14, 8, -38, -16, 32, -35, -46, 44, -7, -21, -31, -9, 32, -24, -52, -32, 17, 42, 73, -29, -37, 71, -43, 2, 26, -55, -19, -18
    0xd3100610, 0xf0da080e, 0x2cd2dd20, 0xf7e1ebf9, 0xe0cce820, 0xe3492a11, 0x2d547db, 0xeeedc91a,
    // 11, 2, 11, -10, 35, -11, 6, -57, -50, -25, -28, 6, 15, -31, -14, -10, -94, -111, -31, -9, 4, 28, 38, 4, -2, 22, -40, 43, -9, -40, 52, -78
    0xf60b020b, 0xc706f523, 0x6e4e7ce, 0xf6f2e10f, 0xf7e191a2, 0x4261c04, 0x2bd816fe, 0xb234d8f7,
    // -66, -65, 77, 70, 35, 78, 4, -72, 52, 68, 88, 65, 83, -85, -64, 41, -7, -110, 90, -17, 35, 7, -33, 37, 2, 34, -127, 25, -15, -16, 23, 91
    0x464dbfbe, 0xb8044e23, 0x41584434, 0x29c0ab53, 0xef5a92f9, 0x25df0723, 0x19812202, 0x5b17f0f1,
    // 48, 75, 44, 16, -8, 49, 10, 4, 20, 28, 84, 51, -58, 23, 43, 30, -28, 13, -21, -34, -11, 90, -24, 14, -18, 14, -20, -59, 29, 17, -17, -85
    0x102c4b30, 0x40a31f8, 0x33541c14, 0x1e2b17c6, 0xdeeb0de4, 0xee85af5, 0xc5ec0eee, 0xabef111d,
    // 73, -39, -59, 32, -46, -42, -43, -82, 25, 43, 34, 75, -80, -21, -10, -5, 23, 21, -52, -30, 16, -30, -73, 30, 5, -4, -30, 58, -4, 11, 22, -16
    0x20c5d949, 0xaed5d6d2, 0x4b222b19, 0xfbf6ebb0, 0xe2cc1517, 0x1eb7e210, 0x3ae2fc05, 0xf0160bfc,
    // -38, -16, 11, -76, 21, 2, 63, -9, -20, 33, 13, 43, 24, 58, -15, 14, -20, 42, -57, 80, 12, 16, 25, 13, 12, 8, -107, -7, -2, 4, -21, 12
    0xb40bf0da, 0xf73f0215, 0x2b0d21ec, 0xef13a18, 0x50c72aec, 0xd19100c, 0xf995080c, 0xceb04fe,
    // -6, -4, -4, 0, -19, 43, 15, 4, -25, -1, -31, 4, -9, -4, 16, 38, -8, -8, -31, 35, 25, -57, -77, 14, 22, -96, -12, 30, -20, 56, 20, 37
    0xfcfcfa, 0x40f2bed, 0x4e1ffe7, 0x2610fcf7, 0x23e1f8f8, 0xeb3c719, 0x1ef4a016, 0x251438ec,
    // -39, -28, 47, 25, 23, -41, -40, -71, -21, 27, -55, -13, -27, 54, 49, 25, -2, -3, 74, -17, -21, 14, 3, 2, -15, -10, 5, -33, 0, -11, -7, 16
    0x192fe4d9, 0xb9d8d717, 0xf3c91beb, 0x193136e5, 0xef4afdfe, 0x2030eeb, 0xdf05f6f1, 0x10f9f500,
    // 44, -7, 15, 59, 12, -26, 47, 35, -23, -2, -25, 57, 28, -5, 23, -38, -30, 38, 67, -30, -19, 20, -7, 1, -19, -69, -82, 19, -27, -16, -16, 33
    0x3b0ff92c, 0x232fe60c, 0x39e7fee9, 0xda17fb1c, 0xe24326e2, 0x1f914ed, 0x13aebbed, 0x21f0f0e5,
    // -14, 9, -48, -47, 21, 21, -53, -75, -11, 23, 37, -32, -29, 2, 24, 43, -8, -26, 42, 54, 35, -25, -5, 13, -17, 13, 47, -36, 4, -23, 17, -21
    0xd1d009f2, 0xb5cb1515, 0xe02517f5, 0x2b1802e3, 0x362ae6f8, 0xdfbe723, 0xdc2f0def, 0xeb11e904,
    // 11, 3, 44, 3, -10, -55, 13, -28, 19, 32, -54, -7, 11, -55, -33, -29, 24, 84, 16, 7, -64, -9, 15, -2, 55, -89, -13, -18, -42, -42, 8, -34
    0x32c030b, 0xe40dc9f6, 0xf9ca2013, 0xe3dfc90b, 0x7105418, 0xfe0ff7c0, 0xeef3a737, 0xde08d6d6,
    // -3, -1, -10, 7, -5, 5, 9, 15, -13, 10, 5, -5, -1, -6, 5, -1, -26, -17, 2, -13, 72, -14, -13, -5, -66, -24, -15, -17, -31, -27, -48, -28
    0x7f6fffd, 0xf0905fb, 0xfb050af3, 0xff05faff, 0xf302efe6, 0xfbf3f248, 0xeff1e8be, 0xe4d0e5e1,
    // -15, 4, -20, 2, -13, 6, 7, 9, 4, 9, 11, -16, -1, 11, 17, 12, -6, 20, 17, -25, -17, 6, -43, -76, 50, 6, -39, -67, -91, -48, 25, -5
    0x2ec04f1, 0x90706f3, 0xf00b0904, 0xc110bff, 0xe71114fa, 0xb4d506ef, 0xbdd90632, 0xfb19d0a5,
    // 52, -16, -34, -5, 70, 63, -66, 26, 40, 10, 2, 14, -1, -4, 41, 17, -86, -15, -67, -48, 13, -31, -26, -32, 11, -62, -5, 85, -8, 30, 23, -20
    0xfbdef034, 0x1abe3f46, 0xe020a28, 0x1129fcff, 0xd0bdf1aa, 0xe0e6e10d, 0x55fbc20b, 0xec171ef8,
    // -4, -52, 40, 4, -50, -27, -37, 69, -32, -9, 18, 23, 20, -5, -38, 34, -29, 9, -20, -28, -17, 47, -35, -34, 7, -28, -25, 16, -4, 19, 27, -20
    0x428ccfc, 0x45dbe5ce, 0x1712f7e0, 0x22dafb14, 0xe4ec09e3, 0xdedd2fef, 0x10e7e407, 0xec1b13fc,
    // -1, -28, -13, 9, -2, -10, 33, -17, -39, -46, 8, 12, 30, -14, 27, -14, 7, 59, 39, 49, -7, -34, -66, 8, 18, 23, 45, -66, -7, -1, 0, 62
    0x9f3e4ff, 0xef21f6fe, 0xc08d2d9, 0xf21bf21e, 0x31273b07, 0x8bedef9, 0xbe2d1712, 0x3e00fff9,
    // -71, -60, -104, 22, 3, -37, 2, 58, 40, 17, -52, -35, 16, -9, -43, 13, -41, -10, 12, -111, -29, 39, -24, -32, -27, 70, -61, -36, -8, 2, -14, -53
    0x1698c4b9, 0x3a02db03, 0xddcc1128, 0xdd5f710, 0x910cf6d7, 0xe0e827e3, 0xdcc346e5, 0xcbf202f8,
    // 5, 15, 8, -37, -13, 36, -30, -22, 9, -50, -37, 31, -51, 0, -45, 0, 33, 11, 25, 6, -7, 24, -46, -8, -4, 53, -77, -11, -15, -20, 8, 2
    0xdb080f05, 0xeae224f3, 0x1fdbce09, 0xd300cd, 0x6190b21, 0xf8d218f9, 0xf5b335fc, 0x208ecf1,
    // -22, 37, -27, -3, -3, 22, 9, 11, 3, 18, 12, 3, 8, -9, 43, 15, 8, 48, -25, -93, -35, -18, 14, 31, 59, -34, -19, -76, -19, -53, 56, 22
    0xfde525ea, 0xb0916fd, 0x30c1203, 0xf2bf708, 0xa3e73008, 0x1f0eeedd, 0xb4edde3b, 0x1638cbed,
    // 6, -4, -16, -44, 49, 8, -52, 6, 8, -7, -17, 22, 6, -29, 40, -58, 39, 8, 64, 23, 10, -29, 1, 4, 1, 8, -44, -50, -11, -10, -12, 82
    0xd4f0fc06, 0x6cc0831, 0x16eff908, 0xc628e306, 0x17400827, 0x401e30a, 0xced40801, 0x52f4f6f5,
    // -9, 1, -23, 9, 12, 22, 9, -32, 3, -13, -33, -17, 16, -6, -4, -19, 10, 74, 33, -94, -16, 34, -61, 14, -66, 31, -45, 58, -34, -46, -20, -18
    0x9e901f7, 0xe009160c, 0xefdff303, 0xedfcfa10, 0xa2214a0a, 0xec322f0, 0x3ad31fbe, 0xeeecd2de,
    // -43, 18, 62, 37, 43, 73, -59, 60, -11, -59, -23, -26, 76, 73, 6, -28, -4, 34, -9, 71, 16, 2, -40, -10, -28, 73, -7, -28, -19, 13, 28, -47
    0x253e12d5, 0x3cc5492b, 0xe6e9c5f5, 0xe406494c, 0x47f722fc, 0xf6d80210, 0xe4f949e4, 0xd11c0ded,
    // 66, 68, -58, -80, -33, -67, -11, 63, -67, -65, -75, -72, -69, 73, 60, -32, -68, 66, -27, 70, -20, 26, 8, -21, -41, -23, 73, 19, -16, -45, 34, -119
    0xb0c64442, 0x3ff5bddf, 0xb8b5bfbd, 0xe03c49bb, 0x46e542bc, 0xeb081aec, 0x1349e9d7, 0x8922d3f0,
    // -2, -14, -7, 27, 12, -25, -9, -13, 0, 28, 25, -21, 28, 4, -21, -1, -34, 3, -37, 89, 32, -20, 89, -21, 49, -112, 97, -88, 27, -19, -4, 22
    0x1bf9f2fe, 0xf3f7e70c, 0xeb191c00, 0xffeb041c, 0x59db03de, 0xeb59ec20, 0xa8619031, 0x16fced1b,
    // 7, -33, -21, 30, 1, -41, 14, 15, -32, 22, 52, -6, 29, 40, 26, -15, 4, 20, -36, -97, 27, -22, -59, 19, -11, 39, 6, 61, -10, 48, 51, -39
    0x1eebdf07, 0xf0ed701, 0xfa3416e0, 0xf11a281d, 0x9fdc1404, 0x13c5ea1b, 0x3d0627f5, 0xd93330f6,
    // 6, -4, 16, -13, 5, -19, -12, -25, 0, -8, -17, 2, 3, -9, -17, -5, -43, -5, -8, -34, -14, -13, -28, -35, 61, 3, -42, 1, 16, -3, -8, -86
    0xf310fc06, 0xe7f4ed05, 0x2eff800, 0xfbeff703, 0xdef8fbd5, 0xdde4f3f2, 0x1d6033d, 0xaaf8fd10,
    // 0, 8, -21, 20, 21, -37, 2, -3, 33, -10, 18, 6, 11, 12, -11, -27, 53, -47, 61, -16, -3, 18, 43, 13, -21, 40, 34, -72, 20, -50, 22, -109
    0x14eb0800, 0xfd02db15, 0x612f621, 0xe5f50c0b, 0xf03dd135, 0xd2b12fd, 0xb82228eb, 0x9316ce14,
    // 39, -4, -22, 26, -35, -8, 20, -2, -6, 17, -18, -19, 6, -11, 24, 24, 40, 1, -56, 60, 26, -1, -19, 37, 1, 16, -128, -11, -8, 15, 6, -30
    0x1aeafc27, 0xfe14f8dd, 0xedee11fa, 0x1818f506, 0x3cc80128, 0x25edff1a, 0xf5801001, 0xe2060ff8,
    // -23, 35, -1, 47, -32, -3, 24, 28, 7, -18, 35, 18, 35, 29, -44, -57, -66, 29, -38, -14, -9, -12, -5, -32, -12, -38, 43, 35, 1, 30, 4, -14
    0x2fff23e9, 0x1c18fde0, 0x1223ee07, 0xc7d41d23, 0xf2da1dbe, 0xe0fbf4f7, 0x232bdaf4, 0xf2041e01,
    // 28, 27, -5, 56, -72, 35, -65, -12, -2, 10, -16, -39, 55, -6, 34, -33, 38, -36, -9, -5, 27, -20, -48, 24, -18, 50, -73, 9, -16, 13, 39, -44
    0x38fb1b1c, 0xf4bf23b8, 0xd9f00afe, 0xdf22fa37, 0xfbf7dc26, 0x18d0ec1b, 0x9b732ee, 0xd4270df0,
    // 67, -72, 21, 26, 36, -33, 31, 7, 36, -27, -19, 19, 3, 7, 15, 76, 6, 21, -23, -5, -5, 7, -58, 2, -18, 28, 32, -19, 0, 4, 21, -24
    0x1a15b843, 0x71fdf24, 0x13ede524, 0x4c0f0703, 0xfbe91506, 0x2c607fb, 0xed201cee, 0xe8150400,
    // 5, -8, 10, -6, -12, -8, -4, 9, 13, 23, -4, 7, -18, -14, 4, 1, -52, 95, 55, -4, 56, -29, -4, -6, -8, 39, -33, -40, -33, -2, 75, -12
    0xfa0af805, 0x9fcf8f4, 0x7fc170d, 0x104f2ee, 0xfc375fcc, 0xfafce338, 0xd8df27f8, 0xf44bfedf,
    // -3, -4, -16, 5, 9, -4, -10, -10, -2, -3, -11, -17, 19, -11, -5, -18, -28, 6, 5, -10, 3, 83, -15, 76, -35, -24, 0, -18, 3, 94, 15, -14
    0x5f0fcfd, 0xf6f6fc09, 0xeff5fdfe, 0xeefbf513, 0xf60506e4, 0x4cf15303, 0xee00e8dd, 0xf20f5e03,
    // -24, 29, 6, 11, -45, -58, -60, 55, 1, -17, 28, 69, 27, -3, -4, 67, -12, 43, -10, -35, 5, -8, -24, 23, -4, -4, -1, -12, 17, 0, 1, 28
    0xb061de8, 0x37c4c6d3, 0x451cef01, 0x43fcfd1b, 0xddf62bf4, 0x17e8f805, 0xf4fffcfc, 0x1c010011,
    // 65, 41, 81, 0, 37, 3, 25, -27, -36, 18, 39, 31, -17, -19, 7, -19, 7, 44, -8, 35, 2, 27, 5, 29, -11, -76, 36, -22, 3, 3, 16, -88
    0x512941, 0xe5190325, 0x1f2712dc, 0xed07edef, 0x23f82c07, 0x1d051b02, 0xea24b4f5, 0xa8100303,
    // 1, -12, -51, 47, 17, 27, 48, -22, -18, -65, -17, 27, 41, 1, 39, 7, 4, 73, 57, 22, -15, 1, 30, 1, 1, -35, -23, 10, -4, -16, -14, -12
    0x2fcdf401, 0xea301b11, 0x1befbfee, 0x7270129, 0x16394904, 0x11e01f1, 0xae9dd01, 0xf4f2f0fc,
    // -2, 24, 5, 15, -3, 22, 5, -24, 23, -14, 36, 15, -18, 13, 26, 17, -38, 51, 35, 46, -10, 14, -42, 46, -56, -42, -41, -38, -23, -36, 56, -16
    0xf0518fe, 0xe80516fd, 0xf24f217, 0x111a0dee, 0x2e2333da, 0x2ed60ef6, 0xdad7d6c8, 0xf038dce9,
    // -41, 23, 23, -19, -5, -20, -5, -5, 46, 34, -56, 3, -3, -38, 33, -29, -60, -88, -59, 28, 11, -26, -27, -13, 10, -22, 5, 1, -11, 16, 25, -31
    0xed1717d7, 0xfbfbecfb, 0x3c8222e, 0xe321dafd, 0x1cc5a8c4, 0xf3e5e60b, 0x105ea0a, 0xe11910f5,
    // 3, -2, 24, -11, -11, 8, 2, 1, -28, 16, -3, 0, -5, -8, 8, 3, -75, 90, -53, 9, -38, 44, 2, -25, -9, 25, -92, 51, -21, 6, -55, 82
    0xf518fe03, 0x10208f5, 0xfd10e4, 0x308f8fb, 0x9cb5ab5, 0xe7022cda, 0x33a419f7, 0x52c906eb,
    // 23, -25, 17, 41, -12, 4, -12, 26, -39, -3, -19, 4, 20, 27, -6, -28, -14, -61, 32, -66, -3, 13, 42, 14, 31, -83, 0, -34, 24, -37, 12, 30
    0x2911e717, 0x1af404f4, 0x4edfdd9, 0xe4fa1b14, 0xbe20c3f2, 0xe2a0dfd, 0xde00ad1f, 0x1e0cdb18,
    // 33, -1, 26, 10, -2, -32, 1, 33, -7, 51, -20, 21, -12, 3, -17, 3, -28, -46, -44, 23, 1, 13, -81, 5, -17, 34, 28, -64, 5, -11, 15, 25
    0xa1aff21, 0x2101e0fe, 0x15ec33f9, 0x3ef03f4, 0x17d4d2e4, 0x5af0d01, 0xc01c22ef, 0x190ff505,
    // -51, -21, -3, -27, -9, -16, 5, -60, -10, -72, 78, -76, 21, 2, -8, -19, -38, 33, -21, -3, -4, -16, 14, -13, 12, -44, 0, -26, 4, 3, 5, -21
    0xe5fdebcd, 0xc405f0f7, 0xb44eb8f6, 0xedf80215, 0xfdeb21da, 0xf30ef0fc, 0xe600d40c, 0xeb050304,
    // 14, -4, 50, -2, -2, -48, 3, -30, 0, -36, -46, 0, -25, -22, -18, -29, 19, -48, 6, -74, 53, -77, 6, 5, 27, -38, -29, -77, 12, -25, 18, 16
    0xfe32fc0e, 0xe203d0fe, 0xd2dc00, 0xe3eeeae7, 0xb606d013, 0x506b335, 0xb3e3da1b, 0x1012e70c,
    // -44, -14, 5, 14, -36, 5, 6, -11, -33, 6, -17, 74, -22, 63, -20, -60, 12, -16, 3, -4, 5, -14, -69, 14, -9, 18, 21, -30, 1, -3, 40, -39
    0xe05f2d4, 0xf50605dc, 0x4aef06df, 0xc4ec3fea, 0xfc03f00c, 0xebbf205, 0xe21512f7, 0xd928fd01,
    // 30, 23, -28, -17, 6, 11, -3, 23, 62, 28, -17, 8, 23, 34, -41, 47, -4, -25, 7, 13, -5, 36, 39, -5, -8, -13, -9, 45, 25, -39, 16, -7
    0xefe4171e, 0x17fd0b06, 0x8ef1c3e, 0x2fd72217, 0xd07e7fc, 0xfb2724fb, 0x2df7f3f8, 0xf910d919,
    // 25, 0, 15, -13, 18, 0, 0, -15, 12, -17, -1, 10, -14, -10, -12, -6, 5, 48, 2, 8, -94, 73, -35, 37, 62, -33, -20, -54, -47, 72, 12, -56
    0xf30f0019, 0xf1000012, 0xaffef0c, 0xfaf4f6f2, 0x8023005, 0x25dd49a2, 0xcaecdf3e, 0xc80c48d1,
    // -31, -2, 22, 28, -38, 14, 45, 20, 0, 18, 35, 1, -16, 2, 26, 32, 57, 69, -17, 14, -73, -39, -2, -70, 86, 6, 23, 23, 73, -74, 65, 27
    0x1c16fee1, 0x142d0eda, 0x1231200, 0x201a02f0, 0xeef4539, 0xbafed9b7, 0x17170656, 0x1b41b649,
    // -9, -33, 4, 14, 47, -67, 22, 42, 27, 58, 49, -5, 64, 11, 72, 1, -61, 34, -10, 16, 10, 8, 26, -12, 9, -25, -17, -27, -6, 40, 31, -33
    0xe04dff7, 0x2a16bd2f, 0xfb313a1b, 0x1480b40, 0x10f622c3, 0xf41a080a, 0xe5efe709, 0xdf1f28fa,
    // 29, 18, -37, -40, -5, -32, -9, 24, -7, -19, -20, -25, -27, 27, 30, -15, -27, 25, 5, 63, -29, 7, 21, 21, -87, -39, 24, 32, -11, -12, 28, -18
    0xd8db121d, 0x18f7e0fb, 0xe7ecedf9, 0xf11e1be5, 0x3f0519e5, 0x151507e3, 0x2018d9a9, 0xee1cf4f5,
    // -18, 69, 56, -5, -6, -12, 60, 37, 36, -27, -10, -37, 6, -2, -7, 21, -37, -72, 58, 19, -9, -39, -8, 9, 28, 35, -58, -43, -7, 4, 13, 47
    0xfb3845ee, 0x253cf4fa, 0xdbf6e524, 0x15f9fe06, 0x133ab8db, 0x9f8d9f7, 0xd5c6231c, 0x2f0d04f9,
    // -46, 7, -10, 51, 56, -28, -22, 33, -14, -12, 15, 4, -76, -48, -7, -26, 26, 0, -44, 78, 15, 30, 27, 22, 0, 33, -91, -37, 5, -25, -7, -34
    0x33f607d2, 0x21eae438, 0x40ff4f2, 0xe6f9d0b4, 0x4ed4001a, 0x161b1e0f, 0xdba52100, 0xdef9e705,
    // -15, -22, 33, -13, -22, 21, -3, 50, -16, 35, -13, 3, 13, -27, -4, 29, 12, -33, -1, 63, -9, 5, 39, 42, -55, -61, -3, -93, -1, -9, 10, -74
    0xf321eaf1, 0x32fd15ea, 0x3f323f0, 0x1dfce50d, 0x3fffdf0c, 0x2a2705f7, 0xa3fdc3c9, 0xb60af7ff,
    // 28, 7, 19, -17, -9, -5, -6, -20, 32, -9, 8, -25, 25, -6, -4, -9, -51, 57, 20, -45, -43, 37, 3, -31, -30, 42, -9, 36, -13, -18, -29, 34
    0xef13071c, 0xecfafbf7, 0xe708f720, 0xf7fcfa19, 0xd31439cd, 0xe10325d5, 0x24f72ae2, 0x22e3eef3,
    // -9, 23, -36, 10, 1, 31, -3, 14, 35, 8, -3, -13, 23, 12, 5, 29, 9, 27, 58, 19, -2, 26, 53, -4, -34, -66, -51, 85, -6, -17, -15, -22
    0xadc17f7, 0xefd1f01, 0xf3fd0823, 0x1d050c17, 0x133a1b09, 0xfc351afe, 0x55cdbede, 0xeaf1effa,
    // 34, 53, -16, 23, 42, -44, 34, -20, 30, -45, 28, -7, -23, 29, -24, 15, -16, -24, 27, -54, 8, -30, 9, -10, 38, -33, -96, -8, 5, 37, 0, 41
    0x17f03522, 0xec22d42a, 0xf91cd31e, 0xfe81de9, 0xca1be8f0, 0xf609e208, 0xf8a0df26, 0x29002505,
    // -18, 18, 9, 5, 11, 23, -37, 21, -54, 47, -1, -23, -42, 21, -32, 53, -51, 14, -37, -10, -12, 27, -8, 10, 15, -67, -84, 2, -3, 6, 2, -2
    0x50912ee, 0x15db170b, 0xe9ff2fca, 0x35e015d6, 0xf6db0ecd, 0xaf81bf4, 0x2acbd0f, 0xfe0206fd,
    // 11, -45, -3, -70, -39, -14, 6, 45, -24, 51, 72, -27, -27, -45, 3, -7, 33, -57, 112, -5, 3, 13, -18, 29, 1, -68, -23, -24, 0, -24, 8, 102
    0xbafdd30b, 0x2d06f2d9, 0xe54833e8, 0xf903d3e5, 0xfb70c721, 0x1dee0d03, 0xe8e9bc01, 0x6608e800,
    // 17, -39, -13, -2, 20, 57, 67, -45, 12, 13, -22, -54, -37, 7, 8, -50, 5, 18, 3, -29, 27, -19, 30, 16, -16, -13, 5, -24, 2, -21, 21, 15
    0xfef3d911, 0xd3433914, 0xcaea0d0c, 0xce0807db, 0xe3031205, 0x101eed1b, 0xe805f3f0, 0xf15eb02,
    // 19, 69, -46, 24, 36, 38, -8, -1, -29, 78, -14, -36, 4, 3, -46, -8, 63, 42, 36, 11, 18, -34, -39, 19, -11, 16, 42, -11, -18, 11, -2, 48
    0x18d24513, 0xfff82624, 0xdcf24ee3, 0xf8d20304, 0xb242a3f, 0x13d9de12, 0xf52a10f5, 0x30fe0bee,
    // 39, 28, -52, -38, 11, 42, 37, -1, -23, -29, 3, 7, 50, -76, -28, -42, 6, 61, 4, 24, 14, -38, -66, 12, -20, 26, 53, -40, -11, 3, 16, -22
    0xdacc1c27, 0xff252a0b, 0x703e3e9, 0xd6e4b432, 0x18043d06, 0xcbeda0e, 0xd8351aec, 0xea1003f5,
    // -39, 33, -11, -10, -48, 46, -3, 4, -3, 14, 1, 4, 4, 2, 15, -25, -61, -4, 51, 56, 28, 42, 31, -44, -3, -4, -45, -62, 7, 30, -26, -19
    0xf6f521d9, 0x4fd2ed0, 0x4010efd, 0xe70f0204, 0x3833fcc3, 0xd41f2a1c, 0xc2d3fcfd, 0xede61e07,
    // 6, -26, 29, 0, -13, -1, 10, -5, -17, -4, -5, 0, 5, 13, -5, 3, 3, -24, -15, -7, 34, -51, 3, -73, -41, -47, -1, 27, 50, -72, -14, -21
    0x1de606, 0xfb0afff3, 0xfbfcef, 0x3fb0d05, 0xf9f1e803, 0xb703cd22, 0x1bffd1d7, 0xebf2b832,
    // -29, -9, -47, 11, -42, 54, -15, 23, -14, -35, 38, -15, 8, 45, 26, -2, -34, -91, 33, -6, -16, 9, 2, -13, 21, 38, -45, -34, 10, 17, 45, -8
    0xbd1f7e3, 0x17f136d6, 0xf126ddf2, 0xfe1a2d08, 0xfa21a5de, 0xf30209f0, 0xded32615, 0xf82d110a,
    // -8, 20, -46, -28, 66, 11, 26, -26, -27, 51, 6, -12, 33, -60, 66, -11, -18, 32, 41, -2, -5, -52, 30, 26, 0, 47, 26, -23, -1, 39, -4, -30
    0xe4d214f8, 0xe61a0b42, 0xf40633e5, 0xf542c421, 0xfe2920ee, 0x1a1eccfb, 0xe91a2f00, 0xe2fc27ff,
};
static const uint embedded_encoder3_ResidualBlock_0_body_pw_expand_bias_dwords[32] = {
    // -0.04202, -0.0787, -0.06793, -0.0249, -0.0328, -0.04132, -0.01511, -0.01067, -0.03775, -0.09924, -0.0775, -0.08325, -0.2395, -0.02213, -0.1394, -0.01587
    0xad09a961, 0xa660ac59, 0xa94aa833, 0xa177a3bc, 0xae5aa8d5, 0xad54acf6, 0xa5aab3aa, 0xa410b076,
    // -0.04947, -0.001893, -0.1901, 0.001002, -0.0639, -0.0488, -0.0969, -0.02718, -0.05875, -0.0731, 0.01982, -0.0242, -0.0452, -0.0348, -0.03424, -0.04678
    0x97c1aa55, 0x141bb215, 0xaa3fac17, 0xa6f5ae34, 0xacaeab85, 0xa6322513, 0xa874a9c9, 0xa9fda862,
    // -0.0786, 0.03793, -0.00619, -0.01196, -0.04858, -0.02386, -0.03464, -0.05786, -0.009026, -0.063, -0.1003, -0.05154, -0.02673, -0.1951, -0.1965, -0.09406
    0x28dbad08, 0xa2209e57, 0xa61caa38, 0xab68a86f, 0xac08a09f, 0xaa99ae6b, 0xb23ea6d8, 0xae05b24a,
    // -0.00984, -0.05963, -0.01878, -0.1361, -0.00196, -0.005096, -0.02026, -0.0707, -0.00437, 0.0327, -0.00125, -0.02196, -0.181, -0.04297, -0.04163, -0.04703
    0xaba2a10a, 0xb05ba4cf, 0x9d389804, 0xac86a530, 0x28309c7a, 0xa59f951f, 0xa980b1cb, 0xaa05a954,
};
static const uint embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 20, 4, -29, 3, -8, 37, -34, 46, 36, 2, -31, -16, -20, -4, 22, -40, -31, 5, -38, 35, 0, -21, 10, 63, 20, 44, 110, 47, 48, -12, 13, -52
    0x3e30414, 0x2ede25f8, 0xf0e10224, 0xd816fcec, 0x23da05e1, 0x3f0aeb00, 0x2f6e2c14, 0xcc0df430,
    // 22, -38, 20, 74, 46, -33, 15, 9, 8, 15, -19, 4, -18, -24, -14, -2, 10, -39, -19, 41, -38, -11, -17, 9, 20, 11, -18, -2, -9, 49, 10, -19
    0x4a14da16, 0x90fdf2e, 0x4ed0f08, 0xfef2e8ee, 0x29edd90a, 0x9eff5da, 0xfeee0b14, 0xed0a31f7,
    // 12, -19, -2, -9, 3, 21, -34, 8, -19, -2, 30, 0, -19, 4, 27, -19, 11, -3, 21, -17, 44, 2, -12, 26, 78, -2, -28, -7, 42, 16, -14, 5
    0xf7feed0c, 0x8de1503, 0x1efeed, 0xed1b04ed, 0xef15fd0b, 0x1af4022c, 0xf9e4fe4e, 0x5f2102a,
    // 0, -2, 23, -16, 36, -4, -47, -37, -74, -24, -19, 24, -30, 16, -18, 73, -1, -1, -23, 15, 1, 34, 19, -52, -30, -18, 49, -36, 52, -15, 21, 48
    0xf017fe00, 0xdbd1fc24, 0x18ede8b6, 0x49ee10e2, 0xfe9ffff, 0xcc132201, 0xdc31eee2, 0x3015f134,
    // -12, 53, -32, 2, -24, -6, 68, 17, 29, -28, -31, -17, 27, -15, -19, 67, -22, -22, -10, 21, 34, 44, 0, -39, -47, 83, 11, -20, 16, 7, 56, -3
    0x2e035f4, 0x1144fae8, 0xefe1e41d, 0x43edf11b, 0x15f6eaea, 0xd9002c22, 0xec0b53d1, 0xfd380710,
    // -3, 7, -19, 45, 37, -68, 2, 68, 53, 34, -57, -17, -15, 4, -7, -62, 13, -31, 45, -32, 44, 25, -38, 22, -2, -6, -17, 40, -34, -49, -7, 4
    0x2ded07fd, 0x4402bc25, 0xefc72235, 0xc2f904f1, 0xe02de10d, 0x16da192c, 0x28effafe, 0x4f9cfde,
    // -49, 21, -37, -20, -1, -1, -1, 13, 22, 25, 35, 5, 34, -8, 22, -10, 3, -3, -93, 10, -16, -10, 23, -8, 4, -34, -5, 43, 11, 12, 32, 16
    0xecdb15cf, 0xdffffff, 0x5231916, 0xf616f822, 0xaa3fd03, 0xf817f6f0, 0x2bfbde04, 0x10200c0b,
    // 30, -68, 5, 34, -28, -3, 6, -28, -60, 9, -52, -2, -20, -8, 14, -5, 2, -7, 7, 59, 16, -14, -23, 7, 30, 65, 3, 5, -11, -33, -34, -9
    0x2205bc1e, 0xe406fde4, 0xfecc09c4, 0xfb0ef8ec, 0x3b07f902, 0x7e9f210, 0x503411e, 0xf7dedff5,
    // -23, -45, -25, 12, -2, -22, 9, -19, 8, -19, -90, 2, 10, 34, 17, -8, -19, 10, 25, 3, -34, 20, -1, -34, 15, -83, -48, -16, -22, 22, 10, 32
    0xce7d3e9, 0xed09eafe, 0x2a6ed08, 0xf811220a, 0x3190aed, 0xdeff14de, 0xf0d0ad0f, 0x200a16ea,
    // 12, -44, 30, -20, 20, -17, -3, 1, -11, 5, 29, 19, 16, -15, -14, 4, 23, 2, 12, 94, 11, -24, 11, 19, -19, 36, 9, -1, -36, -4, 57, 0
    0xec1ed40c, 0x1fdef14, 0x131d05f5, 0x4f2f110, 0x5e0c0217, 0x130be80b, 0xff0924ed, 0x39fcdc,
    // 44, 40, 0, 11, -9, -8, -1, -5, -2, 17, -31, 61, -20, -1, 13, -10, 15, -44, 75, 19, 18, 5, 13, -7, -5, -45, 1, 11, -5, -7, 0, -17
    0xb00282c, 0xfbfff8f7, 0x3de111fe, 0xf60dffec, 0x134bd40f, 0xf90d0512, 0xb01d3fb, 0xef00f9fb,
    // -22, 5, -11, -14, 36, -20, 9, 15, -16, -13, 39, 7, -11, 38, -3, 17, -27, -12, 11, -17, 0, -28, -20, -6, 8, -16, 0, -2, 14, 34, -14, -31
    0xf2f505ea, 0xf09ec24, 0x727f3f0, 0x11fd26f5, 0xef0bf4e5, 0xfaece400, 0xfe00f008, 0xe1f2220e,
    // -6, 17, -18, -16, 11, 1, -93, 19, 61, 13, 12, -5, -7, 6, -11, -44, -19, -58, 17, 58, 12, -28, 7, 18, 4, 8, 51, 31, 38, 7, 2, -11
    0xf0ee11fa, 0x13a3010b, 0xfb0c0d3d, 0xd4f506f9, 0x3a11c6ed, 0x1207e40c, 0x1f330804, 0xf5020726,
    // 32, 20, 13, 29, -30, 16, 18, -27, 17, -22, -51, 21, -1, -6, 28, 20, -2, 3, -19, 51, -46, -66, -21, 0, 53, -26, 13, -5, -43, 4, -26, -19
    0x1d0d1420, 0xe51210e2, 0x15cdea11, 0x141cfaff, 0x33ed03fe, 0xebbed2, 0xfb0de635, 0xede604d5,
    // -11, -20, -12, -8, -16, 4, 16, 38, 21, 31, 6, 29, -66, -23, -10, 29, 31, -22, 9, 7, -8, 26, 2, 2, -28, -39, 9, 30, 4, -7, 32, 4
    0xf8f4ecf5, 0x261004f0, 0x1d061f15, 0x1df6e9be, 0x709ea1f, 0x2021af8, 0x1e09d9e4, 0x420f904,
    // -10, -3, -23, 7, -35, -21, -7, 55, 54, 13, 23, -37, 12, 34, -21, 2, -35, 0, 8, 3, -6, 7, -61, 40, -20, -29, -15, 58, 15, 9, 16, 35
    0x7e9fdf6, 0x37f9ebdd, 0xdb170d36, 0x2eb220c, 0x30800dd, 0x28c307fa, 0x3af1e3ec, 0x2310090f,
    // 57, -48, 25, 2, 0, 45, 45, -3, 13, 17, -17, -8, 20, 9, -9, -3, 13, 38, -57, 5, 0, 13, 18, 51, 78, -39, 3, 61, 18, 51, 12, 13
    0x219d039, 0xfd2d2d00, 0xf8ef110d, 0xfdf70914, 0x5c7260d, 0x33120d00, 0x3d03d94e, 0xd0c3312,
    // 1, 38, 41, -33, -34, 18, 22, 18, 19, -1, 27, 16, 7, 69, -21, 41, 20, 20, 50, 20, 28, 15, -7, 5, -15, -22, 21, 10, -34, 42, 22, 19
    0xdf292601, 0x121612de, 0x101bff13, 0x29eb4507, 0x14321414, 0x5f90f1c, 0xa15eaf1, 0x13162ade,
    // -21, -22, 10, -12, 4, -26, 2, -12, -28, 8, -18, 3, -70, 10, -61, -10, -17, -50, 16, 10, 53, -26, -2, -19, -18, -21, -29, -37, -6, -19, -11, 30
    0xf40aeaeb, 0xf402e604, 0x3ee08e4, 0xf6c30aba, 0xa10ceef, 0xedfee635, 0xdbe3ebee, 0x1ef5edfa,
    // 1, 54, 19, 4, 16, -18, 0, -26, -43, 5, -18, -8, -15, 68, -58, -12, 48, -20, -14, -19, 6, 10, -8, 11, -2, -63, 4, -16, -6, 44, -23, 4
    0x4133601, 0xe600ee10, 0xf8ee05d5, 0xf4c644f1, 0xedf2ec30, 0xbf80a06, 0xf004c1fe, 0x4e92cfa,
    // 5, -6, -16, -2, -9, 9, 22, 29, 33, 75, -52, -28, 49, 29, -28, -61, 2, 24, -7, 75, -1, -46, -22, 43, -7, -49, 36, 27, 27, 0, -17, 14
    0xfef0fa05, 0x1d1609f7, 0xe4cc4b21, 0xc3e41d31, 0x4bf91802, 0x2bead2ff, 0x1b24cff9, 0xeef001b,
    // -16, 3, -39, 26, -35, 16, 19, 7, -82, -15, 29, -22, -4, -22, -2, -12, 2, -41, -26, -8, -19, 85, -20, -8, -16, 6, -33, -21, -11, -9, 14, -7
    0x1ad903f0, 0x71310dd, 0xea1df1ae, 0xf4feeafc, 0xf8e6d702, 0xf8ec55ed, 0xebdf06f0, 0xf90ef7f5,
    // 2, 80, 37, -14, 13, 4, -16, -10, -22, -29, -12, -6, 41, -13, -9, 18, -4, 2, -47, 6, 8, 32, 3, -12, 18, 33, 32, -34, -16, -15, 18, -29
    0xf2255002, 0xf6f0040d, 0xfaf4e3ea, 0x12f7f329, 0x6d102fc, 0xf4032008, 0xde202112, 0xe312f1f0,
    // 14, 15, -7, -13, -31, -35, 5, -5, 23, 18, -71, -22, -16, -31, 11, -24, -5, -15, 17, 42, 20, -34, -1, 17, 57, 21, 57, -11, -10, -28, -31, -22
    0xf3f90f0e, 0xfb05dde1, 0xeab91217, 0xe80be1f0, 0x2a11f1fb, 0x11ffde14, 0xf5391539, 0xeae1e4f6,
    // 8, -12, -61, -13, -36, -19, -34, 8, 21, 36, -1, 26, -58, 30, -69, -60, -21, -62, 45, 55, 16, -18, -18, -19, -47, -37, 21, 12, 27, -2, 4, -37
    0xf3c3f408, 0x8deeddc, 0x1aff2415, 0xc4bb1ec6, 0x372dc2eb, 0xedeeee10, 0xc15dbd1, 0xdb04fe1b,
    // 2, 50, -21, 25, 4, 18, 5, -25, 31, 0, -21, 16, -10, 39, -4, -19, 32, 7, -5, 15, -24, 19, -11, 24, -11, -67, -30, 7, 37, -6, -18, 34
    0x19eb3202, 0xe7051204, 0x10eb001f, 0xedfc27f6, 0xffb0720, 0x18f513e8, 0x7e2bdf5, 0x22eefa25,
    // 9, 50, -22, 3, 19, 41, 30, 48, 52, 56, -5, -15, -36, -23, -8, 9, -13, -18, 25, 82, 47, 61, -42, 45, 37, 37, -62, 27, 66, 2, 36, -32
    0x3ea3209, 0x301e2913, 0xf1fb3834, 0x9f8e9dc, 0x5219eef3, 0x2dd63d2f, 0x1bc22525, 0xe0240242,
    // 24, 13, -30, -41, -2, -22, -17, -6, -56, 1, -32, -24, -57, -48, -11, 16, -50, 6, -16, -7, -14, -13, -31, -25, 27, -39, 7, 41, 19, -26, 31, 32
    0xd7e20d18, 0xfaefeafe, 0xe8e001c8, 0x10f5d0c7, 0xf9f006ce, 0xe7e1f3f2, 0x2907d91b, 0x201fe613,
    // 8, 40, -44, 14, 3, 3, 43, -29, -5, -32, 19, 34, -76, 0, 3, 28, 0, 36, -35, -7, -14, -22, -57, 26, 6, 69, 7, 2, -18, -5, -4, -13
    0xed42808, 0xe32b0303, 0x2213e0fb, 0x1c0300b4, 0xf9dd2400, 0x1ac7eaf2, 0x2074506, 0xf3fcfbee,
    // -9, 3, -22, -34, -25, 1, 28, 6, -15, -6, -13, -8, 17, -19, 9, 2, -36, -10, 8, 1, 31, -54, 44, 8, 6, 18, 5, -12, -17, 7, -7, 7
    0xdeea03f7, 0x61c01e7, 0xf8f3faf1, 0x209ed11, 0x108f6dc, 0x82cca1f, 0xf4051206, 0x7f907ef,
    // 16, 16, 10, 28, 48, 0, -84, -4, -42, 18, -6, 3, -63, 15, 14, 10, 32, 77, -31, -24, -9, 13, -50, -1, 33, 21, 4, 2, -10, 3, -2, -44
    0x1c0a1010, 0xfcac0030, 0x3fa12d6, 0xa0e0fc1, 0xe8e14d20, 0xffce0df7, 0x2041521, 0xd4fe03f6,
    // -20, 64, -22, 61, 30, -6, 37, 25, -10, -10, 78, 53, 32, -4, 2, 8, -52, -5, -32, 18, 25, -63, 31, -28, -7, -16, 41, -6, 10, 7, 76, -6
    0x3dea40ec, 0x1925fa1e, 0x354ef6f6, 0x802fc20, 0x12e0fbcc, 0xe41fc119, 0xfa29f0f9, 0xfa4c070a,
    // -23, 89, -8, 2, -14, -59, -9, -5, 5, 32, 2, -10, 50, 86, 32, 11, 31, -56, -54, -14, -22, -25, 2, -36, -37, 87, -56, -55, 27, -64, -16, 45
    0x2f859e9, 0xfbf7c5f2, 0xf6022005, 0xb205632, 0xf2cac81f, 0xdc02e7ea, 0xc9c857db, 0x2df0c01b,
    // 40, 0, 30, 51, -11, 87, 71, 27, 28, 78, -16, 75, 62, 13, -37, 3, 2, 23, -10, -12, 56, 9, 50, 62, -19, 22, -20, -14, 43, 63, 45, 7
    0x331e0028, 0x1b4757f5, 0x4bf04e1c, 0x3db0d3e, 0xf4f61702, 0x3e320938, 0xf2ec16ed, 0x72d3f2b,
    // 1, 112, -2, -23, 23, -13, -17, -32, -13, -21, -9, 34, 31, 18, -24, -5, -4, -28, -45, -59, -61, 29, -36, -47, -46, 16, -11, -40, -51, 27, -55, -42
    0xe9fe7001, 0xe0eff317, 0x22f7ebf3, 0xfbe8121f, 0xc5d3e4fc, 0xd1dc1dc3, 0xd8f510d2, 0xd6c91bcd,
    // 11, 10, 11, -7, -56, 81, -92, 44, 26, -31, 14, 28, 33, 14, 17, -11, -7, 48, -11, -1, -57, 71, 64, -25, 90, -27, -13, -65, -34, 41, 91, 17
    0xf90b0a0b, 0x2ca451c8, 0x1c0ee11a, 0xf5110e21, 0xfff530f9, 0xe74047c7, 0xbff3e55a, 0x115b29de,
    // 53, -87, -65, -9, 1, 64, 97, -74, -62, -44, -18, 4, 32, 40, -39, -57, -22, 66, 50, -13, 19, -37, -45, 112, 97, -82, 11, 100, 8, 26, 1, -47
    0xf7bfa935, 0xb6614001, 0x4eed4c2, 0xc7d92820, 0xf33242ea, 0x70d3db13, 0x640bae61, 0xd1011a08,
    // 16, 19, -1, -53, -1, 44, 89, -83, -40, 33, 4, 18, -45, 5, 22, 47, 3, -29, 67, 27, 51, -35, -16, 47, -113, -18, -29, 15, -2, 42, -52, -62
    0xcbff1310, 0xad592cff, 0x120421d8, 0x2f1605d3, 0x1b43e303, 0x2ff0dd33, 0xfe3ee8f, 0xc2cc2afe,
    // 14, 51, -36, 55, -10, -80, -4, -21, -16, -14, 27, 22, -27, 39, 59, -11, 48, 18, 30, -43, 95, -41, -45, -41, 55, 46, 32, -81, -3, -19, -34, 9
    0x37dc330e, 0xebfcb0f6, 0x161bf2f0, 0xf53b27e5, 0xd51e1230, 0xd7d3d75f, 0xaf202e37, 0x9deedfd,
    // -6, 43, 16, -16, 28, 5, -9, 15, 21, 10, -6, 32, -42, -10, -37, 24, -30, 25, -92, -80, -7, 6, 34, 23, 18, 48, 16, -42, -8, -34, -14, 11
    0xf0102bfa, 0xff7051c, 0x20fa0a15, 0x18dbf6d6, 0xb0a419e2, 0x172206f9, 0xd6103012, 0xbf2def8,
    // -6, -29, 5, 51, -50, -32, -4, 35, 21, 17, 3, -56, -91, -5, 27, 10, 40, -38, 8, 28, 36, -40, 15, -28, -33, 13, -7, -23, 16, -23, 3, -47
    0x3305e3fa, 0x23fce0ce, 0xc8031115, 0xa1bfba5, 0x1c08da28, 0xe40fd824, 0xe9f90ddf, 0xd103e910,
    // 10, 6, 26, 8, -10, -44, 34, 13, 9, 9, -28, -17, 21, 0, -58, -8, 16, -38, -1, -36, 29, 18, -71, 23, -35, -20, -22, -3, 49, 31, -16, 21
    0x81a060a, 0xd22d4f6, 0xefe40909, 0xf8c60015, 0xdcffda10, 0x17b9121d, 0xfdeaecdd, 0x15f01f31,
    // -29, -34, -57, -91, 24, -11, 18, -16, -6, 8, -1, 6, -7, 53, -36, -7, -80, 9, 7, 4, 8, 12, -59, 11, 22, -78, 6, 19, 11, -17, 11, 8
    0xa5c7dee3, 0xf012f518, 0x6ff08fa, 0xf9dc35f9, 0x40709b0, 0xbc50c08, 0x1306b216, 0x80bef0b,
    // -94, -9, -57, 2, -30, 57, -32, 5, 30, 32, 9, 14, -33, -5, -28, 35, -26, 33, -45, 10, -43, 6, 51, 35, -4, 32, 28, 38, 11, -30, 10, 21
    0x2c7f7a2, 0x5e039e2, 0xe09201e, 0x23e4fbdf, 0xad321e6, 0x233306d5, 0x261c20fc, 0x150ae20b,
    // -56, 52, 26, -4, 83, -42, 31, -4, -2, 4, -15, 17, -7, 35, 16, 40, -17, -20, 13, -1, 38, 76, 19, -74, -14, 27, -43, -25, -1, -38, 76, -2
    0xfc1a34c8, 0xfc1fd653, 0x11f104fe, 0x281023f9, 0xff0decef, 0xb6134c26, 0xe7d51bf2, 0xfe4cdaff,
    // -2, 42, -35, 21, 21, 55, -5, -35, 66, 66, -17, 34, -62, 8, -2, 8, -13, 46, -46, -3, -21, 2, 44, 85, 44, -33, 65, 76, 26, -27, -18, 9
    0x15dd2afe, 0xddfb3715, 0x22ef4242, 0x8fe08c2, 0xfdd22ef3, 0x552c02eb, 0x4c41df2c, 0x9eee51a,
    // 28, -18, -31, -3, -9, -41, -44, 11, 30, 13, -1, -32, 6, 29, 8, 44, 22, -46, -15, 1, -9, -9, -12, -39, -36, -3, -62, -39, 20, -29, -11, 14
    0xfde1ee1c, 0xbd4d7f7, 0xe0ff0d1e, 0x2c081d06, 0x1f1d216, 0xd9f4f7f7, 0xd9c2fddc, 0xef5e314,
    // 5, -31, 13, 17, 23, 24, -1, 0, 23, 31, 36, 33, 15, -33, 86, 5, -36, 3, -13, -48, 1, 16, -6, 29, -16, -15, -21, -1, 18, 7, 22, 48
    0x110de105, 0xff1817, 0x21241f17, 0x556df0f, 0xd0f303dc, 0x1dfa1001, 0xffebf1f0, 0x30160712,
    // 4, -64, 127, 41, -24, -21, -22, 33, -8, 6, -10, -2, 37, -29, 31, -9, 43, 5, -56, 9, 32, -16, 120, -18, 2, -53, -4, -29, 10, -7, 33, -10
    0x297fc004, 0x21eaebe8, 0xfef606f8, 0xf71fe325, 0x9c8052b, 0xee78f020, 0xe3fccb02, 0xf621f90a,
    // 44, 4, 62, -3, 16, -52, 10, -29, 8, -14, -18, -25, -8, 46, 7, -3, 87, -41, -9, -3, -9, 20, -89, -7, -50, -58, -8, 17, 7, 2, 0, 21
    0xfd3e042c, 0xe30acc10, 0xe7eef208, 0xfd072ef8, 0xfdf7d757, 0xf9a714f7, 0x11f8c6ce, 0x15000207,
    // -24, -48, -5, -52, -19, -20, 97, 23, 83, 38, 22, -12, -20, 25, 6, -7, -21, -23, 12, 42, -36, -64, 4, 22, -25, -21, -12, -35, 58, -41, -22, -21
    0xccfbd0e8, 0x1761eced, 0xf4162653, 0xf90619ec, 0x2a0ce9eb, 0x1604c0dc, 0xddf4ebe7, 0xebead73a,
    // 24, -13, 4, -28, 27, 40, -22, 10, 1, 48, 31, 25, 19, -27, 21, -34, 21, -38, -20, 85, 3, 61, 43, 39, -5, -23, -51, -10, 12, 25, -29, -50
    0xe404f318, 0xaea281b, 0x191f3001, 0xde15e513, 0x55ecda15, 0x272b3d03, 0xf6cde9fb, 0xcee3190c,
    // 38, 47, 17, 18, 11, 107, 52, -36, 48, -21, 14, 6, -17, -4, -19, 4, 11, 69, -9, 35, 32, 30, -8, 13, 34, 38, 31, 127, -29, 74, -49, 16
    0x12112f26, 0xdc346b0b, 0x60eeb30, 0x4edfcef, 0x23f7450b, 0xdf81e20, 0x7f1f2622, 0x10cf4ae3,
    // -23, -9, -37, 14, 31, 0, 56, 2, -7, -14, 26, -6, 13, 4, -17, 20, -17, 17, 89, -19, 36, 20, 97, 20, 76, -5, -50, -59, -18, -41, -18, -15
    0xedbf7e9, 0x238001f, 0xfa1af2f9, 0x14ef040d, 0xed5911ef, 0x14611424, 0xc5cefb4c, 0xf1eed7ee,
    // 73, -33, -117, 41, -23, 14, -35, 28, -8, 32, 38, -19, -27, -58, 15, 30, 8, 11, 30, 18, -62, 38, -106, 36, -42, 55, 23, 10, -19, 9, 45, 96
    0x298bdf49, 0x1cdd0ee9, 0xed2620f8, 0x1e0fc6e5, 0x121e0b08, 0x249626c2, 0xa1737d6, 0x602d09ed,
    // -36, -7, -4, 7, 29, -51, -50, 61, 44, -7, 5, -12, 7, -60, -33, -22, -59, 5, 20, 78, -53, -13, 16, -19, 16, -20, -10, 31, 50, -14, 34, 46
    0x7fcf9dc, 0x3dcecd1d, 0xf405f92c, 0xeadfc407, 0x4e1405c5, 0xed10f3cb, 0x1ff6ec10, 0x2e22f232,
    // -35, 11, 62, -10, 14, 3, 33, 27, 42, 32, 9, 14, -44, 10, 32, 5, -13, -5, 46, 43, 39, 19, 51, -26, 4, -16, -2, 12, 29, -17, 24, 12
    0xf63e0bdd, 0x1b21030e, 0xe09202a, 0x5200ad4, 0x2b2efbf3, 0xe6331327, 0xcfef004, 0xc18ef1d,
    // -23, -17, -46, -19, -21, 15, 5, -27, -6, 25, 5, 19, -14, -17, -32, 23, 15, 11, -27, 17, 18, 22, 11, 27, 10, 14, 31, 21, 58, -45, -37, 13
    0xedd2efe9, 0xe5050feb, 0x130519fa, 0x17e0eff2, 0x11e50b0f, 0x1b0b1612, 0x151f0e0a, 0xddbd33a,
    // 55, 18, 45, -6, -21, -12, -23, 6, -29, -7, -14, 46, 29, -44, -26, 12, 7, -37, 89, -26, -15, -28, 46, -5, -41, -68, 8, -27, -30, 19, -37, 19
    0xfa2d1237, 0x6e9f4eb, 0x2ef2f9e3, 0xce6d41d, 0xe659db07, 0xfb2ee4f1, 0xe508bcd7, 0x13db13e2,
    // -13, 17, 23, 38, 13, -46, 19, 49, -26, -14, -22, -18, 32, 43, 79, -10, 29, -72, 57, 5, 21, 18, -37, -7, 1, 18, -79, -30, -62, 9, -28, -3
    0x261711f3, 0x3113d20d, 0xeeeaf2e6, 0xf64f2b20, 0x539b81d, 0xf9db1215, 0xe2b11201, 0xfde409c2,
    // 6, -41, 13, -6, -33, 16, 0, 12, 27, -18, -5, 72, -24, -17, -7, 27, 25, -48, 12, 16, 18, -56, 12, -18, -38, -11, -24, 11, -11, 1, -37, -77
    0xfa0dd706, 0xc0010df, 0x48fbee1b, 0x1bf9efe8, 0x100cd019, 0xee0cc812, 0xbe8f5da, 0xb3db01f5,
    // -2, 0, 32, 17, -29, -49, 30, -15, -7, -14, 11, -33, 53, 83, -51, -16, 1, -35, 42, -51, 48, 51, -62, -11, -8, -49, -41, -44, -34, 32, -16, 3
    0x112000fe, 0xf11ecfe3, 0xdf0bf2f9, 0xf0cd5335, 0xcd2add01, 0xf5c23330, 0xd4d7cff8, 0x3f020de,
    // 71, 27, 2, 57, 7, 16, -12, -26, -71, -14, 12, 9, 42, -17, -11, -49, 112, 4, -40, -79, -13, 25, 33, 23, 22, 10, 60, -4, -18, 34, -5, 17
    0x39021b47, 0xe6f41007, 0x90cf2b9, 0xcff5ef2a, 0xb1d80470, 0x172119f3, 0xfc3c0a16, 0x11fb22ee,
    // 95, -51, 89, -12, 9, -17, -39, 30, -8, -19, 30, -1, -4, 94, 2, 22, 34, -43, -5, 34, -39, 13, -21, -42, -55, -12, -26, 17, 9, 74, 55, 66
    0xf459cd5f, 0x1ed9ef09, 0xff1eedf8, 0x16025efc, 0x22fbd522, 0xd6eb0dd9, 0x11e6f4c9, 0x42374a09,
};
static const uint embedded_encoder3_ResidualBlock_0_body_pw_contract_bias_dwords[16] = {
    // -5.79e-05, -0.0003397, 0.0003648, 0.0003138, -0.0002198, -3.72e-05, 0.0003145, 0.0004876, 0.000811, -0.0003445, 0.0002322, 0.000155, 4.5e-06, -3.4e-06, 0.0001756, 0.000375
    0x8d9183cb, 0xd240dfa, 0x82708b34, 0xffd0d27, 0x8da512a5, 0x9140b9c, 0x8039004b, 0xe2509c1,
    // 0.0001547, -0.001578, -0.0007343, 0.0006065, -0.0002637, 0.000437, 4.57e-05, -0.0001647, -0.0003026, -0.0005136, 0.0003362, 1.866e-05, 0.0007353, 5.925e-05, -2.253e-05, -0.0005655
    0x96770912, 0x10f89204, 0xf298c52, 0x896602ff, 0x90358cf5, 0x1390d82, 0x3e21206, 0x90a2817a,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass4(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = {
        uint3(1920, 1080, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 32), // threadGroupSliceSize
        uint3(1920, 1080, 32), // storageSize
        uint3(32, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        132710400, // threadGroupStorageByteOffset
        storage_Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped };
    
    const ConstantBufferStorage<576> storage_embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.008682374842464924, storage_embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = { embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.00424827029928565, storage_embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_encoder3_ResidualBlock_0_body_pw_expand_bias = { embedded_encoder3_ResidualBlock_0_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_encoder3_ResidualBlock_0_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_0_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.00422761682420969, storage_embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder3_ResidualBlock_0_body_pw_contract_bias = { embedded_encoder3_ResidualBlock_0_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder3_ResidualBlock_0_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_0_body_pw_contract_bias };
    
    // /encoder3/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_8 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_8 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_8 = uint3(64, 1, 32);
    const uint3 storageSize_slice_8 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_8 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_8 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_8 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_8 = dot(groupStart_slice_8, tensorByteStrides_slice_8);
    const RWBufferStorage storage_slice_8 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_8 = { logicalSize_slice_8, groupStart_slice_8, groupSize_slice_8, storageSize_slice_8, tensorByteStrides_slice_8, paddingBegin_slice_8, paddingEnd_slice_8, threadGroupByteOffsetInTensor_slice_8 + 199065600, storage_slice_8 };
    // Fusedquantized_/encoder3/ResidualBlock_0/residual_func/Concat_quantized_/encoder3/ResidualBlock_0/body/spatial_mixing/partial_conv/Conv_quantized_/encoder3/ResidualBlock_0/body/spatial_mixing/Concat_quantized_/encoder3/ResidualBlock_0/body/pw_expand/Conv_/encoder3/ResidualBlock_0/body/pw_expand_act/Relu_quantized_/encoder3/ResidualBlock_0/body/pw_contract/Conv_/encoder3/ResidualBlock_0/Add (32, 1080, 1920), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,) -> (32, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<32, 1>(0.014482999220490456, 0.01414661668241024, 0.017094779759645462, 0.015993434935808182, 0.018608681857585907, Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped, embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias, embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_0_body_pw_expand_bias, embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_0_body_pw_contract_bias, slice_8, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_4
#ifdef MLSR_PASS_4_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass4_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /encoder3/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_9 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_9 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_9 = uint3(32, 1, 32);
    const uint3 storageSize_slice_9 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_9 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_9 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_9 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_9 = dot(groupStart_slice_9, tensorByteStrides_slice_9);
    const RWBufferStorage storage_slice_9 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_9 = { logicalSize_slice_9, groupStart_slice_9, groupSize_slice_9, storageSize_slice_9, tensorByteStrides_slice_9, paddingBegin_slice_9, paddingEnd_slice_9, threadGroupByteOffsetInTensor_slice_9 + 199065600, storage_slice_9 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_9, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_4_POST


#ifdef MLSR_PASS_5
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 10, -13, 3, -31, -11, 1, 5, -5, 29, -5, 23, -7, -9, 37, 6, 22, 26, 19, -18, 21, -9, 55, -28, 8, 72, 10, 1, -44, -1, 32, 10, 18
    0xe103f30a, 0xfb0501f5, 0xf917fb1d, 0x160625f7, 0x15ee131a, 0x8e437f7, 0xd4010a48, 0x120a20ff,
    // 23, -13, -16, 23, 9, 35, -32, 4, 9, 14, -4, -24, 4, 22, -8, 15, -12, 10, 33, -21, 15, -5, 46, -12, 8, 48, -7, 21, 53, 33, -26, -8
    0x17f0f317, 0x4e02309, 0xe8fc0e09, 0xff81604, 0xeb210af4, 0xf42efb0f, 0x15f93008, 0xf8e62135,
    // -31, 49, 68, -25, -18, -22, 25, -47, -84, 19, -54, -14, 12, -36, -12, -12, 32, 29, 30, -2, 23, -6, 34, 27, 23, -37, 2, -10, -74, -14, 21, -3
    0xe74431e1, 0xd119eaee, 0xf2ca13ac, 0xf4f4dc0c, 0xfe1e1d20, 0x1b22fa17, 0xf602db17, 0xfd15f2b6,
    // 24, -9, 3, 29, -6, -9, -28, -11, -7, -25, -7, -16, -9, 14, -19, 6, -1, -29, -2, -9, 0, -27, -50, -34, -61, -24, 43, -11, 4, 34, -43, 0
    0x1d03f718, 0xf5e4f7fa, 0xf0f9e7f9, 0x6ed0ef7, 0xf7fee3ff, 0xdecee500, 0xf52be8c3, 0xd52204,
    // 14, 28, 6, 4, 1, 21, 18, 3, 20, -8, -4, 16, 8, 27, 8, -14, 17, -12, 24, -8, 20, -6, -3, -5, 26, 6, 10, -19, 9, 30, -9, 13
    0x4061c0e, 0x3121501, 0x10fcf814, 0xf2081b08, 0xf818f411, 0xfbfdfa14, 0xed0a061a, 0xdf71e09,
    // -24, 4, 37, 22, -38, -6, 69, 11, -39, -2, -27, -35, -28, 3, 6, -15, 18, -1, -1, -2, 25, -17, 41, 19, 20, -45, 2, 12, -22, -8, 19, -18
    0x162504e8, 0xb45fada, 0xdde5fed9, 0xf10603e4, 0xfeffff12, 0x1329ef19, 0xc02d314, 0xee13f8ea,
    // 16, 21, -24, -14, 8, -2, -37, 62, 23, -17, 12, -3, 24, 26, -7, -6, -51, 11, 0, -21, -43, 40, 29, 33, -101, 35, 39, -26, -10, -55, -19, 4
    0xf2e81510, 0x3edbfe08, 0xfd0cef17, 0xfaf91a18, 0xeb000bcd, 0x211d28d5, 0xe627239b, 0x4edc9f6,
    // -22, -7, -28, 5, 23, 16, 35, 18, -6, 5, 47, 6, -9, 45, -34, -4, -5, 9, 1, -30, -10, 3, 39, -4, 35, 19, -4, -9, 21, 28, -3, 1
    0x5e4f9ea, 0x12231017, 0x62f05fa, 0xfcde2df7, 0xe20109fb, 0xfc2703f6, 0xf7fc1323, 0x1fd1c15,
    // 55, 13, 33, -13, 5, -28, -14, 0, 64, -19, -12, 32, -15, 41, 40, 12, 29, 0, 36, 29, -2, -24, -3, 13, 30, -15, -9, 3, -13, 27, 4, 15
    0xf3210d37, 0xf2e405, 0x20f4ed40, 0xc2829f1, 0x1d24001d, 0xdfde8fe, 0x3f7f11e, 0xf041bf3,
    // -24, -1, 1, -29, 15, 17, 37, -3, 4, 19, 36, -3, 8, 7, -11, 11, -3, 11, 5, 53, -13, -60, -7, -16, -12, -11, -5, -1, -8, -45, 18, -12
    0xe301ffe8, 0xfd25110f, 0xfd241304, 0xbf50708, 0x35050bfd, 0xf0f9c4f3, 0xfffbf5f4, 0xf412d3f8,
    // -11, 12, 10, -23, -8, -21, 6, -2, -23, 32, -12, 3, -18, -22, -5, 2, 40, 26, -25, -59, 36, 6, -15, 2, 10, 49, -70, -23, 6, -39, 13, -11
    0xe90a0cf5, 0xfe06ebf8, 0x3f420e9, 0x2fbeaee, 0xc5e71a28, 0x2f10624, 0xe9ba310a, 0xf50dd906,
    // 13, 29, 48, 24, -52, 6, -38, 3, -49, -44, -6, -37, -45, -18, 13, 22, 1, -15, 11, 19, 44, -3, -6, -72, -12, -40, 16, 1, -20, -12, -7, 15
    0x18301d0d, 0x3da06cc, 0xdbfad4cf, 0x160deed3, 0x130bf101, 0xb8fafd2c, 0x110d8f4, 0xff9f4ec,
    // -12, 5, -33, 4, 17, 19, -17, -5, -18, -7, -20, -6, 1, -31, 0, -3, -39, -10, -22, -17, -29, 64, 13, 26, 35, 18, 12, -4, 13, -24, 1, -15
    0x4df05f4, 0xfbef1311, 0xfaecf9ee, 0xfd00e101, 0xefeaf6d9, 0x1a0d40e3, 0xfc0c1223, 0xf101e80d,
    // 14, 24, 13, 4, 25, -25, 36, 5, 17, -2, -2, 12, -3, -32, 14, 6, 2, -24, -10, 36, -27, -33, -20, 2, -6, -14, -12, 16, 1, -17, -2, 6
    0x40d180e, 0x524e719, 0xcfefe11, 0x60ee0fd, 0x24f6e802, 0x2ecdfe5, 0x10f4f2fa, 0x6feef01,
    // -4, -53, -6, 4, -27, -29, 0, -42, 60, 15, 14, -39, 7, 57, 6, 17, 8, 12, 19, -6, 49, -47, 49, -21, -4, -13, -5, -3, -27, 0, 6, -9
    0x4facbfc, 0xd600e3e5, 0xd90e0f3c, 0x11063907, 0xfa130c08, 0xeb31d131, 0xfdfbf3fc, 0xf70600e5,
    // -12, 64, -6, -23, 19, 63, 17, 9, -11, 10, -4, 16, -10, -24, -31, 9, 42, -6, 44, 13, -24, -6, -9, -35, 28, -22, -26, 12, 16, -17, 69, -58
    0xe9fa40f4, 0x9113f13, 0x10fc0af5, 0x9e1e8f6, 0xd2cfa2a, 0xddf7fae8, 0xce6ea1c, 0xc645ef10,
    // 2, 39, -29, -21, 26, -44, 12, -2, -54, 24, 14, 29, -9, -16, -22, 24, -11, -21, 2, -34, 38, 27, 27, 4, 13, 22, -13, -33, -1, 28, 5, -23
    0xebe32702, 0xfe0cd41a, 0x1d0e18ca, 0x18eaf0f7, 0xde02ebf5, 0x41b1b26, 0xdff3160d, 0xe9051cff,
    // -11, -15, -31, 12, 15, 22, -24, 22, -56, -33, 4, -21, -38, -29, -21, -8, -34, -46, -43, 18, -60, -2, -33, 13, -2, 29, 14, -32, 51, 21, -12, 7
    0xce1f1f5, 0x16e8160f, 0xeb04dfc8, 0xf8ebe3da, 0x12d5d2de, 0xddffec4, 0xe00e1dfe, 0x7f41533,
    // -20, -5, -3, -8, -26, 4, -11, -16, -7, -8, 7, 0, 5, 10, -17, 16, 42, 20, 16, 50, 14, 30, -15, -20, -19, 32, -47, -20, 22, -37, -16, 23
    0xf8fdfbec, 0xf0f504e6, 0x7f8f9, 0x10ef0a05, 0x3210142a, 0xecf11e0e, 0xecd120ed, 0x17f0db16,
    // -13, 8, -6, -6, 11, 18, 6, -20, -38, 12, -1, -6, -7, -31, 8, -7, -8, -68, 34, -58, 25, 34, 10, -14, 65, 8, 69, -18, -11, 17, 16, 11
    0xfafa08f3, 0xec06120b, 0xfaff0cda, 0xf908e1f9, 0xc622bcf8, 0xf20a2219, 0xee450841, 0xb1011f5,
    // 82, 36, 50, 14, -21, -40, 40, -10, 38, -49, -36, -85, -74, 46, 12, -44, -1, -6, -33, -9, 3, -15, -8, 38, -35, 0, -19, 8, 1, -9, -4, 8
    0xe322452, 0xf628d8eb, 0xabdccf26, 0xd40c2eb6, 0xf7dffaff, 0x26f8f103, 0x8ed00dd, 0x8fcf701,
    // -9, 17, -10, -31, 11, 12, 42, -14, 10, 17, -16, -7, 2, -6, -5, 4, 23, 65, 54, 25, 10, -36, 16, 5, 28, -13, -31, 14, -20, -6, 27, 34
    0xe1f611f7, 0xf22a0c0b, 0xf9f0110a, 0x4fbfa02, 0x19364117, 0x510dc0a, 0xee1f31c, 0x221bfaec,
    // -9, -11, -29, 10, 4, 11, -4, 2, -27, 2, 12, 17, 14, -17, 7, -7, 1, 4, -2, 30, 13, -10, 40, 20, 16, -7, -8, 19, -20, -8, 14, -22
    0xae3f5f7, 0x2fc0b04, 0x110c02e5, 0xf907ef0e, 0x1efe0401, 0x1428f60d, 0x13f8f910, 0xea0ef8ec,
    // 8, 16, -41, 19, -20, -79, 32, 23, 4, -60, -22, 26, -45, 39, 28, -36, 24, -24, 1, -5, 3, 6, 17, 16, -11, 4, 16, -8, 8, 25, -2, -5
    0x13d71008, 0x1720b1ec, 0x1aeac404, 0xdc1c27d3, 0xfb01e818, 0x10110603, 0xf81004f5, 0xfbfe1908,
    // 14, -31, 34, -39, 19, 58, 31, 5, 17, 40, 19, -16, -19, 49, -11, 17, -21, 43, 10, 58, 29, -20, 10, 30, 56, -34, 69, 12, -19, -8, 15, 46
    0xd922e10e, 0x51f3a13, 0xf0132811, 0x11f531ed, 0x3a0a2beb, 0x1e0aec1d, 0xc45de38, 0x2e0ff8ed,
    // 17, 30, 13, -12, 33, -25, 5, -2, -59, -41, 26, -1, -28, -16, -14, 4, 24, 3, 11, -13, -26, 8, 6, -14, -12, 1, 12, 20, 4, 11, 13, 14
    0xf40d1e11, 0xfe05e721, 0xff1ad7c5, 0x4f2f0e4, 0xf30b0318, 0xf20608e6, 0x140c01f4, 0xe0d0b04,
    // -52, 28, -22, -42, -58, 51, 33, 28, 16, 53, -8, -9, 68, 31, -29, 0, -46, 3, -1, -24, -36, -5, 27, 29, 8, 22, 13, -17, 20, 7, -13, -4
    0xd6ea1ccc, 0x1c2133c6, 0xf7f83510, 0xe31f44, 0xe8ff03d2, 0x1d1bfbdc, 0xef0d1608, 0xfcf30714,
    // -16, -5, 13, 25, -4, -10, 2, -7, -14, -25, -14, 17, -4, -35, 11, -8, -13, -29, -18, 40, -22, 71, -2, -12, -8, -27, -23, -1, 10, -4, 2, -7
    0x190dfbf0, 0xf902f6fc, 0x11f2e7f2, 0xf80bddfc, 0x28eee3f3, 0xf4fe47ea, 0xffe9e5f8, 0xf902fc0a,
    // 7, -25, -17, 32, -5, 7, -13, 21, 22, -4, 5, -11, 6, 11, -15, 3, -1, 33, -20, 7, 51, -71, -20, 48, -39, 64, 6, -19, -18, 31, -25, -3
    0x20efe707, 0x15f307fb, 0xf505fc16, 0x3f10b06, 0x7ec21ff, 0x30ecb933, 0xed0640d9, 0xfde71fee,
    // 34, 4, -16, -40, -63, -8, 19, -32, -26, -26, 50, 58, -48, 39, 1, 3, 14, 26, 49, 32, -52, 39, 0, -15, 67, -24, -47, 8, 50, -27, 42, 26
    0xd8f00422, 0xe013f8c1, 0x3a32e6e6, 0x30127d0, 0x20311a0e, 0xf10027cc, 0x8d1e843, 0x1a2ae532,
    // -8, -5, 12, 4, 34, -9, -7, -11, 14, 7, -37, -16, 17, 17, 22, -18, -3, -44, -20, -11, 40, -47, -25, 33, -50, 5, 22, 17, -7, 15, -26, 5
    0x40cfbf8, 0xf5f9f722, 0xf0db070e, 0xee161111, 0xf5ecd4fd, 0x21e7d128, 0x111605ce, 0x5e60ff9,
    // -28, 19, 16, -26, -30, -9, 18, 25, 14, 21, 10, 25, 8, -2, 3, -1, -40, -29, -38, 30, -61, -24, 28, 14, 9, -40, 9, -1, -7, 2, 24, -11
    0xe61013e4, 0x1912f7e2, 0x190a150e, 0xff03fe08, 0x1edae3d8, 0xe1ce8c3, 0xff09d809, 0xf51802f9,
    // -7, -24, 6, 0, -11, -33, -8, 13, 2, -13, 19, 48, 7, 3, 5, 15, 5, 8, 23, -18, 7, -9, -9, 2, 3, 5, -4, -7, 8, 1, -36, 4
    0x6e8f9, 0xdf8dff5, 0x3013f302, 0xf050307, 0xee170805, 0x2f7f707, 0xf9fc0503, 0x4dc0108,
    // 8, 5, 44, -27, 42, 58, 29, -19, 25, 19, 26, 36, 0, 10, -3, 30, -39, 8, -29, 47, 26, 45, -9, 53, -80, 39, -38, -38, 24, 22, -43, -62
    0xe52c0508, 0xed1d3a2a, 0x241a1319, 0x1efd0a00, 0x2fe308d9, 0x35f72d1a, 0xdada27b0, 0xc2d51618,
    // 42, -46, 4, -16, -41, -73, 2, 2, 16, -23, -31, -26, -27, 17, 25, 11, 16, 10, 5, 8, 9, 15, -8, 1, -14, -6, -19, -26, -17, -19, -10, 2
    0xf004d22a, 0x202b7d7, 0xe6e1e910, 0xb1911e5, 0x8050a10, 0x1f80f09, 0xe6edfaf2, 0x2f6edef,
    // 0, -15, -18, -5, -20, 28, -12, 30, 26, 8, -5, -1, -24, 9, 19, 4, 20, 45, 39, 11, 10, -19, 14, 19, 47, -3, -3, 42, 27, -11, 26, -4
    0xfbeef100, 0x1ef41cec, 0xfffb081a, 0x41309e8, 0xb272d14, 0x130eed0a, 0x2afdfd2f, 0xfc1af51b,
    // 8, -13, -6, 12, -20, 3, -5, 4, 1, -15, 2, 15, -17, 43, -5, 2, 47, 11, -20, -31, 14, -45, -21, -13, 38, 14, 25, 3, 17, 57, -16, 39
    0xcfaf308, 0x4fb03ec, 0xf02f101, 0x2fb2bef, 0xe1ec0b2f, 0xf3ebd30e, 0x3190e26, 0x27f03911,
    // 16, 38, 14, -4, 9, -26, 9, -37, 0, 24, -9, 3, 8, 2, -20, 39, 42, 37, -1, 28, -29, 3, 15, 18, -44, -9, -28, -13, -35, 13, -3, 8
    0xfc0e2610, 0xdb09e609, 0x3f71800, 0x27ec0208, 0x1cff252a, 0x120f03e3, 0xf3e4f7d4, 0x8fd0ddd,
    // -16, -30, -55, -12, -11, 52, -31, 22, -34, -42, 23, 34, 42, 18, -56, 3, -3, 16, 6, 38, -50, 16, -22, -9, 27, 28, 10, 4, 49, 29, -21, 41
    0xf4c9e2f0, 0x16e134f5, 0x2217d6de, 0x3c8122a, 0x260610fd, 0xf7ea10ce, 0x40a1c1b, 0x29eb1d31,
    // 4, 1, -12, -3, -7, 30, 2, 13, -5, -18, 13, -5, -36, 12, -5, -13, 36, 63, -17, 0, 10, 7, 15, -2, 57, -54, 15, 40, -22, 36, 24, 13
    0xfdf40104, 0xd021ef9, 0xfb0deefb, 0xf3fb0cdc, 0xef3f24, 0xfe0f070a, 0x280fca39, 0xd1824ea,
    // 15, 31, 13, 32, -22, -7, -9, 26, 36, 9, -17, 40, 33, 35, 22, 30, -1, 5, 3, -12, 4, 3, -11, -9, 12, 14, 8, -11, -1, 24, -17, 6
    0x200d1f0f, 0x1af7f9ea, 0x28ef0924, 0x1e162321, 0xf40305ff, 0xf7f50304, 0xf5080e0c, 0x6ef18ff,
    // -23, 20, 21, 20, -35, -55, 55, 14, 4, -16, -1, -36, -21, 7, -6, 13, -30, -6, -31, 22, -18, -8, 3, 11, 19, 5, 27, -2, 22, 4, -8, -2
    0x141514e9, 0xe37c9dd, 0xdcfff004, 0xdfa07eb, 0x16e1fae2, 0xb03f8ee, 0xfe1b0513, 0xfef80416,
    // 3, -34, -15, -25, 4, 55, -33, -22, -19, -52, 3, -21, 23, -31, -12, 13, 30, 50, 32, -4, 28, 21, -19, -45, 47, -20, 14, -5, 28, 28, -47, -34
    0xe7f1de03, 0xeadf3704, 0xeb03cced, 0xdf4e117, 0xfc20321e, 0xd3ed151c, 0xfb0eec2f, 0xded11c1c,
    // 41, -4, 53, 12, -27, -63, -15, 2, 31, 45, -23, 24, 46, -10, 46, 50, -2, 9, -15, 9, 10, 6, -5, 2, 4, -7, 1, -6, 10, -5, 27, -7
    0xc35fc29, 0x2f1c1e5, 0x18e92d1f, 0x322ef62e, 0x9f109fe, 0x2fb060a, 0xfa01f904, 0xf91bfb0a,
    // -11, -4, -25, -20, 31, 46, 14, 37, -26, 24, 16, 0, 6, 20, -40, -29, -6, -2, 9, -18, 10, -14, 3, -15, -27, -9, -3, -15, -12, 2, -6, -7
    0xece7fcf5, 0x250e2e1f, 0x1018e6, 0xe3d81406, 0xee09fefa, 0xf103f20a, 0xf1fdf7e5, 0xf9fa02f4,
    // 1, -5, 22, -17, 17, 7, 26, 21, 2, 13, 1, -6, -8, -7, 10, -18, -18, -13, -7, -12, -22, 27, 18, -22, 20, -63, -4, 4, -75, 8, 40, -1
    0xef16fb01, 0x151a0711, 0xfa010d02, 0xee0af9f8, 0xf4f9f3ee, 0xea121bea, 0x4fcc114, 0xff2808b5,
    // -13, 34, -24, 39, -15, 40, -31, 20, 4, 5, 5, 47, 29, -41, 1, 14, -19, 61, -21, 36, 20, 10, -1, -43, -56, -6, -26, 34, 23, -23, -47, 32
    0x27e822f3, 0x14e128f1, 0x2f050504, 0xe01d71d, 0x24eb3ded, 0xd5ff0a14, 0x22e6fac8, 0x20d1e917,
    // 8, -28, 28, -1, 46, -10, -19, 15, 0, -29, 19, 12, -53, -5, 47, -46, 11, -17, -88, 6, -26, 0, -35, 61, 12, 38, -29, -4, -1, 6, -3, 26
    0xff1ce408, 0xfedf62e, 0xc13e300, 0xd22ffbcb, 0x6a8ef0b, 0x3ddd00e6, 0xfce3260c, 0x1afd06ff,
    // -26, -6, -8, -11, -18, -25, -29, -4, -5, -11, 18, -8, -2, -8, -33, -2, -45, 6, 2, -40, -8, -26, 35, 7, 37, 42, 0, 5, 16, 10, 25, 17
    0xf5f8fae6, 0xfce3e7ee, 0xf812f5fb, 0xfedff8fe, 0xd80206d3, 0x723e6f8, 0x5002a25, 0x11190a10,
    // -22, 7, 17, -15, 11, 5, 22, -19, 2, -4, 5, -18, 1, -15, 2, -20, 2, 6, -2, -4, 7, 3, -6, -6, -20, 7, -4, 2, 16, -6, -9, 10
    0xf11107ea, 0xed16050b, 0xee05fc02, 0xec02f101, 0xfcfe0602, 0xfafa0307, 0x2fc07ec, 0xaf7fa10,
    // -15, -3, -14, -14, 12, 27, -20, -1, -22, 7, 20, -9, 26, 1, -20, -11, 22, 3, -1, -12, 32, -8, 17, -22, -23, -13, -21, -19, -20, 10, -6, -3
    0xf2f2fdf1, 0xffec1b0c, 0xf71407ea, 0xf5ec011a, 0xf4ff0316, 0xea11f820, 0xedebf3e9, 0xfdfa0aec,
    // -28, 62, -14, -21, 7, 34, 13, -3, -92, -7, -15, -17, 45, -17, -67, 24, -10, -42, -32, -40, -41, -6, 27, -45, 37, 5, 44, -92, -46, 56, 18, -35
    0xebf23ee4, 0xfd0d2207, 0xeff1f9a4, 0x18bdef2d, 0xd8e0d6f6, 0xd31bfad7, 0xa42c0525, 0xdd1238d2,
    // 46, -43, 34, 36, 47, -10, 3, 29, 97, -46, 38, 34, -34, -47, 52, -2, -2, 13, 4, -16, 8, 4, 13, 9, -6, 6, 3, 0, 20, -18, 0, 4
    0x2422d52e, 0x1d03f62f, 0x2226d261, 0xfe34d1de, 0xf0040dfe, 0x90d0408, 0x306fa, 0x400ee14,
    // -30, -5, -20, -21, -39, -17, 19, 4, 5, 26, -2, -16, 6, 14, 17, 17, 12, 28, -7, 35, -11, -5, 26, 15, 46, 17, -23, 38, 26, -8, 8, 10
    0xebecfbe2, 0x413efd9, 0xf0fe1a05, 0x11110e06, 0x23f91c0c, 0xf1afbf5, 0x26e9112e, 0xa08f81a,
    // -6, 30, 25, -1, 8, -7, 3, 0, -21, 16, -14, -3, 11, -29, -13, -5, -17, 18, 9, 6, -16, -54, 8, -1, -38, 46, -16, 28, 13, -12, -12, -7
    0xff191efa, 0x3f908, 0xfdf210eb, 0xfbf3e30b, 0x60912ef, 0xff08caf0, 0x1cf02eda, 0xf9f4f40d,
    // -4, 3, 16, 12, -10, 2, -18, 2, 2, 24, 8, 18, 21, 16, 2, 2, -41, 50, -26, -26, 29, 43, 18, -11, -41, 55, 25, 26, 13, 11, -47, 5
    0xc1003fc, 0x2ee02f6, 0x12081802, 0x2021015, 0xe6e632d7, 0xf5122b1d, 0x1a1937d7, 0x5d10b0d,
    // -27, -128, -33, -30, -33, -26, 12, -8, 56, -21, 38, -54, 9, 80, 28, 21, 11, 12, -13, -31, -4, -27, 23, 10, -15, -20, -32, -27, -18, -6, 27, 1
    0xe2df80e5, 0xf80ce6df, 0xca26eb38, 0x151c5009, 0xe1f30c0b, 0xa17e5fc, 0xe5e0ecf1, 0x11bfaee,
    // 21, -23, 11, 15, -1, 3, -14, -15, -18, -14, -13, -23, -17, -15, 9, 6, 37, 38, 8, 22, -2, 24, -38, -53, 20, -48, 30, 36, -23, 20, 10, -27
    0xf0be915, 0xf1f203ff, 0xe9f3f2ee, 0x609f1ef, 0x16082625, 0xcbda18fe, 0x241ed014, 0xe50a14e9,
    // 27, -22, 10, 7, 30, 2, -8, 6, 7, -24, -14, -4, -33, 1, -11, -1, 32, -4, 40, -30, 29, 21, 32, 3, 22, 22, 4, 9, 18, -1, 0, 0
    0x70aea1b, 0x6f8021e, 0xfcf2e807, 0xfff501df, 0xe228fc20, 0x320151d, 0x9041616, 0xff12,
    // -9, -66, 14, -11, -9, -12, 16, -20, -13, -16, 35, 35, -5, 59, -17, -2, 34, 2, 14, 15, -13, -4, 34, 24, 47, -1, 22, 7, 6, 53, -4, 17
    0xf50ebef7, 0xec10f4f7, 0x2323f0f3, 0xfeef3bfb, 0xf0e0222, 0x1822fcf3, 0x716ff2f, 0x11fc3506,
    // 10, 21, -12, 11, 0, -7, 34, 25, -16, 28, -56, -16, -2, 49, -28, -14, 30, -57, -8, 47, -54, -52, -23, -67, -42, 34, -39, -48, -1, 32, 25, -21
    0xbf4150a, 0x1922f900, 0xf0c81cf0, 0xf2e431fe, 0x2ff8c71e, 0xbde9ccca, 0xd0d922d6, 0xeb1920ff,
    // 37, 22, 24, 9, 44, 5, 1, 3, -23, -45, -27, 7, -3, 37, -12, -20, 35, -36, -10, 19, -2, -12, 17, 5, 21, -20, 28, 23, 13, 43, 17, -2
    0x9181625, 0x301052c, 0x7e5d3e9, 0xecf425fd, 0x13f6dc23, 0x511f4fe, 0x171cec15, 0xfe112b0d,
    // 3, 4, 24, 62, 11, -7, 9, 80, 0, 18, -1, -17, 15, -13, 4, -12, 24, -56, 4, -10, 48, -1, 42, 10, -11, -22, 14, -22, -43, -3, -12, -16
    0x3e180403, 0x5009f90b, 0xefff1200, 0xf404f30f, 0xf604c818, 0xa2aff30, 0xea0eeaf5, 0xf0f4fdd5,
    // -9, -2, -19, 14, -18, 16, 21, -8, -6, -2, -2, -1, -24, 27, 2, 19, -22, 31, -22, 5, -10, 23, 25, -6, 52, -39, 8, 2, -15, 48, -8, 46
    0xeedfef7, 0xf81510ee, 0xfffefefa, 0x13021be8, 0x5ea1fea, 0xfa1917f6, 0x208d934, 0x2ef830f1,
    // 3, 22, -8, -7, 12, 8, -20, 15, -27, -4, -20, -17, -3, -15, -24, 8, 5, -5, -12, -19, 24, -64, 1, 33, -2, 53, 20, 17, 26, 0, 15, 14
    0xf9f81603, 0xfec080c, 0xefecfce5, 0x8e8f1fd, 0xedf4fb05, 0x2101c018, 0x111435fe, 0xe0f001a,
    // 44, -3, 7, -41, -59, 5, 31, -49, 69, 27, 0, 22, 36, 15, 37, 14, -32, -9, -16, -3, 29, 37, 25, -67, -20, -34, -9, -28, 2, 21, -30, -20
    0xd707fd2c, 0xcf1f05c5, 0x16001b45, 0xe250f24, 0xfdf0f7e0, 0xbd19251d, 0xe4f7deec, 0xece21502,
    // -26, 39, -12, -26, 5, 3, 1, -14, -17, 8, 0, -28, 19, -15, -13, 4, 4, 30, -17, 10, -24, -24, 8, -13, 3, -3, -11, -56, -6, 22, -18, 23
    0xe6f427e6, 0xf2010305, 0xe40008ef, 0x4f3f113, 0xaef1e04, 0xf308e8e8, 0xc8f5fd03, 0x17ee16fa,
    // 12, 6, 11, 11, 38, -7, 6, -1, -14, -2, 5, 17, -22, 2, 11, 17, -4, 17, -1, 1, -4, -17, 30, 21, 1, 2, 6, 23, -15, 2, 5, 3
    0xb0b060c, 0xff06f926, 0x1105fef2, 0x110b02ea, 0x1ff11fc, 0x151eeffc, 0x17060201, 0x30502f1,
    // -37, 14, 13, 3, 8, 55, 9, -10, -56, -7, 4, 11, 36, -33, -43, 3, 9, -14, 9, -7, -6, 23, -41, -3, 6, 11, 14, -5, 24, 25, 4, 0
    0x30d0edb, 0xf6093708, 0xb04f9c8, 0x3d5df24, 0xf909f209, 0xfdd717fa, 0xfb0e0b06, 0x41918,
    // 10, -37, -9, -21, -20, -8, 45, -19, 29, -14, -13, -22, 26, 38, 21, 1, 10, 8, -31, 17, -19, 19, -46, -12, 57, -29, 35, -55, 8, 1, -36, -48
    0xebf7db0a, 0xed2df8ec, 0xeaf3f21d, 0x115261a, 0x11e1080a, 0xf4d213ed, 0xc923e339, 0xd0dc0108,
    // -61, 29, -27, -16, 1, -1, 23, 8, -72, 19, 34, -56, -17, -22, -25, 11, 23, -23, -14, 81, 14, -32, -54, -13, -17, -22, -14, 11, -15, 7, -7, -13
    0xf0e51dc3, 0x817ff01, 0xc82213b8, 0xbe7eaef, 0x51f2e917, 0xf3cae00e, 0xbf2eaef, 0xf3f907f1,
    // 39, -16, -21, -7, 40, -48, -14, 45, 58, -10, 11, 65, 26, 7, 14, 27, -38, 15, 10, -17, -37, 4, 31, 14, 16, 22, -2, -8, 21, 6, 0, -18
    0xf9ebf027, 0x2df2d028, 0x410bf63a, 0x1b0e071a, 0xef0a0fda, 0xe1f04db, 0xf8fe1610, 0xee000615,
};
static const uint embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // 6.473e-05, -0.0002433, -7.266e-05, 7.31e-05, 7.886e-05, -1.734e-05, -3.934e-05, 4.03e-05, -0.0002083, -9.92e-05, 0.0001792, 0.00011545, 7.254e-05, -0.0002278, 0.00011903, -0.0001216
    0x8bf9043e, 0x4ca84c3, 0x8123052b, 0x2a48294, 0x86808ad3, 0x79109df, 0x8b7704c1, 0x87f807cd,
};
static const uint embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -33, 37, 24, -31, 25, 48, -31, 15, -9, -9, 5, 5, 22, -8, 14, 47, -75, 50, -2, -10, -5, -4, -28, -16, 1, -26, -5, -30, -7, 5, 7, 4
    0xe11825df, 0xfe13019, 0x505f7f7, 0x2f0ef816, 0xf6fe32b5, 0xf0e4fcfb, 0xe2fbe601, 0x40705f9,
    // 21, 25, -23, 4, -61, -18, -31, 34, -32, 7, -15, -21, -34, -19, 12, 2, -65, 86, -88, 14, -17, -24, -23, 35, -15, -58, -66, -19, 19, 25, 1, -44
    0x4e91915, 0x22e1eec3, 0xebf107e0, 0x20cedde, 0xea856bf, 0x23e9e8ef, 0xedbec6f1, 0xd4011913,
    // -60, -3, -29, -13, -6, -77, -43, -39, -38, 48, 52, 5, -25, -45, -49, -32, 12, 17, 12, -14, -1, -30, -45, 9, -17, 17, -11, -6, -9, 8, 10, -22
    0xf3e3fdc4, 0xd9d5b3fa, 0x53430da, 0xe0cfd3e7, 0xf20c110c, 0x9d3e2ff, 0xfaf511ef, 0xea0a08f7,
    // -21, 6, 9, -13, 82, 21, -37, 6, 5, -27, -2, -71, -34, -24, -5, 34, -76, 41, -11, -10, 7, -24, -13, -4, -11, -4, -5, -31, -8, -24, 35, -39
    0xf30906eb, 0x6db1552, 0xb9fee505, 0x22fbe8de, 0xf6f529b4, 0xfcf3e807, 0xe1fbfcf5, 0xd923e8f8,
    // -35, 38, -38, -3, 21, -67, -32, -33, 14, -31, -62, -72, 0, -15, -28, 86, -41, 21, -14, -7, -1, 2, -70, 7, -17, 6, 3, -19, -1, 3, 46, -44
    0xfdda26dd, 0xdfe0bd15, 0xb8c2e10e, 0x56e4f100, 0xf9f215d7, 0x7ba02ff, 0xed0306ef, 0xd42e03ff,
    // -48, -29, -33, 91, -28, 16, -62, -66, 4, -101, 57, 17, 47, 41, 37, 8, -46, 23, 7, 20, 6, 6, 20, -3, 2, 15, 13, -31, -20, 10, 29, 9
    0x5bdfe3d0, 0xbec210e4, 0x11399b04, 0x825292f, 0x140717d2, 0xfd140606, 0xe10d0f02, 0x91d0aec,
    // -17, -45, -48, -52, -17, 16, -62, 19, -18, -34, -63, 21, -61, 21, 6, -19, -41, 28, -32, -15, 42, 5, -59, -25, -14, 80, 0, 38, -18, 60, 33, -68
    0xccd0d3ef, 0x13c210ef, 0x15c1deee, 0xed0615c3, 0xf1e01cd7, 0xe7c5052a, 0x260050f2, 0xbc213cee,
    // 33, -48, -2, 35, -48, -32, 63, -10, 6, 40, 24, 37, -17, 13, 16, -78, -32, 13, 31, -30, 2, 0, -24, -1, -6, 10, -4, -23, -4, -7, 34, 2
    0x23fed021, 0xf63fe0d0, 0x25182806, 0xb2100def, 0xe21f0de0, 0xffe80002, 0xe9fc0afa, 0x222f9fc,
    // -7, -13, 20, 18, -5, -7, 6, -15, -18, -16, 9, -11, 22, 1, -12, 5, -28, 74, -105, 33, 38, 17, -21, 29, 33, 6, -94, 27, -42, 1, 7, 6
    0x1214f3f9, 0xf106f9fb, 0xf509f0ee, 0x5f40116, 0x21974ae4, 0x1deb1126, 0x1ba20621, 0x60701d6,
    // -27, 42, 36, -35, -34, -13, 47, -5, 26, -7, 25, 74, 53, -13, -44, -9, -53, 33, 44, -42, -7, -14, -7, -2, 1, -22, -30, -27, -4, -13, 18, 7
    0xdd242ae5, 0xfb2ff3de, 0x4a19f91a, 0xf7d4f335, 0xd62c21cb, 0xfef9f2f9, 0xe5e2ea01, 0x712f3fc,
    // -46, -50, -32, -9, -1, 16, -7, -48, -30, 12, -21, 6, 50, -3, -3, 25, -79, -36, 40, -17, -35, -17, 38, 25, -9, -17, 38, 29, -32, 7, -7, -40
    0xf7e0ced2, 0xd0f910ff, 0x6eb0ce2, 0x19fdfd32, 0xef28dcb1, 0x1926efdd, 0x1d26eff7, 0xd8f907e0,
    // -15, -83, 53, -40, -23, 14, 36, 45, -45, 14, -6, -14, 53, -2, 20, 53, 6, 18, -33, 63, -7, -1, -55, 34, -31, 9, -6, -39, -22, -5, 15, -6
    0xd835adf1, 0x2d240ee9, 0xf2fa0ed3, 0x3514fe35, 0x3fdf1206, 0x22c9fff9, 0xd9fa09e1, 0xfa0ffbea,
    // 68, -5, -61, -73, 0, -55, 77, -81, -58, -85, 67, -12, -51, -1, 42, 34, -60, -9, 27, -59, -8, 53, -78, 0, -25, -69, -35, 22, -5, 36, -6, -60
    0xb7c3fb44, 0xaf4dc900, 0xf443abc6, 0x222affcd, 0xc51bf7c4, 0xb235f8, 0x16ddbbe7, 0xc4fa24fb,
    // -46, -63, 83, -58, -32, 26, -53, -19, -3, 45, 83, -13, 12, 5, 51, 4, -62, 68, 11, 13, -18, -6, -50, -19, -17, -61, -55, -63, -9, 0, -4, 3
    0xc653c1d2, 0xedcb1ae0, 0xf3532dfd, 0x433050c, 0xd0b44c2, 0xedcefaee, 0xc1c9c3ef, 0x3fc00f7,
    // -2, 6, -10, 4, -3, 1, -6, 11, -7, -8, 18, -10, -3, -3, -25, 2, 27, 2, 9, 1, -10, 73, -30, 24, 33, -73, -1, -26, 41, 35, 39, 47
    0x4f606fe, 0xbfa01fd, 0xf612f8f9, 0x2e7fdfd, 0x109021b, 0x18e249f6, 0xe6ffb721, 0x2f272329,
    // -59, 64, 14, -57, 37, -40, -28, 38, 31, -89, -10, 3, 68, 4, -50, 33, -92, 38, 12, -20, 13, -27, -24, 30, -18, -25, -24, -61, -6, -20, 60, -72
    0xc70e40c5, 0x26e4d825, 0x3f6a71f, 0x21ce0444, 0xec0c26a4, 0x1ee8e50d, 0xc3e8e7ee, 0xb83cecfa,
    // 4, 22, -27, -17, 17, -3, -2, 12, -3, 4, -6, 12, -18, -13, -2, 3, 62, -64, 30, 19, -29, -23, 16, -36, -26, 53, 72, 59, 12, 72, -19, 11
    0xefe51604, 0xcfefd11, 0xcfa04fd, 0x3fef3ee, 0x131ec03e, 0xdc10e9e3, 0x3b4835e6, 0xbed480c,
    // -32, -2, -18, 36, 42, -29, -22, -69, -30, 15, -6, 38, -18, -78, -26, -59, -9, 50, 31, 1, -24, -8, 4, 4, 2, -26, -50, -6, 5, -8, 8, 9
    0x24eefee0, 0xbbeae32a, 0x26fa0fe2, 0xc5e6b2ee, 0x11f32f7, 0x404f8e8, 0xfacee602, 0x908f805,
    // -12, -68, 60, 3, 45, 15, -5, -48, 14, -37, 21, 18, 1, -44, -3, -18, 32, 50, -6, 20, -66, 24, 11, 66, 3, 10, -27, -52, -28, 5, -24, 36
    0x33cbcf4, 0xd0fb0f2d, 0x1215db0e, 0xeefdd401, 0x14fa3220, 0x420b18be, 0xcce50a03, 0x24e805e4,
    // 28, 16, -5, -22, -12, -3, -10, -8, -2, 4, -21, 3, 20, -15, 10, -11, -72, 15, -18, 23, 14, -55, 39, 68, 2, 39, -1, 56, -22, 4, -5, -59
    0xeafb101c, 0xf8f6fdf4, 0x3eb04fe, 0xf50af114, 0x17ee0fb8, 0x4427c90e, 0x38ff2702, 0xc5fb04ea,
    // 11, -15, -14, 18, -30, -54, 21, -12, 29, 9, -24, -32, 0, 25, -27, -4, -54, 75, -29, -25, 5, -22, -87, 23, -13, -58, -24, -6, -32, 18, 29, -11
    0x12f2f10b, 0xf415cae2, 0xe0e8091d, 0xfce51900, 0xe7e34bca, 0x17a9ea05, 0xfae8c6f3, 0xf51d12e0,
    // 29, -33, 83, 48, -31, -16, -29, -75, -47, 16, -28, 49, -51, -25, -69, 83, -13, 56, -12, -30, 5, -1, -93, 8, -29, 42, -10, -19, -11, 6, 10, 15
    0x3053df1d, 0xb5e3f0e1, 0x31e410d1, 0x53bbe7cd, 0xe2f438f3, 0x8a3ff05, 0xedf62ae3, 0xf0a06f5,
    // -88, -12, 79, -20, -46, -63, 14, -69, -38, -27, -58, -29, -33, -38, -10, -48, -39, 5, 8, -59, -1, 3, -33, 4, -22, 6, 10, 19, -19, 13, 2, -43
    0xec4ff4a8, 0xbb0ec1d2, 0xe3c6e5da, 0xd0f6dadf, 0xc50805d9, 0x4df03ff, 0x130a06ea, 0xd5020ded,
    // -42, -57, -34, 8, -69, -33, 36, 13, 41, 10, 36, -17, 0, -47, -56, 37, -4, 21, 7, -44, 20, -10, -43, 13, -24, -2, -4, 10, -12, 5, -2, -18
    0x8dec7d6, 0xd24dfbb, 0xef240a29, 0x25c8d100, 0xd40715fc, 0xdd5f614, 0xafcfee8, 0xeefe05f4,
    // -52, -20, -10, 21, -35, 38, -5, -60, -17, 29, 52, -101, -52, -14, -8, 21, -19, 28, 30, -69, -6, -41, -31, 20, 2, 1, -17, 33, 1, -2, 17, 5
    0x15f6eccc, 0xc4fb26dd, 0x9b341def, 0x15f8f2cc, 0xbb1e1ced, 0x14e1d7fa, 0x21ef0102, 0x511fe01,
    // 9, 11, 5, -11, -26, -14, -5, 2, -24, -14, -17, -13, -1, -7, -24, -6, -59, 53, 15, 10, 31, 32, -66, -16, -27, -68, -66, -56, 24, -1, -4, -107
    0xf5050b09, 0x2fbf2e6, 0xf3eff2e8, 0xfae8f9ff, 0xa0f35c5, 0xf0be201f, 0xc8bebce5, 0x95fcff18,
    // -13, 2, 4, 25, 22, -41, 34, -3, -12, 10, 11, 24, -37, 37, 37, 44, 17, 43, -24, -6, 19, -18, 14, 29, 29, -89, -25, 40, 0, 0, 1, -36
    0x190402f3, 0xfd22d716, 0x180b0af4, 0x2c2525db, 0xfae82b11, 0x1d0eee13, 0x28e7a71d, 0xdc010000,
    // 2, 1, 11, 10, 8, 16, 11, -16, -11, -15, 13, 1, -6, 18, -16, 0, -17, 51, -10, 55, -15, -26, -19, 7, 15, 25, -104, 15, 21, 6, 41, 11
    0xa0b0102, 0xf00b1008, 0x10df1f5, 0xf012fa, 0x37f633ef, 0x7ede6f1, 0xf98190f, 0xb290615,
    // -10, -23, 21, -2, -11, -3, -24, -11, -27, -9, -1, -7, 8, -20, -31, -19, -29, -15, -44, -50, -103, -45, -30, -23, 81, -10, -15, -45, 33, 42, 89, -19
    0xfe15e9f6, 0xf5e8fdf5, 0xf9fff7e5, 0xede1ec08, 0xced4f1e3, 0xe9e2d399, 0xd3f1f651, 0xed592a21,
    // -20, -27, 24, 7, 3, 2, 4, -20, -6, 5, 12, 13, 13, -27, 8, 7, 46, -53, -11, 71, 9, 21, 17, 46, -47, 23, -25, -14, 15, 39, -22, -18
    0x718e5ec, 0xec040203, 0xd0c05fa, 0x708e50d, 0x47f5cb2e, 0x2e111509, 0xf2e717d1, 0xeeea270f,
    // 45, 56, 48, 75, 38, -8, 82, -61, -21, 75, 65, -40, 80, -44, -41, 36, -46, 20, -11, -25, 4, -12, -87, 17, -43, -12, -67, -42, -27, 27, -5, 37
    0x4b30382d, 0xc352f826, 0xd8414beb, 0x24d7d450, 0xe7f514d2, 0x11a9f404, 0xd6bdf4d5, 0x25fb1be5,
    // -20, -9, 37, 19, -19, -34, 11, 9, -34, -43, 12, -3, -12, -5, 11, 16, 11, 30, -13, 3, -68, -38, -24, 6, 93, -12, -20, -26, -12, -1, 19, 18
    0x1325f7ec, 0x90bdeed, 0xfd0cd5de, 0x100bfbf4, 0x3f31e0b, 0x6e8dabc, 0xe6ecf45d, 0x1213fff4,
    // 34, 34, 9, -24, -25, -15, 15, 45, 15, -13, -3, -11, -54, 12, -56, -33, -77, 35, -27, 62, -5, -28, 2, -27, -8, -50, -39, -20, 0, 1, 33, -61
    0xe8092222, 0x2d0ff1e7, 0xf5fdf30f, 0xdfc80cca, 0x3ee523b3, 0xe502e4fb, 0xecd9cef8, 0xc3210100,
    // 39, -9, -5, -14, 21, 0, -8, -34, 0, -20, -1, -3, 15, 11, -32, -6, 6, 1, -3, 21, -2, -71, -58, -59, 80, 29, 10, 90, -30, -75, 15, -41
    0xf2fbf727, 0xdef80015, 0xfdffec00, 0xfae00b0f, 0x15fd0106, 0xc5c6b9fe, 0x5a0a1d50, 0xd70fb5e2,
    // -28, -26, -61, 28, 23, 66, 75, -94, -37, 64, -57, 11, 61, 69, -44, 33, -63, -15, -41, -19, 9, 57, -50, 25, -20, 39, 34, -10, -19, 31, 65, -27
    0x1cc3e6e4, 0xa24b4217, 0xbc740db, 0x21d4453d, 0xedd7f1c1, 0x19ce3909, 0xf62227ec, 0xe5411fed,
    // -40, -79, 26, 31, 5, -16, 4, -45, -74, -9, 19, 28, 25, -44, -24, 30, -60, -13, 88, -51, -56, 7, -87, -34, 0, -86, 44, -29, -39, 2, -14, 20
    0x1f1ab1d8, 0xd304f005, 0x1c13f7b6, 0x1ee8d419, 0xcd58f3c4, 0xdea907c8, 0xe32caa00, 0x14f202d9,
    // 6, -31, 22, -1, 1, 20, -2, -6, 4, 2, 25, -21, -15, -14, -23, -27, -8, -47, 56, -4, -14, 26, 4, 2, -14, 34, 75, -1, 0, -24, -24, 30
    0xff16e106, 0xfafe1401, 0xeb190204, 0xe5e9f2f1, 0xfc38d1f8, 0x2041af2, 0xff4b22f2, 0x1ee8e800,
    // -9, -20, 35, 14, 26, -10, 13, -37, -8, -22, 16, -1, 10, -4, -1, 11, 8, -27, 47, 0, 15, 8, -32, -88, -36, 58, 23, 20, 20, -38, 7, 26
    0xe23ecf7, 0xdb0df61a, 0xff10eaf8, 0xbfffc0a, 0x2fe508, 0xa8e0080f, 0x14173adc, 0x1a07da14,
    // 62, 9, 57, 50, -60, 59, 45, 23, -67, 18, 60, 76, -6, 27, 2, -62, -66, 36, 29, -55, 13, -5, -16, -15, -1, 65, -7, 10, -25, 51, 45, 14
    0x3239093e, 0x172d3bc4, 0x4c3c12bd, 0xc2021bfa, 0xc91d24be, 0xf1f0fb0d, 0xaf941ff, 0xe2d33e7,
    // -12, 50, 15, -9, -57, 50, 1, 3, 4, -22, 52, -14, -37, -43, -29, -19, -83, 78, -31, -33, -8, -28, -37, -18, 18, -87, -94, 57, -38, 24, -11, 10
    0xf70f32f4, 0x30132c7, 0xf234ea04, 0xede3d5db, 0xdfe14ead, 0xeedbe4f8, 0x39a2a912, 0xaf518da,
    // 20, -101, 51, 11, 26, 19, 20, 78, -105, -58, -5, 0, 62, -38, -74, 27, -23, 26, 31, -6, 5, -27, -10, 0, -11, -6, -2, -10, -21, 37, 14, -17
    0xb339b14, 0x4e14131a, 0xfbc697, 0x1bb6da3e, 0xfa1f1ae9, 0xf6e505, 0xf6fefaf5, 0xef0e25eb,
    // 15, -44, 29, 53, -10, 12, 16, 9, -10, -86, -11, 13, 34, -121, 31, 16, 12, 26, 39, -45, -11, -14, -16, 9, 9, 6, -28, -1, 0, -26, 23, 11
    0x351dd40f, 0x9100cf6, 0xdf5aaf6, 0x101f8722, 0xd3271a0c, 0x9f0f2f5, 0xffe40609, 0xb17e600,
    // 26, -5, 8, -2, -30, 33, -26, -28, 20, -12, -11, -28, 51, -34, -25, -50, -56, 3, -81, 22, 24, 18, -8, -11, -10, 31, -12, 17, 6, -29, 4, 35
    0xfe08fb1a, 0xe4e621e2, 0xe4f5f414, 0xcee7de33, 0x16af03c8, 0xf5f81218, 0x11f41ff6, 0x2304e306,
    // 57, -72, -3, -19, 19, -71, -28, -27, 7, 31, -67, -6, 37, 35, 30, -9, -68, -12, -9, -50, 1, 15, -40, 10, -18, -70, 16, -22, 14, -34, 0, 54
    0xedfdb839, 0xe5e4b913, 0xfabd1f07, 0xf71e2325, 0xcef7f4bc, 0xad80f01, 0xea10baee, 0x3600de0e,
    // 23, -34, -35, 31, 33, -12, -51, 66, -35, 59, 48, 36, 13, -30, -73, 23, 6, 47, -21, 17, 17, -20, 3, 12, 4, -24, -5, -10, 5, -18, 10, -15
    0x1fddde17, 0x42cdf421, 0x24303bdd, 0x17b7e20d, 0x11eb2f06, 0xc03ec11, 0xf6fbe804, 0xf10aee05,
    // 33, 43, 48, 24, 45, 1, -27, 4, -90, -34, -27, 7, 26, 42, 5, -50, -28, 4, 6, -3, 29, -15, -8, -5, -10, 27, -2, -12, -22, 44, 7, 12
    0x18302b21, 0x4e5012d, 0x7e5dea6, 0xce052a1a, 0xfd0604e4, 0xfbf8f11d, 0xf4fe1bf6, 0xc072cea,
    // 9, 8, 1, -7, 6, -46, 21, 41, -11, -38, -11, 86, 65, 21, -15, -28, -50, 19, 15, -2, 15, -14, -7, -9, -15, 44, 4, -22, -10, 15, 35, -4
    0xf9010809, 0x2915d206, 0x56f5daf5, 0xe4f11541, 0xfe0f13ce, 0xf7f9f20f, 0xea042cf1, 0xfc230ff6,
    // -25, -37, -5, 18, 27, 15, 4, -41, 8, 24, 5, 33, 39, 15, 31, 23, 42, -15, -68, -47, 14, 47, 20, -1, 40, 52, 14, 45, -34, 10, -43, 0
    0x12fbdbe7, 0xd7040f1b, 0x21051808, 0x171f0f27, 0xd1bcf12a, 0xff142f0e, 0x2d0e3428, 0xd50ade,
    // -12, 0, 19, 7, 17, 7, 34, -4, -3, -5, 5, 8, -26, 15, -61, -11, -19, -25, 43, -15, 54, 52, -58, -71, -9, -41, 14, -24, 1, -7, 49, 28
    0x71300f4, 0xfc220711, 0x805fbfd, 0xf5c30fe6, 0xf12be7ed, 0xb9c63436, 0xe80ed7f7, 0x1c31f901,
    // -69, -22, -53, -19, -20, -19, 26, 60, -60, -5, 5, -60, 53, -17, 60, -54, -48, 66, 9, 26, 16, -7, 3, -18, 11, -45, -18, 5, -27, 35, 37, 13
    0xedcbeabb, 0x3c1aedec, 0xc405fbc4, 0xca3cef35, 0x1a0942d0, 0xee03f910, 0x5eed30b, 0xd2523e5,
    // -1, -12, -17, -6, -18, -1, -12, -20, -10, 9, -16, 6, 23, -9, 18, 13, -54, -16, 86, 54, -15, 15, -9, 41, 27, -16, 32, -16, -16, 23, -24, -55
    0xfaeff4ff, 0xecf4ffee, 0x6f009f6, 0xd12f717, 0x3656f0ca, 0x29f70ff1, 0xf020f01b, 0xc9e817f0,
    // -84, -3, 68, 80, -19, 52, -68, 64, 25, 66, -64, -15, 47, 9, -57, -51, -71, 33, 35, -11, -5, 62, -49, -22, -8, -81, -23, -20, -23, 40, -11, -58
    0x5044fdac, 0x40bc34ed, 0xf1c04219, 0xcdc7092f, 0xf52321b9, 0xeacf3efb, 0xece9aff8, 0xc6f528e9,
    // 48, -15, -19, 52, -55, 33, 5, 2, -29, 20, 36, -54, -87, 7, 24, -48, -60, 9, 7, -47, 3, -7, 2, -8, -8, -7, -3, -2, -7, -19, 44, -38
    0x34edf130, 0x20521c9, 0xca2414e3, 0xd01807a9, 0xd10709c4, 0xf802f903, 0xfefdf9f8, 0xda2cedf9,
    // 17, -27, -37, 87, 39, -38, 23, -18, 10, -42, -42, 34, -5, -87, 38, -17, -51, 38, 5, 27, -6, -12, -64, -6, -21, -73, -32, -70, -4, -6, 8, 2
    0x57dbe511, 0xee17da27, 0x22d6d60a, 0xef26a9fb, 0x1b0526cd, 0xfac0f4fa, 0xbae0b7eb, 0x208fafc,
    // 18, 27, -3, 3, -33, -4, 0, 19, -4, -32, -10, -5, 8, 23, -29, -17, -42, 113, -61, -24, -28, -25, -51, 57, 8, -45, -91, -27, -77, 5, 56, 26
    0x3fd1b12, 0x1300fcdf, 0xfbf6e0fc, 0xefe31708, 0xe8c371d6, 0x39cde7e4, 0xe5a5d308, 0x1a3805b3,
    // -70, -7, 64, -4, 0, -82, -42, -20, -66, 21, 41, 8, -29, -8, 10, -6, 8, -21, -16, 87, -2, -14, -58, 37, -10, 20, 1, -44, -19, -16, 25, -38
    0xfc40f9ba, 0xecd6ae00, 0x82915be, 0xfa0af8e3, 0x57f0eb08, 0x25c6f2fe, 0xd40114f6, 0xda19f0ed,
    // 10, -2, 1, -15, 35, 20, 17, 1, 26, -12, 15, 0, -22, 18, -22, -25, 35, 42, -87, -8, 33, 6, 4, -14, -60, -10, -49, 11, -10, -57, 51, 66
    0xf101fe0a, 0x1111423, 0xff41a, 0xe7ea12ea, 0xf8a92a23, 0xf2040621, 0xbcff6c4, 0x4233c7f6,
    // 57, -30, 24, 81, 20, -24, 1, 22, -35, 2, -12, -63, -64, 15, 14, 5, -69, -11, 36, 23, -24, -4, -5, -11, 7, -43, 2, -17, 3, -1, 13, 13
    0x5118e239, 0x1601e814, 0xc1f402dd, 0x50e0fc0, 0x1724f5bb, 0xf5fbfce8, 0xef02d507, 0xd0dff03,
    // 35, -1, 38, -13, 36, -54, -3, -3, 21, -33, 1, 22, 26, 33, -14, 16, -70, 2, -78, 20, -6, -6, -63, -11, 2, -83, -44, 10, -25, -3, 2, 24
    0xf326ff23, 0xfdfdca24, 0x1601df15, 0x10f2211a, 0x14b202ba, 0xf5c1fafa, 0xad4ad02, 0x1802fde7,
    // -4, -2, 6, 12, -4, -9, 6, 6, -4, 12, 0, -13, -6, 12, 6, 6, -25, 34, -84, -42, 11, -3, 26, 79, -31, 25, -7, 0, -6, -18, -17, 22
    0xc06fefc, 0x606f7fc, 0xf3000cfc, 0x6060cfa, 0xd6ac22e7, 0x4f1afd0b, 0xf919e1, 0x16efeefa,
    // -31, 1, 76, -30, -48, -19, 56, -38, -14, -60, -64, -39, -30, -10, 42, -24, 7, -4, -34, -17, 1, -2, 20, 15, -4, 52, -28, -37, 10, 8, 13, 11
    0xe24c01e1, 0xda38edd0, 0xd9c0c4f2, 0xe82af6e2, 0xefdefc07, 0xf14fe01, 0xdbe434fc, 0xb0d080a,
    // -64, 0, -11, -9, 22, 66, 22, -7, -17, 8, 7, 63, -64, -34, 12, 23, -48, 24, 13, -74, 10, -32, 5, 0, -1, -13, 3, 28, -11, -24, -3, 18
    0xf7f500c0, 0xf9164216, 0x3f0708ef, 0x170cdec0, 0xb60d18d0, 0x5e00a, 0x1c03f3ff, 0x12fde8f5,
    // -19, -24, -1, 16, -5, 2, -2, -30, -12, 6, -4, -6, 25, -16, 9, 16, 22, 35, 2, 68, -23, 21, -35, 10, -33, -18, -128, -28, -29, -3, -1, 17
    0x10ffe8ed, 0xe2fe02fb, 0xfafc06f4, 0x1009f019, 0x44022316, 0xadd15e9, 0xe480eedf, 0x11fffde3,
    // -1, -3, -24, 6, -16, 10, -10, 1, -19, -16, -16, -11, 5, 36, -9, 8, 22, 59, -91, -13, 44, 45, 1, -45, -1, -32, -57, 2, -11, -97, 52, -16
    0x6e8fdff, 0x1f60af0, 0xf5f0f0ed, 0x8f72405, 0xf3a53b16, 0xd3012d2c, 0x2c7e0ff, 0xf0349ff5,
};
static const uint embedded_encoder3_ResidualBlock_1_body_pw_expand_bias_dwords[32] = {
    // -0.04913, -0.05823, -0.02951, -0.04117, -0.02866, -0.082, -0.05136, -0.0538, 0.03078, -0.0589, -0.124, -0.06866, -0.059, -0.0819, -0.05576, -0.0704
    0xab74aa4a, 0xa945a78e, 0xad3fa756, 0xaae3aa93, 0xab8a27e1, 0xac65aff0, 0xad3eab8d, 0xac81ab23,
    // -0.4255, -0.1014, -0.1519, -0.06683, -0.05463, -0.06915, -0.0815, -0.0321, -0.03775, 0.10516, -0.01425, 0.00994, -0.1663, 0.0256, -0.06464, -0.1401
    0xae7db6cf, 0xac47b0dc, 0xac6daafe, 0xa81cad37, 0x2ebba8d5, 0x2117a34c, 0x268eb152, 0xb07cac23,
    // -0.04095, -0.1349, -0.0588, -0.0001794, -0.2141, -0.08093, -0.07916, -0.06213, -0.07275, -0.11597, -0.0528, -0.06287, -0.02765, -0.05893, -0.0534, -0.0919
    0xb051a93e, 0x89e1ab87, 0xad2eb2da, 0xabf4ad11, 0xaf6caca8, 0xac06aac2, 0xab8ba714, 0xade2aad6,
    // -0.03372, -0.08673, -0.08044, -0.05334, -0.0918, -0.0812, -0.0318, -0.01994, -0.159, -0.05948, -0.06256, -0.04575, -0.0659, -0.0435, 0.03564, -0.01642
    0xad8da851, 0xaad4ad26, 0xad32ade0, 0xa51ba812, 0xab9db117, 0xa9dbac01, 0xa991ac38, 0xa4342890,
};
static const uint embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -6, -53, 26, -55, -20, 45, -14, -24, -27, -1, -4, 37, 2, -30, -15, -53, -41, 23, -35, 22, 26, 46, -15, 1, -18, -9, 9, -4, 24, -27, 21, -6
    0xc91acbfa, 0xe8f22dec, 0x25fcffe5, 0xcbf1e202, 0x16dd17d7, 0x1f12e1a, 0xfc09f7ee, 0xfa15e518,
    // -63, -38, -19, -29, -24, -52, -45, 89, 19, 53, 20, -1, -5, 4, 5, -62, -42, 46, 58, -7, -11, 57, -56, -19, -22, 18, 16, -33, 15, -15, 35, 13
    0xe3eddac1, 0x59d3cce8, 0xff143513, 0xc20504fb, 0xf93a2ed6, 0xedc839f5, 0xdf1012ea, 0xd23f10f,
    // -55, 22, -31, 49, -30, 102, 81, -48, -20, 68, 13, 30, -1, 64, 6, -93, -6, 52, -13, -23, -54, 34, -89, 69, 56, -13, 1, 8, 12, 3, 88, 27
    0x31e116c9, 0xd05166e2, 0x1e0d44ec, 0xa30640ff, 0xe9f334fa, 0x45a722ca, 0x801f338, 0x1b58030c,
    // 2, -13, -57, -9, -23, 0, -9, -41, -74, -24, -29, -49, -39, 73, 54, 18, -13, 17, 8, 5, -20, 22, 7, -17, 5, 30, -3, -9, -16, -42, -11, -16
    0xf7c7f302, 0xd7f700e9, 0xcfe3e8b6, 0x123649d9, 0x50811f3, 0xef0716ec, 0xf7fd1e05, 0xf0f5d6f0,
    // 42, -49, 27, 10, -16, -38, -9, -10, 15, -40, -31, 6, -9, 1, 30, -27, -7, -30, 20, -39, 27, 93, -1, -1, -29, 5, -20, 48, 33, -19, -6, -16
    0xa1bcf2a, 0xf6f7daf0, 0x6e1d80f, 0xe51e01f7, 0xd914e2f9, 0xffff5d1b, 0x30ec05e3, 0xf0faed21,
    // -57, -15, -4, 10, -59, 19, 13, 72, 106, -19, 14, -7, -44, 3, -21, 29, 3, -1, -15, -4, 24, 29, -24, -42, -57, 10, 84, 19, 16, -47, -86, 50
    0xafcf1c7, 0x480d13c5, 0xf90eed6a, 0x1deb03d4, 0xfcf1ff03, 0xd6e81d18, 0x13540ac7, 0x32aad110,
    // 40, -50, 21, 21, -25, 22, -32, 17, -88, -6, -5, -84, 13, 0, 56, -4, -15, 77, 35, -9, 28, -21, 66, 7, -35, -41, -39, 32, 88, -30, 19, -66
    0x1515ce28, 0x11e016e7, 0xacfbfaa8, 0xfc38000d, 0xf7234df1, 0x742eb1c, 0x20d9d7dd, 0xbe13e258,
    // -6, -10, 48, -11, -18, -11, -22, 40, 2, 19, 20, 5, 27, 5, 9, 4, -16, 3, 87, 34, -20, 37, -81, 11, 4, 5, 48, -37, -56, -22, -101, 37
    0xf530f6fa, 0x28eaf5ee, 0x5141302, 0x409051b, 0x225703f0, 0xbaf25ec, 0xdb300504, 0x259beac8,
    // 8, 39, -21, 29, 37, -9, -15, 17, -47, -17, -15, 38, 9, -6, 12, 34, 9, -13, 55, -3, -42, -31, -67, -14, -6, -11, -20, -41, -3, -16, -29, -14
    0x1deb2708, 0x11f1f725, 0x26f1efd1, 0x220cfa09, 0xfd37f309, 0xf2bde1d6, 0xd7ecf5fa, 0xf2e3f0fd,
    // 35, 14, 73, 13, -30, 18, -17, -36, 51, 122, 33, 17, -19, -18, 7, 23, -18, 26, 29, 8, 25, 0, 36, -88, 13, -6, -24, -22, 77, 7, 55, -13
    0xd490e23, 0xdcef12e2, 0x11217a33, 0x1707eeed, 0x81d1aee, 0xa8240019, 0xeae8fa0d, 0xf337074d,
    // 3, 34, -15, 40, -10, 33, 26, 32, -1, 60, 37, -12, 15, 30, -40, 4, 57, -11, -66, -11, -18, 7, 27, 50, 15, 31, -7, -41, 11, -72, 51, 26
    0x28f12203, 0x201a21f6, 0xf4253cff, 0x4d81e0f, 0xf5bef539, 0x321b07ee, 0xd7f91f0f, 0x1a33b80b,
    // -4, -13, 25, -7, 22, 12, -17, -37, -5, 1, 3, 0, -20, 54, 6, 68, -58, -15, -20, -4, -43, 28, 34, -7, 57, 17, -33, -84, -27, -25, 103, 21
    0xf919f3fc, 0xdbef0c16, 0x301fb, 0x440636ec, 0xfcecf1c6, 0xf9221cd5, 0xacdf1139, 0x1567e7e5,
    // -8, -63, -25, 26, -38, 31, 17, -54, -23, 7, -4, 76, 0, 84, 32, -13, -25, -52, 23, -14, 0, 17, -63, 25, 7, -67, -8, -4, -15, -3, 24, 55
    0x1ae7c1f8, 0xca111fda, 0x4cfc07e9, 0xf3205400, 0xf217cce7, 0x19c11100, 0xfcf8bd07, 0x3718fdf1,
    // -7, -26, 24, -13, -16, -16, -19, 31, 34, -37, -7, -16, -21, -4, 6, -14, 14, 16, 60, 11, -32, 9, -58, -2, -6, 49, 39, -17, 33, -10, -60, 59
    0xf318e6f9, 0x1fedf0f0, 0xf0f9db22, 0xf206fceb, 0xb3c100e, 0xfec609e0, 0xef2731fa, 0x3bc4f621,
    // 40, -44, 78, -40, -18, -27, -35, 19, -32, -35, -8, -14, -3, 61, -67, 14, -10, 11, 9, 23, 50, 43, 53, -34, -5, -109, 26, -7, 23, -41, -35, 38
    0xd84ed428, 0x13dde5ee, 0xf2f8dde0, 0xebd3dfd, 0x17090bf6, 0xde352b32, 0xf91a93fb, 0x26ddd717,
    // -54, 4, 2, -39, 6, -11, 23, -18, 41, -14, 4, 16, 44, -34, -73, 20, -40, 12, 36, -11, 9, 1, -71, 16, -44, -14, 47, 35, 14, 33, -53, 24
    0xd90204ca, 0xee17f506, 0x1004f229, 0x14b7de2c, 0xf5240cd8, 0x10b90109, 0x232ff2d4, 0x18cb210e,
    // 1, 27, -26, 16, 12, 10, 19, 17, -68, 4, -25, 4, 9, 24, -41, 6, -27, -7, -20, 43, 14, -26, 36, 7, 2, 0, 28, -104, -30, -71, -14, -34
    0x10e61b01, 0x11130a0c, 0x4e704bc, 0x6d71809, 0x2becf9e5, 0x724e60e, 0x981c0002, 0xdef2b9e2,
    // -20, -48, -6, 45, -11, 67, 7, -1, -12, 27, 63, 4, 40, 13, 23, -53, 21, 2, -32, 4, -8, -10, -90, -31, 34, -7, -42, 34, 42, -21, -102, 13
    0x2dfad0ec, 0xff0743f5, 0x43f1bf4, 0xcb170d28, 0x4e00215, 0xe1a6f6f8, 0x22d6f922, 0xd9aeb2a,
    // 9, 37, -10, -34, -10, -7, -18, -18, 55, -13, 4, -12, -7, -12, 30, -18, 12, 7, 15, -11, 12, 5, -7, -9, -14, 13, -10, 15, 9, 26, -24, -20
    0xdef62509, 0xeeeef9f6, 0xf404f337, 0xee1ef4f9, 0xf50f070c, 0xf7f9050c, 0xff60df2, 0xece81a09,
    // -44, -13, -1, -35, 20, 16, -4, 20, 13, 15, -33, 6, -21, -20, -15, 7, -18, -6, -26, 9, -21, 0, 75, 6, -6, -3, 33, -10, -19, 8, 54, -11
    0xddfff3d4, 0x14fc1014, 0x6df0f0d, 0x7f1eceb, 0x9e6faee, 0x64b00eb, 0xf621fdfa, 0xf53608ed,
    // -47, 17, 27, -15, -24, -20, 71, -78, -16, 75, -9, 4, -20, 31, -2, 1, 4, 54, 26, -3, -44, 62, 37, -3, 102, 17, 10, 5, 25, -12, 46, 0
    0xf11b11d1, 0xb247ece8, 0x4f74bf0, 0x1fe1fec, 0xfd1a3604, 0xfd253ed4, 0x50a1166, 0x2ef419,
    // 30, 53, 35, -39, 28, 17, -7, 34, 13, -45, -40, 11, -3, 11, 49, 2, 14, 34, -58, -19, 14, 6, 3, -86, -16, 1, 48, -34, -52, -33, -27, 6
    0xd923351e, 0x22f9111c, 0xbd8d30d, 0x2310bfd, 0xedc6220e, 0xaa03060e, 0xde3001f0, 0x6e5dfcc,
    // 43, -73, 13, -29, -4, -4, -3, 19, -3, 2, 16, -10, 9, 25, 43, -62, -16, -28, -16, -34, 55, -55, 12, 20, -10, -61, -4, 50, 8, 13, -21, -8
    0xe30db72b, 0x13fdfcfc, 0xf61002fd, 0xc22b1909, 0xdef0e4f0, 0x140cc937, 0x32fcc3f6, 0xf8eb0d08,
    // -73, -45, -95, 18, -53, -9, 1, 27, -50, 14, -28, -22, 17, 45, -87, 3, 37, 19, 48, -3, -50, -12, -100, 13, -43, -8, 81, -22, -58, 5, 23, 50
    0x12a1d3b7, 0x1b01f7cb, 0xeae40ece, 0x3a92d11, 0xfd301325, 0xd9cf4ce, 0xea51f8d5, 0x321705c6,
    // 0, 90, 41, -15, 35, -1, 29, -12, 45, 14, -1, 34, -7, -6, 49, -11, 31, 23, 57, -11, -88, 31, 60, -23, 30, 6, -27, -57, -10, 11, 10, 33
    0xf1295a00, 0xf41dff23, 0x22ff0e2d, 0xf531faf9, 0xf539171f, 0xe93c1fa8, 0xc7e5061e, 0x210a0bf6,
    // 28, -9, 75, -13, -34, 50, -4, 39, -18, -72, 2, -20, -3, -14, 44, 38, 8, 38, -69, -10, 50, 37, 27, 19, 32, 3, 45, 51, -66, -24, -12, -44
    0xf34bf71c, 0x27fc32de, 0xec02b8ee, 0x262cf2fd, 0xf6bb2608, 0x131b2532, 0x332d0320, 0xd4f4e8be,
    // -21, -61, 52, -41, 23, 14, 81, -66, -29, -18, -75, 40, -6, 57, 74, -43, -3, -18, 58, 23, 30, 4, -38, -25, 28, -19, -28, -3, 14, -14, -5, 36
    0xd734c3eb, 0xbe510e17, 0x28b5eee3, 0xd54a39fa, 0x173aeefd, 0xe7da041e, 0xfde4ed1c, 0x24fbf20e,
    // -52, 21, 38, -51, -11, -9, 10, 94, -2, -12, -2, -26, -49, 14, 67, -36, 10, 21, -11, -5, -23, 85, -44, -18, -52, -19, 58, 19, -13, -27, 19, 20
    0xcd2615cc, 0x5e0af7f5, 0xe6fef4fe, 0xdc430ecf, 0xfbf5150a, 0xeed455e9, 0x133aedcc, 0x1413e5f3,
    // 27, 5, -12, 10, -23, -34, -36, -7, -45, -23, 26, -10, -13, -20, 55, 4, -64, -14, -4, -7, 51, -23, -18, -2, -13, 18, -12, -4, 15, -19, -36, -19
    0xaf4051b, 0xf9dcdee9, 0xf61ae9d3, 0x437ecf3, 0xf9fcf2c0, 0xfeeee933, 0xfcf412f3, 0xeddced0f,
    // -18, -52, -44, 34, -30, -27, 5, 12, -10, 7, -24, 0, -4, -13, -42, -26, -16, -26, 21, 3, -20, -48, -115, 6, -15, -7, 52, -49, -14, 15, -15, -20
    0x22d4ccee, 0xc05e5e2, 0xe807f6, 0xe6d6f3fc, 0x315e6f0, 0x68dd0ec, 0xcf34f9f1, 0xecf10ff2,
    // -8, 47, 11, -26, -19, -32, 24, -47, 41, -15, -34, -44, 2, -29, -13, -35, -8, 45, 16, 23, 60, -19, -49, -6, 9, 30, -16, 23, 17, -14, -17, 6
    0xe60b2ff8, 0xd118e0ed, 0xd4def129, 0xddf3e302, 0x17102df8, 0xfacfed3c, 0x17f01e09, 0x6eff211,
    // -70, 15, -60, 1, -69, -34, -16, -12, -58, -4, 2, 13, -6, -4, -32, -12, 14, -23, -29, -4, -18, -33, 27, -52, -25, -27, 35, 0, -24, -17, 127, -11
    0x1c40fba, 0xf4f0debb, 0xd02fcc6, 0xf4e0fcfa, 0xfce3e90e, 0xcc1bdfee, 0x23e5e7, 0xf57fefe8,
    // 15, -42, 8, -1, -5, 37, -18, 42, 9, 36, 66, 65, 18, -30, 14, 62, 18, 63, 14, -11, -45, 56, 34, -28, -8, 1, -1, -24, -33, -25, 7, -8
    0xff08d60f, 0x2aee25fb, 0x41422409, 0x3e0ee212, 0xf50e3f12, 0xe42238d3, 0xe8ff01f8, 0xf807e7df,
    // 77, 24, 21, -15, 36, -20, -11, 28, 12, 12, -21, 15, -9, -33, 1, 15, -4, 52, 0, 11, 88, -31, -40, 41, -4, 45, 16, 43, -5, 35, -22, 8
    0xf115184d, 0x1cf5ec24, 0xfeb0c0c, 0xf01dff7, 0xb0034fc, 0x29d8e158, 0x2b102dfc, 0x8ea23fb,
    // -52, 28, -52, 6, -19, 36, 4, -22, 36, 5, 27, 3, -11, -57, -19, 24, 20, 33, 11, 62, -64, -33, -10, -29, -3, -41, 60, -38, -2, 24, 1, -40
    0x6cc1ccc, 0xea0424ed, 0x31b0524, 0x18edc7f5, 0x3e0b2114, 0xe3f6dfc0, 0xda3cd7fd, 0xd80118fe,
    // 14, -42, 32, 62, 27, 40, -13, -45, -63, 4, 64, -39, 65, -44, 29, 13, 33, -9, 12, -12, 37, -88, -8, -22, -30, 3, -31, 65, 59, -23, -34, 47
    0x3e20d60e, 0xd3f3281b, 0xd94004c1, 0xd1dd441, 0xf40cf721, 0xeaf8a825, 0x41e103e2, 0x2fdee93b,
    // 4, 30, -37, 5, 31, -21, -3, 24, -106, -26, -8, -7, -7, -11, -69, 3, -72, 11, -14, -27, -6, -32, 25, -67, -15, -27, 11, 4, 59, 23, -21, -41
    0x5db1e04, 0x18fdeb1f, 0xf9f8e696, 0x3bbf5f9, 0xe5f20bb8, 0xbd19e0fa, 0x40be5f1, 0xd7eb173b,
    // 41, -7, -36, 35, -55, 43, 24, -1, 23, 32, 5, -51, 2, -70, -33, 4, 21, -23, 2, -17, 9, -28, 33, 28, 58, -42, -26, 16, -21, -58, -43, -3
    0x23dcf929, 0xff182bc9, 0xcd052017, 0x4dfba02, 0xef02e915, 0x1c21e409, 0x10e6d63a, 0xfdd5c6eb,
    // -4, 29, -12, -30, 21, -55, 8, -43, -88, -9, -54, 8, 45, -52, 18, 25, -41, 28, 44, 6, 61, 20, -32, 23, 30, -9, -32, 3, 28, -23, -11, 29
    0xe2f41dfc, 0xd508c915, 0x8caf7a8, 0x1912cc2d, 0x62c1cd7, 0x17e0143d, 0x3e0f71e, 0x1df5e91c,
    // -45, 2, -48, 27, 17, 42, 22, 27, -21, 16, -21, 72, -52, 18, 29, 37, 16, 48, -68, 55, 9, -34, -54, -6, -60, 5, 24, 1, -34, 74, -35, -72
    0x1bd002d3, 0x1b162a11, 0x48eb10eb, 0x251d12cc, 0x37bc3010, 0xfacade09, 0x11805c4, 0xb8dd4ade,
    // 25, -46, 45, -61, -2, -37, 3, -16, -78, -9, -21, 23, 23, 19, 27, 23, -15, 6, 13, -46, -2, 20, -11, -12, 19, 10, -36, 24, 29, 2, -18, -17
    0xc32dd219, 0xf003dbfe, 0x17ebf7b2, 0x171b1317, 0xd20d06f1, 0xf4f514fe, 0x18dc0a13, 0xefee021d,
    // -40, 62, 24, -57, -3, 19, 0, 24, 34, -15, -52, 25, -52, -8, -3, 44, -36, 37, -48, 33, 13, 21, 46, 19, -57, 3, 49, -61, -26, 27, 56, -23
    0xc7183ed8, 0x180013fd, 0x19ccf122, 0x2cfdf8cc, 0x21d025dc, 0x132e150d, 0xc33103c7, 0xe9381be6,
    // -9, 16, 11, 20, 13, 32, 17, 11, 7, -7, 20, 34, -86, -2, -57, 19, 11, 26, -16, 64, -7, 32, -29, 16, -4, -8, -11, 2, 25, 0, 13, 30
    0x140b10f7, 0xb11200d, 0x2214f907, 0x13c7feaa, 0x40f01a0b, 0x10e320f9, 0x2f5f8fc, 0x1e0d0019,
    // 9, -87, 10, -16, -31, -25, 5, -23, 7, 26, -1, 7, -6, 10, 4, 9, 8, 13, 30, -74, 24, -16, 33, 6, 41, -1, -26, 30, 18, 31, 46, -8
    0xf00aa909, 0xe905e7e1, 0x7ff1a07, 0x9040afa, 0xb61e0d08, 0x621f018, 0x1ee6ff29, 0xf82e1f12,
    // 40, -3, -26, 19, 51, -10, 8, 41, -43, -75, -16, -45, 0, 8, 65, 19, -49, -18, 69, -37, 51, -55, -51, -13, -42, 48, -90, -38, -13, -14, -32, 47
    0x13e6fd28, 0x2908f633, 0xd3f0b5d5, 0x13410800, 0xdb45eecf, 0xf3cdc933, 0xdaa630d6, 0x2fe0f2f3,
    // 41, 0, 10, -20, -26, -35, 62, -20, 26, 67, -82, -12, -65, -15, -21, -1, -44, -69, -87, 8, -26, -26, 14, 46, -6, -64, -4, -22, -30, -34, 23, -44
    0xec0a0029, 0xec3edde6, 0xf4ae431a, 0xffebf1bf, 0x8a9bbd4, 0x2e0ee6e6, 0xeafcc0fa, 0xd417dee2,
    // -22, 31, 21, -19, -11, 19, 35, -7, -40, 15, -45, 12, 21, 3, -72, -4, 7, 48, -53, 26, -17, 54, 6, 2, 11, -47, -8, -92, 15, -14, 0, 21
    0xed151fea, 0xf92313f5, 0xcd30fd8, 0xfcb80315, 0x1acb3007, 0x20636ef, 0xa4f8d10b, 0x1500f20f,
    // 16, -13, 13, -14, 43, 6, 3, -17, 5, 7, 18, -9, 5, 6, 12, 10, -72, 26, -6, 2, -1, -15, -28, 7, 55, 23, -19, -17, 2, 24, -59, -33
    0xf20df310, 0xef03062b, 0xf7120705, 0xa0c0605, 0x2fa1ab8, 0x7e4f1ff, 0xefed1737, 0xdfc51802,
    // 15, 74, 46, 4, 23, 2, -11, 15, 45, 10, -41, -2, 49, 47, 24, 9, 15, -5, 1, -66, -38, 7, -10, 17, 0, -16, -18, 72, -103, 28, -8, -94
    0x42e4a0f, 0xff50217, 0xfed70a2d, 0x9182f31, 0xbe01fb0f, 0x11f607da, 0x48eef000, 0xa2f81c99,
    // 0, 43, 6, -66, 17, 24, 12, -30, 21, 8, -36, 7, -32, 4, 18, -7, -53, 10, -45, 45, 3, 50, 59, 9, -18, -17, -26, 4, -29, 14, 23, -25
    0xbe062b00, 0xe20c1811, 0x7dc0815, 0xf91204e0, 0x2dd30acb, 0x93b3203, 0x4e6efee, 0xe7170ee3,
    // 27, -35, 20, -17, -87, 12, -45, -12, 30, 45, 80, 37, -6, -11, 0, 10, -39, 45, -40, -16, -27, 46, 25, -45, -20, 17, -18, 34, -12, 22, -13, -4
    0xef14dd1b, 0xf4d30ca9, 0x25502d1e, 0xa00f5fa, 0xf0d82dd9, 0xd3192ee5, 0x22ee11ec, 0xfcf316f4,
    // 18, 18, 33, -45, -75, -88, -77, 46, 26, -48, -49, 26, 0, -34, -54, -43, -29, 50, 70, -11, 1, -3, 21, 13, 69, 82, 65, -52, -29, 9, 101, 48
    0xd3211212, 0x2eb3a8b5, 0x1acfd01a, 0xd5cade00, 0xf54632e3, 0xd15fd01, 0xcc415245, 0x306509e3,
    // -57, 55, -73, -7, -28, 30, -26, -29, -58, 3, 14, 18, -22, -57, 19, 42, -39, 27, 11, -73, -74, 32, 52, -56, -9, 46, -51, -7, 4, -30, -19, -4
    0xf9b737c7, 0xe3e61ee4, 0x120e03c6, 0x2a13c7ea, 0xb70b1bd9, 0xc83420b6, 0xf9cd2ef7, 0xfcede204,
    // 22, -16, 41, 89, -55, -52, -30, -16, -33, -28, -39, -3, -5, -91, -6, -34, -45, -10, -73, -18, 46, -81, 4, -8, 11, 9, -19, -53, -5, -16, -6, -97
    0x5929f016, 0xf0e2ccc9, 0xfdd9e4df, 0xdefaa5fb, 0xeeb7f6d3, 0xf804af2e, 0xcbed090b, 0x9ffaf0fb,
    // 75, 34, 26, 27, -7, -9, -27, 52, 12, -2, 35, -41, 22, 22, 46, 7, 17, -79, 10, -43, 30, -64, -37, -5, -24, 71, 38, 30, 59, -33, -31, 94
    0x1b1a224b, 0x34e5f7f9, 0xd723fe0c, 0x72e1616, 0xd50ab111, 0xfbdbc01e, 0x1e2647e8, 0x5ee1df3b,
    // 30, -35, 17, -22, 9, -88, 9, -20, -25, -10, -12, -12, -5, -2, -56, 15, -35, -12, 17, 27, 0, 46, -8, -1, 63, -6, 10, -60, -11, 7, 80, -26
    0xea11dd1e, 0xec09a809, 0xf4f4f6e7, 0xfc8fefb, 0x1b11f4dd, 0xfff82e00, 0xc40afa3f, 0xe65007f5,
    // 9, -34, 27, -3, 14, 40, 21, 15, -77, 14, 32, 36, -38, 16, 62, -6, -1, 16, 11, -33, -35, 34, -45, 38, 2, 4, -75, 30, -23, -20, 21, 46
    0xfd1bde09, 0xf15280e, 0x24200eb3, 0xfa3e10da, 0xdf0b10ff, 0x26d322dd, 0x1eb50402, 0x2e15ece9,
    // 54, 6, 12, -15, -20, 4, 2, -14, -7, 7, -34, 20, -27, 23, 15, -26, -36, 7, -39, -32, -6, -10, 61, 1, 13, 4, -13, -70, -10, 15, 38, -52
    0xf10c0636, 0xf20204ec, 0x14de07f9, 0xe60f17e5, 0xe0d907dc, 0x13df6fa, 0xbaf3040d, 0xcc260ff6,
    // 34, 45, 21, -48, 2, -76, -72, -34, 81, -21, 5, -15, 15, -21, -30, 35, 4, -35, -43, 12, -25, 11, 43, -23, -17, -9, 41, -7, -12, -7, -73, -38
    0xd0152d22, 0xdeb8b402, 0xf105eb51, 0x23e2eb0f, 0xcd5dd04, 0xe92b0be7, 0xf929f7ef, 0xdab7f9f4,
    // -43, -14, -30, 26, 64, 34, 3, 27, 40, -19, 17, 65, 74, -25, -35, -53, 27, 12, 34, 19, 47, -21, 29, -10, 19, -31, -16, -3, 42, 52, 17, 19
    0x1ae2f2d5, 0x1b032240, 0x4111ed28, 0xcbdde74a, 0x13220c1b, 0xf61deb2f, 0xfdf0e113, 0x1311342a,
    // -49, -34, 33, -84, -10, -53, -16, -54, -31, -29, -28, 17, 24, -11, -5, -7, -34, -40, -5, -41, -17, 19, 28, -14, 8, 31, 30, -10, -39, -9, -12, 44
    0xac21decf, 0xcaf0cbf6, 0x11e4e3e1, 0xf9fbf518, 0xd7fbd8de, 0xf21c13ef, 0xf61e1f08, 0x2cf4f7d9,
    // -75, -5, -16, 0, -9, 30, -29, 26, 2, -39, 20, 8, 39, -10, 7, 2, -3, 10, -16, 27, 8, 13, 7, -18, -87, -1, 16, 34, 14, 15, -67, 0
    0xf0fbb5, 0x1ae31ef7, 0x814d902, 0x207f627, 0x1bf00afd, 0xee070d08, 0x2210ffa9, 0xbd0f0e,
    // -18, -19, -20, 40, 7, -22, -15, 21, 33, -10, -9, -43, 81, 35, 1, -11, 7, -24, 2, -62, -24, -48, -9, -48, -18, 31, 27, 15, -23, -10, -15, -74
    0x28ecedee, 0x15f1ea07, 0xd5f7f621, 0xf5012351, 0xc202e807, 0xd0f7d0e8, 0xf1b1fee, 0xb6f1f6e9,
    // 35, 91, -35, 15, -14, -6, -2, -33, -11, 12, 34, -46, 32, -50, -15, -39, -39, -51, 33, 85, -9, 20, 20, -11, -29, -35, -22, 4, 36, -45, 29, 0
    0xfdd5b23, 0xdffefaf2, 0xd2220cf5, 0xd9f1ce20, 0x5521cdd9, 0xf51414f7, 0x4eadde3, 0x1dd324,
};
static const uint embedded_encoder3_ResidualBlock_1_body_pw_contract_bias_dwords[16] = {
    // -0.0001788, -0.0003583, -0.000351, -7.86e-05, -1.8e-06, 0.0002835, -0.0002959, 3.994e-05, 0.0001682, -0.000288, 9.74e-05, 0.0001734, 0.000292, -0.000579, -0.00063, -0.0003097
    0x8ddf89dc, 0x85278dc0, 0xca5801e, 0x29e8cd9, 0x8cb80983, 0x9af0662, 0x90be0cc9, 0x8d139129,
    // 2.49e-05, -0.0003953, -0.0004916, 0.0003226, 0.000167, 0.0002978, 0.0001558, 6.545e-05, 0.000229, 7.504e-05, -0.0002091, -4.94e-05, 0.0001543, 0.0001874, -0.0001452, -0.0004342
    0x8e7a01a2, 0xd499007, 0xce10979, 0x44a091b, 0x4eb0b81, 0x833d8ada, 0xa24090e, 0x8f1d88c2,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass5(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage__encoder3_ResidualBlock_1_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _encoder3_ResidualBlock_1_residual_func_Split_output_grouped = {
        uint3(1920, 1080, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 32), // threadGroupSliceSize
        uint3(1920, 1080, 32), // storageSize
        uint3(32, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        199065600, // threadGroupStorageByteOffset
        storage__encoder3_ResidualBlock_1_residual_func_Split_output_grouped };
    
    const ConstantBufferStorage<576> storage_embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.00467875087633729, storage_embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = { embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004193971864879131, storage_embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_encoder3_ResidualBlock_1_body_pw_expand_bias = { embedded_encoder3_ResidualBlock_1_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_encoder3_ResidualBlock_1_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_1_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004172162618488073, storage_embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder3_ResidualBlock_1_body_pw_contract_bias = { embedded_encoder3_ResidualBlock_1_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder3_ResidualBlock_1_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_1_body_pw_contract_bias };
    
    // fused_quantized_NHWC_/encoder3/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_10 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_10 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_10 = uint3(64, 1, 32);
    const uint3 storageSize_slice_10 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_10 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_10 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_10 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_10 = dot(groupStart_slice_10, tensorByteStrides_slice_10);
    const float quantizationScale_slice_10 = 0.015598728321492672;
    const RWBufferStorage storage_slice_10 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_10 = { logicalSize_slice_10, groupStart_slice_10, groupSize_slice_10, storageSize_slice_10, tensorByteStrides_slice_10, paddingBegin_slice_10, paddingEnd_slice_10, threadGroupByteOffsetInTensor_slice_10 + 132710400, quantizationScale_slice_10, storage_slice_10 };
    // Fusedquantized_/encoder3/ResidualBlock_1/residual_func/Concat_quantized_/encoder3/ResidualBlock_1/body/spatial_mixing/partial_conv/Conv_quantized_/encoder3/ResidualBlock_1/body/spatial_mixing/Concat_quantized_/encoder3/ResidualBlock_1/body/pw_expand/Conv_/encoder3/ResidualBlock_1/body/pw_expand_act/Relu_quantized_/encoder3/ResidualBlock_1/body/pw_contract/Conv_/encoder3/ResidualBlock_1/Add (32, 1080, 1920), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,) -> (32, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<32, 1>(0.015993434935808182, 0.018608681857585907, 0.0129175940528512, _encoder3_ResidualBlock_1_residual_func_Split_output_grouped, embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias, embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_1_body_pw_expand_bias, embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_1_body_pw_contract_bias, slice_10, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_5
#ifdef MLSR_PASS_5_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass5_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/encoder3/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_11 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_11 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_11 = uint3(32, 1, 32);
    const uint3 storageSize_slice_11 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_11 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_11 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_11 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_11 = dot(groupStart_slice_11, tensorByteStrides_slice_11);
    const float quantizationScale_slice_11 = 0.015598728321492672;
    const RWBufferStorage storage_slice_11 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_11 = { logicalSize_slice_11, groupStart_slice_11, groupSize_slice_11, storageSize_slice_11, tensorByteStrides_slice_11, paddingBegin_slice_11, paddingEnd_slice_11, threadGroupByteOffsetInTensor_slice_11 + 132710400, quantizationScale_slice_11, storage_slice_11 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_11, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_5_POST


#ifdef MLSR_PASS_6
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FusedConv2D_k2s2b_QuantizedOutput.hlsli"

static const uint embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias_dwords[32] = {
    // -0.004993, -0.0202, 0.002956, -0.01403, -0.05453, -0.1212, 0.02354, 0.05634, -0.0203, -0.05374, -0.001696, 0.05713, 0.0686, 0.07306, -0.01455, -0.0599
    0xa52c9d1d, 0xa32f1a0e, 0xafc2aafb, 0x2b362607, 0xaae1a532, 0x2b5096f2, 0x2cad2c64, 0xababa373,
    // 0.02124, 0.05997, 0.00075, -0.1515, -0.04572, -0.0205, -0.1937, -0.114, 0.00422, 0.0847, 0.02426, 0.2255, -0.02905, 0.014336, 0.07983, -0.1969
    0x2bad2570, 0xb0d91225, 0xa53fa9da, 0xaf4cb233, 0x2d6c1c52, 0x33372636, 0x2357a770, 0xb24d2d1c,
    // 0.3577, 0.02069, -0.0054, -0.02765, 0.07306, -0.01762, -0.1516, 0.003435, 0.1755, -0.01588, -0.09283, -0.001614, 0.093, -0.04016, 0.02603, -0.18
    0x254c35b9, 0xa7149d88, 0xa4832cad, 0x1b09b0da, 0xa411319e, 0x969cadf1, 0xa9242df4, 0xb1c326aa,
    // -0.1368, -0.0355, -0.1412, -0.1324, 0.02164, 0.0695, -0.014626, -0.153, 0.315, -0.1283, -0.0853, -0.01837, -0.01252, -0.0661, 0.0895, 0.2098
    0xa88bb061, 0xb03db085, 0x2c73258a, 0xb0e5a37d, 0xb01b350a, 0xa4b4ad76, 0xac3ba269, 0x32b72dba,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass6(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 32), // threadGroupSliceSize
        uint3(1920, 1080, 32), // storageSize
        uint3(32, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        132710400, // threadGroupStorageByteOffset
        0.015598728321492672, storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const BufferStorage storage__encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 32, 64), // threadGroupSliceSize
        uint4(2, 2, 32, 64), // storageSize
        uint4(32, 64, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        9856, // threadGroupStorageByteOffset
        0.0032590271439403296, storage__encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias = { embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias };
    
    // Fusedquantized_/encoder3/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_12 = uint3(960, 540, 64);
    const int3 groupStart_slice_12 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 64);
    const uint3 groupSize_slice_12 = uint3(64, 1, 64);
    const uint3 storageSize_slice_12 = uint3(960, 540, 64);
    const uint3 tensorByteStrides_slice_12 = uint3(64, 61440, 1);
    const uint3 paddingBegin_slice_12 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_12 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_12 = dot(groupStart_slice_12, tensorByteStrides_slice_12);
    const RWBufferStorage storage_slice_12 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_12 = { logicalSize_slice_12, groupStart_slice_12, groupSize_slice_12, storageSize_slice_12, tensorByteStrides_slice_12, paddingBegin_slice_12, paddingEnd_slice_12, threadGroupByteOffsetInTensor_slice_12 + 199065600, storage_slice_12 };
    // Fusedquantized_/encoder3/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs (32, 1080, 1920), (64, 32, 2, 2), (64,) -> (64, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FusedConv2D_k2s2b_QuantizedOutput(0.016224239021539688, 0.02506415545940399, fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, _encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias, slice_12, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_6
#ifdef MLSR_PASS_6_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass6_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // Fusedquantized_/encoder3/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_13 = uint3(960, 540, 64);
    const int3 groupStart_slice_13 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 64);
    const uint3 groupSize_slice_13 = uint3(32, 1, 64);
    const uint3 storageSize_slice_13 = uint3(960, 540, 64);
    const uint3 tensorByteStrides_slice_13 = uint3(64, 61440, 1);
    const uint3 paddingBegin_slice_13 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_13 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_13 = dot(groupStart_slice_13, tensorByteStrides_slice_13);
    const RWBufferStorage storage_slice_13 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_13 = { logicalSize_slice_13, groupStart_slice_13, groupSize_slice_13, storageSize_slice_13, tensorByteStrides_slice_13, paddingBegin_slice_13, paddingEnd_slice_13, threadGroupByteOffsetInTensor_slice_13 + 199065600, storage_slice_13 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_13, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_6_POST


#ifdef MLSR_PASS_7
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords[16] = {
    // 0.000903, 0.000309, -0.001085, -0.0001032, -0.000613, -0.0006065, 2.08e-05, -0.0004022, 0.0002211, 0.0001677, -0.0004451, 0.000724, -0.001955, 0.001855, 0.000379, 0.001101
    0xd101366, 0x86c39472, 0x90f89106, 0x8e97015d, 0x97f0b3f, 0x11ee8f4b, 0x17999801, 0x14820e36,
    // 0.001062, 0.0001405, 3.785e-05, -0.0005345, 0.001446, 0.000783, 0.001667, 0.000289, 0.001287, 0.001114, 0.000718, 0.002188, 0.00010026, 0.005833, 0.001107, -0.0007577
    0x89b145a, 0x9061027b, 0x126a15ec, 0xcbc16d4, 0x14901546, 0x187b11e2, 0x1df90692, 0x92351489,
};
static const uint embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias_dwords[64] = {
    // -0.133, -0.2428, -0.09186, -0.1266, -0.07666, -0.1049, -0.1187, -0.11865, 0.1426, -0.0305, -0.02151, -0.09204, -0.209, -0.0684, -0.05286, -0.02303
    0xb3c5b042, 0xb00dade1, 0xaeb7ace8, 0xaf98af99, 0xa7cf3090, 0xade4a582, 0xac61b2b0, 0xa5e5aac4,
    // -0.1282, -0.1355, -0.0634, -0.03192, -0.10693, -0.0776, -0.0851, -0.1332, -0.05383, -0.2356, -0.4421, -0.0929, 0.02786, -0.2139, -0.1111, -0.1638
    0xb056b01a, 0xa816ac0f, 0xacf7aed8, 0xb043ad72, 0xb38aaae4, 0xadf2b713, 0xb2d82722, 0xb13eaf1c,
    // -0.364, 0.02344, -0.05157, -0.0678, -0.02089, -0.1187, -0.0684, -0.034, -0.3223, -0.0526, -0.1411, 0.0371, -0.04047, 0.07324, -0.3735, -0.3308
    0x2600b5d3, 0xac57aa9a, 0xaf99a559, 0xa85aac61, 0xaabcb528, 0x28c0b084, 0x2cb0a92e, 0xb54bb5fa,
    // -0.0745, -0.08417, -0.1019, -0.2115, -0.0783, -0.01036, -0.02309, 0.02048, -0.03653, -0.0549, 0.045, -0.08185, -0.2517, -0.06094, -0.0949, -0.0835
    0xad63acc5, 0xb2c5ae86, 0xa14ead03, 0x253ea5e9, 0xab07a8ad, 0xad3d29c3, 0xabcdb407, 0xad58ae13,
    // -0.2026, -0.04233, 0.02347, -0.10455, -0.02254, -0.00414, -0.218, -0.203, -0.1282, -0.0904, -0.0949, -0.0004818, -0.06097, -0.0953, -0.02528, -0.0705
    0xa96bb27c, 0xaeb12602, 0x9c3da5c5, 0xb27fb2fa, 0xadc9b01a, 0x8fe5ae13, 0xae19abce, 0xac83a679,
    // -0.1421, -0.1074, -0.05765, -0.156, -0.02448, 0.01266, -0.0138, -0.02704, -0.02846, -0.02925, -0.0792, -0.006287, -0.06573, -0.1274, -0.0878, -0.07007
    0xaee0b08c, 0xb0feab61, 0x227ba644, 0xa6eca311, 0xa77da749, 0x9e70ad12, 0xb014ac35, 0xac7cad9f,
    // -0.2213, -0.05634, -0.1031, -0.004242, -0.0121, -0.02557, -0.0197, 0.06604, 0.01074, -0.1401, -0.1236, -0.259, -0.0252, -0.291, -0.12164, -0.1201
    0xab36b315, 0x9c58ae99, 0xa68ca232, 0x2c3aa50b, 0xb07c2180, 0xb425afe9, 0xb4a8a674, 0xafb0afc9,
    // -0.36, -0.01987, -0.01785, -0.025, -0.001036, -0.3813, -0.09607, -0.06006, -0.06824, -0.08246, -0.0926, 0.0522, -0.012276, -0.1698, -0.06757, -0.02751
    0xa516b5c3, 0xa666a492, 0xb61a943e, 0xabb0ae26, 0xad47ac5e, 0x2aaeaded, 0xb16fa249, 0xa70bac53,
};
static const uint embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias_dwords[32] = {
    // 0.0002414, -0.0008407, -8.756e-05, 0.000518, -0.000586, 0.0007467, 8.47e-05, 5.996e-05, 0.0004983, -0.0001678, 0.0001656, 0.0001718, -0.001162, 0.0004659, 0.001096, 0.0001646
    0x92e30be9, 0x103e85bd, 0x121e90cd, 0x3ee058d, 0x89801015, 0x9a1096d, 0xfa294c2, 0x965147d,
    // -6.39e-05, -0.000351, 0.00029, 0.00074, -0.000926, -0.0003345, 0.001688, 0.001334, -0.000626, 5.45e-05, -7.38e-05, -0.001844, -0.0001397, 9.95e-05, -0.0003667, 0.000506
    0x8dc08430, 0x12100cc0, 0x8d7b9396, 0x157716ea, 0x3929121, 0x978e84d6, 0x6858894, 0x10258e02,
    // -0.000515, 0.0004842, -0.000845, 2.14e-05, 0.001879, -0.0006294, -0.0001496, -0.0007825, -0.000722, 0.001013, -0.000338, 0.0002577, -0.0003638, -0.000538, -0.0001773, 1.216e-05
    0xfef9038, 0x16792ec, 0x912817b2, 0x926988e7, 0x142691ea, 0xc398d8a, 0x90688df6, 0xcc89cf,
    // -0.0009546, -0.00112, -0.001632, -0.0001243, 0.00098, 0.000442, -0.0008993, -0.0002527, -0.000549, 0.0002904, 0.001107, 0.0001274, -0.000452, -0.000646, 0.001542, 0.001253
    0x949693d2, 0x881396af, 0xf3e1404, 0x8c24935e, 0xcc2907f, 0x82d1489, 0x914b8f68, 0x15221651,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass7(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = {
        uint3(960, 540, 64), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 64), // threadGroupSliceSize
        uint3(960, 540, 64), // storageSize
        uint3(64, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        199065600, // threadGroupStorageByteOffset
        storage_Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped };
    
    const BufferStorage storage__bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 32), // threadGroupSliceSize
        uint4(3, 3, 16, 32), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        18048, // threadGroupStorageByteOffset
        0.004725906997919083, storage__bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = { embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 128), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 128), // threadGroupSliceSize
        uint4(1, 1, 64, 128), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        22656, // threadGroupStorageByteOffset
        0.005702305119484663, storage__bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<64> storage_embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias = { embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<64> > embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias = {
        128, // logicalSize
        0, // threadGroupSliceStart
        128, // threadGroupSliceSize
        128, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 128, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 128, 64), // threadGroupSliceSize
        uint4(1, 1, 128, 64), // storageSize
        uint4(128, 128, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        30848, // threadGroupStorageByteOffset
        0.005674135405570269, storage__bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias = { embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias };
    
    // /bottleneck/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_14 = uint3(960, 540, 64);
    const int3 groupStart_slice_14 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 64);
    const uint3 groupSize_slice_14 = uint3(64, 1, 64);
    const uint3 storageSize_slice_14 = uint3(960, 540, 64);
    const uint3 tensorByteStrides_slice_14 = uint3(64, 61440, 1);
    const uint3 paddingBegin_slice_14 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_14 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_14 = dot(groupStart_slice_14, tensorByteStrides_slice_14);
    const RWBufferStorage storage_slice_14 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_14 = { logicalSize_slice_14, groupStart_slice_14, groupSize_slice_14, storageSize_slice_14, tensorByteStrides_slice_14, paddingBegin_slice_14, paddingEnd_slice_14, threadGroupByteOffsetInTensor_slice_14 + 232243200, storage_slice_14 };
    // Fusedquantized_/bottleneck/ResidualBlock_0/residual_func/Concat_quantized_/bottleneck/ResidualBlock_0/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_0/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_0/body/pw_expand/Conv_/bottleneck/ResidualBlock_0/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_0/body/pw_contract/Conv_/bottleneck/ResidualBlock_0/Add (64, 540, 960), (32, 16, 3, 3), (32,), (128, 64, 1, 1), (128,), (64, 128, 1, 1), (64,) -> (64, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<64, 2>(0.016224239021539688, 0.02506415545940399, 0.019018396735191345, 0.015394741669297218, 0.03302272409200668, Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped, _bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias, _bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias, _bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias, slice_14, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_7
#ifdef MLSR_PASS_7_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass7_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /bottleneck/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_15 = uint3(960, 540, 64);
    const int3 groupStart_slice_15 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 64);
    const uint3 groupSize_slice_15 = uint3(32, 1, 64);
    const uint3 storageSize_slice_15 = uint3(960, 540, 64);
    const uint3 tensorByteStrides_slice_15 = uint3(64, 61440, 1);
    const uint3 paddingBegin_slice_15 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_15 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_15 = dot(groupStart_slice_15, tensorByteStrides_slice_15);
    const RWBufferStorage storage_slice_15 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_15 = { logicalSize_slice_15, groupStart_slice_15, groupSize_slice_15, storageSize_slice_15, tensorByteStrides_slice_15, paddingBegin_slice_15, paddingEnd_slice_15, threadGroupByteOffsetInTensor_slice_15 + 232243200, storage_slice_15 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_15, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_7_POST


#ifdef MLSR_PASS_8
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords[16] = {
    // 0.000715, -0.0002371, 5.025e-05, -0.00011766, 0.0001295, -0.0001693, -0.0001824, -5.156e-05, -0.000333, -0.00024, -0.0001291, -0.0002435, -0.0003464, 0.0003269, -0.0001765, 0.0001015
    0x8bc511db, 0x87b6034b, 0x898c083e, 0x836189fa, 0x8bdd8d75, 0x8bfb883b, 0xd5b8dad, 0x6a789c9,
    // -0.0001359, -0.0001458, 1.07e-05, 0.0001992, -0.000263, -5.287e-05, 0.0001112, -0.0003486, 8.947e-05, -0.0003796, -0.0001626, -7.296e-05, -7.09e-05, -0.0002668, -0.0001704, -0.000402
    0x88c78874, 0xa8700b4, 0x83778c4f, 0x8db6074a, 0x8e3805dd, 0x84c88954, 0x8c5f84a6, 0x8e968995,
};
static const uint embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias_dwords[64] = {
    // -0.1221, -0.1855, -0.03293, -0.09534, 0.1572, 0.02771, 0.1648, 0.05606, -0.1065, -0.4968, 0.05154, -0.02443, -0.1054, -0.12213, 0.01907, -0.1089
    0xb1f0afd0, 0xae1aa837, 0x27183108, 0x2b2d3146, 0xb7f3aed1, 0xa6412a99, 0xafd1aebf, 0xaef824e2,
    // -0.0856, -0.0552, -0.003407, -0.2429, -0.2346, -0.5293, -0.09045, -0.0696, -0.06287, -0.1539, 0.01807, 0.04657, 0.05182, -0.119, 0.02832, -0.2786
    0xab11ad7a, 0xb3c69afa, 0xb83cb382, 0xac74adca, 0xb0edac06, 0x29f624a0, 0xaf9e2aa2, 0xb4752740,
    // -0.05722, -0.09235, -0.03607, -0.11676, 0.08685, -0.1588, 0.10315, -0.1088, -0.008, -0.1067, 0.00507, -0.01854, -0.1882, -0.2389, -0.1076, -0.1682
    0xade9ab53, 0xaf79a89e, 0xb1152d8f, 0xaef72e9a, 0xaed4a019, 0xa4bf1d31, 0xb3a5b206, 0xb162aee3,
    // 0.058, 0.00209, -0.08105, -0.004932, 0.0964, -0.01141, -0.1704, 0.0654, 0.01415, 0.0191, -0.1945, -0.0897, -0.1669, -0.02756, -0.0412, -0.1301
    0x18482b6d, 0x9d0dad30, 0xa1d82e2b, 0x2c30b174, 0x24e4233f, 0xadbeb239, 0xa70eb157, 0xb02aa946,
    // -0.2157, -0.02658, 0.00537, 0.02931, 0.0989, 0.021, -0.10803, 0.04022, -0.2544, -0.0949, 0.0999, -0.11084, -0.2998, -0.1318, 0.06635, -0.0735
    0xa6ceb2e7, 0x27811d80, 0x25602e54, 0x2926aeea, 0xae13b412, 0xaf182e65, 0xb038b4cc, 0xacb42c3f,
    // -0.001949, 0.05603, -0.1555, 0.05823, -0.2515, 0.00203, -0.05777, -0.0796, -0.1984, 0.0122, 0.0156, -0.0841, -0.07666, -0.0172, -0.10657, 0.03522
    0x2b2c97fc, 0x2b74b0fa, 0x1828b406, 0xad18ab65, 0x223fb259, 0xad6223fd, 0xa467ace8, 0x2882aed2,
    // -0.0921, -0.2238, 0.00642, -0.0991, -0.0681, 0.0448, -0.2186, -0.1697, -0.0853, -0.04703, -0.05267, -0.04965, -0.11725, -0.1117, 0.005257, -0.0486
    0xb329ade5, 0xae581e93, 0x29bcac5c, 0xb16eb2ff, 0xaa05ad76, 0xaa5baabe, 0xaf26af81, 0xaa391d62,
    // -0.1874, -0.1434, -0.1259, -0.0682, 0.131, -0.03114, 0.07983, -0.0372, -0.02962, 0.0288, -0.10876, 0.0163, -0.0124, -0.04898, -0.01952, -0.1509
    0xb097b1ff, 0xac5db007, 0xa7f93031, 0xa8c32d1c, 0x275fa795, 0x242caef6, 0xaa45a259, 0xb0d4a4ff,
};
static const uint embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias_dwords[32] = {
    // 7.045e-05, 0.0006824, -0.0001343, 7.254e-05, -0.0007815, -0.0004172, 0.0003169, -0.0002568, 0.0005493, -0.0003018, 0.001037, -0.0009327, 6.485e-05, 0.0001239, 0.0001686, -0.0004327
    0x1197049e, 0x4c18867, 0x8ed69267, 0x8c350d31, 0x8cf21080, 0x93a4143f, 0x80f0440, 0x8f170986,
    // -0.000394, -0.0002182, 0.001375, 0.000349, -0.000408, 0.000412, -0.0006113, 0.0004559, -0.0001287, -0.000562, 8.2e-06, 0.000264, -0.0002047, -0.0005198, 0.0001135, -0.000774
    0x8b268e75, 0xdb815a2, 0xec08eaf, 0xf789102, 0x909b8838, 0xc53008a, 0x90428ab5, 0x92570770,
    // -0.000293, 0.001584, 0.0005846, 0.0004268, -0.0002066, -0.000488, -0.0007553, 0.001459, -0.0002214, -0.001118, -8.357e-05, 0.0003612, -0.00105, -0.0004206, -0.00010455, 0.001072
    0x167d8ccd, 0xefe10ca, 0x8fff8ac5, 0x15fa9230, 0x94948b41, 0xdeb857a, 0x8ee4944d, 0x146486da,
    // 6.8e-05, -6.12e-05, -4e-05, 0.000636, 0.0001384, 0.0001757, 0.0001901, 0.000413, 0.000748, 0.000625, 0.0001657, -0.0004232, 0.0002875, -2.23e-05, 0.000283, -0.000578
    0x84030475, 0x1136829f, 0x9c20889, 0xec40a3b, 0x111f1221, 0x8eef096e, 0x81760cb6, 0x90bc0ca3,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass8(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage__bottleneck_ResidualBlock_1_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _bottleneck_ResidualBlock_1_residual_func_Split_output_grouped = {
        uint3(960, 540, 64), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 64), // threadGroupSliceSize
        uint3(960, 540, 64), // storageSize
        uint3(64, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        232243200, // threadGroupStorageByteOffset
        storage__bottleneck_ResidualBlock_1_residual_func_Split_output_grouped };
    
    const BufferStorage storage__bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 32), // threadGroupSliceSize
        uint4(3, 3, 16, 32), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        39040, // threadGroupStorageByteOffset
        0.0033376424107700586, storage__bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = { embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 128), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 128), // threadGroupSliceSize
        uint4(1, 1, 64, 128), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        43648, // threadGroupStorageByteOffset
        0.005053466185927391, storage__bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<64> storage_embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias = { embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<64> > embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias = {
        128, // logicalSize
        0, // threadGroupSliceStart
        128, // threadGroupSliceSize
        128, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 128, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 128, 64), // threadGroupSliceSize
        uint4(1, 1, 128, 64), // storageSize
        uint4(128, 128, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        51840, // threadGroupStorageByteOffset
        0.005056253634393215, storage__bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias = { embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias };
    
    // /bottleneck/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_16 = uint3(960, 540, 64);
    const int3 groupStart_slice_16 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 64);
    const uint3 groupSize_slice_16 = uint3(64, 1, 64);
    const uint3 storageSize_slice_16 = uint3(960, 540, 64);
    const uint3 tensorByteStrides_slice_16 = uint3(64, 61440, 1);
    const uint3 paddingBegin_slice_16 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_16 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_16 = dot(groupStart_slice_16, tensorByteStrides_slice_16);
    const RWBufferStorage storage_slice_16 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_16 = { logicalSize_slice_16, groupStart_slice_16, groupSize_slice_16, storageSize_slice_16, tensorByteStrides_slice_16, paddingBegin_slice_16, paddingEnd_slice_16, threadGroupByteOffsetInTensor_slice_16 + 199065600, storage_slice_16 };
    // Fusedquantized_/bottleneck/ResidualBlock_1/residual_func/Concat_quantized_/bottleneck/ResidualBlock_1/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_1/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_1/body/pw_expand/Conv_/bottleneck/ResidualBlock_1/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_1/body/pw_contract/Conv_/bottleneck/ResidualBlock_1/Add (64, 540, 960), (32, 16, 3, 3), (32,), (128, 64, 1, 1), (128,), (64, 128, 1, 1), (64,) -> (64, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<64, 2>(0.015394741669297218, 0.03302272409200668, 0.0228197630494833, 0.020448477938771248, 0.03408152610063553, _bottleneck_ResidualBlock_1_residual_func_Split_output_grouped, _bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias, _bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias, _bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias, slice_16, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_8
#ifdef MLSR_PASS_8_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass8_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /bottleneck/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_17 = uint3(960, 540, 64);
    const int3 groupStart_slice_17 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 64);
    const uint3 groupSize_slice_17 = uint3(32, 1, 64);
    const uint3 storageSize_slice_17 = uint3(960, 540, 64);
    const uint3 tensorByteStrides_slice_17 = uint3(64, 61440, 1);
    const uint3 paddingBegin_slice_17 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_17 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_17 = dot(groupStart_slice_17, tensorByteStrides_slice_17);
    const RWBufferStorage storage_slice_17 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_17 = { logicalSize_slice_17, groupStart_slice_17, groupSize_slice_17, storageSize_slice_17, tensorByteStrides_slice_17, paddingBegin_slice_17, paddingEnd_slice_17, threadGroupByteOffsetInTensor_slice_17 + 199065600, storage_slice_17 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_17, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_8_POST


#ifdef MLSR_PASS_9
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FNB_CT2D_ADD.hlsli"

static const uint embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords[16] = {
    // -0.0004165, -0.0001596, -0.0002122, -0.0002697, -7.23e-05, -0.0005255, 0.000278, -0.0005956, -0.000101, -0.0003376, 0.001141, -3.976e-05, 0.0002011, -7.81e-05, 0.0002059, -0.0004861
    0x893b8ed3, 0x8c6b8af4, 0x904e84bd, 0x90e10c8e, 0x8d88869e, 0x829b14ac, 0x851e0a97, 0x8ff70abf,
    // -0.0001694, 0.0002456, 4.05e-05, -0.0004413, 0.0002214, -7.57e-06, 3.6e-05, 0.0004117, 0.0003157, 0.000223, 0.000288, 2.146e-05, 3.14e-05, -0.0002093, 0.0004225, -4.37e-05
    0xc06898d, 0x8f3b02a7, 0x807f0b41, 0xebf025c, 0xb4f0d2c, 0x1680cb8, 0x8adc020f, 0x82dd0eec,
};
static const uint embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias_dwords[64] = {
    // 0.01433, -0.1624, 0.04166, -0.04904, 0.04468, 0.0551, -0.0439, -0.2356, 0.0822, -0.06476, 0.0662, -0.0979, -0.3687, -0.05533, -0.156, -0.00665
    0xb1322356, 0xaa472955, 0x2b0e29b8, 0xb38aa99f, 0xac252d43, 0xae442c3d, 0xab15b5e6, 0x9ecfb0fe,
    // -0.04367, -0.3848, -0.10406, -0.10486, -0.01023, -0.0128, -0.3386, 0.04413, -0.03165, -0.05444, 0.0902, 0.113, -0.06665, 0.03702, -0.324, -0.09247
    0xb628a997, 0xaeb6aea9, 0xa28ea13d, 0x29a6b56b, 0xaaf8a80d, 0x2f3b2dc6, 0x28bdac44, 0xadebb52f,
    // -0.1188, 0.04495, -0.003784, -0.057, 0.03093, -0.1764, -0.01976, 0.01121, -0.2441, 0.003689, -0.0531, 0.04056, -0.12067, 0.088, -0.218, -0.11957
    0x29c1af9a, 0xab4c9bc0, 0xb1a527eb, 0x21bda50f, 0x1b8eb3d0, 0x2931aacc, 0x2da2afb9, 0xafa7b2fa,
    // -0.0824, -0.1076, 0.04156, 0.04932, -0.03096, -0.03342, -0.1891, 0.1478, -0.0908, -0.12036, -0.03482, -0.3438, 0.01971, -0.1954, 0.0183, -0.134
    0xaee3ad46, 0x2a502952, 0xa847a7ed, 0x30bbb20d, 0xafb4add0, 0xb580a875, 0xb241250c, 0xb04a24af,
    // 0.0664, -0.01129, 0.1349, 0.02766, -0.0218, -0.08514, -0.1879, -0.0374, 0.0652, -0.2306, -0.1415, -0.623, -0.3018, -0.01965, 0.06036, 0.009315
    0xa1c82c40, 0x27153051, 0xad73a595, 0xa8cab203, 0xb3612c2c, 0xb8fcb087, 0xa508b4d4, 0x20c52bba,
    // -0.0374, -0.1582, -0.1254, 0.02876, -0.07153, 0.1322, -0.10944, 0.0828, -0.1941, -0.01617, -0.3008, -0.05878, -0.1334, -0.05173, -0.03223, 0.09576
    0xb110a8ca, 0x275db003, 0x303bac94, 0x2d4daf01, 0xa424b236, 0xab86b4d0, 0xaa9fb045, 0x2e21a820,
    // 0.00427, -0.0294, 0.0912, -0.2103, -0.1058, -0.0872, -0.192, -0.1697, -0.1032, -0.02728, -0.2065, -0.05786, 0.03238, -0.324, -0.0548, -0.1366
    0xa7871c5f, 0xb2bb2dd6, 0xad95aec5, 0xb16eb225, 0xa6fcae9b, 0xab68b29c, 0xb52f2825, 0xb05fab04,
    // 0.01531, 0.01066, 0.003195, -0.0814, -0.3005, 0.004097, -0.04678, 0.1233, 0.01211, -0.0824, -0.1826, -0.03032, -0.292, -0.049, 0.1011, -0.1637
    0x217523d7, 0xad361a8b, 0x1c32b4cf, 0x2fe4a9fd, 0xad462233, 0xa7c3b1d8, 0xaa46b4ac, 0xb13d2e78,
};
static const uint embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias_dwords[32] = {
    // 0.00010794, 4.72e-05, -0.000501, -9.954e-05, -0.001216, 0.0001742, 0.0001973, -0.0001382, -0.0002323, 0.00069, -3.77e-05, -0.0001189, 6.926e-05, 0.001582, 0.0008783, -0.000165
    0x3180713, 0x8686901b, 0x9b594fb, 0x88870a77, 0x11a78b9d, 0x87cb8279, 0x167b048a, 0x89681332,
    // 0.0006776, -0.00093, -0.0001516, 0.001867, -0.000135, -0.0005774, -0.0003717, -0.0003428, 0.00035, 0.0006194, 0.0008283, 0.0015135, 0.0005183, 0.001072, -0.0006013, -0.001018
    0x939e118d, 0x17a688f8, 0x90bb886c, 0x8d9e8e17, 0x11130dbc, 0x163312c9, 0x1464103f, 0x942b90ed,
    // 0.0003395, -0.002117, 0.002542, -0.001171, -0.002232, 0.0005283, 0.002079, -0.0001801, 0.0002627, 0.000878, -0.002354, -0.000409, -0.000633, 0.001195, 0.001103, 0.00205
    0x98560d90, 0x94cc1935, 0x10549892, 0x89e71842, 0x13310c4e, 0x8eb398d2, 0x14e5912f, 0x18331485,
    // 0.0004263, -0.0001436, 0.002144, 0.001467, -0.00254, 0.0002437, -0.0005283, 9.143e-05, -0.001862, 0.001114, -0.00232, -0.002453, 0.001647, 0.0013275, -0.001078, -0.002651
    0x88b50efc, 0x16021864, 0xbfc9934, 0x5fe9054, 0x149097a0, 0x990698c0, 0x157016bf, 0x996e946a,
};
static const uint embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias_dwords[16] = {
    // 0.00427, -0.04572, 0.0574, -0.0353, -0.04773, -0.01462, -0.00502, -0.0679, -0.02382, 0.04807, 0.03677, 0.02864, -0.02202, 0.010704, 0.08765, 0.01051
    0xa9da1c5f, 0xa8852b59, 0xa37caa1c, 0xac589d24, 0x2a27a619, 0x275528b5, 0x217ba5a3, 0x21622d9c,
    // 0.1405, 0.02438, -0.1136, -0.08386, 0.0751, 0.0287, -0.171, -0.02733, -0.02582, 0.012726, 0.03052, 0.02043, 0.02924, 0.05276, -0.2214, -0.02054
    0x263e307f, 0xad5eaf45, 0x27592cce, 0xa6ffb179, 0x2284a69c, 0x253b27d0, 0x2ac1277c, 0xa542b316,
};

[numthreads(8, 8, 1)]
void fsr4_model_v07_i8_pass9(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(8, 8, 1);
    
    const RWBufferStorage storage__bottleneck_ResidualBlock_2_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _bottleneck_ResidualBlock_2_residual_func_Split_output_grouped = {
        uint3(960, 540, 64), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 64), // threadGroupSliceSize
        uint3(960, 540, 64), // storageSize
        uint3(64, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        199065600, // threadGroupStorageByteOffset
        storage__bottleneck_ResidualBlock_2_residual_func_Split_output_grouped };
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 32), // threadGroupSliceSize
        uint3(1920, 1080, 32), // storageSize
        uint3(32, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        132710400, // threadGroupStorageByteOffset
        0.015598728321492672, storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const BufferStorage storage__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 32), // threadGroupSliceSize
        uint4(3, 3, 16, 32), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        60032, // threadGroupStorageByteOffset
        0.004619232844561338, storage__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = { embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 128), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 128), // threadGroupSliceSize
        uint4(1, 1, 64, 128), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        64640, // threadGroupStorageByteOffset
        0.005028866697102785, storage__bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<64> storage_embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias = { embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<64> > embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias = {
        128, // logicalSize
        0, // threadGroupSliceStart
        128, // threadGroupSliceSize
        128, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 128, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 128, 64), // threadGroupSliceSize
        uint4(1, 1, 128, 64), // storageSize
        uint4(128, 128, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        72832, // threadGroupStorageByteOffset
        0.005035200621932745, storage__bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias = { embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias };
    
    const BufferStorage storage_hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_HWCN< BufferStorage > hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 32, 64), // threadGroupSliceSize
        uint4(2, 2, 32, 64), // storageSize
        uint4(2048, 4096, 64, 1), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        81024, // threadGroupStorageByteOffset
        0.002797692781314254, storage_hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias = { embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias };
    
    // FusedFusedquantized_/bottleneck/ResidualBlock_2/residual_func/Concat_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_2/body/pw_expand/Conv_/bottleneck/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_2/body/pw_contract/Conv_/bottleneck/ResidualBlock_2/Add_Fusedquantized_/bottleneck/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_Fusedquantized_/decoder3/skip_pop_0/Add_QuantizedOutput_output_grouped
    const uint3 logicalSize_slice_18 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_18 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(16, 16, 32);
    const uint3 groupSize_slice_18 = uint3(16, 16, 32);
    const uint3 storageSize_slice_18 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_18 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_18 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_18 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_18 = dot(groupStart_slice_18, tensorByteStrides_slice_18);
    const RWBufferStorage storage_slice_18 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_18 = { logicalSize_slice_18, groupStart_slice_18, groupSize_slice_18, storageSize_slice_18, tensorByteStrides_slice_18, paddingBegin_slice_18, paddingEnd_slice_18, threadGroupByteOffsetInTensor_slice_18 + 265420800, storage_slice_18 };
    // FusedFusedquantized_/bottleneck/ResidualBlock_2/residual_func/Concat_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_2/body/pw_expand/Conv_/bottleneck/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_2/body/pw_contract/Conv_/bottleneck/ResidualBlock_2/Add_Fusedquantized_/bottleneck/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_Fusedquantized_/decoder3/skip_pop_0/Add_QuantizedOutput (64, 540, 960), (32, 1080, 1920), (32, 16, 3, 3), (32,), (128, 64, 1, 1), (128,), (64, 128, 1, 1), (64,), (64, 32, 2, 2), (32,) -> (32, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FNB_CT2D_ADD<64, 2>(0.020448477938771248, 0.03408152610063553, 0.028574272990226746, 0.030069846659898758, 0.024976711720228195, 0.0332077294588089, _bottleneck_ResidualBlock_2_residual_func_Split_output_grouped, fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, _bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias, _bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias, _bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias, hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias, slice_18, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_9
#ifdef MLSR_PASS_9_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass9_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // FusedFusedquantized_/bottleneck/ResidualBlock_2/residual_func/Concat_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_2/body/pw_expand/Conv_/bottleneck/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_2/body/pw_contract/Conv_/bottleneck/ResidualBlock_2/Add_Fusedquantized_/bottleneck/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_Fusedquantized_/decoder3/skip_pop_0/Add_QuantizedOutput_output_grouped
    const uint3 logicalSize_slice_19 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_19 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_19 = uint3(32, 1, 32);
    const uint3 storageSize_slice_19 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_19 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_19 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_19 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_19 = dot(groupStart_slice_19, tensorByteStrides_slice_19);
    const RWBufferStorage storage_slice_19 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_19 = { logicalSize_slice_19, groupStart_slice_19, groupSize_slice_19, storageSize_slice_19, tensorByteStrides_slice_19, paddingBegin_slice_19, paddingEnd_slice_19, threadGroupByteOffsetInTensor_slice_19 + 265420800, storage_slice_19 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_19, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_9_POST


#ifdef MLSR_PASS_10
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 4, 5, 7, -25, 16, -19, -22, 21, -1, 16, 18, 14, -5, 13, 5, -20, 12, 27, -10, 36, 25, -36, 12, 6, -4, -24, -32, -8, 6, 23, -26, -7
    0xe7070504, 0x15eaed10, 0xe1210ff, 0xec050dfb, 0x24f61b0c, 0x60cdc19, 0xf8e0e8fc, 0xf9e61706,
    // -9, -7, 6, -8, -1, -2, 3, 17, -24, 19, 39, -2, 40, 17, -4, -15, 14, -9, 6, -1, -19, -52, -45, 17, 49, -22, 24, 19, 38, 7, -11, -45
    0xf806f9f7, 0x1103feff, 0xfe2713e8, 0xf1fc1128, 0xff06f70e, 0x11d3cced, 0x1318ea31, 0xd3f50726,
    // 24, -95, -11, 50, 92, 70, -26, 51, 95, 73, 27, 90, 51, 74, 6, 22, 2, -13, 35, -18, -3, -38, -33, 19, -37, 3, -5, -37, 22, 7, -14, -39
    0x32f5a118, 0x33e6465c, 0x5a1b495f, 0x16064a33, 0xee23f302, 0x13dfdafd, 0xdbfb03db, 0xd9f20716,
    // 31, 16, 10, -12, 1, -18, 0, -5, -2, -11, 18, -9, 16, 29, -28, -15, 16, 20, 11, -21, -15, -12, -15, -4, -8, -12, -5, 15, -5, 9, 10, -19
    0xf40a101f, 0xfb00ee01, 0xf712f5fe, 0xf1e41d10, 0xeb0b1410, 0xfcf1f4f1, 0xffbf4f8, 0xed0a09fb,
    // -20, -24, 31, -6, 5, -3, -22, 12, -28, 19, -7, -24, 11, 26, 1, -12, 15, -7, -25, 15, 23, -7, -37, 37, -27, -1, -15, 1, -8, 0, 0, 8
    0xfa1fe8ec, 0xceafd05, 0xe8f913e4, 0xf4011a0b, 0xfe7f90f, 0x25dbf917, 0x1f1ffe5, 0x80000f8,
    // -40, 20, -43, 9, 6, -25, 43, 38, -26, -36, -8, -7, -36, 23, 19, -5, -12, 4, 14, -2, 48, -26, 20, -19, -28, 17, 7, 4, -7, -7, -11, -4
    0x9d514d8, 0x262be706, 0xf9f8dce6, 0xfb1317dc, 0xfe0e04f4, 0xed14e630, 0x40711e4, 0xfcf5f9f9,
    // -8, -12, -24, 22, -9, -20, 16, 15, -24, -1, -24, -23, -4, -25, -6, -29, 48, 67, 45, 16, -15, 10, -45, 75, 26, -90, 37, 39, -65, -42, 31, 2
    0x16e8f4f8, 0xf10ecf7, 0xe9e8ffe8, 0xe3fae7fc, 0x102d4330, 0x4bd30af1, 0x2725a61a, 0x21fd6bf,
    // -21, -21, 3, 51, 51, -17, 8, 25, -5, -13, 2, 2, -44, -30, -17, -12, -32, -8, 17, -22, 21, 16, 1, -27, 1, 4, 17, -17, -22, -9, -22, -1
    0x3303ebeb, 0x1908ef33, 0x202f3fb, 0xf4efe2d4, 0xea11f8e0, 0xe5011015, 0xef110401, 0xffeaf7ea,
    // -53, -2, -64, -96, -14, 52, 12, 7, 39, 62, -16, 31, 22, 19, 22, 14, -7, 20, 10, 27, -50, 24, -15, 47, 42, 2, -40, -19, 3, -10, 9, 15
    0xa0c0fecb, 0x70c34f2, 0x1ff03e27, 0xe161316, 0x1b0a14f9, 0x2ff118ce, 0xedd8022a, 0xf09f603,
    // -6, 13, -8, 38, -18, 1, 48, -5, 11, 5, 12, 0, 2, 5, 13, -4, 12, -41, -16, 0, 5, -13, 71, 16, -31, -49, 5, 28, 25, 21, 18, -44
    0x26f80dfa, 0xfb3001ee, 0xc050b, 0xfc0d0502, 0xf0d70c, 0x1047f305, 0x1c05cfe1, 0xd4121519,
    // 12, -22, -19, 8, 5, 22, 2, 14, -5, -1, 25, -7, 5, 17, 21, -40, 32, -1, -33, 10, 47, 51, 55, -4, 44, 21, -4, 10, 38, 44, 12, -17
    0x8edea0c, 0xe021605, 0xf919fffb, 0xd8151105, 0xadfff20, 0xfc37332f, 0xafc152c, 0xef0c2c26,
    // -42, -34, 92, 88, 3, -97, 25, -13, -52, -55, 61, -40, -14, -48, -18, 33, 5, -9, 13, 17, -53, 30, -39, -3, -3, 26, 6, -1, 46, 24, 32, 30
    0x585cded6, 0xf3199f03, 0xd83dc9cc, 0x21eed0f2, 0x110df705, 0xfdd91ecb, 0xff061afd, 0x1e20182e,
    // 8, -11, 12, 18, 14, 37, 39, -8, 46, -22, 20, 13, 21, 21, 31, -5, -50, -64, 60, -4, -44, 22, -11, 6, 26, 37, -7, -13, 27, -20, -2, 18
    0x120cf508, 0xf827250e, 0xd14ea2e, 0xfb1f1515, 0xfc3cc0ce, 0x6f516d4, 0xf3f9251a, 0x12feec1b,
    // -28, -34, -8, -20, -32, 19, -13, -38, 1, 8, 17, -17, 2, 29, -11, -22, -17, 24, -15, -16, 7, -38, -16, -2, 14, 18, 0, -2, 32, -20, -30, -11
    0xecf8dee4, 0xdaf313e0, 0xef110801, 0xeaf51d02, 0xf0f118ef, 0xfef0da07, 0xfe00120e, 0xf5e2ec20,
    // -11, 23, 0, -2, 25, -37, 8, 14, 25, -9, 24, -10, -13, -14, -22, -10, -12, 23, 2, -20, 1, -32, 25, 11, 8, -4, 10, -17, 4, 17, -7, -33
    0xfe0017f5, 0xe08db19, 0xf618f719, 0xf6eaf2f3, 0xec0217f4, 0xb19e001, 0xef0afc08, 0xdff91104,
    // 35, 28, 5, -74, 64, 30, 52, 16, 37, 42, 12, -12, 5, -41, -53, -18, 2, 85, -5, 57, 28, -5, 29, 11, -35, -14, -9, -87, -96, -88, -2, -26
    0xb6051c23, 0x10341e40, 0xf40c2a25, 0xeecbd705, 0x39fb5502, 0xb1dfb1c, 0xa9f7f2dd, 0xe6fea8a0,
    // -15, 1, 76, -42, 68, -53, -15, 9, -22, -2, -17, -26, -16, -6, -15, -31, 15, -2, -10, -8, -2, 6, 1, 16, -1, 3, 9, -20, 28, 8, 1, -14
    0xd64c01f1, 0x9f1cb44, 0xe6effeea, 0xe1f1faf0, 0xf8f6fe0f, 0x100106fe, 0xec0903ff, 0xf201081c,
    // -49, 49, 19, 4, -31, 9, 45, 4, -2, 25, -23, -63, 13, -15, -34, -18, -22, -9, 10, -20, 31, -37, -23, -39, -40, 14, 17, -24, -11, -11, -39, -24
    0x41331cf, 0x42d09e1, 0xc1e919fe, 0xeedef10d, 0xec0af7ea, 0xd9e9db1f, 0xe8110ed8, 0xe8d9f5f5,
    // -38, 31, -41, -3, -38, -31, 10, -22, -32, 1, 5, 27, 23, -28, -16, 0, 12, 68, -76, -20, 39, 7, -8, -3, -15, 3, 11, 2, -18, -12, 1, -5
    0xfdd71fda, 0xea0ae1da, 0x1b0501e0, 0xf0e417, 0xecb4440c, 0xfdf80727, 0x20b03f1, 0xfb01f4ee,
    // 4, 9, 7, 16, 4, 4, -24, -3, -11, 16, -20, -2, 16, -20, 21, -3, -6, 43, -38, 13, -42, -32, -10, -49, -31, -28, 8, 13, 20, -28, 17, -7
    0x10070904, 0xfde80404, 0xfeec10f5, 0xfd15ec10, 0xdda2bfa, 0xcff6e0d6, 0xd08e4e1, 0xf911e414,
    // -14, -6, -49, 52, 84, 25, -28, -37, 40, 58, 49, 91, 73, 4, -43, -5, -63, 22, -11, 2, -24, 26, -40, -44, -23, 29, -25, -5, 48, -18, 0, 35
    0x34cffaf2, 0xdbe41954, 0x5b313a28, 0xfbd50449, 0x2f516c1, 0xd4d81ae8, 0xfbe71de9, 0x2300ee30,
    // 5, 37, -5, 14, -2, -10, -20, -18, 21, -16, 2, 33, -2, -5, 20, -7, -10, 78, -26, 7, -26, 23, 0, -62, 50, 7, -50, 2, 0, 9, -5, 4
    0xefb2505, 0xeeecf6fe, 0x2102f015, 0xf914fbfe, 0x7e64ef6, 0xc20017e6, 0x2ce0732, 0x4fb0900,
    // -32, 5, 25, -21, -4, 1, 5, -60, -2, 26, 10, -12, -8, -28, -24, -14, -47, 4, -48, 26, -15, -20, 0, 32, -6, -7, -19, -21, -3, 21, -5, -7
    0xeb1905e0, 0xc40501fc, 0xf40a1afe, 0xf2e8e4f8, 0x1ad004d1, 0x2000ecf1, 0xebedf9fa, 0xf9fb15fd,
    // 16, -42, -39, -61, 17, 0, -37, 39, -3, 8, 33, 1, 5, 1, -2, -10, -3, 29, -35, 28, 0, 1, -18, 31, -6, -19, -22, -32, -27, 14, 2, 6
    0xc3d9d610, 0x27db0011, 0x12108fd, 0xf6fe0105, 0x1cdd1dfd, 0x1fee0100, 0xe0eaedfa, 0x6020ee5,
    // 10, -19, -31, 8, 30, 6, 58, -31, -24, 20, -33, -18, -11, 32, -7, -47, -44, -7, -17, -111, -13, -48, -110, 16, 20, 70, -58, -34, 21, 0, 26, 71
    0x8e1ed0a, 0xe13a061e, 0xeedf14e8, 0xd1f920f5, 0x91eff9d4, 0x1092d0f3, 0xdec64614, 0x471a0015,
    // -10, 12, 5, 45, -42, 29, -42, 31, 20, 22, -2, -3, 19, 19, 12, 35, 10, -12, -4, 2, -4, 13, -46, -7, -18, -10, -14, -15, -25, 40, 17, 8
    0x2d050cf6, 0x1fd61dd6, 0xfdfe1614, 0x230c1313, 0x2fcf40a, 0xf9d20dfc, 0xf1f2f6ee, 0x81128e7,
    // -87, -32, -14, 28, -13, -39, -9, 13, -6, -8, 7, -64, 16, 12, 16, 34, 37, 11, 6, -38, 20, -15, -30, 3, 2, 4, -8, -34, -44, 19, 0, 2
    0x1cf2e0a9, 0xdf7d9f3, 0xc007f8fa, 0x22100c10, 0xda060b25, 0x3e2f114, 0xdef80402, 0x20013d4,
    // 5, -3, 19, 9, -2, 7, 6, -2, 38, -8, 11, -27, -17, 34, 27, -7, -40, -7, -13, 18, -54, -31, 67, -3, 18, -78, -5, -13, -14, 13, 17, -28
    0x913fd05, 0xfe0607fe, 0xe50bf826, 0xf91b22ef, 0x12f3f9d8, 0xfd43e1ca, 0xf3fbb212, 0xe4110df2,
    // -17, -6, -39, -7, -10, 3, 6, 13, 20, -15, 3, 19, -4, 8, -4, -21, -26, 28, -7, 28, -34, -7, 16, 4, 8, -33, 3, 14, 27, 4, -16, 15
    0xf9d9faef, 0xd0603f6, 0x1303f114, 0xebfc08fc, 0x1cf91ce6, 0x410f9de, 0xe03df08, 0xff0041b,
    // 8, 85, -50, -83, 50, -2, 8, 18, 10, 127, -60, 60, 67, -5, -56, 26, -8, 0, 25, -7, 43, 23, -18, -19, -35, -34, 1, 4, -41, 26, 5, 8
    0xadce5508, 0x1208fe32, 0x3cc47f0a, 0x1ac8fb43, 0xf91900f8, 0xedee172b, 0x401dedd, 0x8051ad7,
    // -26, -15, 0, 16, -6, 17, 6, -7, -8, -3, 14, -10, -11, 2, 8, -1, -46, -30, -10, -23, -22, 39, 23, 2, -24, 29, 12, -10, -13, -5, 6, 2
    0x1000f1e6, 0xf90611fa, 0xf60efdf8, 0xff0802f5, 0xe9f6e2d2, 0x21727ea, 0xf60c1de8, 0x206fbf3,
    // -17, -14, -40, 15, -3, 32, -2, 3, -23, -4, 12, -5, -7, 3, 10, 0, -23, -10, 24, -10, -5, -14, -39, -27, 2, -1, -15, 26, -11, 6, -23, 10
    0xfd8f2ef, 0x3fe20fd, 0xfb0cfce9, 0xa03f9, 0xf618f6e9, 0xe5d9f2fb, 0x1af1ff02, 0xae906f5,
    // -10, 10, 4, -43, -35, -12, 7, -17, -32, 5, 21, 40, -22, -10, -5, 24, 34, 15, -13, -16, -4, -17, 33, 20, 1, -26, 4, -13, 28, 12, -2, 13
    0xd5040af6, 0xef07f4dd, 0x281505e0, 0x18fbf6ea, 0xf0f30f22, 0x1421effc, 0xf304e601, 0xdfe0c1c,
    // 1, -25, 2, -58, -44, -6, 40, -9, 54, 13, -51, -16, 3, 13, -5, -40, 56, 1, -66, -7, -30, 63, 43, 62, 8, -61, 41, 89, -32, -13, -21, -57
    0xc602e701, 0xf728fad4, 0xf0cd0d36, 0xd8fb0d03, 0xf9be0138, 0x3e2b3fe2, 0x5929c308, 0xc7ebf3e0,
    // 5, 32, -29, 98, 19, 8, 4, 45, 19, 38, 57, 13, 23, -35, 23, 98, 36, -10, 8, -10, 14, -26, -12, 20, 8, -22, 23, 0, 12, -11, -14, 9
    0x62e32005, 0x2d040813, 0xd392613, 0x6217dd17, 0xf608f624, 0x14f4e60e, 0x17ea08, 0x9f2f50c,
    // 14, 2, -10, 44, -42, -12, 56, 34, 38, -15, -8, -8, 15, -16, 12, 16, 5, 10, -26, -11, -22, 2, 34, 3, -24, 10, 0, 3, 7, -54, -29, 24
    0x2cf6020e, 0x2238f4d6, 0xf8f8f126, 0x100cf00f, 0xf5e60a05, 0x32202ea, 0x3000ae8, 0x18e3ca07,
    // 14, -29, -5, 16, 8, -18, 8, -7, -12, 8, -1, -9, -13, 3, -1, -7, -30, 2, -15, -21, -8, -17, 4, 43, -40, 11, 12, 42, -22, -6, 3, 33
    0x10fbe30e, 0xf908ee08, 0xf7ff08f4, 0xf9ff03f3, 0xebf102e2, 0x2b04eff8, 0x2a0c0bd8, 0x2103faea,
    // -5, 20, -8, -3, 14, -3, 13, 43, -26, 27, -12, -3, -1, 7, 20, 2, -17, 17, 47, -8, 54, 19, -26, -24, 54, 12, 25, -7, -23, -20, -16, 14
    0xfdf814fb, 0x2b0dfd0e, 0xfdf41be6, 0x21407ff, 0xf82f11ef, 0xe8e61336, 0xf9190c36, 0xef0ece9,
    // -29, -35, -93, 15, -27, 71, -10, -57, -43, -6, -39, 43, -13, 54, -34, 43, 29, 38, 32, -3, 19, -24, 73, 14, -39, -16, -40, -22, -30, 2, 29, -53
    0xfa3dde3, 0xc7f647e5, 0x2bd9fad5, 0x2bde36f3, 0xfd20261d, 0xe49e813, 0xead8f0d9, 0xcb1d02e2,
    // -11, -16, 23, -45, 2, 14, 15, 11, 52, 12, -9, 1, -19, 9, 25, 0, -4, -5, 22, 7, -59, -16, 0, -30, 35, -1, 15, -33, -21, -5, -6, 7
    0xd317f0f5, 0xb0f0e02, 0x1f70c34, 0x1909ed, 0x716fbfc, 0xe200f0c5, 0xdf0fff23, 0x7fafbeb,
    // 8, -3, -46, 22, 23, -14, 22, 11, -7, 2, -2, 33, 18, 16, -23, 4, 35, 20, -7, -16, 13, 19, 3, -3, 13, -11, 14, 2, 25, -18, -21, 8
    0x16d2fd08, 0xb16f217, 0x21fe02f9, 0x4e91012, 0xf0f91423, 0xfd03130d, 0x20ef50d, 0x8ebee19,
    // -17, 18, 25, 70, -14, -45, 34, 0, -3, 38, -14, -64, -11, -19, 26, -3, -26, 3, 38, -41, 20, -17, 10, -5, -15, 14, -4, 42, -11, -2, 34, -15
    0x461912ef, 0x22d3f2, 0xc0f226fd, 0xfd1aedf5, 0xd72603e6, 0xfb0aef14, 0x2afc0ef1, 0xf122fef5,
    // 41, 0, -5, -37, 3, -2, 49, -56, 16, 26, -49, 18, 39, 34, 33, -27, -86, 51, 26, -67, -82, 6, -39, -15, -57, -6, -35, -33, 63, -44, -91, -43
    0xdbfb0029, 0xc831fe03, 0x12cf1a10, 0xe5212227, 0xbd1a33aa, 0xf1d906ae, 0xdfddfac7, 0xd5a5d43f,
    // -23, -9, -5, 55, 64, -5, -16, -13, -13, 43, 100, 34, -42, -31, 28, 41, -2, 5, 10, -4, 10, -27, -2, -4, 15, 14, -16, 31, -17, 6, 23, -18
    0x37fbf7e9, 0xf3f0fb40, 0x22642bf3, 0x291ce1d6, 0xfc0a05fe, 0xfcfee50a, 0x1ff00e0f, 0xee1706ef,
    // 40, -41, -29, -11, 68, -16, -69, -19, -14, -23, 64, 77, -5, 11, -15, -6, -10, 47, 16, -2, -59, 5, 31, -6, -6, 17, -42, -29, 45, -6, 0, -22
    0xf5e3d728, 0xedbbf044, 0x4d40e9f2, 0xfaf10bfb, 0xfe102ff6, 0xfa1f05c5, 0xe3d611fa, 0xea00fa2d,
    // 5, 8, -12, 11, 6, -19, 6, 25, -23, -7, 0, -2, 11, 28, 14, -16, 11, 27, 0, -5, 19, 6, -29, 29, 10, 27, 11, 1, 3, 15, -4, -12
    0xbf40805, 0x1906ed06, 0xfe00f9e9, 0xf00e1c0b, 0xfb001b0b, 0x1de30613, 0x10b1b0a, 0xf4fc0f03,
    // -10, 13, 9, 31, -12, -5, -16, 8, -2, 11, -23, -15, 11, -13, -5, -2, 25, 15, -19, 4, 7, -24, -15, 36, 21, 20, -3, 49, 16, -4, 6, -26
    0x1f090df6, 0x8f0fbf4, 0xf1e90bfe, 0xfefbf30b, 0x4ed0f19, 0x24f1e807, 0x31fd1415, 0xe606fc10,
    // 97, 35, 69, 56, -40, 30, 61, -40, -44, -90, -128, 49, -17, 6, 36, -111, -2, 20, -13, 20, -25, 30, -73, 41, 12, 1, -53, 17, 51, 1, -21, 2
    0x38452361, 0xd83d1ed8, 0x3180a6d4, 0x912406ef, 0x14f314fe, 0x29b71ee7, 0x11cb010c, 0x2eb0133,
    // -14, -7, 0, 7, -9, -1, -30, -16, -1, -10, 1, 22, 15, 13, -15, -19, -34, -13, 28, 24, 14, 6, 8, -12, -11, -12, 21, 1, -42, 5, 24, -21
    0x700f9f2, 0xf0e2fff7, 0x1601f6ff, 0xedf10d0f, 0x181cf3de, 0xf408060e, 0x115f4f5, 0xeb1805d6,
    // -9, -2, 15, 2, 7, -3, -2, -7, 1, -3, 15, -5, -2, -6, 11, 9, -27, 11, 1, -22, -27, -16, -5, 4, 0, -13, 26, 32, 24, 27, 8, -23
    0x20ffef7, 0xf9fefd07, 0xfb0ffd01, 0x90bfafe, 0xea010be5, 0x4fbf0e5, 0x201af300, 0xe9081b18,
    // 13, 16, 42, -18, -26, -20, -77, -21, 24, -9, 22, 27, -7, 14, -5, -11, 0, 14, 29, -38, -2, -6, -10, -3, -9, -2, -26, 25, -24, -6, -1, 17
    0xee2a100d, 0xebb3ece6, 0x1b16f718, 0xf5fb0ef9, 0xda1d0e00, 0xfdf6fafe, 0x19e6fef7, 0x11fffae8,
    // 4, 19, 52, -20, 28, -3, -35, 16, 33, 24, 43, 19, -33, 23, 33, 40, -75, 14, -10, -32, -38, 9, -24, 52, -45, -35, 50, 24, -20, -70, 32, 2
    0xec341304, 0x10ddfd1c, 0x132b1821, 0x282117df, 0xe0f60eb5, 0x34e809da, 0x1832ddd3, 0x220baec,
    // -9, 2, -34, -65, -91, 3, -12, 26, 7, 24, -28, 13, 54, 22, -1, -4, 15, 15, -2, -15, -22, 4, -1, 16, -30, -6, -12, 20, -15, -27, 16, 3
    0xbfde02f7, 0x1af403a5, 0xde41807, 0xfcff1636, 0xf1fe0f0f, 0x10ff04ea, 0x14f4fae2, 0x310e5f1,
    // -2, -11, 25, -41, -3, 28, 90, 79, 42, 64, -48, 24, 60, -14, 20, -35, 24, 29, 2, 3, 33, -19, 30, 31, -30, 3, 14, 13, 16, -20, 19, 1
    0xd719f5fe, 0x4f5a1cfd, 0x18d0402a, 0xdd14f23c, 0x3021d18, 0x1f1eed21, 0xd0e03e2, 0x113ec10,
    // 9, 14, -7, -24, -22, 24, 33, -11, 14, -34, 1, 2, -4, -2, -8, -11, 35, -6, 9, -11, 21, 34, -9, 1, -2, 47, 0, -1, -29, 4, 2, -1
    0xe8f90e09, 0xf52118ea, 0x201de0e, 0xf5f8fefc, 0xf509fa23, 0x1f72215, 0xff002ffe, 0xff0204e3,
    // -2, -4, 1, -19, -13, 15, 19, -14, -50, 12, -18, 6, -12, 1, 31, 1, -10, -3, 4, -47, -28, -1, 0, -24, 42, -20, -45, -26, -12, 23, 29, -37
    0xed01fcfe, 0xf2130ff3, 0x6ee0cce, 0x11f01f4, 0xd104fdf6, 0xe800ffe4, 0xe6d3ec2a, 0xdb1d17f4,
    // 15, -16, 55, 29, -113, -44, 52, 24, 58, 29, -87, -78, 2, -22, 48, 53, -26, -17, -4, -31, 76, -27, -11, 1, -84, -39, 53, 8, -22, -3, -11, -11
    0x1d37f00f, 0x1834d48f, 0xb2a91d3a, 0x3530ea02, 0xe1fcefe6, 0x1f5e54c, 0x835d9ac, 0xf5f5fdea,
    // -22, 6, 9, -5, -32, 8, -32, -6, 15, -16, 37, 14, -16, -28, -35, -5, 26, 14, 6, 14, -35, 12, -4, 5, 27, 2, -64, 11, 2, -3, -11, -14
    0xfb0906ea, 0xfae008e0, 0xe25f00f, 0xfbdde4f0, 0xe060e1a, 0x5fc0cdd, 0xbc0021b, 0xf2f5fd02,
    // 8, 5, 11, 1, 26, 11, 14, 13, -19, 1, -12, -9, -30, 13, 4, 2, 11, 0, -11, -26, 19, 19, -32, -27, 37, -15, -7, -2, -9, -1, -11, 9
    0x10b0508, 0xd0e0b1a, 0xf7f401ed, 0x2040de2, 0xe6f5000b, 0xe5e01313, 0xfef9f125, 0x9f5fff7,
    // 67, -43, -10, 42, 40, 38, -33, -4, 95, 15, 23, -16, -15, 4, 16, 30, -1, -12, -46, 7, -8, 12, -13, 1, 2, -1, -9, -11, 9, 4, 9, 9
    0x2af6d543, 0xfcdf2628, 0xf0170f5f, 0x1e1004f1, 0x7d2f4ff, 0x1f30cf8, 0xf5f7ff02, 0x9090409,
    // -11, 3, 32, 39, -22, -14, 2, -37, 54, -4, -5, -34, 6, 25, 12, -10, 21, 5, -44, -34, 19, -31, -47, 35, -81, -114, 4, 83, -39, -42, -15, 8
    0x272003f5, 0xdb02f2ea, 0xdefbfc36, 0xf60c1906, 0xded40515, 0x23d1e113, 0x53048eaf, 0x8f1d6d9,
    // 22, 18, 35, 19, 19, 32, -31, 15, -30, 31, -29, -16, -16, 24, 37, 3, -10, -19, -21, 14, -10, -8, -28, -34, -7, -4, 13, 4, -21, 41, 0, 13
    0x13231216, 0xfe12013, 0xf0e31fe2, 0x32518f0, 0xeebedf6, 0xdee4f8f6, 0x40dfcf9, 0xd0029eb,
    // -27, -29, -37, 7, -16, 20, -29, -26, -37, 4, -27, -1, -31, 45, -22, 4, -32, -19, -27, 13, -1, 8, -9, 13, -34, 24, -4, -21, -19, 26, 28, -9
    0x7dbe3e5, 0xe6e314f0, 0xffe504db, 0x4ea2de1, 0xde5ede0, 0xdf708ff, 0xebfc18de, 0xf71c1aed,
    // 0, -10, 40, -27, 14, 14, -25, -13, -19, 21, -8, 9, 0, 15, -7, 15, 16, 66, -18, 2, -13, 4, -13, -6, 47, -4, 17, -11, -24, 41, 25, 7
    0xe528f600, 0xf3e70e0e, 0x9f815ed, 0xff90f00, 0x2ee4210, 0xfaf304f3, 0xf511fc2f, 0x71929e8,
    // 0, 22, 21, 27, 11, -10, -1, 13, 13, -1, 7, -20, 6, 36, 10, 25, 23, 19, -14, -36, -1, 24, 22, -23, -7, 18, -11, -9, 3, 47, 10, -7
    0x1b151600, 0xdfff60b, 0xec07ff0d, 0x190a2406, 0xdcf21317, 0xe91618ff, 0xf7f512f9, 0xf90a2f03,
    // 27, 78, 93, 16, -60, 91, 7, -32, 51, -8, 14, -49, -30, 73, 109, 23, -25, 37, 21, 18, 47, -26, 12, -5, -2, -22, 23, 25, 7, 47, -6, 52
    0x105d4e1b, 0xe0075bc4, 0xcf0ef833, 0x176d49e2, 0x121525e7, 0xfb0ce62f, 0x1917eafe, 0x34fa2f07,
    // 17, 1, -8, -4, 15, 0, 43, 10, -22, -3, 3, -7, 14, 24, 32, 1, 18, 72, -30, -4, -10, 14, 29, -3, 28, -10, -15, 20, 19, 46, 45, 8
    0xfcf80111, 0xa2b000f, 0xf903fdea, 0x120180e, 0xfce24812, 0xfd1d0ef6, 0x14f1f61c, 0x82d2e13,
    // -14, 22, 34, -6, -14, -19, -17, -7, -14, 26, -10, -19, -12, 12, 22, 17, -1, 24, -2, -9, 14, 15, 28, 20, -18, 8, -3, -6, -22, -1, -57, -2
    0xfa2216f2, 0xf9efedf2, 0xedf61af2, 0x11160cf4, 0xf7fe18ff, 0x141c0f0e, 0xfafd08ee, 0xfec7ffea,
    // 5, 8, 17, -22, -11, 2, -8, 38, 6, 12, 8, -6, -2, -5, -45, -22, 36, 17, -6, 19, -10, 9, -18, 44, 6, -3, 1, -6, -3, 11, -26, -8
    0xea110805, 0x26f802f5, 0xfa080c06, 0xead3fbfe, 0x13fa1124, 0x2cee09f6, 0xfa01fd06, 0xf8e60bfd,
    // -13, 31, -21, 36, -59, -15, -18, 18, -26, -34, -13, -23, -17, 31, -50, 4, -32, 39, 34, -15, -29, -8, -51, -19, -39, -27, 31, -11, -4, -46, -94, 35
    0x24eb1ff3, 0x12eef1c5, 0xe9f3dee6, 0x4ce1fef, 0xf12227e0, 0xedcdf8e3, 0xf51fe5d9, 0x23a2d2fc,
    // 1, 31, -7, 8, -15, 35, -12, 18, -10, -15, 12, -7, -4, 33, -68, 3, 31, 26, 14, 12, 15, -5, 9, 45, 0, -5, 9, -9, 5, 15, -33, -8
    0x8f91f01, 0x12f423f1, 0xf90cf1f6, 0x3bc21fc, 0xc0e1a1f, 0x2d09fb0f, 0xf709fb00, 0xf8df0f05,
    // 22, -15, -11, 8, 31, 18, -2, 42, 15, -14, 18, 16, -9, 7, -56, -17, 1, 15, -24, 3, -23, 24, 6, 29, 13, 4, 3, 1, -5, -4, -57, -17
    0x8f5f116, 0x2afe121f, 0x1012f20f, 0xefc807f7, 0x3e80f01, 0x1d0618e9, 0x103040d, 0xefc7fcfb,
};
static const uint embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // -0.0001413, -5.776e-05, 0.0006948, 0.0004182, -9.54e-06, -8.51e-05, -5.037e-05, 0.0002102, 0.0003476, -0.000566, -6e-06, 2.8e-05, 0.000625, 0.0003273, 0.0001855, -0.0002265
    0x83c988a1, 0xeda11b1, 0x859480a0, 0xae3834d, 0x90a30db2, 0x1d68065, 0xd5d111f, 0x8b6c0a14,
};
static const uint embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -78, -15, 3, 16, 61, 13, -8, 52, 21, -26, 29, 1, 15, 3, -8, -21, -48, 27, 6, -26, -19, 3, 7, -21, 11, -21, -23, 28, -20, -31, 4, 19
    0x1003f1b2, 0x34f80d3d, 0x11de615, 0xebf8030f, 0xe6061bd0, 0xeb0703ed, 0x1ce9eb0b, 0x1304e1ec,
    // -42, -5, 18, -5, 2, 24, -28, 11, 47, 0, 21, -5, -53, 54, -8, 9, 15, 13, 5, -15, 9, -26, -10, -15, -31, 30, 32, -16, 5, -4, 14, -18
    0xfb12fbd6, 0xbe41802, 0xfb15002f, 0x9f836cb, 0xf1050d0f, 0xf1f6e609, 0xf0201ee1, 0xee0efc05,
    // -1, -2, -13, 2, 28, -15, 38, 38, -22, 86, -34, -50, -3, -12, -3, -6, -3, 14, -6, 22, -9, 3, -17, 20, -7, 18, 26, -34, -9, 9, 37, 0
    0x2f3feff, 0x2626f11c, 0xcede56ea, 0xfafdf4fd, 0x16fa0efd, 0x14ef03f7, 0xde1a12f9, 0x2509f7,
    // -24, 20, 10, 36, 45, -3, 20, 17, 21, 13, -18, -25, 12, 7, 63, 49, -10, 21, 1, -73, 2, -15, -32, -57, -3, 28, 4, -29, 10, -34, 42, 30
    0x240a14e8, 0x1114fd2d, 0xe7ee0d15, 0x313f070c, 0xb70115f6, 0xc7e0f102, 0xe3041cfd, 0x1e2ade0a,
    // 35, 7, -34, -24, -21, -21, -12, -91, 42, -16, 17, 32, -11, -1, -97, -58, -47, -12, 48, -1, 9, 17, 79, -6, 2, -39, -52, -2, -38, 30, 8, 55
    0xe8de0723, 0xa5f4ebeb, 0x2011f02a, 0xc69ffff5, 0xff30f4d1, 0xfa4f1109, 0xfeccd902, 0x37081eda,
    // 16, -38, -33, -57, 24, -1, -17, 7, -18, -20, 49, -50, -4, 26, 19, -11, 26, 11, -16, -24, -18, -25, -49, 15, -8, 1, 1, -46, 1, -30, 19, 9
    0xc7dfda10, 0x7efff18, 0xce31ecee, 0xf5131afc, 0xe8f00b1a, 0xfcfe7ee, 0xd20101f8, 0x913e201,
    // -54, -52, -75, -9, -40, 36, -40, 16, 33, 24, 11, -3, 39, -26, 12, 9, -57, -6, 13, 43, -5, -6, -2, 17, 0, 39, 16, -6, -6, 18, 30, 1
    0xf7b5ccca, 0x10d824d8, 0xfd0b1821, 0x90ce627, 0x2b0dfac7, 0x11fefafb, 0xfa102700, 0x11e12fa,
    // -5, 11, 0, 2, -18, -12, 8, 10, 8, -2, 20, 22, -16, -2, 1, 21, -11, -25, 6, 77, -32, -24, 75, -30, 10, 9, 37, 23, 58, -30, 38, -51
    0x2000bfb, 0xa08f4ee, 0x1614fe08, 0x1501fef0, 0x4d06e7f5, 0xe24be8e0, 0x1725090a, 0xcd26e23a,
    // 14, -14, 13, -32, -15, 14, 36, -38, 26, 14, -25, -5, -8, -13, -14, 13, -57, 35, -3, 43, -16, -49, 18, 84, 33, 21, -28, 31, 0, 14, 1, -30
    0xe00df20e, 0xda240ef1, 0xfbe70e1a, 0xdf2f3f8, 0x2bfd23c7, 0x5412cff0, 0x1fe41521, 0xe2010e00,
    // 49, -13, 9, -39, 30, -10, -22, 31, -26, 42, 8, 37, -5, 14, -80, -16, 6, 6, -3, -16, -20, -20, -17, 33, -13, 22, 25, -12, -17, 27, 26, 26
    0xd909f331, 0x1feaf61e, 0x25082ae6, 0xf0b00efb, 0xf0fd0606, 0x21efecec, 0xf41916f3, 0x1a1a1bef,
    // 21, 27, 29, -8, -41, -6, -24, -14, -51, -64, 31, 62, 21, 8, -3, -11, -52, 28, -14, 27, 6, -5, 42, -14, -3, -22, -37, 28, 52, -19, 8, -5
    0xf81d1b15, 0xf2e8fad7, 0x3e1fc0cd, 0xf5fd0815, 0x1bf21ccc, 0xf22afb06, 0x1cdbeafd, 0xfb08ed34,
    // 17, 27, -50, 9, 7, 4, 17, 27, 34, -9, 15, -46, -13, 5, -11, -4, -16, 7, 44, -25, 1, 22, -5, 38, 8, 50, 62, -25, -15, 20, -5, 11
    0x9ce1b11, 0x1b110407, 0xd20ff722, 0xfcf505f3, 0xe72c07f0, 0x26fb1601, 0xe73e3208, 0xbfb14f1,
    // 3, 17, 3, 17, -20, 70, -12, 59, -75, 91, 42, -14, 36, -14, -80, -51, -86, 19, 46, 29, 21, -1, 68, -2, 0, -14, -66, 19, -35, 36, 54, 38
    0x11031103, 0x3bf446ec, 0xf22a5bb5, 0xcdb0f224, 0x1d2e13aa, 0xfe44ff15, 0x13bef200, 0x263624dd,
    // 78, -45, 21, -3, -24, -24, 13, -10, 51, -54, -33, -3, -53, -42, 13, 17, -47, 84, -4, -12, 12, -20, -24, 17, -8, 72, 26, 27, -6, 7, 73, -14
    0xfd15d34e, 0xf60de8e8, 0xfddfca33, 0x110dd6cb, 0xf4fc54d1, 0x11e8ec0c, 0x1b1a48f8, 0xf24907fa,
    // -5, -28, -46, 35, -29, 38, -29, -46, 28, -17, -12, -15, 12, -52, -21, -65, -23, 9, 56, -11, 15, 10, 35, 41, 0, 20, 15, -9, -41, 50, -11, 14
    0x23d2e4fb, 0xd2e326e3, 0xf1f4ef1c, 0xbfebcc0c, 0xf53809e9, 0x29230a0f, 0xf70f1400, 0xef532d7,
    // -5, -51, -20, -1, -49, 5, 60, 25, 4, 0, -16, 53, 12, 77, 3, -30, -22, 0, 22, -30, -7, -1, -12, -31, -10, 2, -50, -4, -20, 8, -15, 17
    0xffeccdfb, 0x193c05cf, 0x35f00004, 0xe2034d0c, 0xe21600ea, 0xe1f4fff9, 0xfcce02f6, 0x11f108ec,
    // 6, -26, 25, 47, -23, -49, -1, -23, -14, 45, 47, 17, 59, -54, 33, 17, -49, -3, 3, 9, -2, 7, 31, -2, 1, -30, -52, 17, 27, -1, -5, 36
    0x2f19e606, 0xe9ffcfe9, 0x112f2df2, 0x1121ca3b, 0x903fdcf, 0xfe1f07fe, 0x11cce201, 0x24fbff1b,
    // 22, -34, -52, -24, 17, 30, 37, -23, -2, 0, -38, 21, 46, -47, -32, -33, 3, 24, 30, -12, -26, -38, 32, -1, 1, 34, 71, 50, 55, 2, -2, -6
    0xe8ccde16, 0xe9251e11, 0x15da00fe, 0xdfe0d12e, 0xf41e1803, 0xff20dae6, 0x32472201, 0xfafe0237,
    // -11, -1, 23, -14, -5, -1, 5, -5, 14, 11, 1, 9, -1, 3, 3, 8, 4, -22, 4, 38, -74, -12, 56, -26, 54, 15, 2, -13, 54, 2, 97, -9
    0xf217fff5, 0xfb05fffb, 0x9010b0e, 0x80303ff, 0x2604ea04, 0xe638f4b6, 0xf3020f36, 0xf7610236,
    // 3, 88, 7, -19, -64, 22, -2, -78, -7, -48, -35, -20, 56, -18, 16, 38, -37, 72, 62, -61, 16, -23, 59, -19, -28, -7, -8, 27, 24, 48, -5, 20
    0xed075803, 0xb2fe16c0, 0xecddd0f9, 0x2610ee38, 0xc33e48db, 0xed3be910, 0x1bf8f9e4, 0x14fb3018,
    // -43, -5, -45, 9, -27, 49, -10, 1, -2, 24, 56, -27, -40, 67, -44, 63, -32, 50, -73, -39, 3, -30, -50, -28, 10, 19, -12, 70, 33, -38, 82, 6
    0x9d3fbd5, 0x1f631e5, 0xe53818fe, 0x3fd443d8, 0xd9b732e0, 0xe4cee203, 0x46f4130a, 0x652da21,
    // -7, 23, -57, -23, 6, 65, 27, -6, 49, -40, -58, 27, -3, 7, -6, 47, -31, -26, -5, 16, 2, 8, -27, -26, 17, 8, 16, 22, -1, 16, 43, 32
    0xe9c717f9, 0xfa1b4106, 0x1bc6d831, 0x2ffa07fd, 0x10fbe6e1, 0xe6e50802, 0x16100811, 0x202b10ff,
    // -8, -70, -68, -12, 71, 10, -71, 1, 62, 25, 45, -21, 11, -33, 27, -34, -58, 13, 19, -16, -49, -21, 33, 61, -10, 0, -32, -53, 5, -44, 28, 38
    0xf4bcbaf8, 0x1b90a47, 0xeb2d193e, 0xde1bdf0b, 0xf0130dc6, 0x3d21ebcf, 0xcbe000f6, 0x261cd405,
    // -19, -39, -21, -20, -21, 4, 1, -33, -82, 2, -30, 32, -49, -16, 33, 5, 0, -6, 2, -7, -1, -11, -47, 1, -18, 38, -8, -29, -9, 22, 24, 22
    0xecebd9ed, 0xdf0104eb, 0x20e202ae, 0x521f0cf, 0xf902fa00, 0x1d1f5ff, 0xe3f826ee, 0x161816f7,
    // 14, -51, 0, 54, -19, -5, 11, 7, 1, -12, 64, -26, 2, -8, -17, 17, -2, -37, -34, 33, 21, 16, -24, 20, 4, 10, -15, 2, 1, 28, 24, 4
    0x3600cd0e, 0x70bfbed, 0xe640f401, 0x11eff802, 0x21dedbfe, 0x14e81015, 0x2f10a04, 0x4181c01,
    // 17, -8, -27, -26, 60, 3, -14, 11, -2, -12, -2, 31, -38, 25, -21, 32, 8, 14, -2, -19, -15, 8, 8, 7, -2, -35, -28, 31, 13, -49, 17, -18
    0xe6e5f811, 0xbf2033c, 0x1ffef4fe, 0x20eb19da, 0xedfe0e08, 0x70808f1, 0x1fe4ddfe, 0xee11cf0d,
    // -29, -3, 39, 35, -65, -6, -43, -46, 0, 41, 4, -28, 44, -3, -29, -53, -18, 13, 22, 5, -13, -19, 7, -25, -23, -6, 7, -19, -10, 26, -6, 28
    0x2327fde3, 0xd2d5fabf, 0xe4042900, 0xcbe3fd2c, 0x5160dee, 0xe707edf3, 0xed07fae9, 0x1cfa1af6,
    // -5, 0, 27, -25, 4, 46, -24, 12, -17, -12, -10, 11, 17, 3, 35, -35, 11, -3, -26, 14, 9, -26, -45, -86, 22, -42, -56, 20, -12, -11, 49, -2
    0xe71b00fb, 0xce82e04, 0xbf6f4ef, 0xdd230311, 0xee6fd0b, 0xaad3e609, 0x14c8d616, 0xfe31f5f4,
    // 0, -2, -12, 17, 18, 5, 24, 12, -2, -5, 16, -32, -34, 0, 32, 13, -38, -39, -34, -46, -13, -13, 20, -57, 8, -49, 67, -12, 54, -1, -27, -28
    0x11f4fe00, 0xc180512, 0xe010fbfe, 0xd2000de, 0xd2ded9da, 0xc714f3f3, 0xf443cf08, 0xe4e5ff36,
    // -23, 20, 24, 5, -30, 21, -13, -11, -2, 11, 38, 43, 20, 20, 6, 2, -2, 54, -69, -37, 50, -13, 22, 58, -74, 9, -29, 3, 77, -23, 44, -4
    0x51814e9, 0xf5f315e2, 0x2b260bfe, 0x2061414, 0xdbbb36fe, 0x3a16f332, 0x3e309b6, 0xfc2ce94d,
    // -7, 26, -27, -31, -18, 52, 76, 7, 35, 38, -11, -16, -37, -8, 23, -16, 27, 27, -8, -43, 17, -26, 11, 7, -1, 4, 7, 31, -20, 3, 51, -4
    0xe1e51af9, 0x74c34ee, 0xf0f52623, 0xf017f8db, 0xd5f81b1b, 0x70be611, 0x1f0704ff, 0xfc3303ec,
    // -13, -37, 69, 9, -34, 21, -26, 33, -8, 20, 0, -26, -43, 27, -40, -27, -13, 15, 13, -2, -10, -12, -20, -14, -13, 22, 39, -11, -21, 15, 3, 26
    0x945dbf3, 0x21e615de, 0xe60014f8, 0xe5d81bd5, 0xfe0d0ff3, 0xf2ecf4f6, 0xf52716f3, 0x1a030feb,
    // 13, 13, 15, 15, 6, -4, -54, 25, 18, -2, -76, 39, -29, -19, -18, 39, -8, -8, -9, 6, 3, 10, -4, 17, 9, 15, -8, 14, 10, 25, 3, 5
    0xf0f0d0d, 0x19cafc06, 0x27b4fe12, 0x27eeede3, 0x6f7f8f8, 0x11fc0a03, 0xef80f09, 0x503190a,
    // 25, -4, 26, -4, -3, -19, 15, 23, 65, 3, -31, -10, 64, 39, -23, -28, 16, 4, -11, -29, 11, -14, -51, -21, -21, 38, -32, -3, -10, 22, 31, 15
    0xfc1afc19, 0x170fedfd, 0xf6e10341, 0xe4e92740, 0xe3f50410, 0xebcdf20b, 0xfde026eb, 0xf1f16f6,
    // -69, 43, 14, 5, 48, -24, 80, 7, 9, 20, -4, 71, -13, 1, 34, -16, -21, 26, 9, -47, -16, -16, 21, 9, -15, -9, -26, 17, -22, 4, 26, 14
    0x50e2bbb, 0x750e830, 0x47fc1409, 0xf02201f3, 0xd1091aeb, 0x915f0f0, 0x11e6f7f1, 0xe1a04ea,
    // 17, 2, -63, -23, -25, 28, -12, -1, -17, -6, 31, -34, -3, 41, -19, 25, 22, -39, -17, 11, -7, 14, -16, 12, 10, -29, -13, 1, 12, 12, 1, 1
    0xe9c10211, 0xfff41ce7, 0xde1ffaef, 0x19ed29fd, 0xbefd916, 0xcf00ef9, 0x1f3e30a, 0x1010c0c,
    // -4, 23, -16, 53, 3, -9, 5, -13, 18, 36, 0, -7, -55, -7, -13, 20, -17, 53, -2, 37, 31, -13, 36, -1, -9, -39, 11, 49, 60, -45, -40, 4
    0x35f017fc, 0xf305f703, 0xf9002412, 0x14f3f9c9, 0x25fe35ef, 0xff24f31f, 0x310bd9f7, 0x4d8d33c,
    // 3, 75, -74, -39, -6, -43, 70, -103, -11, 68, -8, 3, 17, 16, 9, 17, -128, 10, 58, -28, -26, 0, 49, -39, 27, -58, -71, 46, -8, -17, 31, 70
    0xd9b64b03, 0x9946d5fa, 0x3f844f5, 0x11091011, 0xe43a0a80, 0xd93100e6, 0x2eb9c61b, 0x461feff8,
    // -66, -24, 41, 62, 40, -16, -60, -22, 8, -42, -3, 50, -14, 6, -17, -6, 22, 6, -32, -12, -4, -11, -23, -16, -11, 32, 16, -30, 1, -16, -3, -7
    0x3e29e8be, 0xeac4f028, 0x32fdd608, 0xfaef06f2, 0xf4e00616, 0xf0e9f5fc, 0xe21020f5, 0xf9fdf001,
    // -8, 42, 50, -84, 37, -21, -35, -27, 65, -5, 45, -55, 12, -89, 36, -3, -11, 11, 56, -78, -15, -10, -17, -59, -25, -4, -82, -10, -29, -16, 15, 43
    0xac322af8, 0xe5ddeb25, 0xc92dfb41, 0xfd24a70c, 0xb2380bf5, 0xc5eff6f1, 0xf6aefce7, 0x2b0ff0e3,
    // 64, 34, -2, -22, 47, 30, 46, 0, -3, -37, 15, 53, -46, 17, -35, -46, 20, 15, 27, -39, -3, -12, 36, 18, -1, -21, 14, 25, -12, 34, -7, 20
    0xeafe2240, 0x2e1e2f, 0x350fdbfd, 0xd2dd11d2, 0xd91b0f14, 0x1224f4fd, 0x190eebff, 0x14f922f4,
    // -20, -4, -23, 23, 9, 13, 15, -9, 2, 16, -28, -2, 0, -8, -54, 31, -60, 98, -39, -12, 41, -4, -8, 21, 29, -40, -1, -22, -28, 23, -45, 21
    0x17e9fcec, 0xf70f0d09, 0xfee41002, 0x1fcaf800, 0xf4d962c4, 0x15f8fc29, 0xeaffd81d, 0x15d317e4,
    // -28, -1, -62, 7, 43, -51, 18, -37, 5, 70, 9, 16, -8, -5, 20, 26, -72, 9, 12, -27, -24, 7, -22, -35, 12, 5, -39, -16, -17, -35, 42, 28
    0x7c2ffe4, 0xdb12cd2b, 0x10094605, 0x1a14fbf8, 0xe50c09b8, 0xddea07e8, 0xf0d9050c, 0x1c2addef,
    // -65, 53, 3, -2, 0, 3, -30, 14, -43, 89, 20, 21, 30, 29, -28, -12, 3, -25, 4, -3, -14, 9, 13, -12, -1, -23, 26, -9, -2, -19, -31, 20
    0xfe0335bf, 0xee20300, 0x151459d5, 0xf4e41d1e, 0xfd04e703, 0xf40d09f2, 0xf71ae9ff, 0x14e1edfe,
    // 53, -25, 7, -74, -2, 29, 6, -22, -25, -20, -17, -2, 34, -16, 50, -33, -47, 25, 63, 1, 5, 29, 15, 7, -7, 24, 34, -57, -34, 54, 32, 25
    0xb607e735, 0xea061dfe, 0xfeefece7, 0xdf32f022, 0x13f19d1, 0x70f1d05, 0xc72218f9, 0x192036de,
    // 19, -69, 6, -14, 10, 19, 44, 22, 26, 16, -21, -10, -31, -52, 14, -20, -2, 37, 5, -27, -23, 3, 31, 8, 12, -49, 19, 29, -24, -19, -13, 42
    0xf206bb13, 0x162c130a, 0xf6eb101a, 0xec0ecce1, 0xe50525fe, 0x81f03e9, 0x1d13cf0c, 0x2af3ede8,
    // 25, -35, -11, 33, 21, 74, 74, -73, -8, 0, 33, -37, 51, -30, -14, 8, -75, 18, 29, 61, 1, -10, -5, -16, 2, -4, -11, 21, -1, 19, 53, -15
    0x21f5dd19, 0xb74a4a15, 0xdb2100f8, 0x8f2e233, 0x3d1d12b5, 0xf0fbf601, 0x15f5fc02, 0xf13513ff,
    // -43, 27, 31, -43, 6, 28, -40, -30, -72, -3, 37, -7, -42, -35, -45, -27, 24, -1, 36, -35, 0, 0, -44, -27, -6, 4, 5, 21, -44, -7, -6, -21
    0xd51f1bd5, 0xe2d81c06, 0xf925fdb8, 0xe5d3ddd6, 0xdd24ff18, 0xe5d40000, 0x150504fa, 0xebfaf9d4,
    // 36, 49, 41, 28, 35, 48, 32, -27, -34, 5, -44, -5, -20, 59, 2, 22, -63, 33, 16, 28, 9, -5, 16, -20, 5, 11, 4, 24, 27, 21, 64, -38
    0x1c293124, 0xe5203023, 0xfbd405de, 0x16023bec, 0x1c1021c1, 0xec10fb09, 0x18040b05, 0xda40151b,
    // 5, 4, -5, 14, 12, 6, 3, 4, -22, -14, -6, -25, -11, 5, -8, 2, -38, 4, 28, 29, 31, 15, 23, 93, -14, -23, 4, -33, -30, 13, -25, -18
    0xefb0405, 0x403060c, 0xe7faf2ea, 0x2f805f5, 0x1d1c04da, 0x5d170f1f, 0xdf04e9f2, 0xeee70de2,
    // 35, -10, -19, -20, -1, -8, 1, 14, 27, 6, 20, -6, -22, -12, 32, -8, -49, 13, 17, 57, -71, -16, 50, 93, 44, 18, 47, -11, -35, 85, 1, 4
    0xecedf623, 0xe01f8ff, 0xfa14061b, 0xf820f4ea, 0x39110dcf, 0x5d32f0b9, 0xf52f122c, 0x40155dd,
    // -47, -29, 39, 24, -11, 7, -29, -11, 31, 64, -2, 46, -12, -6, -68, 63, -19, 89, -30, -83, -47, 18, 58, -7, 22, -20, 0, 15, -66, -39, 66, 27
    0x1827e3d1, 0xf5e307f5, 0x2efe401f, 0x3fbcfaf4, 0xade259ed, 0xf93a12d1, 0xf00ec16, 0x1b42d9be,
    // -54, 47, -13, -31, -9, -4, -34, 56, 14, -6, 8, 56, -7, -13, -4, 28, -36, 17, -11, -5, -9, 5, 8, -16, -13, -15, -8, -1, 38, -36, 9, 23
    0xe1f32fca, 0x38defcf7, 0x3808fa0e, 0x1cfcf3f9, 0xfbf511dc, 0xf00805f7, 0xfff8f1f3, 0x1709dc26,
    // 29, 38, 29, -33, -43, 19, -46, 58, -74, 50, -27, -17, 42, 5, 57, 38, -17, 1, -25, 51, 20, 15, -15, 14, -3, 13, 11, -6, 38, -21, 19, -22
    0xdf1d261d, 0x3ad213d5, 0xefe532b6, 0x2639052a, 0x33e701ef, 0xef10f14, 0xfa0b0dfd, 0xea13eb26,
    // -73, -32, 20, -23, -15, 0, 50, -13, 33, 12, -13, -15, -13, 18, -33, 27, -102, 84, 31, -7, 23, 12, 39, -58, -49, -18, 13, 26, 15, 27, 74, 20
    0xe914e0b7, 0xf33200f1, 0xf1f30c21, 0x1bdf12f3, 0xf91f549a, 0xc6270c17, 0x1a0deecf, 0x144a1b0f,
    // -53, -55, -23, -7, 22, 6, -32, -64, -17, 18, 11, -23, 30, 78, 57, 4, -13, 23, 15, -53, -42, -31, -3, -19, -2, -19, -10, -7, 11, -28, 2, 14
    0xf9e9c9cb, 0xc0e00616, 0xe90b12ef, 0x4394e1e, 0xcb0f17f3, 0xedfde1d6, 0xf9f6edfe, 0xe02e40b,
    // 1, 12, 9, -12, -13, -12, -26, 33, 12, 13, 31, 26, -57, 25, 11, 5, -18, 3, -22, -19, 2, -9, -17, 24, -1, 9, -32, 19, 13, -83, 22, -14
    0xf4090c01, 0x21e6f4f3, 0x1a1f0d0c, 0x50b19c7, 0xedea03ee, 0x18eff702, 0x13e009ff, 0xf216ad0d,
    // -21, 41, 6, 49, -48, -21, -2, -15, -19, -7, -61, -9, 3, -28, 56, -68, 17, 33, 14, -29, -1, -14, -4, 36, -34, 42, 36, -49, -10, 71, 24, 7
    0x310629eb, 0xf1feebd0, 0xf7c3f9ed, 0xbc38e403, 0xe30e2111, 0x24fcf2ff, 0xcf242ade, 0x71847f6,
    // 5, -13, 3, 1, 11, -12, 1, -4, -17, 8, -11, -21, -6, -4, -20, 0, -19, 3, 18, 13, 35, 28, 53, 39, -101, -6, 20, 37, 33, -45, 18, -29
    0x103f305, 0xfc01f40b, 0xebf508ef, 0xecfcfa, 0xd1203ed, 0x27351c23, 0x2514fa9b, 0xe312d321,
    // 12, -21, -26, 21, 57, -12, 40, -8, 20, 10, -19, 32, -29, -31, 33, 0, -64, 8, 66, -34, -28, 21, 29, 20, 7, 25, 24, -34, 3, 4, -1, 42
    0x15e6eb0c, 0xf828f439, 0x20ed0a14, 0x21e1e3, 0xde4208c0, 0x141d15e4, 0xde181907, 0x2aff0403,
    // -3, -36, 20, -16, 1, -20, -17, 0, -11, 8, -7, -15, -6, 18, -19, 29, -54, -15, -20, 67, 6, 10, 19, 11, 12, -16, 30, -4, 11, 19, 9, 5
    0xf014dcfd, 0xefec01, 0xf1f908f5, 0x1ded12fa, 0x43ecf1ca, 0xb130a06, 0xfc1ef00c, 0x509130b,
    // 18, 4, 1, 26, 6, 41, -9, -9, -19, -1, -11, 4, 1, -1, -16, -3, -8, 9, 15, -4, 20, -3, -8, -47, -15, 20, -26, -49, -3, -97, 8, -27
    0x1a010412, 0xf7f72906, 0x4f5ffed, 0xfdf0ff01, 0xfc0f09f8, 0xd1f8fd14, 0xcfe614f1, 0xe5089ffd,
    // 2, -17, 23, 31, -13, 36, -32, -48, 31, 59, 46, 31, -6, 19, 0, 30, -19, -21, 4, 9, 3, -16, -5, 17, -13, 16, 30, 14, 9, 8, 3, -10
    0x1f17ef02, 0xd0e024f3, 0x1f2e3b1f, 0x1e0013fa, 0x904ebed, 0x11fbf003, 0xe1e10f3, 0xf6030809,
    // 19, -46, -30, -17, 20, 64, 48, -14, -1, 6, -60, -1, 15, -59, -27, 29, -47, 24, 17, 79, 5, 25, 21, -1, 17, -13, -5, 13, 0, 2, 38, -28
    0xefe2d213, 0xf2304014, 0xffc406ff, 0x1de5c50f, 0x4f1118d1, 0xff151905, 0xdfbf311, 0xe4260200,
};
static const uint embedded_decoder3_ResidualBlock_1_body_pw_expand_bias_dwords[32] = {
    // 0.04468, -0.01251, -0.010155, -0.04977, -0.2302, -0.01264, -0.1365, -0.11914, 0.1414, -0.0184, -0.4004, -0.03093, -0.1833, -0.644, 0.005955, 0.1371
    0xa26829b8, 0xaa5fa133, 0xa279b35e, 0xafa0b05e, 0xa4b63086, 0xa7ebb668, 0xb927b1de, 0x30631e19,
    // -0.0823, -0.03906, -0.346, -0.3503, -0.235, -0.3184, -0.0824, 0.1387, 0.05457, -0.165, -0.128, -0.05814, -0.0807, -0.1365, -0.10425, 0.0546
    0xa900ad44, 0xb59bb589, 0xb518b385, 0x3070ad46, 0xb1482afc, 0xab71b019, 0xb05ead2a, 0x2afdaeac,
    // 0.0769, 0.04446, -0.0563, -0.10706, -0.1422, -0.276, 0.0768, 0.1692, -0.04794, -0.09644, -0.1608, 0.04074, -0.002142, 0.004475, -0.1548, -0.03824
    0x29b12cec, 0xaedaab35, 0xb46ab08d, 0x316a2cea, 0xae2caa23, 0x2937b125, 0x1c959863, 0xa8e5b0f4,
    // 0.0393, -0.07056, -0.2502, -0.1381, -0.0812, -0.2544, 0.03864, -0.03207, -0.1326, -0.09485, -0.05975, 0.147, 0.247, -0.1528, -0.03117, -0.1102
    0xac842908, 0xb06bb401, 0xb412ad32, 0xa81b28f2, 0xae12b03e, 0x30b4aba6, 0xb0e433e7, 0xaf0ea7fb,
};
static const uint embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -51, 18, -1, 28, -6, -17, -41, -12, 7, -41, 19, -16, -11, -22, 30, 16, -19, -10, 8, -1, -17, 41, 29, 36, -64, 27, 50, 11, -7, 3, -22, 10
    0x1cff12cd, 0xf4d7effa, 0xf013d707, 0x101eeaf5, 0xff08f6ed, 0x241d29ef, 0xb321bc0, 0xaea03f9,
    // 40, -22, -56, -19, 32, -16, -20, -16, -31, 9, 49, -9, -17, 33, -75, 22, 33, 8, -10, -22, -52, -7, -2, 67, -19, -8, 3, 3, -8, -14, 25, 20
    0xedc8ea28, 0xf0ecf020, 0xf73109e1, 0x16b521ef, 0xeaf60821, 0x43fef9cc, 0x303f8ed, 0x1419f2f8,
    // 54, 26, -41, -30, 43, 55, -61, -10, 8, 81, 12, 24, -92, -58, 7, 10, -24, 5, 12, -11, -1, -11, 41, -57, -32, 10, 34, 2, 1, 5, -77, 67
    0xe2d71a36, 0xf6c3372b, 0x180c5108, 0xa07c6a4, 0xf50c05e8, 0xc729f5ff, 0x2220ae0, 0x43b30501,
    // 59, 48, -81, -15, -17, 71, 5, 5, 15, -21, -58, -76, 10, 69, 0, -14, -5, 9, -20, -2, -56, 56, 15, -17, -48, -71, -4, 14, 44, -44, 50, -20
    0xf1af303b, 0x50547ef, 0xb4c6eb0f, 0xf200450a, 0xfeec09fb, 0xef0f38c8, 0xefcb9d0, 0xec32d42c,
    // -41, -46, 80, 1, 40, -13, -28, -14, 10, -38, 13, 22, 32, 31, 19, 55, -59, 6, 14, -89, -1, 66, 1, -44, -24, 6, 51, -21, 15, -14, 45, 32
    0x150d2d7, 0xf2e4f328, 0x160dda0a, 0x37131f20, 0xa70e06c5, 0xd40142ff, 0xeb3306e8, 0x202df20f,
    // 28, 66, -1, 35, -29, -72, -55, -18, -37, -10, 72, 18, -26, 3, -24, -20, 43, 17, 9, -6, -34, -67, 10, -6, 61, 13, -7, 34, -18, -11, 10, -3
    0x23ff421c, 0xeec9b8e3, 0x1248f6db, 0xece803e6, 0xfa09112b, 0xfa0abdde, 0x22f90d3d, 0xfd0af5ee,
    // -79, 54, 26, -39, 7, 56, 20, 20, -11, 78, 27, 19, 15, 4, -30, 77, 18, -11, -20, -16, 0, -38, -5, 81, -6, -15, -31, 9, 2, -4, -1, -54
    0xd91a36b1, 0x14143807, 0x131b4ef5, 0x4de2040f, 0xf0ecf512, 0x51fbda00, 0x9e1f1fa, 0xcafffc02,
    // 12, -59, 0, -31, 12, 12, -37, -89, 15, -3, 66, 25, 4, 13, 10, -1, -22, 4, -3, 18, 20, -35, -18, 65, -8, -45, -1, 19, -45, 3, -7, 7
    0xe100c50c, 0xa7db0c0c, 0x1942fd0f, 0xff0a0d04, 0x12fd04ea, 0x41eedd14, 0x13ffd3f8, 0x7f903d3,
    // 19, -15, -41, -29, -50, 14, -26, 14, -23, -17, 11, 4, 30, 55, 24, 18, 10, 6, -12, 16, -8, 63, 28, -19, -32, 58, 66, 2, -17, -20, -55, -66
    0xe3d7f113, 0xee60ece, 0x40befe9, 0x1218371e, 0x10f4060a, 0xed1c3ff8, 0x2423ae0, 0xbec9ecef,
    // 41, 50, -42, 14, 28, 44, 30, 7, -64, 23, -3, 49, 42, -37, -76, -40, 22, -11, -2, 4, 8, -1, -20, 62, 8, -10, 5, -67, 31, -2, -15, 1
    0xed63229, 0x71e2c1c, 0x31fd17c0, 0xd8b4db2a, 0x4fef516, 0x3eecff08, 0xbd05f608, 0x1f1fe1f,
    // 23, -6, -10, 14, -17, -8, 68, -43, 85, 10, 4, -63, -20, 1, -6, 1, -12, -8, -16, 4, -82, 0, -11, 25, -12, -20, -5, -87, 2, -5, -42, 9
    0xef6fa17, 0xd544f8ef, 0xc1040a55, 0x1fa01ec, 0x4f0f8f4, 0x19f500ae, 0xa9fbecf4, 0x9d6fb02,
    // -18, -14, 9, -16, -4, -16, 6, -1, -1, -1, -6, 11, -25, -24, 20, 20, 43, -55, 2, -5, -38, -10, 103, 4, 5, 5, 14, -18, 28, 97, -52, 80
    0xf009f2ee, 0xff06f0fc, 0xbfaffff, 0x1414e8e7, 0xfb02c92b, 0x467f6da, 0xee0e0505, 0x50cc611c,
    // -10, -52, -53, 24, 39, -50, -15, -10, -25, -76, -65, -56, -72, -52, 22, 22, -53, -1, -1, -14, -6, 64, -40, 49, -13, 53, 15, 39, 12, -42, 69, -1
    0x18cbccf6, 0xf6f1ce27, 0xc8bfb4e7, 0x1616ccb8, 0xf2ffffcb, 0x31d840fa, 0x270f35f3, 0xff45d60c,
    // 15, -47, 69, 63, 30, 16, 52, -20, 11, 21, -60, -34, -6, 13, 22, -18, -21, -4, 25, 12, 21, 35, -30, -39, 33, 58, 10, 47, -20, -6, 51, -35
    0x3f45d10f, 0xec34101e, 0xdec4150b, 0xee160dfa, 0xc19fceb, 0xd9e22315, 0x2f0a3a21, 0xdd33faec,
    // 33, 31, 4, 23, 97, 54, -72, 10, -17, -9, -60, -31, -1, -20, -3, -21, 31, -12, -18, 52, -39, -32, 11, -2, -19, 5, -31, -27, 12, -43, -14, -14
    0x17041f21, 0xab83661, 0xe1c4f7ef, 0xebfdecff, 0x34eef41f, 0xfe0be0d9, 0xe5e105ed, 0xf2f2d50c,
    // -25, -17, -16, 0, 15, -42, 29, 19, 7, 19, -13, -26, 49, 59, -5, 37, -27, -15, 38, -90, -45, 19, -45, 0, -62, -44, 8, -30, 10, 4, -7, -48
    0xf0efe7, 0x131dd60f, 0xe6f31307, 0x25fb3b31, 0xa626f1e5, 0xd313d3, 0xe208d4c2, 0xd0f9040a,
    // -17, 41, -47, 22, -54, -12, 24, 38, 6, -33, -9, 19, 40, -61, 18, 15, 7, -11, 33, -2, -21, -8, -25, -11, 11, 21, -10, -29, 1, 78, -15, 12
    0x16d129ef, 0x2618f4ca, 0x13f7df06, 0xf12c328, 0xfe21f507, 0xf5e7f8eb, 0xe3f6150b, 0xcf14e01,
    // -32, 21, 26, 55, -16, -3, 3, -2, 19, -19, -6, -10, -74, -48, 10, -4, 6, -93, 29, -11, 3, -25, -1, -13, 39, -7, -46, 15, -56, 23, -12, 33
    0x371a15e0, 0xfe03fdf0, 0xf6faed13, 0xfc0ad0b6, 0xf51da306, 0xf3ffe703, 0xfd2f927, 0x21f417c8,
    // 48, 27, -65, 3, -32, 2, 63, -31, 5, 12, -38, -5, 10, -7, -37, -11, -30, -9, -43, 1, 7, 21, -4, -35, -1, -10, 2, 4, -10, 31, 15, 10
    0x3bf1b30, 0xe13f02e0, 0xfbda0c05, 0xf5dbf90a, 0x1d5f7e2, 0xddfc1507, 0x402f6ff, 0xa0f1ff6,
    // -24, 19, 1, -3, 22, -4, 42, -1, -12, -46, -51, 37, -31, -30, 2, 6, 17, -41, 51, 68, 9, 0, 44, 13, 24, -5, 13, -30, 47, 29, -12, 15
    0xfd0113e8, 0xff2afc16, 0x25cdd2f4, 0x602e2e1, 0x4433d711, 0xd2c0009, 0xe20dfb18, 0xff41d2f,
    // -2, -11, -9, 74, -47, -51, -33, 12, -20, 8, 24, 21, 24, 36, 17, -16, 18, -4, -9, -2, 15, 12, -18, -29, 56, -30, 11, 36, 0, -23, -15, -51
    0x4af7f5fe, 0xcdfcdd1, 0x151808ec, 0xf0112418, 0xfef7fc12, 0xe3ee0c0f, 0x240be238, 0xcdf1e900,
    // -76, 15, 54, 32, 17, -92, -20, 26, 32, 2, 17, 28, 32, -41, -19, -26, -28, 31, 14, 3, 30, -48, -32, -17, -4, 0, -8, 3, -15, -69, 59, -1
    0x20360fb4, 0x1aeca411, 0x1c110220, 0xe6edd720, 0x30e1fe4, 0xefe0d01e, 0x3f800fc, 0xff3bbbf1,
    // -9, 11, -53, -28, 8, -34, -28, -38, 20, 6, -47, -8, -12, -31, 58, -4, 12, -20, -14, 24, 0, -22, 8, 54, -7, -11, 10, 3, -6, 24, -42, 34
    0xe4cb0bf7, 0xdae4de08, 0xf8d10614, 0xfc3ae1f4, 0x18f2ec0c, 0x3608ea00, 0x30af5f9, 0x22d618fa,
    // 16, -62, -1, -19, 1, 41, 66, -19, -38, -10, -52, -30, 1, -18, -69, 19, 64, 51, -41, 47, -43, 40, -2, 29, -84, 0, -9, 11, 9, -38, 22, 30
    0xedffc210, 0xed422901, 0xe2ccf6da, 0x13bbee01, 0x2fd73340, 0x1dfe28d5, 0xbf700ac, 0x1e16da09,
    // 14, 30, -87, 53, -16, -6, 9, -11, 15, -8, -57, 19, 34, -12, -19, 70, 26, -12, 20, 16, -13, 17, -27, -13, -6, -59, -31, 10, 6, -13, 10, 3
    0x35a91e0e, 0xf509faf0, 0x13c7f80f, 0x46edf422, 0x1014f41a, 0xf3e511f3, 0xae1c5fa, 0x30af306,
    // -16, 37, 42, -16, 4, -18, 30, -35, 60, 18, -66, -22, -22, -34, 28, -36, 1, -8, -15, 3, 24, 13, 19, -8, 18, -10, 4, -10, 16, 21, -24, 8
    0xf02a25f0, 0xdd1eee04, 0xeabe123c, 0xdc1cdeea, 0x3f1f801, 0xf8130d18, 0xf604f612, 0x8e81510,
    // -4, 21, -11, 24, -50, -27, 47, 7, -26, 31, -41, -5, 5, 47, -21, -2, -25, -72, 17, 21, 18, -38, 34, -34, 12, 22, 9, -26, 7, -28, -13, 70
    0x18f515fc, 0x72fe5ce, 0xfbd71fe6, 0xfeeb2f05, 0x1511b8e7, 0xde22da12, 0xe609160c, 0x46f3e407,
    // -41, -13, 22, -8, 1, 47, 15, -15, 8, 0, -44, 89, -8, -36, -9, 13, 3, 57, -22, -23, 10, -74, -16, -2, -81, 9, 4, 12, 7, -34, -47, 17
    0xf816f3d7, 0xf10f2f01, 0x59d40008, 0xdf7dcf8, 0xe9ea3903, 0xfef0b60a, 0xc0409af, 0x11d1de07,
    // -33, -16, 58, -35, 35, -54, 12, 8, 8, 26, 47, -18, -42, 37, -65, 21, -46, -41, -14, -26, 40, -63, -72, -35, 37, 29, -4, -15, -11, -1, 0, 42
    0xdd3af0df, 0x80cca23, 0xee2f1a08, 0x15bf25d6, 0xe6f2d7d2, 0xddb8c128, 0xf1fc1d25, 0x2a00fff5,
    // 5, 24, 81, 37, 56, 127, -28, -5, -21, 26, 11, 37, -18, 42, -5, -15, -27, 18, -32, -4, 14, 9, -3, -79, -74, 7, -2, 27, 23, 63, 21, 14
    0x25511805, 0xfbe47f38, 0x250b1aeb, 0xf1fb2aee, 0xfce012e5, 0xb1fd090e, 0x1bfe07b6, 0xe153f17,
    // -64, -15, -1, -2, -59, 34, 5, -24, 11, 66, 20, 46, 15, 18, -57, -35, 13, -15, 13, -31, -21, 11, -24, 14, 34, -6, -19, 6, 2, 22, -54, 47
    0xfefff1c0, 0xe80522c5, 0x2e14420b, 0xddc7120f, 0xe10df10d, 0xee80beb, 0x6edfa22, 0x2fca1602,
    // -21, -54, 17, -18, 8, 40, -31, 24, 9, 0, 30, 39, -27, -6, 1, 72, 44, -16, -9, 12, -32, -22, 44, -35, 8, -35, 4, 8, -4, 38, 4, 11
    0xee11caeb, 0x18e12808, 0x271e0009, 0x4801fae5, 0xcf7f02c, 0xdd2ceae0, 0x804dd08, 0xb0426fc,
    // -15, 2, 8, -3, 78, -23, 76, 32, 25, -26, 15, -9, 24, 84, -12, 18, 0, -16, -1, -6, -7, 22, 21, 1, -11, 0, 3, -11, 66, -21, -11, 9
    0xfd0802f1, 0x204ce94e, 0xf70fe619, 0x12f45418, 0xfafff000, 0x11516f9, 0xf50300f5, 0x9f5eb42,
    // 6, 13, -3, -28, -7, 37, -8, 16, -7, 50, -16, 35, 9, 41, -30, 1, 42, 35, 32, 68, -24, 34, 47, 1, -44, -2, 24, -12, 49, 53, 10, 29
    0xe4fd0d06, 0x10f825f9, 0x23f032f9, 0x1e22909, 0x4420232a, 0x12f22e8, 0xf418fed4, 0x1d0a3531,
    // 26, -48, -35, 6, -37, 0, 37, -26, -29, 0, 9, -20, 31, 52, -14, -1, 23, 20, -33, 13, -27, 32, -22, 12, 36, 53, -18, 6, 43, 16, -29, 12
    0x6ddd01a, 0xe62500db, 0xec0900e3, 0xfff2341f, 0xddf1417, 0xcea20e5, 0x6ee3524, 0xce3102b,
    // 19, 8, 6, -1, -56, 48, -9, 13, -1, 10, 17, -5, 4, -39, 19, -7, -20, -3, -9, -70, 11, 2, -38, -27, 25, -20, -14, -11, -3, 33, -50, -11
    0xff060813, 0xdf730c8, 0xfb110aff, 0xf913d904, 0xbaf7fdec, 0xe5da020b, 0xf5f2ec19, 0xf5ce21fd,
    // 11, -19, -13, -28, -16, -18, 24, 43, 33, 24, -39, 62, -3, -3, -10, 1, -23, -11, 62, -9, 1, -52, 4, 2, 23, 24, -20, -45, 42, 21, -25, -12
    0xe4f3ed0b, 0x2b18eef0, 0x3ed91821, 0x1f6fdfd, 0xf73ef5e9, 0x204cc01, 0xd3ec1817, 0xf4e7152a,
    // -41, 1, -10, -5, -14, 37, 46, 1, -25, 64, 12, 9, -12, -41, -8, 2, -30, 11, -92, -28, -23, -9, -12, 5, -6, -11, 13, 4, 67, 2, -20, -7
    0xfbf601d7, 0x12e25f2, 0x90c40e7, 0x2f8d7f4, 0xe4a40be2, 0x5f4f7e9, 0x40df5fa, 0xf9ec0243,
    // -18, 12, -19, 9, 4, 12, -1, -78, -11, 40, 33, 15, -41, -18, -5, -2, -3, 22, -20, 18, 34, -28, -9, -9, -21, 6, 23, -19, 64, 57, 30, -25
    0x9ed0cee, 0xb2ff0c04, 0xf2128f5, 0xfefbeed7, 0x12ec16fd, 0xf7f7e422, 0xed1706eb, 0xe71e3940,
    // 18, -4, 15, 10, -61, -38, 13, 3, -1, 11, 48, 4, -12, -55, 34, -11, -18, -54, -14, 5, 46, 9, 83, 4, 6, -1, 19, 9, -42, -77, 48, 29
    0xa0ffc12, 0x30ddac3, 0x4300bff, 0xf522c9f4, 0x5f2caee, 0x453092e, 0x913ff06, 0x1d30b3d6,
    // -36, 31, -22, -14, 3, 7, 2, 22, -21, -2, -10, 13, 21, -14, -2, 5, -4, 4, 64, 19, 0, 9, -1, 7, 10, -3, -2, 3, 10, 36, 0, 15
    0xf2ea1fdc, 0x16020703, 0xdf6feeb, 0x5fef215, 0x134004fc, 0x7ff0900, 0x3fefd0a, 0xf00240a,
    // 25, -1, 25, 18, 20, -35, 1, -2, -2, -99, -39, -5, -5, 16, -1, -7, 12, 10, 67, -11, 7, 2, -5, 6, 19, 2, -3, -11, 24, -17, 40, -7
    0x1219ff19, 0xfe01dd14, 0xfbd99dfe, 0xf9ff10fb, 0xf5430a0c, 0x6fb0207, 0xf5fd0213, 0xf928ef18,
    // -18, -12, -7, 5, -9, 17, 15, -23, -12, 12, -16, -43, 7, -6, 1, -5, -15, -33, 40, 8, -23, 14, 18, -11, -32, -20, 11, 2, 10, 6, 10, -2
    0x5f9f4ee, 0xe90f11f7, 0xd5f00cf4, 0xfb01fa07, 0x828dff1, 0xf5120ee9, 0x20bece0, 0xfe0a060a,
    // -26, -5, 9, 3, -1, -6, 15, 6, 6, 6, -28, -7, 1, -9, 10, -7, 54, 0, 66, -14, -2, -12, 53, 16, 35, 9, -52, -27, -20, 6, -11, 44
    0x309fbe6, 0x60ffaff, 0xf9e40606, 0xf90af701, 0xf2420036, 0x1035f4fe, 0xe5cc0923, 0x2cf506ec,
    // -3, 7, -4, 14, -9, 26, 44, -33, 39, 3, -25, -4, 43, 36, 0, 7, -17, -6, 4, 26, -33, -18, 2, 19, 14, 18, -13, -25, -2, 1, 22, 9
    0xefc07fd, 0xdf2c1af7, 0xfce70327, 0x700242b, 0x1a04faef, 0x1302eedf, 0xe7f3120e, 0x91601fe,
    // 5, 13, 6, 59, 16, 58, 13, -4, -29, 15, -10, -3, 1, -11, -10, 6, 45, -43, -28, -10, -5, -5, 79, -14, -12, 18, 30, -16, 2, -46, -45, 38
    0x3b060d05, 0xfc0d3a10, 0xfdf60fe3, 0x6f6f501, 0xf6e4d52d, 0xf24ffbfb, 0xf01e12f4, 0x26d3d202,
    // 25, 11, -7, 27, 22, -4, -11, 64, 32, -2, -17, -11, -44, 19, 15, 4, -5, -27, 41, 25, -15, -42, -16, -9, 15, -10, 10, -14, 16, -61, -4, 55
    0x1bf90b19, 0x40f5fc16, 0xf5effe20, 0x40f13d4, 0x1929e5fb, 0xf7f0d6f1, 0xf20af60f, 0x37fcc310,
    // -1, -20, -4, 5, -17, -14, 1, 0, 11, -1, 37, 12, 5, 4, 13, -10, 15, 35, -78, -53, -16, 13, 24, 16, -13, 5, -6, -1, -6, 13, -21, 17
    0x5fcecff, 0x1f2ef, 0xc25ff0b, 0xf60d0405, 0xcbb2230f, 0x10180df0, 0xfffa05f3, 0x11eb0dfa,
    // -13, 13, 13, -14, -5, 13, -10, -72, -25, -1, -13, 26, 2, -9, -4, 4, -10, -30, -97, -6, 11, 12, 1, -4, -7, -44, 11, -22, 4, 42, 5, -15
    0xf20d0df3, 0xb8f60dfb, 0x1af3ffe7, 0x4fcf702, 0xfa9fe2f6, 0xfc010c0b, 0xea0bd4f9, 0xf1052a04,
    // -12, 0, 2, 2, -20, -5, 5, 3, 11, 4, -13, -4, 19, 9, -8, -4, -4, -25, 15, 54, 22, -7, 7, 2, -14, 5, 101, -4, -28, -9, 11, 0
    0x20200f4, 0x305fbec, 0xfcf3040b, 0xfcf80913, 0x360fe7fc, 0x207f916, 0xfc6505f2, 0xbf7e4,
    // -38, -19, 20, -17, 11, -6, -27, -8, -10, -12, 4, 24, -27, -34, 32, -13, -17, -17, 29, -4, 17, -35, 9, -2, 7, 0, -16, 6, 42, -16, 6, 18
    0xef14edda, 0xf8e5fa0b, 0x1804f4f6, 0xf320dee5, 0xfc1defef, 0xfe09dd11, 0x6f00007, 0x1206f02a,
    // 32, -1, 11, 7, 11, -70, -18, -5, 9, 1, -63, 12, 6, 11, -21, -10, -31, 32, -94, 21, 18, -9, -54, 11, -17, -2, 0, -9, 20, -24, 30, -11
    0x70bff20, 0xfbeeba0b, 0xcc10109, 0xf6eb0b06, 0x15a220e1, 0xbcaf712, 0xf700feef, 0xf51ee814,
    // 19, -43, 0, 22, 4, 13, 34, -22, 18, -5, 7, 41, 5, 25, 35, 20, 35, -23, 11, -7, 9, 10, -4, 6, 19, 39, -17, -26, -18, 23, -12, 0
    0x1600d513, 0xea220d04, 0x2907fb12, 0x14231905, 0xf90be923, 0x6fc0a09, 0xe6ef2713, 0xf417ee,
    // 41, -11, -6, -14, -15, -8, -2, 7, 2, -10, 46, 11, 19, -12, 8, 19, 22, -9, -19, 7, 12, -13, 18, -14, -10, -16, 1, -23, -30, -18, -34, 0
    0xf2faf529, 0x7fef8f1, 0xb2ef602, 0x1308f413, 0x7edf716, 0xf212f30c, 0xe901f0f6, 0xdeeee2,
    // 14, 50, 2, 5, 11, 31, -6, 13, -41, 10, -25, 1, 14, -24, -12, -4, 27, -1, 86, 2, -7, -21, 10, -15, -8, -19, 28, 4, 32, -52, -1, -4
    0x502320e, 0xdfa1f0b, 0x1e70ad7, 0xfcf4e80e, 0x256ff1b, 0xf10aebf9, 0x41cedf8, 0xfcffcc20,
    // -10, -15, -8, 3, -46, -26, 17, -6, 5, -7, 3, -1, 21, -19, 0, 9, -8, -15, -32, -3, 21, -28, -17, 12, 18, 27, -42, -5, -21, 45, 15, -10
    0x3f8f1f6, 0xfa11e6d2, 0xff03f905, 0x900ed15, 0xfde0f1f8, 0xcefe415, 0xfbd61b12, 0xf60f2deb,
    // 26, 17, 11, 5, 6, 19, -1, -12, -18, 14, 22, 4, 4, 9, 16, 7, 10, 3, 49, 11, -25, 21, 0, -1, 10, -1, 1, 0, 5, -8, -17, 9
    0x50b111a, 0xf4ff1306, 0x4160eee, 0x7100904, 0xb31030a, 0xff0015e7, 0x1ff0a, 0x9eff805,
    // 6, 4, 6, 21, 39, -3, -13, 5, 7, 29, 43, 6, 4, 13, -10, -3, 30, 1, 26, 6, -10, -9, 0, -9, 2, 15, 38, 9, -38, 13, 36, 19
    0x15060406, 0x5f3fd27, 0x62b1d07, 0xfdf60d04, 0x61a011e, 0xf700f7f6, 0x9260f02, 0x13240dda,
    // 22, 0, -26, -13, 8, -12, 34, -5, 33, 21, -24, -46, 38, 12, 7, -2, -27, -20, -42, 8, -33, -38, 0, -25, -2, 9, 6, -15, -27, -21, 16, 18
    0xf3e60016, 0xfb22f408, 0xd2e81521, 0xfe070c26, 0x8d6ece5, 0xe700dadf, 0xf10609fe, 0x1210ebe5,
    // -19, 10, 15, 16, -8, -26, 49, -14, -12, -10, -50, 31, -34, -1, -16, 20, 17, -12, -12, 21, -15, -8, 21, 12, 17, 1, 24, -38, -5, 71, -27, 78
    0x100f0aed, 0xf231e6f8, 0x1fcef6f4, 0x14f0ffde, 0x15f4f411, 0xc15f8f1, 0xda180111, 0x4ee547fb,
    // -23, -8, -14, -7, -28, -2, 3, -2, -28, 5, -39, -22, 21, 2, -12, -16, -1, -32, -30, 0, -13, -5, 1, 2, -5, -1, 6, -25, 0, 19, -24, 44
    0xf9f2f8e9, 0xfe03fee4, 0xead905e4, 0xf0f40215, 0xe2e0ff, 0x201fbf3, 0xe706fffb, 0x2ce81300,
    // 10, -7, 3, -37, -9, -25, 16, -12, 15, 12, 20, 14, -22, 10, 10, 5, 47, -83, 64, -14, -25, 5, 9, -9, 30, 0, 26, -13, 2, 25, -8, 12
    0xdb03f90a, 0xf410e7f7, 0xe140c0f, 0x50a0aea, 0xf240ad2f, 0xf70905e7, 0xf31a001e, 0xcf81902,
    // 3, -37, 26, 16, 9, 0, 1, 48, 1, 3, 3, -28, 1, -2, -14, 3, -10, -3, -55, 6, 5, 14, -5, -2, -32, 32, 10, 2, 57, -46, -3, 7
    0x101adb03, 0x30010009, 0xe4030301, 0x3f2fe01, 0x6c9fdf6, 0xfefb0e05, 0x20a20e0, 0x7fdd239,
    // -1, 12, 3, -6, -31, 24, 26, -6, -28, -59, 27, 1, 1, -18, -28, 0, 26, -26, 60, -20, -17, -17, -23, -20, -29, -14, 3, -1, 17, 30, -21, 5
    0xfa030cff, 0xfa1a18e1, 0x11bc5e4, 0xe4ee01, 0xec3ce61a, 0xece9efef, 0xff03f2e3, 0x5eb1e11,
};
static const uint embedded_decoder3_ResidualBlock_1_body_pw_contract_bias_dwords[16] = {
    // -0.0001867, 0.0004332, -0.000639, -0.0003762, 0.00036, -0.001052, 6.54e-05, 9.26e-05, -0.001355, 0.0005465, -0.0009727, 0.0008874, 0.0003927, -0.00032, 0.001011, -0.0006495
    0xf198a1e, 0x8e2a913c, 0x944f0de6, 0x6120449, 0x107a958d, 0x134593f8, 0x8d3e0e6f, 0x91521424,
    // 0.002134, -0.0006847, 0.0004625, 0.0002823, 0.001118, -0.0003135, 0.0004926, 0.0006394, 0.000283, 0.0002011, 3.93e-06, 9.984e-05, 0.000986, -0.000299, -0.000658, -0.0008297
    0x919c185f, 0xca00f94, 0x8d231494, 0x113d1009, 0xa970ca3, 0x68b0042, 0x8ce6140a, 0x92cc9164,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass10(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped = {
        uint3(1920, 1080, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 32), // threadGroupSliceSize
        uint3(1920, 1080, 32), // storageSize
        uint3(32, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        265420800, // threadGroupStorageByteOffset
        storage_FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped };
    
    const ConstantBufferStorage<576> storage_embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004204422701150179, storage_embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = { embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0049787829630076885, storage_embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_decoder3_ResidualBlock_1_body_pw_expand_bias = { embedded_decoder3_ResidualBlock_1_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_decoder3_ResidualBlock_1_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_1_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004956809803843498, storage_embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder3_ResidualBlock_1_body_pw_contract_bias = { embedded_decoder3_ResidualBlock_1_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder3_ResidualBlock_1_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_1_body_pw_contract_bias };
    
    // /decoder3/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_20 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_20 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_20 = uint3(64, 1, 32);
    const uint3 storageSize_slice_20 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_20 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_20 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_20 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_20 = dot(groupStart_slice_20, tensorByteStrides_slice_20);
    const RWBufferStorage storage_slice_20 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_20 = { logicalSize_slice_20, groupStart_slice_20, groupSize_slice_20, storageSize_slice_20, tensorByteStrides_slice_20, paddingBegin_slice_20, paddingEnd_slice_20, threadGroupByteOffsetInTensor_slice_20 + 132710400, storage_slice_20 };
    // Fusedquantized_/decoder3/ResidualBlock_1/residual_func/Concat_quantized_/decoder3/ResidualBlock_1/body/spatial_mixing/partial_conv/Conv_quantized_/decoder3/ResidualBlock_1/body/spatial_mixing/Concat_quantized_/decoder3/ResidualBlock_1/body/pw_expand/Conv_/decoder3/ResidualBlock_1/body/pw_expand_act/Relu_quantized_/decoder3/ResidualBlock_1/body/pw_contract/Conv_/decoder3/ResidualBlock_1/Add (32, 1080, 1920), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,) -> (32, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<32, 1>(0.024976711720228195, 0.0332077294588089, 0.021764662116765976, 0.022478194907307625, 0.03038940764963627, FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped, embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias, embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_1_body_pw_expand_bias, embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_1_body_pw_contract_bias, slice_20, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_10
#ifdef MLSR_PASS_10_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass10_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /decoder3/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_21 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_21 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_21 = uint3(32, 1, 32);
    const uint3 storageSize_slice_21 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_21 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_21 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_21 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_21 = dot(groupStart_slice_21, tensorByteStrides_slice_21);
    const RWBufferStorage storage_slice_21 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_21 = { logicalSize_slice_21, groupStart_slice_21, groupSize_slice_21, storageSize_slice_21, tensorByteStrides_slice_21, paddingBegin_slice_21, paddingEnd_slice_21, threadGroupByteOffsetInTensor_slice_21 + 132710400, storage_slice_21 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_21, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_10_POST


#ifdef MLSR_PASS_11
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FNB_CT2D_ADD.hlsli"

static const uint embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // -2, 18, -8, 22, -8, -23, 8, -18, 6, -5, -18, -8, 17, 8, -11, -11, 6, 12, 9, 25, 12, 24, 13, -5, 15, -73, -1, -3, -4, 16, 4, -11
    0x16f812fe, 0xee08e9f8, 0xf8eefb06, 0xf5f50811, 0x19090c06, 0xfb0d180c, 0xfdffb70f, 0xf50410fc,
    // -10, -9, -19, -2, 24, -15, 28, 3, 0, -25, 3, 3, 0, 13, -11, -1, 31, -18, 16, -56, 86, 39, 40, -48, 64, 37, 17, -35, -6, -4, -32, -24
    0xfeedf7f6, 0x31cf118, 0x303e700, 0xfff50d00, 0xc810ee1f, 0xd0282756, 0xdd112540, 0xe8e0fcfa,
    // 43, 34, -47, 1, 22, 96, -9, -77, -12, -34, 17, 63, 37, 85, -22, 46, 0, -9, -61, 21, -21, 50, -65, 16, 27, 52, 28, 37, 11, -3, -14, 75
    0x1d1222b, 0xb3f76016, 0x3f11def4, 0x2eea5525, 0x15c3f700, 0x10bf32eb, 0x251c341b, 0x4bf2fd0b,
    // 4, 10, 11, -18, -5, 3, 5, 1, 5, 12, -7, -34, -15, 21, 37, -20, -14, 36, -17, -34, -32, 5, -12, 8, -1, -43, 46, 1, -20, -30, -12, -17
    0xee0b0a04, 0x10503fb, 0xdef90c05, 0xec2515f1, 0xdeef24f2, 0x8f405e0, 0x12ed5ff, 0xeff4e2ec,
    // -19, 0, -30, 1, -4, -14, 27, 1, -9, 30, 13, -18, -3, -4, 1, 13, 17, -9, -57, -15, 21, -3, 20, 43, 2, -21, -20, -36, -32, 32, 7, -1
    0x1e200ed, 0x11bf2fc, 0xee0d1ef7, 0xd01fcfd, 0xf1c7f711, 0x2b14fd15, 0xdceceb02, 0xff0720e0,
    // -42, -13, 0, 3, 21, -43, -15, 27, 8, -5, -13, 3, -44, 0, 37, 10, -11, 19, 10, -28, 3, -3, -34, -23, -16, 33, -21, 16, -10, 4, 23, -8
    0x300f3d6, 0x1bf1d515, 0x3f3fb08, 0xa2500d4, 0xe40a13f5, 0xe9defd03, 0x10eb21f0, 0xf81704f6,
    // 33, -26, 41, -42, 61, 44, 40, -21, 6, 28, -27, 17, 5, -1, -7, 17, -128, -27, 9, -14, 45, 27, -8, 5, -17, -45, -85, 51, 38, 8, -26, 65
    0xd629e621, 0xeb282c3d, 0x11e51c06, 0x11f9ff05, 0xf209e580, 0x5f81b2d, 0x33abd3ef, 0x41e60826,
    // -23, 26, -1, -26, 37, -12, 15, 16, 4, 19, -4, -19, 17, 22, 34, -9, -18, -36, -1, 14, 6, -5, 2, -24, -9, 20, 2, 53, -9, -21, 24, 24
    0xe6ff1ae9, 0x100ff425, 0xedfc1304, 0xf7221611, 0xeffdcee, 0xe802fb06, 0x350214f7, 0x1818ebf7,
    // -40, -8, -30, 28, -6, -2, 19, -13, -12, 31, -46, -4, -2, 17, 9, -35, 40, 30, 5, 48, 37, -4, 24, 26, 4, -10, -20, -21, 9, 31, 17, -8
    0x1ce2f8d8, 0xf313fefa, 0xfcd21ff4, 0xdd0911fe, 0x30051e28, 0x1a18fc25, 0xebecf604, 0xf8111f09,
    // -18, 0, 1, 15, -22, -20, -17, 16, 46, -38, 23, -7, 25, 41, 7, 3, -16, -11, -5, -17, 40, 47, -14, -12, -8, 60, -1, 52, 34, 45, -26, -4
    0xf0100ee, 0x10efecea, 0xf917da2e, 0x3072919, 0xeffbf5f0, 0xf4f22f28, 0x34ff3cf8, 0xfce62d22,
    // -18, -2, -4, 3, -15, 4, -11, -28, 20, 10, -1, 42, 5, 8, -14, -20, 29, 36, -12, 21, -32, -14, 16, 55, -38, 0, 8, 29, 2, -6, -2, 20
    0x3fcfeee, 0xe4f504f1, 0x2aff0a14, 0xecf20805, 0x15f4241d, 0x3710f2e0, 0x1d0800da, 0x14fefa02,
    // -16, -4, 4, 0, 77, -3, 1, 85, -16, -41, 31, 68, 33, -31, -3, 75, 64, -10, 46, -23, 0, -33, 30, -17, -43, -12, -8, -19, -17, 17, 7, 7
    0x4fcf0, 0x5501fd4d, 0x441fd7f0, 0x4bfde121, 0xe92ef640, 0xef1edf00, 0xedf8f4d5, 0x70711ef,
    // -11, -4, 11, 2, 9, 10, -1, -6, 21, 1, 1, 1, -14, 4, 7, 2, 3, 19, 20, -14, -19, 16, -5, 22, 0, 2, -10, -21, 31, 18, 30, -37
    0x20bfcf5, 0xfaff0a09, 0x1010115, 0x20704f2, 0xf2141303, 0x16fb10ed, 0xebf60200, 0xdb1e121f,
    // 4, 9, -47, -2, -15, 21, 0, 47, 42, -20, -1, 7, 19, 7, -5, -26, 3, 8, -23, -20, -1, 9, 14, 14, -7, 17, 4, 12, -39, -13, -2, 13
    0xfed10904, 0x2f0015f1, 0x7ffec2a, 0xe6fb0713, 0xece90803, 0xe0e09ff, 0xc0411f9, 0xdfef3d9,
    // 2, 28, 5, -31, 11, 41, -44, 24, -32, 20, 7, 9, -32, 4, 24, 33, -12, 26, 9, -51, -2, -4, -48, -3, -6, 13, 8, -21, 13, 5, 16, -23
    0xe1051c02, 0x18d4290b, 0x90714e0, 0x211804e0, 0xcd091af4, 0xfdd0fcfe, 0xeb080dfa, 0xe910050d,
    // 5, -24, -51, 1, -34, 4, 25, 18, -56, -31, 5, -3, -70, 8, 5, 33, 19, 19, -28, 57, -24, -26, -21, -84, 36, 4, 114, 67, -45, -31, 1, -58
    0x1cde805, 0x121904de, 0xfd05e1c8, 0x210508ba, 0x39e41313, 0xacebe6e8, 0x43720424, 0xc601e1d3,
    // 17, 59, 22, -27, 38, -15, 36, -21, -38, 10, 14, -26, 31, -5, 39, -37, 41, -20, -18, 35, -19, 13, 16, 5, 20, -4, -19, 26, 12, 16, 11, 13
    0xe5163b11, 0xeb24f126, 0xe60e0ada, 0xdb27fb1f, 0x23eeec29, 0x5100ded, 0x1aedfc14, 0xd0b100c,
    // 9, -33, -17, 59, 65, -20, 23, 18, -6, 16, -1, 46, 25, 3, -14, 8, 5, 17, 23, 46, 14, 23, 4, -21, -6, -1, -7, 0, 24, 1, 30, -14
    0x3befdf09, 0x1217ec41, 0x2eff10fa, 0x8f20319, 0x2e171105, 0xeb04170e, 0xf9fffa, 0xf21e0118,
    // -14, 21, -4, 9, -7, -8, -13, -15, -23, 18, 5, 1, -25, -2, 47, 29, -24, 1, 43, -11, -2, -12, 15, -32, -2, 11, 35, 39, 26, 1, 9, 43
    0x9fc15f2, 0xf1f3f8f9, 0x10512e9, 0x1d2ffee7, 0xf52b01e8, 0xe00ff4fe, 0x27230bfe, 0x2b09011a,
    // 14, -7, -22, -41, -13, -5, 4, -18, -17, -15, -4, 13, 22, 9, -3, -25, 8, 30, -57, 45, -24, -10, 4, 26, 20, -12, 30, 6, -2, -43, -18, -58
    0xd7eaf90e, 0xee04fbf3, 0xdfcf1ef, 0xe7fd0916, 0x2dc71e08, 0x1a04f6e8, 0x61ef414, 0xc6eed5fe,
    // -2, -20, -29, -20, 36, -14, -50, -6, 17, -56, -108, 1, -5, 34, -17, -62, 36, 10, 32, 24, 13, 12, -35, -48, -11, 27, 15, 0, -49, -6, 30, -30
    0xece3ecfe, 0xfacef224, 0x194c811, 0xc2ef22fb, 0x18200a24, 0xd0dd0c0d, 0xf1bf5, 0xe21efacf,
    // 10, -5, 24, -25, 8, 11, 14, -2, -4, -10, -11, -31, -53, -6, 42, 13, 9, 21, 7, 4, -60, -2, 8, 31, 5, -28, -9, 5, 2, -37, 11, 19
    0xe718fb0a, 0xfe0e0b08, 0xe1f5f6fc, 0xd2afacb, 0x4071509, 0x1f08fec4, 0x5f7e405, 0x130bdb02,
    // -12, -19, -12, -9, -26, 13, -9, 0, -15, 17, -8, 21, -12, -27, 14, 11, 7, 6, -3, -8, 21, 40, -7, -25, 11, 4, -5, 18, 25, -20, -9, -10
    0xf7f4edf4, 0xf70de6, 0x15f811f1, 0xb0ee5f4, 0xf8fd0607, 0xe7f92815, 0x12fb040b, 0xf6f7ec19,
    // -39, -29, -13, 21, -24, -12, 19, -10, 6, -17, 25, 0, -8, -12, 5, -6, -1, 3, -23, -12, 13, 31, 4, -5, -5, -5, 5, 7, -11, 15, 7, 7
    0x15f3e3d9, 0xf613f4e8, 0x19ef06, 0xfa05f4f8, 0xf4e903ff, 0xfb041f0d, 0x705fbfb, 0x7070ff5,
    // -61, 33, 15, 15, 5, 37, -14, -32, 2, -11, -15, -18, 0, 17, 30, -17, -118, 22, -41, 53, 87, -5, 31, 40, 46, -6, 49, -11, -41, -64, 47, 47
    0xf0f21c3, 0xe0f22505, 0xeef1f502, 0xef1e1100, 0x35d7168a, 0x281ffb57, 0xf531fa2e, 0x2f2fc0d7,
    // -4, 22, 36, -8, 42, -18, 80, -28, 5, -31, -30, 22, -27, 38, 3, -14, -9, 19, -14, 6, 7, -4, -27, 14, -6, 5, 9, 2, 15, 8, -19, 18
    0xf82416fc, 0xe450ee2a, 0x16e2e105, 0xf20326e5, 0x6f213f7, 0xee5fc07, 0x20905fa, 0x12ed080f,
    // 38, -8, -11, -26, 31, -22, -59, -24, -25, -49, 25, 11, -20, -2, -40, -12, 10, -15, -29, -15, -6, 23, -8, -27, 2, -15, -9, 22, -19, 11, -23, 30
    0xe6f5f826, 0xe8c5ea1f, 0xb19cfe7, 0xf4d8feec, 0xf1e3f10a, 0xe5f817fa, 0x16f7f102, 0x1ee90bed,
    // 30, -7, 14, -37, 21, 30, 15, 26, -28, 11, -21, 13, 5, -28, -19, -31, 70, 60, 7, 55, 27, 53, -65, -24, 9, 12, -83, -24, -35, -42, -31, 11
    0xdb0ef91e, 0x1a0f1e15, 0xdeb0be4, 0xe1ede405, 0x37073c46, 0xe8bf351b, 0xe8ad0c09, 0xbe1d6dd,
    // -34, 5, 13, 24, 27, 2, -17, 10, -29, -4, -9, -17, 1, -24, -2, 37, 30, -47, 38, -61, 60, 22, 9, -34, 32, -6, -2, 7, -2, -43, -6, -35
    0x180d05de, 0xaef021b, 0xeff7fce3, 0x25fee801, 0xc326d11e, 0xde09163c, 0x7fefa20, 0xddfad5fe,
    // -18, -43, -5, 0, 19, -38, -8, 8, 32, -49, 26, 26, -4, 27, 6, -9, -27, -10, -58, 51, -18, 17, -53, 27, 16, -2, 19, -31, 25, -45, -9, 50
    0xfbd5ee, 0x8f8da13, 0x1a1acf20, 0xf7061bfc, 0x33c6f6e5, 0x1bcb11ee, 0xe113fe10, 0x32f7d319,
    // 1, -23, 13, -37, -4, 5, 2, -14, -27, -4, 4, -12, -15, -13, 26, -20, -14, -4, 3, -19, -78, 44, 49, -14, 54, -9, 23, -10, 15, -17, 94, 4
    0xdb0de901, 0xf20205fc, 0xf404fce5, 0xec1af3f1, 0xed03fcf2, 0xf2312cb2, 0xf617f736, 0x45eef0f,
    // -33, 8, -24, -18, -26, 6, -9, 18, -19, 6, 4, -28, 37, -33, 11, 19, -25, 24, 2, 6, 9, 3, 26, 38, 5, -3, -3, 11, -14, 1, -2, 13
    0xeee808df, 0x12f706e6, 0xe40406ed, 0x130bdf25, 0x60218e7, 0x261a0309, 0xbfdfd05, 0xdfe01f2,
    // -6, 45, 35, -8, -5, 85, -16, 17, -27, -18, -21, 26, -30, -8, 8, 18, -17, 11, 10, -47, 20, -23, 5, 0, -5, -7, 3, 4, 46, -3, -16, 2
    0xf8232dfa, 0x11f055fb, 0x1aebeee5, 0x1208f8e2, 0xd10a0bef, 0x5e914, 0x403f9fb, 0x2f0fd2e,
    // -1, -52, -27, 7, 0, -38, 5, 21, -10, 9, 5, -35, -33, 14, 32, 15, -38, -62, 6, 2, 23, -30, 22, 46, 18, 5, -74, -5, 35, 21, 27, 0
    0x7e5ccff, 0x1505da00, 0xdd0509f6, 0xf200edf, 0x206c2da, 0x2e16e217, 0xfbb60512, 0x1b1523,
    // -24, -23, -35, -6, -17, 44, -42, 48, 14, 39, 10, 9, 44, 11, 1, 13, 34, -5, -4, 28, -45, 31, 3, -7, 24, -26, -8, 27, 21, 21, -1, 10
    0xfadde9e8, 0x30d62cef, 0x90a270e, 0xd010b2c, 0x1cfcfb22, 0xf9031fd3, 0x1bf8e618, 0xaff1515,
    // 35, -25, -17, 1, 51, -57, -56, -7, -72, -27, 35, 29, 6, -19, -36, -51, 20, -2, 46, 25, 2, -4, 10, 7, 8, -6, 16, -12, -2, 10, 23, -11
    0x1efe723, 0xf9c8c733, 0x1d23e5b8, 0xcddced06, 0x192efe14, 0x70afc02, 0xf410fa08, 0xf5170afe,
    // 15, -14, -4, -27, -4, 4, -7, 11, -34, 9, 9, 12, -27, -1, -15, 45, -29, -23, -5, -62, -49, -31, 6, 40, -40, 11, 59, -31, 3, 21, -21, 0
    0xe5fcf20f, 0xbf904fc, 0xc0909de, 0x2df1ffe5, 0xc2fbe9e3, 0x2806e1cf, 0xe13b0bd8, 0xeb1503,
    // 6, 54, 14, -54, 7, 12, -36, 34, -3, -2, 29, -41, 22, 17, 0, -3, 34, -63, -32, -34, -14, 30, 39, 23, -22, 17, -19, 34, -9, 1, -65, 1
    0xca0e3606, 0x22dc0c07, 0xd71dfefd, 0xfd001116, 0xdee0c122, 0x17271ef2, 0x22ed11ea, 0x1bf01f7,
    // -59, 4, 33, -9, 34, 2, 14, -18, 25, -21, -25, 10, -11, 33, -30, 34, -19, 56, 56, 32, 36, 16, -21, 28, -13, 28, 14, -70, 68, 26, 36, 0
    0xf72104c5, 0xee0e0222, 0xae7eb19, 0x22e221f5, 0x203838ed, 0x1ceb1024, 0xba0e1cf3, 0x241a44,
    // 41, -42, -25, 16, -45, 11, 20, 4, -15, -25, -6, -15, 0, 13, -15, -20, 49, -11, 2, 72, -45, 37, 60, -18, -28, -15, -16, -41, 45, 11, -6, -38
    0x10e7d629, 0x4140bd3, 0xf1fae7f1, 0xecf10d00, 0x4802f531, 0xee3c25d3, 0xd7f0f1e4, 0xdafa0b2d,
    // -6, 2, 30, 36, 23, 5, 11, -11, -8, 7, 6, -18, 67, -23, 21, -3, -26, 11, 2, 29, 5, -17, -6, -28, -13, 18, 7, 10, -18, -1, 31, -2
    0x241e02fa, 0xf50b0517, 0xee0607f8, 0xfd15e943, 0x1d020be6, 0xe4faef05, 0xa0712f3, 0xfe1fffee,
    // 6, 56, 34, -51, 2, -27, 49, -2, 21, 0, 7, 34, 2, -35, 13, 44, -24, 22, 35, 72, -9, 25, -42, 10, -19, 25, -17, -31, -18, -23, 3, 10
    0xcd223806, 0xfe31e502, 0x22070015, 0x2c0ddd02, 0x482316e8, 0xad619f7, 0xe1ef19ed, 0xa03e9ee,
    // -47, -32, -23, 23, -3, -12, 23, -10, 10, 12, -31, -10, -20, 10, -20, 62, -47, -17, 4, -53, 33, 16, 32, 14, -39, -49, 51, 61, 38, 10, -58, 50
    0x17e9e0d1, 0xf617f4fd, 0xf6e10c0a, 0x3eec0aec, 0xcb04efd1, 0xe201021, 0x3d33cfd9, 0x32c60a26,
    // -34, -4, -21, 32, -26, 13, 47, -6, 28, 41, 3, 0, 3, -26, -29, 18, -1, 9, -7, 16, 7, 1, -17, 1, -14, -11, 9, -7, 6, -14, 11, -14
    0x20ebfcde, 0xfa2f0de6, 0x3291c, 0x12e3e603, 0x10f909ff, 0x1ef0107, 0xf909f5f2, 0xf20bf206,
    // 28, 32, 9, 52, -3, -24, -27, 5, 10, -29, 13, 14, 35, 7, -17, -46, 6, -10, 16, -25, -5, -21, -35, -43, -27, 4, -5, 32, -1, -16, 15, -15
    0x3409201c, 0x5e5e8fd, 0xe0de30a, 0xd2ef0723, 0xe710f606, 0xd5ddebfb, 0x20fb04e5, 0xf10ff0ff,
    // -14, -5, -43, 14, -13, -12, -36, -5, -3, -17, 11, -31, -24, 15, 34, 6, -65, -31, 0, 11, -21, -56, 9, -4, -27, -29, 33, -8, 21, -5, 13, -35
    0xed5fbf2, 0xfbdcf4f3, 0xe10beffd, 0x6220fe8, 0xb00e1bf, 0xfc09c8eb, 0xf821e3e5, 0xdd0dfb15,
    // -4, -8, -21, -35, -9, -13, -2, -28, -18, 0, -3, 12, 3, -1, 13, -12, 45, -43, 12, -10, 32, 45, 14, 4, 57, 41, 9, 34, 0, 6, 0, -12
    0xddebf8fc, 0xe4fef3f7, 0xcfd00ee, 0xf40dff03, 0xf60cd52d, 0x40e2d20, 0x22092939, 0xf4000600,
    // 89, -31, -16, -2, -22, -68, -43, 21, 39, -2, 51, 52, -80, -59, 34, 18, 18, -14, 1, 6, 24, 13, -49, 2, 6, 29, 0, -9, -24, 19, 13, 2
    0xfef0e159, 0x15d5bcea, 0x3433fe27, 0x1222c5b0, 0x601f212, 0x2cf0d18, 0xf7001d06, 0x20d13e8,
    // -17, 26, -22, 15, -28, -6, -11, -12, -26, 18, -9, 10, 15, -14, -5, -24, 48, 7, 15, 20, 16, -31, -56, -50, -49, -24, 16, 1, -22, -36, -10, -49
    0xfea1aef, 0xf4f5fae4, 0xaf712e6, 0xe8fbf20f, 0x140f0730, 0xcec8e110, 0x110e8cf, 0xcff6dcea,
    // -19, 13, -3, -13, -40, 47, 7, 27, -11, 6, -34, -16, 16, 9, 28, -34, 9, -3, 12, 0, 11, 23, 5, 9, 18, -27, -11, 8, 14, 25, -1, -2
    0xf3fd0ded, 0x1b072fd8, 0xf0de06f5, 0xde1c0910, 0xcfd09, 0x905170b, 0x8f5e512, 0xfeff190e,
    // -78, 8, 0, -28, 34, -19, 27, -7, -2, -62, 15, 40, 0, 13, 5, 30, -5, 6, 10, 15, -10, 36, -22, -11, -21, 17, -32, 9, -18, 14, -15, -24
    0xe40008b2, 0xf91bed22, 0x280fc2fe, 0x1e050d00, 0xf0a06fb, 0xf5ea24f6, 0x9e011eb, 0xe8f10eee,
    // 10, 11, -20, -19, 10, 4, -24, 0, -6, 0, -6, 33, 27, -8, -29, -9, 77, 4, -77, 7, -40, -82, 10, 37, 53, 77, 25, -42, -56, -38, 2, -76
    0xedec0b0a, 0xe8040a, 0x21fa00fa, 0xf7e3f81b, 0x7b3044d, 0x250aaed8, 0xd6194d35, 0xb402dac8,
    // -25, 13, -23, -7, -8, 29, 0, -6, -13, 7, 15, -20, 3, 6, -7, 34, -30, -30, 10, -29, -8, 25, -15, -35, -8, -1, 4, -7, -17, -8, 14, -2
    0xf9e90de7, 0xfa001df8, 0xec0f07f3, 0x22f90603, 0xe30ae2e2, 0xddf119f8, 0xf904fff8, 0xfe0ef8ef,
    // -20, 22, -43, 18, -15, 32, 3, 16, -4, -15, -23, -8, 15, 17, -1, -22, 65, -20, 5, -3, 62, -20, 2, 5, -5, -21, 24, 8, 6, 32, 17, 23
    0x12d516ec, 0x100320f1, 0xf8e9f1fc, 0xeaff110f, 0xfd05ec41, 0x502ec3e, 0x818ebfb, 0x17112006,
    // 22, -12, -5, -1, -11, -11, -18, 0, 13, 11, -6, 0, 5, 30, 12, -10, -7, 71, 0, -3, 12, 33, 23, 6, -24, -41, -33, 10, -2, 8, -17, -28
    0xfffbf416, 0xeef5f5, 0xfa0b0d, 0xf60c1e05, 0xfd0047f9, 0x617210c, 0xadfd7e8, 0xe4ef08fe,
    // -21, 11, 18, 19, -3, 20, -22, 15, -6, -7, 2, 12, 3, -6, 4, 25, 24, 15, -23, -31, -17, 51, 36, -30, 6, -22, -6, 21, -28, 1, 2, 2
    0x13120beb, 0xfea14fd, 0xc02f9fa, 0x1904fa03, 0xe1e90f18, 0xe22433ef, 0x15faea06, 0x20201e4,
    // 51, -59, -51, -37, -70, -23, -25, -7, -5, 39, -94, -56, -5, 54, 10, -57, 14, 15, -42, -14, -14, -22, 24, -30, -16, -11, -28, -55, 10, -17, 2, 12
    0xdbcdc533, 0xf9e7e9ba, 0xc8a227fb, 0xc70a36fb, 0xf2d60f0e, 0xe218eaf2, 0xc9e4f5f0, 0xc02ef0a,
    // -11, 26, -27, 24, 24, -13, -16, 14, -6, 12, 24, 25, 42, -11, -6, -17, -20, 15, 4, 0, 52, 4, 19, 10, 43, -20, 42, 3, 1, -2, 55, 38
    0x18e51af5, 0xef0f318, 0x19180cfa, 0xeffaf52a, 0x40fec, 0xa130434, 0x32aec2b, 0x2637fe01,
    // -31, 27, -58, -27, -52, 52, -2, 0, 3, -17, -3, -8, 32, 0, 2, -20, 22, 7, -19, -8, 5, 15, 14, 1, 6, 7, 7, -2, -9, 21, -2, 0
    0xe5c61be1, 0xfe34cc, 0xf8fdef03, 0xec020020, 0xf8ed0716, 0x10e0f05, 0xfe070706, 0xfe15f7,
    // -49, -10, -41, -23, 20, -31, -6, 6, -1, 9, 24, 20, -4, 7, 22, -30, -6, -2, -26, -15, -28, -10, -8, -8, 5, 5, 12, 13, 0, 1, 7, -23
    0xe9d7f6cf, 0x6fae114, 0x141809ff, 0xe21607fc, 0xf1e6fefa, 0xf8f8f6e4, 0xd0c0505, 0xe9070100,
    // -38, 45, -96, 43, -65, -79, -22, 23, -22, -30, -2, 4, -19, 27, 24, 9, -66, 4, 26, 0, 45, 20, 22, -39, -20, -9, 2, 40, -8, -47, 11, 55
    0x2ba02dda, 0x17eab1bf, 0x4fee2ea, 0x9181bed, 0x1a04be, 0xd916142d, 0x2802f7ec, 0x370bd1f8,
    // -6, 19, 0, 30, 1, 49, -74, 21, -9, -4, -4, -35, 2, -9, 27, 5, 1, 7, -25, 7, -16, -4, -33, -9, -1, 4, -21, -13, 31, 33, -29, -32
    0x1e0013fa, 0x15b63101, 0xddfcfcf7, 0x51bf702, 0x7e70701, 0xf7dffcf0, 0xf3eb04ff, 0xe0e3211f,
    // -17, -46, 17, 28, 22, 39, 39, -4, -6, 2, 0, 34, -36, 0, 46, 11, -25, 20, -9, 9, 17, 5, 4, -14, 8, 4, 8, -17, 31, -23, 15, -11
    0x1c11d2ef, 0xfc272716, 0x220002fa, 0xb2e00dc, 0x9f714e7, 0xf2040511, 0xef080408, 0xf50fe91f,
    // -39, 16, 20, 0, 12, 4, 2, -33, 5, 45, -17, 22, -3, -29, -15, -13, 0, -27, -12, 28, -27, 9, -33, -13, 23, 8, -12, 5, -6, 20, 4, -23
    0x1410d9, 0xdf02040c, 0x16ef2d05, 0xf3f1e3fd, 0x1cf4e500, 0xf3df09e5, 0x5f40817, 0xe90414fa,
    // 1, -15, -38, -36, 26, -8, 19, 1, 18, -32, 21, -2, 16, 21, 12, -19, 30, -20, -40, -16, -41, -20, 14, -12, -29, -45, 20, 17, -29, -43, -25, 58
    0xdcdaf101, 0x113f81a, 0xfe15e012, 0xed0c1510, 0xf0d8ec1e, 0xf40eecd7, 0x1114d3e3, 0x3ae7d5e3,
    // -11, -11, -2, 22, 20, -24, 25, 16, 40, 34, -47, -90, -27, -6, -18, 46, 82, 1, 48, -41, 27, -45, 51, -7, -17, -34, -7, 18, -36, 12, 19, 51
    0x16fef5f5, 0x1019e814, 0xa6d12228, 0x2eeefae5, 0xd7300152, 0xf933d31b, 0x12f9deef, 0x33130cdc,
    // 24, -3, 23, -6, 8, 14, -10, -6, 5, -22, 16, -20, 3, 13, 43, -33, 5, 0, -22, -7, -46, 26, 3, -16, -5, 26, -23, 5, 48, 3, 12, -49
    0xfa17fd18, 0xfaf60e08, 0xec10ea05, 0xdf2b0d03, 0xf9ea0005, 0xf0031ad2, 0x5e91afb, 0xcf0c0330,
    // -42, 25, 9, 32, 29, -3, -9, -52, -16, 25, 21, -10, -2, -16, -3, -22, 25, 35, 11, -61, 22, 70, 9, 29, 18, -6, 10, 33, 12, -35, -25, -40
    0x200919d6, 0xccf7fd1d, 0xf61519f0, 0xeafdf0fe, 0xc30b2319, 0x1d094616, 0x210afa12, 0xd8e7dd0c,
    // -12, -53, 24, 67, -21, -38, -9, -2, -20, 3, 44, -10, 14, -19, 29, 38, 9, 23, 1, -21, -30, -1, -13, -12, -12, 24, 13, -5, -15, 13, -1, -19
    0x4318cbf4, 0xfef7daeb, 0xf62c03ec, 0x261ded0e, 0xeb011709, 0xf4f3ffe2, 0xfb0d18f4, 0xedff0df1,
    // 14, 6, 39, 28, -3, 9, 22, 20, 5, -6, -6, -28, -24, -2, 15, 1, 16, -45, 11, -8, -33, -6, -37, -58, 11, -68, -42, 14, 23, -18, 7, -4
    0x1c27060e, 0x141609fd, 0xe4fafa05, 0x10ffee8, 0xf80bd310, 0xc6dbfadf, 0xed6bc0b, 0xfc07ee17,
    // 17, -23, -2, -24, -24, 14, 29, 2, -29, -3, -8, 25, -24, 8, -14, 33, -11, 17, -33, 2, -2, -26, -5, 0, -12, 9, -24, -12, -4, -13, -17, -37
    0xe8fee911, 0x21d0ee8, 0x19f8fde3, 0x21f208e8, 0x2df11f5, 0xfbe6fe, 0xf4e809f4, 0xdbeff3fc,
    // -46, -18, 19, -20, 70, 19, -1, 32, 33, -4, 15, 24, 61, -4, -26, 42, 38, -41, 23, -2, 45, -24, -23, 10, 13, -25, 29, 7, 14, 1, 30, -3
    0xec13eed2, 0x20ff1346, 0x180ffc21, 0x2ae6fc3d, 0xfe17d726, 0xae9e82d, 0x71de70d, 0xfd1e010e,
};
static const uint embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // -6.56e-05, -0.000639, 0.0001293, -0.000591, 0.0001875, -0.0003698, 0.0004256, 2.15e-06, -8.833e-05, 2.784e-05, -0.0003414, -0.0001795, -0.0002506, 0.0002134, 0.0001039, -0.000285
    0x913c844d, 0x90d7083d, 0x8e0f0a25, 0x240ef9, 0x1d385ca, 0x89e28d98, 0xafe8c1b, 0x8cab06cf,
};
static const uint embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 1, 106, -8, 5, 14, 13, -5, -88, -22, 22, -23, 123, -38, 50, -15, 97, -119, 39, 67, -69, -29, 2, 60, -15, 42, -27, -33, 47, -23, -50, 16, 54
    0x5f86a01, 0xa8fb0d0e, 0x7be916ea, 0x61f132da, 0xbb432789, 0xf13c02e3, 0x2fdfe52a, 0x3610cee9,
    // 11, 8, 14, -2, -28, 19, -4, -9, 6, 17, 1, -7, 2, 26, 22, 13, -39, -54, -19, 15, -25, -22, -8, 82, 13, 4, 52, 4, 9, 14, -48, -42
    0xfe0e080b, 0xf7fc13e4, 0xf9011106, 0xd161a02, 0xfedcad9, 0x52f8eae7, 0x434040d, 0xd6d00e09,
    // -9, 27, -12, 24, 4, -13, 3, -5, 30, 13, -1, -4, 5, 13, -11, -4, 0, 18, -13, -18, -71, -14, 12, -22, 51, 1, -17, -13, -125, 7, 26, -7
    0x18f41bf7, 0xfb03f304, 0xfcff0d1e, 0xfcf50d05, 0xeef31200, 0xea0cf2b9, 0xf3ef0133, 0xf91a0783,
    // -19, 6, -1, 14, 11, -22, 1, 6, 31, 19, 1, -17, -7, -5, 3, -15, -27, 40, 17, 23, -77, -87, 35, 54, 79, 38, -39, -7, -9, -10, -10, -57
    0xeff06ed, 0x601ea0b, 0xef01131f, 0xf103fbf9, 0x171128e5, 0x3623a9b3, 0xf9d9264f, 0xc7f6f6f7,
    // -23, -8, -7, 3, -2, -13, -47, 17, 14, 9, 7, 2, -17, -12, 8, 14, 10, 1, 41, -9, -87, -23, 16, -100, 6, 45, -46, 16, -23, -58, 30, -65
    0x3f9f8e9, 0x11d1f3fe, 0x207090e, 0xe08f4ef, 0xf729010a, 0x9c10e9a9, 0x10d22d06, 0xbf1ec6e9,
    // -30, -76, 77, 71, -2, -10, 38, -19, -16, 47, 50, 42, -16, -21, 50, 30, -18, -2, -15, -37, 4, 10, 33, 43, 5, -36, -14, -9, -14, 42, 0, -27
    0x474db4e2, 0xed26f6fe, 0x2a322ff0, 0x1e32ebf0, 0xdbf1feee, 0x2b210a04, 0xf7f2dc05, 0xe5002af2,
    // -20, -62, -19, 77, 17, -10, 37, 10, -27, 28, -14, 20, 10, -22, -14, 15, -2, -6, -27, 13, -9, -36, 30, 40, 49, -11, -19, 40, -10, 40, 9, -53
    0x4dedc2ec, 0xa25f611, 0x14f21ce5, 0xff2ea0a, 0xde5fafe, 0x281edcf7, 0x28edf531, 0xcb0928f6,
    // -16, 68, 20, 9, -2, -26, -15, 53, -36, 8, 1, 30, 29, -23, -41, -25, -98, 39, 54, -53, -49, -3, 51, 6, 31, -35, 31, 89, -22, -51, -15, 72
    0x91444f0, 0x35f1e6fe, 0x1e0108dc, 0xe7d7e91d, 0xcb36279e, 0x633fdcf, 0x591fdd1f, 0x48f1cdea,
    // -7, 6, 13, -36, -7, -18, -4, 12, -1, 4, -20, -15, 1, -9, -5, 1, 17, 47, -81, 11, 5, -10, 48, 29, -15, -32, -77, -10, 40, -37, 33, -32
    0xdc0d06f9, 0xcfceef9, 0xf1ec04ff, 0x1fbf701, 0xbaf2f11, 0x1d30f605, 0xf6b3e0f1, 0xe021db28,
    // -47, -9, 25, 14, 8, 17, -34, -14, -34, -3, 4, 16, -8, 2, 9, 10, -48, -62, 30, 16, -50, -33, 53, -3, -53, 26, -33, 3, -22, -62, 127, 24
    0xe19f7d1, 0xf2de1108, 0x1004fdde, 0xa0902f8, 0x101ec2d0, 0xfd35dfce, 0x3df1acb, 0x187fc2ea,
    // 46, 12, -36, -19, 79, -38, 46, 20, -31, 29, 42, -34, -10, 25, -17, 10, 7, 21, -5, 22, -9, -11, 23, 1, 8, 8, 7, -25, -14, -2, 59, -30
    0xeddc0c2e, 0x142eda4f, 0xde2a1de1, 0xaef19f6, 0x16fb1507, 0x117f5f7, 0xe7070808, 0xe23bfef2,
    // -20, -21, -9, -5, 19, 2, 9, -9, -12, 2, 41, 1, -7, -10, -5, 11, 7, 5, 7, -51, 17, -10, -70, 54, -13, 73, -37, -7, -10, -42, -22, -15
    0xfbf7ebec, 0xf7090213, 0x12902f4, 0xbfbf6f9, 0xcd070507, 0x36baf611, 0xf9db49f3, 0xf1ead6f6,
    // -59, 36, 25, -30, 1, 83, 39, 30, 16, -12, -61, -61, -77, 10, -42, -31, -37, -55, -43, -33, 16, 8, -53, 42, -27, 72, 49, -65, -18, -15, 16, 5
    0xe21924c5, 0x1e275301, 0xc3c3f410, 0xe1d60ab3, 0xdfd5c9db, 0x2acb0810, 0xbf3148e5, 0x510f1ee,
    // 11, -7, 8, -16, -1, 36, 33, 74, 2, 4, 20, 22, -32, -32, -13, -64, -27, -38, -21, -75, 40, 26, -10, -89, -48, -12, 5, -56, 7, 17, 56, -12
    0xf008f90b, 0x4a2124ff, 0x16140402, 0xc0f3e0e0, 0xb5ebdae5, 0xa7f61a28, 0xc805f4d0, 0xf4381107,
    // 42, -2, -17, -21, -4, 7, -34, 18, 12, 5, 13, 5, 16, -20, -27, 6, -2, 23, -15, -19, -10, 24, 24, 51, -9, -63, 0, -41, 17, 3, -4, 57
    0xebeffe2a, 0x12de07fc, 0x50d050c, 0x6e5ec10, 0xedf117fe, 0x331818f6, 0xd700c1f7, 0x39fc0311,
    // 48, -77, -27, 25, 15, -14, -45, 16, 56, 1, -42, -49, 22, -83, 33, -39, -63, 93, 9, -39, -37, -30, -46, 28, 7, 14, 90, 47, -4, -30, 33, 49
    0x19e5b330, 0x10d3f20f, 0xcfd60138, 0xd921ad16, 0xd9095dc1, 0x1cd2e2db, 0x2f5a0e07, 0x3121e2fc,
    // -40, 14, 12, -20, -32, 1, -28, -24, 9, 15, -24, -94, -57, 19, 6, 10, 16, 54, 24, -23, -5, 10, 22, 29, 1, 57, -21, -3, -17, -5, -6, 75
    0xec0c0ed8, 0xe8e401e0, 0xa2e80f09, 0xa0613c7, 0xe9183610, 0x1d160afb, 0xfdeb3901, 0x4bfafbef,
    // -7, -12, 1, 3, -7, 9, -3, -6, -33, 5, 8, -5, -1, 3, 6, 2, -27, -25, 9, -19, 50, -30, -20, 27, -82, 17, 6, 22, 9, -12, -20, 27
    0x301f4f9, 0xfafd09f9, 0xfb0805df, 0x20603ff, 0xed09e7e5, 0x1bece232, 0x160611ae, 0x1becf409,
    // 11, -100, -18, -8, -28, 12, -27, -125, 91, 68, -48, 27, 3, 33, -49, 78, -81, 33, 6, -7, -33, -11, -45, 8, 19, 14, 37, 10, 9, -32, 55, 43
    0xf8ee9c0b, 0x83e50ce4, 0x1bd0445b, 0x4ecf2103, 0xf90621af, 0x8d3f5df, 0xa250e13, 0x2b37e009,
    // -25, -45, -54, 42, 36, -35, -20, -42, -4, -97, 3, 13, 5, -19, -54, 3, 14, -7, 13, -81, -1, -8, -25, 15, 15, 0, 1, 57, -57, 46, 18, -49
    0x2acad3e7, 0xd6ecdd24, 0xd039ffc, 0x3caed05, 0xaf0df90e, 0xfe7f8ff, 0x3901000f, 0xcf122ec7,
    // -16, 34, 19, -49, -17, -39, 27, 51, -17, 6, 38, -8, 18, -9, 44, 0, 6, 30, 8, 10, 24, 38, -35, -45, -35, 31, -15, -8, -44, -28, 89, 68
    0xcf1322f0, 0x331bd9ef, 0xf82606ef, 0x2cf712, 0xa081e06, 0xd3dd2618, 0xf8f11fdd, 0x4459e4d4,
    // -27, 27, -11, -30, 9, 25, 19, 30, 12, 61, -42, -29, 29, -4, 23, 29, -18, -53, -78, -40, -22, 6, -39, -18, 5, -41, 31, -40, 10, -26, 17, 18
    0xe2f51be5, 0x1e131909, 0xe3d63d0c, 0x1d17fc1d, 0xd8b2cbee, 0xeed906ea, 0xd81fd705, 0x1211e60a,
    // -42, -32, -53, -46, -42, -8, 12, -22, 6, -28, -21, 23, 10, 54, 50, -70, -9, 45, 6, 14, -2, 2, 71, 8, 5, -4, 86, -5, 10, 28, -22, 14
    0xd2cbe0d6, 0xea0cf8d6, 0x17ebe406, 0xba32360a, 0xe062df7, 0x84702fe, 0xfb56fc05, 0xeea1c0a,
    // 40, -34, 16, 0, -1, -6, 12, -37, 30, 56, -44, 68, -22, -46, -13, -52, -4, 8, -3, 77, -10, 6, -45, 3, -18, 5, 99, 6, 16, 56, 63, 3
    0x10de28, 0xdb0cfaff, 0x44d4381e, 0xccf3d2ea, 0x4dfd08fc, 0x3d306f6, 0x66305ee, 0x33f3810,
    // -16, 17, -76, -1, -75, 28, 26, 33, -31, 27, 34, -18, -17, -5, -5, -1, 1, 1, 3, 26, 24, 4, 29, 28, 1, 46, 25, -24, -18, 49, 46, -26
    0xffb411f0, 0x211a1cb5, 0xee221be1, 0xfffbfbef, 0x1a030101, 0x1c1d0418, 0xe8192e01, 0xe62e31ee,
    // -34, -22, -27, -30, 32, 4, 36, -14, -25, 17, 7, -22, -15, -34, 12, -6, 3, 36, -5, -71, -55, 15, -19, 68, -5, 11, 25, 76, -85, -24, 10, 30
    0xe2e5eade, 0xf2240420, 0xea0711e7, 0xfa0cdef1, 0xb9fb2403, 0x44ed0fc9, 0x4c190bfb, 0x1e0ae8ab,
    // 47, -45, -1, 31, -9, 18, -7, -24, 28, -2, -31, -22, 7, -8, 23, -26, 28, 45, -66, 36, 43, 9, -74, 8, -16, 58, 46, -52, 5, -42, 41, -58
    0x1fffd32f, 0xe8f912f7, 0xeae1fe1c, 0xe617f807, 0x24be2d1c, 0x8b6092b, 0xcc2e3af0, 0xc629d605,
    // 57, 4, 5, 39, -19, 15, 58, 16, 12, -10, 3, -19, -4, 3, -12, -7, -71, -51, -13, 55, -8, -74, -32, 74, 90, 20, 59, 91, -23, 73, -7, 57
    0x27050439, 0x103a0fed, 0xed03f60c, 0xf9f403fc, 0x37f3cdb9, 0x4ae0b6f8, 0x5b3b145a, 0x39f949e9,
    // -4, 52, -45, -63, -36, 19, 45, -61, 47, -44, 51, 37, -21, -56, 55, -35, -53, 27, 3, 38, 16, -4, 47, 17, 6, -8, -18, -24, -4, 36, 2, -33
    0xc1d334fc, 0xc32d13dc, 0x2533d42f, 0xdd37c8eb, 0x26031bcb, 0x112ffc10, 0xe8eef806, 0xdf0224fc,
    // 31, -21, -10, 60, -42, 12, -13, -47, -18, 14, 36, 13, -44, 4, -12, -27, 33, 56, 4, -90, -20, -16, 60, -2, 13, -34, 31, 31, 7, 31, -1, 36
    0x3cf6eb1f, 0xd1f30cd6, 0xd240eee, 0xe5f404d4, 0xa6043821, 0xfe3cf0ec, 0x1f1fde0d, 0x24ff1f07,
    // -25, -7, 27, -53, 21, -10, 27, -13, 41, 14, 9, -24, -27, 2, 10, -14, -7, -59, -44, 48, -15, -22, -45, 73, 25, 26, 36, 14, 10, 8, -14, -7
    0xcb1bf9e7, 0xf31bf615, 0xe8090e29, 0xf20a02e5, 0x30d4c5f9, 0x49d3eaf1, 0xe241a19, 0xf9f2080a,
    // 6, 15, -29, -11, -12, 16, 74, -28, -25, -7, 0, -23, -5, -2, -1, 16, 24, 29, 6, -25, -29, -14, -11, -37, -7, 3, 14, 12, 24, -4, 22, 3
    0xf5e30f06, 0xe44a10f4, 0xe900f9e7, 0x10fffefb, 0xe7061d18, 0xdbf5f2e3, 0xc0e03f9, 0x316fc18,
    // 21, -28, 6, -36, -2, 34, -36, -16, -56, -3, -3, -4, -9, -11, -1, 2, 8, -21, 52, -18, -18, -6, -20, 15, -14, 23, 24, -7, -8, 41, -26, 30
    0xdc06e415, 0xf0dc22fe, 0xfcfdfdc8, 0x2fff5f7, 0xee34eb08, 0xfecfaee, 0xf91817f2, 0x1ee629f8,
    // -81, -3, 6, 37, 15, -4, -16, -16, -67, -8, -22, -36, 7, 30, 37, 6, -46, 18, -12, 61, 9, -7, 31, 7, -11, 31, 15, -54, 17, 52, 66, -26
    0x2506fdaf, 0xf0f0fc0f, 0xdceaf8bd, 0x6251e07, 0x3df412d2, 0x71ff909, 0xca0f1ff5, 0xe6423411,
    // 47, 16, 23, 21, -32, 27, 24, 19, -4, 25, 13, -7, -34, -1, 2, 0, 57, 87, -39, 54, 27, -5, 50, -79, -10, -43, -49, -14, 65, -40, 24, 66
    0x1517102f, 0x13181be0, 0xf90d19fc, 0x2ffde, 0x36d95739, 0xb132fb1b, 0xf2cfd5f6, 0x4218d841,
    // -29, 5, 40, -5, 10, 47, 10, 29, 0, 10, -41, -22, -2, -5, 2, 11, -12, 10, 49, 75, 22, 7, -14, -17, -19, 79, 3, -49, 19, -42, -21, 44
    0xfb2805e3, 0x1d0a2f0a, 0xead70a00, 0xb02fbfe, 0x4b310af4, 0xeff20716, 0xcf034fed, 0x2cebd613,
    // 35, 0, -36, 1, 17, 42, -56, 1, 2, 35, 49, 48, -6, 2, -3, -25, -77, 9, 42, 70, -49, -1, 40, -9, 36, -13, 10, -27, 1, -24, -5, -10
    0x1dc0023, 0x1c82a11, 0x30312302, 0xe7fd02fa, 0x462a09b3, 0xf728ffcf, 0xe50af324, 0xf6fbe801,
    // -39, -2, 10, -32, 5, -26, 9, 23, -2, -23, 12, 3, -10, 9, 4, 16, 24, 15, -32, 75, 68, 0, 43, 16, -23, 49, 19, -15, 4, 33, 36, -86
    0xe00afed9, 0x1709e605, 0x30ce9fe, 0x100409f6, 0x4be00f18, 0x102b0044, 0xf11331e9, 0xaa242104,
    // 35, -1, -20, -12, -9, -22, 68, -4, -5, 22, -13, -5, -7, -21, -20, -18, -6, -9, 74, -1, -67, 55, 15, 49, 21, 22, 21, 13, 9, 33, 38, -24
    0xf4ecff23, 0xfc44eaf7, 0xfbf316fb, 0xeeecebf9, 0xff4af7fa, 0x310f37bd, 0xd151615, 0xe8262109,
    // -33, -56, 21, 39, -4, -61, -30, -26, -40, -20, 52, 19, 23, -10, 40, 17, 14, 36, 67, 51, 2, 7, 14, 75, 26, 24, -6, 19, -46, 9, -20, 1
    0x2715c8df, 0xe6e2c3fc, 0x1334ecd8, 0x1128f617, 0x3343240e, 0x4b0e0702, 0x13fa181a, 0x1ec09d2,
    // 32, -20, 19, 59, 28, -14, 30, -18, -35, -6, -78, -44, -16, 30, 26, 33, -45, 13, -6, 11, -54, 11, 27, 11, 15, -59, 31, 15, 38, -34, 15, 55
    0x3b13ec20, 0xee1ef21c, 0xd4b2fadd, 0x211a1ef0, 0xbfa0dd3, 0xb1b0bca, 0xf1fc50f, 0x370fde26,
    // -72, -24, -57, -28, -15, -82, 27, 101, -51, -2, -25, 37, -81, 53, 0, 95, -72, 2, 45, 31, -14, -2, 27, 0, 14, 11, 14, 10, -45, 25, 34, 43
    0xe4c7e8b8, 0x651baef1, 0x25e7fecd, 0x5f0035af, 0x1f2d02b8, 0x1bfef2, 0xa0e0b0e, 0x2b2219d3,
    // 16, -7, 1, -7, -25, -18, 5, 21, -8, 7, 31, 19, 27, -5, 42, 0, 15, 3, -5, -58, 20, 24, -3, -106, -25, -50, -23, -9, 8, -1, 36, 15
    0xf901f910, 0x1505eee7, 0x131f07f8, 0x2afb1b, 0xc6fb030f, 0x96fd1814, 0xf7e9cee7, 0xf24ff08,
    // 3, -2, 6, 8, 16, 31, 4, -8, 3, 4, 0, 8, 3, 18, -5, 12, -34, 24, 54, -2, 13, 22, 30, 96, 11, 29, 4, -75, 1, -10, -48, -41
    0x806fe03, 0xf8041f10, 0x8000403, 0xcfb1203, 0xfe3618de, 0x601e160d, 0xb5041d0b, 0xd7d0f601,
    // 20, -4, 0, -14, -5, -12, 29, 16, -24, -5, -21, 9, 35, -6, -25, 12, -21, 13, 9, 69, 14, 13, 20, -51, -14, -23, 28, -30, 16, -26, 24, 16
    0xf200fc14, 0x101df4fb, 0x9ebfbe8, 0xce7fa23, 0x45090deb, 0xcd140d0e, 0xe21ce9f2, 0x1018e610,
    // 19, 13, -8, 11, -2, 1, -15, 0, 24, 4, -29, -2, 0, 11, 15, -8, 25, -70, 34, 51, -65, -16, 63, -66, 31, 3, 20, 43, 37, 25, 84, -29
    0xbf80d13, 0xf101fe, 0xfee30418, 0xf80f0b00, 0x3322ba19, 0xbe3ff0bf, 0x2b14031f, 0xe3541925,
    // -42, 28, 65, -40, -53, 24, 23, -2, 26, 77, 13, -59, -32, 25, 58, 45, -65, -37, 18, 8, -2, 35, -19, 70, -16, 57, 15, -22, -41, 28, 12, 49
    0xd8411cd6, 0xfe1718cb, 0xc50d4d1a, 0x2d3a19e0, 0x812dbbf, 0x46ed23fe, 0xea0f39f0, 0x310c1cd7,
    // -42, -7, 18, 16, 1, -16, 0, 9, -14, 4, 21, 9, -10, -3, -10, -15, -18, 8, 16, -23, 20, 15, -16, -69, -3, 35, 9, -64, 48, -71, 20, -4
    0x1012f9d6, 0x900f001, 0x91504f2, 0xf1f6fdf6, 0xe91008ee, 0xbbf00f14, 0xc00923fd, 0xfc14b930,
    // 0, 26, 59, -47, 83, 27, 30, -29, 31, -31, 45, 16, -34, 8, 42, -42, -20, -48, -16, 44, 10, 5, -33, -21, 16, 43, -21, -9, -5, 31, 47, -1
    0xd13b1a00, 0xe31e1b53, 0x102de11f, 0xd62a08de, 0x2cf0d0ec, 0xebdf050a, 0xf7eb2b10, 0xff2f1ffb,
    // -49, 5, 0, 6, 32, 37, -60, 3, -28, 23, 21, 6, -34, 12, 23, -2, 0, 14, -36, 24, -32, -25, -2, 8, -7, 4, 42, 30, 27, 9, 0, 5
    0x60005cf, 0x3c42520, 0x61517e4, 0xfe170cde, 0x18dc0e00, 0x8fee7e0, 0x1e2a04f9, 0x500091b,
    // -20, -2, -2, 9, 12, 14, 8, -10, -39, -17, 32, 22, 8, 3, 1, -24, -15, -3, -9, 1, -25, 43, -16, -46, -34, 5, 15, 4, 11, -48, 75, 35
    0x9fefeec, 0xf6080e0c, 0x1620efd9, 0xe8010308, 0x1f7fdf1, 0xd2f02be7, 0x40f05de, 0x234bd00b,
    // 38, -50, 21, 11, 6, 4, 23, 20, -10, 59, 67, -5, 36, 90, -102, -46, -31, -41, -5, 63, -34, -15, -5, -6, 30, -22, -32, 4, 25, -43, 8, 16
    0xb15ce26, 0x14170406, 0xfb433bf6, 0xd29a5a24, 0x3ffbd7e1, 0xfafbf1de, 0x4e0ea1e, 0x1008d519,
    // 9, -46, -8, -5, 4, -30, 7, 20, 19, -35, -19, 0, -28, 25, 37, -9, -12, 42, 2, -16, 11, -29, -64, 26, -12, 84, 56, -41, -37, 31, 84, -2
    0xfbf8d209, 0x1407e204, 0xeddd13, 0xf72519e4, 0xf0022af4, 0x1ac0e30b, 0xd73854f4, 0xfe541fdb,
    // -37, 18, -19, -4, 22, -11, 26, 31, -40, -26, 24, -16, 0, 39, 25, -2, -29, -4, -6, -10, 38, 22, 79, 19, 7, -23, -53, 47, 12, -22, -38, 6
    0xfced12db, 0x1f1af516, 0xf018e6d8, 0xfe192700, 0xf6fafce3, 0x134f1626, 0x2fcbe907, 0x6daea0c,
    // -19, 15, -6, 47, 4, 12, 3, 23, 50, -1, 0, 5, 5, 10, 9, -5, 6, 3, -52, 11, -29, -38, -22, -32, 106, -29, -42, -19, -27, 41, 10, 24
    0x2ffa0fed, 0x17030c04, 0x500ff32, 0xfb090a05, 0xbcc0306, 0xe0eadae3, 0xedd6e36a, 0x180a29e5,
    // 13, 38, -53, -38, 39, -7, -33, 28, -4, 2, -43, 7, 53, 2, 8, 22, 13, -32, 4, 16, -32, -6, -63, -8, 15, 5, 83, -14, 5, -46, -21, 58
    0xdacb260d, 0x1cdff927, 0x7d502fc, 0x16080235, 0x1004e00d, 0xf8c1fae0, 0xf253050f, 0x3aebd205,
    // -25, 54, 17, -19, 35, 16, 47, 12, -33, -24, 47, -20, 24, 12, -32, 47, -11, -24, 37, 29, 9, 31, 68, -63, -3, -76, 18, 58, 30, 28, -11, 33
    0xed1136e7, 0xc2f1023, 0xec2fe8df, 0x2fe00c18, 0x1d25e8f5, 0xc1441f09, 0x3a12b4fd, 0x21f51c1e,
    // -86, 19, 59, -40, -3, -40, 28, 22, 5, -31, 59, -11, -18, -35, -56, 40, -47, 12, 41, -32, -21, 4, 29, 20, 10, -8, 36, 30, -47, 27, 4, 48
    0xd83b13aa, 0x161cd8fd, 0xf53be105, 0x28c8ddee, 0xe0290cd1, 0x141d04eb, 0x1e24f80a, 0x30041bd1,
    // -39, 39, 3, 42, -27, 39, -11, -25, -38, 34, -8, -66, 114, -87, -28, -33, -48, 27, 27, 19, 10, -20, -48, -11, -16, 76, 6, -53, -41, 36, 112, -3
    0x2a0327d9, 0xe7f527e5, 0xbef822da, 0xdfe4a972, 0x131b1bd0, 0xf5d0ec0a, 0xcb064cf0, 0xfd7024d7,
    // -22, -13, 23, 7, 8, 4, 28, 32, 2, -4, -24, 23, 36, -8, 3, 0, 9, 48, 13, -20, -17, -19, -22, -6, -17, -6, -12, -11, 19, -67, -17, -8
    0x717f3ea, 0x201c0408, 0x17e8fc02, 0x3f824, 0xec0d3009, 0xfaeaedef, 0xf5f4faef, 0xf8efbd13,
    // 62, -3, 9, 8, -13, 19, -12, -23, 22, 5, -24, 16, 3, 12, -3, 6, -67, 28, -59, 60, -6, 10, 33, 1, 21, -56, -40, 52, 67, -94, -32, -19
    0x809fd3e, 0xe9f413f3, 0x10e80516, 0x6fd0c03, 0x3cc51cbd, 0x1210afa, 0x34d8c815, 0xede0a243,
    // 31, 39, 9, -13, -16, -62, -4, 16, 11, 11, -28, -49, -4, -18, -21, -6, 17, 2, 65, -43, 10, 13, 64, 52, -66, 3, -7, -17, 0, -7, -11, -60
    0xf309271f, 0x10fcc2f0, 0xcfe40b0b, 0xfaebeefc, 0xd5410211, 0x34400d0a, 0xeff903be, 0xc4f5f900,
    // 33, -86, -12, 19, -25, 51, 11, 2, 65, -71, 89, -60, 11, 1, -23, 97, -53, 9, -30, 47, -43, -32, -44, -24, 38, 22, 18, 40, 49, -67, 56, 0
    0x13f4aa21, 0x20b33e7, 0xc459b941, 0x61e9010b, 0x2fe209cb, 0xe8d4e0d5, 0x28121626, 0x38bd31,
    // 32, 3, -16, 40, 23, 57, 10, 11, 8, -26, 15, -2, -14, -109, 44, 37, 10, -9, -29, 42, -17, -31, -49, 26, 37, 12, 18, 33, 17, -30, 10, -25
    0x28f00320, 0xb0a3917, 0xfe0fe608, 0x252c93f2, 0x2ae3f70a, 0x1acfe1ef, 0x21120c25, 0xe70ae211,
};
static const uint embedded_decoder3_ResidualBlock_2_body_pw_expand_bias_dwords[32] = {
    // -0.1173, 0.05295, -0.04205, -0.1714, -0.05615, -0.1698, -0.0522, 0.05936, 0.03842, -0.1699, -0.1101, -0.2622, -0.09534, -0.1328, -0.1775, -0.05872
    0x2ac7af82, 0xb17ca962, 0xb16fab30, 0x2b99aaae, 0xb17028eb, 0xb432af0c, 0xb040ae1a, 0xab84b1ae,
    // 0.11334, -0.2229, -0.29, -0.06073, -0.0722, 0.02821, -0.0724, -0.297, -0.2172, -0.1532, -0.8716, -0.2145, 0.05087, -0.03168, -0.1024, 0.02785
    0xb3222f41, 0xabc6b4a4, 0x2739ac9f, 0xb4c1aca2, 0xb0e7b2f3, 0xb2ddbaf9, 0xa80e2a83, 0x2721ae8e,
    // 0.2218, -0.209, 0.05533, -0.0765, -0.1693, -0.4714, -0.1678, 0.01572, -0.1849, -0.1343, 0.0614, -0.279, 0.1062, -0.1377, -0.105, -0.046
    0xb2b03319, 0xace52b15, 0xb78bb16b, 0x2406b15f, 0xb04cb1eb, 0xb4772bdc, 0xb0682ecc, 0xa9e3aeb8,
    // -0.0753, 0.0666, 0.05438, -0.221, -0.0531, -0.302, 0.004444, -0.03616, -0.5684, 0.05273, -0.1776, 0.01839, -0.2983, 0.04245, -0.1735, -0.10895
    0x2c43acd2, 0xb3122af6, 0xb4d5aacc, 0xa8a11c8d, 0x2ac0b88c, 0x24b5b1af, 0x296fb4c6, 0xaef9b18d,
};
static const uint embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -73, 0, -37, -41, -42, -47, -33, 33, -25, 17, 41, -10, 31, -78, 14, -2, 43, 5, 111, -18, 45, 54, 68, -20, -75, 32, -14, -58, -22, -39, 22, 0
    0xd7db00b7, 0x21dfd1d6, 0xf62911e7, 0xfe0eb21f, 0xee6f052b, 0xec44362d, 0xc6f220b5, 0x16d9ea,
    // -2, -42, 53, -52, -16, 26, 28, -13, -25, -78, 12, 75, -69, 9, -14, -16, 83, 19, 13, 101, 65, 7, 13, 29, 57, -73, -112, 34, -53, -20, -33, -109
    0xcc35d6fe, 0xf31c1af0, 0x4b0cb2e7, 0xf0f209bb, 0x650d1353, 0x1d0d0741, 0x2290b739, 0x93dfeccb,
    // 23, 35, -11, 36, -26, -5, -39, -67, -14, 44, -11, 64, 9, 1, -33, 71, -5, -34, -7, -49, 50, 64, -11, 36, -33, 29, -57, -3, 51, -31, 31, 3
    0x24f52317, 0xbdd9fbe6, 0x40f52cf2, 0x47df0109, 0xcff9defb, 0x24f54032, 0xfdc71ddf, 0x31fe133,
    // -27, 39, 11, -50, -19, 42, -17, 25, -3, -55, 6, -51, 20, 22, 31, -30, 21, -36, -36, -43, 80, 31, -16, -17, 58, 18, -84, 16, -59, -13, 38, 8
    0xce0b27e5, 0x19ef2aed, 0xcd06c9fd, 0xe21f1614, 0xd5dcdc15, 0xeff01f50, 0x10ac123a, 0x826f3c5,
    // -51, 17, 2, 16, 9, 21, -15, 75, 49, -76, 7, -6, 30, 7, -4, -77, -38, -12, 14, -12, -32, -29, 85, 9, 58, -53, 10, 32, -29, 39, -72, 12
    0x100211cd, 0x4bf11509, 0xfa07b431, 0xb3fc071e, 0xf40ef4da, 0x955e3e0, 0x200acb3a, 0xcb827e3,
    // 25, -4, 3, -7, 27, -5, 8, 2, -77, 35, -9, 10, 14, 9, -20, 16, 7, -2, 6, 76, 20, -12, -23, 6, -60, -63, -12, 22, 32, -45, 28, -56
    0xf903fc19, 0x208fb1b, 0xaf723b3, 0x10ec090e, 0x4c06fe07, 0x6e9f414, 0x16f4c1c4, 0xc81cd320,
    // 62, -41, 6, 9, -67, -28, -76, -35, -13, -32, 9, 10, -1, -1, -10, 56, -9, 19, -36, 44, -48, 53, -49, 28, -52, 43, -14, -44, -16, -47, 39, -6
    0x906d73e, 0xddb4e4bd, 0xa09e0f3, 0x38f6ffff, 0x2cdc13f7, 0x1ccf35d0, 0xd4f22bcc, 0xfa27d1f0,
    // 2, -50, -7, 23, -33, 12, 60, -22, -13, -30, 46, 29, 2, 18, 19, -49, 63, 13, 69, -42, -26, -42, -1, 54, -41, 47, 17, 38, 20, 16, -58, 30
    0x17f9ce02, 0xea3c0cdf, 0x1d2ee2f3, 0xcf131202, 0xd6450d3f, 0x36ffd6e6, 0x26112fd7, 0x1ec61014,
    // -121, -22, 2, 3, 1, -12, -7, 36, -12, 22, 40, 3, -71, 89, 5, -15, 7, 31, 124, 72, -46, 50, 71, -3, -9, 43, -13, -25, -48, -26, 53, -58
    0x302ea87, 0x24f9f401, 0x32816f4, 0xf10559b9, 0x487c1f07, 0xfd4732d2, 0xe7f32bf7, 0xc635e6d0,
    // -22, -24, -50, -32, 18, -10, 4, -1, -59, 78, 1, -28, 58, 9, 27, -16, -31, 11, 46, 91, 34, 16, -20, 21, -9, 19, 60, 50, 2, 12, -18, -104
    0xe0cee8ea, 0xff04f612, 0xe4014ec5, 0xf01b093a, 0x5b2e0be1, 0x15ec1022, 0x323c13f7, 0x98ee0c02,
    // -3, 36, 64, 86, 35, 2, 46, -3, -15, -56, 79, 29, 0, 14, -62, -1, -15, 41, 10, -17, -6, -13, 8, 45, 20, 0, -17, 63, 12, -17, 47, 62
    0x564024fd, 0xfd2e0223, 0x1d4fc8f1, 0xffc20e00, 0xef0a29f1, 0x2d08f3fa, 0x3fef0014, 0x3e2fef0c,
    // -29, -52, 2, -5, -56, 8, 5, -14, 35, -19, -15, -43, 62, -4, 14, 30, -20, -57, -71, 13, -34, 12, -28, -19, 31, -46, -9, 55, -21, -27, -5, -3
    0xfb02cce3, 0xf20508c8, 0xd5f1ed23, 0x1e0efc3e, 0xdb9c7ec, 0xede40cde, 0x37f7d21f, 0xfdfbe5eb,
    // -116, -11, 2, 11, -89, -51, 1, 58, -38, 29, -34, 15, -10, 9, 4, -33, -20, 0, 97, -14, 9, 3, 76, -44, 14, 9, -26, -23, -13, 53, -6, 53
    0xb02f58c, 0x3a01cda7, 0xfde1dda, 0xdf0409f6, 0xf26100ec, 0xd44c0309, 0xe9e6090e, 0x35fa35f3,
    // 5, 20, -32, 29, 15, 25, 51, 8, -40, 100, 37, 17, -11, -12, 39, -56, -50, -20, 40, 98, 33, 59, -20, -82, 9, -63, 25, 34, -51, 13, 29, -41
    0x1de01405, 0x833190f, 0x112564d8, 0xc827f4f5, 0x6228ecce, 0xaeec3b21, 0x2219c109, 0xd71d0dcd,
    // 29, 51, 28, 2, -45, -37, 15, -32, -22, -94, 59, 21, 0, -10, -38, -42, -6, 69, -50, -2, -9, 30, -59, -62, 76, 61, 5, -11, -29, 4, -43, 67
    0x21c331d, 0xe00fdbd3, 0x153ba2ea, 0xd6daf600, 0xfece45fa, 0xc2c51ef7, 0xf5053d4c, 0x43d504e3,
    // 10, 23, 20, -31, 4, -40, 60, 16, 39, -2, -28, 42, 14, 52, 23, -2, -55, 12, 69, 2, 45, -4, -65, -26, -27, -14, 43, -66, 41, -6, 64, 81
    0xe114170a, 0x103cd804, 0x2ae4fe27, 0xfe17340e, 0x2450cc9, 0xe6bffc2d, 0xbe2bf2e5, 0x5140fa29,
    // -18, -23, 24, 16, -44, -7, 41, 41, 39, -128, 2, 13, -21, -40, 12, -49, 24, -61, -8, 2, -4, -44, 3, -28, 14, 19, 56, -3, -11, 16, -37, 35
    0x1018e9ee, 0x2929f9d4, 0xd028027, 0xcf0cd8eb, 0x2f8c318, 0xe403d4fc, 0xfd38130e, 0x23db10f5,
    // 4, 17, -18, 2, 13, -41, 23, 8, 13, 32, -12, 12, -15, 31, 26, 44, 23, 8, -14, 36, -51, -40, 63, 0, -30, 58, -11, -25, -33, 7, -26, -15
    0x2ee1104, 0x817d70d, 0xcf4200d, 0x2c1a1ff1, 0x24f20817, 0x3fd8cd, 0xe7f53ae2, 0xf1e607df,
    // -4, 33, 18, 43, -15, 21, -10, -71, -2, -33, 27, 17, 26, -3, 21, 32, -17, 31, -15, -17, -25, 18, -34, -19, -14, -40, -29, 1, 33, -15, 22, 18
    0x2b1221fc, 0xb9f615f1, 0x111bdffe, 0x2015fd1a, 0xeff11fef, 0xedde12e7, 0x1e3d8f2, 0x1216f121,
    // -21, -11, -6, 10, -25, 0, 28, 14, 34, -18, -35, 18, -5, -45, 20, 11, 11, -11, -21, -19, 14, 24, 20, 2, 30, -51, 11, 32, 10, -3, -6, 25
    0xafaf5eb, 0xe1c00e7, 0x12ddee22, 0xb14d3fb, 0xedebf50b, 0x214180e, 0x200bcd1e, 0x19fafd0a,
    // 42, -63, -52, -6, -68, -77, -42, 0, -9, 16, 2, -31, -82, 57, -20, 31, 25, -20, -43, 5, 19, 77, 0, 4, 4, 42, -38, -36, 45, -43, -2, -25
    0xfaccc12a, 0xd6b3bc, 0xe10210f7, 0x1fec39ae, 0x5d5ec19, 0x4004d13, 0xdcda2a04, 0xe7fed52d,
    // 11, 4, -24, -78, 16, 24, 34, 41, -1, -25, 49, 8, -2, 21, 57, -49, 19, 14, -1, -45, 49, 35, -4, 70, 15, -33, 3, -18, 14, 26, 16, 25
    0xb2e8040b, 0x29221810, 0x831e7ff, 0xcf3915fe, 0xd3ff0e13, 0x46fc2331, 0xee03df0f, 0x19101a0e,
    // -24, -40, 47, 37, 25, -28, -58, 11, 80, -56, 41, 41, -56, 79, 25, -83, 8, -37, 12, 75, -54, -8, 85, -15, -16, -85, 26, 30, 0, -45, -2, 4
    0x252fd8e8, 0xbc6e419, 0x2929c850, 0xad194fc8, 0x4b0cdb08, 0xf155f8ca, 0x1e1aabf0, 0x4fed300,
    // 5, 12, -59, -3, 9, 9, 9, 23, 35, -17, 39, -33, 10, -37, 34, -6, 50, -9, 3, 49, 0, 7, 1, 81, -12, 72, -76, 6, 19, 3, 18, -22
    0xfdc50c05, 0x17090909, 0xdf27ef23, 0xfa22db0a, 0x3103f732, 0x51010700, 0x6b448f4, 0xea120313,
    // 33, -22, -38, -26, 7, 5, -16, 0, -79, 40, -11, -14, -1, 25, 9, 64, -3, -10, -60, 70, -27, -50, -16, -61, 62, 50, -7, -13, 47, 34, -11, -12
    0xe6daea21, 0xf00507, 0xf2f528b1, 0x400919ff, 0x46c4f6fd, 0xc3f0cee5, 0xf3f9323e, 0xf4f5222f,
    // -10, -51, -45, 26, 8, 14, -45, -59, 11, -25, 10, 43, -27, 23, -23, -38, -23, 17, 14, -13, 19, 27, -25, -3, 58, -14, 26, 13, 22, -13, 43, 26
    0x1ad3cdf6, 0xc5d30e08, 0x2b0ae70b, 0xdae917e5, 0xf30e11e9, 0xfde71b13, 0xd1af23a, 0x1a2bf316,
    // -11, 11, -8, 29, -20, 13, 39, -24, 5, 23, 18, -8, 11, -15, -32, 92, 7, -26, 46, 15, 33, -38, -3, 99, 65, 46, -55, -10, 21, 49, -8, -13
    0x1df80bf5, 0xe8270dec, 0xf8121705, 0x5ce0f10b, 0xf2ee607, 0x63fdda21, 0xf6c92e41, 0xf3f83115,
    // 13, -43, 1, 6, -76, 14, 5, -19, 32, 28, 35, -18, 48, 22, -36, -53, -30, 1, -1, 31, -18, 19, -17, -32, 46, 14, 0, 19, -20, -24, -92, 5
    0x601d50d, 0xed050eb4, 0xee231c20, 0xcbdc1630, 0x1fff01e2, 0xe0ef13ee, 0x13000e2e, 0x5a4e8ec,
    // -49, 49, 46, 13, 17, -16, 17, 15, -13, -45, -60, -18, 35, 24, 9, 16, -30, 81, 24, -5, -29, 49, 20, 23, -15, 56, -7, 9, 59, 19, 9, 32
    0xd2e31cf, 0xf11f011, 0xeec4d3f3, 0x10091823, 0xfb1851e2, 0x171431e3, 0x9f938f1, 0x2009133b,
    // -12, 20, 14, -37, -44, -24, 29, 13, 13, 14, -48, 7, -34, 39, -14, 43, -17, -16, 45, 12, -83, -31, -74, -23, -74, 30, -16, 15, -2, 4, -96, -8
    0xdb0e14f4, 0xd1de8d4, 0x7d00e0d, 0x2bf227de, 0xc2df0ef, 0xe9b6e1ad, 0xff01eb6, 0xf8a004fe,
    // 15, -12, -75, 5, 45, -15, 38, -31, -56, 98, -41, 22, -37, 44, 14, 43, -27, -19, -25, -7, -15, 21, 13, 32, 52, -11, 12, 9, -5, 36, -38, -1
    0x5b5f40f, 0xe126f12d, 0x16d762c8, 0x2b0e2cdb, 0xf9e7ede5, 0x200d15f1, 0x90cf534, 0xffda24fb,
    // -3, 3, -33, 41, -21, 3, -35, 26, 42, 59, 9, 18, 12, -37, 76, 14, -58, -10, -56, 0, -60, 26, 30, -37, 7, -5, 85, -4, -37, -10, -70, 24
    0x29df03fd, 0x1add03eb, 0x12093b2a, 0xe4cdb0c, 0xc8f6c6, 0xdb1e1ac4, 0xfc55fb07, 0x18baf6db,
    // -29, 37, -12, 6, -19, 27, -10, -82, -13, -8, 6, -13, -37, 10, -11, 1, -43, -39, -41, -96, 14, -75, -32, -30, -71, -20, -52, -24, 63, -89, 19, -3
    0x6f425e3, 0xaef61bed, 0xf306f8f3, 0x1f50adb, 0xa0d7d9d5, 0xe2e0b50e, 0xe8ccecb9, 0xfd13a73f,
    // -35, -6, -86, 7, 10, -85, -27, 53, 36, -14, -106, 5, 41, -82, 22, -6, -8, -22, -8, -14, 53, 16, -10, 7, -27, -23, -10, -51, 62, -38, -55, -40
    0x7aafadd, 0x35e5ab0a, 0x596f224, 0xfa16ae29, 0xf2f8eaf8, 0x7f61035, 0xcdf6e9e5, 0xd8c9da3e,
    // -20, 81, 8, -7, 96, -6, -24, -61, -8, 28, -7, -40, -45, 83, 32, 22, -26, 52, 25, 5, -68, 31, -37, -49, -20, 34, -68, 39, 1, -11, 30, 8
    0xf90851ec, 0xc3e8fa60, 0xd8f91cf8, 0x162053d3, 0x51934e6, 0xcfdb1fbc, 0x27bc22ec, 0x81ef501,
    // 14, 3, -57, 10, -1, 17, -3, 53, -39, -38, -45, 4, -30, 74, 74, 67, 39, 30, 55, 12, 15, 42, -2, 38, 32, -71, 15, -43, 16, -15, 33, 24
    0xac7030e, 0x35fd11ff, 0x4d3dad9, 0x434a4ae2, 0xc371e27, 0x26fe2a0f, 0xd50fb920, 0x1821f110,
    // -7, 32, 69, 37, 100, -32, 32, 5, 70, 73, 26, -16, 28, 19, -15, -37, -8, 27, -33, -16, 4, 37, 0, 36, 3, -32, 51, 68, 22, 22, 47, 22
    0x254520f9, 0x520e064, 0xf01a4946, 0xdbf1131c, 0xf0df1bf8, 0x24002504, 0x4433e003, 0x162f1616,
    // -19, 12, 11, -52, 10, 31, -74, -37, 7, 14, -27, -95, -14, -71, -29, -26, 23, -2, -18, -12, -37, 31, 58, -12, -44, 74, -37, 11, 34, -59, -32, 31
    0xcc0b0ced, 0xdbb61f0a, 0xa1e50e07, 0xe6e3b9f2, 0xf4eefe17, 0xf43a1fdb, 0xbdb4ad4, 0x1fe0c522,
    // -9, -81, -7, -62, -42, -66, 11, -17, 21, -58, -26, 58, -8, -10, -12, -12, 94, 18, -35, 60, -24, 69, -21, -6, -38, 14, -22, -74, -5, 68, -3, 14
    0xc2f9aff7, 0xef0bbed6, 0x3ae6c615, 0xf4f4f6f8, 0x3cdd125e, 0xfaeb45e8, 0xb6ea0eda, 0xefd44fb,
    // 16, -17, -43, -35, -1, -47, 15, -74, -1, 24, 68, 44, -63, -8, -3, 56, -11, 29, -13, -23, -22, 9, 7, -31, -32, -11, 28, 30, -13, 16, -27, -27
    0xddd5ef10, 0xb60fd1ff, 0x2c4418ff, 0x38fdf8c1, 0xe9f31df5, 0xe10709ea, 0x1e1cf5e0, 0xe5e510f3,
    // -23, 28, 6, 17, -7, -14, -12, -31, -7, 8, 0, -10, 40, -4, 27, -4, 15, -54, -5, 21, -26, 49, -5, -13, -6, -62, -18, 25, -8, 9, 12, -3
    0x11061ce9, 0xe1f4f2f9, 0xf60008f9, 0xfc1bfc28, 0x15fbca0f, 0xf3fb31e6, 0x19eec2fa, 0xfd0c09f8,
    // -14, 0, -6, -23, 22, -32, -35, 2, 30, 23, -33, -33, -49, 32, 1, -24, 8, -18, 51, 19, 37, -10, -7, 5, 27, 7, 31, 8, -2, 1, 27, 7
    0xe9fa00f2, 0x2dde016, 0xdfdf171e, 0xe80120cf, 0x1333ee08, 0x5f9f625, 0x81f071b, 0x71b01fe,
    // -4, 7, 58, 48, 45, 1, 18, -15, -80, 21, 34, 20, 8, -16, -13, -57, -15, 12, -56, -10, -5, -1, 5, 46, -1, 63, 7, 40, 13, 18, 11, 7
    0x303a07fc, 0xf112012d, 0x142215b0, 0xc7f3f008, 0xf6c80cf1, 0x2e05fffb, 0x28073fff, 0x70b120d,
    // -44, -6, 0, -24, -37, -33, 20, -8, 41, -17, -14, -15, 52, 16, -24, 47, 7, -7, 32, -21, -2, -35, 38, -10, 5, 53, -48, 27, -22, 8, -34, 17
    0xe800fad4, 0xf814dfdb, 0xf1f2ef29, 0x2fe81034, 0xeb20f907, 0xf626ddfe, 0x1bd03505, 0x11de08ea,
    // 10, 50, 21, 41, -17, -47, -56, 55, -58, -78, 42, 72, -16, 43, -20, -35, 9, 12, -12, 48, -30, 59, -48, 49, -17, -10, 64, 44, 23, -32, 58, 19
    0x2915320a, 0x37c8d1ef, 0x482ab2c6, 0xddec2bf0, 0x30f40c09, 0x31d03be2, 0x2c40f6ef, 0x133ae017,
    // 1, -36, -36, -26, -39, -27, -20, -4, -6, -6, 17, -36, -6, -7, 33, -4, 9, -19, -57, -9, -34, -58, -13, 26, 2, 43, -18, 65, -1, -66, 21, 28
    0xe6dcdc01, 0xfcece5d9, 0xdc11fafa, 0xfc21f9fa, 0xf7c7ed09, 0x1af3c6de, 0x41ee2b02, 0x1c15beff,
    // 1, -74, 1, 48, 83, -27, 7, -18, -24, 6, 25, -39, -39, -19, -27, 23, 30, -15, 9, 18, 59, -32, -7, 3, -7, 32, -19, 90, 18, -8, -36, 30
    0x3001b601, 0xee07e553, 0xd91906e8, 0x17e5edd9, 0x1209f11e, 0x3f9e03b, 0x5aed20f9, 0x1edcf812,
    // -4, -8, 8, 44, -28, -2, -30, -46, 1, -10, 79, -60, 5, 38, -2, 47, -3, -34, 48, 2, 24, -12, -25, -7, 26, -26, 9, 26, -14, -44, 7, -1
    0x2c08f8fc, 0xd2e2fee4, 0xc44ff601, 0x2ffe2605, 0x230defd, 0xf9e7f418, 0x1a09e61a, 0xff07d4f2,
    // 19, -31, 86, -28, -1, 18, -8, 1, -39, 15, -3, 4, -10, -9, 26, -29, -2, 42, 8, -6, 11, -20, 15, 3, 15, -64, 16, 2, 4, -9, -8, 4
    0xe456e113, 0x1f812ff, 0x4fd0fd9, 0xe31af7f6, 0xfa082afe, 0x30fec0b, 0x210c00f, 0x4f8f704,
    // -56, 35, -4, 19, 43, 5, -13, 9, 27, 19, 9, 0, -20, -47, 7, -5, 9, 8, -41, 3, -39, -11, 105, 6, 3, -20, -1, 4, -21, 40, 0, -17
    0x13fc23c8, 0x9f3052b, 0x9131b, 0xfb07d1ec, 0x3d70809, 0x669f5d9, 0x4ffec03, 0xef0028eb,
    // -15, 51, 37, -22, 65, -17, 25, -51, -1, -38, -49, -50, 28, -33, 57, 29, 23, -2, -1, 9, 42, 22, 16, -38, -24, -58, -45, 40, -27, 13, -2, -45
    0xea2533f1, 0xcd19ef41, 0xcecfdaff, 0x1d39df1c, 0x9fffe17, 0xda10162a, 0x28d3c6e8, 0xd3fe0de5,
    // -14, 28, 26, -42, 63, -68, -50, -15, -27, -3, 5, -33, -24, -8, -40, 10, -21, 52, 9, 4, 83, 31, 4, -24, 28, -5, 6, 13, 41, 29, 40, 7
    0xd61a1cf2, 0xf1cebc3f, 0xdf05fde5, 0xad8f8e8, 0x40934eb, 0xe8041f53, 0xd06fb1c, 0x7281d29,
    // -8, -80, 76, 28, -34, 12, 46, -38, 29, -24, -16, 51, -31, -25, -7, -11, 38, 50, 12, -1, 88, -38, -16, -24, 17, -73, -18, -46, 39, -7, -14, 25
    0x1c4cb0f8, 0xda2e0cde, 0x33f0e81d, 0xf5f9e7e1, 0xff0c3226, 0xe8f0da58, 0xd2eeb711, 0x19f2f927,
    // -32, -46, 20, 65, -9, -18, 43, 10, 26, 35, 76, 17, -23, -15, 4, -70, -11, -27, -74, 8, -9, 78, 58, -48, 12, -63, 59, 13, 41, 26, 27, 14
    0x4114d2e0, 0xa2beef7, 0x114c231a, 0xba04f1e9, 0x8b6e5f5, 0xd03a4ef7, 0xd3bc10c, 0xe1b1a29,
    // 19, -5, 20, 5, -29, 24, -1, 97, -18, -62, 19, 5, -2, -20, 24, -47, -2, 24, -29, -51, 35, -22, -2, -38, 8, -46, 92, -49, -6, -19, -10, -29
    0x514fb13, 0x61ff18e3, 0x513c2ee, 0xd118ecfe, 0xcde318fe, 0xdafeea23, 0xcf5cd208, 0xe3f6edfa,
    // -9, 14, 9, 45, -9, 38, 1, 29, -28, 18, 15, 70, 15, 26, 8, -17, -19, 8, 35, 12, -66, -38, -23, 2, -67, 85, -47, -11, -12, 15, 28, -35
    0x2d090ef7, 0x1d0126f7, 0x460f12e4, 0xef081a0f, 0xc2308ed, 0x2e9dabe, 0xf5d155bd, 0xdd1c0ff4,
    // 17, -25, 124, -23, 56, -15, -13, 21, -47, 28, -10, -12, -10, -7, 5, 1, 6, 31, 23, 10, -14, 11, -14, -17, 11, -59, 15, 4, -6, -22, 3, -5
    0xe97ce711, 0x15f3f138, 0xf4f61cd1, 0x105f9f6, 0xa171f06, 0xeff20bf2, 0x40fc50b, 0xfb03eafa,
    // -39, 10, -21, -10, -1, 39, 5, 0, -19, 8, -12, 13, -50, -71, 17, -36, 4, -15, -12, -9, -25, -7, 97, -8, -9, -31, 10, -5, -12, 6, 22, -5
    0xf6eb0ad9, 0x527ff, 0xdf408ed, 0xdc11b9ce, 0xf7f4f104, 0xf861f9e7, 0xfb0ae1f7, 0xfb1606f4,
    // -33, -16, -25, 23, 19, 2, 8, -25, 40, 94, 32, 23, -10, -1, -40, -58, 3, 16, -33, 1, 39, 15, 1, -3, -4, 59, 42, -6, 15, 2, 37, 74
    0x17e7f0df, 0xe7080213, 0x17205e28, 0xc6d8fff6, 0x1df1003, 0xfd010f27, 0xfa2a3bfc, 0x4a25020f,
    // 18, -80, 6, 19, -43, -33, 53, -2, 29, 32, 13, 10, 21, -26, 11, 30, -9, -56, 51, 14, 54, 21, -28, 28, -5, 74, 36, 59, 93, -1, -38, -6
    0x1306b012, 0xfe35dfd5, 0xa0d201d, 0x1e0be615, 0xe33c8f7, 0x1ce41536, 0x3b244afb, 0xfadaff5d,
    // -42, 46, 52, -1, -45, 22, -24, -87, -47, -13, 25, 29, 31, 27, -40, 41, -19, 49, 8, -6, -47, 20, 38, 25, -10, 32, -57, -32, 16, 10, 24, 11
    0xff342ed6, 0xa9e816d3, 0x1d19f3d1, 0x29d81b1f, 0xfa0831ed, 0x192614d1, 0xe0c720f6, 0xb180a10,
    // -6, -49, 18, 4, -38, -20, 26, 17, 28, -38, -29, 44, 20, -25, -21, 9, -5, -11, -53, 8, 76, 59, 56, 9, 75, -29, -12, 26, 35, 38, -13, 12
    0x412cffa, 0x111aecda, 0x2ce3da1c, 0x9ebe714, 0x8cbf5fb, 0x9383b4c, 0x1af4e34b, 0xcf32623,
    // 35, 67, -45, 14, 13, -23, 35, 63, 32, 50, 40, 26, 5, 18, -36, -17, -3, -58, 32, 7, 0, 6, 8, 37, 45, 8, 67, -56, 24, 14, 5, 37
    0xed34323, 0x3f23e90d, 0x1a283220, 0xefdc1205, 0x720c6fd, 0x25080600, 0xc843082d, 0x25050e18,
    // 0, -35, -11, -33, -18, 59, 40, -5, -8, 21, -27, 23, 16, 12, -30, -22, -23, -60, -5, 4, -21, -20, -7, -19, 30, 13, 4, 52, -19, 60, 7, -11
    0xdff5dd00, 0xfb283bee, 0x17e515f8, 0xeae20c10, 0x4fbc4e9, 0xedf9eceb, 0x34040d1e, 0xf5073ced,
};
static const uint embedded_decoder3_ResidualBlock_2_body_pw_contract_bias_dwords[16] = {
    // 0.000208, -4.18e-05, 5.645e-05, -0.0001991, -0.0004003, -0.0001594, 0.0003781, 5.38e-05, 4.8e-05, 5.573e-05, 4.31e-05, -6.944e-05, 7.564e-05, -0.0001626, -0.0002137, -5.81e-05
    0x82bd0ad1, 0x8a8603b3, 0x89398e8f, 0x3870e32, 0x3a70325, 0x848d02d3, 0x895404f5, 0x83cf8b01,
    // 0.001353, 9.25e-05, 0.0001991, -0.0002159, 0.0001794, 0.0001386, 0.0002378, 0.0002732, 0.0002787, -0.000504, -9.036e-05, -0.0003169, 0.000696, -0.0004437, -0.0004075, -0.000598
    0x610158b, 0x8b130a86, 0x88b09e1, 0xc7a0bcb, 0x90210c91, 0x8d3185ec, 0x8f4511b4, 0x90e68ead,
};
static const uint embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -43, 13, -14, -14, -11, 7, 9, 33, -20, 27, -27, -2, 32, -3, 8, 6, 27, -19, -9, -6, 28, 45, -13, -36, -22, 21, 58, -9, -29, 43, 23, 1
    0xf2f20dd5, 0x210907f5, 0xfee51bec, 0x608fd20, 0xfaf7ed1b, 0xdcf32d1c, 0xf73a15ea, 0x1172be3,
    // 11, 7, -13, 6, 15, 11, 7, -7, -23, 42, 19, -14, -3, 7, 13, -4, -17, 16, -69, -23, 32, 56, -24, 76, 11, 23, 3, -7, -1, -88, 11, -13
    0x6f3070b, 0xf9070b0f, 0xf2132ae9, 0xfc0d07fd, 0xe9bb10ef, 0x4ce83820, 0xf903170b, 0xf30ba8ff,
    // 9, 1, 11, -3, 4, 18, -10, 28, 14, 6, -3, 2, -14, 2, -17, -26, 5, 4, 5, 26, -41, -71, -22, -15, -20, 11, 11, -31, -9, -51, 23, -28
    0xfd0b0109, 0x1cf61204, 0x2fd060e, 0xe6ef02f2, 0x1a050405, 0xf1eab9d7, 0xe10b0bec, 0xe417cdf7,
    // 7, 0, 4, 7, 6, -1, 9, -10, 3, 1, -1, 2, -8, 5, -8, -7, 20, 11, 2, -31, -26, -27, -2, -9, 4, 2, -16, 21, 6, -14, 9, -17
    0x7040007, 0xf609ff06, 0x2ff0103, 0xf9f805f8, 0xe1020b14, 0xf7fee5e6, 0x15f00204, 0xef09f206,
    // -30, -1, 20, -9, -27, -1, 3, 1, -18, 2, -16, 2, -11, -7, -6, 7, 9, 26, -9, -9, 17, 32, -4, -31, -7, -20, -1, 12, -6, 6, -5, 11
    0xf714ffe2, 0x103ffe5, 0x2f002ee, 0x7faf9f5, 0xf7f71a09, 0xe1fc2011, 0xcffecf9, 0xbfb06fa,
    // 33, 19, -19, 0, 23, -40, 6, -48, 3, -123, 16, -10, 17, 26, -21, 4, 14, 10, -13, -22, 2, -22, 56, -9, 47, 29, 18, 2, -13, 2, 14, -53
    0xed1321, 0xd006d817, 0xf6108503, 0x4eb1a11, 0xeaf30a0e, 0xf738ea02, 0x2121d2f, 0xcb0e02f3,
    // -3, 3, 4, 3, -2, -43, 3, 17, 21, -31, 5, 0, -17, -10, 4, -18, 8, 3, -6, -10, -18, 10, -19, -19, 30, -5, -22, 1, -14, -10, 42, 12
    0x30403fd, 0x1103d5fe, 0x5e115, 0xee04f6ef, 0xf6fa0308, 0xeded0aee, 0x1eafb1e, 0xc2af6f2,
    // -15, -4, -4, -23, -34, 28, -5, 15, 8, -13, -44, -18, 21, 10, 1, 6, 1, -17, 23, -32, -29, 30, 11, 92, 14, 10, -7, -12, -23, 28, 9, -26
    0xe9fcfcf1, 0xffb1cde, 0xeed4f308, 0x6010a15, 0xe017ef01, 0x5c0b1ee3, 0xf4f90a0e, 0xe6091ce9,
    // -5, 2, 11, 0, -13, 10, 1, 6, -13, -8, 14, 28, -19, 16, 7, -11, -4, 2, -45, -9, -3, 14, 1, 0, -81, 35, -16, 19, -17, 23, -46, 7
    0xb02fb, 0x6010af3, 0x1c0ef8f3, 0xf50710ed, 0xf7d302fc, 0x10efd, 0x13f023af, 0x7d217ef,
    // -25, 3, -5, -13, -7, 7, -7, 6, 14, 7, 10, 8, -9, -3, -11, 4, 4, -14, 5, -20, 36, -28, -14, 10, -18, -2, 6, -16, -64, -8, -18, 26
    0xf3fb03e7, 0x6f907f9, 0x80a070e, 0x4f5fdf7, 0xec05f204, 0xaf2e424, 0xf006feee, 0x1aeef8c0,
    // -42, 16, -18, 5, -5, 31, 7, 17, 11, -27, 18, -7, 26, 19, -7, 13, 3, -43, -37, 1, -10, 16, 36, -4, 22, -20, 38, -10, -48, -8, 39, 18
    0x5ee10d6, 0x11071ffb, 0xf912e50b, 0xdf9131a, 0x1dbd503, 0xfc2410f6, 0xf626ec16, 0x1227f8d0,
    // 10, -1, -12, -15, -10, -10, -1, -14, -2, -20, -10, -6, 24, 3, -5, 10, 5, 7, 0, -19, 30, 6, 6, 23, 9, 6, 9, -4, 6, 45, -9, 0
    0xf1f4ff0a, 0xf2fff6f6, 0xfaf6ecfe, 0xafb0318, 0xed000705, 0x1706061e, 0xfc090609, 0xf72d06,
    // 4, 4, -11, -1, -7, -2, 15, 0, -4, 33, 13, -8, 30, 26, -40, 24, -7, -9, 11, 3, -32, -25, -33, 35, -26, -3, -14, -61, 51, 52, 25, 32
    0xfff50404, 0xffef9, 0xf80d21fc, 0x18d81a1e, 0x30bf7f9, 0x23dfe7e0, 0xc3f2fde6, 0x20193433,
    // 6, 3, 38, 4, -3, -35, -15, -10, -5, -39, 12, 17, 0, 5, 3, -1, 39, 31, 1, 12, 40, 26, 10, -24, 3, 38, 9, -4, -28, 42, 43, -51
    0x4260306, 0xf6f1ddfd, 0x110cd9fb, 0xff030500, 0xc011f27, 0xe80a1a28, 0xfc092603, 0xcd2b2ae4,
    // -9, 10, 3, 12, -1, -9, 21, 12, 12, 5, 5, -4, -15, -19, -1, 22, 12, -13, 8, -14, 1, -1, 7, 12, 12, 1, 14, 8, -21, 37, -7, -21
    0xc030af7, 0xc15f7ff, 0xfc05050c, 0x16ffedf1, 0xf208f30c, 0xc07ff01, 0x80e010c, 0xebf925eb,
    // 2, 0, -22, 0, 11, -22, -21, -6, -3, -29, 1, 5, 11, -15, 17, 3, -22, -23, -18, 14, 23, 45, 23, 8, 29, -4, 2, 33, 6, 34, -18, 15
    0xea0002, 0xfaebea0b, 0x501e3fd, 0x311f10b, 0xeeee9ea, 0x8172d17, 0x2102fc1d, 0xfee2206,
    // -28, -9, 3, -3, 28, 10, 29, 19, 2, 18, -44, -9, 24, 19, 27, 26, 38, -18, -11, -10, 20, 37, -18, -45, -12, 25, 30, -1, -26, 37, 43, 7
    0xfd03f7e4, 0x131d0a1c, 0xf7d41202, 0x1a1b1318, 0xf6f5ee26, 0xd3ee2514, 0xff1e19f4, 0x72b25e6,
    // 10, 5, -28, 1, 27, 13, 6, 4, -24, 39, 14, -8, 1, 8, 6, -5, -21, 22, -66, -12, 40, 61, -23, 66, 11, 19, 4, -16, -10, -83, 5, -9
    0x1e4050a, 0x4060d1b, 0xf80e27e8, 0xfb060801, 0xf4be16eb, 0x42e93d28, 0xf004130b, 0xf705adf6,
    // 4, 10, -8, -6, -22, 21, -28, 38, 3, 17, -7, 6, -12, 27, -12, -31, 0, 13, 13, 31, -33, -68, -17, -14, -25, 9, 16, -35, -7, -38, 9, -30
    0xfaf80a04, 0x26e415ea, 0x6f91103, 0xe1f41bf4, 0x1f0d0d00, 0xf2efbcdf, 0xdd1009e7, 0xe209daf9,
    // 1, 10, 0, 8, -11, -5, 4, -5, -1, -2, 7, -1, -9, -3, -11, -13, 19, 13, -2, -29, -21, -22, 3, -10, 0, -2, -5, 14, 7, -15, 2, -19
    0x8000a01, 0xfb04fbf5, 0xff07feff, 0xf3f5fdf7, 0xe3fe0d13, 0xf603eaeb, 0xefbfe00, 0xed02f107,
    // -18, -6, 6, -10, -23, -7, 1, 2, -5, 7, -23, 5, 3, 3, 4, 15, 18, 24, -6, -12, 11, 30, -6, -38, 0, -23, -17, 11, -7, -4, 9, 17
    0xf606faee, 0x201f9e9, 0x5e907fb, 0xf040303, 0xf4fa1812, 0xdafa1e0b, 0xbefe900, 0x1109fcf9,
    // 22, 22, -45, -3, -28, -36, -18, -33, -15, -128, 34, -2, 11, 28, -45, -1, 6, 10, -19, -27, -1, -25, 76, -8, 33, 33, 20, 0, 8, -2, 5, -47
    0xfdd31616, 0xdfeedce4, 0xfe2280f1, 0xffd31c0b, 0xe5ed0a06, 0xf84ce7ff, 0x142121, 0xd105fe08,
    // 1, 10, -13, 3, -21, -48, -1, 15, 19, -23, 6, -15, -16, 0, 3, -21, 11, 16, -6, -10, -10, 9, 0, -18, 22, -9, -15, -7, -7, -6, 30, 7
    0x3f30a01, 0xfffd0eb, 0xf106e913, 0xeb0300f0, 0xf6fa100b, 0xee0009f6, 0xf9f1f716, 0x71efaf9,
    // 0, -11, 12, -20, -9, 42, 6, -1, 16, -16, -50, -19, 7, 26, 14, 0, 3, -8, 18, -46, -11, 29, -15, 68, 10, 17, 2, -10, -21, 31, -5, -23
    0xec0cf500, 0xff062af7, 0xedcef010, 0xe1a07, 0xd212f803, 0x44f11df5, 0xf602110a, 0xe9fb1feb,
    // 18, -8, -10, 4, 0, -36, 4, 6, 6, 10, 17, -27, 17, -20, 10, 2, 9, -7, -37, 11, -37, 8, 16, -19, -59, 5, -26, 11, -55, 0, -9, 1
    0x4f6f812, 0x604dc00, 0xe5110a06, 0x20aec11, 0xbdbf909, 0xed1008db, 0xbe605c5, 0x1f700c9,
    // -21, 6, 9, -7, 7, 2, -2, -2, 19, 7, 8, 2, -11, 3, 7, 8, 8, -20, 7, -14, 37, -30, -18, 7, -12, -4, 6, -13, -70, -3, -18, 26
    0xf90906eb, 0xfefe0207, 0x2080713, 0x80703f5, 0xf207ec08, 0x7eee225, 0xf306fcf4, 0x1aeefdba,
    // -22, -2, 22, -8, 39, 48, 29, 8, 19, -39, -9, -16, -10, 47, 15, 11, 4, -30, -46, -4, 10, 18, 24, -10, 15, -12, 48, -11, -48, -3, 30, 11
    0xf816feea, 0x81d3027, 0xf0f7d913, 0xb0f2ff6, 0xfcd2e204, 0xf618120a, 0xf530f40f, 0xb1efdd0,
    // 7, -3, -13, 3, -11, -5, 4, -18, -2, -31, -5, -3, 16, 1, -10, 13, 12, -5, -5, -28, 17, -1, 2, 22, 12, 13, -5, 3, 20, 36, -3, 14
    0x3f3fd07, 0xee04fbf5, 0xfdfbe1fe, 0xdf60110, 0xe4fbfb0c, 0x1602ff11, 0x3fb0d0c, 0xefd2414,
    // 12, -1, 22, 11, 23, 8, 30, -15, -13, 14, 3, -34, -3, 22, -32, 19, -5, -6, 7, 6, -27, -25, -43, 41, -27, -2, -2, -61, 40, 62, 14, 22
    0xb16ff0c, 0xf11e0817, 0xde030ef3, 0x13e016fd, 0x607fafb, 0x29d5e7e5, 0xc3fefee5, 0x160e3e28,
    // -5, 9, 17, -8, -8, -35, -13, 12, -11, -36, 15, 31, 20, -4, -23, -1, 39, 45, -4, 15, 38, 22, 23, -31, -5, 28, 2, -8, -16, 40, 49, -39
    0xf81109fb, 0xcf3ddf8, 0x1f0fdcf5, 0xffe9fc14, 0xffc2d27, 0xe1171626, 0xf8021cfb, 0xd93128f0,
    // -4, 6, 11, 10, 1, -7, 22, 12, 13, 5, 7, -10, -17, -14, -1, 19, 13, -8, 7, -20, 2, -3, 7, 12, 7, 2, 15, 11, -17, 34, -9, -22
    0xa0b06fc, 0xc16f901, 0xf607050d, 0x13fff2ef, 0xec07f80d, 0xc07fd02, 0xb0f0207, 0xeaf722ef,
    // 7, 4, -15, -1, 14, -32, -16, -3, 6, -13, 6, 8, 23, -15, 16, 12, -19, -26, -3, 15, 19, 49, 19, 6, 29, -4, -6, 34, 3, 28, -15, 16
    0xfff10407, 0xfdf0e00e, 0x806f306, 0xc10f117, 0xffde6ed, 0x6133113, 0x22fafc1d, 0x10f11c03,
    // -19, -19, -42, 16, 22, 5, -23, 8, -7, 29, 36, -1, 1, -17, 8, 19, 52, 2, -1, -2, 10, 27, 14, -3, -6, 16, 45, 7, -19, 36, 29, -10
    0x10d6eded, 0x8e90516, 0xff241df9, 0x1308ef01, 0xfeff0234, 0xfd0e1b0a, 0x72d10fa, 0xf61d24ed,
    // 7, 25, -6, -4, 7, -2, 20, -13, -27, 27, 12, -23, 4, 1, 28, 1, -2, 20, -67, -17, 40, 55, -22, 83, 16, 12, 0, -1, -8, -79, 13, -4
    0xfcfa1907, 0xf314fe07, 0xe90c1be5, 0x11c0104, 0xefbd14fe, 0x53ea3728, 0xff000c10, 0xfc0db1f8,
    // -8, 2, 38, -4, 1, 16, -1, 27, 18, 19, 11, -3, -1, 16, -19, -5, -7, 11, 4, 12, -30, -57, -6, -27, -25, 23, 16, -33, 0, -30, 12, -19
    0xfc2602f8, 0x1bff1001, 0xfd0b1312, 0xfbed10ff, 0xc040bf9, 0xe5fac7e2, 0xdf1017e7, 0xed0ce200,
    // -14, 10, 12, -1, 10, -6, 19, 1, 4, -10, -3, 7, 8, 8, -17, 1, 13, 11, -1, 19, -18, -22, -1, 12, 9, 8, 1, 15, 9, -11, 3, -3
    0xff0c0af2, 0x113fa0a, 0x7fdf604, 0x1ef0808, 0x13ff0b0d, 0xcffeaee, 0xf010809, 0xfd03f509,
    // -29, -18, 7, 1, -3, -3, -3, 1, -10, 0, 6, 16, 12, -8, -7, 15, 5, 15, -9, 30, 2, 18, -5, 14, 9, -27, 5, 9, 0, -2, -10, 2
    0x107eee3, 0x1fdfdfd, 0x100600f6, 0xff9f80c, 0x1ef70f05, 0xefb1202, 0x905e509, 0x2f6fe00,
    // -4, 19, 11, -29, 2, -32, 28, -26, 4, -122, -30, -37, 21, 44, -29, 2, 22, 35, -9, -27, 15, 4, 52, -90, 33, 73, -7, 3, 0, -12, 31, 32
    0xe30b13fc, 0xe61ce002, 0xdbe28604, 0x2e32c15, 0xe5f72316, 0xa634040f, 0x3f94921, 0x201ff400,
    // -32, -13, -3, 8, 28, -36, 13, 18, 18, -22, 7, -3, -19, -7, -13, -1, -6, 5, -37, 19, -15, 5, -6, -2, 23, 12, -12, -16, 0, -10, 10, 22
    0x8fdf3e0, 0x120ddc1c, 0xfd07ea12, 0xfff3f9ed, 0x13db05fa, 0xfefa05f1, 0xf0f40c17, 0x160af600,
    // -20, 8, -13, 9, 10, 46, -12, 4, 13, -6, 18, 3, -10, -11, 4, 16, 20, 59, 24, -14, 8, 27, 53, 49, -3, 18, -32, -24, -1, 28, -7, 11
    0x9f308ec, 0x4f42e0a, 0x312fa0d, 0x1004f5f6, 0xf2183b14, 0x31351b08, 0xe8e012fd, 0xbf91cff,
    // 12, -15, -7, 1, 28, -22, 10, 20, -7, -31, 6, -30, 45, -4, 16, 14, 7, 7, 3, 5, -25, -14, -12, 3, -46, -45, -18, 31, -61, -8, 38, -23
    0x1f9f10c, 0x140aea1c, 0xe206e1f9, 0xe10fc2d, 0x5030707, 0x3f4f2e7, 0x1feed3d2, 0xe926f8c3,
    // -13, -7, 9, 21, -4, 4, -11, -3, 19, 17, 5, 8, -10, 4, -21, -2, 6, -4, 15, -14, 41, -26, 6, 16, -20, -7, -8, -19, -69, -3, -17, 13
    0x1509f9f3, 0xfdf504fc, 0x8051113, 0xfeeb04f6, 0xf20ffc06, 0x1006e629, 0xedf8f9ec, 0xdeffdbb,
    // 30, 30, -8, 38, -37, 44, -37, -4, 7, -16, 41, 2, -39, 18, 1, -33, 28, -8, -3, -7, 4, 24, 48, -12, 4, 1, 21, -2, -54, -2, 21, 7
    0x26f81e1e, 0xfcdb2cdb, 0x229f007, 0xdf0112d9, 0xf9fdf81c, 0xf4301804, 0xfe150104, 0x715feca,
    // -1, -15, -15, -1, 0, -5, 1, -14, 4, -23, -8, -9, 16, -5, -7, 8, 17, 18, -14, -30, 27, 4, 17, -5, 9, 15, -19, -8, 23, 33, -2, 34
    0xfff1f1ff, 0xf201fb00, 0xf7f8e904, 0x8f9fb10, 0xe2f21211, 0xfb11041b, 0xf8ed0f09, 0x22fe2117,
    // 27, 16, -13, 12, -21, -1, -14, -14, -15, 15, 15, -14, -5, 25, -26, -10, 27, 15, 3, -19, -19, -24, -34, 7, -33, -18, -28, -52, 49, 54, 30, 40
    0xcf3101b, 0xf2f2ffeb, 0xf20f0ff1, 0xf6e619fb, 0xed030f1b, 0x7dee8ed, 0xcce4eedf, 0x281e3631,
    // -19, -1, 6, -21, 4, -39, 14, -9, -11, -40, -22, -7, -7, -4, -6, -2, 12, 7, -15, 40, 30, 20, 3, 5, 5, 41, 28, -20, -26, 40, 25, -62
    0xeb06ffed, 0xf70ed904, 0xf9ead8f5, 0xfefafcf9, 0x28f1070c, 0x503141e, 0xec1c2905, 0xc21928e6,
    // 1, -5, -8, 7, -5, -1, 10, 15, 13, 11, -4, -10, -18, -7, -9, -9, 18, 8, 28, 21, 7, 1, 5, 6, 8, 23, 13, 19, -16, 27, -4, 10
    0x7f8fb01, 0xf0afffb, 0xf6fc0b0d, 0xf7f7f9ee, 0x151c0812, 0x6050107, 0x130d1708, 0xafc1bf0,
    // 22, -7, -19, 2, 6, -22, -27, -12, -3, -17, -12, -25, 6, -23, 23, 10, -19, -27, -8, -23, 19, 41, 10, -21, 26, -20, -5, 42, 0, 26, -8, -2
    0x2edf916, 0xf4e5ea06, 0xe7f4effd, 0xa17e906, 0xe9f8e5ed, 0xeb0a2913, 0x2afbec1a, 0xfef81a00,
    // -4, -8, -36, -8, 51, 20, -4, 1, -18, 27, 7, 33, -3, 7, 6, 14, 48, 6, -4, 12, 23, 29, -2, -3, -19, 15, 49, 9, -20, 44, 20, -21
    0xf8dcf8fc, 0x1fc1433, 0x21071bee, 0xe0607fd, 0xcfc0630, 0xfdfe1d17, 0x9310fed, 0xeb142cec,
    // 17, 17, -18, -6, -4, 16, 10, -22, -27, 30, 8, -14, 6, -3, 25, 0, -12, 10, -62, -15, 34, 55, -34, 73, 17, 19, 1, 2, -5, -79, 14, 1
    0xfaee1111, 0xea0a10fc, 0xf2081ee5, 0x19fd06, 0xf1c20af4, 0x49de3722, 0x2011311, 0x10eb1fb,
    // -8, -9, 16, 1, -11, 11, -26, 21, 21, 22, 17, -7, 1, 27, -5, 2, 1, -4, -2, 14, -39, -67, -2, -24, -16, 24, 8, -36, -6, -37, 21, -22
    0x110f7f8, 0x15e60bf5, 0xf9111615, 0x2fb1b01, 0xefefc01, 0xe8febdd9, 0xdc0818f0, 0xea15dbfa,
    // -19, 10, 14, 6, -7, -14, 17, 2, 5, -9, 2, -1, 17, 0, -20, 4, 14, 13, 5, 16, -21, -16, 9, 8, 8, 5, -1, 9, 14, -13, 3, 0
    0x60e0aed, 0x211f2f9, 0xff02f705, 0x4ec0011, 0x10050d0e, 0x809f0eb, 0x9ff0508, 0x3f30e,
    // -27, -18, 8, 0, -1, 3, -11, -2, -10, -4, -1, 25, -1, 13, 4, 21, 8, 27, -15, 37, 11, 23, -12, 11, 2, -30, 13, 5, 2, -5, -18, -6
    0x8eee5, 0xfef503ff, 0x19fffcf6, 0x15040dff, 0x25f11b08, 0xbf4170b, 0x50de202, 0xfaeefb02,
    // -8, 9, -7, -18, -34, -39, -13, -24, -3, -120, -1, -55, 31, 35, -19, 8, 20, 16, -6, -24, 20, -4, 55, -85, 30, 77, -3, -7, 0, -9, 23, 29
    0xeef909f8, 0xe8f3d9de, 0xc9ff88fd, 0x8ed231f, 0xe8fa1014, 0xab37fc14, 0xf9fd4d1e, 0x1d17f700,
    // -35, -14, -13, 15, 6, -45, 1, 6, 20, -16, 11, -12, -15, -7, -1, -4, -5, -3, -28, 18, -23, 9, 1, 6, 29, 10, -13, -13, -8, -8, 10, 12
    0xff3f2dd, 0x601d306, 0xf40bf014, 0xfcfff9f1, 0x12e4fdfb, 0x60109e9, 0xf3f30a1d, 0xc0af8f8,
    // -10, 0, -1, -11, 30, 47, 9, 6, 20, -12, -1, 19, -3, -11, 2, 23, 21, 46, 20, -7, -7, 27, 50, 57, 1, 20, -57, -16, 0, 20, 14, 9
    0xf5ff00f6, 0x6092f1e, 0x13fff414, 0x1702f5fd, 0xf9142e15, 0x39321bf9, 0xf0c71401, 0x90e1400,
    // -14, 15, 2, 13, -8, 4, 7, 11, -34, -45, -2, 0, 2, 37, 22, -9, -3, 22, 4, -2, 3, -1, -10, 26, -70, -29, -1, 39, -30, 15, -3, -18
    0xd020ff2, 0xb0704f8, 0xfed3de, 0xf7162502, 0xfe0416fd, 0x1af6ff03, 0x27ffe3ba, 0xeefd0fe2,
    // -12, 7, 13, 12, 8, 6, 2, -11, 16, 13, -4, 9, -10, 9, -21, 1, 4, 0, 14, -5, 41, -27, 10, 13, -18, -11, -4, -16, -74, -3, -15, 8
    0xc0d07f4, 0xf5020608, 0x9fc0d10, 0x1eb09f6, 0xfb0e0004, 0xd0ae529, 0xf0fcf5ee, 0x8f1fdb6,
    // 42, 29, -16, 0, 13, 39, 14, -1, 26, -13, 8, 23, -33, 12, -14, -47, 20, -3, -8, -1, -6, 23, 59, -7, 17, -4, 10, 6, -64, -10, 44, 4
    0xf01d2a, 0xff0e270d, 0x1708f31a, 0xd1f20cdf, 0xfff8fd14, 0xf93b17fa, 0x60afc11, 0x42cf6c0,
    // 0, -7, -10, -9, 2, -2, -4, -17, -5, -24, -9, -10, 22, -4, -8, 11, 12, 19, -9, -19, 40, 7, 9, -9, -2, 13, -7, -11, 17, 40, -10, 28
    0xf7f6f900, 0xeffcfe02, 0xf6f7e8fb, 0xbf8fc16, 0xedf7130c, 0xf7090728, 0xf5f90dfe, 0x1cf62811,
    // 32, 26, -3, -9, 4, 4, 28, -30, -14, 23, 0, -8, 10, 4, -43, -15, 19, 18, 12, -15, -23, -25, -26, 5, -29, -14, -30, -42, 46, 59, 42, 46
    0xf7fd1a20, 0xe21c0404, 0xf80017f2, 0xf1d5040a, 0xf10c1213, 0x5e6e7e9, 0xd6e2f2e3, 0x2e2a3b2e,
    // -19, -2, 6, -1, -12, -28, -11, -6, -18, -49, -16, -16, -16, -6, -2, -4, 7, -1, -26, 40, 27, 18, -12, 4, 1, 41, 39, -20, -20, 43, 12, -63
    0xff06feed, 0xfaf5e4f4, 0xf0f0cfee, 0xfcfefaf0, 0x28e6ff07, 0x4f4121b, 0xec272901, 0xc10c2bec,
    // 0, -6, 0, 5, 0, -4, 10, 17, 14, 9, -4, -17, -20, -3, -6, -9, 17, 8, 26, 19, 8, 1, 4, 13, 9, 24, 11, 20, -18, 26, -7, 5
    0x500fa00, 0x110afc00, 0xeffc090e, 0xf7fafdec, 0x131a0811, 0xd040108, 0x140b1809, 0x5f91aee,
    // 13, -2, -29, -3, 6, -22, -24, 2, -7, -27, -19, -7, -4, -5, 22, 1, -15, -26, -15, -28, 22, 41, 4, -17, 23, -20, -7, 39, 3, 20, -4, 3
    0xfde3fe0d, 0x2e8ea06, 0xf9ede5f9, 0x116fbfc, 0xe4f1e6f1, 0xef042916, 0x27f9ec17, 0x3fc1403,
};
static const uint embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias_dwords[8] = {
    // -0.0454, -0.05637, 0.0939, 0.05478, -0.05927, 0.00393, 0.04877, 0.00805, 0.0207, 0.02835, -0.02591, -0.0005054, 0.0458, -0.02737, -0.03105, -0.0509
    0xab37a9d0, 0x2b032e02, 0x1c06ab96, 0x201f2a3e, 0x2742254d, 0x9024a6a2, 0xa70229dd, 0xaa84a7f3,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass11(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage__decoder3_ResidualBlock_2_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _decoder3_ResidualBlock_2_residual_func_Split_output_grouped = {
        uint3(1920, 1080, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 32), // threadGroupSliceSize
        uint3(1920, 1080, 32), // storageSize
        uint3(32, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        132710400, // threadGroupStorageByteOffset
        storage__decoder3_ResidualBlock_2_residual_func_Split_output_grouped };
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(3840, 2160, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(3840, 2160, 16), // threadGroupSliceSize
        uint3(3840, 2160, 16), // storageSize
        uint3(16, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.015938660129904747, storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004166014026850462, storage_embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = { embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0046994308941066265, storage_embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_decoder3_ResidualBlock_2_body_pw_expand_bias = { embedded_decoder3_ResidualBlock_2_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_decoder3_ResidualBlock_2_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_2_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004750227555632591, storage_embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder3_ResidualBlock_2_body_pw_contract_bias = { embedded_decoder3_ResidualBlock_2_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder3_ResidualBlock_2_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_2_body_pw_contract_bias };
    
    const ConstantBufferStorage<512> storage_embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_HWCN< ConstantBufferStorage<512> > embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 16, 32), // threadGroupSliceSize
        uint4(2, 2, 16, 32), // storageSize
        uint4(512, 1024, 32, 1), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0030864053405821323, storage_embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias = { embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias };
    
    // fused_fused_quantized_NHWC_/decoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_22 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_22 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(128, 2, 16);
    const uint3 groupSize_slice_22 = uint3(128, 2, 16);
    const uint3 storageSize_slice_22 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_22 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_22 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_22 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_22 = dot(groupStart_slice_22, tensorByteStrides_slice_22);
    const float quantizationScale_slice_22 = 0.01930568739771843;
    const RWBufferStorage storage_slice_22 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_22 = { logicalSize_slice_22, groupStart_slice_22, groupSize_slice_22, storageSize_slice_22, tensorByteStrides_slice_22, paddingBegin_slice_22, paddingEnd_slice_22, threadGroupByteOffsetInTensor_slice_22 + 199065600, quantizationScale_slice_22, storage_slice_22 };
    // FusedFusedquantized_/decoder3/ResidualBlock_2/residual_func/Concat_quantized_/decoder3/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/decoder3/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/decoder3/ResidualBlock_2/body/pw_expand/Conv_/decoder3/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/decoder3/ResidualBlock_2/body/pw_contract/Conv_/decoder3/ResidualBlock_2/Add_Fusedquantized_/decoder3/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_quantized_/decoder2/skip_pop_0/Add (32, 1080, 1920), (16, 2160, 3840), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,), (32, 16, 2, 2), (16,) -> (16, 2160, 3840)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FNB_CT2D_ADD<32, 1>(0.022478194907307625, 0.03038940764963627, 0.024895498529076576, 0.027500253170728683, _decoder3_ResidualBlock_2_residual_func_Split_output_grouped, fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias, embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_2_body_pw_expand_bias, embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_2_body_pw_contract_bias, embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias, slice_22, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_11
#ifdef MLSR_PASS_11_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass11_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_fused_quantized_NHWC_/decoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_23 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_23 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_23 = uint3(32, 1, 16);
    const uint3 storageSize_slice_23 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_23 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_23 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_23 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_23 = dot(groupStart_slice_23, tensorByteStrides_slice_23);
    const float quantizationScale_slice_23 = 0.01930568739771843;
    const RWBufferStorage storage_slice_23 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_23 = { logicalSize_slice_23, groupStart_slice_23, groupSize_slice_23, storageSize_slice_23, tensorByteStrides_slice_23, paddingBegin_slice_23, paddingEnd_slice_23, threadGroupByteOffsetInTensor_slice_23 + 199065600, quantizationScale_slice_23, storage_slice_23 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_23, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_11_POST


#ifdef MLSR_PASS_12
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/ConvNextBlock.hlsli"

static const uint embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // -4, 5, 11, 23, 7, -1, -4, 9, 7, 5, 12, 16, 13, 2, 5, 19, -27, 11, 2, -37, 46, 31, 16, 13, 3, 20, -37, -22, -1, -14, 29, 3
    0x170b05fc, 0x9fcff07, 0x100c0507, 0x1305020d, 0xdb020be5, 0xd101f2e, 0xeadb1403, 0x31df2ff,
    // -4, -8, 8, 31, 0, -5, -14, 9, -3, 4, -27, -12, -14, -5, 16, -18, -2, -8, -25, -3, -28, -25, -15, -10, 6, -5, 48, 28, 8, -18, 31, -2
    0x1f08f8fc, 0x9f2fb00, 0xf4e504fd, 0xee10fbf2, 0xfde7f8fe, 0xf6f1e7e4, 0x1c30fb06, 0xfe1fee08,
    // 71, 31, 59, 14, -64, -8, 17, 15, -5, 9, -39, 26, -30, -5, -11, 22, -13, -5, -29, 63, -11, 35, -15, -2, -11, 25, -21, -29, 16, 36, -30, 20
    0xe3b1f47, 0xf11f8c0, 0x1ad909fb, 0x16f5fbe2, 0x3fe3fbf3, 0xfef123f5, 0xe3eb19f5, 0x14e22410,
    // -21, -8, -27, -4, 33, 2, -6, -5, 2, -8, 20, -10, -1, 0, -21, -24, 0, -9, 4, -4, -16, -31, 13, 9, -2, 2, -13, 8, -13, -17, 25, -5
    0xfce5f8eb, 0xfbfa0221, 0xf614f802, 0xe8eb00ff, 0xfc04f700, 0x90de1f0, 0x8f302fe, 0xfb19eff3,
    // 4, 5, 2, -6, -41, -8, -6, -3, 0, -5, -1, -13, -12, -15, -2, 5, -13, 3, 6, 28, -4, -14, -14, -13, 11, -1, 30, 10, -20, -3, -22, 12
    0xfa020504, 0xfdfaf8d7, 0xf3fffb00, 0x5fef1f4, 0x1c0603f3, 0xf3f2f2fc, 0xa1eff0b, 0xceafdec,
    // -11, 4, 13, -17, 16, -8, -4, 6, -4, -5, 13, 39, 27, 21, -9, 58, -16, 6, 5, -4, 10, -9, -20, -6, 0, 9, 4, -3, -20, 13, -17, -1
    0xef0d04f5, 0x6fcf810, 0x270dfbfc, 0x3af7151b, 0xfc0506f0, 0xfaecf70a, 0xfd040900, 0xffef0dec,
    // -1, -1, -26, 23, -3, -22, 4, -18, 9, -7, 23, 33, 13, -29, 26, -26, 36, -8, 8, -51, -2, -43, -10, -9, 16, -19, 72, 92, 76, -44, 53, 14
    0x17e6ffff, 0xee04eafd, 0x2117f909, 0xe61ae30d, 0xcd08f824, 0xf7f6d5fe, 0x5c48ed10, 0xe35d44c,
    // 11, -9, 34, -8, 23, -6, -1, 13, 6, -4, 30, 25, -9, -31, 8, 5, -10, 2, -7, 3, 29, 13, -18, -3, 4, 0, 10, -10, -28, 3, -7, -18
    0xf822f70b, 0xdfffa17, 0x191efc06, 0x508e1f7, 0x3f902f6, 0xfdee0d1d, 0xf60a0004, 0xeef903e4,
    // 18, -9, -2, 5, 44, 3, 21, 4, 6, -3, 28, 17, 9, 5, -5, -3, 5, 5, 1, -7, -5, -4, 6, -5, 2, 2, 19, -4, -19, -16, 8, -6
    0x5fef712, 0x415032c, 0x111cfd06, 0xfdfb0509, 0xf9010505, 0xfb06fcfb, 0xfc130202, 0xfa08f0ed,
    // 17, -9, 21, 5, 4, 16, 27, 8, 5, 9, 2, 3, -5, -19, 4, -4, 3, -1, 18, -6, -9, 11, -11, 9, -3, 16, -16, -4, -24, -13, 2, 11
    0x515f711, 0x81b1004, 0x3020905, 0xfc04edfb, 0xfa12ff03, 0x9f50bf7, 0xfcf010fd, 0xb02f3e8,
    // -2, -7, 23, -8, 31, -3, -11, 2, -2, 8, 12, -13, -7, 1, 1, 3, 8, 19, -12, 16, 11, 31, 43, -3, -4, 6, -35, -24, -22, -17, -12, -4
    0xf817f9fe, 0x2f5fd1f, 0xf30c08fe, 0x30101f9, 0x10f41308, 0xfd2b1f0b, 0xe8dd06fc, 0xfcf4efea,
    // 65, 0, -54, 30, -60, 28, -59, 27, -41, 18, -83, -79, 70, -12, -17, 1, -6, -8, 0, 7, 45, 17, 21, 27, -9, 13, -3, -14, 16, -2, -39, -2
    0x1eca0041, 0x1bc51cc4, 0xb1ad12d7, 0x1eff446, 0x700f8fa, 0x1b15112d, 0xf2fd0df7, 0xfed9fe10,
    // -3, -10, 8, 8, 3, 7, 3, 13, 5, 20, 8, -6, -9, 6, -2, -10, 4, -4, 8, 18, -28, 6, -2, 1, -12, 14, 5, -6, -11, 0, -9, 35
    0x808f6fd, 0xd030703, 0xfa081405, 0xf6fe06f7, 0x1208fc04, 0x1fe06e4, 0xfa050ef4, 0x23f700f5,
    // 18, 0, 19, 1, -5, -7, -3, -2, 1, 20, 14, -31, 0, 10, 18, 11, -3, -4, 12, 18, 8, -8, -25, -1, -7, 0, 25, 12, 18, 6, -14, 27
    0x1130012, 0xfefdf9fb, 0xe10e1401, 0xb120a00, 0x120cfcfd, 0xffe7f808, 0xc1900f9, 0x1bf20612,
    // -30, -4, 16, -37, 12, 10, -41, 3, 0, -16, 42, -6, 15, 26, 1, 27, -32, -9, -3, 27, 7, 2, -3, -5, 3, -4, 5, -8, 15, 26, -8, 5
    0xdb10fce2, 0x3d70a0c, 0xfa2af000, 0x1b011a0f, 0x1bfdf7e0, 0xfbfd0207, 0xf805fc03, 0x5f81a0f,
    // -4, 7, 9, -22, -28, -26, -9, -5, -5, -14, 2, 1, -12, 1, 11, -10, 28, 14, -43, -99, -63, 1, 19, 3, -13, 30, -44, -118, -21, -48, 96, -3
    0xea0907fc, 0xfbf7e6e4, 0x102f2fb, 0xf60b01f4, 0x9dd50e1c, 0x31301c1, 0x8ad41ef3, 0xfd60d0eb,
    // 8, 9, 16, 24, -21, -20, -2, 1, 1, -10, 10, -8, -1, 15, -10, 4, -6, -17, 12, -10, 1, 10, 2, 3, -3, -11, -16, -6, 9, -1, 18, 5
    0x18100908, 0x1feeceb, 0xf80af601, 0x4f60fff, 0xf60ceffa, 0x3020a01, 0xfaf0f5fd, 0x512ff09,
    // 6, -8, -16, 8, 1, 32, -18, 7, 5, -3, 13, -18, 7, 11, -10, -24, 6, 0, -3, -10, -30, -4, 4, -12, -3, 0, -18, 11, 13, -29, 31, 5
    0x8f0f806, 0x7ee2001, 0xee0dfd05, 0xe8f60b07, 0xf6fd0006, 0xf404fce2, 0xbee00fd, 0x51fe30d,
    // -13, -13, -18, -2, -18, 13, -13, 2, -2, 0, 7, -14, -4, -1, -12, -4, -30, 4, -4, -14, 26, 7, -10, 15, 5, -4, -4, -12, 18, 2, 24, 24
    0xfeeef3f3, 0x2f30dee, 0xf20700fe, 0xfcf4fffc, 0xf2fc04e2, 0xff6071a, 0xf4fcfc05, 0x18180212,
    // 15, 17, -25, 22, -37, -11, 5, -5, -6, 2, 20, -14, -9, -7, 6, -19, 31, 21, 42, 57, -16, -16, 9, -4, -4, 4, -22, 24, -33, -25, -13, 25
    0x16e7110f, 0xfb05f5db, 0xf21402fa, 0xed06f9f7, 0x392a151f, 0xfc09f0f0, 0x18ea04fc, 0x19f3e7df,
    // 13, -20, 54, -75, 127, 64, -16, 18, -1, 11, -39, -60, 54, 23, -38, 33, -4, 8, 20, 20, -3, -11, 4, 12, -8, 8, 0, 20, -12, -19, 16, 1
    0xb536ec0d, 0x12f0407f, 0xc4d90bff, 0x21da1736, 0x141408fc, 0xc04f5fd, 0x140008f8, 0x110edf4,
    // 13, 8, -4, -12, -19, -5, 4, -4, -5, 8, -1, 10, 7, -7, -19, 1, -19, 14, 17, -13, -16, -7, 6, -24, 11, -11, -4, 17, -8, -3, 34, 33
    0xf4fc080d, 0xfc04fbed, 0xaff08fb, 0x1edf907, 0xf3110eed, 0xe806f9f0, 0x11fcf50b, 0x2122fdf8,
    // -16, -23, -6, 19, -1, -1, 0, 12, 5, 12, 10, -11, -3, 17, -4, -5, 3, 0, -4, -3, 6, 2, 8, 1, -6, 7, -9, -7, 12, -11, 3, -10
    0x13fae9f0, 0xc00ffff, 0xf50a0c05, 0xfbfc11fd, 0xfdfc0003, 0x1080206, 0xf9f707fa, 0xf603f50c,
    // -5, 2, -1, -11, -4, 16, 4, 13, -1, 7, -13, 0, 11, 0, -15, -1, 11, 10, 8, 0, 2, -7, 9, 15, -3, 11, -6, -9, -4, -5, 10, 11
    0xf5ff02fb, 0xd0410fc, 0xf307ff, 0xfff1000b, 0x80a0b, 0xf09f902, 0xf7fa0bfd, 0xb0afbfc,
    // 36, 12, 23, 24, 2, 12, 30, -12, -1, 9, -27, 18, -12, -2, -12, 21, -5, -6, 33, -7, -53, -42, -8, -37, 12, -33, 15, 62, -45, 14, 104, -13
    0x18170c24, 0xf41e0c02, 0x12e509ff, 0x15f4fef4, 0xf921fafb, 0xdbf8d6cb, 0x3e0fdf0c, 0xf3680ed3,
    // -12, -10, -15, 11, 32, 11, 6, -2, -2, -8, 8, 24, 6, 10, -21, -12, 10, -9, -3, -30, -4, 4, 2, 1, -1, 6, 1, -5, 5, -15, -17, -16
    0xbf1f6f4, 0xfe060b20, 0x1808f8fe, 0xf4eb0a06, 0xe2fdf70a, 0x10204fc, 0xfb0106ff, 0xf0eff105,
    // -14, 11, 10, -45, -29, -1, 11, 1, 5, -14, -3, 24, -11, -23, 10, 0, -6, -1, 8, -9, 20, 0, -3, 9, -2, -1, -3, -3, 1, 1, -26, -12
    0xd30a0bf2, 0x10bffe3, 0x18fdf205, 0xae9f5, 0xf708fffa, 0x9fd0014, 0xfdfdfffe, 0xf4e60101,
    // 17, 5, 15, 15, 23, 17, 16, 7, 0, -15, -10, 35, -4, -31, 8, 5, 16, -20, 16, -8, -3, 2, 24, -14, 8, -6, -37, 7, -26, -14, 27, -58
    0xf0f0511, 0x7101117, 0x23f6f100, 0x508e1fc, 0xf810ec10, 0xf21802fd, 0x7dbfa08, 0xc61bf2e6,
    // 0, 0, -11, -9, 5, 7, 14, 9, -6, -1, 13, 13, -5, -12, -2, 9, 11, 9, 28, -50, 3, 3, 26, 5, 4, -6, -15, 35, -17, -10, -17, 5
    0xf7f50000, 0x90e0705, 0xd0dfffa, 0x9fef4fb, 0xce1c090b, 0x51a0303, 0x23f1fa04, 0x5eff6ef,
    // -108, 1, -34, -60, -19, 15, 26, -56, 27, -18, 11, 12, -12, 70, -10, -19, -21, -2, -10, 20, -24, -24, -7, 2, 1, -11, 26, 29, 8, 15, -26, -34
    0xc4de0194, 0xc81a0fed, 0xc0bee1b, 0xedf646f4, 0x14f6feeb, 0x2f9e8e8, 0x1d1af501, 0xdee60f08,
    // 11, -6, 7, 4, 5, -13, 8, -4, -6, -6, -1, 7, -2, -5, -9, 7, 3, -2, 29, 45, -28, -21, -9, -17, -1, 5, -11, 3, -5, -2, -1, 20
    0x407fa0b, 0xfc08f305, 0x7fffafa, 0x7f7fbfe, 0x2d1dfe03, 0xeff7ebe4, 0x3f505ff, 0x14fffefb,
    // 5, 16, 4, -11, -12, -18, 11, 17, -8, 12, -5, 4, -7, 1, 1, 16, -24, 3, 6, -12, 21, -4, -20, 4, 4, -9, -25, -1, -8, 3, 19, 4
    0xf5041005, 0x110beef4, 0x4fb0cf8, 0x100101f9, 0xf40603e8, 0x4ecfc15, 0xffe7f704, 0x41303f8,
    // -8, 8, -40, -8, -13, -3, 11, 3, 4, -8, -9, -4, -1, 16, -26, -8, 2, 8, 23, -7, -8, -11, -17, 0, 2, -4, -5, 6, 4, 18, 8, 12
    0xf8d808f8, 0x30bfdf3, 0xfcf7f804, 0xf8e610ff, 0xf9170802, 0xeff5f8, 0x6fbfc02, 0xc081204,
    // 0, -1, -1, 57, -24, -7, -15, 6, 14, -5, 18, 19, -9, 23, -36, -9, 30, -12, -83, -65, -86, 23, 28, 12, 6, 49, -36, -93, 13, -50, 15, -43
    0x39ffff00, 0x6f1f9e8, 0x1312fb0e, 0xf7dc17f7, 0xbfadf41e, 0xc1c17aa, 0xa3dc3106, 0xd50fce0d,
    // -6, -3, 25, -29, 65, 22, -24, 33, -2, 12, 20, 7, 12, -5, -61, 47, 5, -1, 0, 13, 23, -8, 3, -10, -1, -13, 11, 5, 7, -5, 1, -4
    0xe319fdfa, 0x21e81641, 0x7140cfe, 0x2fc3fb0c, 0xd00ff05, 0xf603f817, 0x50bf3ff, 0xfc01fb07,
    // 12, 35, 7, -46, -18, -7, 0, -10, 3, 1, -17, -7, -7, -17, 48, 5, 1, -7, 34, 2, 55, -6, -4, 6, 2, -4, 2, -12, 1, 8, -29, 18
    0xd207230c, 0xf600f9ee, 0xf9ef0103, 0x530eff9, 0x222f901, 0x6fcfa37, 0xf402fc02, 0x12e30801,
    // 19, -8, 0, 22, -2, -26, 7, -7, -8, 2, -21, 12, -6, -11, 3, -3, 5, 10, 3, -29, -1, 17, -3, 16, 9, 8, -42, -12, -4, -14, -10, 17
    0x1600f813, 0xf907e6fe, 0xceb02f8, 0xfd03f5fa, 0xe3030a05, 0x10fd11ff, 0xf4d60809, 0x11f6f2fc,
    // -9, -9, -11, -4, 13, -13, 4, -1, -3, -3, -35, 2, 2, 12, -5, -18, -11, 4, -35, -38, 20, 28, -6, 3, 2, 15, -26, -43, 7, -12, 38, -49
    0xfcf5f7f7, 0xff04f30d, 0x2ddfdfd, 0xeefb0c02, 0xdadd04f5, 0x3fa1c14, 0xd5e60f02, 0xcf26f407,
    // -14, 18, -45, -24, 46, 78, -62, 47, 15, 23, 87, -63, 52, 59, -39, 93, -2, 15, 18, 31, 26, 11, 4, 13, 0, -2, 10, 2, -15, 2, -11, 4
    0xe8d312f2, 0x2fc24e2e, 0xc157170f, 0x5dd93b34, 0x1f120ffe, 0xd040b1a, 0x20afe00, 0x4f502f1,
    // -3, -10, -1, -9, 10, -12, -13, -11, -3, -4, -21, 0, -1, 2, -22, -21, 3, -5, 7, 26, -19, -12, 5, 3, 17, -2, 12, -3, -4, -5, -22, 7
    0xf7fff6fd, 0xf5f3f40a, 0xebfcfd, 0xebea02ff, 0x1a07fb03, 0x305f4ed, 0xfd0cfe11, 0x7eafbfc,
    // -9, -4, -3, -22, -11, -32, 9, -1, -2, 3, 0, -1, 4, -30, 16, -11, -3, -12, 11, -1, 17, -2, -14, 0, -5, 7, -1, -6, 17, 18, 10, 4
    0xeafdfcf7, 0xff09e0f5, 0xff0003fe, 0xf510e204, 0xff0bf4fd, 0xf2fe11, 0xfaff07fb, 0x40a1211,
    // -40, 4, -8, -54, 9, 4, -31, -2, -6, -13, 29, -9, 15, 12, -2, 42, -8, -2, 11, 11, 6, -6, 7, -5, 0, -4, 7, -30, 2, 21, 11, -3
    0xcaf804d8, 0xfee10409, 0xf71df3fa, 0x2afe0c0f, 0xb0bfef8, 0xfb07fa06, 0xe207fc00, 0xfd0b1502,
    // -9, 7, 27, 34, -14, -12, 15, -30, 9, -9, 12, 36, -22, -1, 11, 10, 6, -2, 16, 40, 42, -45, -29, 15, 1, -30, 100, 84, 10, -12, -100, 7
    0x221b07f7, 0xe20ff4f2, 0x240cf709, 0xa0bffea, 0x2810fe06, 0xfe3d32a, 0x5464e201, 0x79cf40a,
    // 4, -6, 5, 24, 31, -6, 32, 22, -2, 4, 23, 16, 17, 2, -52, 9, -2, -21, 5, -9, 19, 3, -9, -1, -5, -7, -6, -13, 14, 2, 14, -4
    0x1805fa04, 0x1620fa1f, 0x101704fe, 0x9cc0211, 0xf705ebfe, 0xfff70313, 0xf3faf9fb, 0xfc0e020e,
    // -9, 2, -3, -32, -22, 8, 7, -17, -7, 3, 0, 4, 2, -8, 16, 9, 12, -9, 5, -9, -9, -5, 1, -9, 1, 9, -1, -13, 5, -2, 17, -9
    0xe0fd02f7, 0xef0708ea, 0x40003f9, 0x910f802, 0xf705f70c, 0xf701fbf7, 0xf3ff0901, 0xf711fe05,
    // -44, -10, 5, -28, 42, 13, -19, 19, -3, -2, -12, -27, 1, 32, 23, -16, -44, 2, 18, 64, -11, -17, -39, 17, 14, 10, 27, 40, 8, 34, -40, 64
    0xe405f6d4, 0x13ed0d2a, 0xe5f4fefd, 0xf0172001, 0x401202d4, 0x11d9eff5, 0x281b0a0e, 0x40d82208,
    // -5, 4, -10, 17, 15, -8, 3, -13, -3, -4, 22, -7, 13, -2, 0, -3, -5, 3, -15, 3, -24, -11, 24, 16, -4, 2, -12, 0, -19, -8, -21, -5
    0x11f604fb, 0xf303f80f, 0xf916fcfd, 0xfd00fe0d, 0x3f103fb, 0x1018f5e8, 0xf402fc, 0xfbebf8ed,
    // 41, 6, -8, 52, -82, -4, -21, 26, 8, 42, -1, -17, 26, 20, -67, 18, 15, 15, -41, -42, -80, -38, 29, -4, -8, 9, -35, 8, -32, -35, 90, -54
    0x34f80629, 0x1aebfcae, 0xefff2a08, 0x12bd141a, 0xd6d70f0f, 0xfc1ddab0, 0x8dd09f8, 0xca5adde0,
    // 14, 19, 11, -44, -19, -4, -10, -17, -6, 0, 6, 13, -1, -33, 28, -2, 27, -9, 9, -32, -9, 34, -1, 5, 1, 7, -20, -24, 14, -27, 1, 38
    0xd40b130e, 0xeff6fced, 0xd0600fa, 0xfe1cdfff, 0xe009f71b, 0x5ff22f7, 0xe8ec0701, 0x2601e50e,
    // -12, -20, -4, 26, 48, 10, -9, 7, 2, -9, 3, -12, -16, 6, -21, -28, 4, -5, 18, 18, 5, -2, 6, 5, 7, -1, -15, 19, -4, -18, 3, 13
    0x1afcecf4, 0x7f70a30, 0xf403f702, 0xe4eb06f0, 0x1212fb04, 0x506fe05, 0x13f1ff07, 0xd03eefc,
    // -10, -2, 5, -6, 29, 18, 8, 11, 0, 2, -25, 14, -14, 1, 4, 4, 0, -6, 4, -3, 6, -10, 2, 8, -7, 15, -18, 7, 5, -10, -8, 17
    0xfa05fef6, 0xb08121d, 0xee70200, 0x40401f2, 0xfd04fa00, 0x802f606, 0x7ee0ff9, 0x11f8f605,
    // 19, 24, 24, 35, 6, 8, 32, -11, 7, 0, -60, 17, -31, -2, 14, 9, -40, 34, 3, 47, -4, 11, 64, -66, 20, -20, -52, -15, -73, 95, 21, -41
    0x23181813, 0xf5200806, 0x11c40007, 0x90efee1, 0x2f0322d8, 0xbe400bfc, 0xf1ccec14, 0xd7155fb7,
    // -16, -1, -17, 16, -12, 16, -13, 0, 0, -5, -15, 0, 0, 21, -5, -2, 8, -12, -15, -12, 4, 3, -9, 7, 0, 2, -12, -7, -5, -16, -19, -7
    0x10effff0, 0xf310f4, 0xf1fb00, 0xfefb1500, 0xf4f1f408, 0x7f70304, 0xf9f40200, 0xf9edf0fb,
    // -4, 4, 0, -6, -2, 23, -2, 10, 1, -4, -12, -5, 3, 3, -22, 27, 4, 3, 5, -11, -25, -1, 6, -4, 3, 8, -2, 10, 10, -11, -5, 11
    0xfa0004fc, 0xafe17fe, 0xfbf4fc01, 0x1bea0303, 0xf5050304, 0xfc06ffe7, 0xafe0803, 0xbfbf50a,
    // 1, -1, -13, 1, -7, 1, 3, -1, -1, 1, 14, -8, -6, 9, 16, -12, -4, -4, -4, 10, -6, -3, -33, -3, 7, -17, 6, 38, 4, 8, 32, 49
    0x1f3ff01, 0xff0301f9, 0xf80e01ff, 0xf41009fa, 0xafcfcfc, 0xfddffdfa, 0x2606ef07, 0x31200804,
    // -12, 1, -6, -6, 9, -3, -13, -14, 3, -7, 8, -23, -4, 24, 3, -4, -22, 6, -9, -40, 27, 4, 35, 2, -3, -2, -24, -35, 5, 2, -2, -13
    0xfafa01f4, 0xf2f3fd09, 0xe908f903, 0xfc0318fc, 0xd8f706ea, 0x223041b, 0xdde8fefd, 0xf3fe0205,
    // -52, 33, 72, -119, -63, -53, -8, 6, 30, -47, -8, 112, -90, -48, 36, -75, 8, 2, 28, -20, 24, -20, 26, 21, -6, 13, -15, -4, 15, -1, -4, 11
    0x894821cc, 0x6f8cbc1, 0x70f8d11e, 0xb524d0a6, 0xec1c0208, 0x151aec18, 0xfcf10dfa, 0xbfcff0f,
    // -6, -3, 0, 31, -27, -13, -12, 11, -5, 4, -7, 14, -5, 18, -9, 8, 4, 1, 7, 50, -50, 18, -20, -22, -6, -2, -25, -6, 11, 14, 20, 64
    0x1f00fdfa, 0xbf4f3e5, 0xef904fb, 0x8f712fb, 0x32070104, 0xeaec12ce, 0xfae7fefa, 0x40140e0b,
    // 3, -5, -3, 11, -36, -5, -4, -7, 6, 2, 5, -15, 4, -4, 17, 17, 0, 1, -20, 10, -9, -11, -17, -6, -4, -3, 31, 0, 13, 9, 3, 5
    0xbfdfb03, 0xf9fcfbdc, 0xf1050206, 0x1111fc04, 0xaec0100, 0xfaeff5f7, 0x1ffdfc, 0x503090d,
    // -23, 8, -5, -3, -22, -8, -28, 6, 3, 8, 21, 15, 12, 21, 4, 46, -7, 8, -2, -10, 3, 5, -4, -2, 2, -6, 15, -11, -5, 13, 0, 17
    0xfdfb08e9, 0x6e4f8ea, 0xf150803, 0x2e04150c, 0xf6fe08f9, 0xfefc0503, 0xf50ffa02, 0x11000dfb,
    // -20, 6, -15, -27, 44, 10, 12, 7, 8, -3, 2, 3, 7, -5, 20, -28, 16, -44, 38, 36, 115, 25, 32, -4, 6, 34, -26, -68, 6, 2, -45, -47
    0xe5f106ec, 0x70c0a2c, 0x302fd08, 0xe414fb07, 0x2426d410, 0xfc201973, 0xbce62206, 0xd1d30206,
    // -15, 8, -15, -1, 24, -3, 11, 17, -5, -4, -11, 22, 6, 6, -15, -13, -7, -7, -1, 6, -12, 1, -16, 12, -1, -7, 2, 1, -1, 2, -4, 2
    0xfff108f1, 0x110bfd18, 0x16f5fcfb, 0xf3f10606, 0x6fff9f9, 0xcf001f4, 0x102f9ff, 0x2fc02ff,
    // -6, 20, -3, 15, -67, 11, -2, -11, -2, 2, -23, -5, -2, 15, 4, 60, 0, 4, 7, -9, -35, 1, -4, -4, 3, 0, 1, 9, -3, -12, -2, -4
    0xffd14fa, 0xf5fe0bbd, 0xfbe902fe, 0x3c040ffe, 0xf7070400, 0xfcfc01dd, 0x9010003, 0xfcfef4fd,
    // -32, -26, -17, -19, -9, -11, -1, -9, 6, -7, 6, -13, 18, 5, -11, -18, 4, -11, -7, 56, 5, -5, -12, -17, -8, -8, 11, 2, -6, -11, 15, 11
    0xedefe6e0, 0xf7fff5f7, 0xf306f906, 0xeef50512, 0x38f9f504, 0xeff4fb05, 0x20bf8f8, 0xb0ff5fa,
    // 7, 1, -1, -16, -2, -12, 7, -12, 0, -8, -8, 11, 4, -7, -19, 5, -2, -10, -7, -4, 51, -1, -4, 1, -4, -17, 24, -4, 9, 12, -4, -1
    0xf0ff0107, 0xf407f4fe, 0xbf8f800, 0x5edf904, 0xfcf9f6fe, 0x1fcff33, 0xfc18effc, 0xfffc0c09,
    // 23, 66, 49, 117, -26, -16, -12, -39, 9, -11, 33, 4, -37, 5, 85, 44, -24, 1, 14, -45, 42, 5, 11, 13, 1, -15, 1, 4, -3, -2, 1, -13
    0x75314217, 0xd9f4f0e6, 0x421f509, 0x2c5505db, 0xd30e01e8, 0xd0b052a, 0x401f101, 0xf301fefd,
    // -1, -13, -3, 21, 0, -16, 0, -3, -4, 0, 6, 9, 15, -1, -5, -16, 9, 17, 17, -16, -35, -10, 9, -17, -1, -8, -10, 12, -26, -6, 44, 33
    0x15fdf3ff, 0xfd00f000, 0x90600fc, 0xf0fbff0f, 0xf0111109, 0xef09f6dd, 0xcf6f8ff, 0x212cfae6,
    // -9, -29, 27, 11, 13, 7, 0, 11, 7, 4, 2, -4, 5, 1, -26, 0, 13, 2, -7, 4, -15, -1, 12, 1, 0, -2, -2, -1, -6, -13, 7, -9
    0xb1be3f7, 0xb00070d, 0xfc020407, 0xe60105, 0x4f9020d, 0x10cfff1, 0xfffefe00, 0xf707f3fa,
    // -1, 14, -8, -15, 0, 3, 7, 1, 6, 5, -10, -16, 17, -16, 2, 2, -7, 8, -6, -6, 2, 4, 5, 0, 0, -8, -2, -3, -7, 5, 0, -8
    0xf1f80eff, 0x1070300, 0xf0f60506, 0x202f011, 0xfafa08f9, 0x50402, 0xfdfef800, 0xf80005f9,
    // 13, 15, -1, -33, -10, 4, 17, 7, -5, 10, -20, -12, -17, -20, -23, 0, 47, -20, 46, 127, -43, -15, -6, -6, 9, 20, -26, 15, -19, -2, -13, 50
    0xdfff0f0d, 0x71104f6, 0xf4ec0afb, 0xe9ecef, 0x7f2eec2f, 0xfafaf1d5, 0xfe61409, 0x32f3feed,
    // 26, -7, 15, 18, 16, -21, -5, 3, -3, 4, 17, 28, -17, -12, -21, 11, -7, -6, 3, -13, 16, 0, -1, 0, -1, -1, -11, 3, -1, 12, 0, -13
    0x120ff91a, 0x3fbeb10, 0x1c1104fd, 0xbebf4ef, 0xf303faf9, 0xff0010, 0x3f5ffff, 0xf3000cff,
    // -13, 8, -21, 16, 24, 0, -7, -7, 1, -16, 4, 6, 4, -4, -13, -8, -7, 7, -15, -10, 11, -12, 3, 5, -1, -8, 7, 0, -1, -5, 17, -27
    0x10eb08f3, 0xf9f90018, 0x604f001, 0xf8f3fc04, 0xf6f107f9, 0x503f40b, 0x7f8ff, 0xe511fbff,
};
static const uint embedded_decoder2_ResidualBlock_1_body_conv_dw_bias_dwords[8] = {
    // 0.011024, -0.03046, -0.05643, -0.005493, 0.02737, -0.007126, 0.01105, 0.0226, -0.01363, -0.003801, -0.014534, -0.007507, 0.02214, 0.04825, -0.06058, -0.02687
    0xa7cc21a5, 0x9da0ab39, 0x9f4c2702, 0x25c921a8, 0x9bc9a2fb, 0x9fb0a371, 0x2a2d25ab, 0xa6e1abc1,
};
static const uint embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -72, -12, -6, 44, -16, -74, 17, -8, -31, -26, 4, -6, 52, -17, -51, 46, -16, 0, -27, -66, 4, -49, 27, 3, 7, 85, -35, -73, 13, 104, -16, 9
    0x2cfaf4b8, 0xf811b6f0, 0xfa04e6e1, 0x2ecdef34, 0xbee500f0, 0x31bcf04, 0xb7dd5507, 0x9f0680d,
    // 28, 31, 52, 16, 127, 40, -29, 58, 5, 92, 21, 39, 80, 80, 37, 10, -15, 24, 8, 66, -44, -53, -24, 78, 15, 25, 21, -57, -52, -6, 15, 53
    0x10341f1c, 0x3ae3287f, 0x27155c05, 0xa255050, 0x420818f1, 0x4ee8cbd4, 0xc715190f, 0x350ffacc,
    // 31, 3, -23, 3, 15, -95, -9, -37, -19, -43, 21, -5, -13, -20, 15, 18, -33, 14, 31, 32, 26, 105, 17, 79, 15, -20, -48, 13, -3, -73, -19, -47
    0x3e9031f, 0xdbf7a10f, 0xfb15d5ed, 0x120fecf3, 0x201f0edf, 0x4f11691a, 0xdd0ec0f, 0xd1edb7fd,
    // -47, 72, -23, 14, 8, -68, -11, 32, 67, -35, 4, 72, -21, 81, 13, -12, 17, -55, -36, 95, 79, 4, 20, -38, 43, -21, -6, 29, 22, 8, -30, -62
    0xee948d1, 0x20f5bc08, 0x4804dd43, 0xf40d51eb, 0x5fdcc911, 0xda14044f, 0x1dfaeb2b, 0xc2e20816,
    // 63, 31, -17, 25, -55, 89, -37, -10, -39, 96, 59, 16, -77, -31, 8, 110, -39, -93, -11, -26, 65, 39, 3, 80, -81, -81, 91, 20, -49, 33, 64, -74
    0x19ef1f3f, 0xf6db59c9, 0x103b60d9, 0x6e08e1b3, 0xe6f5a3d9, 0x50032741, 0x145bafaf, 0xb64021cf,
    // 32, -26, 56, 26, -48, 102, 3, 68, -39, -41, -53, 34, 50, -37, 42, 53, -41, -24, 20, 53, -47, 9, -46, -30, 25, 8, -5, 24, 10, -24, 6, -85
    0x1a38e620, 0x440366d0, 0x22cbd7d9, 0x352adb32, 0x3514e8d7, 0xe2d209d1, 0x18fb0819, 0xab06e80a,
    // -36, 45, -1, 22, -68, 32, 4, -32, -22, 2, 31, -35, 84, 8, 40, 41, -56, 2, -31, -71, 46, 23, -38, 71, -68, -1, 82, -58, -5, -55, 62, -99
    0x16ff2ddc, 0xe00420bc, 0xdd1f02ea, 0x29280854, 0xb9e102c8, 0x47da172e, 0xc652ffbc, 0x9d3ec9fb,
    // 52, -18, -65, -10, -27, -77, -22, 44, -18, -17, -16, 22, -4, 9, -21, 19, -10, 10, -42, -32, -77, 59, 108, -21, -27, 37, 11, 85, 43, -57, -8, -63
    0xf6bfee34, 0x2ceab3e5, 0x16f0efee, 0x13eb09fc, 0xe0d60af6, 0xeb6c3bb3, 0x550b25e5, 0xc1f8c72b,
    // -36, 36, -8, -14, 74, -13, -1, 20, 27, 73, -14, -12, -47, 6, -64, -78, 66, 37, -7, 4, -56, 59, -15, 47, -14, 32, -79, -17, 30, -50, 40, -31
    0xf2f824dc, 0x14fff34a, 0xf4f2491b, 0xb2c006d1, 0x4f92542, 0x2ff13bc8, 0xefb120f2, 0xe128ce1e,
    // -17, 20, -16, -10, 25, 63, 13, 2, 90, -25, 36, 3, 4, -7, 30, 101, -15, -76, -8, -72, 10, -88, 21, -9, 56, 99, -29, 33, -4, 15, 21, 17
    0xf6f014ef, 0x20d3f19, 0x324e75a, 0x651ef904, 0xb8f8b4f1, 0xf715a80a, 0x21e36338, 0x11150ffc,
    // 22, -22, -26, -55, -89, -34, -27, -32, -4, -1, 40, -21, -13, 28, 43, 20, -9, 42, -45, 68, 37, 50, 35, -65, 67, 28, 4, -51, 4, -15, -74, -11
    0xc9e6ea16, 0xe0e5dea7, 0xeb28fffc, 0x142b1cf3, 0x44d32af7, 0xbf233225, 0xcd041c43, 0xf5b6f104,
    // 3, -52, 55, -69, 49, -55, -84, -21, 73, -15, 16, -57, -82, 91, -36, 79, 48, 13, 77, 53, -36, -8, 27, 21, -38, -64, -22, 59, -21, 77, -7, 65
    0xbb37cc03, 0xebacc931, 0xc710f149, 0x4fdc5bae, 0x354d0d30, 0x151bf8dc, 0x3beac0da, 0x41f94deb,
    // -35, -4, 33, 119, 70, -25, -37, -56, -21, -23, -45, -62, -42, -7, 118, -4, -16, -57, 80, -63, 40, -46, 8, -5, 57, -6, 6, 9, -117, 33, -4, 89
    0x7721fcdd, 0xc8dbe746, 0xc2d3e9eb, 0xfc76f9d6, 0xc150c7f0, 0xfb08d228, 0x906fa39, 0x59fc218b,
    // 29, 0, -10, 59, 69, -35, 44, 51, -8, 10, -33, -8, -39, 7, -29, -36, 0, -10, -47, -6, -75, -26, 2, -11, 29, -67, -35, -7, -46, -118, -20, -1
    0x3bf6001d, 0x332cdd45, 0xf8df0af8, 0xdce307d9, 0xfad1f600, 0xf502e6b5, 0xf9ddbd1d, 0xffec8ad2,
    // 31, -34, -3, 40, -24, 52, -65, -3, -75, 48, 39, 94, -46, 25, -7, 127, -9, 9, -82, -76, 9, 95, 9, -92, -51, 13, -42, 51, 11, 16, 78, 103
    0x28fdde1f, 0xfdbf34e8, 0x5e2730b5, 0x7ff919d2, 0xb4ae09f7, 0xa4095f09, 0x33d60dcd, 0x674e100b,
    // -3, 57, -29, -103, -7, 83, 4, -67, -29, 55, -16, -17, 4, -84, 36, 111, -6, 55, -35, -19, -7, 14, 20, -39, -28, 25, -6, 7, 22, 10, 6, -75
    0x99e339fd, 0xbd0453f9, 0xeff037e3, 0x6f24ac04, 0xeddd37fa, 0xd9140ef9, 0x7fa19e4, 0xb5060a16,
};
static const uint embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords[16] = {
    // -0.03482, -0.012024, -0.007656, -0.01295, 0.05447, 0.00381, 0.0005436, 0.001931, 0.01749, -0.0477, -0.005207, -0.0341, 0.000757, -0.00822, -0.05304, -0.0959
    0xa228a875, 0xa2a19fd7, 0x1bce2af9, 0x17e91074, 0xaa1b247a, 0xa85d9d55, 0xa0351234, 0xae23aaca,
    // 0.00894, 0.007744, 0.0321, -0.04584, 0.007595, -0.01485, 0.0159, -0.0003378, -0.3606, 0.0629, 0.00509, 0.03528, -0.02621, -0.03026, 0.002483, -0.0185
    0x1fee2094, 0xa9de281c, 0xa39a1fc7, 0x8d892412, 0x2c07b5c5, 0x28841d36, 0xa7bfa6b6, 0xa4bc1916,
};
static const uint embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 68, 35, -66, 3, -56, -104, -10, -1, -42, 42, -39, -19, -66, -35, 33, 108, 70, 74, -50, 35, -49, -11, 20, -69, 67, -63, -43, 28, 64, 102, -110, -56
    0x3be2344, 0xfff698c8, 0xedd92ad6, 0x6c21ddbe, 0x23ce4a46, 0xbb14f5cf, 0x1cd5c143, 0xc8926640,
    // 8, 47, -45, 6, -53, -16, 5, -72, -42, 92, 21, -53, -11, -97, 75, -9, 32, -16, 29, -58, -30, 67, -5, -50, -1, -6, -2, -24, 6, -16, 18, 3
    0x6d32f08, 0xb805f0cb, 0xcb155cd6, 0xf74b9ff5, 0xc61df020, 0xcefb43e2, 0xe8fefaff, 0x312f006,
    // 51, -29, -128, 45, 11, 71, -17, -8, 6, 88, -68, 9, 69, -77, 40, -49, -37, 75, -93, 51, 37, 18, -41, -67, -24, 49, -3, 96, -8, -60, 45, -19
    0x2d80e333, 0xf8ef470b, 0x9bc5806, 0xcf28b345, 0x33a34bdb, 0xbdd71225, 0x60fd31e8, 0xed2dc4f8,
    // -17, 103, 39, -33, -39, 95, 36, 66, 66, 42, 12, 62, -15, -27, -61, 36, -1, -46, -18, -98, -27, -15, 90, 13, 19, -115, 8, -23, -74, -51, 43, -32
    0xdf2767ef, 0x42245fd9, 0x3e0c2a42, 0x24c3e5f1, 0x9eeed2ff, 0xd5af1e5, 0xe9088d13, 0xe02bcdb6,
    // -16, -42, -22, 29, 57, -22, -25, -5, -1, -7, 39, -32, 46, 2, 63, 35, -56, -41, -40, 39, -10, -1, 21, 2, 107, -39, 1, 4, 2, -53, 55, -41
    0x1dead6f0, 0xfbe7ea39, 0xe027f9ff, 0x233f022e, 0x27d8d7c8, 0x215fff6, 0x401d96b, 0xd737cb02,
    // 73, 20, -77, 9, 94, -25, -80, -10, 57, -12, 65, 10, -37, 3, 2, 22, 12, 2, 15, -21, -13, 1, 10, -11, 118, -55, 25, 94, -88, -66, 104, 45
    0x9b31449, 0xf6b0e75e, 0xa41f439, 0x160203db, 0xeb0f020c, 0xf50a01f3, 0x5e19c976, 0x2d68bea8,
    // 0, 11, 5, -12, -7, -26, -2, -3, 3, -10, 0, 0, 16, 14, 21, -13, 12, 16, -15, 9, 25, 10, 1, -2, 14, 7, -30, -6, -3, -7, 11, 13
    0xf4050b00, 0xfdfee6f9, 0xf603, 0xf3150e10, 0x9f1100c, 0xfe010a19, 0xfae2070e, 0xd0bf9fd,
    // 62, 22, -1, -17, 15, -22, -46, 34, 8, -4, -6, -61, 8, 16, 11, 5, -13, 10, 7, 3, -5, 0, 18, -5, -13, 8, 19, 2, -6, 19, -22, -68
    0xefff163e, 0x22d2ea0f, 0xc3fafc08, 0x50b1008, 0x3070af3, 0xfb1200fb, 0x21308f3, 0xbcea13fa,
    // 17, -4, -2, -31, -13, -5, 31, 7, 19, 6, -14, 6, 28, 19, 16, -19, -19, 27, 13, 11, -3, 3, -6, 12, 10, 21, 35, -8, -7, -21, 21, 16
    0xe1fefc11, 0x71ffbf3, 0x6f20613, 0xed10131c, 0xb0d1bed, 0xcfa03fd, 0xf823150a, 0x1015ebf9,
    // 20, 9, 0, -78, 2, -21, -23, 7, -4, 6, 3, -7, 1, -4, 25, -33, 11, 21, -8, 4, -24, 5, -20, -15, -86, 19, -41, 12, 16, -33, 17, 76
    0xb2000914, 0x7e9eb02, 0xf90306fc, 0xdf19fc01, 0x4f8150b, 0xf1ec05e8, 0xcd713aa, 0x4c11df10,
    // 28, 21, 17, 8, 40, -43, -29, -46, -108, 36, 80, -38, 2, -19, -25, -18, -47, -39, -22, -22, -88, 17, 0, 31, 4, -9, 45, -65, 125, -7, 19, 44
    0x811151c, 0xd2e3d528, 0xda502494, 0xeee7ed02, 0xeaead9d1, 0x1f0011a8, 0xbf2df704, 0x2c13f97d,
    // 8, 0, -4, -39, 31, 78, 16, -46, -22, 23, -60, 84, 6, -22, -20, -26, -29, -7, -100, 3, 79, 21, 54, 29, -3, -6, 68, 16, 53, 20, -42, 3
    0xd9fc0008, 0xd2104e1f, 0x54c417ea, 0xe6ecea06, 0x39cf9e3, 0x1d36154f, 0x1044fafd, 0x3d61435,
    // 22, -65, 10, -41, 16, 43, 23, 15, -9, 26, -6, 5, 48, -13, 26, 38, -78, 78, 81, 64, -82, 4, 31, -77, 28, -50, 53, -15, 20, 59, -65, -71
    0xd70abf16, 0xf172b10, 0x5fa1af7, 0x261af330, 0x40514eb2, 0xb31f04ae, 0xf135ce1c, 0xb9bf3b14,
    // -10, 80, -10, 57, -71, 32, -19, 94, -32, 1, -44, -42, 83, -15, -75, -38, -63, 16, -13, -71, -39, -73, -20, -23, -3, 27, -1, 37, 48, -73, 84, 6
    0x39f650f6, 0x5eed20b9, 0xd6d401e0, 0xdab5f153, 0xb9f310c1, 0xe9ecb7d9, 0x25ff1bfd, 0x654b730,
    // -5, -33, 36, -11, -4, -31, 28, -21, -104, -21, -100, -11, -49, 20, -22, 47, 40, 63, -12, 61, 41, -14, -6, 44, 98, 18, -1, -45, 91, -78, 93, -27
    0xf524dffb, 0xeb1ce1fc, 0xf59ceb98, 0x2fea14cf, 0x3df43f28, 0x2cfaf229, 0xd3ff1262, 0xe55db25b,
    // 12, 35, -55, -49, 23, -4, 11, 2, -20, -38, 23, 44, -19, 54, 11, 24, 7, -9, -19, -14, 13, -30, 31, 21, -10, -47, -8, 118, 51, 26, -51, -32
    0xcfc9230c, 0x20bfc17, 0x2c17daec, 0x180b36ed, 0xf2edf707, 0x151fe20d, 0x76f8d1f6, 0xe0cd1a33,
};
static const uint embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords[8] = {
    // 0.0405, -0.1559, 0.1332, 0.001455, 0.05228, -0.06274, 0.000705, 0.00764, 0.03073, 0.1004, 0.08563, -0.1021, 0.03668, -0.03836, -0.01953, -0.1469
    0xb0fd292f, 0x15f63043, 0xac042ab1, 0x1fd311c6, 0x2e6d27de, 0xae892d7b, 0xa8e928b2, 0xb0b3a500,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass12(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(3840, 2160, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(3840, 2160, 16), // threadGroupSliceSize
        uint3(3840, 2160, 16), // storageSize
        uint3(16, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        199065600, // threadGroupStorageByteOffset
        0.01930568739771843, storage_fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005223544780164957, storage_embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_1_body_conv_dw_bias = { embedded_decoder2_ResidualBlock_1_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_1_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_1_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005200282670557499, storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias = { embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005243942607194185, storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias = { embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias };
    
    // fused_quantized_NHWC_/decoder2/ResidualBlock_2/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_24 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_24 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 16);
    const uint3 groupSize_slice_24 = uint3(64, 1, 16);
    const uint3 storageSize_slice_24 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_24 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_24 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_24 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_24 = dot(groupStart_slice_24, tensorByteStrides_slice_24);
    const float quantizationScale_slice_24 = 0.02520766295492649;
    const RWBufferStorage storage_slice_24 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_24 = { logicalSize_slice_24, groupStart_slice_24, groupSize_slice_24, storageSize_slice_24, tensorByteStrides_slice_24, paddingBegin_slice_24, paddingEnd_slice_24, threadGroupByteOffsetInTensor_slice_24 + 0, quantizationScale_slice_24, storage_slice_24 };
    // ConvNextBlock (16, 2160, 3840), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,) -> (16, 2160, 3840)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    ConvNextBlock(38.6760638240777, 0.025855785235762596, 30.490045247429702, 0.032797589898109436, fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_1_body_conv_dw_bias, embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias, embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias, slice_24, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_12
#ifdef MLSR_PASS_12_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass12_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/decoder2/ResidualBlock_2/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_25 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_25 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_25 = uint3(32, 1, 16);
    const uint3 storageSize_slice_25 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_25 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_25 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_25 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_25 = dot(groupStart_slice_25, tensorByteStrides_slice_25);
    const float quantizationScale_slice_25 = 0.02520766295492649;
    const RWBufferStorage storage_slice_25 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_25 = { logicalSize_slice_25, groupStart_slice_25, groupSize_slice_25, storageSize_slice_25, tensorByteStrides_slice_25, paddingBegin_slice_25, paddingEnd_slice_25, threadGroupByteOffsetInTensor_slice_25 + 0, quantizationScale_slice_25, storage_slice_25 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_25, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_12_POST


#ifdef MLSR_PASS_13
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/float16_NHWC/Fused/CNB_CT2D.hlsli"

static const uint embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 18, -2, 12, 7, 15, -2, -7, -11, -15, 27, -15, -13, 8, 14, -10, -22, -10, 0, 6, 12, -10, -2, -2, 2, 9, 21, 15, 27, 40, -10, 38, 7
    0x70cfe12, 0xf5f9fe0f, 0xf3f11bf1, 0xeaf60e08, 0xc0600f6, 0x2fefef6, 0x1b0f1509, 0x726f628,
    // 4, -7, 17, 15, -22, -4, 5, -7, 33, -12, -4, -4, 17, -20, 7, -13, 34, 26, 4, -24, -16, -6, 14, -25, -32, -19, -17, 0, -10, 13, -50, -17
    0xf11f904, 0xf905fcea, 0xfcfcf421, 0xf307ec11, 0xe8041a22, 0xe70efaf0, 0xefede0, 0xefce0df6,
    // 94, 85, 40, 102, -27, 3, -46, 7, -19, -40, 0, 47, -15, -32, 26, 10, -11, -1, 16, 53, -26, 0, 21, 19, 28, 9, -29, 39, -4, -19, -18, -7
    0x6628555e, 0x7d203e5, 0x2f00d8ed, 0xa1ae0f1, 0x3510fff5, 0x131500e6, 0x27e3091c, 0xf9eeedfc,
    // 20, -1, -2, 4, -21, 2, -2, 9, -16, 18, -7, -1, 14, 7, -1, -7, 20, 12, 17, 46, -7, -3, -11, -12, -11, -25, -20, 5, 13, -7, 28, -17
    0x4feff14, 0x9fe02eb, 0xfff912f0, 0xf9ff070e, 0x2e110c14, 0xf4f5fdf9, 0x5ece7f5, 0xef1cf90d,
    // -8, -4, 23, -9, -2, -15, -10, -14, 12, -11, -17, 3, 5, -8, 6, -26, 12, 1, 3, 20, 24, -10, 62, -45, 34, -7, -15, -4, -14, -12, 18, -7
    0xf717fcf8, 0xf2f6f1fe, 0x3eff50c, 0xe606f805, 0x1403010c, 0xd33ef618, 0xfcf1f922, 0xf912f4f2,
    // -6, -1, 38, 8, -36, -30, 9, -21, -56, 39, 8, -24, 3, 7, 19, 16, 21, -1, 10, 9, 5, -13, -24, 1, 11, 16, 7, -6, 4, 6, -2, 4
    0x826fffa, 0xeb09e2dc, 0xe80827c8, 0x10130703, 0x90aff15, 0x1e8f305, 0xfa07100b, 0x4fe0604,
    // 22, 3, 5, 30, -20, 41, 69, -29, 37, 14, -9, 10, 22, 14, -20, 18, 83, 9, -8, -39, -31, -70, -15, 66, -54, -8, -4, 41, 57, 34, -44, 28
    0x1e050316, 0xe34529ec, 0xaf70e25, 0x12ec0e16, 0xd9f80953, 0x42f1bae1, 0x29fcf8ca, 0x1cd42239,
    // 43, -4, -47, 51, 39, 25, -26, -18, 20, 15, 28, 7, 9, 27, -57, -7, 9, 3, 10, 19, -17, -6, -10, 0, 14, -9, -3, -13, 1, -3, 3, 9
    0x33d1fc2b, 0xeee61927, 0x71c0f14, 0xf9c71b09, 0x130a0309, 0xf6faef, 0xf3fdf70e, 0x903fd01,
    // -8, -18, 23, -5, -8, -38, 18, -7, -30, 54, -4, -7, -9, 8, 11, 5, 17, -9, -6, 3, 26, 10, -13, -16, -1, 5, 5, 3, -2, 16, -17, -4
    0xfb17eef8, 0xf912daf8, 0xf9fc36e2, 0x50b08f7, 0x3faf711, 0xf0f30a1a, 0x30505ff, 0xfcef10fe,
    // -1, 2, 16, 13, -13, -22, 13, 5, -24, -29, -14, -3, 1, 8, 12, 1, 17, 3, 17, -14, -12, -16, 7, 9, -26, -26, -6, -20, -13, 3, -17, 0
    0xd1002ff, 0x50deaf3, 0xfdf2e3e8, 0x10c0801, 0xf2110311, 0x907f0f4, 0xecfae6e6, 0xef03f3,
    // -4, -2, 12, 6, -2, -16, 15, 12, -19, -23, -3, -5, -8, 4, 12, 8, 11, 4, 1, -2, 6, -3, 22, 15, -31, -49, 2, -28, -5, 4, -33, -15
    0x60cfefc, 0xc0ff0fe, 0xfbfde9ed, 0x80c04f8, 0xfe01040b, 0xf16fd06, 0xe402cfe1, 0xf1df04fb,
    // -26, -21, 64, -19, 36, -3, -15, -2, 3, -27, 33, -46, -43, -2, 10, -62, 18, 8, -7, 16, 28, 4, -2, 17, -49, -37, 14, -30, -5, -1, -16, -4
    0xed40ebe6, 0xfef1fd24, 0xd221e503, 0xc20afed5, 0x10f90812, 0x11fe041c, 0xe20edbcf, 0xfcf0fffb,
    // -11, 2, 5, 5, 17, -4, 25, 4, -14, -34, -4, -8, 7, 7, 12, 9, 11, 4, 15, -2, 38, -4, 13, 9, -23, -44, 9, -25, 3, 5, 7, 6
    0x50502f5, 0x419fc11, 0xf8fcdef2, 0x90c0707, 0xfe0f040b, 0x90dfc26, 0xe709d4e9, 0x6070503,
    // 2, 11, 7, 15, 29, -4, 20, 20, -25, -34, 1, -5, 6, 12, 7, 1, 0, 0, -11, -1, -14, 2, 29, -8, 4, 20, -7, -4, -9, -12, 17, 7
    0xf070b02, 0x1414fc1d, 0xfb01dee7, 0x1070c06, 0xfff50000, 0xf81d02f2, 0xfcf91404, 0x711f4f7,
    // -17, -14, 5, -12, -21, -5, -10, 0, 0, -55, -11, 6, -19, -20, 21, -26, 0, -3, 2, -2, -3, -4, -22, -8, -2, 25, -5, -8, 0, -5, 5, -1
    0xf405f2ef, 0xf6fbeb, 0x6f5c900, 0xe615eced, 0xfe02fd00, 0xf8eafcfd, 0xf8fb19fe, 0xff05fb00,
    // -3, 18, -25, 25, -8, 4, 24, -1, -7, 6, -24, -16, -11, 14, 3, 12, 3, -12, 11, 2, 3, 13, -40, 4, 8, -117, -21, -1, -55, 1, 99, -37
    0x19e712fd, 0xff1804f8, 0xf0e806f9, 0xc030ef5, 0x20bf403, 0x4d80d03, 0xffeb8b08, 0xdb6301c9,
    // 10, 5, -31, 32, 56, 8, -33, -9, -8, -26, 0, -16, 23, -3, -8, 35, 3, 5, -11, -1, -11, -13, 3, 8, -6, 29, -21, -4, -7, 6, -2, 10
    0x20e1050a, 0xf7df0838, 0xf000e6f8, 0x23f8fd17, 0xfff50503, 0x803f3f5, 0xfceb1dfa, 0xafe06f9,
    // -20, -10, 16, -30, -31, -6, -3, -8, 13, -26, -18, 5, -12, -11, 21, -30, -4, -3, -5, 4, -17, -5, -3, -8, 6, 10, -4, -5, 0, -3, -4, 21
    0xe210f6ec, 0xf8fdfae1, 0x5eee60d, 0xe215f5f4, 0x4fbfdfc, 0xf8fdfbef, 0xfbfc0a06, 0x15fcfd00,
    // -20, 3, 8, 2, -16, 25, -77, 50, -13, 6, 8, -3, 24, 6, 6, -12, 0, 27, -8, -31, 23, 27, -40, 16, 69, 3, 0, 64, 23, -23, -6, -15
    0x20803ec, 0x32b319f0, 0xfd0806f3, 0xf4060618, 0xe1f81b00, 0x10d81b17, 0x40000345, 0xf1fae917,
    // 12, -1, -1, 11, -12, -1, 29, -8, -24, -19, 20, 22, 12, 8, -12, -30, -5, 4, 10, 23, 0, -27, -33, 39, 14, 16, -1, 15, 15, -42, -14, -5
    0xbffff0c, 0xf81dfff4, 0x1614ede8, 0xe2f4080c, 0x170a04fb, 0x27dfe500, 0xfff100e, 0xfbf2d60f,
    // -19, 29, 42, 4, 2, 9, 12, -53, 25, 11, -69, 70, 77, -52, 25, 8, 8, 5, -1, 42, 28, 3, -9, 19, -48, 20, 5, 9, 1, -17, -32, -13
    0x42a1ded, 0xcb0c0902, 0x46bb0b19, 0x819cc4d, 0x2aff0508, 0x13f7031c, 0x90514d0, 0xf3e0ef01,
    // 5, 8, -2, 9, -4, 25, -4, 1, 20, -16, 24, 40, 24, -9, -19, -14, -7, 2, 0, 1, -9, 21, -10, -16, 36, 14, 3, 41, 21, -23, -9, -10
    0x9fe0805, 0x1fc19fc, 0x2818f014, 0xf2edf718, 0x10002f9, 0xf0f615f7, 0x29030e24, 0xf6f7e915,
    // 14, -13, 5, 17, 8, -18, -8, 19, -17, 13, 6, 18, -17, 7, -18, -34, 14, -5, -1, 4, -9, -13, 4, -4, -6, -16, 6, 8, -7, 0, 20, 5
    0x1105f30e, 0x13f8ee08, 0x12060def, 0xdeee07ef, 0x4fffb0e, 0xfc04f3f7, 0x806f0fa, 0x51400f9,
    // -2, -19, 0, -14, -56, -13, 23, -3, -7, -20, -36, 2, -11, 7, -26, 12, -2, 3, 5, 0, -20, -5, 10, 1, 5, -43, -24, 8, -18, -6, 29, 0
    0xf200edfe, 0xfd17f3c8, 0x2dcecf9, 0xce607f5, 0x503fe, 0x10afbec, 0x8e8d505, 0x1dfaee,
    // 8, 34, -23, 27, 59, 10, 22, -17, -16, 68, -21, -21, -14, 0, 60, 9, -46, 4, -12, 93, -1, 31, 47, -16, 11, 127, -72, 10, -1, 3, 46, 34
    0x1be92208, 0xef160a3b, 0xebeb44f0, 0x93c00f2, 0x5df404d2, 0xf02f1fff, 0xab87f0b, 0x222e03ff,
    // -6, 4, -11, 29, 48, -4, -9, 1, 5, -43, -9, 17, 32, -17, 46, 19, 21, -9, 1, 12, -6, -10, -20, 11, -16, 4, -16, -23, 0, -1, 17, 3
    0x1df504fa, 0x1f7fc30, 0x11f7d505, 0x132eef20, 0xc01f715, 0xbecf6fa, 0xe9f004f0, 0x311ff00,
    // -8, -8, 2, -30, -75, -21, 19, -6, -8, 76, -23, -14, -16, 27, -42, 3, 0, -1, 0, 0, -14, -5, -10, -1, 0, -19, -22, 8, -4, -5, 10, -1
    0xe202f8f8, 0xfa13ebb5, 0xf2e94cf8, 0x3d61bf0, 0xff00, 0xfff6fbf2, 0x8eaed00, 0xff0afbfc,
    // 14, -2, -6, 0, 17, -14, 21, -41, -2, 0, 4, 19, -24, 0, 3, -2, -26, -3, 2, 15, -4, -2, -7, -13, -31, -12, 17, -19, -7, -10, 12, 1
    0xfafe0e, 0xd715f211, 0x130400fe, 0xfe0300e8, 0xf02fde6, 0xf3f9fefc, 0xed11f4e1, 0x10cf6f9,
    // -3, 13, 4, 1, 0, -4, -12, 1, 16, -3, -1, -13, 8, -14, -7, 13, 40, 14, -2, -37, -25, -9, 10, -42, -31, -25, -7, 34, -3, 15, -7, 19
    0x1040dfd, 0x1f4fc00, 0xf3fffd10, 0xdf9f208, 0xdbfe0e28, 0xd60af7e7, 0x22f9e7e1, 0x13f90ffd,
    // -58, -70, 68, -8, -8, -33, -9, 33, 33, 13, -2, 72, 18, 67, -100, -78, -7, 3, 1, -18, -33, 1, 17, -5, 36, -15, -8, 4, 19, 6, -17, -1
    0xf844bac6, 0x21f7dff8, 0x48fe0d21, 0xb29c4312, 0xee0103f9, 0xfb1101df, 0x4f8f124, 0xffef0613,
    // 17, -4, 7, 14, -15, -8, -17, 0, -10, 3, 16, 10, -7, 5, 2, 3, -14, 16, 19, 27, 1, -2, -3, -5, -6, -25, 12, 17, 1, -19, -4, 9
    0xe07fc11, 0xeff8f1, 0xa1003f6, 0x30205f9, 0x1b1310f2, 0xfbfdfe01, 0x110ce7fa, 0x9fced01,
    // -11, 3, -4, -24, -8, 15, -8, -25, 14, -5, -6, 10, 10, -7, 1, 9, 10, -7, -9, 4, 2, -3, 1, -2, 1, 20, -7, -8, 0, 8, -22, -4
    0xe8fc03f5, 0xe7f80ff8, 0xafafb0e, 0x901f90a, 0x4f7f90a, 0xfe01fd02, 0xf8f91401, 0xfcea0800,
    // 4, -14, -1, 4, 25, 10, -17, 2, 2, 34, -42, -12, 20, 12, 37, -11, 9, -14, -3, 3, -7, -1, -16, 0, 2, 12, 15, -2, 6, -9, -2, -4
    0x4fff204, 0x2ef0a19, 0xf4d62202, 0xf5250c14, 0x3fdf209, 0xf0fff9, 0xfe0f0c02, 0xfcfef706,
    // -1, -9, -11, 27, 15, -13, -12, 5, -2, 4, -22, 6, 1, 2, -26, -8, -8, 7, 31, -92, 7, -21, 20, -19, -13, 21, -97, -65, 1, 36, 60, -54
    0x1bf5f7ff, 0x5f4f30f, 0x6ea04fe, 0xf8e60201, 0xa41f07f8, 0xed14eb07, 0xbf9f15f3, 0xca3c2401,
    // -5, -2, -10, -13, -31, -18, -11, -10, 4, 10, -23, 28, -8, -18, 11, -16, 8, 0, -10, -1, 4, -2, -5, 14, 2, 4, -11, 4, 2, 9, -1, 9
    0xf3f6fefb, 0xf6f5eee1, 0x1ce90a04, 0xf00beef8, 0xfff60008, 0xefbfe04, 0x4f50402, 0x9ff0902,
    // 5, -8, 4, -10, 2, 0, 1, -3, -8, 0, -36, -10, 29, 10, 51, 3, 9, -10, 0, -3, -7, -6, -21, -1, 4, 12, 3, 9, 6, 0, 9, -13
    0xf604f805, 0xfd010002, 0xf6dc00f8, 0x3330a1d, 0xfd00f609, 0xffebfaf9, 0x9030c04, 0xf3090006,
    // -2, 11, 11, 3, 17, 6, -5, 6, 6, 18, -7, -23, 15, 5, -11, -13, 18, -8, 9, -9, -27, 0, -14, 4, -15, -36, -14, 4, 2, 16, -17, -31
    0x30b0bfe, 0x6fb0611, 0xe9f91206, 0xf3f5050f, 0xf709f812, 0x4f200e5, 0x4f2dcf1, 0xe1ef1002,
    // -6, -5, -4, -1, 8, -15, -3, -4, -2, -19, 4, 22, 6, 10, -10, 6, -21, 5, 7, -6, 11, 4, 12, 3, 18, 10, 13, 26, 23, -18, 23, 20
    0xfffcfbfa, 0xfcfdf108, 0x1604edfe, 0x6f60a06, 0xfa0705eb, 0x30c040b, 0x1a0d0a12, 0x1417ee17,
    // -16, 55, 6, -58, -83, -12, -30, -9, 3, -11, 82, 69, -56, -3, -100, 12, 8, 1, 13, 0, 32, -18, -23, 10, -7, -49, -2, 19, 28, 1, 23, -14
    0xc60637f0, 0xf7e2f4ad, 0x4552f503, 0xc9cfdc8, 0xd0108, 0xae9ee20, 0x13fecff9, 0xf217011c,
    // 2, -14, -2, -8, 3, 13, 1, 8, 15, 10, 6, -5, 15, -3, -14, 1, 6, -21, -2, 3, -37, 4, -2, -8, 0, -11, -17, 28, -4, 22, -5, -4
    0xf8fef202, 0x8010d03, 0xfb060a0f, 0x1f2fd0f, 0x3feeb06, 0xf8fe04db, 0x1ceff500, 0xfcfb16fc,
    // 7, -5, 13, 4, 9, -4, -5, 0, 7, -11, -6, 16, 9, 8, 3, -18, 1, 1, 19, 1, 26, -8, 0, -20, 8, 0, -11, -6, -5, -11, -9, -24
    0x40dfb07, 0xfbfc09, 0x10faf507, 0xee030809, 0x1130101, 0xec00f81a, 0xfaf50008, 0xe8f7f5fb,
    // -40, 25, 17, 4, 52, -15, 34, -25, 14, 40, 34, 11, -13, -18, 4, -4, -14, -2, 3, -14, 33, -3, -9, 8, 4, 14, 2, -20, 7, -13, -30, 1
    0x41119d8, 0xe722f134, 0xb22280e, 0xfc04eef3, 0xf203fef2, 0x8f7fd21, 0xec020e04, 0x1e2f307,
    // -24, 37, 16, -6, 40, 3, 32, -38, -4, 49, -40, -78, -51, -20, 8, -41, -47, 39, 18, -51, -4, -15, 80, -24, -4, 69, 12, -38, -94, 49, -29, -79
    0xfa1025e8, 0xda200328, 0xb2d831fc, 0xd708eccd, 0xcd1227d1, 0xe850f1fc, 0xda0c45fc, 0xb1e331a2,
    // -42, 22, 1, -42, 37, 18, 6, -24, -1, 59, 17, -62, -38, 1, -81, -22, 1, 8, 1, 8, -13, 1, -1, -5, -1, -1, -18, -34, 0, -14, 18, -10
    0xd60116d6, 0xe8061225, 0xc2113bff, 0xeaaf01da, 0x8010801, 0xfbff01f3, 0xdeeeffff, 0xf612f200,
    // -33, 20, 14, 5, -31, -19, 31, -4, 18, 36, 12, -10, -15, -14, 1, -14, -12, 9, 8, 1, 14, 8, 1, -13, -2, 3, 14, -19, 15, -2, -18, 3
    0x50e14df, 0xfc1fede1, 0xf60c2412, 0xf201f2f1, 0x10809f4, 0xf301080e, 0xed0e03fe, 0x3eefe0f,
    // -9, 19, -6, -11, -1, 12, -55, 35, -30, 37, 5, -18, -7, 6, 32, 4, 37, -4, -2, -1, -13, 7, -7, 6, 59, 11, -26, 17, -36, 19, -16, -28
    0xf5fa13f7, 0x23c90cff, 0xee0525e2, 0x42006f9, 0xfffefc25, 0x6f907f3, 0x11e60b3b, 0xe4f013dc,
    // -4, 12, 0, -6, -22, 9, 26, 2, -13, -10, 0, 9, -5, -6, 21, -13, 6, 23, -20, -14, 17, -24, -56, 29, -26, 47, 11, -45, -4, -14, -15, -35
    0xfa000cfc, 0x21a09ea, 0x900f6f3, 0xf315fafb, 0xf2ec1706, 0x1dc8e811, 0xd30b2fe6, 0xddf1f2fc,
    // 48, -54, -16, -53, -56, -11, 7, -29, 7, -88, -72, -28, 56, -8, -74, -46, -3, 4, 22, -2, 0, -17, 21, 25, -27, -28, -18, -20, 14, -16, 29, 19
    0xcbf0ca30, 0xe307f5c8, 0xe4b8a807, 0xd2b6f838, 0xfe1604fd, 0x1915ef00, 0xeceee4e5, 0x131df00e,
    // 11, 15, -10, -2, 19, 9, 12, -3, -10, 36, 9, -5, 3, 15, -6, -6, 13, 4, -11, -7, 0, 14, -10, 0, 27, 8, 9, 18, -20, 12, -20, -37
    0xfef60f0b, 0xfd0c0913, 0xfb0924f6, 0xfafa0f03, 0xf9f5040d, 0xf60e00, 0x1209081b, 0xdbec0cec,
    // -13, 13, 5, -1, 15, -21, 10, 21, -7, -20, 9, -5, -9, -18, 16, 7, -12, 5, 13, 8, -25, 2, -13, 9, 5, -13, 14, -10, -5, -10, -7, -7
    0xff050df3, 0x150aeb0f, 0xfb09ecf9, 0x710eef7, 0x80d05f4, 0x9f302e7, 0xf60ef305, 0xf9f9f6fb,
    // 11, 17, -5, 4, -41, 14, -51, 4, -12, -29, 22, 7, -9, -13, -28, -6, -4, 8, 7, 11, -9, 4, 5, 4, 1, 1, 13, -9, 3, -8, -2, 5
    0x4fb110b, 0x4cd0ed7, 0x716e3f4, 0xfae4f3f7, 0xb0708fc, 0x40504f7, 0xf70d0101, 0x5fef803,
    // -16, -22, 35, 21, 37, 3, 38, -7, 14, 4, -35, -11, 18, -10, 2, -40, 51, -19, 27, 47, 91, 44, -50, -20, -18, -32, -51, -53, -17, 33, -51, -35
    0x1523eaf0, 0xf9260325, 0xf5dd040e, 0xd802f612, 0x2f1bed33, 0xecce2c5b, 0xcbcde0ee, 0xddcd21ef,
    // 0, -10, 15, 14, 32, 6, 13, 9, -3, -24, -45, -4, 11, -3, -1, -50, -4, 0, 10, 3, -43, -2, -12, 20, 8, -7, 7, -2, -3, -23, 5, 15
    0xe0ff600, 0x90d0620, 0xfcd3e8fd, 0xcefffd0b, 0x30a00fc, 0x14f4fed5, 0xfe07f908, 0xf05e9fd,
    // -6, 11, 3, 17, -56, -1, -35, -20, -11, 4, 28, 0, 2, -11, -7, 26, -2, 3, 11, 12, -26, 2, 4, -16, 7, 11, 3, -9, 12, -9, 11, -8
    0x11030bfa, 0xecddffc8, 0x1c04f5, 0x1af9f502, 0xc0b03fe, 0xf00402e6, 0xf7030b07, 0xf80bf70c,
    // 4, 12, 8, 20, 21, -5, -5, -23, -1, 18, -24, 8, -1, 18, 6, -18, -1, 18, 13, 6, 26, -8, 12, 0, -7, -3, -11, -19, 32, 16, -7, -28
    0x14080c04, 0xe9fbfb15, 0x8e812ff, 0xee0612ff, 0x60d12ff, 0xcf81a, 0xedf5fdf9, 0xe4f91020,
    // 9, 12, -6, -7, -6, -5, -5, 5, 3, 12, 16, -4, 17, 0, -14, 7, 5, 35, -7, -2, 15, -10, 13, -14, 7, 5, 6, 43, 41, -3, 1, 12
    0xf9fa0c09, 0x5fbfbfa, 0xfc100c03, 0x7f20011, 0xfef92305, 0xf20df60f, 0x2b060507, 0xc01fd29,
    // -18, 64, 44, 86, 123, 11, 0, 13, 24, 12, 61, -3, 62, 37, -20, -18, 18, 38, 0, -9, 35, -4, -8, 9, -10, 17, -3, -21, 20, -6, 14, 2
    0x562c40ee, 0xd000b7b, 0xfd3d0c18, 0xeeec253e, 0xf7002612, 0x9f8fc23, 0xebfd11f6, 0x20efa14,
    // 7, 16, 3, 13, 11, -4, -7, 5, 9, -7, 3, 13, 4, 4, -9, 3, -5, 17, 0, 7, 44, -2, 23, 6, 6, 5, -10, 2, 14, 32, -17, -4
    0xd031007, 0x5f9fc0b, 0xd03f909, 0x3f70404, 0x70011fb, 0x617fe2c, 0x2f60506, 0xfcef200e,
    // 9, 6, 4, -33, 14, 1, 1, 3, -4, 27, 8, -17, 11, 5, -21, -20, 10, 1, 8, 16, 19, -6, 22, -26, 2, 7, -13, -18, -5, 5, -19, -19
    0xdf040609, 0x301010e, 0xef081bfc, 0xeceb050b, 0x1008010a, 0xe616fa13, 0xeef30702, 0xeded05fb,
    // 15, 15, 24, -15, -37, -13, 4, 0, -20, -16, 10, -7, 10, -3, -17, 5, 2, 12, 13, 14, -3, -9, -7, -9, 2, -7, 13, 21, -10, 1, 3, 2
    0xf1180f0f, 0x4f3db, 0xf90af0ec, 0x5effd0a, 0xe0d0c02, 0xf7f9f7fd, 0x150df902, 0x20301f6,
    // -4, 21, 18, -1, 23, 24, 22, -18, 16, 14, 58, 12, 9, 18, 26, 5, 31, -3, 107, 2, -86, -20, 9, 18, 9, -9, -11, -43, -32, -29, 46, -75
    0xff1215fc, 0xee161817, 0xc3a0e10, 0x51a1209, 0x26bfd1f, 0x1209ecaa, 0xd5f5f709, 0xb52ee3e0,
    // 20, 17, 16, 21, -1, -11, -30, -24, -1, 0, 37, 33, -17, 16, 42, 3, 5, 21, 10, 2, -18, 7, 6, 0, 9, 0, 5, -6, -6, -12, -5, -6
    0x15101114, 0xe8e2f5ff, 0x212500ff, 0x32a10ef, 0x20a1505, 0x607ee, 0xfa050009, 0xfafbf4fa,
    // 4, 9, 20, 2, -56, -10, 13, -6, -5, 4, -9, -25, -32, 7, -8, 10, 8, -1, 11, -1, -13, 6, -10, -20, -5, 5, 4, 8, -10, 8, 17, -20
    0x2140904, 0xfa0df6c8, 0xe7f704fb, 0xaf807e0, 0xff0bff08, 0xecf606f3, 0x80405fb, 0xec1108f6,
    // 6, -16, 18, -1, -23, -5, -47, 13, -10, -3, 9, 13, -7, 19, 1, 5, 17, -33, 15, -12, 35, 2, -24, 9, 31, 9, -12, 24, -18, 40, -19, 0
    0xff12f006, 0xdd1fbe9, 0xd09fdf6, 0x50113f9, 0xf40fdf11, 0x9e80223, 0x18f4091f, 0xed28ee,
    // 1, -11, -12, -11, 9, 2, 41, 10, -10, 13, 5, -1, 11, 16, -17, -8, 19, -4, 4, 16, -20, -17, -70, 9, -1, -3, 52, 23, -40, -8, 26, 9
    0xf5f4f501, 0xa290209, 0xff050df6, 0xf8ef100b, 0x1004fc13, 0x9baefec, 0x1734fdff, 0x91af8d8,
    // 1, -22, 15, 12, 36, 32, -34, -37, -14, -88, 31, -20, -2, 13, 24, -25, 1, -6, -1, -11, -24, 11, 6, 7, -8, 3, 61, -5, -7, 7, 8, 12
    0xc0fea01, 0xdbde2024, 0xec1fa8f2, 0xe7180dfe, 0xf5fffa01, 0x7060be8, 0xfb3d03f8, 0xc0807f9,
    // 16, -21, 5, 11, -2, 5, -16, -10, -3, 10, -1, 1, -10, 15, 12, -14, 7, -34, 9, 5, 1, 6, -4, -14, 14, 24, 1, -7, -3, 31, -24, -15
    0xb05eb10, 0xf6f005fe, 0x1ff0afd, 0xf20c0ff6, 0x509de07, 0xf2fc0601, 0xf901180e, 0xf1e81ffd,
    // 2, -13, -2, 0, 5, 2, 4, 18, -2, 26, 16, -11, 5, 2, -5, -13, -4, -20, -5, 8, 29, -15, 54, -45, 9, -16, 7, 20, 4, -16, -36, -18
    0xfef302, 0x12040205, 0xf5101afe, 0xf3fb0205, 0x8fbecfc, 0xd336f11d, 0x1407f009, 0xeedcf004,
    // -38, -24, 9, 22, -26, -14, 8, -8, -51, -55, 18, -37, 35, -41, -28, -19, -18, -1, 3, -3, -8, -12, -51, -11, 11, -11, -3, -2, -14, -25, -7, 7
    0x1609e8da, 0xf808f2e6, 0xdb12c9cd, 0xede4d723, 0xfd03ffee, 0xf5cdf4f8, 0xfefdf50b, 0x7f9e7f2,
    // -6, -17, -16, -39, 22, 29, 32, -55, -18, -5, 11, 28, 24, -46, -21, -17, 30, -19, -60, 23, 45, -9, -31, 77, -27, -86, 5, 14, 68, -112, -107, 20
    0xd9f0effa, 0xc9201d16, 0x1c0bfbee, 0xefebd218, 0x17c4ed1e, 0x4de1f72d, 0xe05aae5, 0x14959044,
    // 16, -10, -1, -30, 24, -5, -30, -20, 9, 1, -12, 4, 4, -55, 38, -42, -19, -15, 11, 15, 14, -2, -20, 3, -1, 3, 20, -11, 13, -16, -5, -15
    0xe2fff610, 0xece2fb18, 0x4f40109, 0xd626c904, 0xf0bf1ed, 0x3ecfe0e, 0xf51403ff, 0xf1fbf00d,
    // -19, -30, -1, 21, -7, 8, 20, 3, 1, -36, 24, -5, 29, -26, -10, -1, -2, -10, -1, -2, -23, 14, -14, -33, 6, -6, 0, 9, 8, -8, 13, 10
    0x15ffe2ed, 0x31408f9, 0xfb18dc01, 0xfff6e61d, 0xfefff6fe, 0xdff20ee9, 0x900fa06, 0xa0df808,
};
static const uint embedded_decoder2_ResidualBlock_2_body_conv_dw_bias_dwords[8] = {
    // 0.04135, 0.03287, -0.0226, -0.0822, 0.08466, 0.03546, -0.05588, -0.02419, -0.0723, -0.0711, 0.06012, 0.06204, -0.0687, 0.0706, 0.015495, 0.04153
    0x2835294b, 0xad43a5c9, 0x288a2d6b, 0xa631ab27, 0xac8daca1, 0x2bf12bb2, 0x2c85ac66, 0x295123ef,
};
static const uint embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -28, -54, 9, 30, -73, 127, -50, 22, -63, 61, -85, 90, 64, 75, 0, -112, 45, -49, 44, -19, -16, -43, 7, 19, -34, -13, -10, -1, -21, 6, 28, 15
    0x1e09cae4, 0x16ce7fb7, 0x5aab3dc1, 0x90004b40, 0xed2ccf2d, 0x1307d5f0, 0xfff6f3de, 0xf1c06eb,
    // -24, -86, -49, 25, 2, 9, -14, -76, 27, 89, -4, -93, 51, 48, -81, 9, -7, 27, 42, -19, -4, 19, -31, 3, -13, -21, 31, -30, 38, -35, -51, 9
    0x19cfaae8, 0xb4f20902, 0xa3fc591b, 0x9af3033, 0xed2a1bf9, 0x3e113fc, 0xe21febf3, 0x9cddd26,
    // -10, 44, 14, 16, -36, 14, 29, 81, -42, -10, 22, 24, -2, 0, 29, -46, 25, 41, 66, 26, -74, -34, -54, -65, -55, 42, 71, -24, 19, 18, 64, 12
    0x100e2cf6, 0x511d0edc, 0x1816f6d6, 0xd21d00fe, 0x1a422919, 0xbfcadeb6, 0xe8472ac9, 0xc401213,
    // -6, 44, -52, -19, -50, 13, -1, -97, 11, -3, -29, -81, 26, 13, -19, -112, -36, 4, 9, -66, -45, -84, 48, 7, 41, 2, 42, -40, -14, -1, -37, -39
    0xedcc2cfa, 0x9fff0dce, 0xafe3fd0b, 0x90ed0d1a, 0xbe0904dc, 0x730acd3, 0xd82a0229, 0xd9dbfff2,
    // -10, -21, 39, 121, -23, 68, 22, 39, 99, 89, 78, -53, -60, 110, -59, -45, -40, -10, 56, 50, -57, -61, 17, -48, 57, -5, 39, 51, 2, 38, 53, 5
    0x7927ebf6, 0x271644e9, 0xcb4e5963, 0xd3c56ec4, 0x3238f6d8, 0xd011c3c7, 0x3327fb39, 0x5352602,
    // -42, -22, 6, 12, -5, -9, 4, 70, -23, 31, 26, 12, 30, 29, 6, 27, -8, -15, -11, -6, 16, 12, 64, -20, -14, -19, 19, -14, 11, -7, 15, 12
    0xc06ead6, 0x4604f7fb, 0xc1a1fe9, 0x1b061d1e, 0xfaf5f1f8, 0xec400c10, 0xf213edf2, 0xc0ff90b,
    // -51, -18, 40, 86, -19, 5, 78, -24, 19, 74, -10, -14, 109, -68, 78, -9, -11, -50, -3, -3, 75, -4, -52, 13, -1, -13, 53, 0, -10, -28, 55, -57
    0x5628eecd, 0xe84e05ed, 0xf2f64a13, 0xf74ebc6d, 0xfdfdcef5, 0xdccfc4b, 0x35f3ff, 0xc737e4f6,
    // 10, 50, 2, 4, -74, 4, 53, -15, -1, 12, -52, 1, 14, 30, -56, 57, 39, -35, 0, 29, -32, 30, -38, 59, 46, 40, 53, -54, -29, 53, -91, -15
    0x402320a, 0xf13504b6, 0x1cc0cff, 0x39c81e0e, 0x1d00dd27, 0x3bda1ee0, 0xca35282e, 0xf1a535e3,
    // 40, 48, 20, -13, -17, -8, 27, 60, 16, -19, 18, 10, 75, 51, 33, -61, -101, -8, 3, 29, -47, 15, 2, 27, -89, -6, 35, -24, -74, -38, -10, 13
    0xf3143028, 0x3c1bf8ef, 0xa12ed10, 0xc321334b, 0x1d03f89b, 0x1b020fd1, 0xe823faa7, 0xdf6dab6,
    // -5, -12, -3, 33, -49, 71, -59, -26, -61, -13, -11, 73, 48, 37, -11, -52, -19, -6, -25, -44, -3, 17, 40, 0, -30, 48, -15, -5, -22, 42, 20, -30
    0x21fdf4fb, 0xe6c547cf, 0x49f5f3c3, 0xccf52530, 0xd4e7faed, 0x2811fd, 0xfbf130e2, 0xe2142aea,
    // 54, -27, 57, 41, -21, -59, 0, -8, -58, -14, -9, 12, -39, 24, 21, -10, -53, 12, -6, -28, 14, -50, -97, 1, 30, 13, -42, 37, 5, 7, -51, 9
    0x2939e536, 0xf800c5eb, 0xcf7f2c6, 0xf61518d9, 0xe4fa0ccb, 0x19fce0e, 0x25d60d1e, 0x9cd0705,
    // 14, 2, -29, 56, -11, -39, -5, 8, -8, -7, 34, 11, 12, -12, -7, 9, -22, 46, 49, 111, 57, -29, -3, 0, -26, 42, -31, -56, -15, 27, -15, -23
    0x38e3020e, 0x8fbd9f5, 0xb22f9f8, 0x9f9f40c, 0x6f312eea, 0xfde339, 0xc8e12ae6, 0xe9f11bf1,
    // 29, 26, 23, -32, 58, -17, 48, 32, -42, -5, 49, 58, 87, 104, -35, -10, 48, -22, -4, -41, -81, 19, -36, -47, 21, 35, 19, 13, 49, -66, 30, -1
    0xe0171a1d, 0x2030ef3a, 0x3a31fbd6, 0xf6dd6857, 0xd7fcea30, 0xd1dc13af, 0xd132315, 0xff1ebe31,
    // 6, -36, 7, -7, 5, 6, 40, -33, -28, 37, 34, 73, -5, -46, -53, 20, -21, 17, -22, -52, -5, 9, -20, -42, 6, -16, 51, 18, 8, 9, 33, 51
    0xf907dc06, 0xdf280605, 0x492225e4, 0x14cbd2fb, 0xccea11eb, 0xd6ec09fb, 0x1233f006, 0x33210908,
    // -37, -34, 6, -12, -5, -67, -9, 28, -101, 46, -89, -32, 125, -55, 19, -8, -33, -5, 45, 64, 2, 5, -1, -27, 79, -20, 4, 47, -4, 15, 31, 13
    0xf406dedb, 0x1cf7bdfb, 0xe0a72e9b, 0xf813c97d, 0x402dfbdf, 0xe5ff0502, 0x2f04ec4f, 0xd1f0ffc,
    // -74, -10, 19, -102, -58, -48, 100, 59, 79, 95, -25, -47, -21, -2, -21, -109, -39, 1, -13, -1, -42, -8, -44, 40, 6, -26, -10, -91, 41, 62, 56, -6
    0x9a13f6b6, 0x3b64d0c6, 0xd1e75f4f, 0x93ebfeeb, 0xfff301d9, 0x28d4f8d6, 0xa5f6e606, 0xfa383e29,
};
static const uint embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias_dwords[16] = {
    // -0.554, 0.2452, -0.1656, 0.1594, 0.1808, -0.3608, -0.1131, 0.2502, -0.1261, 0.01353, 0.0792, -0.042, 0.02243, -0.007027, 0.01253, 0.1642
    0x33d9b86f, 0x311ab14d, 0xb5c631c9, 0x3401af3d, 0x22edb009, 0xa9602d12, 0x9f3225be, 0x3141226a,
    // -0.3108, 0.01409, 0.3684, 0.4126, -0.04422, 0.06537, -0.01075, 0.0574, 0.1436, 0.07367, 0.1686, -0.2732, -0.10114, 0.1832, -0.6226, 0.2964
    0x2337b4f9, 0x369a35e5, 0x2c2fa9a9, 0x2b59a181, 0x2cb73098, 0xb45f3165, 0x31ddae79, 0x34beb8fb,
};
static const uint embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -26, 18, -29, 52, 37, 66, 43, -44, 7, 63, -19, 52, -109, 3, -1, 41, 27, -28, 20, -42, 18, -97, -56, 37, 31, 24, 34, -22, -124, 78, -90, -2
    0x34e312e6, 0xd42b4225, 0x34ed3f07, 0x29ff0393, 0xd614e41b, 0x25c89f12, 0xea22181f, 0xfea64e84,
    // 5, -16, 93, -6, -80, 11, 48, -27, 4, 13, -69, 35, -24, 12, -2, 15, 73, -34, 12, 21, 9, 25, -19, 31, 104, 81, 23, -20, -5, -5, -33, -13
    0xfa5df005, 0xe5300bb0, 0x23bb0d04, 0xffe0ce8, 0x150cde49, 0x1fed1909, 0xec175168, 0xf3dffbfb,
    // 45, -15, -1, -9, -14, -32, -64, 1, 72, -10, 47, -23, 21, 44, -35, 54, 23, -101, 20, 3, -59, -6, 21, -33, 61, -35, 23, 48, -58, -9, -8, -16
    0xf7fff12d, 0x1c0e0f2, 0xe92ff648, 0x36dd2c15, 0x3149b17, 0xdf15fac5, 0x3017dd3d, 0xf0f8f7c6,
    // 108, -13, -11, -7, 8, -9, 5, -84, -22, -9, 5, -38, 37, 25, -22, -35, 15, -28, 73, 14, -7, 25, 9, -8, 24, 10, -17, -8, 57, 0, -78, -33
    0xf9f5f36c, 0xac05f708, 0xda05f7ea, 0xddea1925, 0xe49e40f, 0xf80919f9, 0xf8ef0a18, 0xdfb20039,
    // 28, 11, 0, 3, 3, -5, -19, -22, -61, -5, 13, 33, 68, -5, 7, -65, -12, 7, 16, -3, 17, 14, -17, -64, -12, -16, 10, -6, 59, -27, -25, 4
    0x3000b1c, 0xeaedfb03, 0x210dfbc3, 0xbf07fb44, 0xfd1007f4, 0xc0ef0e11, 0xfa0af0f4, 0x4e7e53b,
    // 22, -13, 27, -1, -13, -2, 21, -22, -18, -32, -26, 17, 43, -74, 73, -13, -10, 34, 17, 7, 12, -13, 24, -10, -9, 39, 14, -4, 35, -18, -8, -13
    0xff1bf316, 0xea15fef3, 0x11e6e0ee, 0xf349b62b, 0x71122f6, 0xf618f30c, 0xfc0e27f7, 0xf3f8ee23,
    // 8, 2, 2, -19, 3, -13, 4, 0, 9, -7, 0, 3, -4, -13, 11, 6, 0, 7, 7, -1, -3, -6, 12, 14, -4, 2, -1, -2, -2, 8, 2, -1
    0xed020208, 0x4f303, 0x300f909, 0x60bf3fc, 0xff070700, 0xe0cfafd, 0xfeff02fc, 0xff0208fe,
    // -9, 7, -1, -5, 3, 11, 17, -8, -19, 7, -10, 9, -2, -1, 1, -8, 6, 7, 0, -11, 10, 2, 2, 3, 3, 11, -6, -3, 0, 6, -13, 9
    0xfbff07f7, 0xf8110b03, 0x9f607ed, 0xf801fffe, 0xf5000706, 0x302020a, 0xfdfa0b03, 0x9f30600,
    // 14, -10, 1, -14, -4, -23, 1, -1, 10, -12, -2, -6, 4, -2, 0, 2, 1, -8, 1, 13, -11, -8, 19, 6, 1, -5, -3, 2, 12, -12, 18, 1
    0xf201f60e, 0xff01e9fc, 0xfafef40a, 0x200fe04, 0xd01f801, 0x613f8f5, 0x2fdfb01, 0x112f40c,
    // 84, -12, -36, -44, 31, -74, 15, -3, 43, -60, -12, -42, -15, 10, -10, -2, 15, -7, 39, 48, -24, -62, 38, 67, -7, -41, -10, -2, 48, -28, 63, 6
    0xd4dcf454, 0xfd0fb61f, 0xd6f4c42b, 0xfef60af1, 0x3027f90f, 0x4326c2e8, 0xfef6d7f9, 0x63fe430,
    // -22, 3, 22, -3, -20, -13, 19, 33, -25, -16, -20, 65, 40, 26, -29, -29, 0, 12, -25, 22, 13, -49, 13, -43, -1, 9, 25, 4, 34, -26, 28, 11
    0xfd1603ea, 0x2113f3ec, 0x41ecf0e7, 0xe3e31a28, 0x16e70c00, 0xd50dcf0d, 0x41909ff, 0xb1ce622,
    // -33, -1, -10, -42, -11, -7, 9, 50, -13, -12, -9, -58, 21, -32, 33, -9, 39, -46, -33, 29, 4, 46, 38, 19, 53, 0, -30, 14, 57, -13, 53, 4
    0xd6f6ffdf, 0x3209f9f5, 0xc6f7f4f3, 0xf721e015, 0x1ddfd227, 0x13262e04, 0xee20035, 0x435f339,
    // -25, 49, -28, 4, 37, 21, -28, 6, -120, -7, 32, -28, -1, -11, 14, -91, 40, -97, -9, -27, 55, 4, -6, 23, 66, -13, -21, -44, 98, 6, -8, -3
    0x4e431e7, 0x6e41525, 0xe420f988, 0xa50ef5ff, 0xe5f79f28, 0x17fa0437, 0xd4ebf342, 0xfdf80662,
    // -4, 3, -64, 13, 12, 3, 112, 12, 39, -3, -52, 48, 47, -22, 28, -2, 74, -34, -15, 5, -18, 10, -11, -112, 30, -53, -72, 52, -59, -2, 26, 91
    0xdc003fc, 0xc70030c, 0x30ccfd27, 0xfe1cea2f, 0x5f1de4a, 0x90f50aee, 0x34b8cb1e, 0x5b1afec5,
    // 127, -5, -3, -17, -12, -15, 3, -72, 20, 19, 8, 16, -2, -21, 20, -1, -5, 15, 67, 0, -60, 2, 1, -8, -16, -8, -10, 41, -19, 17, -108, 32
    0xeffdfb7f, 0xb803f1f4, 0x10081314, 0xff14ebfe, 0x430ffb, 0xf80102c4, 0x29f6f8f0, 0x209411ed,
    // 4, 4, -17, 1, 10, 17, 85, -7, -41, 4, -35, -19, -14, 48, -47, -48, 10, 52, 3, 1, 21, 23, 7, 20, -33, 9, -56, -16, 47, 3, -12, 57
    0x1ef0404, 0xf955110a, 0xeddd04d7, 0xd0d130f2, 0x103340a, 0x14071715, 0xf0c809df, 0x39f4032f,
};
static const uint embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias_dwords[8] = {
    // -0.2688, -0.4988, 0.412, 0.011734, 0.03903, -0.04132, 0.014084, -0.01447, 0.09033, 0.2112, -0.1848, -0.1617, 0.168, 0.09375, 0.04504, -0.294
    0xb7fbb44d, 0x22023698, 0xa94a28ff, 0xa3692336, 0x32c22dc8, 0xb12db1ea, 0x2e003160, 0xb4b429c4,
};
static const uint embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 6, 23, 21, 19, 1, -8, -6, -3, 2, -2, -8, 24, 21, 19, -10, -16, -24, 62, -12, 29, 12, 18, -5, -12, -2, -46, 23, 7, -52, -7, -18, -5
    0x13151706, 0xfdfaf801, 0x18f8fe02, 0xf0f61315, 0x1df43ee8, 0xf4fb120c, 0x717d2fe, 0xfbeef9cc,
    // 16, 43, -38, 64, -30, 39, 7, 4, 2, 14, 18, -2, -37, 54, -55, 47, -67, -29, 47, -42, -117, -10, 30, -26, 50, 112, 21, 55, -83, 23, -48, -56
    0x40da2b10, 0x40727e2, 0xfe120e02, 0x2fc936db, 0xd62fe3bd, 0xe61ef68b, 0x37157032, 0xc8d017ad,
    // -5, -7, 23, 7, -24, -8, 34, -5, 54, -19, 3, -20, 11, -4, -10, 32, -3, 2, -7, 15, 0, -27, -2, 38, -29, 9, 23, -2, -8, -1, -3, -14
    0x717f9fb, 0xfb22f8e8, 0xec03ed36, 0x20f6fc0b, 0xff902fd, 0x26fee500, 0xfe1709e3, 0xf2fdfff8,
    // -1, 2, -3, 5, -16, 6, -33, -66, -12, -2, 19, -22, 10, 7, -1, 4, 16, 5, -7, -6, 39, -11, -63, 26, 42, 15, -12, 10, -17, -5, -6, -14
    0x5fd02ff, 0xbedf06f0, 0xea13fef4, 0x4ff070a, 0xfaf90510, 0x1ac1f527, 0xaf40f2a, 0xf2fafbef,
    // 4, 22, 24, 18, -1, -7, -8, -4, 4, -9, 1, 30, 19, 21, -6, -17, 6, 70, -28, 1, -40, 15, 13, -5, 1, 8, 12, 8, -22, -57, -2, 9
    0x12181604, 0xfcf8f9ff, 0x1e01f704, 0xeffa1513, 0x1e44606, 0xfb0d0fd8, 0x80c0801, 0x9fec7ea,
    // 21, 46, -48, 53, -60, 32, 14, 7, 2, 31, -2, 10, -19, 29, -43, 59, -106, -35, 14, -6, 32, 18, 10, -21, 52, 110, 92, 76, -4, 18, -74, -23
    0x35d02e15, 0x70e20c4, 0xafe1f02, 0x3bd51ded, 0xfa0edd96, 0xeb0a1220, 0x4c5c6e34, 0xe9b612fc,
    // 6, 0, 16, 0, 14, -8, 23, 14, 62, -8, 19, -17, -2, -4, -9, 13, 4, -1, -4, 22, 12, -37, 7, 20, -18, 7, 9, 10, -15, -7, -13, -7
    0x100006, 0xe17f80e, 0xef13f83e, 0xdf7fcfe, 0x16fcff04, 0x1407db0c, 0xa0907ee, 0xf9f3f9f1,
    // 8, 2, 16, 1, 22, -4, -1, -50, -25, 3, -20, 14, -13, -9, -16, 31, -4, 1, -22, 9, -17, -12, -69, -3, 36, 0, 0, 4, 2, 5, 8, -13
    0x1100208, 0xcefffc16, 0xeec03e7, 0x1ff0f7f3, 0x9ea01fc, 0xfdbbf4ef, 0x4000024, 0xf3080502,
    // 18, 24, 19, 13, -10, -1, -4, -1, 5, 11, 6, 18, 28, 8, -8, -17, -30, 67, -5, -16, 28, 3, -17, -11, -3, -48, 38, 18, -45, -8, 19, -4
    0xd131812, 0xfffcfff6, 0x12060b05, 0xeff8081c, 0xf0fb43e2, 0xf5ef031c, 0x1226d0fd, 0xfc13f8d3,
    // 2, 52, -20, -37, 9, 1, -11, 7, 0, 0, 63, 31, -22, 52, 46, 46, -39, -2, 67, 40, -69, 8, 23, -34, 42, 127, -17, 9, -86, 0, 109, -43
    0xdbec3402, 0x7f50109, 0x1f3f0000, 0x2e2e34ea, 0x2843fed9, 0xde1708bb, 0x9ef7f2a, 0xd56d00aa,
    // 1, 0, -11, 19, -6, -32, 31, 5, 73, -13, 2, -3, 2, -2, -7, 0, -2, 1, 31, 8, 1, -15, 12, 16, -32, 3, 19, -20, -7, -8, -21, 34
    0x13f50001, 0x51fe0fa, 0xfd02f349, 0xf9fe02, 0x81f01fe, 0x100cf101, 0xec1303e0, 0x22ebf8f9,
    // 8, 7, -17, 11, 13, -32, -27, -65, -7, 4, 27, -12, -5, 1, -3, -11, 11, 3, 14, -9, 25, 8, -75, 5, 43, 5, -11, -2, -13, -8, -11, 19
    0xbef0708, 0xbfe5e00d, 0xf41b04f9, 0xf5fd01fb, 0xf70e030b, 0x5b50819, 0xfef5052b, 0x13f5f8f3,
    // 15, 25, 20, 5, -2, -7, -6, -3, 2, 9, 3, 17, 25, 12, -7, -19, 0, 72, -19, -40, -26, 0, -3, -5, 0, 2, 31, 22, -15, -57, 34, 12
    0x514190f, 0xfdfaf9fe, 0x11030902, 0xedf90c19, 0xd8ed4800, 0xfbfd00e6, 0x161f0200, 0xc22c7f1,
    // 6, 52, -28, -45, -19, -7, -9, 7, -1, 13, 46, 46, -7, 29, 58, 59, -76, -6, 34, 74, 80, 36, 2, -27, 45, 127, 52, 21, -4, -4, 86, -12
    0xd3e43406, 0x7f7f9ed, 0x2e2e0dff, 0x3b3a1df9, 0x4a22fab4, 0xe5022450, 0x15347f2d, 0xf456fcfc,
    // 11, 1, -10, 8, 23, -17, 79, 12, 66, -11, 7, -3, -7, 3, -10, -12, -3, 5, 10, -5, 12, -8, -44, 48, -9, 12, -4, -7, -9, -3, -6, 6
    0x8f6010b, 0xc4fef17, 0xfd07f542, 0xf4f603f9, 0xfb0a05fd, 0x30d4f80c, 0xf9fc0cf7, 0x6fafdf7,
    // 11, 8, -1, 5, 40, -26, 35, -67, -11, 0, -20, 17, -14, -3, -13, 14, -8, 4, 8, 8, -13, -21, -62, -32, 26, -7, 7, -26, 5, -2, -7, 23
    0x5ff080b, 0xbd23e628, 0x11ec00f5, 0xef3fdf2, 0x80804f8, 0xe0c2ebf3, 0xe607f91a, 0x17f9fe05,
};
static const uint embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias_dwords[4] = {
    // -0.02406, -0.698, -0.5625, 0.3438, -0.07745, -0.058, -0.03152, -0.08234
    0xb996a629, 0x3580b880, 0xab6dacf5, 0xad45a809,
};

[numthreads(8, 8, 1)]
void fsr4_model_v07_i8_pass13(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(8, 8, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(3840, 2160, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(3840, 2160, 16), // threadGroupSliceSize
        uint3(3840, 2160, 16), // storageSize
        uint3(16, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.02520766295492649, storage_fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.006438883952796459, storage_embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_2_body_conv_dw_bias = { embedded_decoder2_ResidualBlock_2_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_2_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_2_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.006419392302632332, storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias = { embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.006420444697141647, storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias = { embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias };
    
    const ConstantBufferStorage<128> storage_embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_HWCN< ConstantBufferStorage<128> > embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 8, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 8, 16), // threadGroupSliceSize
        uint4(2, 2, 8, 16), // storageSize
        uint4(128, 256, 16, 1), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.00761686684563756, storage_embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<4> storage_embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias = { embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<4> > embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias = {
        8, // logicalSize
        0, // threadGroupSliceStart
        8, // threadGroupSliceSize
        8, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias };
    
    // fused_quantized_NHWC_output
    const uint3 logicalSize_fused_quantized_NHWC_output = uint3(7680, 4320, 8);
    const int3 groupStart_fused_quantized_NHWC_output = int3(0, 0, 0) + ml2c_groupId.xyz * int3(16, 16, 8);
    const uint3 groupSize_fused_quantized_NHWC_output = uint3(16, 16, 8);
    const uint3 storageSize_fused_quantized_NHWC_output = uint3(7680, 4320, 8);
    const uint3 tensorByteStrides_fused_quantized_NHWC_output = uint3(16, 122880, 2);
    const uint3 paddingBegin_fused_quantized_NHWC_output = uint3(0, 0, 0);
    const uint3 paddingEnd_fused_quantized_NHWC_output = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_fused_quantized_NHWC_output = dot(groupStart_fused_quantized_NHWC_output, tensorByteStrides_fused_quantized_NHWC_output);
    const RWBufferStorage storage_fused_quantized_NHWC_output = { buffer_fused_quantized_NHWC_output };
    const Tensor3h_NHWC<RWBufferStorage> fused_quantized_NHWC_output = { logicalSize_fused_quantized_NHWC_output, groupStart_fused_quantized_NHWC_output, groupSize_fused_quantized_NHWC_output, storageSize_fused_quantized_NHWC_output, tensorByteStrides_fused_quantized_NHWC_output, paddingBegin_fused_quantized_NHWC_output, paddingEnd_fused_quantized_NHWC_output, threadGroupByteOffsetInTensor_fused_quantized_NHWC_output + 0, storage_fused_quantized_NHWC_output };
    // FusedConvNextBlock_quantized_/decoder2/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose (16, 2160, 3840), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,), (16, 8, 2, 2), (8,) -> (8, 4320, 7680)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    CNB_CT2D<8>(18.55969618112092, 0.05388019233942032, 20.662151099964124, 0.048397671431303024, 0.0777251273393631, fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_2_body_conv_dw_bias, embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias, embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias, embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias, fused_quantized_NHWC_output, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_13


