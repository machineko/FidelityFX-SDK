// Copyright(C) 2024-2025 Advanced Micro Devices, Inc. All rights reserved.
// Autogenerated 2025-02-26 12:42:40 using ML2Code from "models\2024\October\Release7\DRS\fsr4_model_v07_i8.onnx". Do not edit.
// Compile with dxc.exe -no-warnings -O3 -enable-16bit-types -HV 2021 -T cs_6_6 -I . -I hlsl -E fsr4_model_v07_i8_pass0 "generated\hlsl\fsr4_model_v07_i8.hlsl"

// Scratch memory size needed: 82944000 (79.1MB)

// This file was generated for navi48 SKU
#define WMMA_ENABLED  0
#define FP8_ENABLED  1
#define DOT4_ENABLED  1


ByteAddressBuffer buffer_NHWC_inputs : register(t0);
RWByteAddressBuffer buffer_fused_quantized_NHWC_output : register(u0);
ByteAddressBuffer InitializerBuffer : register(t1);
RWByteAddressBuffer ScratchBuffer : register(u1);

#ifdef MLSR_PASS_0
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Conv2D_k2s2b.hlsli"

static const uint embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight_dwords[256] = {
    // -0.1238, 0.1241, 0.8296, -0.2001, -0.32, -0.0798, -0.0194, 0.0, -0.06107, 0.11285, 0.8213, -0.1229, 0.0745, -0.0054, -0.03102, 0.0
    0x2ff1afec, 0xb2673aa3, 0xad1bb51f, 0xa4f7, 0x2f39abd1, 0xafde3a92, 0x9d882cc5, 0xa7f1,
    // -0.2703, 0.1512, 0.9873, -0.0005536, -0.04968, -0.08966, 0.07043, 0.0, -0.1477, 0.1962, 0.933, -0.0915, -0.2388, -0.0557, -0.02872, 0.0
    0x30d7b453, 0x90893be6, 0xadbdaa5c, 0x2c82, 0x3247b0ba, 0xaddb3b77, 0xab21b3a4, 0xa75a,
    // 0.1523, -0.2234, -0.5005, -0.11426, -0.2314, -0.3503, 0.3767, 0.0, 0.1782, -0.04944, -0.4717, -0.1327, 0.04272, -0.2119, 0.2517, 0.0
    0xb32630e0, 0xaf50b801, 0xb59bb368, 0x3607, 0xaa5431b4, 0xb03fb78c, 0xb2c82978, 0x3407,
    // 0.2031, -0.11414, -0.6187, 0.012276, 0.3376, -0.1768, -0.05493, 0.0, 0.2174, 0.06238, -0.666, -0.1904, 0.2377, -0.1161, 0.02782, 0.0
    0xaf4e3280, 0x2249b8f3, 0xb1a83567, 0xab08, 0x2bfc32f5, 0xb218b954, 0xaf6e339b, 0x271f,
    // -0.1567, 0.2454, -0.5825, 0.0482, -0.2002, 0.1139, 0.1781, 0.0, -0.239, 0.2416, -0.5024, 0.1164, -0.2766, -0.0779, 0.1681, 0.0
    0x33dab104, 0x2a2bb8a9, 0x2f4ab268, 0x31b3, 0x33bbb3a6, 0x2f73b805, 0xacfcb46d, 0x3161,
    // -0.252, 0.1259, -0.7173, -0.0949, 0.02153, -0.004524, 0.01275, 0.0, -0.2837, 0.09076, -0.7, 0.03014, 0.0618, -0.001638, 0.00947, 0.0
    0x3007b408, 0xae13b9bd, 0x9ca22583, 0x2287, 0x2dcfb48a, 0x27b7b99a, 0x96b62be9, 0x20d9,
    // -0.1344, 0.1615, -0.7383, -0.07074, 0.1311, -0.1449, 0.1207, 0.0, -0.2603, 0.1515, -0.6934, -0.05792, 0.2717, -0.2408, 0.1375, 0.0
    0x312bb04d, 0xac87b9e8, 0xb0a33032, 0x2fba, 0x30d9b42a, 0xab6ab98c, 0xb3b53459, 0x3066,
    // 0.04477, 0.1868, -0.7783, 0.1323, -0.2236, -0.09344, 0.3171, 0.0, -0.0365, 0.2307, -0.726, 0.0007925, 0.02638, -0.4175, 0.2386, 0.0
    0x31fa29bb, 0x303cba3a, 0xadfbb328, 0x3513, 0x3362a8ac, 0x127eb9cf, 0xb6ae26c1, 0x33a3,
    // -0.05667, 0.1015, -0.067, -0.002323, -0.10724, -0.00961, 0.0851, 0.0, 0.373, -0.08795, -0.11847, 0.009735, 0.2625, -0.1711, 0.07135, 0.0
    0x2e7fab41, 0x98c2ac4a, 0xa0ecaedd, 0x2d72, 0xada135f8, 0x20fcaf95, 0xb17a3433, 0x2c91,
    // -0.1862, -0.05765, -0.1351, 0.1301, 0.04935, 0.05524, -0.03029, 0.0, 0.162, -0.288, -0.05743, -0.1198, -0.00895, -0.09845, -0.05576, 0.0
    0xab61b1f5, 0x302ab053, 0x2b122a51, 0xa7c1, 0xb49c312f, 0xafabab5a, 0xae4da095, 0xab23,
    // -0.03925, 0.1377, 0.8286, 0.1428, -0.01155, -0.0791, 0.1035, 0.0, 0.01176, 0.0858, 0.739, -0.02617, -0.1307, -0.10925, 0.1097, 0.0
    0x3068a906, 0x30923aa1, 0xad10a1ea, 0x2ea0, 0x2d7e2205, 0xa6b339e9, 0xaefeb02f, 0x2f05,
    // 0.014755, 0.0429, 0.87, 0.123, -0.08575, 0.02756, -0.02983, 0.0, 0.0265, -0.02574, 0.8735, 0.03387, 0.03687, 0.0491, -0.09863, 0.0
    0x297e238e, 0x2fdf3af6, 0x270ead7d, 0xa7a3, 0xa69726c9, 0x28563afd, 0x2a4928b8, 0xae50,
    // -0.00764, 0.2278, -0.6, -0.05832, 0.05664, 0.1953, -0.2554, 0.0, 0.007576, 0.1655, -0.6006, -0.2903, 0.08374, 0.2175, -0.2178, 0.0
    0x334a9fd3, 0xab77b8cd, 0x32402b40, 0xb416, 0x314c1fc2, 0xb4a5b8ce, 0x32f62d5c, 0xb2f8,
    // 0.1741, -0.002281, -0.7383, 0.08325, 7.67e-05, 0.0503, -0.268, 0.0, 0.0886, -0.1239, -0.808, 0.06824, -0.1892, 0.3137, -0.3171, 0.0
    0x98ac3192, 0x2d54b9e8, 0x2a700507, 0xb44a, 0xafee2dac, 0x2c5eba77, 0x3505b20e, 0xb513,
    // -0.0663, 0.1149, 0.1826, 0.1389, -0.1072, 0.05774, -0.12115, 0.0, 0.013, 0.1697, 0.193, 0.2338, 0.1322, 0.09985, -0.17, 0.0
    0x2f5bac3e, 0x307231d8, 0x2b64aedc, 0xafc1, 0x316e22a8, 0x337b322d, 0x2e64303b, 0xb171,
    // -0.1976, 0.1871, 0.2303, 0.05914, 0.02007, 0.0557, -0.1151, 0.0, -0.1174, 0.2656, 0.2515, 0.161, 0.06934, -0.0001348, -0.06757, 0.0
    0x31fdb253, 0x2b92335f, 0x2b212523, 0xaf5e, 0x3440af83, 0x31273406, 0x886b2c70, 0xac53,
    // -0.05118, 0.1332, 0.1255, -0.3284, 0.1384, 0.2081, 0.1555, 0.0, -0.044, 0.10895, 0.1992, -0.3354, 0.1234, 0.11536, 0.1221, 0.0
    0x3043aa8d, 0xb5413004, 0x32a9306e, 0x30fa, 0x2ef9a9a2, 0xb55e3260, 0x2f622fe6, 0x2fd0,
    // -0.07043, 0.0777, 0.1147, -0.3032, -0.00875, 0.11487, 0.2205, 0.0, -0.07904, 0.0559, 0.2211, -0.2659, 0.1554, 0.1904, 0.226, 0.0
    0x2cf9ac82, 0xb4da2f57, 0x2f5aa07b, 0x330e, 0x2b28ad0f, 0xb4413313, 0x321830f9, 0x333b,
    // 0.0258, -0.423, -0.159, -0.0857, 0.1852, 0.03787, -0.02968, 0.0, 0.4233, 0.04626, -0.1531, -0.1447, 0.01123, -0.01659, 0.0494, 0.0
    0xb6c5269b, 0xad7cb117, 0x28d931ed, 0xa799, 0x29ec36c6, 0xb0a1b0e6, 0xa43f21c0, 0x2a53,
    // -0.1721, -0.1708, -0.1888, 0.05618, -0.01906, 0.05865, 0.01688, 0.0, -0.01148, 0.2058, -0.2098, 0.06616, 0.1389, -0.02113, -0.0837, 0.0
    0xb177b182, 0x2b31b20b, 0x2b82a4e1, 0x2452, 0x3296a1e1, 0x2c3cb2b7, 0xa5693072, 0xad5b,
    // -0.432, 0.10785, -0.3567, 0.1007, 0.09174, -0.0968, 0.00455, 0.0, -0.00983, 0.0697, -0.4421, -0.01052, -0.1707, 0.04382, -0.03345, 0.0
    0x2ee7b6e9, 0x2e72b5b5, 0xae322ddf, 0x1ca9, 0x2c76a108, 0xa163b713, 0x299cb176, 0xa848,
    // -0.3386, 0.2217, -0.4177, 0.03128, -0.0337, 0.0991, -0.04758, 0.0, 0.0743, 0.3176, -0.413, -0.1666, -0.1866, 0.2013, -0.04425, 0.0
    0x3318b56b, 0x2801b6af, 0x2e58a850, 0xaa17, 0x35152cc1, 0xb155b69c, 0x3271b1f9, 0xa9aa,
    // -0.07196, 0.229, 0.2708, -0.004253, 0.4412, -0.1875, -0.255, 0.0, -0.1667, 0.1256, 0.148, 0.1473, 0.2576, -0.1805, -0.1321, 0.0
    0x3354ac9b, 0x9c5b3455, 0xb200370f, 0xb414, 0x3005b156, 0x30b730bc, 0xb1c7341f, 0xb03a,
    // -0.1315, 0.1953, 0.2362, 0.03824, 0.4255, -0.208, -0.2268, 0.0, -0.2732, 0.04822, 0.02739, -0.02817, 0.4019, -0.3547, -0.3167, 0.0
    0x3240b035, 0x28e5338f, 0xb2a836cf, 0xb342, 0x2a2cb45f, 0xa7362703, 0xb5ad366e, 0xb511,
    // -0.0997, -0.03424, -0.1484, 0.0439, -0.02074, -0.1635, 0.1969, 0.0, 0.2722, -0.02452, -0.1976, -0.0957, 0.1632, 0.02466, -0.07166, 0.0
    0xa862ae61, 0x299fb0c0, 0xb13ba54f, 0x324d, 0xa647345b, 0xae20b253, 0x26503139, 0xac96,
    // -0.0842, -0.06213, -0.2009, -0.046, -0.1698, -0.1637, 0.1643, 0.0, 0.07166, -0.1796, -0.277, 0.0533, 0.35, -0.03824, -0.0543, 0.0
    0xabf4ad64, 0xa9e3b26e, 0xb13db16f, 0x3142, 0xb1bf2c96, 0x2ad3b46f, 0xa8e5359a, 0xaaf3,
    // 0.2512, -0.2039, -0.31, -0.01852, -0.1316, 0.1755, 0.00891, 0.0, 0.2812, -0.1833, -0.2842, 0.269, -0.09796, 0.0269, -0.07184, 0.0
    0xb2863405, 0xa4beb4f6, 0x319eb036, 0x2090, 0xb1de3480, 0x344eb48c, 0x26e3ae45, 0xac99,
    // 0.2744, -0.125, -0.3367, -0.2393, -0.0544, 0.1179, 0.1498, 0.0, 0.2386, -0.1024, -0.3403, -0.21, 0.006413, 0.0299, -0.05743, 0.0
    0xb0003464, 0xb3a8b563, 0x2f8caaf7, 0x30cb, 0xae8e33a3, 0xb2b8b572, 0x27a81e91, 0xab5a,
    // -0.3213, 0.001846, 0.2283, -0.01168, -0.05563, 0.05, -0.0187, 0.0, -0.3708, 0.0612, 0.2411, 0.04, 0.04712, 0.004887, -0.02792, 0.0
    0x1790b524, 0xa1fb334e, 0x2a66ab1f, 0xa4ca, 0x2bd5b5ef, 0x291f33b7, 0x1d012a08, 0xa726,
    // 0.2852, -0.03714, 0.155, -0.005375, 0.04077, 0.02194, -0.0358, 0.0, 0.3025, 0.002779, 0.1329, 0.01376, 0.046, -0.00995, -0.06256, 0.0
    0xa8c13490, 0x9d8130f6, 0x259e2938, 0xa895, 0x19b134d7, 0x230c3041, 0xa11829e3, 0xac01,
    // -0.0903, 0.04688, 0.1318, -0.0713, 0.103, 0.1686, -0.1315, 0.0, 0.2344, 0.01819, 0.04712, 0.1523, -0.2915, 0.0162, 0.0704, 0.0
    0x2a00adc7, 0xac903038, 0x31652e98, 0xb035, 0x24a83380, 0x30e02a08, 0x2426b4aa, 0x2c81,
    // -0.1055, -0.03156, 0.003304, -0.2285, 0.0662, -0.1268, 0.0807, 0.0, 0.1997, -0.06216, 0.04172, 0.1511, -0.03815, -0.1882, 0.221, 0.0
    0xa80aaec1, 0xb3501ac4, 0xb00f2c3d, 0x2d2a, 0xabf53264, 0x30d62957, 0xb206a8e2, 0x3312,
};
static const uint embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias_dwords[8] = {
    // -0.0386, 0.1534, -0.04492, 0.1755, -0.01128, 0.0741, 0.1515, 0.0905, 0.01259, 0.02919, 0.010574, -0.02113, -0.002394, 0.07025, -0.028, 0.03436
    0x30e9a8f1, 0x319ea9c0, 0x2cbea1c6, 0x2dcb30d9, 0x27792272, 0xa569216a, 0x2c7f98e7, 0x2866a72b,
};

[numthreads(8, 8, 1)]
void fsr4_model_v07_i8_pass0(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(8, 8, 1);
    
    const BufferStorage storage_NHWC_inputs = { buffer_NHWC_inputs };
    const Tensor3h_NHWC< BufferStorage > NHWC_inputs = {
        uint3(3840, 2160, 7), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(3840, 2160, 7), // threadGroupSliceSize
        uint3(3840, 2160, 8), // storageSize
        uint3(16, 61440, 2), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_NHWC_inputs };
    const ConstantBufferStorage<256> storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight = { embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight_dwords };
    const Tensor4h_NHWC< ConstantBufferStorage<256> > embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight = {
        uint4(2, 2, 7, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 7, 16), // threadGroupSliceSize
        uint4(2, 2, 8, 16), // storageSize
        uint4(16, 32, 2, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight };
    
    const ConstantBufferStorage<8> storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias = { embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias };
    
    // quantized_NHWC_/encoder2/ResidualBlock_0/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_0 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_0 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(8, 8, 16);
    const uint3 groupSize_slice_0 = uint3(8, 8, 16);
    const uint3 storageSize_slice_0 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_0 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_0 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_0 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_0 = dot(groupStart_slice_0, tensorByteStrides_slice_0);
    const float quantizationScale_slice_0 = 0.013469061814248562;
    const RWBufferStorage storage_slice_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_0 = { logicalSize_slice_0, groupStart_slice_0, groupSize_slice_0, storageSize_slice_0, tensorByteStrides_slice_0, paddingBegin_slice_0, paddingEnd_slice_0, threadGroupByteOffsetInTensor_slice_0 + 0, quantizationScale_slice_0, storage_slice_0 };
    // /encoder1/DownscaleStridedConv2x2/downscale_conv/Conv (7, 2160, 3840), (16, 7, 2, 2), (16,) -> (16, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    Conv2D_k2s2b(NHWC_inputs, embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight, embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias, slice_0, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_0
#ifdef MLSR_PASS_0_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass0_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // quantized_NHWC_/encoder2/ResidualBlock_0/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_1 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_1 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_1 = uint3(32, 1, 16);
    const uint3 storageSize_slice_1 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_1 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_1 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_1 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_1 = dot(groupStart_slice_1, tensorByteStrides_slice_1);
    const float quantizationScale_slice_1 = 0.013469061814248562;
    const RWBufferStorage storage_slice_1 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_1 = { logicalSize_slice_1, groupStart_slice_1, groupSize_slice_1, storageSize_slice_1, tensorByteStrides_slice_1, paddingBegin_slice_1, paddingEnd_slice_1, threadGroupByteOffsetInTensor_slice_1 + 0, quantizationScale_slice_1, storage_slice_1 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_1, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_0_POST


#ifdef MLSR_PASS_1
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/ConvNextBlock.hlsli"

static const uint embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 5, -9, -2, -12, 2, -7, -4, -11, 3, -6, -7, -9, 7, 6, -4, 7, -3, -7, -17, -12, 14, 4, 2, -19, -3, -5, -1, -7, 7, 12, 10, 9
    0xf4fef705, 0xf5fcf902, 0xf7f9fa03, 0x7fc0607, 0xf4eff9fd, 0xed02040e, 0xf9fffbfd, 0x90a0c07,
    // 0, -2, 3, -11, 5, 9, 0, -1, -2, -6, -7, -6, 6, 13, -6, 5, -7, -4, -17, -14, 20, 11, 0, -14, -9, -4, 3, -7, 9, 13, 16, 22
    0xf503fe00, 0xff000905, 0xfaf9fafe, 0x5fa0d06, 0xf2effcf9, 0xf2000b14, 0xf903fcf7, 0x16100d09,
    // -38, 17, -72, -41, 45, 3, 6, -58, -68, 13, -64, -39, -12, 36, -9, 12, -5, -1, -19, -11, -10, -4, 3, -4, -14, 2, -28, -9, -18, 23, -2, -13
    0xd7b811da, 0xc606032d, 0xd9c00dbc, 0xcf724f4, 0xf5edfffb, 0xfc03fcf6, 0xf7e402f2, 0xf3fe17ee,
    // 6, 1, -3, -8, 1, 4, 2, -5, 11, 4, -3, -14, 4, 9, -9, 2, 5, 2, -21, -17, -9, 0, 2, -16, -6, 10, -6, -5, 3, 14, -25, -13
    0xf8fd0106, 0xfb020401, 0xf2fd040b, 0x2f70904, 0xefeb0205, 0xf00200f7, 0xfbfa0afa, 0xf3e70e03,
    // 2, -2, -8, -3, 2, 4, -2, 2, 7, 7, -6, -14, 2, 10, -10, -1, 10, 4, -10, -5, 11, -12, -3, 2, 1, -12, 19, 0, -3, 7, -11, -6
    0xfdf8fe02, 0x2fe0402, 0xf2fa0707, 0xfff60a02, 0xfbf6040a, 0x2fdf40b, 0x13f401, 0xfaf507fd,
    // 8, 6, -33, 10, -20, 1, -1, 14, 7, -15, 45, 0, -19, 15, -26, 3, 1, 11, -14, 12, -14, 9, 6, 0, 3, -20, -9, -6, 9, 22, -7, 5
    0xadf0608, 0xeff01ec, 0x2df107, 0x3e60fed, 0xcf20b01, 0x609f2, 0xfaf7ec03, 0x5f91609,
    // 8, -8, 3, -12, -31, -13, -1, 8, -5, 32, -3, 13, 4, -7, -10, -18, 65, -33, 91, 8, -5, 0, -19, 33, -10, 3, 75, 33, -29, -95, 1, -45
    0xf403f808, 0x8fff3e1, 0xdfd20fb, 0xeef6f904, 0x85bdf41, 0x21ed00fb, 0x214b03f6, 0xd301a1e3,
    // 17, 20, -12, 20, 4, 21, 7, 27, 3, -6, 20, 2, 0, 1, -12, 16, 7, 1, -1, -3, 11, -24, 1, -9, 4, -9, -2, -2, 1, -15, 18, -17
    0x14f41411, 0x1b071504, 0x214fa03, 0x10f40100, 0xfdff0107, 0xf701e80b, 0xfefef704, 0xef12f101,
    // 8, -6, -10, -8, -9, -3, 1, -4, 3, -14, 44, 2, 1, -1, -8, -9, 11, 8, -3, 9, 4, 4, 8, 1, 10, 8, 0, -4, 17, 7, 4, -6
    0xf8f6fa08, 0xfc01fdf7, 0x22cf203, 0xf7f8ff01, 0x9fd080b, 0x1080404, 0xfc00080a, 0xfa040711,
    // -1, -1, -3, 11, 0, 7, 4, -9, -2, 2, -2, -2, -7, 10, 9, 5, 15, -1, 0, 10, -23, 9, 8, 1, 3, 8, -3, -2, -5, 14, 8, -5
    0xbfdffff, 0xf7040700, 0xfefe02fe, 0x5090af9, 0xa00ff0f, 0x10809e9, 0xfefd0803, 0xfb080efb,
    // -1, 0, -9, 6, -14, 3, 7, -3, -6, 0, -2, -1, 2, 8, -3, 0, 5, 4, 8, 5, 5, 12, 5, 11, 7, 9, -9, -6, -1, -1, 24, 17
    0x6f700ff, 0xfd0703f2, 0xfffe00fa, 0xfd0802, 0x5080405, 0xb050c05, 0xfaf70907, 0x1118ffff,
    // 7, 17, 12, 35, -76, 77, 8, 4, 23, -80, -60, 24, -39, -3, 77, -52, -1, -12, 6, 0, 9, 7, -1, -7, 6, 5, 10, -4, 21, -13, 35, 0
    0x230c1107, 0x4084db4, 0x18c4b017, 0xcc4dfdd9, 0x6f4ff, 0xf9ff0709, 0xfc0a0506, 0x23f315,
    // -1, -7, 11, -8, 4, -7, -2, -18, -5, 8, -12, 5, -7, 3, 9, -20, 3, -13, 5, 4, -6, 5, 4, -5, 5, 0, 0, 8, 3, 2, -11, -12
    0xf80bf9ff, 0xeefef904, 0x5f408fb, 0xec0903f9, 0x405f303, 0xfb0405fa, 0x8000005, 0xf4f50203,
    // -2, -6, 3, -5, -11, -6, 4, -9, -1, -4, -14, -2, -1, -3, -2, -12, -4, 10, -17, 1, -6, 13, 13, -8, -1, -8, 12, 5, -13, -7, -2, 15
    0xfb03fafe, 0xf704faf5, 0xfef2fcff, 0xf4fefdff, 0x1ef0afc, 0xf80d0dfa, 0x50cf8ff, 0xffef9f3,
    // -13, 29, -18, 11, 1, 25, 5, 3, 2, 19, 0, 5, 3, 0, 24, 12, -2, -18, -5, 5, -34, 12, 8, -2, 0, -2, 1, -7, 21, -3, -10, 24
    0xbee1df3, 0x3051901, 0x5001302, 0xc180003, 0x5fbeefe, 0xfe080cde, 0xf901fe00, 0x18f6fd15,
    // -17, 15, -12, 15, 22, 15, 14, 46, 6, 17, -8, 18, 9, 23, 28, 17, -8, -54, 27, -71, -58, -83, 27, -86, -11, -11, -33, 12, -30, -34, -17, -93
    0xff40fef, 0x2e0e0f16, 0x12f81106, 0x111c1709, 0xb91bcaf8, 0xaa1badc6, 0xcdff5f5, 0xa3efdee2,
    // 3, 7, 11, 21, 37, 5, -18, -10, -1, 21, 1, 0, 11, 6, 49, -8, -11, 8, -1, 6, 11, 23, 7, 5, 5, 17, -10, 2, -10, -9, 7, 8
    0x150b0703, 0xf6ee0525, 0x115ff, 0xf831060b, 0x6ff08f5, 0x507170b, 0x2f61105, 0x807f7f6,
    // -26, 11, 0, -19, -48, -3, 1, -5, -15, -11, 15, 13, -9, 4, -47, 23, 6, -11, 19, 2, -6, -10, 15, 5, 6, -1, -24, 3, -8, 3, 7, -3
    0xed000be6, 0xfb01fdd0, 0xd0ff5f1, 0x17d104f7, 0x213f506, 0x50ff6fa, 0x3e8ff06, 0xfd0703f8,
    // -5, -4, 20, -18, -2, -10, -6, -20, -5, -5, -5, 7, 0, -8, 5, -25, 2, -8, 5, -12, -14, -18, -30, -24, -6, -6, -14, 8, -17, -20, -50, -15
    0xee14fcfb, 0xecfaf6fe, 0x7fbfbfb, 0xe705f800, 0xf405f802, 0xe8e2eef2, 0x8f2fafa, 0xf1ceecef,
    // -16, -3, -31, 15, -35, 22, 12, -3, -4, -10, 4, -4, -2, 14, -7, -1, 5, -19, 10, -29, -7, -36, -30, -21, 4, 7, -7, 20, 24, -13, 8, -58
    0xfe1fdf0, 0xfd0c16dd, 0xfc04f6fc, 0xfff90efe, 0xe30aed05, 0xebe2dcf9, 0x14f90704, 0xc608f318,
    // -25, 30, -44, 37, -43, 74, 67, 3, 25, -4, 10, -4, -45, 23, 90, 69, 12, 16, -9, 18, -5, 24, 5, 11, 7, -35, -20, 3, 17, 4, -9, 24
    0x25d41ee7, 0x3434ad5, 0xfc0afc19, 0x455a17d3, 0x12f7100c, 0xb0518fb, 0x3ecdd07, 0x18f70411,
    // -8, -2, 12, -11, -11, -17, -24, -16, -7, -2, 7, 5, -19, -8, 5, -12, -12, 2, 1, -19, -45, 3, -26, -21, -18, 10, 29, 7, -14, 6, 16, 12
    0xf50cfef8, 0xf0e8eff5, 0x507fef9, 0xf405f8ed, 0xed0102f4, 0xebe603d3, 0x71d0aee, 0xc1006f2,
    // 1, 15, 0, 2, 2, 2, -6, 10, -1, 8, -11, -2, 5, 14, 8, -7, 1, -6, 3, 5, 4, -10, -1, 9, -1, 7, -2, 0, -1, -4, 6, 7
    0x2000f01, 0xafa0202, 0xfef508ff, 0xf9080e05, 0x503fa01, 0x9fff604, 0xfe07ff, 0x706fcff,
    // 5, -12, 0, -1, -21, -12, 2, 1, -6, 15, 10, -2, -2, 2, -9, 3, -2, 10, -14, 5, 6, -2, 2, 10, -4, 10, 3, 1, -15, 7, 11, -12
    0xff00f405, 0x102f4eb, 0xfe0a0ffa, 0x3f702fe, 0x5f20afe, 0xa02fe06, 0x1030afc, 0xf40b07f1,
    // -5, -3, 5, -1, -5, 7, 10, -15, 0, -11, 1, -10, -10, -3, -16, 11, -18, -6, -4, 1, 36, -37, -37, -52, -23, -14, 0, 5, 41, -7, 116, -6
    0xff05fdfb, 0xf10a07fb, 0xf601f500, 0xbf0fdf6, 0x1fcfaee, 0xccdbdb24, 0x500f2e9, 0xfa74f929,
    // -7, -8, -8, 1, -17, 12, 24, 16, 6, 3, 6, -1, -13, 15, -15, 1, -6, -1, 8, -3, 0, 3, -3, 2, 0, 0, 1, 2, 4, -2, 16, 2
    0x1f8f8f9, 0x10180cef, 0xff060306, 0x1f10ff3, 0xfd08fffa, 0x2fd0300, 0x2010000, 0x210fe04,
    // 7, 0, 9, 9, 8, 13, 24, 7, 9, -7, -14, 2, -11, 14, -15, -2, -8, 8, -4, 2, 1, 18, 7, 14, 0, -9, -7, 4, -6, 10, -15, 0
    0x9090007, 0x7180d08, 0x2f2f909, 0xfef10ef5, 0x2fc08f8, 0xe071201, 0x4f9f700, 0xf10afa,
    // 9, 13, -12, -9, 14, 5, 6, 8, -3, 7, 17, 6, 9, 8, 11, -17, -2, 13, 4, 5, 58, 23, 13, 11, 3, 12, 1, 2, -6, -2, 38, -19
    0xf7f40d09, 0x806050e, 0x61107fd, 0xef0b0809, 0x5040dfe, 0xb0d173a, 0x2010c03, 0xed26fefa,
    // 11, 11, 5, -10, 35, -15, 5, 16, -11, 10, -7, -14, -20, -5, 20, -12, 5, 10, -12, -2, 8, -23, -2, 27, -3, -6, -1, 15, 10, -7, 21, -4
    0xf6050b0b, 0x1005f123, 0xf2f90af5, 0xf414fbec, 0xfef40a05, 0x1bfee908, 0xffffafd, 0xfc15f90a,
    // -29, 0, -29, 1, -76, 26, 33, 59, 17, 42, 10, -3, -30, 34, -75, 20, 23, 4, 11, -10, 4, -10, -16, 6, -13, 19, 31, 7, 17, 2, 18, -1
    0x1e300e3, 0x3b211ab4, 0xfd0a2a11, 0x14b522e2, 0xf60b0417, 0x6f0f604, 0x71f13f3, 0xff120211,
    // 4, -3, -5, -13, 13, -36, -19, 4, -10, -14, 1, -2, 3, 0, 11, -5, 2, -27, 1, 18, 21, -12, -7, -8, 11, -9, 7, -2, -19, -12, 25, 28
    0xf3fbfd04, 0x4eddc0d, 0xfe01f2f6, 0xfb0b0003, 0x1201e502, 0xf8f9f415, 0xfe07f70b, 0x1c19f4ed,
    // 16, 3, 5, -11, -20, -12, -11, -13, -8, 14, 8, 1, 16, 7, 10, 5, -1, 13, -15, 11, -21, 4, -2, 13, -2, -6, 14, 4, -3, 9, 3, 9
    0xf5050310, 0xf3f5f4ec, 0x1080ef8, 0x50a0710, 0xbf10dff, 0xdfe04eb, 0x40efafe, 0x90309fd,
    // -1, 19, -33, 26, -24, 31, 13, 21, -1, -6, 2, -9, -1, 26, 7, 26, -14, 21, -20, 13, -7, 26, 10, 9, 7, -10, -1, 6, -19, 18, 20, -7
    0x1adf13ff, 0x150d1fe8, 0xf702faff, 0x1a071aff, 0xdec15f2, 0x90a1af9, 0x6fff607, 0xf91412ed,
    // -9, -4, -9, -20, 10, -10, -1, -10, -3, 2, 13, 0, 23, -23, 21, 12, -16, -26, 10, -23, -23, 5, -14, -53, -3, -49, -89, -4, 10, -3, -31, 0
    0xecf7fcf7, 0xf6fff60a, 0xd02fd, 0xc15e917, 0xe90ae6f0, 0xcbf205e9, 0xfca7cffd, 0xe1fd0a,
    // 1, 7, -17, -5, -13, 10, 8, 12, -1, 6, 20, -1, 6, 7, 43, 35, 1, -3, 9, -3, -14, -32, -14, -6, -4, -21, 4, 5, -4, -15, 6, -26
    0xfbef0701, 0xc080af3, 0xff1406ff, 0x232b0706, 0xfd09fd01, 0xfaf2e0f2, 0x504ebfc, 0xe606f1fc,
    // 9, -26, -11, -3, -2, -21, -22, -19, 1, 15, 21, -10, 9, -17, 28, -19, 0, 8, -2, 5, -9, 0, -17, -3, -3, 5, 6, 1, 1, -4, 17, -16
    0xfdf5e609, 0xedeaebfe, 0xf6150f01, 0xed1cef09, 0x5fe0800, 0xfdef00f7, 0x10605fd, 0xf011fc01,
    // -3, 3, -11, 12, 19, -10, -9, 15, 5, -12, -5, -18, -26, -11, -3, 2, 15, 3, -23, 12, -30, 7, 11, 10, -7, 23, -2, -8, 0, 6, 8, 7
    0xcf503fd, 0xff7f613, 0xeefbf405, 0x2fdf5e6, 0xce9030f, 0xa0b07e2, 0xf8fe17f9, 0x7080600,
    // 6, 1, 2, 6, 12, 2, -4, 3, 2, 17, -10, 1, -12, 13, 5, -33, -4, -8, 24, -14, 11, -9, -24, -32, -8, 4, 4, -13, -36, -10, 9, -19
    0x6020106, 0x3fc020c, 0x1f61102, 0xdf050df4, 0xf218f8fc, 0xe0e8f70b, 0xf30404f8, 0xed09f6dc,
    // 0, -19, 16, 8, 72, -16, -24, 34, 34, 5, -35, 34, 20, -11, -128, -13, -6, -3, -7, -8, 5, 11, 26, 26, 9, 4, 10, -7, -10, 20, 27, 3
    0x810ed00, 0x22e8f048, 0x22dd0522, 0xf380f514, 0xf8f9fdfa, 0x1a1a0b05, 0xf90a0409, 0x31b14f6,
    // -3, 7, 4, -6, -7, 5, -5, 7, 1, -9, -2, -6, 2, 4, -14, 7, 17, -2, 16, 0, 20, -22, -1, -3, -8, 21, -9, -1, -15, 9, 26, 0
    0xfa0407fd, 0x7fb05f9, 0xfafef701, 0x7f20402, 0x10fe11, 0xfdffea14, 0xfff715f8, 0x1a09f1,
    // -2, 8, 13, -5, 9, 2, 2, 6, -8, -10, 0, 0, -5, 6, 4, -7, 5, -4, 1, 5, 36, -18, 1, -3, 6, -19, 6, 9, -17, -15, -12, -17
    0xfb0d08fe, 0x6020209, 0xf6f8, 0xf90406fb, 0x501fc05, 0xfd01ee24, 0x906ed06, 0xeff4f1ef,
    // 4, -20, -11, 2, -10, -6, 3, -21, 0, 3, 28, 5, 16, 1, -27, -29, 2, -4, 5, 12, 10, -1, -1, -4, 3, -5, 1, 3, -1, 1, -3, -5
    0x2f5ec04, 0xeb03faf6, 0x51c0300, 0xe3e50110, 0xc05fc02, 0xfcffff0a, 0x301fb03, 0xfbfd01ff,
    // -23, -18, 35, -15, 3, -2, -8, -27, -4, 17, -10, 29, -15, 0, 3, -18, -11, 59, -56, -25, 50, 55, 51, 13, -53, 30, -22, -39, 0, 49, -96, 3
    0xf123eee9, 0xe5f8fe03, 0x1df611fc, 0xee0300f1, 0xe7c83bf5, 0xd333732, 0xd9ea1ecb, 0x3a03100,
    // 4, 11, 3, 24, 8, 0, -5, 6, 6, 30, 6, 2, -6, 5, -6, -1, -2, 2, 1, 4, 1, -13, 7, 7, 6, 2, -3, 9, -15, -14, 8, -17
    0x18030b04, 0x6fb0008, 0x2061e06, 0xfffa05fa, 0x40102fe, 0x707f301, 0x9fd0206, 0xef08f2f1,
    // 11, -7, -7, -4, -33, -32, -9, -16, -7, 3, 42, 5, 12, 4, 4, -11, 9, 0, 15, 7, -1, -2, 3, 5, 7, 17, -5, 5, 12, 5, 22, 0
    0xfcf9f90b, 0xf0f7e0df, 0x52a03f9, 0xf504040c, 0x70f0009, 0x503feff, 0x5fb1107, 0x16050c,
    // 0, -10, -8, -6, -5, -11, -8, -5, 1, -18, 4, 2, 5, -2, -2, 12, -12, 1, 8, -23, 1, -9, -3, -12, 4, -22, -13, 10, 16, -10, -1, 18
    0xfaf8f600, 0xfbf8f5fb, 0x204ee01, 0xcfefe05, 0xe90801f4, 0xf4fdf701, 0xaf3ea04, 0x12fff610,
    // 9, -3, 3, -9, -15, -10, -6, 5, 2, 25, -9, 2, 4, 1, 12, 3, -28, -22, 16, -6, 4, 6, -14, -13, -10, 23, -23, 4, -9, -10, 5, -3
    0xf703fd09, 0x5faf6f1, 0x2f71902, 0x30c0104, 0xfa10eae4, 0xf3f20604, 0x4e917f6, 0xfd05f6f7,
    // -42, 12, 13, 1, 102, 53, 48, 52, 33, -57, -1, -10, 36, 12, -3, 24, -17, -14, 19, 2, 18, 19, 0, 17, 8, 29, -16, -5, -16, 1, 0, -31
    0x10d0cd6, 0x34303566, 0xf6ffc721, 0x18fd0c24, 0x213f2ef, 0x11001312, 0xfbf01d08, 0xe10001f0,
    // -6, 2, -2, -7, 9, 15, 5, -3, 4, 11, -2, 1, 3, -9, 3, -18, -1, -5, -27, -1, -5, -13, 3, -1, 5, -12, 16, 4, 8, -10, -6, -17
    0xf9fe02fa, 0xfd050f09, 0x1fe0b04, 0xee03f703, 0xffe5fbff, 0xff03f3fb, 0x410f405, 0xeffaf608,
    // 11, 0, -5, -2, -5, 9, 2, 11, 1, 29, 0, 0, -9, 14, 1, -24, -22, -8, -14, 3, -16, 17, -3, 2, -6, -2, 7, -14, -6, -13, -30, 5
    0xfefb000b, 0xb0209fb, 0x1d01, 0xe8010ef7, 0x3f2f8ea, 0x2fd11f0, 0xf207fefa, 0x5e2f3fa,
    // -6, -18, 9, -12, -22, 5, 9, 2, 5, 10, 9, -6, 23, -13, -9, 50, -10, -8, -4, -4, -15, -7, -5, 3, 3, 19, -2, -5, 31, -19, 0, 1
    0xf409eefa, 0x20905ea, 0xfa090a05, 0x32f7f317, 0xfcfcf8f6, 0x3fbf9f1, 0xfbfe1303, 0x100ed1f,
    // 15, -1, -15, 14, -27, 4, 7, -4, 4, 8, 9, -36, 1, -19, -21, 11, 3, 51, -27, 44, 19, 30, -22, -4, -11, -34, -49, 50, -9, 42, -95, -16
    0xef1ff0f, 0xfc0704e5, 0xdc090804, 0xbebed01, 0x2ce53303, 0xfcea1e13, 0x32cfdef5, 0xf0a12af7,
    // -8, -24, -14, -19, -32, -5, 4, 9, 6, 5, 38, 1, 33, -30, -23, 12, -28, 1, 13, -14, -10, 18, -5, -16, -7, 12, 0, -4, -19, -17, 4, 18
    0xedf2e8f8, 0x904fbe0, 0x1260506, 0xce9e221, 0xf20d01e4, 0xf0fb12f6, 0xfc000cf9, 0x1204efed,
    // -15, -11, 6, -14, -13, 15, 14, -11, 4, -13, 16, 7, 5, -14, 7, 40, -9, 3, -10, -10, -10, -21, -7, 10, -5, -1, 11, -2, 12, -24, -2, 0
    0xf206f5f1, 0xf50e0ff3, 0x710f304, 0x2807f205, 0xf6f603f7, 0xaf9ebf6, 0xfe0bfffb, 0xfee80c,
    // 5, 3, 0, 2, 18, 14, -4, -10, -3, -11, 4, 4, -1, 19, 18, 0, 24, 13, -12, 2, 35, -3, -1, -18, -4, -39, 5, 1, -26, 15, 5, 22
    0x2000305, 0xf6fc0e12, 0x404f5fd, 0x1213ff, 0x2f40d18, 0xeefffd23, 0x105d9fc, 0x16050fe6,
    // 25, 4, -1, 13, -11, -4, -1, -5, 3, -3, 4, 0, 9, 3, -2, 13, 37, 13, -24, 5, 6, -3, 19, 16, -1, 3, -14, -7, 17, -1, 13, 13
    0xdff0419, 0xfbfffcf5, 0x4fd03, 0xdfe0309, 0x5e80d25, 0x1013fd06, 0xf9f203ff, 0xd0dff11,
    // -34, -2, -50, 8, 57, -37, -7, -85, -39, 28, -34, 3, 0, -26, 36, -8, 23, 11, -4, -1, -3, 0, -13, -17, -6, 4, -14, -7, 2, 3, -3, -34
    0x8cefede, 0xabf9db39, 0x3de1cd9, 0xf824e600, 0xfffc0b17, 0xeff300fd, 0xf9f204fa, 0xdefd0302,
    // 9, 5, -1, 4, 31, -9, -4, 3, -6, 4, -11, 0, -2, 3, 12, -22, 3, 13, -3, 4, 25, 16, 6, -12, -5, -20, -10, 8, -20, 17, -39, -9
    0x4ff0509, 0x3fcf71f, 0xf504fa, 0xea0c03fe, 0x4fd0d03, 0xf4061019, 0x8f6ecfb, 0xf7d911ec,
    // 17, 12, 3, 8, 0, -1, 6, -7, -7, 1, -9, 1, -15, 0, 0, -23, -3, 2, -3, -2, -4, 9, 9, -7, -9, 0, 6, -3, 6, 7, 12, 21
    0x8030c11, 0xf906ff00, 0x1f701f9, 0xe90000f1, 0xfefd02fd, 0xf90909fc, 0xfd0600f7, 0x150c0706,
    // -21, 21, -18, 30, -33, 28, 17, 18, 2, 6, 12, -11, -15, 27, 4, 18, -14, -13, -10, 4, -17, 18, 10, -18, -5, -17, 1, 5, 13, 17, -4, 12
    0x1eee15eb, 0x12111cdf, 0xf50c0602, 0x12041bf1, 0x4f6f3f2, 0xee0a12ef, 0x501effb, 0xcfc110d,
    // 0, -16, 17, 9, -10, -11, 4, -16, 6, 14, -16, -10, 25, -7, 48, -9, -17, 15, 64, 5, 60, -68, 17, -14, -19, 55, 9, 10, 16, 8, -62, 5
    0x911f000, 0xf004f5f6, 0xf6f00e06, 0xf730f919, 0x5400fef, 0xf211bc3c, 0xa0937ed, 0x5c20810,
    // -18, 6, -23, 18, 8, 18, 18, 0, -7, -14, -5, -12, 9, 7, 42, 16, 1, -19, 11, -4, 3, 6, 7, -21, -6, 3, -4, 7, 16, -3, 4, -7
    0x12e906ee, 0x121208, 0xf4fbf2f9, 0x102a0709, 0xfc0bed01, 0xeb070603, 0x7fc03fa, 0xf904fd10,
    // -15, 1, 21, -12, -27, -5, -3, -15, -7, 16, 14, 5, 6, 3, -19, -9, -6, -8, -5, 2, -8, -2, -2, -12, -3, -6, -5, 1, -2, -3, 7, -4
    0xf41501f1, 0xf1fdfbe5, 0x50e10f9, 0xf7ed0306, 0x2fbf8fa, 0xf4fefef8, 0x1fbfafd, 0xfc07fdfe,
    // -6, -3, 4, -9, -12, 1, 0, -16, -9, 12, 7, 13, 10, 5, 2, 1, -4, 10, -19, 5, -6, 22, -1, -5, 7, -21, 14, -1, -3, 6, 21, 40
    0xf704fdfa, 0xf00001f4, 0xd070cf7, 0x102050a, 0x5ed0afc, 0xfbff16fa, 0xff0eeb07, 0x281506fd,
    // -5, -16, 4, -10, -11, -9, 0, -14, -7, 15, 12, 3, 25, -13, -9, 17, 22, -5, -10, 4, -17, -3, 12, 20, 11, 16, -12, 8, 31, -1, 26, -7
    0xf604f0fb, 0xf200f7f5, 0x30c0ff9, 0x11f7f319, 0x4f6fb16, 0x140cfdef, 0x8f4100b, 0xf91aff1f,
    // 69, -35, -14, -74, 115, 21, -32, -3, 2, 84, 66, 14, 38, -15, -59, 89, 5, 11, -14, 15, -41, 40, -5, 0, 8, -22, -19, 9, 13, 12, -49, -7
    0xb6f2dd45, 0xfde01573, 0xe425402, 0x59c5f126, 0xff20b05, 0xfb28d7, 0x9edea08, 0xf9cf0c0d,
    // -10, 10, 6, -4, 26, 12, 6, 7, -5, 15, -9, 3, -22, -1, -5, 8, -11, -8, -5, -11, -25, 48, 12, 4, 11, -5, 11, 1, 3, -3, -17, 34
    0xfc060af6, 0x7060c1a, 0x3f70ffb, 0x8fbffea, 0xf5fbf8f5, 0x40c30e7, 0x10bfb0b, 0x22effd03,
    // 3, 10, -1, -1, 9, 6, -2, 14, 4, 17, -7, 0, 0, 10, -2, 2, -2, 3, -16, 7, 16, 25, 8, 4, 5, -4, 14, -21, -6, -9, 8, -5
    0xffff0a03, 0xefe0609, 0xf91104, 0x2fe0a00, 0x7f003fe, 0x4081910, 0xeb0efc05, 0xfb08f7fa,
    // -17, 10, -19, 11, -8, 38, 16, 10, 5, -3, -15, -9, 9, 4, 18, -11, -6, 8, -13, 7, -4, 17, 3, 13, 6, 16, -8, -7, -10, 4, 15, -20
    0xbed0aef, 0xa1026f8, 0xf7f1fd05, 0xf5120409, 0x7f308fa, 0xd0311fc, 0xf9f81006, 0xec0f04f6,
    // -14, 10, -11, 1, 39, 24, -10, 1, 0, 2, 7, -12, -5, -6, 1, 6, -11, -19, 7, -25, 12, -60, -49, -52, -15, 15, 38, 6, 20, -20, 115, -31
    0x1f50af2, 0x1f61827, 0xf4070200, 0x601fafb, 0xe707edf5, 0xcccfc40c, 0x6260ff1, 0xe173ec14,
    // -18, 4, -12, 16, -12, 27, 10, 25, 11, 2, -13, 1, -17, 20, -15, -13, -10, -9, 5, -8, -16, -10, -10, -13, -3, -2, 1, -3, -18, -5, 4, 2
    0x10f404ee, 0x190a1bf4, 0x1f3020b, 0xf3f114ef, 0xf805f7f6, 0xf3f6f6f0, 0xfd01fefd, 0x204fbee,
    // -11, -5, -18, 4, -38, -7, -8, -5, 2, -2, -14, 5, 1, 6, -38, 27, 5, 5, -3, -2, -24, -10, -9, 3, -1, 9, -7, -3, 7, 7, 10, 7
    0x4eefbf5, 0xfbf8f9da, 0x5f2fe02, 0x1bda0601, 0xfefd0505, 0x3f7f6e8, 0xfdf909ff, 0x70a0707,
};
static const uint embedded_encoder2_ResidualBlock_0_body_conv_dw_bias_dwords[8] = {
    // -0.04575, -0.05304, 0.01109, 0.002184, 0.01557, 0.02075, 0.01074, -0.002586, 0.02672, -0.009445, 0.0345, -0.02151, 0.03333, -0.005478, 0.01535, 0.00797
    0xaacaa9db, 0x187921ae, 0x255023f9, 0x994c2180, 0xa0d626d7, 0xa582286a, 0x9d9c2844, 0x201523dc,
};
static const uint embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 5, -2, 13, -50, -42, 58, -77, 30, 30, -5, 26, 15, 9, 2, -9, -14, 38, -21, -18, 43, 8, 76, -49, 31, -8, 34, -64, 21, 25, 5, -13, 2
    0xce0dfe05, 0x1eb33ad6, 0xf1afb1e, 0xf2f70209, 0x2beeeb26, 0x1fcf4c08, 0x15c022f8, 0x2f30519,
    // -4, 16, -41, 51, -81, 79, -52, 6, 14, -10, -26, -21, 17, -9, 30, 29, -3, -17, -79, -31, -27, -18, 56, -59, 3, 26, 28, 49, -7, 39, -16, -36
    0x33d710fc, 0x6cc4faf, 0xebe6f60e, 0x1d1ef711, 0xe1b1effd, 0xc538eee5, 0x311c1a03, 0xdcf027f9,
    // -28, -2, -11, 93, 30, -38, 66, 3, -66, 4, 71, -32, -9, -9, 39, 7, -24, -35, 16, -40, -30, 91, -16, 5, 127, -20, 90, 40, -7, -33, -34, 41
    0x5df5fee4, 0x342da1e, 0xe04704be, 0x727f7f7, 0xd810dde8, 0x5f05be2, 0x285aec7f, 0x29dedff9,
    // 1, -32, 48, 19, -69, -82, 5, -7, -39, -29, -15, 30, 18, -4, -34, -11, -1, -13, -35, -15, 25, 86, 8, -85, -65, -10, 16, -1, -4, -39, 14, -6
    0x1330e001, 0xf905aebb, 0x1ef1e3d9, 0xf5defc12, 0xf1ddf3ff, 0xab085619, 0xff10f6bf, 0xfa0ed9fc,
    // -20, -6, 69, -83, 78, -74, 37, 10, -22, -2, 57, 16, -18, 26, -68, -24, -5, 52, -15, 64, -43, 73, -17, 49, 21, -70, -27, -15, 25, 35, 21, 77
    0xad45faec, 0xa25b64e, 0x1039feea, 0xe8bc1aee, 0x40f134fb, 0x31ef49d5, 0xf1e5ba15, 0x4d152319,
    // 5, -19, 63, -42, -30, 65, 64, -19, 14, 17, -5, 0, -14, 23, 24, 9, -5, 29, -59, -83, 59, 59, -6, 6, 10, 26, 2, -16, -7, 22, 37, 37
    0xd63fed05, 0xed4041e2, 0xfb110e, 0x91817f2, 0xadc51dfb, 0x6fa3b3b, 0xf0021a0a, 0x252516f9,
    // -3, -10, 0, 17, 28, -78, -12, -27, 8, 1, 7, -34, -15, 0, 1, 3, -3, 12, -28, 1, -22, 81, -20, -55, -57, -47, -9, -10, 14, -6, 15, 45
    0x1100f6fd, 0xe5f4b21c, 0xde070108, 0x30100f1, 0x1e40cfd, 0xc9ec51ea, 0xf6f7d1c7, 0x2d0ffa0e,
    // 25, 39, 11, -38, 2, -48, 41, -51, 47, -6, -2, -44, 58, 11, -58, -7, 22, -30, -55, -32, -27, -12, 6, -8, 7, 37, 3, 26, 9, 6, 20, -11
    0xda0b2719, 0xcd29d002, 0xd4fefa2f, 0xf9c60b3a, 0xe0c9e216, 0xf806f4e5, 0x1a032507, 0xf5140609,
    // 2, -12, 14, 60, 30, 0, -11, -12, 78, 24, 5, -8, -19, 10, -51, -47, -44, 57, -10, -5, -20, -15, 9, -30, -8, -26, 3, -24, -19, -1, 37, 1
    0x3c0ef402, 0xf4f5001e, 0xf805184e, 0xd1cd0aed, 0xfbf639d4, 0xe209f1ec, 0xe803e6f8, 0x125ffed,
    // -43, -99, -41, -35, 14, 30, 44, 35, 28, -99, -27, 33, -65, 11, 5, 13, -7, -2, 31, 32, 12, 11, -67, -26, -35, 17, 42, 94, -46, 47, 28, 56
    0xddd79dd5, 0x232c1e0e, 0x21e59d1c, 0xd050bbf, 0x201ffef9, 0xe6bd0b0c, 0x5e2a11dd, 0x381c2fd2,
    // -8, -18, -24, 21, 17, -58, 59, -27, 6, 25, -103, 18, -22, -19, -1, 91, 3, 7, 72, 2, 55, 52, 8, 50, -55, -11, -9, 10, 2, -8, -91, 20
    0x15e8eef8, 0xe53bc611, 0x12991906, 0x5bffedea, 0x2480703, 0x32083437, 0xaf7f5c9, 0x14a5f802,
    // 9, -11, 80, 16, 47, 63, 28, 33, -78, -6, -13, 43, 12, -50, -116, 2, -5, 2, -26, 8, -58, 7, 4, 11, -7, 5, 46, -60, -84, -18, -23, 55
    0x1050f509, 0x211c3f2f, 0x2bf3fab2, 0x28cce0c, 0x8e602fb, 0xb0407c6, 0xc42e05f9, 0x37e9eeac,
    // 23, -37, -49, -1, -1, 38, 18, 2, -18, 27, 15, 17, 14, 35, -54, -14, -5, 63, -54, 93, -89, 87, -51, 29, 5, -80, -39, -54, 16, 21, 39, 114
    0xffcfdb17, 0x21226ff, 0x110f1bee, 0xf2ca230e, 0x5dca3ffb, 0x1dcd57a7, 0xcad9b005, 0x72271510,
    // -4, -32, -1, -44, 32, 31, -23, -91, -42, 10, 14, -7, 4, -35, 1, -16, -4, 11, 69, 30, 27, 88, -19, 69, -42, -18, -16, -28, 9, 6, -42, 27
    0xd4ffe0fc, 0xa5e91f20, 0xf90e0ad6, 0xf001dd04, 0x1e450bfc, 0x45ed581b, 0xe4f0eed6, 0x1bd60609,
    // 8, -6, -2, -12, -8, -115, 40, 72, 66, 52, -3, 44, -16, 11, -4, -56, -69, 60, 22, -26, -29, -25, 2, -47, 46, -57, -3, 1, -47, -15, 11, 3
    0xf4fefa08, 0x48288df8, 0x2cfd3442, 0xc8fc0bf0, 0xe6163cbb, 0xd102e7e3, 0x1fdc72e, 0x30bf1d1,
    // -45, 9, -26, 28, -25, 74, -15, -43, 15, -2, -1, -8, -13, 68, -62, -6, -72, 61, 19, -11, -18, -24, 11, -30, 40, -24, -12, 12, -54, -8, -1, -48
    0x1ce609d3, 0xd5f14ae7, 0xf8fffe0f, 0xfac244f3, 0xf5133db8, 0xe20be8ee, 0xcf4e828, 0xd0fff8ca,
};
static const uint embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias_dwords[16] = {
    // -0.00639, -0.2012, 0.05078, 0.03372, 0.05817, 0.07983, 0.05902, -0.06964, 0.0815, 0.03943, 0.0881, 0.03625, 0.0748, 0.0326, -0.002914, -0.012825
    0xb2709e8b, 0x28512a80, 0x2d1c2b72, 0xac752b8e, 0x290c2d37, 0x28a42da3, 0x282c2cca, 0xa29199f8,
    // 0.0242, 0.0454, 0.0407, -0.003065, -0.014786, -0.0885, 0.01804, 0.02332, -0.01782, -0.06586, 0.0458, 0.0646, 0.03323, -0.1437, 0.0318, 0.003773
    0x29d02632, 0x9a472936, 0xadaaa392, 0x25f8249e, 0xac37a490, 0x2c2229dd, 0xb0992841, 0x1bba2812,
};
static const uint embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 77, 59, 18, -5, -16, -11, 13, -9, -6, -41, 11, 15, -15, -13, -58, 56, 5, 38, -13, -73, 55, 25, 3, 42, 37, 38, 34, -9, 14, -41, 28, 52
    0xfb123b4d, 0xf70df5f0, 0xf0bd7fa, 0x38c6f3f1, 0xb7f32605, 0x2a031937, 0xf7222625, 0x341cd70e,
    // 27, -43, -82, 22, 12, -98, -34, -53, 42, -78, -58, 46, 52, -32, -26, -46, -8, -1, -52, -49, -36, -13, 20, -20, 14, 71, 63, -6, 42, 23, 6, -45
    0x16aed51b, 0xcbde9e0c, 0x2ec6b22a, 0xd2e6e034, 0xcfccfff8, 0xec14f3dc, 0xfa3f470e, 0xd306172a,
    // 5, 37, -3, -27, -6, -17, -19, 54, 15, 78, -8, 45, -24, -7, 16, 50, 34, 53, -30, 51, -43, -9, 45, 26, -54, -29, -53, 13, 65, -62, 38, 73
    0xe5fd2505, 0x36edeffa, 0x2df84e0f, 0x3210f9e8, 0x33e23522, 0x1a2df7d5, 0xdcbe3ca, 0x4926c241,
    // 28, 41, -8, -6, -68, -16, 39, 12, 51, 25, -28, -8, -55, 34, 10, 32, -7, 21, 99, -53, -30, -70, 32, -61, -33, -30, 3, 37, 4, -20, 37, 25
    0xfaf8291c, 0xc27f0bc, 0xf8e41933, 0x200a22c9, 0xcb6315f9, 0xc320bae2, 0x2503e2df, 0x1925ec04,
    // -13, -26, 5, 30, 75, -39, -8, 1, -7, 38, 11, 54, -75, 39, -12, -29, -60, 32, 38, -86, -70, 41, 9, 8, 8, -13, 1, -21, 12, 20, -38, -23
    0x1e05e6f3, 0x1f8d94b, 0x360b26f9, 0xe3f427b5, 0xaa2620c4, 0x80929ba, 0xeb01f308, 0xe9da140c,
    // 39, 1, -38, -21, -5, -12, -14, 1, 17, -22, -33, 4, 51, -13, 18, 55, -1, 12, 16, 52, 26, 10, 20, -9, 40, 31, 4, -20, 13, 4, -57, 15
    0xebda0127, 0x1f2f4fb, 0x4dfea11, 0x3712f333, 0x34100cff, 0xf7140a1a, 0xec041f28, 0xfc7040d,
    // -67, 47, -34, -5, 70, -4, -59, 27, 51, -17, -64, 64, 57, -20, -32, -2, 59, 3, -49, 31, -18, -14, -20, 9, -48, 16, -1, 14, 3, -30, 74, 6
    0xfbde2fbd, 0x1bc5fc46, 0x40c0ef33, 0xfee0ec39, 0x1fcf033b, 0x9ecf2ee, 0xeff10d0, 0x64ae203,
    // -59, 52, -35, 26, 20, 16, -28, -27, 22, -31, -39, 37, 48, 5, 18, 29, 1, 32, -24, -75, 19, 31, 6, -19, 2, 28, 43, -52, 11, -45, 24, 67
    0x1add34c5, 0xe5e41014, 0x25d9e116, 0x1d120530, 0xb5e82001, 0xed061f13, 0xcc2b1c02, 0x4318d30b,
    // -69, 13, 0, -21, 10, 31, -15, -11, 6, 5, -39, 7, 44, 4, 23, 26, 18, 6, 21, 22, -78, -7, 5, 13, -21, -3, 6, -6, 5, -11, -15, 7
    0xeb000dbb, 0xf5f11f0a, 0x7d90506, 0x1a17042c, 0x16150612, 0xd05f9b2, 0xfa06fdeb, 0x7f1f505,
    // -14, -39, 78, 50, -14, -80, 23, -42, -84, 63, -65, 31, -16, 66, 9, -6, 43, -5, -13, 66, 8, 67, 39, -44, -25, -10, 91, -66, 25, 23, -9, 1
    0x324ed9f2, 0xd617b0f2, 0x1fbf3fac, 0xfa0942f0, 0x42f3fb2b, 0xd4274308, 0xbe5bf6e7, 0x1f71719,
    // 20, 77, -8, 12, 35, -24, 55, -86, 22, -40, 25, -83, 29, 52, -15, 13, -63, 57, 32, 1, -21, 21, -35, 13, -42, -20, 79, -35, -73, -70, 27, 40
    0xcf84d14, 0xaa37e823, 0xad19d816, 0xdf1341d, 0x12039c1, 0xddd15eb, 0xdd4fecd6, 0x281bbab7,
    // -32, 46, -13, -14, 45, 33, 19, 9, 20, 8, 7, -14, 1, -31, -15, 33, -24, 2, -35, 94, 45, -10, 0, -79, -9, -1, -1, -4, 21, -1, -10, 22
    0xf2f32ee0, 0x913212d, 0xf2070814, 0x21f1e101, 0x5edd02e8, 0xb100f62d, 0xfcfffff7, 0x16f6ff15,
    // -4, 18, 1, 56, -93, 127, -82, -28, -18, -22, 37, 78, -78, -12, 24, -46, 26, -45, -14, 73, 15, 58, -14, 45, 4, 24, 45, -62, 9, 11, 16, -10
    0x380112fc, 0xe4ae7fa3, 0x4e25eaee, 0xd218f4b2, 0x49f2d31a, 0x2df23a0f, 0xc22d1804, 0xf6100b09,
    // -48, -9, -43, 79, 2, 9, 80, 41, 17, -47, -52, 41, 11, -17, -5, -13, 76, -50, 13, 21, -103, -40, 116, 85, -10, 114, 55, -35, 115, 24, 2, -28
    0x4fd5f7d0, 0x29500902, 0x29ccd111, 0xf3fbef0b, 0x150dce4c, 0x5574d899, 0xdd3772f6, 0xe4021873,
    // -14, -28, 13, -65, 16, 2, -51, -81, 0, -1, 1, 31, -17, 80, 1, 49, 2, -12, -2, -3, 5, -91, 46, 12, 8, -9, 87, 87, -37, 12, -6, 2
    0xbf0de4f2, 0xafcd0210, 0x1f01ff00, 0x310150ef, 0xfdfef402, 0xc2ea505, 0x5757f708, 0x2fa0cdb,
    // 43, 12, 9, 12, -19, -23, -44, -36, -14, -3, -19, 4, 31, 9, 12, -7, 0, 5, 27, 51, 43, 51, -39, -34, -19, -15, 26, -32, -38, 2, -37, -5
    0xc090c2b, 0xdcd4e9ed, 0x4edfdf2, 0xf90c091f, 0x331b0500, 0xded9332b, 0xe01af1ed, 0xfbdb02da,
};
static const uint embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias_dwords[8] = {
    // -0.0673, 0.11597, -0.0615, -0.02252, -0.006702, 0.006733, -0.01515, 0.03284, -0.01653, 0.01656, -0.0449, -0.03302, -0.01802, -0.09845, -0.0801, 0.06177
    0x2f6cac4f, 0xa5c4abdf, 0x1ee59edd, 0x2834a3c2, 0x243da43b, 0xa83aa9bf, 0xae4da49d, 0x2be8ad20,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass1(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 16), // threadGroupSliceSize
        uint3(1920, 1080, 16), // storageSize
        uint3(16, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.013469061814248562, storage_quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005910119973123074, storage_embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_0_body_conv_dw_bias = { embedded_encoder2_ResidualBlock_0_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_0_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_0_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005874319467693567, storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias = { embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005870396271348, storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias = { embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias };
    
    // fused_quantized_NHWC_/encoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_2 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_2 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 16);
    const uint3 groupSize_slice_2 = uint3(64, 1, 16);
    const uint3 storageSize_slice_2 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_2 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_2 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_2 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_2 = dot(groupStart_slice_2, tensorByteStrides_slice_2);
    const float quantizationScale_slice_2 = 0.021159790456295013;
    const RWBufferStorage storage_slice_2 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_2 = { logicalSize_slice_2, groupStart_slice_2, groupSize_slice_2, storageSize_slice_2, tensorByteStrides_slice_2, paddingBegin_slice_2, paddingEnd_slice_2, threadGroupByteOffsetInTensor_slice_2 + 33177600, quantizationScale_slice_2, storage_slice_2 };
    // ConvNextBlock (16, 1080, 1920), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,) -> (16, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    ConvNextBlock(25.53226708664425, 0.039166126400232315, 42.37851232232464, 0.023596864193677902, quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_0_body_conv_dw_bias, embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias, embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias, slice_2, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_1
#ifdef MLSR_PASS_1_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass1_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/encoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_3 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_3 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_3 = uint3(32, 1, 16);
    const uint3 storageSize_slice_3 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_3 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_3 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_3 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_3 = dot(groupStart_slice_3, tensorByteStrides_slice_3);
    const float quantizationScale_slice_3 = 0.021159790456295013;
    const RWBufferStorage storage_slice_3 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_3 = { logicalSize_slice_3, groupStart_slice_3, groupSize_slice_3, storageSize_slice_3, tensorByteStrides_slice_3, paddingBegin_slice_3, paddingEnd_slice_3, threadGroupByteOffsetInTensor_slice_3 + 33177600, quantizationScale_slice_3, storage_slice_3 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_3, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_1_POST


#ifdef MLSR_PASS_2
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/ConvNextBlock.hlsli"

static const uint embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // -12, 0, -19, -11, -13, 32, -2, 32, 8, 6, 1, -3, 1, -2, 23, 8, 7, 8, 26, -13, -46, -55, -7, -2, -8, 14, -30, 22, 4, -18, -16, 23
    0xf5ed00f4, 0x20fe20f3, 0xfd010608, 0x817fe01, 0xf31a0807, 0xfef9c9d2, 0x16e20ef8, 0x17f0ee04,
    // 16, 2, -3, 6, -34, 10, -26, 8, 11, 0, 2, -15, 15, -4, -7, 8, 8, -34, -10, 26, -19, -3, 24, -41, -16, 2, -24, 11, 43, -16, 6, -35
    0x6fd0210, 0x8e60ade, 0xf102000b, 0x8f9fc0f, 0x1af6de08, 0xd718fded, 0xbe802f0, 0xdd06f02b,
    // 30, 74, 7, 28, -30, 26, 95, -1, -28, -37, 5, 65, -26, 61, 99, 9, 7, 5, -14, 7, 19, -20, -31, -48, -11, 17, 40, 7, 12, 0, 1, -31
    0x1c074a1e, 0xff5f1ae2, 0x4105dbe4, 0x9633de6, 0x7f20507, 0xd0e1ec13, 0x72811f5, 0xe101000c,
    // 0, -11, -10, 4, 20, 33, -7, 10, 6, -8, -7, -15, -2, -5, -1, 24, 11, -21, 12, 11, 33, -31, -27, -34, -23, -18, -19, -10, 15, 6, -24, 5
    0x4f6f500, 0xaf92114, 0xf1f9f806, 0x18fffbfe, 0xb0ceb0b, 0xdee5e121, 0xf6edeee9, 0x5e8060f,
    // 0, 1, 7, -2, 11, 14, -7, -9, 2, -13, 13, 0, -5, 1, -4, -10, 7, -7, 0, 21, -30, -14, 2, 2, 5, 13, -19, -20, 5, -12, -25, -11
    0xfe070100, 0xf7f90e0b, 0xdf302, 0xf6fc01fb, 0x1500f907, 0x202f2e2, 0xeced0d05, 0xf5e7f405,
    // -2, -3, 7, 10, 27, -2, -21, 14, -12, -15, 21, -12, -15, 15, 15, 27, -3, -11, 15, 1, 18, -7, 1, -13, 0, 5, 1, 1, 1, -3, -5, 5
    0xa07fdfe, 0xeebfe1b, 0xf415f1f4, 0x1b0f0ff1, 0x10ff5fd, 0xf301f912, 0x1010500, 0x5fbfd01,
    // 12, 16, -12, 0, 46, 11, 15, 2, 1, 20, 15, -28, -12, -19, 43, 5, -26, -31, -5, -9, -46, -24, 29, -73, 19, -35, -51, 48, -33, -20, 55, -7
    0xf4100c, 0x20f0b2e, 0xe40f1401, 0x52bedf4, 0xf7fbe1e6, 0xb71de8d2, 0x30cddd13, 0xf937ecdf,
    // 7, 21, -8, 17, -8, 14, 0, 11, 0, -50, -9, 0, 7, 7, -13, -16, -9, 3, 15, 8, 2, -22, 2, -5, 3, 4, -9, -4, 0, -10, 11, 10
    0x11f81507, 0xb000ef8, 0xf7ce00, 0xf0f30707, 0x80f03f7, 0xfb02ea02, 0xfcf70403, 0xa0bf600,
    // -2, 11, 7, -28, 10, -5, 2, 34, -10, -6, -1, 2, -18, 12, -39, 27, 3, 4, 1, -9, -28, -14, 5, 2, 1, 13, -9, 3, -5, 2, -8, 4
    0xe4070bfe, 0x2202fb0a, 0x2fffaf6, 0x1bd90cee, 0xf7010403, 0x205f2e4, 0x3f70d01, 0x4f802fb,
    // 0, 11, -1, 4, 9, 6, 5, 13, -9, -10, -14, 22, 10, -4, -5, -11, -3, -14, -5, -8, -31, 32, 17, 20, -16, -17, -12, 2, 7, 4, -7, 18
    0x4ff0b00, 0xd050609, 0x16f2f6f7, 0xf5fbfc0a, 0xf8fbf2fd, 0x141120e1, 0x2f4eff0, 0x12f90407,
    // 11, 18, -4, 4, -11, -9, -1, 9, 4, -8, -14, 19, -11, 6, 3, 17, 6, 10, 37, -33, -34, 22, 7, -49, -15, 6, -11, -3, -32, -17, -20, 31
    0x4fc120b, 0x9fff7f5, 0x13f2f804, 0x110306f5, 0xdf250a06, 0xcf0716de, 0xfdf506f1, 0x1fecefe0,
    // 70, -16, -9, -26, -86, -71, -30, -26, -56, -43, -22, -84, -23, -6, 39, 33, 18, 4, 15, -30, 38, -15, 14, 0, 8, 14, 1, 19, -20, -16, 2, 60
    0xe6f7f046, 0xe6e2b9aa, 0xacead5c8, 0x2127fae9, 0xe20f0412, 0xef126, 0x13010e08, 0x3c02f0ec,
    // -9, 1, -14, 1, -14, -14, 7, 17, -7, -14, -15, 13, 7, -3, -3, -3, 12, -35, -4, -11, -10, -50, 14, 8, -23, -13, -21, 2, -21, -3, 36, 18
    0x1f201f7, 0x1107f2f2, 0xdf1f2f9, 0xfdfdfd07, 0xf5fcdd0c, 0x80ecef6, 0x2ebf3e9, 0x1224fdeb,
    // -2, 16, 5, 12, 23, -2, -14, -2, 1, -16, -2, 11, 10, -1, -3, 17, 7, 10, -11, 12, 11, 7, 25, 4, 5, 11, -22, -33, -9, -30, -12, 6
    0xc0510fe, 0xfef2fe17, 0xbfef001, 0x11fdff0a, 0xcf50a07, 0x419070b, 0xdfea0b05, 0x6f4e2f7,
    // -11, 11, -11, -12, 6, -1, 42, -8, -8, 65, 9, -9, 17, -46, 14, -53, 1, -6, -21, 20, 13, 10, 6, -8, -8, 22, 11, -28, -3, -17, -6, -32
    0xf4f50bf5, 0xf82aff06, 0xf70941f8, 0xcb0ed211, 0x14ebfa01, 0xf8060a0d, 0xe40b16f8, 0xe0faeffd,
    // -14, -9, -4, -2, 18, -18, -2, -20, -15, -4, -17, -2, 2, -22, -6, -25, -12, 43, -8, -41, -42, -3, 89, 12, 39, 4, 112, -10, 36, -18, -94, -65
    0xfefcf7f2, 0xecfeee12, 0xfeeffcf1, 0xe7faea02, 0xd7f82bf4, 0xc59fdd6, 0xf6700427, 0xbfa2ee24,
    // -6, -13, -12, 14, 30, -9, -7, -32, -17, 22, 28, -9, -11, -6, -24, -28, 3, 17, -6, 13, -10, 1, 20, -20, 0, 4, 3, -17, -3, -24, -4, -18
    0xef4f3fa, 0xe0f9f71e, 0xf71c16ef, 0xe4e8faf5, 0xdfa1103, 0xec1401f6, 0xef030400, 0xeefce8fd,
    // 4, 20, 11, 11, 28, -7, 33, -46, -9, 16, -17, -9, 8, -35, -17, -58, -8, -8, -9, 14, 31, 2, 8, -22, -6, -1, -7, -20, -20, -4, -18, -25
    0xb0b1404, 0xd221f91c, 0xf7ef10f7, 0xc6efdd08, 0xef7f8f8, 0xea08021f, 0xecf9fffa, 0xe7eefcec,
    // 1, -6, 15, 9, -17, 15, -3, 13, -11, 7, -18, -6, -15, -9, 7, 46, 14, 2, -7, 7, -16, -2, -11, 1, -5, 10, 0, -1, -3, -12, 35, 33
    0x90ffa01, 0xdfd0fef, 0xfaee07f5, 0x2e07f7f1, 0x7f9020e, 0x1f5fef0, 0xff000afb, 0x2123f4fd,
    // -1, -6, 7, 3, -10, 5, -21, 3, 0, -6, 4, 10, -1, -7, 11, 24, 11, -2, -2, 7, -11, 11, -16, 7, -10, -35, -3, -2, 7, 10, -5, 46
    0x307faff, 0x3eb05f6, 0xa04fa00, 0x180bf9ff, 0x7fefe0b, 0x7f00bf5, 0xfefdddf6, 0x2efb0a07,
    // -19, 18, -38, -57, 2, -68, 10, 20, -96, 19, 39, 36, 9, -66, -82, 78, -3, 18, 1, 1, -40, 22, -36, -7, -2, -50, -10, 14, 5, 4, -9, -31
    0xc7da12ed, 0x140abc02, 0x242713a0, 0x4eaebe09, 0x10112fd, 0xf9dc16d8, 0xef6cefe, 0xe1f70405,
    // -5, -8, 9, 6, -11, 29, -11, 8, -9, -3, 6, 1, 5, -8, 15, 25, 12, 17, -4, 5, -9, 43, -18, 12, -6, -11, 13, 6, 35, -7, -8, 34
    0x609f8fb, 0x8f51df5, 0x106fdf7, 0x190ff805, 0x5fc110c, 0xcee2bf7, 0x60df5fa, 0x22f8f923,
    // 5, -6, 13, 5, -9, 32, -5, 8, -7, -5, -3, 7, 10, -10, 8, 12, -4, -2, 6, -11, 11, -7, -12, -7, -6, -2, 14, 7, -4, 13, 5, -6
    0x50dfa05, 0x8fb20f7, 0x7fdfbf9, 0xc08f60a, 0xf506fefc, 0xf9f4f90b, 0x70efefa, 0xfa050dfc,
    // -7, 5, 24, 1, 10, -32, -13, 1, -2, 3, -13, 13, -12, 37, 7, 28, 4, -1, 2, 15, -11, -9, 9, -5, -1, -5, -7, 3, -3, 17, -4, 11
    0x11805f9, 0x1f3e00a, 0xdf303fe, 0x1c0725f4, 0xf02ff04, 0xfb09f7f5, 0x3f9fbff, 0xbfc11fd,
    // 9, 12, 2, 3, 9, -26, -7, -2, -6, 16, 3, 3, -7, 18, -18, -18, 9, -15, 60, 35, 35, -46, -3, 45, 11, 108, -29, 19, -51, 24, 38, 18
    0x3020c09, 0xfef9e609, 0x30310fa, 0xeeee12f9, 0x233cf109, 0x2dfdd223, 0x13e36c0b, 0x122618cd,
    // 3, -1, 13, 3, 8, -3, 13, -2, 9, 16, -30, -5, 6, 29, 16, 12, -8, 4, 0, -3, -20, -16, -13, 8, -5, -5, 14, 4, 4, 15, 5, 21
    0x30dff03, 0xfe0dfd08, 0xfbe21009, 0xc101d06, 0xfd0004f8, 0x8f3f0ec, 0x40efbfb, 0x15050f04,
    // -3, 1, 17, -1, 9, -14, -6, 9, -1, 16, 4, 6, 35, 31, 13, 31, 3, -5, 3, 5, -13, -4, 3, -3, 3, 6, 5, -4, 13, 10, 1, 2
    0xff1101fd, 0x9faf209, 0x60410ff, 0x1f0d1f23, 0x503fb03, 0xfd03fcf3, 0xfc050603, 0x2010a0d,
    // 4, 3, 8, -11, -19, 4, -9, 11, 5, 5, -12, 8, -7, 9, -6, 20, 1, 3, 28, -24, 48, -28, -8, -15, 12, -3, -16, 30, -12, -8, -2, 18
    0xf5080304, 0xbf704ed, 0x8f40505, 0x14fa09f9, 0xe81c0301, 0xf1f8e430, 0x1ef0fd0c, 0x12fef8f4,
    // 22, 4, 13, 9, -24, -1, -16, 4, 17, -11, -24, -7, 2, 7, 5, 32, -5, -27, -1, 18, -11, -14, -6, -26, 8, -27, -12, 8, 1, -2, -26, -6
    0x90d0416, 0x4f0ffe8, 0xf9e8f511, 0x20050702, 0x12ffe5fb, 0xe6faf2f5, 0x8f4e508, 0xfae6fe01,
    // -50, -6, 43, -28, 68, -67, 90, 41, -2, -33, 21, 7, 9, -17, -80, 25, 12, 12, 15, -5, 32, -26, -1, -12, 25, 2, -1, -14, -5, -17, 2, 14
    0xe42bface, 0x295abd44, 0x715dffe, 0x19b0ef09, 0xfb0f0c0c, 0xf4ffe620, 0xf2ff0219, 0xe02effb,
    // 5, 3, -10, -2, -9, 5, -7, 10, -2, -7, 6, 4, -9, 17, -10, 9, -23, -5, -19, 15, 18, -4, -31, 7, -5, -25, 24, 1, 18, 9, 36, 14
    0xfef60305, 0xaf905f7, 0x406f9fe, 0x9f611f7, 0xfedfbe9, 0x7e1fc12, 0x118e7fb, 0xe240912,
    // 19, 5, 0, -10, -10, 10, 13, 11, 6, -4, -12, -6, 4, 5, 1, -1, 6, -11, 10, -4, 27, 5, 20, -23, -5, -2, -7, 15, -2, -8, 6, -3
    0xf6000513, 0xb0d0af6, 0xfaf4fc06, 0xff010504, 0xfc0af506, 0xe914051b, 0xff9fefb, 0xfd06f8fe,
    // -9, -1, -4, 9, 15, -2, -4, 4, 6, 4, 31, -14, 4, 20, 16, -15, 0, -13, 1, -19, 9, -4, 18, -6, 4, 8, 0, 9, -15, -1, 7, -3
    0x9fcfff7, 0x4fcfe0f, 0xf21f0406, 0xf1101404, 0xed01f300, 0xfa12fc09, 0x9000804, 0xfd07fff1,
    // -8, 12, 13, -35, 28, -40, 32, 8, 9, 10, -25, -19, -26, -19, 29, 26, -6, 48, -8, 124, -46, 63, -33, 19, -14, -73, 5, 34, 68, 16, -11, -2
    0xdd0d0cf8, 0x820d81c, 0xede70a09, 0x1a1dede6, 0x7cf830fa, 0x13df3fd2, 0x2205b7f2, 0xfef51044,
    // -9, -24, 21, -21, 4, -15, 10, 2, 0, -5, 13, -1, 8, 16, -10, 7, -12, -13, 14, -5, -3, -17, 5, 0, -5, -12, -24, -5, -4, -17, 30, 0
    0xeb15e8f7, 0x20af104, 0xff0dfb00, 0x7f61008, 0xfb0ef3f4, 0x5effd, 0xfbe8f4fb, 0x1eeffc,
    // -7, -22, 39, -12, 16, -15, 23, -39, 7, 11, -21, -9, -41, -10, -26, 7, 1, -7, 8, 8, -16, -11, -9, 4, 0, 4, -1, 7, -9, -2, 3, 29
    0xf427eaf9, 0xd917f110, 0xf7eb0b07, 0x7e6f6d7, 0x808f901, 0x4f7f5f0, 0x7ff0400, 0x1d03fef7,
    // 7, 9, 24, 16, -26, 21, 6, -2, 1, 16, -27, -14, -3, -6, -10, 10, 17, -4, 20, 8, 33, 23, 10, 3, 6, 29, -2, 0, -4, -14, 6, -26
    0x10180907, 0xfe0615e6, 0xf2e51001, 0xaf6fafd, 0x814fc11, 0x30a1721, 0xfe1d06, 0xe606f2fc,
    // 3, -7, 7, 9, 13, 17, 2, 0, -2, 4, -2, -3, -4, 2, -1, -16, 12, -16, 29, 6, 10, 16, 12, -4, 9, 12, -15, -10, -31, 4, 11, -3
    0x907f903, 0x2110d, 0xfdfe04fe, 0xf0ff02fc, 0x61df00c, 0xfc0c100a, 0xf6f10c09, 0xfd0b04e1,
    // 15, 10, -41, -51, 54, 61, 0, -44, -1, 30, -87, 21, 57, 55, -16, -25, 16, -4, 27, 19, 20, 27, -13, 7, 11, 5, -3, -9, -4, 12, 12, -20
    0xcdd70a0f, 0xd4003d36, 0x15a91eff, 0xe7f03739, 0x131bfc10, 0x7f31b14, 0xf7fd050b, 0xec0c0cfc,
    // 1, 1, 19, 0, -5, 7, -1, -1, -2, 2, -17, 1, 4, -4, 11, -9, 13, -3, -5, 8, 31, 14, 13, 7, 4, 10, 3, 9, -16, 2, 8, -13
    0x130101, 0xffff07fb, 0x1ef02fe, 0xf70bfc04, 0x8fbfd0d, 0x70d0e1f, 0x9030a04, 0xf30802f0,
    // 0, -7, 11, 1, 4, 22, 13, 3, -2, 7, -8, 2, 1, 4, 1, -10, -6, -7, 23, 20, 3, 25, 1, -1, -11, 2, -41, -36, -1, 8, 8, 15
    0x10bf900, 0x30d1604, 0x2f807fe, 0xf6010401, 0x1417f9fa, 0xff011903, 0xdcd702f5, 0xf0808ff,
    // 4, 0, -5, 14, -9, 65, 3, -11, -6, 15, -5, -20, 28, 6, -11, -20, -21, 6, 12, 0, 25, 25, -8, 9, -13, -2, -17, -23, -8, 11, 15, -2
    0xefb0004, 0xf50341f7, 0xecfb0ffa, 0xecf5061c, 0xc06eb, 0x9f81919, 0xe9effef3, 0xfe0f0bf8,
    // -11, -30, 21, 6, 25, 51, -28, -7, -12, -12, -5, -22, 1, 23, 8, 30, 21, -47, 77, 18, -49, 2, 54, 65, -27, -37, 78, 15, -12, -11, 30, -60
    0x615e2f5, 0xf9e43319, 0xeafbf4f4, 0x1e081701, 0x124dd115, 0x413602cf, 0xf4edbe5, 0xc41ef5f4,
    // -13, 0, 4, -2, -10, 57, -20, 10, -12, 7, 7, -8, 31, 6, 8, -32, -2, 15, 7, 13, 16, 12, 3, -17, -29, -11, -6, -12, -4, 3, 3, -15
    0xfe0400f3, 0xaec39f6, 0xf80707f4, 0xe008061f, 0xd070ffe, 0xef030c10, 0xf4faf5e3, 0xf10303fc,
    // 22, 39, 10, 1, -37, 25, -19, -32, 8, 32, -7, -7, 20, -22, -6, -7, -4, 11, 10, -5, 8, -9, -16, -6, -26, 3, -21, -18, -9, -4, -6, 1
    0x10a2716, 0xe0ed19db, 0xf9f92008, 0xf9faea14, 0xfb0a0bfc, 0xfaf0f708, 0xeeeb03e6, 0x1fafcf7,
    // 6, 6, 4, -9, 24, 20, -17, 2, 9, -1, 15, 12, -5, 4, 11, -28, 4, 23, 15, -3, 5, 2, 1, -5, -4, -17, -7, 14, -26, 2, -5, 7
    0xf7040606, 0x2ef1418, 0xc0fff09, 0xe40b04fb, 0xfd0f1704, 0xfb010205, 0xef9effc, 0x7fb02e6,
    // 4, 1, -11, 17, -2, 43, -8, 16, 15, -1, -20, -1, -5, 0, -3, -16, 0, -13, 2, -3, -3, -26, -5, 24, 0, 7, -9, 2, 20, 0, 13, -22
    0x11f50104, 0x10f82bfe, 0xffecff0f, 0xf0fd00fb, 0xfd02f300, 0x18fbe6fd, 0x2f70700, 0xea0d0014,
    // -85, 26, -41, 46, -33, -89, 31, -27, -34, 43, 13, -38, -59, 29, -8, -14, -8, -4, 23, -6, 6, 20, 16, 9, 3, 22, 6, 6, 11, -8, -6, 15
    0x2ed71aab, 0xe51fa7df, 0xda0d2bde, 0xf2f81dc5, 0xfa17fcf8, 0x9101406, 0x6061603, 0xffaf80b,
    // 9, -3, 8, 4, 10, 30, -6, 5, 4, 7, -13, -2, -3, -8, 15, -9, 2, 2, 33, -9, -28, -7, -3, -16, 4, 10, -6, -11, 4, -20, 12, -6
    0x408fd09, 0x5fa1e0a, 0xfef30704, 0xf70ff8fd, 0xf7210202, 0xf0fdf9e4, 0xf5fa0a04, 0xfa0cec04,
    // 6, 1, 3, 2, 20, 30, -8, 1, 8, 4, -6, 12, -4, -8, 7, 1, -2, 4, -1, 6, 0, 31, -9, 5, 5, 7, 8, -6, 6, -2, 7, -13
    0x2030106, 0x1f81e14, 0xcfa0408, 0x107f8fc, 0x6ff04fe, 0x5f71f00, 0xfa080705, 0xf307fe06,
    // -11, -28, 6, 4, -34, -26, -31, 22, -5, 2, -10, -30, 5, -1, -3, 37, -7, -2, 3, -17, 24, 24, -2, 0, -3, 14, 11, 1, -13, -3, 1, -27
    0x406e4f5, 0x16e1e6de, 0xe2f602fb, 0x25fdff05, 0xef03fef9, 0xfe1818, 0x10b0efd, 0xe501fdf3,
    // 10, 35, -1, -8, -20, 13, 30, -18, -1, 32, 20, -4, -40, -13, -32, -38, 4, 25, 39, 45, 28, -52, -25, -37, 11, -15, -12, -12, 105, -17, -73, 79
    0xf8ff230a, 0xee1e0dec, 0xfc1420ff, 0xdae0f3d8, 0x2d271904, 0xdbe7cc1c, 0xf4f4f10b, 0x4fb7ef69,
    // -1, 2, -2, 7, 16, -20, -10, -10, 2, -8, 2, -7, -9, -4, 2, -23, -3, 10, 6, -9, -7, -10, -30, 20, 9, -6, -2, 8, 1, 15, 3, 21
    0x7fe02ff, 0xf6f6ec10, 0xf902f802, 0xe902fcf7, 0xf7060afd, 0x14e2f6f9, 0x8fefa09, 0x15030f01,
    // -4, -17, -22, -11, 20, -15, 21, 23, -20, -27, 13, 10, -37, 21, 13, 35, 1, 9, -3, 8, -6, 10, -20, 12, 8, -1, -9, -5, 2, 4, 1, -5
    0xf5eaeffc, 0x1715f114, 0xa0de5ec, 0x230d15db, 0x8fd0901, 0xcec0afa, 0xfbf7ff08, 0xfb010402,
    // 5, -7, 3, 10, 8, -11, -5, 7, 8, 6, -6, -2, -4, -7, 5, 9, 13, -4, -12, -16, 3, -2, -17, 1, 0, 15, 14, -4, -5, 5, 46, 11
    0xa03f905, 0x7fbf508, 0xfefa0608, 0x905f9fc, 0xf0f4fc0d, 0x1effe03, 0xfc0e0f00, 0xb2e05fb,
    // 12, -7, 0, -3, 8, -16, -14, -2, 7, 14, 5, 10, -2, -9, 4, 6, 24, 13, 6, -1, 12, 14, 0, 8, 4, 19, -10, -8, 2, 9, 18, 14
    0xfd00f90c, 0xfef2f008, 0xa050e07, 0x604f7fe, 0xff060d18, 0x8000e0c, 0xf8f61304, 0xe120902,
    // 88, -18, 80, 27, -12, 16, 33, 94, 31, 1, 52, 18, -8, 4, -75, 28, 8, -17, -3, -12, -8, -6, -7, -7, 8, 9, -7, 10, -26, 16, -9, -29
    0x1b50ee58, 0x5e2110f4, 0x1234011f, 0x1cb504f8, 0xf4fdef08, 0xf9f9faf8, 0xaf90908, 0xe3f710e6,
    // 4, -8, 1, 1, 14, -1, 8, 10, 15, 12, -16, 3, -9, -5, 14, 0, 11, -7, 21, -20, -8, 10, 14, 4, 6, 0, -27, 4, -8, 10, -18, 16
    0x101f804, 0xa08ff0e, 0x3f00c0f, 0xefbf7, 0xec15f90b, 0x40e0af8, 0x4e50006, 0x10ee0af8,
    // 0, -9, 2, -2, -2, -10, -12, -4, 4, 5, -9, 10, -17, -1, 2, 3, -11, -7, 7, 13, 2, -2, -5, -3, -9, -11, -6, -17, 1, 4, 7, 37
    0xfe02f700, 0xfcf4f6fe, 0xaf70504, 0x302ffef, 0xd07f9f5, 0xfdfbfe02, 0xeffaf5f7, 0x25070401,
    // -6, -8, 21, -7, 5, -50, -16, 21, 20, 3, -10, 4, -6, 1, 4, 92, 5, 3, 10, -3, 0, -36, -17, -3, 6, 17, 7, -13, 12, 3, 8, 26
    0xf915f8fa, 0x15f0ce05, 0x4f60314, 0x5c0401fa, 0xfd0a0305, 0xfdefdc00, 0xf3071106, 0x1a08030c,
    // -2, -10, 33, 22, 0, -26, -6, -29, 18, -12, -43, -18, 20, -29, 33, 17, -19, 46, -59, -41, -66, 18, 31, 127, -7, -14, -43, 1, -118, 47, 29, 82
    0x1621f6fe, 0xe3fae600, 0xeed5f412, 0x1121e314, 0xd7c52eed, 0x7f1f12be, 0x1d5f2f9, 0x521d2f8a,
    // -6, -7, -7, 8, 13, -38, -24, 12, 15, 25, 28, -7, -22, -6, -9, -24, 0, -12, 29, 10, 6, -20, 10, -26, -7, -12, -23, -8, -15, 0, 14, 0
    0x8f9f9fa, 0xce8da0d, 0xf91c190f, 0xe8f7faea, 0xa1df400, 0xe60aec06, 0xf8e9f4f9, 0xe00f1,
    // -13, -29, 43, 12, 12, -49, -43, -19, 14, -30, -27, 0, -9, -7, 7, -2, -6, -6, 15, -6, 8, -9, -11, -26, -5, -12, 3, -15, 3, 10, -12, -13
    0xc2be3f3, 0xedd5cf0c, 0xe5e20e, 0xfe07f9f7, 0xfa0ffafa, 0xe6f5f708, 0xf103f4fb, 0xf3f40a03,
    // 2, -8, -1, 6, 5, -28, 0, 3, -2, 7, -11, -4, -6, 4, 11, 17, -17, -4, -17, -6, 0, -8, -2, 3, 2, 14, 14, -12, 13, 13, 34, -3
    0x6fff802, 0x300e405, 0xfcf507fe, 0x110b04fa, 0xfaeffcef, 0x3fef800, 0xf40e0e02, 0xfd220d0d,
    // 1, -3, -2, -10, 5, -29, -3, -8, -3, 16, 2, 12, -8, 2, 14, 5, -9, 8, -3, -4, 30, 2, 6, 9, 0, -3, -9, -23, 6, 2, 5, 20
    0xf6fefd01, 0xf8fde305, 0xc0210fd, 0x50e02f8, 0xfcfd08f7, 0x906021e, 0xe9f7fd00, 0x14050206,
    // -56, 21, -84, -28, 35, -10, 3, -18, -46, -10, -19, -39, 30, 31, -60, 35, -18, -15, -11, -14, -33, -9, 5, -17, -7, 1, -21, -8, -18, 12, -16, -28
    0xe4ac15c8, 0xee03f623, 0xd9edf6d2, 0x23c41f1e, 0xf2f5f1ee, 0xef05f7df, 0xf8eb01f9, 0xe4f00cee,
    // 3, -5, -3, 1, 13, -21, 9, 1, -7, 7, -10, 4, -10, 3, 5, 7, -18, 7, 17, -14, -6, -3, 1, -1, 1, 9, -12, -3, 7, 9, -43, 0
    0x1fdfb03, 0x109eb0d, 0x4f607f9, 0x70503f6, 0xf21107ee, 0xff01fdfa, 0xfdf40901, 0xd50907,
    // 4, -4, -12, 1, -5, -27, -3, -4, -6, 8, -6, 5, -18, 6, -1, 3, -18, 3, -1, -17, 10, -2, -3, 2, 5, -2, 31, 10, 8, 6, -3, -58
    0x1f4fc04, 0xfcfde5fb, 0x5fa08fa, 0x3ff06ee, 0xefff03ee, 0x2fdfe0a, 0xa1ffe05, 0xc6fd0608,
    // 7, 20, 25, -36, 35, -19, -6, -8, -22, -36, -8, 41, -12, 4, 45, 39, -15, 4, 2, 5, -20, -18, -7, 11, -3, -4, 2, -23, 5, 0, 0, -4
    0xdc191407, 0xf8faed23, 0x29f8dcea, 0x272d04f4, 0x50204f1, 0xbf9eeec, 0xe902fcfd, 0xfc000005,
    // 24, -8, -35, 27, 13, -10, 11, 4, -10, -9, 0, 13, 51, -9, -18, -42, 53, -29, -84, -8, 35, 66, 35, 6, 62, 22, -21, -14, -57, -3, -96, 77
    0x1bddf818, 0x40bf60d, 0xd00f7f6, 0xd6eef733, 0xf8ace335, 0x6234223, 0xf2eb163e, 0x4da0fdc7,
    // 5, -2, 12, 27, -11, 15, 8, -21, -21, 5, 11, 6, 18, -10, -16, 5, -18, 2, 5, 10, -13, -7, -19, -12, 2, -8, 20, -5, 16, -6, 0, -27
    0x1b0cfe05, 0xeb080ff5, 0x60b05eb, 0x5f0f612, 0xa0502ee, 0xf4edf9f3, 0xfb14f802, 0xe500fa10,
    // 11, 9, 25, 1, -51, -9, -11, -4, -12, 3, 5, 10, 16, -8, 28, 8, -6, 1, 1, 3, 4, 2, 7, -6, 2, 0, 10, -3, 8, -7, 5, -6
    0x119090b, 0xfcf5f7cd, 0xa0503f4, 0x81cf810, 0x30101fa, 0xfa070204, 0xfd0a0002, 0xfa05f908,
};
static const uint embedded_encoder2_ResidualBlock_1_body_conv_dw_bias_dwords[8] = {
    // 0.02843, -0.01386, 0.01588, -0.05875, -0.0763, 0.0668, 0.0701, 0.004593, 0.0719, -0.0435, 0.001883, -0.01392, 0.1021, 0.04333, 0.0339, -0.0555
    0xa3192747, 0xab852411, 0x2c46ace2, 0x1cb42c7d, 0xa9912c9a, 0xa32117b6, 0x298c2e89, 0xab1b2857,
};
static const uint embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 0, -5, -50, -5, -31, 21, 8, 34, 5, -55, 6, -18, -20, 10, 15, 11, -5, 10, 5, -13, 14, -25, -9, -29, 12, -19, 7, -1, -54, -1, 70, 8
    0xfbcefb00, 0x220815e1, 0xee06c905, 0xb0f0aec, 0xf3050afb, 0xe3f7e70e, 0xff07ed0c, 0x846ffca,
    // 3, -11, -21, 20, 12, -12, 11, 11, -79, 18, -32, 24, 18, -4, -5, -7, 32, 48, 27, -11, -5, -36, -9, 64, 43, -6, 65, -45, -35, 33, 5, 14
    0x14ebf503, 0xb0bf40c, 0x18e012b1, 0xf9fbfc12, 0xf51b3020, 0x40f7dcfb, 0xd341fa2b, 0xe0521dd,
    // -59, 60, 13, -9, -14, 5, -20, -25, -6, -6, -15, -7, 4, -5, -10, 22, 13, 71, -28, 22, -12, -26, 55, -15, 12, -9, -51, 22, -3, 2, 1, -39
    0xf70d3cc5, 0xe7ec05f2, 0xf9f1fafa, 0x16f6fb04, 0x16e4470d, 0xf137e6f4, 0x16cdf70c, 0xd90102fd,
    // -6, -22, 28, -27, 8, -47, -37, -7, 16, -1, -56, -20, -17, -22, -17, 34, -16, 32, -30, 10, 7, -38, 12, 31, -59, 1, 49, 13, 31, 15, 29, -15
    0xe51ceafa, 0xf9dbd108, 0xecc8ff10, 0x22efeaef, 0xae220f0, 0x1f0cda07, 0xd3101c5, 0xf11d0f1f,
    // 14, 28, 12, -44, 2, 42, 26, 17, -42, 1, -2, 61, 11, 43, 13, 20, -22, 37, -20, 5, 18, 0, 28, -3, -15, -1, 78, 43, -12, -27, 11, -40
    0xd40c1c0e, 0x111a2a02, 0x3dfe01d6, 0x140d2b0b, 0x5ec25ea, 0xfd1c0012, 0x2b4efff1, 0xd80be5f4,
    // 44, 37, 1, 6, 22, -68, -50, 39, -32, -8, 5, 5, -5, 20, 25, 2, -68, -48, 6, 9, -42, 1, 2, 39, -71, -23, 71, -35, 12, -13, 23, 24
    0x601252c, 0x27cebc16, 0x505f8e0, 0x21914fb, 0x906d0bc, 0x270201d6, 0xdd47e9b9, 0x1817f30c,
    // -35, -1, 20, -9, -17, -11, -56, 84, 2, -18, -46, 104, -18, -41, -20, -44, 22, 44, 9, 15, -12, 20, -22, 18, -28, -2, -12, -29, -68, 18, 9, 1
    0xf714ffdd, 0x54c8f5ef, 0x68d2ee02, 0xd4ecd7ee, 0xf092c16, 0x12ea14f4, 0xe3f4fee4, 0x10912bc,
    // 64, 14, 17, 28, 24, -24, 4, 29, -32, 12, -41, -8, 48, -5, -55, 36, -57, -14, -6, -21, -22, -6, -9, -16, -5, 17, -20, 1, 15, 13, -51, -10
    0x1c110e40, 0x1d04e818, 0xf8d70ce0, 0x24c9fb30, 0xebfaf2c7, 0xf0f7faea, 0x1ec11fb, 0xf6cd0d0f,
    // -4, -14, -7, 18, 51, -56, 17, 29, 17, -15, -13, 22, 19, 19, 28, 32, -22, 6, -10, 17, -9, 16, -15, 34, 5, 22, -32, -36, 40, -27, 61, -36
    0x12f9f2fc, 0x1d11c833, 0x16f3f111, 0x201c1313, 0x11f606ea, 0x22f110f7, 0xdce01605, 0xdc3de528,
    // 31, -55, 14, 21, 11, 5, 15, 2, -28, -5, 66, 34, -10, 4, 40, -28, -15, -6, 8, 2, 0, -48, 64, -14, -17, -6, 53, 42, -72, 10, 1, -24
    0x150ec91f, 0x20f050b, 0x2242fbe4, 0xe42804f6, 0x208faf1, 0xf240d000, 0x2a35faef, 0xe8010ab8,
    // -33, -30, -1, -40, 30, 26, 27, 35, -25, -9, -11, -32, 1, 37, 14, -60, 9, 46, 38, 40, 12, -16, 78, 85, -55, 22, 54, 1, -30, -2, -5, -10
    0xd8ffe2df, 0x231b1a1e, 0xe0f5f7e7, 0xc40e2501, 0x28262e09, 0x554ef00c, 0x13616c9, 0xf6fbfee2,
    // -28, -9, 22, 2, 29, -6, 51, -55, -46, 7, -13, 7, -35, -33, -37, 0, -11, 26, 16, 18, 25, -18, 1, -6, -17, -22, 30, 22, -93, 7, 77, 3
    0x216f7e4, 0xc933fa1d, 0x7f307d2, 0xdbdfdd, 0x12101af5, 0xfa01ee19, 0x161eeaef, 0x34d07a3,
    // 22, -65, 28, 25, -49, -21, 26, -17, 4, -11, -32, -16, 13, 54, 16, -18, 25, -7, -31, 14, 23, -1, 41, -79, -14, 22, 38, -92, -3, 59, 6, 49
    0x191cbf16, 0xef1aebcf, 0xf0e0f504, 0xee10360d, 0xee1f919, 0xb129ff17, 0xa42616f2, 0x31063bfd,
    // -24, -38, 13, 17, 33, -5, -13, 15, -56, 28, 48, -33, 8, 35, -55, 32, -34, -40, -86, 42, -14, -48, -35, 19, 16, 48, 4, -23, -54, -30, -22, -10
    0x110ddae8, 0xff3fb21, 0xdf301cc8, 0x20c92308, 0x2aaad8de, 0x13ddd0f2, 0xe9043010, 0xf6eae2ca,
    // 16, 52, 17, -18, -1, -45, -22, -19, -85, 0, 6, -19, -39, -20, -38, -32, -99, -9, 50, 111, 96, 109, -90, -123, 15, -78, 89, -42, -58, 127, -37, -97
    0xee113410, 0xedead3ff, 0xed0600ab, 0xe0daecd9, 0x6f32f79d, 0x85a66d60, 0xd659b20f, 0x9fdb7fc6,
    // -29, 30, 30, -28, 45, -64, -7, -47, 23, -24, 48, 40, -83, -10, 83, 1, -55, -40, 4, 33, 79, -21, 71, -28, -41, -16, -63, 60, 17, -44, 48, 52
    0xe41e1ee3, 0xd1f9c02d, 0x2830e817, 0x153f6ad, 0x2104d8c9, 0xe447eb4f, 0x3cc1f0d7, 0x3430d411,
};
static const uint embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords[16] = {
    // 0.005745, 0.11426, 0.0447, 0.1536, 0.05164, 0.0772, -0.2634, -0.0002282, -0.08356, 0.01591, -0.001752, 0.003582, -0.02641, 0.05054, -0.6343, -0.4001
    0x2f501de2, 0x30ea29b9, 0x2cf12a9c, 0x8b7ab437, 0x2413ad59, 0x1b56972d, 0x2a78a6c3, 0xb667b913,
    // 0.01469, 0.1954, 0.0443, 0.04092, 0.0161, -0.0283, 0.012985, -0.0245, 0.1062, -0.0675, -0.2361, -0.1406, 0.0363, -0.685, -0.12335, 0.01762
    0x32412385, 0x293d29ac, 0xa73f241f, 0xa64622a6, 0xac522ecc, 0xb080b38e, 0xb97b28a5, 0x2483afe5,
};
static const uint embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -6, -30, 33, 4, 17, 0, -42, 3, -61, -52, 1, 11, 54, -49, -43, -57, 29, -21, -38, 11, -59, -4, 16, -59, -6, 48, 25, -67, -16, 127, 83, 10
    0x421e2fa, 0x3d60011, 0xb01ccc3, 0xc7d5cf36, 0xbdaeb1d, 0xc510fcc5, 0xbd1930fa, 0xa537ff0,
    // -1, 27, -35, 8, -37, 8, 21, -45, -46, 8, 16, -44, 13, 67, 11, 18, 31, -39, 64, 71, 11, -11, -41, 55, 65, -57, -11, -86, -50, 48, -15, -26
    0x8dd1bff, 0xd31508db, 0xd41008d2, 0x120b430d, 0x4740d91f, 0x37d7f50b, 0xaaf5c741, 0xe6f130ce,
    // -38, -69, 42, -8, 21, 28, 51, -50, 3, -4, -16, -28, -12, -17, -43, -30, -11, 0, 11, 5, 41, 47, 24, -94, 16, -16, -18, 16, 11, 55, 23, -1
    0xf82abbda, 0xce331c15, 0xe4f0fc03, 0xe2d5eff4, 0x50b00f5, 0xa2182f29, 0x10eef010, 0xff17370b,
    // 45, -17, 5, 26, 2, -66, 32, 37, 29, 42, 20, 72, 11, 56, -8, -1, -13, -12, 42, -50, -58, 26, 7, 0, -18, 65, -43, 18, 41, -20, 17, -36
    0x1a05ef2d, 0x2520be02, 0x48142a1d, 0xfff8380b, 0xce2af4f3, 0x71ac6, 0x12d541ee, 0xdc11ec29,
    // 16, 27, -10, -16, -13, -18, 1, -38, -31, 5, -20, 28, 13, -28, -1, -9, 24, -4, 9, 45, -20, -12, 19, 31, 22, -27, 32, -55, -47, -95, -18, 27
    0xf0f61b10, 0xda01eef3, 0x1cec05e1, 0xf7ffe40d, 0x2d09fc18, 0x1f13f4ec, 0xc920e516, 0x1beea1d1,
    // -24, 2, 8, 10, 2, 1, -56, 25, 26, -32, 31, -3, 48, -17, 0, -13, 48, -18, -23, -28, 37, -8, -34, 13, 19, 64, -4, 21, -19, -26, 17, -10
    0xa0802e8, 0x19c80102, 0xfd1fe01a, 0xf300ef30, 0xe4e9ee30, 0xddef825, 0x15fc4013, 0xf611e6ed,
    // -5, -21, 59, -11, 2, 72, 46, 47, -12, 11, 32, -51, 104, 27, -53, 10, 26, 12, -9, -19, 33, 20, -31, -37, -4, 68, 24, -19, -24, 4, 55, -5
    0xf53bebfb, 0x2f2e4802, 0xcd200bf4, 0xacb1b68, 0xedf70c1a, 0xdbe11421, 0xed1844fc, 0xfb3704e8,
    // 0, -29, 41, -17, -43, -10, 0, -38, -45, 11, 2, -1, -18, -47, 0, -15, 31, 12, 25, -3, -10, 5, -9, -68, 20, -11, -56, -49, -41, 6, -11, 29
    0xef29e300, 0xda00f6d5, 0xff020bd3, 0xf100d1ee, 0xfd190c1f, 0xbcf705f6, 0xcfc8f514, 0x1df506d7,
    // 34, -16, 6, -4, 32, 30, 11, 1, 17, 17, -2, -2, -94, -7, 2, -2, 7, -15, 4, -3, -22, 2, -8, -14, 6, -86, -18, 10, -14, 1, -24, 10
    0xfc06f022, 0x10b1e20, 0xfefe1111, 0xfe02f9a2, 0xfd04f107, 0xf2f802ea, 0xaeeaa06, 0xae801f2,
    // 13, 31, 22, -64, 11, 5, -8, -9, 55, 47, -47, -6, 100, -6, 24, -10, 21, -1, 52, -17, 19, -86, 55, 29, -22, 87, -12, 37, -45, -33, 5, 79
    0xc0161f0d, 0xf7f8050b, 0xfad12f37, 0xf618fa64, 0xef34ff15, 0x1d37aa13, 0x25f457ea, 0x4f05dfd3,
    // -20, -54, 78, -22, 23, -20, 49, 60, 16, -78, 9, 43, 7, -11, -63, 6, 47, -11, 21, -71, 9, -19, -30, -84, 17, -59, -26, -3, -21, 111, 30, 22
    0xea4ecaec, 0x3c31ec17, 0x2b09b210, 0x6c1f507, 0xb915f52f, 0xace2ed09, 0xfde6c511, 0x161e6feb,
    // 55, -22, -7, -3, -6, 31, 14, 26, 41, 18, -6, -55, -29, 0, -27, -20, 5, -21, -51, -22, 17, -7, 11, -6, -19, -13, 11, 43, -10, 18, 5, 8
    0xfdf9ea37, 0x1a0e1ffa, 0xc9fa1229, 0xece500e3, 0xeacdeb05, 0xfa0bf911, 0x2b0bf3ed, 0x80512f6,
    // -47, -11, -72, 45, 58, 0, -3, -3, 9, -61, -5, 1, -44, -35, 3, 3, 41, -12, -51, -26, 26, 29, -30, 55, -5, 8, 4, 13, -43, 67, -9, 0
    0x2db8f5d1, 0xfdfd003a, 0x1fbc309, 0x303ddd4, 0xe6cdf429, 0x37e21d1a, 0xd0408fb, 0xf743d5,
    // -55, 56, -12, 19, 60, 9, -25, 23, -20, 12, 67, 7, -86, 15, 17, 8, 56, 61, 28, -32, 0, -10, -40, 57, 31, -92, 12, 3, -17, -35, -10, -10
    0x13f438c9, 0x17e7093c, 0x7430cec, 0x8110faa, 0xe01c3d38, 0x39d8f600, 0x30ca41f, 0xf6f6ddef,
    // 1, -2, -4, 10, -9, -8, -10, -29, -2, 27, 18, -7, -17, 61, -4, -5, -52, 4, -5, 22, 12, 15, 26, 4, -10, -6, 19, 4, 85, -21, -11, -45
    0xafcfe01, 0xe3f6f8f7, 0xf9121bfe, 0xfbfc3def, 0x16fb04cc, 0x41a0f0c, 0x413faf6, 0xd3f5eb55,
    // 27, 10, 34, -28, -7, 3, 7, 15, 53, 33, -16, 8, -102, -30, -4, 20, 17, 15, -13, -34, -22, -34, 19, 2, -30, -41, 12, 76, -27, 9, -8, 39
    0xe4220a1b, 0xf0703f9, 0x8f02135, 0x14fce29a, 0xdef30f11, 0x213deea, 0x4c0cd7e2, 0x27f809e5,
};
static const uint embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords[8] = {
    // 0.01813, 0.00841, -0.03806, -0.03845, 0.01598, -0.00681, -0.04132, 0.04996, 0.0325, -0.09814, 0.04572, 0.01642, 0.04404, -0.1305, -0.032, -0.01522
    0x204e24a4, 0xa8eca8df, 0x9ef92417, 0x2a65a94a, 0xae482829, 0x243429da, 0xb02d29a3, 0xa3cba819,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass2(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 16), // threadGroupSliceSize
        uint3(1920, 1080, 16), // storageSize
        uint3(16, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        33177600, // threadGroupStorageByteOffset
        0.021159790456295013, storage_fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.006511245854198933, storage_embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_1_body_conv_dw_bias = { embedded_encoder2_ResidualBlock_1_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_1_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_1_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0065826671198010445, storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias = { embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.006587487179785967, storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias = { embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias };
    
    // fused_quantized_NHWC_/encoder2/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_4 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_4 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 16);
    const uint3 groupSize_slice_4 = uint3(64, 1, 16);
    const uint3 storageSize_slice_4 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_4 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_4 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_4 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_4 = dot(groupStart_slice_4, tensorByteStrides_slice_4);
    const float quantizationScale_slice_4 = 0.019636496901512146;
    const RWBufferStorage storage_slice_4 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_4 = { logicalSize_slice_4, groupStart_slice_4, groupSize_slice_4, storageSize_slice_4, tensorByteStrides_slice_4, paddingBegin_slice_4, paddingEnd_slice_4, threadGroupByteOffsetInTensor_slice_4 + 0, quantizationScale_slice_4, storage_slice_4 };
    // ConvNextBlock (16, 1080, 1920), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,) -> (16, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    ConvNextBlock(23.354849554254486, 0.04281765967607498, 43.57405429885922, 0.02294943667948246, fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_1_body_conv_dw_bias, embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias, embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias, slice_4, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_2
#ifdef MLSR_PASS_2_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass2_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/encoder2/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_5 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_5 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_5 = uint3(32, 1, 16);
    const uint3 storageSize_slice_5 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_5 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_5 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_5 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_5 = dot(groupStart_slice_5, tensorByteStrides_slice_5);
    const float quantizationScale_slice_5 = 0.019636496901512146;
    const RWBufferStorage storage_slice_5 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_5 = { logicalSize_slice_5, groupStart_slice_5, groupSize_slice_5, storageSize_slice_5, tensorByteStrides_slice_5, paddingBegin_slice_5, paddingEnd_slice_5, threadGroupByteOffsetInTensor_slice_5 + 0, quantizationScale_slice_5, storage_slice_5 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_5, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_2_POST


#ifdef MLSR_PASS_3
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FusedConv2D_k2s2b_QuantizedOutput.hlsli"

static const uint embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -6, 34, -4, 17, -37, 25, 59, 46, -27, -39, 37, -29, 15, 23, 14, 52, 1, 12, 2, 22, -27, -4, 46, 59, -2, -19, 52, -3, -4, -6, 29, 67
    0x11fc22fa, 0x2e3b19db, 0xe325d9e5, 0x340e170f, 0x16020c01, 0x3b2efce5, 0xfd34edfe, 0x431dfafc,
    // -11, 12, 7, 31, -11, 14, 62, 38, 2, -25, 17, -50, 20, -11, 19, 61, -18, 35, -23, 38, -12, 62, 62, 46, -27, -48, 27, -12, 9, 37, -8, 57
    0x1f070cf5, 0x263e0ef5, 0xce11e702, 0x3d13f514, 0x26e923ee, 0x2e3e3ef4, 0xf41bd0e5, 0x39f82509,
    // 18, 36, -17, 8, 38, 56, 18, 22, 11, 11, 34, -41, 15, 5, -4, 32, -4, 6, 18, -31, -46, 33, 9, 6, 2, -59, -11, 2, -4, 18, -53, -64
    0x8ef2412, 0x16123826, 0xd7220b0b, 0x20fc050f, 0xe11206fc, 0x60921d2, 0x2f5c502, 0xc0cb12fc,
    // 17, 9, -11, 32, 21, 41, 9, 1, 23, 7, 44, -47, 10, 11, -11, 23, 10, -47, 36, -11, -58, -25, -53, -16, -10, -52, -14, 12, -40, -37, 11, -58
    0x20f50911, 0x1092915, 0xd12c0717, 0x17f50b0a, 0xf524d10a, 0xf0cbe7c6, 0xcf2ccf6, 0xc60bdbd8,
    // -13, 32, -28, -3, -17, 14, -18, -16, -21, -8, -34, 21, -29, 42, -47, -8, -8, 15, -11, -23, -8, -2, 0, 25, 5, 15, 9, 20, -26, 19, -46, 9
    0xfde420f3, 0xf0ee0eef, 0x15def8eb, 0xf8d12ae3, 0xe9f50ff8, 0x1900fef8, 0x14090f05, 0x9d213e6,
    // 7, -4, 17, 7, -4, -66, -51, -10, 8, 7, 15, -12, -59, -33, 45, 0, -1, 7, -3, 4, -23, -7, -8, 28, -16, -36, 59, 14, -48, 27, 33, -3
    0x711fc07, 0xf6cdbefc, 0xf40f0708, 0x2ddfc5, 0x4fd07ff, 0x1cf8f9e9, 0xe3bdcf0, 0xfd211bd0,
    // -8, -10, 34, -5, -3, -30, 30, -13, -5, 7, 39, -28, 1, -6, -19, -84, -9, 12, 8, -11, -23, -25, 32, -8, 4, -5, 15, 18, 5, -9, -11, -60
    0xfb22f6f8, 0xf31ee2fd, 0xe42707fb, 0xacedfa01, 0xf5080cf7, 0xf820e7e9, 0x120ffb04, 0xc4f5f705,
    // -17, -18, -10, 3, -13, -29, 8, -44, -14, 45, 5, -46, 5, 3, -39, -56, -28, -15, -6, 4, -3, -37, -7, -24, -10, 37, -15, -3, 29, -10, -30, -73
    0x3f6eeef, 0xd408e3f3, 0xd2052df2, 0xc8d90305, 0x4faf1e4, 0xe8f9dbfd, 0xfdf125f6, 0xb7e2f61d,
    // 8, 6, 46, -5, -11, -51, -7, -12, -4, 1, -31, 4, 10, -15, -1, 9, 14, 33, -2, 10, 10, 25, 8, 40, 19, -13, 16, 1, -3, 25, -20, 4
    0xfb2e0608, 0xf4f9cdf5, 0x4e101fc, 0x9fff10a, 0xafe210e, 0x2808190a, 0x110f313, 0x4ec19fd,
    // -5, 12, -26, 34, 1, 23, -21, -12, 5, -18, -61, 27, 40, 28, -3, -41, 3, -15, 16, 5, 10, -66, 11, 5, 4, 31, 25, -7, -2, -7, 21, 22
    0x22e60cfb, 0xf4eb1701, 0x1bc3ee05, 0xd7fd1c28, 0x510f103, 0x50bbe0a, 0xf9191f04, 0x1615f9fe,
    // 2, -19, -19, 36, -12, -3, -56, -12, -8, -27, 39, -67, -12, 7, 97, -54, 11, 9, -56, 50, 4, 20, -30, 38, 11, -22, 91, -76, 0, 32, 75, -53
    0x24eded02, 0xf4c8fdf4, 0xbd27e5f8, 0xca6107f4, 0x32c8090b, 0x26e21404, 0xb45bea0b, 0xcb4b2000,
    // 11, -5, 39, -22, -5, 6, -33, -5, 17, 40, -14, 13, 24, -26, -43, 34, 18, 7, 22, -19, -9, 17, -10, 33, -5, -2, 42, 23, -14, 22, -51, 17
    0xea27fb0b, 0xfbdf06fb, 0xdf22811, 0x22d5e618, 0xed160712, 0x21f611f7, 0x172afefb, 0x11cd16f2,
    // 5, 20, -19, -54, 0, 2, -13, 24, -10, 22, 41, 16, -13, 16, -4, -4, 19, -12, -37, -18, -18, -89, -70, 8, 6, 31, -2, 0, -40, -7, 47, -68
    0xcaed1405, 0x18f30200, 0x102916f6, 0xfcfc10f3, 0xeedbf413, 0x8baa7ee, 0xfe1f06, 0xbc2ff9d8,
    // -4, 31, 3, -13, 56, -48, -1, 28, -10, 2, 27, 30, 34, -27, 41, -21, -1, 53, -59, -17, -27, 52, 37, 57, 33, -30, 87, -27, -29, 72, 23, -44
    0xf3031ffc, 0x1cffd038, 0x1e1b02f6, 0xeb29e522, 0xefc535ff, 0x392534e5, 0xe557e221, 0xd41748e3,
    // 7, 8, -9, -6, -29, -8, 15, 19, 7, 5, 31, 35, -2, 12, 21, -13, 11, 30, -53, -46, 2, 11, -13, 14, -21, 40, 66, 52, -43, 27, 2, -27
    0xfaf70807, 0x130ff8e3, 0x231f0507, 0xf3150cfe, 0xd2cb1e0b, 0xef30b02, 0x344228eb, 0xe5021bd5,
    // 1, 21, -25, 5, -18, 71, 29, 33, -19, -63, 58, 46, -14, 48, -24, -46, 3, -33, -14, -17, 24, -52, -29, -22, 44, 15, 40, 17, -53, -33, 10, -68
    0x5e71501, 0x211d47ee, 0x2e3ac1ed, 0xd2e830f2, 0xeff2df03, 0xeae3cc18, 0x11280f2c, 0xbc0adfcb,
    // -7, -29, 28, -32, 20, 0, 18, -40, -1, 33, -59, 16, 43, -39, 35, -17, 24, 25, -4, 20, 4, 37, 17, -15, 24, 37, -41, 25, 44, -10, 39, -5
    0xe01ce3f9, 0xd8120014, 0x10c521ff, 0xef23d92b, 0x14fc1918, 0xf1112504, 0x19d72518, 0xfb27f62c,
    // 19, -18, 16, 20, -48, 18, 6, 3, -16, -1, -2, -37, -2, -21, 43, -31, 16, -2, -29, 28, -3, 58, 42, 42, 40, 6, 9, -26, 23, 21, -1, -40
    0x1410ee13, 0x30612d0, 0xdbfefff0, 0xe12bebfe, 0x1ce3fe10, 0x2a2a3afd, 0xe6090628, 0xd8ff1517,
    // -11, -2, -75, -13, 1, 58, 35, 9, -9, 13, -36, -22, -10, 44, -17, -7, -12, 0, -56, -23, -15, 36, 11, -27, -14, 27, -55, -25, -14, 22, 5, -9
    0xf3b5fef5, 0x9233a01, 0xeadc0df7, 0xf9ef2cf6, 0xe9c800f4, 0xe50b24f1, 0xe7c91bf2, 0xf70516f2,
    // -18, 2, -76, -14, 0, 43, 14, 2, -23, 20, -39, -25, -12, 52, -25, -3, -6, 7, -50, -13, -31, 8, -6, -19, -6, 38, -43, -31, -19, 14, -7, -13
    0xf2b402ee, 0x20e2b00, 0xe7d914e9, 0xfde734f4, 0xf3ce07fa, 0xedfa08e1, 0xe1d526fa, 0xf3f90eed,
    // 0, -42, 5, 3, 12, -68, -61, -9, 24, 67, -7, 2, -31, -75, 48, 12, -15, -14, -16, -17, -33, 37, -6, -4, -12, 3, 34, 7, -32, 10, 38, 7
    0x305d600, 0xf7c3bc0c, 0x2f94318, 0xc30b5e1, 0xeff0f2f1, 0xfcfa25df, 0x72203f4, 0x7260ae0,
    // 6, 0, -37, 50, -49, 43, -30, -23, -5, -5, 52, -40, -67, 46, 15, -11, 1, 9, -41, 31, -15, 63, -3, 18, -47, 5, 40, 7, -10, 48, 13, 14
    0x32db0006, 0xe9e22bcf, 0xd834fbfb, 0xf50f2ebd, 0x1fd70901, 0x12fd3ff1, 0x72805d1, 0xe0d30f6,
    // -4, -12, 17, -57, 42, -36, -30, -8, 19, -15, -41, -33, -10, -53, -32, 0, -21, 24, -23, -66, 29, 37, 35, 26, -13, -11, -28, -65, 29, 45, -76, 43
    0xc711f4fc, 0xf8e2dc2a, 0xdfd7f113, 0xe0cbf6, 0xbee918eb, 0x1a23251d, 0xbfe4f5f3, 0x2bb42d1d,
    // 12, 12, 1, -30, 27, -9, -28, -5, 0, -62, 15, -52, -29, -20, 7, -29, -15, 12, -21, -33, 38, 12, 7, 6, -23, -47, -4, -50, 17, 25, -9, 8
    0xe2010c0c, 0xfbe4f71b, 0xcc0fc200, 0xe307ece3, 0xdfeb0cf1, 0x6070c26, 0xcefcd1e9, 0x8f71911,
    // -7, 3, -5, 20, 1, -80, -61, -39, -27, 10, -8, 16, -11, -10, 78, 0, 15, 26, 8, 6, 50, -48, 16, 19, -1, 22, 20, 44, 37, 16, -6, 6
    0x14fb03f9, 0xd9c3b001, 0x10f80ae5, 0x4ef6f5, 0x6081a0f, 0x1310d032, 0x2c1416ff, 0x6fa1025,
    // 3, 19, -18, -7, 2, 10, 43, 43, -21, 4, 70, 23, 0, 48, 39, 18, -9, -7, -33, 4, -3, -16, 17, 30, 55, -26, -18, 42, 4, 14, 18, -71
    0xf9ee1303, 0x2b2b0a02, 0x174604eb, 0x12273000, 0x4dff9f7, 0x1e11f0fd, 0x2aeee637, 0xb9120e04,
    // 28, 26, 22, -7, 12, -12, 12, 6, 27, 26, 6, 49, 25, -16, 0, 1, -7, 33, -9, 5, -43, 61, 45, 12, -12, -19, 26, 85, -12, 51, -34, -2
    0xf9161a1c, 0x60cf40c, 0x31061a1b, 0x100f019, 0x5f721f9, 0xc2d3dd5, 0x551aedf4, 0xfede33f4,
    // -5, 0, 39, -32, 53, -78, -9, -40, 10, 20, -16, 36, 6, -33, -41, -35, -6, 22, -6, 19, -2, 32, 35, 5, 22, 10, 2, 60, 6, 33, -78, -14
    0xe02700fb, 0xd8f7b235, 0x24f0140a, 0xddd7df06, 0x13fa16fa, 0x52320fe, 0x3c020a16, 0xf2b22106,
    // 14, -2, -38, -10, 6, -23, 4, 26, 17, 45, 21, -38, 9, -8, 86, -13, -3, 25, -41, -25, -6, 13, 17, 11, -5, 25, 6, -2, 22, 6, 76, 12
    0xf6dafe0e, 0x1a04e906, 0xda152d11, 0xf356f809, 0xe7d719fd, 0xb110dfa, 0xfe0619fb, 0xc4c0616,
    // 14, 13, -29, 4, 16, -12, 5, 40, 20, 34, 33, -18, 5, -16, 65, 21, 9, 7, -5, 4, -13, -52, 10, 32, 1, 42, 25, 2, 16, -27, 83, 40
    0x4e30d0e, 0x2805f410, 0xee212214, 0x1541f005, 0x4fb0709, 0x200accf3, 0x2192a01, 0x2853e510,
    // -15, -5, 8, 1, -13, 26, 3, 4, -29, 20, 15, 26, -3, -6, -20, 22, 24, 6, -15, 34, -7, 53, 51, 33, 25, 7, 35, -39, -12, 38, -48, 11
    0x108fbf1, 0x4031af3, 0x1a0f14e3, 0x16ecfafd, 0x22f10618, 0x213335f9, 0xd9230719, 0xbd026f4,
    // -7, -40, 14, -9, -10, -19, -5, -27, -27, 37, -19, 24, 22, -27, 50, -8, 14, -22, -31, -8, -2, -25, -21, -29, 47, 51, -45, -33, 20, -17, 36, -39
    0xf70ed8f9, 0xe5fbedf6, 0x18ed25e5, 0xf832e516, 0xf8e1ea0e, 0xe3ebe7fe, 0xdfd3332f, 0xd924ef14,
    // -28, 2, -21, -62, 10, -3, 16, 24, -47, -5, -3, 59, 2, 2, 73, -17, -41, 42, -34, -25, -9, 44, -6, -44, -56, -4, -45, 2, 18, 45, 56, 20
    0xc2eb02e4, 0x1810fd0a, 0x3bfdfbd1, 0xef490202, 0xe7de2ad7, 0xd4fa2cf7, 0x2d3fcc8, 0x14382d12,
    // -19, -14, -63, -19, 64, 7, -40, 7, -63, 41, 0, 14, 19, 30, -36, 25, -31, 24, -49, 22, 29, 36, -80, -39, -85, 15, -43, 11, -2, 39, -33, 28
    0xedc1f2ed, 0x7d80740, 0xe0029c1, 0x19dc1e13, 0x16cf18e1, 0xd9b0241d, 0xbd50fab, 0x1cdf27fe,
    // 16, 19, -37, -12, -44, 98, 3, -6, -14, -21, -76, -36, 5, -18, -63, 46, 36, 0, 29, -29, -8, 4, -25, -2, -41, 23, 6, -11, -6, -84, -27, 96
    0xf4db1310, 0xfa0362d4, 0xdcb4ebf2, 0x2ec1ee05, 0xe31d0024, 0xfee704f8, 0xf50617d7, 0x60e5acfa,
    // 18, 0, 16, -40, -53, 25, 3, -41, -41, -46, 6, -71, -55, -48, 37, 39, 35, 57, -16, 13, -43, 64, -39, -18, 0, -22, -9, -29, 0, -50, 19, 29
    0xd8100012, 0xd70319cb, 0xb906d2d7, 0x2725d0c9, 0xdf03923, 0xeed940d5, 0xe3f7ea00, 0x1d13ce00,
    // 35, 15, 69, 18, -28, -50, -22, 4, 21, -1, 63, -18, -30, -75, 45, 95, 23, 30, 18, 30, -46, 42, 5, 34, 5, -99, 54, 17, -25, 11, 15, -20
    0x12450f23, 0x4eacee4, 0xee3fff15, 0x5f2db5e2, 0x1e121e17, 0x22052ad2, 0x11369d05, 0xec0f0be7,
    // -19, 21, -6, 22, 24, -2, -23, -43, -12, 9, -45, 45, 17, 10, -30, 75, 9, 24, 1, 19, -3, -6, -33, -23, 29, 3, -48, 26, 15, -4, -61, 36
    0x16fa15ed, 0xd5e9fe18, 0x2dd309f4, 0x4be20a11, 0x13011809, 0xe9dffafd, 0x1ad0031d, 0x24c3fc0f,
    // -17, 16, 27, 28, -32, 26, -2, -34, -31, -12, -9, 36, 16, 13, 55, -9, 23, -20, 74, 22, -8, -43, 12, 26, 24, 35, 42, 21, 2, -67, 43, 52
    0x1c1b10ef, 0xdefe1ae0, 0x24f7f4e1, 0xf7370d10, 0x164aec17, 0x1a0cd5f8, 0x152a2318, 0x342bbd02,
    // -11, 36, -19, 22, 66, 82, -31, -33, -2, 42, -59, -14, 42, 48, -69, 19, -3, 16, 34, 13, 9, 2, 8, -10, -9, 24, 32, -10, -10, 18, -27, 12
    0x16ed24f5, 0xdfe15242, 0xf2c52afe, 0x13bb302a, 0xd2210fd, 0xf6080209, 0xf62018f7, 0xce512f6,
    // 14, -27, -30, 27, 26, 93, -43, 28, -30, -2, 14, 51, -11, -3, -4, -24, 5, -97, -1, -26, 1, 63, 5, 67, -16, -7, 22, 60, -45, -23, 8, -25
    0x1be2e50e, 0x1cd55d1a, 0x330efee2, 0xe8fcfdf5, 0xe6ff9f05, 0x43053f01, 0x3c16f9f0, 0xe708e9d3,
    // 2, -15, 14, -10, -13, 88, 1, 19, -24, -15, -15, 75, -7, -23, 38, -26, -3, -36, -30, -35, 33, 76, 17, 37, -20, -2, -59, 80, 4, -15, 7, -16
    0xf60ef102, 0x130158f3, 0x4bf1f1e8, 0xe626e9f9, 0xdde2dcfd, 0x25114c21, 0x50c5feec, 0xf007f104,
    // 8, 36, -95, 20, 57, 97, 14, -1, 50, 7, -59, 5, 15, 44, 13, -30, 18, -13, -30, 7, 1, 37, 9, -23, 24, 23, -47, -13, -28, 0, 53, -12
    0x14a12408, 0xff0e6139, 0x5c50732, 0xe20d2c0f, 0x7e2f312, 0xe9092501, 0xf3d11718, 0xf43500e4,
    // 31, -38, -36, -8, 37, 30, -38, -37, 38, 28, -59, -10, -20, 14, -18, -28, 25, 5, -79, 21, 59, 65, -37, -13, 44, 32, -78, -1, 8, 17, -43, -13
    0xf8dcda1f, 0xdbda1e25, 0xf6c51c26, 0xe4ee0eec, 0x15b10519, 0xf3db413b, 0xffb2202c, 0xf3d51108,
    // 8, -6, 0, -10, -6, -72, -33, 18, 12, 2, -32, 55, 2, -7, 24, 12, 27, -39, 90, -6, -10, -128, 24, 45, 18, -20, 62, -5, -47, -35, -48, 16
    0xf600fa08, 0x12dfb8fa, 0x37e0020c, 0xc18f902, 0xfa5ad91b, 0x2d1880f6, 0xfb3eec12, 0x10d0ddd1,
    // -14, 2, -63, -18, 83, -27, 1, 20, -1, 49, 9, -7, 40, 60, 59, 24, -8, 29, -44, 30, -38, 20, -2, -9, -12, -65, -22, -14, -28, 63, -4, -59
    0xeec102f2, 0x1401e553, 0xf90931ff, 0x183b3c28, 0x1ed41df8, 0xf7fe14da, 0xf2eabff4, 0xc5fc3fe4,
    // -34, 4, 18, -43, -68, 7, -1, -38, 45, 0, -30, -70, 11, 25, 15, 28, -16, -4, 72, -23, -86, -1, 26, 38, 10, -23, 69, -26, 2, 8, 9, 31
    0xd51204de, 0xdaff07bc, 0xbae2002d, 0x1c0f190b, 0xe948fcf0, 0x261affaa, 0xe645e90a, 0x1f090802,
    // -58, 2, -1, -65, -34, -17, -14, -46, -4, 27, -38, -47, 41, 42, 0, 31, -20, 10, 29, -7, -82, -24, -13, -4, 59, 2, 20, -29, 16, -6, -16, 15
    0xbfff02c6, 0xd2f2efde, 0xd1da1bfc, 0x1f002a29, 0xf91d0aec, 0xfcf3e8ae, 0xe314023b, 0xff0fa10,
    // -14, 31, -18, -28, 82, -12, -6, 18, -25, -24, -16, 34, 49, 54, 12, 18, 16, 35, 26, 24, -44, 45, 33, 48, 14, -100, 66, 83, -32, 12, 60, 6
    0xe4ee1ff2, 0x12faf452, 0x22f0e8e7, 0x120c3631, 0x181a2310, 0x30212dd4, 0x53429c0e, 0x63c0ce0,
    // -5, -44, -11, -16, 6, -102, -80, -33, -30, -7, -70, -51, -13, 14, 23, -3, 12, -26, 47, -2, 50, -60, 3, 81, 11, -14, 48, 14, -17, -34, 14, 34
    0xf0f5d4fb, 0xdfb09a06, 0xcdbaf9e2, 0xfd170ef3, 0xfe2fe60c, 0x5103c432, 0xe30f20b, 0x220edeef,
    // -13, -15, -19, -7, 83, 12, -8, -33, -47, 67, -45, -42, 25, -30, -16, 8, 11, 13, -38, 51, 7, 79, 44, 80, -14, -12, 11, 8, 5, 7, -79, -82
    0xf9edf1f3, 0xdff80c53, 0xd6d343d1, 0x8f0e219, 0x33da0d0b, 0x502c4f07, 0x80bf4f2, 0xaeb10705,
    // -21, 64, -76, -14, 58, 54, -22, -76, -19, 71, -77, -23, 47, -3, 83, -18, 25, -22, 15, 3, -47, 3, 46, -3, -20, -9, 12, -6, -34, -28, 89, -36
    0xf2b440eb, 0xb4ea363a, 0xe9b347ed, 0xee53fd2f, 0x30fea19, 0xfd2e03d1, 0xfa0cf7ec, 0xdc59e4de,
    // -30, -10, -83, 24, 44, -39, -58, -58, -4, 34, -56, -19, 26, -28, 40, 42, -20, -31, -66, 5, -26, -12, -19, -25, 4, -38, -20, -26, -6, -24, 18, -14
    0x18adf6e2, 0xc6c6d92c, 0xedc822fc, 0x2a28e41a, 0x5bee1ec, 0xe7edf4e6, 0xe6ecda04, 0xf212e8fa,
    // -14, 44, -32, -50, -12, 57, 15, -5, -3, -22, -2, 1, -10, 16, -96, 35, -1, -31, 18, -70, -35, -36, 51, 42, 12, -63, 10, 18, -29, -49, -84, -7
    0xcee02cf2, 0xfb0f39f4, 0x1feeafd, 0x23a010f6, 0xba12e1ff, 0x2a33dcdd, 0x120ac10c, 0xf9accfe3,
    // -33, 57, 7, 89, 9, -70, 30, 19, -10, 46, 15, -12, 25, 23, -64, -26, -28, 28, 18, 73, -14, -111, 34, -4, -34, 32, 13, -7, -1, 14, -32, -48
    0x590739df, 0x131eba09, 0xf40f2ef6, 0xe6c01719, 0x49121ce4, 0xfc2291f2, 0xf90d20de, 0xd0e00eff,
    // -27, 38, 48, 64, -17, -116, 30, -20, -17, 33, 6, 5, -7, 7, -23, -23, -27, 59, 12, 69, 26, -98, 18, -1, 5, 67, -13, 5, 39, 14, -52, -14
    0x403026e5, 0xec1e8cef, 0x50621ef, 0xe9e907f9, 0x450c3be5, 0xff129e1a, 0x5f34305, 0xf2cc0e27,
    // 23, -34, 13, 3, -5, 13, 30, 44, 13, 31, -31, 20, 0, -42, 82, -31, 19, -4, 29, 4, -58, 36, 7, -18, -52, 30, -11, -20, -9, 10, 36, -37
    0x30dde17, 0x2c1e0dfb, 0x14e11f0d, 0xe152d600, 0x41dfc13, 0xee0724c6, 0xecf51ecc, 0xdb240af7,
    // 47, -11, 55, 12, 41, 105, 35, 62, -45, -13, 53, 27, -1, 0, -91, 4, 35, -30, 78, 41, -35, 57, -9, 13, -4, -21, 6, -5, -57, -24, -101, -66
    0xc37f52f, 0x3e236929, 0x1b35f3d3, 0x4a500ff, 0x294ee223, 0xdf739dd, 0xfb06ebfc, 0xbe9be8c7,
    // 30, 2, 10, 32, -22, 18, -16, -37, -19, 36, 18, -94, -10, 41, -16, 13, 4, -48, 2, -36, 0, 2, 10, -25, -33, -3, -8, -40, -2, 46, 27, -35
    0x200a021e, 0xdbf012ea, 0xa21224ed, 0xdf029f6, 0xdc02d004, 0xe70a0200, 0xd8f8fddf, 0xdd1b2efe,
    // 0, 20, 38, -17, -35, -6, 12, -37, -31, 26, -11, -20, -16, 35, 10, -16, 10, 3, 3, -73, 23, -36, 38, 5, -38, 38, -21, -22, 58, 25, 16, 7
    0xef261400, 0xdb0cfadd, 0xecf51ae1, 0xf00a23f0, 0xb703030a, 0x526dc17, 0xeaeb26da, 0x710193a,
    // 20, -68, 39, 9, -19, -56, -4, 55, -4, -18, 46, -72, -45, -12, -6, 5, 14, -4, -1, 56, -23, 46, -44, 14, 28, -15, -31, 64, 5, -9, 7, 0
    0x927bc14, 0x37fcc8ed, 0xb82eeefc, 0x5faf4d3, 0x38fffc0e, 0xed42ee9, 0x40e1f11c, 0x7f705,
    // -2, 29, -37, -46, 4, 38, 16, 16, 12, -14, -24, -57, -8, 46, -34, 1, -1, 2, 8, -24, 16, 6, -21, -4, -10, 21, -50, 30, 19, 6, -4, 10
    0xd2db1dfe, 0x10102604, 0xc7e8f20c, 0x1de2ef8, 0xe80802ff, 0xfceb0610, 0x1ece15f6, 0xafc0613,
    // -12, 19, 37, 29, 42, -1, -48, -18, -8, 37, -11, 57, 40, 63, -40, 96, -20, 31, 31, 28, 14, -11, -72, -57, 8, 43, -40, 39, 25, 71, -41, 56
    0x1d2513f4, 0xeed0ff2a, 0x39f525f8, 0x60d83f28, 0x1c1f1fec, 0xc7b8f50e, 0x27d82b08, 0x38d74719,
    // -10, 30, 58, 27, -19, 11, -7, 8, 24, -6, 30, 9, 18, 44, 51, 79, -9, 5, 74, 24, -18, -17, -21, -15, 35, -23, 12, 17, 12, 34, 57, 41
    0x1b3a1ef6, 0x8f90bed, 0x91efa18, 0x4f332c12, 0x184a05f7, 0xf1ebefee, 0x110ce923, 0x2939220c,
};
static const uint embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias_dwords[16] = {
    // 0.03482, -0.02565, 0.01471, 0.04706, 0.01219, -0.02467, 0.01805, -0.02177, -0.0282, 0.007755, -0.0134, -0.007015, 0.005848, 0.0002286, 0.00898, 0.007248
    0xa6912875, 0x2a062388, 0xa651223e, 0xa593249f, 0x1ff1a738, 0x9f2fa2dc, 0xb7e1dfd, 0x1f6c2099,
    // -0.04214, 0.068, -0.001688, -0.01825, 0.05545, 0.04108, 0.01421, -0.0606, -0.03029, -0.0433, 0.000432, -0.0138, -0.09125, -0.04968, 0.006016, -0.0252
    0x2c5aa965, 0xa4ac96ea, 0x29422b19, 0xabc22347, 0xa98ba7c1, 0xa3110f14, 0xaa5cadd7, 0xa6741e29,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass3(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 16), // threadGroupSliceSize
        uint3(1920, 1080, 16), // storageSize
        uint3(16, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.019636496901512146, storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<512> storage_embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 16, 32), // threadGroupSliceSize
        uint4(2, 2, 16, 32), // storageSize
        uint4(16, 32, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0025872625410556793, storage_embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias = { embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias };
    
    // Fusedquantized_/encoder2/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_6 = uint3(960, 540, 32);
    const int3 groupStart_slice_6 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_6 = uint3(64, 1, 32);
    const uint3 storageSize_slice_6 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_6 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_6 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_6 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_6 = dot(groupStart_slice_6, tensorByteStrides_slice_6);
    const RWBufferStorage storage_slice_6 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_6 = { logicalSize_slice_6, groupStart_slice_6, groupSize_slice_6, storageSize_slice_6, tensorByteStrides_slice_6, paddingBegin_slice_6, paddingEnd_slice_6, threadGroupByteOffsetInTensor_slice_6 + 33177600, storage_slice_6 };
    // Fusedquantized_/encoder2/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs (16, 1080, 1920), (32, 16, 2, 2), (32,) -> (32, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FusedConv2D_k2s2b_QuantizedOutput(0.014414075762033463, 0.01589442603290081, fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias, slice_6, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_3
#ifdef MLSR_PASS_3_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass3_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // Fusedquantized_/encoder2/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_7 = uint3(960, 540, 32);
    const int3 groupStart_slice_7 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_7 = uint3(32, 1, 32);
    const uint3 storageSize_slice_7 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_7 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_7 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_7 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_7 = dot(groupStart_slice_7, tensorByteStrides_slice_7);
    const RWBufferStorage storage_slice_7 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_7 = { logicalSize_slice_7, groupStart_slice_7, groupSize_slice_7, storageSize_slice_7, tensorByteStrides_slice_7, paddingBegin_slice_7, paddingEnd_slice_7, threadGroupByteOffsetInTensor_slice_7 + 33177600, storage_slice_7 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_7, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_3_POST


#ifdef MLSR_PASS_4
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 9, -16, 2, -14, 3, 15, -3, 6, -8, 21, 8, 2, -5, 11, -5, 16, -4, 7, -40, 10, 41, 1, -7, -45, 4, 34, 2, 18, 39, 17, -38, 22
    0xf202f009, 0x6fd0f03, 0x20815f8, 0x10fb0bfb, 0xad807fc, 0xd3f90129, 0x12022204, 0x16da1127,
    // -18, -15, 18, 11, -30, 9, -2, -9, -11, -6, 5, -8, 5, 3, 39, 15, 16, -47, -7, -11, -2, -16, -24, -18, -14, 27, 0, 42, -2, -16, 39, 17
    0xb12f1ee, 0xf7fe09e2, 0xf805faf5, 0xf270305, 0xf5f9d110, 0xeee8f0fe, 0x2a001bf2, 0x1127f0fe,
    // 63, -9, 56, 8, 59, 62, -20, 72, -15, -48, -3, -17, 43, -44, -21, -61, -29, 23, 80, -11, 16, 17, -23, -2, -13, 24, 14, -21, 12, 6, -3, 2
    0x838f73f, 0x48ec3e3b, 0xeffdd0f1, 0xc3ebd42b, 0xf55017e3, 0xfee91110, 0xeb0e18f3, 0x2fd060c,
    // 5, 2, 9, -10, 4, 7, -8, 24, 6, 15, -6, 18, 8, 23, 2, 11, -29, -38, 16, 13, 24, -1, -18, -49, 32, -24, -6, 1, 35, 17, -44, -46
    0xf6090205, 0x18f80704, 0x12fa0f06, 0xb021708, 0xd10dae3, 0xcfeeff18, 0x1fae820, 0xd2d41123,
    // -16, 3, 0, -1, -5, -11, -4, -5, 5, -2, -3, 16, -10, 15, -14, 5, 24, -5, -16, -28, 7, -7, -2, -29, -8, 5, 0, 3, -4, 3, 21, 4
    0xff0003f0, 0xfbfcf5fb, 0x10fdfe05, 0x5f20ff6, 0xe4f0fb18, 0xe3fef907, 0x30005f8, 0x41503fc,
    // 20, 35, -16, -15, 24, -15, 7, 0, 18, 22, 19, -9, 2, -5, -14, -12, -5, -11, 22, 2, -28, -3, -1, -8, -33, 8, 23, 2, 2, 4, 25, 14
    0xf1f02314, 0x7f118, 0xf7131612, 0xf4f2fb02, 0x216f5fb, 0xf8fffde4, 0x21708df, 0xe190402,
    // 35, -46, 17, -24, 18, 75, 25, 41, 21, 30, 6, 5, -16, 32, -19, 6, 5, -87, 12, -3, 127, -45, -58, -16, 62, -65, 8, 22, -77, -17, -82, 61
    0xe811d223, 0x29194b12, 0x5061e15, 0x6ed20f0, 0xfd0ca905, 0xf0c6d37f, 0x1608bf3e, 0x3daeefb3,
    // -21, 6, 26, 22, -64, 35, -8, -11, 12, 17, -15, -3, 2, -21, 7, 13, -13, -6, 24, 24, -11, 4, 0, 16, -12, 5, 4, 17, -15, 8, -20, -5
    0x161a06eb, 0xf5f823c0, 0xfdf1110c, 0xd07eb02, 0x1818faf3, 0x100004f5, 0x110405f4, 0xfbec08f1,
    // -25, 47, -12, 17, -4, -6, 22, 9, 3, 24, -11, 51, -8, 33, -13, 14, -22, -10, 8, 11, -6, 0, 7, -1, -38, 7, 17, 13, -2, 0, -1, -4
    0x11f42fe7, 0x916fafc, 0x33f51803, 0xef321f8, 0xb08f6ea, 0xff0700fa, 0xd1107da, 0xfcff00fe,
    // -8, 3, -2, 16, -22, 1, -17, 2, -15, 13, 4, 16, 7, -15, -18, 2, 10, 32, -24, 8, 21, -21, 1, -2, -21, 48, 24, 18, 4, -37, -7, -42
    0x10fe03f8, 0x2ef01ea, 0x10040df1, 0x2eef107, 0x8e8200a, 0xfe01eb15, 0x121830eb, 0xd6f9db04,
    // -4, 4, 1, 7, -2, 13, -4, 13, 12, 1, -21, 13, -1, -10, -10, -21, -6, -14, -32, -10, -35, 26, -52, -5, 3, 49, -2, 50, -12, 10, 39, -17
    0x70104fc, 0xdfc0dfe, 0xdeb010c, 0xebf6f6ff, 0xf6e0f2fa, 0xfbcc1add, 0x32fe3103, 0xef270af4,
    // 34, 38, 35, 17, -52, -41, 25, -23, 57, -19, 12, -21, 84, 127, 49, -16, -42, 12, 41, -8, -76, 37, -16, -32, -19, -37, 21, 8, -11, 36, 50, 21
    0x11232622, 0xe919d7cc, 0xeb0ced39, 0xf0317f54, 0xf8290cd6, 0xe0f025b4, 0x815dbed, 0x153224f5,
    // -16, 17, -12, 2, 8, 0, 14, -11, 9, 1, -8, -1, 10, -14, 3, -1, 19, 7, -18, 19, -2, -8, -28, -17, -37, -34, 30, -30, 8, -6, -24, -5
    0x2f411f0, 0xf50e0008, 0xfff80109, 0xff03f20a, 0x13ee0713, 0xefe4f8fe, 0xe21ededb, 0xfbe8fa08,
    // -4, -10, 8, 21, 7, 7, 17, 21, 18, 4, -15, -5, -1, -17, -19, -6, 12, 18, 7, -14, -6, -17, -22, -8, 7, -1, 7, -19, 13, -22, 47, 12
    0x1508f6fc, 0x15110707, 0xfbf10412, 0xfaedefff, 0xf207120c, 0xf8eaeffa, 0xed07ff07, 0xc2fea0d,
    // 23, -34, 16, 8, -13, -12, -3, -2, -15, 6, 1, -13, -12, -32, 13, 26, -9, -5, 16, 4, -7, 12, -1, 28, 22, -14, 4, -13, -26, -5, -3, 10
    0x810de17, 0xfefdf4f3, 0xf30106f1, 0x1a0de0f4, 0x410fbf7, 0x1cff0cf9, 0xf304f216, 0xafdfbe6,
    // 13, 14, 12, -6, 8, 35, -47, 29, -5, 0, 3, 21, -20, 33, 3, -21, 6, -78, 80, -10, 90, 14, -41, 42, 23, 40, -71, 104, -16, -16, 49, 25
    0xfa0c0e0d, 0x1dd12308, 0x150300fb, 0xeb0321ec, 0xf650b206, 0x2ad70e5a, 0x68b92817, 0x1931f0f0,
    // 5, -33, 19, 10, -2, 16, -21, 65, 19, -19, -40, -12, -42, 21, -44, -55, -8, 16, -22, 0, 8, -9, 6, -24, -4, -14, 0, -23, -2, -11, -17, 6
    0xa13df05, 0x41eb10fe, 0xf4d8ed13, 0xc9d415d6, 0xea10f8, 0xe806f708, 0xe900f2fc, 0x6eff5fe,
    // -14, -54, 12, -11, -22, -16, -18, 36, -20, -26, -19, -23, 6, -25, -29, -10, -9, 2, 4, 3, -4, 6, -10, 20, 7, -5, 3, -8, 5, 3, -61, -1
    0xf50ccaf2, 0x24eef0ea, 0xe9ede6ec, 0xf6e3e706, 0x30402f7, 0x14f606fc, 0xf803fb07, 0xffc30305,
    // 7, -4, 14, 11, -23, -10, 1, 11, -9, 5, 27, -3, -17, -2, 12, -6, -21, -47, 22, -5, -34, 10, -8, -18, 21, -25, -44, 1, -28, 2, 55, 11
    0xb0efc07, 0xb01f6e9, 0xfd1b05f7, 0xfa0cfeef, 0xfb16d1eb, 0xeef80ade, 0x1d4e715, 0xb3702e4,
    // 11, 10, -14, 5, -5, -12, -12, -3, 6, -4, 9, 12, 2, -4, -4, 1, -24, 49, 41, -6, 30, -30, -10, 29, 7, 3, -42, 43, 40, -22, -2, 90
    0x5f20a0b, 0xfdf4f4fb, 0xc09fc06, 0x1fcfc02, 0xfa2931e8, 0x1df6e21e, 0x2bd60307, 0x5afeea28,
    // 30, 24, 76, 8, 14, 98, -105, -5, 72, -27, 1, 19, 106, 30, -47, 25, -17, 1, 45, -3, 2, -35, 23, -32, -1, -7, 13, 9, 15, -32, -34, 49
    0x84c181e, 0xfb97620e, 0x1301e548, 0x19d11e6a, 0xfd2d01ef, 0xe017dd02, 0x90df9ff, 0x31dee00f,
    // 13, -18, 14, -8, 4, 3, -5, -7, -3, 3, 9, 8, 6, 10, 23, 13, 24, -19, -12, 21, 25, 6, 3, 35, 22, 17, -38, 24, -13, -7, -8, 11
    0xf80eee0d, 0xf9fb0304, 0x80903fd, 0xd170a06, 0x15f4ed18, 0x23030619, 0x18da1116, 0xbf8f9f3,
    // 1, -13, 0, -3, 3, 1, -1, 10, -14, 3, 9, -8, 0, -8, 15, 9, 3, -9, -14, -19, 8, -5, -5, -10, -9, -4, -21, 2, 13, 9, 3, 4
    0xfd00f301, 0xaff0103, 0xf80903f2, 0x90ff800, 0xedf2f703, 0xf6fbfb08, 0x2ebfcf7, 0x403090d,
    // 13, 38, 7, 20, -29, -9, 4, -24, 9, -6, 18, -19, 71, 27, -32, 26, 2, 6, -3, -10, 4, -3, 1, 1, 1, 6, 11, -5, -8, 2, 15, -8
    0x1407260d, 0xe804f7e3, 0xed12fa09, 0x1ae01b47, 0xf6fd0602, 0x101fd04, 0xfb0b0601, 0xf80f02f8,
    // -36, 18, -19, 21, -30, 11, -65, -11, 14, -25, -18, -23, 12, 10, 10, -49, 15, 106, 81, 66, -57, -49, -53, -26, -40, -21, 3, 75, 36, -16, 43, -1
    0x15ed12dc, 0xf5bf0be2, 0xe9eee70e, 0xcf0a0a0c, 0x42516a0f, 0xe6cbcfc7, 0x4b03ebd8, 0xff2bf024,
    // -28, 2, -17, -12, 71, 36, -17, -46, -12, 28, 33, -18, 29, 6, 22, -59, 2, -7, 0, -1, 7, 2, 9, -6, -8, 4, 1, 7, -10, -7, 4, -9
    0xf4ef02e4, 0xd2ef2447, 0xee211cf4, 0xc516061d, 0xff00f902, 0xfa090207, 0x70104f8, 0xf704f9f6,
    // 10, 34, 38, -19, -9, -11, 5, 12, -5, 31, -6, 15, -10, 48, 16, 14, 2, 3, -7, -3, -24, 1, 11, -4, 1, 7, 9, -11, 6, -1, 16, 20
    0xed26220a, 0xc05f5f7, 0xffa1ffb, 0xe1030f6, 0xfdf90302, 0xfc0b01e8, 0xf5090701, 0x1410ff06,
    // 27, 6, -3, -8, 5, -8, 4, -20, 22, 7, 6, -13, 4, -18, -2, 25, 29, 35, 3, 0, -39, -11, 20, -27, -15, 25, 38, 27, -15, 11, -9, -33
    0xf8fd061b, 0xec04f805, 0xf3060716, 0x19feee04, 0x3231d, 0xe514f5d9, 0x1b2619f1, 0xdff70bf1,
    // -1, 7, -6, 18, 37, 5, 8, 18, 14, 18, 19, 4, -16, -19, -16, 6, 1, 11, -7, -28, -8, -41, -7, -26, -12, -27, -32, -1, 34, -22, 12, -23
    0x12fa07ff, 0x12080525, 0x413120e, 0x6f0edf0, 0xe4f90b01, 0xe6f9d7f8, 0xffe0e5f4, 0xe90cea22,
    // 28, 4, -4, -71, 24, -36, 18, 74, -63, -9, -16, -24, 21, 31, 112, 33, -11, -35, 16, 5, 45, 7, 5, 16, -37, 54, 6, 11, 13, -42, -67, -37
    0xb9fc041c, 0x4a12dc18, 0xe8f0f7c1, 0x21701f15, 0x510ddf5, 0x1005072d, 0xb0636db, 0xdbbdd60d,
    // -18, 22, -14, 3, 2, -17, -20, -32, 12, -23, -19, 1, 18, -8, -44, -17, -36, 38, -39, 39, -6, -6, -15, -19, -40, -18, 31, 18, -16, 17, -53, -26
    0x3f216ee, 0xe0ecef02, 0x1ede90c, 0xefd4f812, 0x27d926dc, 0xedf1fafa, 0x121feed8, 0xe6cb11f0,
    // -36, -6, 9, 38, 8, 17, 17, 1, -15, -11, 12, 7, -3, -15, -25, -5, 8, -5, 10, -10, -19, 1, 5, -23, 11, 7, 8, -3, -22, 14, -2, -16
    0x2609fadc, 0x1111108, 0x70cf5f1, 0xfbe7f1fd, 0xf60afb08, 0xe90501ed, 0xfd08070b, 0xf0fe0eea,
    // 16, 35, -21, -13, -44, -10, 15, 0, 23, 30, 16, -4, 2, 4, -29, 16, -8, -5, 19, -7, 8, 6, 4, 8, -8, 3, 15, -13, -6, 5, -11, 5
    0xf3eb2310, 0xff6d4, 0xfc101e17, 0x10e30402, 0xf913fbf8, 0x8040608, 0xf30f03f8, 0x5f505fa,
    // -4, 18, 9, -27, -5, -2, 55, -24, 12, 12, -13, -3, 36, -53, -71, 18, -5, 90, -5, 33, -43, 14, -26, -74, -108, 19, -88, -69, -21, -12, 26, 28
    0xe50912fc, 0xe837fefb, 0xfdf30c0c, 0x12b9cb24, 0x21fb5afb, 0xb6e60ed5, 0xbba81394, 0x1c1af4eb,
    // -2, -7, -67, -45, -40, -19, 44, 29, -4, -55, -11, 0, 49, 0, 4, 36, -2, 1, 29, -8, -19, 2, -9, 11, -17, 15, 11, -1, 0, 9, 15, 6
    0xd3bdf9fe, 0x1d2cedd8, 0xf5c9fc, 0x24040031, 0xf81d01fe, 0xbf702ed, 0xff0b0fef, 0x60f0900,
    // -14, 33, -32, 29, 16, 13, 23, 10, 9, -11, 16, -15, 2, 19, 17, 3, -3, 8, -21, -1, 31, 2, 1, 3, -11, -13, 14, 9, -2, 9, -4, -12
    0x1de021f2, 0xa170d10, 0xf110f509, 0x3111302, 0xffeb08fd, 0x301021f, 0x90ef3f5, 0xf4fc09fe,
    // 19, -18, -6, -24, 15, 6, -20, 12, 7, -2, -5, 8, -20, 7, 40, -6, -17, -38, -21, -5, 5, -12, -10, -22, -34, -34, -25, 10, 2, 0, 49, 15
    0xe8faee13, 0xcec060f, 0x8fbfe07, 0xfa2807ec, 0xfbebdaef, 0xeaf6f405, 0xae7dede, 0xf310002,
    // -2, 1, -1, -6, -30, 0, 0, 1, 5, -1, -2, -1, -5, -4, 26, 19, 12, 24, 13, -10, 39, 19, -52, -17, 11, -18, -7, -33, -24, 36, -9, -17
    0xfaff01fe, 0x10000e2, 0xfffeff05, 0x131afcfb, 0xf60d180c, 0xefcc1327, 0xdff9ee0b, 0xeff724e8,
    // 37, 88, 24, -14, -96, 29, 9, -42, -57, 52, -43, -72, 42, -34, -59, 30, -13, -9, 105, 43, -93, 35, -21, -19, -4, 10, -35, -1, -47, 7, 26, 0
    0xf2185825, 0xd6091da0, 0xb8d534c7, 0x1ec5de2a, 0x2b69f7f3, 0xedeb23a3, 0xffdd0afc, 0x1a07d1,
    // 4, -9, -18, -11, 2, 5, -9, 3, 14, -18, -17, 19, 6, 6, -10, -6, -16, 8, 26, 2, -5, -8, -15, 3, 2, -18, -2, 52, -26, 30, -52, 1
    0xf5eef704, 0x3f70502, 0x13efee0e, 0xfaf60606, 0x21a08f0, 0x3f1f8fb, 0x34feee02, 0x1cc1ee6,
    // -21, -15, 26, 22, -26, 2, 13, 19, -14, 3, 6, -5, -5, -14, -14, 4, -8, -18, -13, 1, -14, 11, 8, 13, -9, -12, -9, 16, -10, 0, -7, 7
    0x161af1eb, 0x130d02e6, 0xfb0603f2, 0x4f2f2fb, 0x1f3eef8, 0xd080bf2, 0x10f7f4f7, 0x7f900f6,
    // -12, 17, 9, 3, -14, 6, -17, 11, 7, -22, 16, 11, 0, 27, -3, -14, 1, 5, 3, 12, -34, -3, -10, -15, -11, -18, -15, 18, 9, 11, 30, -15
    0x30911f4, 0xbef06f2, 0xb10ea07, 0xf2fd1b00, 0xc030501, 0xf1f6fdde, 0x12f1eef5, 0xf11e0b09,
    // 5, -11, 25, 4, -5, 9, -27, 35, 21, -6, 3, -1, -10, 11, 36, -9, -70, -9, -2, 15, 125, -13, -62, 71, -43, 50, -50, -8, 84, -6, -11, 17
    0x419f505, 0x23e509fb, 0xff03fa15, 0xf7240bf6, 0xffef7ba, 0x47c2f37d, 0xf8ce32d5, 0x11f5fa54,
    // 4, 37, 33, -10, 25, 30, -50, -17, 27, 13, 8, 1, 19, -25, 31, -18, 20, 6, -2, 5, 0, 10, -5, 21, -12, 6, 13, 8, -8, 0, 9, 23
    0xf6212504, 0xefce1e19, 0x1080d1b, 0xee1fe713, 0x5fe0614, 0x15fb0a00, 0x80d06f4, 0x170900f8,
    // 26, 0, -5, 13, 13, 16, -16, -16, -2, -28, 26, 10, 17, -7, 18, 23, 26, 9, -10, -9, -7, -8, 1, -1, 5, 3, -4, 13, -6, 7, 47, 8
    0xdfb001a, 0xf0f0100d, 0xa1ae4fe, 0x1712f911, 0xf7f6091a, 0xff01f8f9, 0xdfc0305, 0x82f07fa,
    // 11, -10, -14, -9, 3, -17, -14, -14, -3, 6, 2, 4, 3, -17, 25, 8, -4, -23, 45, -4, 33, 16, -3, 32, 3, -17, -8, -17, -18, -2, 65, 0
    0xf7f2f60b, 0xf2f2ef03, 0x40206fd, 0x819ef03, 0xfc2de9fc, 0x20fd1021, 0xeff8ef03, 0x41feee,
    // -16, -10, 27, 8, -26, 4, 5, -7, -5, -9, -3, -9, 4, -3, -4, 16, -6, 68, 3, -11, -15, -20, -36, -42, -3, 15, -7, 9, 19, -21, -19, 6
    0x81bf6f0, 0xf90504e6, 0xf7fdf7fb, 0x10fcfd04, 0xf50344fa, 0xd6dcecf1, 0x9f90ffd, 0x6edeb13,
    // 13, 92, -48, 9, 30, -106, 5, 87, -22, -14, 8, -66, -64, 10, 64, 12, -7, -10, 3, -8, -4, -1, -2, 43, 3, 16, -24, 9, -40, -4, -47, -12
    0x9d05c0d, 0x5705961e, 0xbe08f2ea, 0xc400ac0, 0xf803f6f9, 0x2bfefffc, 0x9e81003, 0xf4d1fcd8,
    // -17, -7, 7, -4, -4, 12, -8, 3, -8, 25, 4, 22, 6, -6, -5, 19, -6, -42, 10, 22, 9, -1, -4, 21, -9, 25, -21, 33, 3, -7, -1, 2
    0xfc07f9ef, 0x3f80cfc, 0x160419f8, 0x13fbfa06, 0x160ad6fa, 0x15fcff09, 0x21eb19f7, 0x2fff903,
    // -11, -2, 14, 6, 0, 8, -4, 11, 13, 15, -19, 10, 19, -10, -27, 0, 14, -28, -18, -29, -6, -3, 4, -14, 0, -6, -9, 6, -13, -2, 34, 22
    0x60efef5, 0xbfc0800, 0xaed0f0d, 0xe5f613, 0xe3eee40e, 0xf204fdfa, 0x6f7fa00, 0x1622fef3,
    // 21, 28, 38, 0, -41, 10, -8, -9, 18, -46, -9, 7, 28, 42, 20, -12, -30, -11, 37, 23, -35, 15, 8, 4, -12, -19, 15, -13, -3, 6, 29, 29
    0x261c15, 0xf7f80ad7, 0x7f7d212, 0xf4142a1c, 0x1725f5e2, 0x4080fdd, 0xf30fedf4, 0x1d1d06fd,
    // 17, 19, 23, -5, -15, 14, 20, -6, 9, -9, 20, -22, -25, -26, -34, -2, 27, -25, -29, -24, -98, -11, 14, -72, 77, 27, -27, 17, 28, 93, -51, 9
    0xfb171311, 0xfa140ef1, 0xea14f709, 0xfedee6e7, 0xe8e3e71b, 0xb80ef59e, 0x11e51b4d, 0x9cd5d1c,
    // -16, 6, 9, 9, -14, -1, -19, 36, -42, -2, 48, -11, 29, -13, 12, -6, 0, -7, 17, 11, -23, 4, -9, 35, -17, 22, 6, 29, -1, 15, -18, 20
    0x90906f0, 0x24edfff2, 0xf530fed6, 0xfa0cf31d, 0xb11f900, 0x23f704e9, 0x1d0616ef, 0x14ee0fff,
    // -20, -25, 7, 12, 18, 0, -21, -47, 22, -15, -14, 9, 14, -23, -10, -43, 2, 5, -7, 10, 8, -7, 5, -2, 7, -10, -17, 28, -9, 14, -12, 12
    0xc07e7ec, 0xd1eb0012, 0x9f2f116, 0xd5f6e90e, 0xaf90502, 0xfe05f908, 0x1ceff607, 0xcf40ef7,
    // 8, -20, -8, 0, 3, 8, 7, 11, -8, 21, 11, 13, -12, 2, 3, -5, -27, 11, -4, 4, -53, 8, 8, -52, -18, -7, -24, 27, 39, 40, -14, 16
    0xf8ec08, 0xb070803, 0xd0b15f8, 0xfb0302f4, 0x4fc0be5, 0xcc0808cb, 0x1be8f9ee, 0x10f22827,
    // -10, 6, -16, -10, 8, 5, 14, -5, 3, 5, -5, 10, -2, -7, 21, -5, 16, 17, -7, 17, 19, 82, -3, 11, -29, 25, 32, 13, -33, 35, -36, 21
    0xf6f006f6, 0xfb0e0508, 0xafb0503, 0xfb15f9fe, 0x11f91110, 0xbfd5213, 0xd2019e3, 0x15dc23df,
    // -50, -22, 60, -7, -27, 34, -42, -27, 32, -25, -23, -74, 55, -13, 51, 32, 44, -18, -115, 16, 6, 12, 15, 36, -40, 14, -8, -4, -19, 28, -27, -39
    0xf93ceace, 0xe5d622e5, 0xb6e9e720, 0x2033f337, 0x108dee2c, 0x240f0c06, 0xfcf80ed8, 0xd9e51ced,
    // -9, -7, -15, 12, 23, 2, 28, -2, 0, 3, -7, -1, 0, -4, 5, -2, 29, 39, 37, -15, 11, 4, -5, -20, -8, 28, 2, -14, -3, 24, -23, -9
    0xcf1f9f7, 0xfe1c0217, 0xfff90300, 0xfe05fc00, 0xf125271d, 0xecfb040b, 0xf2021cf8, 0xf7e918fd,
    // -11, 5, -1, 11, 5, -5, 4, -15, -16, 3, 3, 2, 3, 3, -3, -3, 27, -16, -3, -9, 18, 7, 18, 22, 5, 12, 6, -1, -15, 15, 0, 15
    0xbff05f5, 0xf104fb05, 0x20303f0, 0xfdfd0303, 0xf7fdf01b, 0x16120712, 0xff060c05, 0xf000ff1,
    // 7, 29, -23, -6, 24, 6, 0, -26, 27, -9, 11, 23, 13, -6, -43, 0, 0, -12, -8, 6, -20, -7, 19, 4, -15, -12, 5, -1, 16, 1, 2, 27
    0xfae91d07, 0xe6000618, 0x170bf71b, 0xd5fa0d, 0x6f8f400, 0x413f9ec, 0xff05f4f1, 0x1b020110,
    // 25, -18, 5, -31, 19, 6, -15, 17, -23, -14, 24, 16, -28, -7, -11, 55, -30, 39, -25, 26, 76, -87, 50, -7, 54, 46, 66, 20, -19, -41, 45, -15
    0xe105ee19, 0x11f10613, 0x1018f2e9, 0x37f5f9e4, 0x1ae727e2, 0xf932a94c, 0x14422e36, 0xf12dd7ed,
    // 0, 4, -29, 8, -1, -30, 35, -2, -39, -52, 50, -2, -11, 17, 5, 35, 13, -18, 3, -11, -1, -1, -2, 10, 15, -11, -17, 11, 13, 11, 7, 17
    0x8e30400, 0xfe23e2ff, 0xfe32ccd9, 0x230511f5, 0xf503ee0d, 0xafeffff, 0xbeff50f, 0x11070b0d,
    // 21, 26, -28, -7, 7, -16, 0, -3, 19, -34, 1, 6, -46, 47, -74, -4, -26, -5, 14, 16, -9, -4, 5, -4, -30, -27, 28, -7, 3, 5, -18, 17
    0xf9e41a15, 0xfd00f007, 0x601de13, 0xfcb62fd2, 0x100efbe6, 0xfc05fcf7, 0xf91ce5e2, 0x11ee0503,
    // 23, -20, -5, -17, 5, -1, -14, -5, -11, 3, 2, 13, -14, 0, 15, 4, -2, -31, 6, -6, -35, 11, -10, -13, 12, -10, -20, 18, 7, -9, 5, 34
    0xeffbec17, 0xfbf2ff05, 0xd0203f5, 0x40f00f2, 0xfa06e1fe, 0xf3f60bdd, 0x12ecf60c, 0x2205f707,
    // -5, 11, -1, 23, 43, 4, -12, 17, 8, 19, 13, -1, -9, -11, 1, -27, 6, -28, 10, 3, 23, 10, -41, -1, 39, 27, 3, 13, -39, 21, 61, -60
    0x17ff0bfb, 0x11f4042b, 0xff0d1308, 0xe501f5f7, 0x30ae406, 0xffd70a17, 0xd031b27, 0xc43d15d9,
    // 31, 42, 26, -31, 41, -19, 1, 31, -9, -26, -10, -22, -55, 43, -48, -6, -28, 6, -89, 45, 64, -35, 35, 1, -36, -10, 122, 46, 10, -2, 17, -13
    0xe11a2a1f, 0x1f01ed29, 0xeaf6e6f7, 0xfad02bc9, 0x2da706e4, 0x123dd40, 0x2e7af6dc, 0xf311fe0a,
    // 11, -7, -16, 21, -3, 0, 19, 18, -9, -6, 14, 1, -9, 11, 2, -3, -32, -46, 35, -48, -47, -23, 12, 9, 7, 10, -40, -16, -49, -51, -41, -13
    0x15f0f90b, 0x121300fd, 0x10efaf7, 0xfd020bf7, 0xd023d2e0, 0x90ce9d1, 0xf0d80a07, 0xf3d7cdcf,
    // -3, 4, -27, 15, 7, 0, -10, -22, 3, -24, 9, -1, 13, 6, -4, 13, -12, -19, 18, 18, -5, 12, -4, 20, -3, 3, 16, 11, -27, 7, 12, 9
    0xfe504fd, 0xeaf60007, 0xff09e803, 0xdfc060d, 0x1212edf4, 0x14fc0cfb, 0xb1003fd, 0x90c07e5,
    // 2, -27, 5, 38, -7, 15, -11, -24, 32, 38, 16, 37, 19, -13, -92, 22, 8, -9, -12, -5, 21, -5, -5, -10, 5, 4, -17, 7, -3, -20, 5, 2
    0x2605e502, 0xe8f50ff9, 0x25102620, 0x16a4f313, 0xfbf4f708, 0xf6fbfb15, 0x7ef0405, 0x205ecfd,
    // -18, 69, 41, 9, 61, 22, 22, 0, 2, -19, -12, -35, 3, -28, 5, 3, -64, 45, -26, 0, -32, -26, 54, -34, -71, -26, 22, 36, -49, 14, 26, -2
    0x92945ee, 0x16163d, 0xddf4ed02, 0x305e403, 0xe62dc0, 0xde36e6e0, 0x2416e6b9, 0xfe1a0ecf,
    // 28, 41, 19, -27, -3, -17, -15, -7, 20, 33, -32, 0, -17, -1, 31, -8, 22, -10, -1, -19, -5, -2, 0, 12, 8, -2, 3, -6, -1, 15, 28, 29
    0xe513291c, 0xf9f1effd, 0xe02114, 0xf81fffef, 0xedfff616, 0xc00fefb, 0xfa03fe08, 0x1d1c0fff,
    // 31, -75, -14, 28, 46, 2, 0, 11, 19, -52, 5, -15, 0, 6, -40, 8, 20, 11, 14, -25, 17, -9, -13, -13, 6, 17, -9, 5, 5, 10, 17, 11
    0x1cf2b51f, 0xb00022e, 0xf105cc13, 0x8d80600, 0xe70e0b14, 0xf3f3f711, 0x5f71106, 0xb110a05,
};
static const uint embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // -0.0003588, -0.0001919, 9.876e-05, -0.000285, 0.000219, -0.0002828, 0.000706, -0.000532, -1.323e-05, 0.0003498, 0.0002553, -0.0001526, 2.26e-05, -0.00032, -4.62e-05, 0.0007
    0x8a4a8de1, 0x8cab0679, 0x8ca20b2d, 0x905c11c9, 0xdbb80de, 0x89000c2f, 0x8d3e017b, 0x11bc8307,
};
static const uint embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 81, 27, 11, 55, -12, 11, 65, 24, 30, -61, 43, 21, -17, 11, 24, -32, 27, -53, -18, -46, 51, -29, 25, 26, -13, -26, 31, 27, 23, -18, 1, -28
    0x370b1b51, 0x18410bf4, 0x152bc31e, 0xe0180bef, 0xd2eecb1b, 0x1a19e333, 0x1b1fe6f3, 0xe401ee17,
    // -51, -32, 24, 17, -20, -14, 11, -21, 14, 70, -4, 53, 4, 29, -6, -41, 62, 76, -1, 25, 46, -9, 8, -47, 69, 12, -6, -47, 67, 53, 10, -23
    0x1118e0cd, 0xeb0bf2ec, 0x35fc460e, 0xd7fa1d04, 0x19ff4c3e, 0xd108f72e, 0xd1fa0c45, 0xe90a3543,
    // -32, -34, -47, 73, -19, -1, -27, 14, 12, 15, -52, 24, -21, 53, -16, -16, 88, 4, -77, -57, -56, 18, 16, 88, 15, 29, 34, 5, -23, 24, 82, -36
    0x49d1dee0, 0xee5ffed, 0x18cc0f0c, 0xf0f035eb, 0xc7b30458, 0x581012c8, 0x5221d0f, 0xdc5218e9,
    // -4, 44, 58, -38, -38, -53, -57, -6, 75, -73, -78, 23, -68, -41, -61, -35, -6, 78, -48, -73, 59, 49, 72, 6, 34, -75, -73, 57, -59, 11, -79, -18
    0xda3a2cfc, 0xfac7cbda, 0x17b2b74b, 0xddc3d7bc, 0xb7d04efa, 0x648313b, 0x39b7b522, 0xeeb10bc5,
    // -1, 5, 3, -9, -3, 9, 2, -6, 16, -30, 11, 0, -8, 16, 4, -11, 7, 46, 32, 56, 38, 26, -75, -16, -59, 72, -17, -6, 64, 25, -42, -17
    0xf70305ff, 0xfa0209fd, 0xbe210, 0xf50410f8, 0x38202e07, 0xf0b51a26, 0xfaef48c5, 0xefd61940,
    // 22, -53, -72, -6, -66, 29, 62, 30, 3, 39, 65, -26, 12, -1, -19, 38, -31, 43, -81, 113, 18, 12, 4, 18, 47, -13, 31, 15, -6, -1, -19, -3
    0xfab8cb16, 0x1e3e1dbe, 0xe6412703, 0x26edff0c, 0x71af2be1, 0x12040c12, 0xf1ff32f, 0xfdedfffa,
    // 17, -17, 41, 23, 11, -6, -53, 43, -22, -4, 9, 28, 20, 39, -24, -35, 1, 47, -15, 47, -21, -5, -3, 62, 87, 69, 28, 8, -34, -8, 63, -32
    0x1729ef11, 0x2bcbfa0b, 0x1c09fcea, 0xdde82714, 0x2ff12f01, 0x3efdfbeb, 0x81c4557, 0xe03ff8de,
    // -36, -38, -37, -44, -9, 37, -72, -37, -62, 15, -13, -39, 3, -42, -42, 55, 34, 6, -39, -2, 18, -61, 4, -4, 26, -15, 19, 21, -53, -59, -16, -35
    0xd4dbdadc, 0xdbb825f7, 0xd9f30fc2, 0x37d6d603, 0xfed90622, 0xfc04c312, 0x1513f11a, 0xddf0c5cb,
    // -12, -38, 3, 24, 83, 15, -10, -67, 37, -17, -6, -80, 42, 13, -39, -52, 24, 11, -4, -11, -19, -22, 81, -5, -36, -3, 21, -17, 14, -40, 37, 12
    0x1803daf4, 0xbdf60f53, 0xb0faef25, 0xccd90d2a, 0xf5fc0b18, 0xfb51eaed, 0xef15fddc, 0xc25d80e,
    // -9, 9, 18, -11, 7, -1, 10, -17, -13, 4, 18, 1, 2, 3, -7, 11, -17, -74, -14, -38, 16, 21, 18, 75, 19, -71, 41, 5, -59, -75, -14, 32
    0xf51209f7, 0xef0aff07, 0x11204f3, 0xbf90302, 0xdaf2b6ef, 0x4b121510, 0x529b913, 0x20f2b5c5,
    // 65, 63, 44, 52, -18, 7, 103, 3, 74, -57, 50, 51, -15, 25, 49, -70, -36, 10, 70, -1, -16, 36, -8, 14, -10, -33, 30, 18, 35, 4, 36, -4
    0x342c3f41, 0x36707ee, 0x3332c74a, 0xba3119f1, 0xff460adc, 0xef824f0, 0x121edff6, 0xfc240423,
    // -54, 14, 72, -35, 31, -39, 45, -43, -25, 89, 61, 16, 16, 21, 12, 13, 58, 25, 16, 50, 11, 36, 9, -66, 56, -47, -9, 5, 9, -79, -9, 28
    0xdd480eca, 0xd52dd91f, 0x103d59e7, 0xd0c1510, 0x3210193a, 0xbe09240b, 0x5f7d138, 0x1cf7b109,
    // -47, -34, -26, 35, -15, 15, -14, 18, 17, 22, 28, 3, 30, 19, -18, 50, 58, 14, 77, -15, 26, 9, -10, 25, -10, 0, -39, 31, -60, 24, 44, -65
    0x23e6ded1, 0x12f20ff1, 0x31c1611, 0x32ee131e, 0xf14d0e3a, 0x19f6091a, 0x1fd900f6, 0xbf2c18c4,
    // -75, -62, -16, -56, 17, 1, -81, -13, -70, 70, -33, -45, 13, -15, -45, 73, 7, 65, 3, 19, -20, -17, -33, 40, -23, 6, -2, 20, -35, -25, -47, -12
    0xc8f0c2b5, 0xf3af0111, 0xd3df46ba, 0x49d3f10d, 0x13034107, 0x28dfefec, 0x14fe06e9, 0xf4d1e7dd,
    // -56, -6, 11, 13, -5, -25, 8, 11, 16, 40, 1, 25, -11, 30, 0, 6, 108, -27, 20, 43, -88, 34, 27, 12, 22, -50, 7, -11, 60, -49, 8, -34
    0xd0bfac8, 0xb08e7fb, 0x19012810, 0x6001ef5, 0x2b14e56c, 0xc1b22a8, 0xf507ce16, 0xde08cf3c,
    // -66, -41, 12, 60, -8, -21, 45, 4, -35, -31, 43, -32, -43, -38, -4, 2, -24, 32, -41, 71, 8, -13, -10, -9, -13, 4, 30, 24, -32, 4, 61, 7
    0x3c0cd7be, 0x42debf8, 0xe02be1dd, 0x2fcdad5, 0x47d720e8, 0xf7f6f308, 0x181e04f3, 0x73d04e0,
    // 28, 19, -3, -24, 18, 16, -13, 13, -6, -42, 1, -17, -6, -25, 17, 16, -78, 15, 30, -11, -1, -47, -24, 33, -12, -28, -55, 4, 52, -39, 45, -13
    0xe8fd131c, 0xdf31012, 0xef01d6fa, 0x1011e7fa, 0xf51e0fb2, 0x21e8d1ff, 0x4c9e4f4, 0xf32dd934,
    // 26, -2, 44, 37, 31, 72, 5, -57, -41, 31, -35, -9, -6, 22, 40, -44, -34, 8, 12, 63, 42, -5, -96, -10, 39, -24, 18, 9, -70, 61, 99, -30
    0x252cfe1a, 0xc705481f, 0xf7dd1fd7, 0xd42816fa, 0x3f0c08de, 0xf6a0fb2a, 0x912e827, 0xe2633dba,
    // -1, -12, 26, 24, 0, -15, 31, -9, 8, 21, 4, 5, 6, 5, -5, 22, -1, 94, 39, -25, 33, 4, -17, -41, 11, -8, 37, -42, 32, -4, -26, -33
    0x181af4ff, 0xf71ff100, 0x5041508, 0x16fb0506, 0xe7275eff, 0xd7ef0421, 0xd625f80b, 0xdfe6fc20,
    // 35, -23, 18, 4, -31, -48, -8, -73, -25, -23, -25, 81, -19, -5, 4, 12, -21, 31, -53, 35, 6, -11, 88, -13, -68, 2, 66, -3, 26, 7, 67, 30
    0x412e923, 0xb7f8d0e1, 0x51e7e9e7, 0xc04fbed, 0x23cb1feb, 0xf358f506, 0xfd4202bc, 0x1e43071a,
    // -1, 19, -42, 2, -22, -82, -20, 28, -5, 41, 1, -21, 45, 21, 18, -1, 38, 48, -58, -85, -20, -11, 22, 4, 1, -51, -15, 28, -6, -66, 94, 1
    0x2d613ff, 0x1cecaeea, 0xeb0129fb, 0xff12152d, 0xabc63026, 0x416f5ec, 0x1cf1cd01, 0x15ebefa,
    // 32, 8, 4, -17, -1, -11, -6, 22, -19, -6, 23, -23, 23, -2, -6, 5, -33, 1, 17, -30, -64, -19, 4, 25, -67, -47, 21, 8, -31, 35, -48, 41
    0xef040820, 0x16faf5ff, 0xe917faed, 0x5fafe17, 0xe21101df, 0x1904edc0, 0x815d1bd, 0x29d023e1,
    // -53, -47, -36, -20, 48, 26, 15, 38, 4, -65, -44, 41, 75, -7, 99, -23, -6, 67, -73, -23, 53, 63, -2, 6, 65, -77, -19, 59, -40, 24, -78, -7
    0xecdcd1cb, 0x260f1a30, 0x29d4bf04, 0xe963f94b, 0xe9b743fa, 0x6fe3f35, 0x3bedb341, 0xf9b218d8,
    // -8, 1, 14, 69, 36, 25, 31, 18, -9, 10, -29, 16, -45, -15, 11, 32, 58, -3, 3, -40, -26, -32, -42, -1, -48, 34, 0, -34, 37, -11, -44, -20
    0x450e01f8, 0x121f1924, 0x10e30af7, 0x200bf1d3, 0xd803fd3a, 0xffd6e0e6, 0xde0022d0, 0xecd4f525,
    // -32, -21, 12, -30, -20, -30, 57, 41, 7, 22, -22, -3, 28, -40, -40, -38, -42, -4, 31, -26, 52, -20, -8, -13, -44, 34, 88, 33, -11, 58, 85, 39
    0xe20cebe0, 0x2939e2ec, 0xfdea1607, 0xdad8d81c, 0xe61ffcd6, 0xf3f8ec34, 0x215822d4, 0x27553af5,
    // 5, -13, -1, 4, 2, 13, -19, 16, -5, 9, 23, -1, -7, 10, -8, -21, -30, 15, 30, 18, -46, -91, 30, -65, 13, -33, -40, 59, 64, 79, -59, -22
    0x4fff305, 0x10ed0d02, 0xff1709fb, 0xebf80af9, 0x121e0fe2, 0xbf1ea5d2, 0x3bd8df0d, 0xeac54f40,
    // 26, -5, 2, -12, -12, -24, -5, 11, 8, 55, 28, -58, 15, 41, 31, -57, 6, 32, -43, 69, -12, -43, 66, -12, -47, -4, 24, -11, -18, -22, 73, -33
    0xf402fb1a, 0xbfbe8f4, 0xc61c3708, 0xc71f290f, 0x45d52006, 0xf442d5f4, 0xf518fcd1, 0xdf49eaee,
    // 18, -17, 16, 1, 6, -20, 9, -11, 19, 18, 5, 16, 2, 11, 18, -31, 11, -34, -3, 21, -45, 9, -11, 32, -28, 22, -40, 94, 6, 11, -12, 47
    0x110ef12, 0xf509ec06, 0x10051213, 0xe1120b02, 0x15fdde0b, 0x20f509d3, 0x5ed816e4, 0x2ff40b06,
    // -54, 71, 44, 18, -42, 73, 0, -11, -54, 3, 21, -6, 31, 56, -60, 24, 28, 48, -52, 49, -33, -19, 48, -5, 66, -62, 10, 3, 27, -69, -13, -5
    0x122c47ca, 0xf50049d6, 0xfa1503ca, 0x18c4381f, 0x31cc301c, 0xfb30eddf, 0x30ac242, 0xfbf3bb1b,
    // -29, -68, -6, 34, -12, -19, -18, 14, 15, 25, -33, 14, -16, 55, -9, -14, -43, -11, 8, -18, 31, -39, -9, 14, 30, -21, -12, 2, 34, -98, -30, -16
    0x22fabce3, 0xeeeedf4, 0xedf190f, 0xf2f737f0, 0xee08f5d5, 0xef7d91f, 0x2f4eb1e, 0xf0e29e22,
    // 52, -54, 64, 31, -40, -39, 70, 12, 11, 0, -63, -49, 20, 42, 4, 67, 16, 16, -16, -31, -9, -19, -68, 18, -15, 21, 24, 9, -1, -28, -57, -19
    0x1f40ca34, 0xc46d9d8, 0xcfc1000b, 0x43042a14, 0xe1f01010, 0x12bcedf7, 0x91815f1, 0xedc7e4ff,
    // 38, 47, 16, -63, 32, 41, -33, 31, 62, 22, -55, 37, 63, 42, -15, 14, -6, -23, 82, -43, 53, -11, -33, -20, -16, 37, 36, 8, -67, 33, 0, -34
    0xc1102f26, 0x1fdf2920, 0x25c9163e, 0xef12a3f, 0xd552e9fa, 0xecdff535, 0x82425f0, 0xde0021bd,
    // -28, 42, 10, 10, -18, 35, -5, -2, -27, 2, 34, -25, -18, 42, 6, 26, -55, 69, -67, -85, 48, -39, 94, -20, -22, 72, -77, 6, -73, -30, -18, 86
    0xa0a2ae4, 0xfefb23ee, 0xe72202e5, 0x1a062aee, 0xabbd45c9, 0xec5ed930, 0x6b348ea, 0x56eee2b7,
    // -3, -40, 12, 32, -18, 21, -42, 43, 38, -5, -19, 12, -42, 52, 5, -44, 39, 24, -53, 23, -9, 7, -11, 37, 36, 55, 11, -17, 14, 39, 93, -32
    0x200cd8fd, 0x2bd615ee, 0xcedfb26, 0xd40534d6, 0x17cb1827, 0x25f507f7, 0xef0b3724, 0xe05d270e,
    // -54, 15, -58, -31, -5, 53, 64, -64, 40, -8, -45, -5, -35, -16, -23, 49, 18, -43, 17, 9, -20, -15, -27, -3, -47, -14, 26, -3, 1, 7, -63, -23
    0xe1c60fca, 0xc04035fb, 0xfbd3f828, 0x31e9f0dd, 0x911d512, 0xfde5f1ec, 0xfd1af2d1, 0xe9c10701,
    // 13, -21, -36, -60, 78, -68, 45, 46, -15, 1, 22, 15, -49, 32, -68, 13, 35, -31, 35, 78, -19, 29, -60, 13, 17, -64, 47, 2, 23, 4, -31, -48
    0xc4dceb0d, 0x2e2dbc4e, 0xf1601f1, 0xdbc20cf, 0x4e23e123, 0xdc41ded, 0x22fc011, 0xd0e10417,
    // -50, 31, -40, 39, 22, -63, -2, -39, -54, -47, -37, 51, 71, -23, -50, 45, -2, 6, 52, -49, -16, -30, 56, 20, 54, 59, 22, -8, 14, -23, -70, 21
    0x27d81fce, 0xd9fec116, 0x33dbd1ca, 0x2dcee947, 0xcf3406fe, 0x1438e2f0, 0xf8163b36, 0x15bae90e,
    // -11, -13, 11, -71, 11, 29, 56, 20, -50, -29, 1, 22, -51, 75, -2, -3, 5, 24, -11, -30, -13, -28, 7, -6, -3, 29, -2, -5, -19, -7, -4, 21
    0xb90bf3f5, 0x14381d0b, 0x1601e3ce, 0xfdfe4bcd, 0xe2f51805, 0xfa07e4f3, 0xfbfe1dfd, 0x15fcf9ed,
    // -43, 7, 19, -31, -61, -50, -30, -58, -1, -62, 31, 7, -29, 47, 18, 33, -15, 8, 37, -53, 28, 21, -35, 2, 104, -28, 26, 53, -14, 53, 20, 7
    0xe11307d5, 0xc6e2cec3, 0x71fc2ff, 0x21122fe3, 0xcb2508f1, 0x2dd151c, 0x351ae468, 0x71435f2,
    // -44, -31, -4, 17, -21, -26, -25, 16, 23, 45, -31, 17, -15, 39, 14, -2, -18, 62, 8, -1, 53, -86, -6, -66, 55, 15, -10, -41, 48, -35, -11, -93
    0x11fce1d4, 0x10e7e6eb, 0x11e12d17, 0xfe0e27f1, 0xff083eee, 0xbefaaa35, 0xd7f60f37, 0xa3f5dd30,
    // 8, -54, -20, 24, -31, 20, 8, -19, 27, -5, -10, 18, -5, 32, -19, -43, 23, 38, 31, -32, -11, -68, -1, -7, 20, -10, 30, 24, -31, -26, -16, -78
    0x18ecca08, 0xed0814e1, 0x12f6fb1b, 0xd5ed20fb, 0xe01f2617, 0xf9ffbcf5, 0x181ef614, 0xb2f0e6e1,
    // -21, 16, 17, -18, 0, -1, -17, 2, -2, -12, 14, 12, 3, 9, 11, 3, -35, -38, -51, 45, 13, 27, -87, 46, -93, 83, -12, 48, 41, -30, -34, -67
    0xee1110eb, 0x2efff00, 0xc0ef4fe, 0x30b0903, 0x2dcddadd, 0x2ea91b0d, 0x30f453a3, 0xbddee229,
    // 40, -78, 48, -47, 48, 61, 28, 2, 30, -2, 29, 11, -67, -19, 33, -4, -21, -7, 25, -31, 23, -9, -23, -8, 5, 1, 29, 12, -13, 36, 84, 13
    0xd130b228, 0x21c3d30, 0xb1dfe1e, 0xfc21edbd, 0xe119f9eb, 0xf8e9f717, 0xc1d0105, 0xd5424f3,
    // 9, 28, 44, -6, -7, 42, 22, -3, -36, -1, 25, -33, -28, 5, 5, 41, 35, 15, 97, 68, 46, 20, 42, 53, 40, -64, -33, 5, 4, 15, -18, -98
    0xfa2c1c09, 0xfd162af9, 0xdf19ffdc, 0x290505e4, 0x44610f23, 0x352a142e, 0x5dfc028, 0x9eee0f04,
    // 8, 35, -42, 3, -59, -12, 15, 81, -40, 44, -11, 56, -60, -55, 59, 20, 6, -5, 40, -60, 1, -11, 3, 28, 42, 11, -26, 16, -26, -8, -53, -26
    0x3d62308, 0x510ff4c5, 0x38f52cd8, 0x143bc9c4, 0xc428fb06, 0x1c03f501, 0x10e60b2a, 0xe6cbf8e6,
    // 22, 6, -38, -1, -29, -27, 7, 25, 24, -1, -2, -33, -11, -23, 10, -15, -46, 4, 61, -26, 50, -52, 77, 17, -57, 87, -35, 1, -93, 26, 23, -21
    0xffda0616, 0x1907e5e3, 0xdffeff18, 0xf10ae9f5, 0xe63d04d2, 0x114dcc32, 0x1dd57c7, 0xeb171aa3,
    // 42, 14, 68, -44, 34, -31, -5, 0, -27, -18, 49, 16, 36, -33, 16, -30, -23, 33, -3, 38, 14, -42, 8, 28, 105, 19, -6, 2, 1, -69, 73, -12
    0xd4440e2a, 0xfbe122, 0x1031eee5, 0xe210df24, 0x26fd21e9, 0x1c08d60e, 0x2fa1369, 0xf449bb01,
    // 16, 58, -13, -31, 13, 25, -50, 17, -18, -48, 37, -24, -4, -17, 11, 3, 52, 9, -73, 50, 83, 7, -35, -80, -28, 85, 22, 28, 37, 30, 12, -62
    0xe1f33a10, 0x11ce190d, 0xe825d0ee, 0x30beffc, 0x32b70934, 0xb0dd0753, 0x1c1655e4, 0xc20c1e25,
    // 29, 39, 25, -49, 13, -5, 14, -9, -44, -13, 38, -34, 36, -42, 16, 36, 72, 11, -80, -49, -35, 30, 6, 91, -34, 31, 24, -16, -24, 56, -1, -29
    0xcf19271d, 0xf70efb0d, 0xde26f3d4, 0x2410d624, 0xcfb00b48, 0x5b061edd, 0xf0181fde, 0xe3ff38e8,
    // 21, 27, 7, -15, -1, 2, 9, 6, -10, -28, 1, -19, 7, -26, 9, 11, 82, 67, -32, -20, -18, 37, -13, -2, -39, 70, 10, 3, -9, 70, 17, -34
    0xf1071b15, 0x60902ff, 0xed01e4f6, 0xb09e607, 0xece04352, 0xfef325ee, 0x30a46d9, 0xde1146f7,
    // -17, 4, -7, -17, -26, -8, 4, -22, -23, 0, 3, -4, -5, 21, 4, 0, 35, -26, 101, 99, 29, -3, 106, 37, -89, -8, -93, -10, -58, 12, 81, -100
    0xeff904ef, 0xea04f8e6, 0xfc0300e9, 0x415fb, 0x6365e623, 0x256afd1d, 0xf6a3f8a7, 0x9c510cc6,
    // -10, 19, -5, 7, -4, -31, -1, 1, 7, 33, -12, -14, 0, -7, 11, -18, 80, -15, -14, -5, -15, 92, 21, -28, -38, 73, 12, 9, -41, 18, -7, 72
    0x7fb13f6, 0x1ffe1fc, 0xf2f42107, 0xee0bf900, 0xfbf2f150, 0xe4155cf1, 0x90c49da, 0x48f912d7,
    // -21, 22, -35, -4, -3, 1, -11, -24, -7, -17, -2, 0, 13, 15, -7, 17, 5, 20, -7, 12, -30, 15, 26, 19, 85, 24, 68, 3, 74, -13, -63, 18
    0xfcdd16eb, 0xe8f501fd, 0xfeeff9, 0x11f90f0d, 0xcf91405, 0x131a0fe2, 0x3441855, 0x12c1f34a,
    // 48, 24, -46, 25, 66, -59, -40, -27, -9, 28, 16, -5, -40, 46, 59, 20, 4, 16, 13, -57, 2, -18, -21, 0, -9, 2, -9, 13, -31, -3, -37, -28
    0x19d21830, 0xe5d8c542, 0xfb101cf7, 0x143b2ed8, 0xc70d1004, 0xebee02, 0xdf702f7, 0xe4dbfde1,
    // 69, 90, -41, 79, 47, -31, 15, -76, -92, 55, -90, -27, 28, -18, -7, -60, -49, 58, -59, 95, 39, -1, -86, 1, 8, -90, -58, 7, -80, 3, -29, -78
    0x4fd75a45, 0xb40fe12f, 0xe5a637a4, 0xc4f9ee1c, 0x5fc53acf, 0x1aaff27, 0x7c6a608, 0xb2e303b0,
    // 6, 22, -2, 14, 0, 17, -11, 18, -4, -8, 20, -18, -23, -3, 15, -2, 36, 80, 10, -37, -19, -57, 6, 33, -16, -36, 86, 80, -6, -32, -8, -60
    0xefe1606, 0x12f51100, 0xee14f8fc, 0xfe0ffde9, 0xdb0a5024, 0x2106c7ed, 0x5056dcf0, 0xc4f8e0fa,
    // -19, 12, 62, 4, 59, 68, 17, -26, -16, -32, -46, 33, -72, -20, 12, -13, -14, -46, 49, 6, 19, -9, -6, 40, 31, 55, 64, 19, 2, 5, -30, -14
    0x43e0ced, 0xe611443b, 0x21d2e0f0, 0xf30cecb8, 0x631d2f2, 0x28faf713, 0x1340371f, 0xf2e20502,
    // -25, 0, -1, 6, 3, -8, 15, -7, 4, 1, -7, 16, -4, -3, -1, 23, -15, 40, -38, 40, 3, -2, 20, 57, 41, 12, 27, 35, -17, -52, 116, -13
    0x6ff00e7, 0xf90ff803, 0x10f90104, 0x17fffdfc, 0x28da28f1, 0x3914fe03, 0x231b0c29, 0xf374ccef,
    // 36, 11, 13, -62, 9, 16, 51, -33, -17, -18, 26, -37, 0, -60, 0, 52, -20, -4, -8, -19, 18, -63, -49, -7, -23, -44, -23, -11, 22, -72, -46, -15
    0xc20d0b24, 0xdf331009, 0xdb1aeeef, 0x3400c400, 0xedf8fcec, 0xf9cfc112, 0xf5e9d4e9, 0xf1d2b816,
    // -45, 50, -73, -46, 13, 25, -25, -51, 48, -1, 48, 52, -23, -56, 38, -65, 11, 32, 35, 41, -9, -43, 26, 19, 20, 10, 21, 13, -4, -28, 82, -29
    0xd2b732d3, 0xcde7190d, 0x3430ff30, 0xbf26c8e9, 0x2923200b, 0x131ad5f7, 0xd150a14, 0xe352e4fc,
    // 47, -39, -2, -56, 1, -10, 1, -70, -4, -39, 13, 1, 27, 34, -15, -19, 2, -41, -91, 1, 6, -46, 0, -66, 5, -4, 67, -22, 3, -4, -39, 26
    0xc8fed92f, 0xba01f601, 0x10dd9fc, 0xedf1221b, 0x1a5d702, 0xbe00d206, 0xea43fc05, 0x1ad9fc03,
    // 20, -21, 29, 10, 42, 24, 3, 29, 39, 9, -18, 35, 3, -34, -26, 38, 17, 54, -55, 66, 44, 32, 121, 11, -75, -57, -17, 12, -8, -19, -31, -27
    0xa1deb14, 0x1d03182a, 0x23ee0927, 0x26e6de03, 0x42c93611, 0xb79202c, 0xcefc7b5, 0xe5e1edf8,
    // -15, -3, 7, -3, 23, 21, 18, -43, -24, -26, -15, 57, 6, -14, -37, 12, 52, -15, 38, -103, -13, -21, -75, -42, -99, -81, -105, -3, -48, -16, 127, -17
    0xfd07fdf1, 0xd5121517, 0x39f1e6e8, 0xcdbf206, 0x9926f134, 0xd6b5ebf3, 0xfd97af9d, 0xef7ff0d0,
    // 14, -13, 3, 32, 45, 7, -17, 4, 83, 34, 39, 11, -1, -38, -32, -9, -3, 21, -26, -59, -2, -12, -32, -7, 44, 39, -39, -2, -37, -16, -6, 12
    0x2003f30e, 0x4ef072d, 0xb272253, 0xf7e0daff, 0xc5e615fd, 0xf9e0f4fe, 0xfed9272c, 0xcfaf0db,
};
static const uint embedded_encoder3_ResidualBlock_0_body_pw_expand_bias_dwords[32] = {
    // -0.27, -0.2554, 0.008675, -0.0803, -0.04953, -0.01569, 0.012886, -0.2158, -0.0358, -0.1687, 0.06247, -0.0907, -0.07605, 0.05087, 0.04184, -0.04102
    0xb416b452, 0xad242071, 0xa404aa57, 0xb2e82299, 0xb166a895, 0xadce2bff, 0x2a83acde, 0xa940295b,
    // -0.1481, -0.02696, -0.2073, -0.01557, -0.05524, -0.0806, -0.0554, -0.03644, -0.014366, -0.1418, -0.0319, -0.0613, -0.03818, -0.04062, -0.04837, -0.04974
    0xa6e7b0bd, 0xa3f9b2a2, 0xad29ab12, 0xa8aaab17, 0xb08aa35b, 0xabd9a815, 0xa933a8e3, 0xaa5eaa31,
    // -0.05435, -0.0663, -0.01387, 0.01991, -0.003153, -0.03717, -0.01145, -0.2637, -0.05713, 0.04462, -0.02194, -0.05484, -0.0491, -0.0556, -0.02434, -0.254
    0xac3eaaf5, 0x2519a31a, 0xa8c29a75, 0xb438a1dd, 0x29b6ab50, 0xab05a59e, 0xab1eaa49, 0xb410a63b,
    // 0.007584, -0.11804, -0.01717, -0.1556, 0.01686, -0.05167, -0.0739, 0.00506, -0.03748, -0.01595, -0.0651, -0.02269, -0.1196, -0.05112, -0.04343, -0.02382
    0xaf8e1fc4, 0xb0fba465, 0xaa9d2451, 0x1d2eacbb, 0xa415a8cc, 0xa5cfac2b, 0xaa8bafa8, 0xa619a98f,
};
static const uint embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -35, 0, -26, -28, 25, -23, -2, 39, -34, 13, 17, 8, -13, -24, -28, -1, -21, -8, -27, 7, 12, -13, -31, 2, 0, -24, 11, -16, -12, 7, 5, -1
    0xe4e600dd, 0x27fee919, 0x8110dde, 0xffe4e8f3, 0x7e5f8eb, 0x2e1f30c, 0xf00be800, 0xff0507f4,
    // -25, 18, 15, -22, -11, 15, -42, -72, 48, 37, -18, -15, 9, -30, -9, 9, 7, 55, -30, 13, 8, 8, -20, 10, -19, -5, -13, -8, -14, -56, -21, -9
    0xea0f12e7, 0xb8d60ff5, 0xf1ee2530, 0x9f7e209, 0xde23707, 0xaec0808, 0xf8f3fbed, 0xf7ebc8f2,
    // -20, -19, 11, 79, -47, 113, -39, 59, 44, 13, 31, -20, 8, -47, 33, -7, 22, 36, -71, -22, 83, 24, -19, 41, -61, -19, 30, 36, -12, 22, -46, -18
    0x4f0bedec, 0x3bd971d1, 0xec1f0d2c, 0xf921d108, 0xeab92416, 0x29ed1853, 0x241eedc3, 0xeed216f4,
    // 14, -1, -19, -5, 71, 22, 50, -78, -77, 7, 23, -31, -14, 8, -9, -7, -25, -9, 24, 10, -15, 40, 95, -64, 30, 14, -11, -40, -24, 20, 35, -14
    0xfbedff0e, 0xb2321647, 0xe11707b3, 0xf9f708f2, 0xa18f7e7, 0xc05f28f1, 0xd8f50e1e, 0xf22314e8,
    // -23, -37, 9, -33, -19, -28, -11, 19, -36, -16, 2, 5, -15, -8, 43, 29, 14, -3, 7, 15, -19, -2, -13, -1, 7, 3, 11, 22, 10, -10, -15, -19
    0xdf09dbe9, 0x13f5e4ed, 0x502f0dc, 0x1d2bf8f1, 0xf07fd0e, 0xfff3feed, 0x160b0307, 0xedf1f60a,
    // 60, -4, -15, 52, -50, 34, 14, 15, -7, -29, -68, 37, -26, 3, 9, -10, -6, -1, 41, 5, 2, 25, -21, -3, -73, 9, -2, -1, -10, -41, 40, -31
    0x34f1fc3c, 0xf0e22ce, 0x25bce3f9, 0xf60903e6, 0x529fffa, 0xfdeb1902, 0xfffe09b7, 0xe128d7f6,
    // 53, 33, -22, -12, 0, -17, -50, 8, -10, -12, 15, -30, -11, 12, -44, 4, -30, -42, 30, 2, -7, -12, -12, -28, 4, -87, 0, -37, -21, 47, 4, -12
    0xf4ea2135, 0x8ceef00, 0xe20ff4f6, 0x4d40cf5, 0x21ed6e2, 0xe4f4f4f9, 0xdb00a904, 0xf4042feb,
    // 19, -9, -2, 3, -16, 3, -28, -26, 48, 57, -13, -70, -21, -29, -43, -30, 36, 23, -27, -9, -12, 13, -2, 52, 3, 22, -28, -23, 2, -18, -53, -8
    0x3fef713, 0xe6e403f0, 0xbaf33930, 0xe2d5e3eb, 0xf7e51724, 0x34fe0df4, 0xe9e41603, 0xf8cbee02,
    // 35, 30, 4, 1, -8, -56, -33, 39, 4, 11, 7, -10, -26, -20, 6, -3, -9, -24, 28, 84, 12, 0, 99, -6, 61, -16, -21, 25, 29, -33, 1, 19
    0x1041e23, 0x27dfc8f8, 0xf6070b04, 0xfd06ece6, 0x541ce8f7, 0xfa63000c, 0x19ebf03d, 0x1301df1d,
    // -46, -9, -8, -24, -16, 16, 7, -3, -7, -49, 16, -1, -17, -2, -11, -3, -35, -42, 4, -23, -11, -33, -31, 0, 0, 8, 3, -12, -29, 54, -13, 83
    0xe8f8f7d2, 0xfd0710f0, 0xff10cff9, 0xfdf5feef, 0xe904d6dd, 0xe1dff5, 0xf4030800, 0x53f336e3,
    // -8, 61, -16, -11, -16, -24, 2, 49, -12, 23, 59, 39, 18, -29, 8, 22, -3, 5, -35, 6, 10, -9, 0, -30, 46, 5, -25, 8, 10, 14, -22, 6
    0xf5f03df8, 0x3102e8f0, 0x273b17f4, 0x1608e312, 0x6dd05fd, 0xe200f70a, 0x8e7052e, 0x6ea0e0a,
    // 89, -20, -13, 28, -12, -11, 35, -44, -1, 0, 3, -28, 29, 23, 2, 28, -13, 6, 23, -7, 38, -31, -19, -76, -4, 23, -3, 2, 19, -9, -11, -1
    0x1cf3ec59, 0xd423f5f4, 0xe40300ff, 0x1c02171d, 0xf91706f3, 0xb4ede126, 0x2fd17fc, 0xfff5f713,
    // 32, 44, -4, 14, -43, 48, 9, 25, 11, -28, -17, 22, -8, 3, -6, 1, -17, 42, -4, -4, 29, 3, -28, 27, -28, -31, 34, -16, -3, -10, -18, -9
    0xefc2c20, 0x190930d5, 0x16efe40b, 0x1fa03f8, 0xfcfc2aef, 0x1be4031d, 0xf022e1e4, 0xf7eef6fd,
    // -66, 8, -3, -56, 32, 19, -20, -4, 46, -58, 40, 32, 57, -21, 22, 9, 33, -12, -19, -6, -30, 6, 35, -27, 20, -12, 9, -19, -20, -1, 8, 15
    0xc8fd08be, 0xfcec1320, 0x2028c62e, 0x916eb39, 0xfaedf421, 0xe52306e2, 0xed09f414, 0xf08ffec,
    // -24, 12, 29, -7, 6, -59, 41, 6, -21, -34, 9, -11, 34, -26, -16, -28, 6, 3, -22, 21, -74, 35, 60, -36, 7, 48, -33, -4, 21, 14, 30, 21
    0xf91d0ce8, 0x629c506, 0xf509deeb, 0xe4f0e622, 0x15ea0306, 0xdc3c23b6, 0xfcdf3007, 0x151e0e15,
    // -34, -31, 1, 7, -42, -39, 31, 15, 14, -40, -8, -1, 11, 24, 2, 42, 36, 57, -1, 12, 12, -22, -31, -59, -8, 21, -1, 27, -6, 51, 18, 0
    0x701e1de, 0xf1fd9d6, 0xfff8d80e, 0x2a02180b, 0xcff3924, 0xc5e1ea0c, 0x1bff15f8, 0x1233fa,
    // 35, 16, 6, -30, -19, 6, 1, 27, -20, -24, -12, -13, -15, -3, 0, 23, 3, -24, -28, 87, -60, 38, 36, 4, 35, 37, 45, 39, 17, 34, 37, -44
    0xe2061023, 0x1b0106ed, 0xf3f4e8ec, 0x1700fdf1, 0x57e4e803, 0x42426c4, 0x272d2523, 0xd4252211,
    // 62, 17, 42, 20, -61, 25, 2, 3, 10, 78, -60, 25, -20, -3, 8, -1, 28, 9, 25, -10, -13, -28, -11, -77, -51, -58, 37, 17, -18, 18, -1, -19
    0x142a113e, 0x30219c3, 0x19c44e0a, 0xff08fdec, 0xf619091c, 0xb3f5e4f3, 0x1125c6cd, 0xedff12ee,
    // -10, 22, 1, 2, -47, -6, -5, 73, 2, -36, 16, -19, -18, -45, -22, 6, 71, -10, -5, 5, -18, -27, 17, -5, 14, -11, 3, 26, 3, 53, 6, 26
    0x20116f6, 0x49fbfad1, 0xed10dc02, 0x6ead3ee, 0x5fbf647, 0xfb11e5ee, 0x1a03f50e, 0x1a063503,
    // 33, -27, -16, 36, -5, -6, 18, 11, 37, 32, -15, -1, -12, -26, 18, -60, -17, -49, 17, -56, -43, 7, 4, 23, 3, -22, 12, 13, -6, 7, -11, 1
    0x24f0e521, 0xb12fafb, 0xfff12025, 0xc412e6f4, 0xc811cfef, 0x170407d5, 0xd0cea03, 0x1f507fa,
    // -15, -16, -2, 9, 7, 16, 6, -16, -1, -8, -1, -28, 15, -4, 5, 18, -23, -47, -79, 5, 22, 18, 16, 38, -7, 37, -4, 2, -9, 8, -19, -12
    0x9fef0f1, 0xf0061007, 0xe4fff8ff, 0x1205fc0f, 0x5b1d1e9, 0x26101216, 0x2fc25f9, 0xf4ed08f7,
    // -44, -7, -5, -16, 38, 13, -59, -31, 7, 92, 20, -49, 48, -4, -10, -11, -25, -8, -20, 8, -26, 3, 14, 16, 12, 7, 13, 23, -57, 30, -23, 22
    0xf0fbf9d4, 0xe1c50d26, 0xcf145c07, 0xf5f6fc30, 0x8ecf8e7, 0x100e03e6, 0x170d070c, 0x16e91ec7,
    // 0, -40, -28, -29, 22, -9, 6, -30, 3, 55, -1, 8, 44, 1, 35, 40, 31, -3, -25, 1, -5, -55, 35, 26, 32, -21, -65, 2, 41, 98, -13, -7
    0xe3e4d800, 0xe206f716, 0x8ff3703, 0x2823012c, 0x1e7fd1f, 0x1a23c9fb, 0x2bfeb20, 0xf9f36229,
    // -12, -7, -15, 30, 5, 9, -1, -84, 22, -93, -21, 25, 5, 28, -5, -20, -33, 82, -9, -2, 48, -3, -18, -24, -26, 30, 23, 32, 36, 24, -10, 26
    0x1ef1f9f4, 0xacff0905, 0x19eba316, 0xecfb1c05, 0xfef752df, 0xe8eefd30, 0x20171ee6, 0x1af61824,
    // 9, 9, 10, 8, 44, 21, -47, 6, -15, 26, 45, 19, 11, -20, 17, -24, -43, 17, 23, -25, 63, 20, -32, -30, -22, -16, -26, -21, -8, -2, -22, -43
    0x80a0909, 0x6d1152c, 0x132d1af1, 0xe811ec0b, 0xe71711d5, 0xe2e0143f, 0xebe6f0ea, 0xd5eafef8,
    // 28, -20, -11, 15, 29, -6, 50, 32, 72, -89, 22, 25, 14, 3, -37, 25, 4, 9, -15, -48, 85, -14, 1, 17, 20, 0, -40, -16, -17, -60, -23, -52
    0xff5ec1c, 0x2032fa1d, 0x1916a748, 0x19db030e, 0xd0f10904, 0x1101f255, 0xf0d80014, 0xcce9c4ef,
    // -29, 10, 20, 10, 16, 22, 18, 2, 72, -75, 23, -24, -18, -72, -71, 23, 3, -40, 77, -48, -4, 20, -18, 32, -40, 28, -1, 6, -1, -41, 13, -26
    0xa140ae3, 0x2121610, 0xe817b548, 0x17b9b8ee, 0xd04dd803, 0x20ee14fc, 0x6ff1cd8, 0xe60dd7ff,
    // 34, -14, 25, 37, 39, -24, -4, -19, -4, 47, 19, -21, 9, -7, -41, -25, 21, -25, 7, -14, -46, 15, 25, 5, 14, 21, -24, -16, 48, 16, -18, -52
    0x2519f222, 0xedfce827, 0xeb132ffc, 0xe7d7f909, 0xf207e715, 0x5190fd2, 0xf0e8150e, 0xccee1030,
    // 81, -9, 8, 26, -27, 8, 2, -57, 4, -47, -103, -29, 6, 81, -20, -10, -37, -11, -37, -29, 7, -5, 14, -20, -18, 10, -11, 14, -12, 1, -30, 32
    0x1a08f751, 0xc70208e5, 0xe399d104, 0xf6ec5106, 0xe3dbf5db, 0xec0efb07, 0xef50aee, 0x20e201f4,
    // 48, -22, -12, 53, 21, -19, 26, 18, 17, 10, -19, -34, 26, -6, 9, -8, 11, -45, 28, 8, -14, 29, 20, -86, 11, 36, 3, 14, -50, 21, 8, -14
    0x35f4ea30, 0x121aed15, 0xdeed0a11, 0xf809fa1a, 0x81cd30b, 0xaa141df2, 0xe03240b, 0xf20815ce,
    // -20, 1, -15, -1, -8, 23, 18, 52, -23, 19, 41, 13, 20, -8, 23, -13, 5, 14, 93, -6, -33, -27, -13, 12, -13, 6, -39, 17, -14, 34, -3, 0
    0xfff101ec, 0x341217f8, 0xd2913e9, 0xf317f814, 0xfa5d0e05, 0xcf3e5df, 0x11d906f3, 0xfd22f2,
    // -53, -15, -5, -22, -4, -7, -14, 19, 40, 50, -33, -2, -53, 2, 15, -23, 38, 13, -19, -1, 13, -7, 9, -32, 7, 44, 7, -17, 24, -20, 12, 24
    0xeafbf1cb, 0x13f2f9fc, 0xfedf3228, 0xe90f02cb, 0xffed0d26, 0xe009f90d, 0xef072c07, 0x180cec18,
    // -7, 38, -20, 23, -16, 65, -56, 13, -11, 32, -4, -28, 3, -3, -107, 70, -37, 21, -25, 56, -14, 57, 1, 2, 88, 6, 17, 13, -20, -24, -38, 63
    0x17ec26f9, 0xdc841f0, 0xe4fc20f5, 0x4695fd03, 0x38e715db, 0x20139f2, 0xd110658, 0x3fdae8ec,
    // 41, 0, 10, -20, 11, 47, 22, 43, 40, 24, 4, -58, -19, -39, -65, 13, -1, -78, -49, -35, -61, 49, 31, -5, 35, -23, -33, -25, -24, -8, -44, 53
    0xec0a0029, 0x2b162f0b, 0xc6041828, 0xdbfd9ed, 0xddcfb2ff, 0xfb1f31c3, 0xe7dfe923, 0x35d4f8e8,
    // 8, -27, 1, -55, -52, -68, 12, -49, -47, 24, 7, 17, 37, -10, 41, -18, -18, 23, -37, -53, -24, 46, -59, -23, -19, 30, -40, 6, -37, 13, 13, -4
    0xc901e508, 0xcf0cbccc, 0x110718d1, 0xee29f625, 0xcbdb17ee, 0xe9c52ee8, 0x6d81eed, 0xfc0d0ddb,
    // -81, -20, -7, -1, -27, -24, -55, -2, -27, 32, -17, 28, -33, 14, -27, -12, 13, -8, 1, -13, 39, -13, -55, -18, 2, -34, -21, -11, 30, -69, 14, -64
    0xfff9ecaf, 0xfec9e8e5, 0x1cef20e5, 0xf4e50edf, 0xf301f80d, 0xeec9f327, 0xf5ebde02, 0xc00ebb1e,
    // 16, 1, 64, 29, -23, 66, 29, 1, 12, -13, -1, 6, -70, -19, -86, 11, -44, -29, -25, 68, -36, 6, 53, 44, -3, -11, 73, -12, 15, 20, 25, -15
    0x1d400110, 0x11d42e9, 0x6fff30c, 0xbaaedba, 0x44e7e3d4, 0x2c3506dc, 0xf449f5fd, 0xf119140f,
    // 60, 93, 39, 6, -39, 15, 12, 29, -15, -6, -53, -97, -24, -93, 66, 6, 82, 19, -59, -89, -61, 5, 44, -27, -46, 77, -2, 33, -2, 51, -73, 28
    0x6275d3c, 0x1d0c0fd9, 0x9fcbfaf1, 0x642a3e8, 0xa7c51352, 0xe52c05c3, 0x21fe4dd2, 0x1cb733fe,
    // -5, -28, -2, 19, -39, -64, -25, -3, 35, 21, 10, -4, 59, -29, -58, 39, 59, -1, 43, 27, 95, 36, -21, -13, 76, 9, -36, 94, 33, 40, -20, 82
    0x13fee4fb, 0xfde7c0d9, 0xfc0a1523, 0x27c6e33b, 0x1b2bff3b, 0xf3eb245f, 0x5edc094c, 0x52ec2821,
    // -5, -64, -47, -57, 72, 32, 15, 66, 39, -12, 84, 17, 80, 7, -36, -32, 71, 15, -36, 13, 22, 65, -49, -6, 63, -34, -32, -3, -15, -67, -8, 20
    0xc7d1c0fb, 0x420f2048, 0x1154f427, 0xe0dc0750, 0xddc0f47, 0xfacf4116, 0xfde0de3f, 0x14f8bdf1,
    // 33, -77, 52, -21, -36, -37, 81, -8, 32, -61, 2, 1, -26, -21, 28, -69, -35, -40, -58, -25, 15, -6, -40, 47, -81, 28, -7, -60, 20, -15, 65, -73
    0xeb34b321, 0xf851dbdc, 0x102c320, 0xbb1cebe6, 0xe7c6d8dd, 0x2fd8fa0f, 0xc4f91caf, 0xb741f114,
    // -26, 79, 63, -8, 8, -29, -59, -48, -12, 1, 5, -34, 15, -6, 67, -41, 44, -13, -11, -48, 23, -51, -17, 21, -22, -19, 31, 54, 47, -58, 6, -61
    0xf83f4fe6, 0xd0c5e308, 0xde0501f4, 0xd743fa0f, 0xd0f5f32c, 0x15efcd17, 0x361fedea, 0xc306c62f,
    // 14, 13, 15, -24, 19, -10, 25, -16, 13, -15, -7, 14, -5, -12, -1, 32, 27, -6, 26, 20, 21, -9, -63, 26, 18, 91, 41, -74, 3, -22, 11, 8
    0xe80f0d0e, 0xf019f613, 0xef9f10d, 0x20fff4fb, 0x141afa1b, 0x1ac1f715, 0xb6295b12, 0x80bea03,
    // 25, 26, 48, -77, 34, 64, -102, 55, 50, -53, 17, -23, 9, 31, 21, -14, -35, -30, 13, 25, 8, 51, -18, 22, 16, -80, 19, 13, 55, -69, 19, 42
    0xb3301a19, 0x379a4022, 0xe911cb32, 0xf2151f09, 0x190de2dd, 0x16ee3308, 0xd13b010, 0x2a13bb37,
    // -17, -1, 4, 6, 65, 42, 88, -3, -82, 8, 6, -23, 76, 13, -70, 25, 5, 67, 25, -85, -46, 26, -62, 28, -6, 26, -56, 14, -73, 24, 29, 19
    0x604ffef, 0xfd582a41, 0xe90608ae, 0x19ba0d4c, 0xab194305, 0x1cc21ad2, 0xec81afa, 0x131d18b7,
    // -94, 22, 34, -8, -26, 1, 25, 27, -1, 37, -61, -67, -38, -58, 56, -22, -1, 38, -78, 1, -36, 19, 41, -18, -17, 69, 23, 51, 4, -123, 22, -24
    0xf82216a2, 0x1b1901e6, 0xbdc325ff, 0xea38c6da, 0x1b226ff, 0xee2913dc, 0x331745ef, 0xe8168504,
    // 4, -33, -56, 1, -23, -8, -46, 7, 15, -75, 0, 42, 32, 11, 14, 40, -5, 25, -34, 41, 57, -65, 2, -16, 52, -36, 9, 13, 53, -41, -65, 36
    0x1c8df04, 0x7d2f8e9, 0x2a00b50f, 0x280e0b20, 0x29de19fb, 0xf002bf39, 0xd09dc34, 0x24bfd735,
    // 10, -12, -58, -3, 26, 31, 12, -92, 16, -24, 10, 19, 10, 1, -53, -36, -91, -59, -26, 7, 56, 24, -5, -20, 10, -25, -72, -61, 91, -12, -11, 26
    0xfdc6f40a, 0xa40c1f1a, 0x130ae810, 0xdccb010a, 0x7e6c5a5, 0xecfb1838, 0xc3b8e70a, 0x1af5f45b,
    // 13, -62, -53, -37, 33, -42, -53, 45, 14, -13, -10, -89, -30, 1, 37, 41, 64, -42, 15, 59, -38, 56, 24, 2, 19, 10, 68, 35, -2, 17, -25, 17
    0xdbcbc20d, 0x2dcbd621, 0xa7f6f30e, 0x292501e2, 0x3b0fd640, 0x21838da, 0x23440a13, 0x11e711fe,
    // 66, -41, -32, -8, -7, 42, -82, 54, -15, -17, -61, -57, -57, 53, -39, 25, 15, 26, 106, 91, -62, 25, -9, -5, -28, -63, -5, -40, -11, 45, 42, 33
    0xf8e0d742, 0x36ae2af9, 0xc7c3eff1, 0x19d935c7, 0x5b6a1a0f, 0xfbf719c2, 0xd8fbc1e4, 0x212a2df5,
    // -5, -15, 7, 50, -8, 43, 5, -33, 5, 35, 21, 4, -30, 7, 80, -53, 3, 65, 16, -43, 6, 8, 64, -24, -78, 37, -28, -20, -5, 6, -40, -55
    0x3207f1fb, 0xdf052bf8, 0x4152305, 0xcb5007e2, 0xd5104103, 0xe8400806, 0xece425b2, 0xc9d806fb,
    // -38, -49, -64, 72, -33, -75, 105, 25, 41, 16, -10, 42, -10, 43, -3, -23, -17, -8, 39, 13, 60, -63, 40, 50, -43, -24, -21, -20, 4, 108, 47, -55
    0x48c0cfda, 0x1969b5df, 0x2af61029, 0xe9fd2bf6, 0xd27f8ef, 0x3228c13c, 0xecebe8d5, 0xc92f6c04,
    // -20, 26, 32, 15, -26, 7, -10, 1, -30, 0, 3, -62, -20, -21, 92, -26, 78, 19, -24, 1, -73, 31, 31, 6, -31, 45, 12, 0, -27, -12, -24, -2
    0xf201aec, 0x1f607e6, 0xc20300e2, 0xe65cebec, 0x1e8134e, 0x61f1fb7, 0xc2de1, 0xfee8f4e5,
    // 50, -39, -28, -5, -52, -21, 22, -14, -3, -27, -61, 15, -32, 58, 13, -84, 7, -9, 105, 67, -53, -19, 23, -33, -59, -14, 31, 2, -43, 23, 127, 14
    0xfbe4d932, 0xf216ebcc, 0xfc3e5fd, 0xac0d3ae0, 0x4369f707, 0xdf17edcb, 0x21ff2c5, 0xe7f17d5,
    // 10, 9, 50, -20, 6, -9, -7, -23, 30, -6, 1, 28, -32, -26, 27, -24, 19, -23, 51, 27, -13, -23, -22, 22, -20, -62, 33, -36, 27, -35, 4, -30
    0xec32090a, 0xe9f9f706, 0x1c01fa1e, 0xe81be6e0, 0x1b33e913, 0x16eae9f3, 0xdc21c2ec, 0xe204dd1b,
    // -7, 30, 41, -43, 6, 14, -80, -13, -12, -11, 2, 27, 23, 11, 27, -14, 0, -38, -8, -22, 7, -1, -11, -15, -5, 7, 28, 1, 49, -16, 17, 15
    0xd5291ef9, 0xf3b00e06, 0x1b02f5f4, 0xf21b0b17, 0xeaf8da00, 0xf1f5ff07, 0x11c07fb, 0xf11f031,
    // -19, -20, -41, 46, -54, 70, -14, 15, -35, 3, -5, 3, 36, -26, -18, 70, -5, 98, -52, 13, 9, 11, 19, -2, 66, 24, 24, 30, -45, -23, -37, 64
    0x2ed7eced, 0xff246ca, 0x3fb03dd, 0x46eee624, 0xdcc62fb, 0xfe130b09, 0x1e181842, 0x40dbe9d3,
    // 53, 2, -15, -24, -1, 44, 64, -29, -21, 17, -12, 8, -15, 40, -20, 5, -18, 25, 26, 14, -10, 53, 50, 11, 5, -13, 1, -44, -1, 30, 63, 73
    0xe8f10235, 0xe3402cff, 0x8f411eb, 0x5ec28f1, 0xe1a19ee, 0xb3235f6, 0xd401f305, 0x493f1eff,
    // -8, 67, 20, -2, 0, -1, 72, 46, 56, 53, -35, -8, -23, -3, 46, -52, 23, -71, 27, -12, 40, 67, -5, 69, -58, -70, 17, 74, 49, 85, 69, -45
    0xfe1443f8, 0x2e48ff00, 0xf8dd3538, 0xcc2efde9, 0xf41bb917, 0x45fb4328, 0x4a11bac6, 0xd3455531,
    // 46, 67, 52, 0, 37, 8, -39, -5, 34, 2, -6, -27, 43, -21, 79, 31, -8, 47, 14, 24, -28, -34, 6, 12, -21, 37, 57, 82, 14, 4, 11, -8
    0x34432e, 0xfbd90825, 0xe5fa0222, 0x1f4feb2b, 0x180e2ff8, 0xc06dee4, 0x523925eb, 0xf80b040e,
    // 5, -1, -88, 16, 4, 34, -75, 21, 57, 12, 12, -19, -49, 3, -76, -66, -13, -58, -9, -15, -68, 37, 24, 23, -77, 13, -9, 23, 65, 15, -18, -29
    0x10a8ff05, 0x15b52204, 0xed0c0c39, 0xbeb403cf, 0xf1f7c6f3, 0x171825bc, 0x17f70db3, 0xe3ee0f41,
    // -9, -19, 1, 30, 25, -56, 22, 41, 20, -14, -16, -48, 81, -68, -105, -10, 20, -12, -61, -1, -82, -29, 34, -9, 21, -117, -52, -37, 14, 37, -56, -30
    0x1e01edf7, 0x2916c819, 0xd0f0f214, 0xf697bc51, 0xffc3f414, 0xf722e3ae, 0xdbcc8b15, 0xe2c8250e,
    // 9, -11, 23, 20, -75, 34, 31, -9, -25, -37, 21, 3, 16, 19, 41, -48, 73, 56, 18, -69, -39, -8, 10, 23, -64, 36, -7, 33, -48, 12, 46, -21
    0x1417f509, 0xf71f22b5, 0x315dbe7, 0xd0291310, 0xbb123849, 0x170af8d9, 0x21f924c0, 0xeb2e0cd0,
    // -56, 8, 29, 33, -29, -35, 33, 28, 21, -37, -40, 25, -26, 38, 35, -4, 49, 12, 49, 24, 0, -31, 32, 42, -21, -48, 46, 28, -20, 43, 80, -28
    0x211d08c8, 0x1c21dde3, 0x19d8db15, 0xfc2326e6, 0x18310c31, 0x2a20e100, 0x1c2ed0eb, 0xe4502bec,
};
static const uint embedded_encoder3_ResidualBlock_0_body_pw_contract_bias_dwords[16] = {
    // -0.0002851, -0.0004153, 0.0001339, -7.59e-05, -0.0005407, -7.933e-05, 4.35e-06, -0.0001869, -0.0002006, 7.606e-05, 1.51e-05, -0.00010294, 8.75e-05, 0.0003262, 0.0002155, -7.52e-05
    0x8ece8cac, 0x84f90863, 0x8533906e, 0x8a200049, 0x4fc8a93, 0x86bf00fd, 0xd5805bc, 0x84ee0b10,
    // 9.596e-05, -0.0003107, -8.756e-05, -0.0003612, -0.0002197, 0.0001369, 0.000593, 5e-06, 0.0002773, 0.0001653, 0.00039, -9.39e-05, 0.000399, 0.0001746, -6.384e-05, 0.0002213
    0x8d17064a, 0x8deb85bd, 0x87c8b33, 0x5410dc, 0x96b0c8b, 0x86270e64, 0x9b90e8a, 0xb40842f,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass4(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = {
        uint3(960, 540, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 32), // threadGroupSliceSize
        uint3(960, 540, 32), // storageSize
        uint3(32, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        33177600, // threadGroupStorageByteOffset
        storage_Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped };
    
    const ConstantBufferStorage<576> storage_embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004896385129541159, storage_embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = { embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.003930004313588142, storage_embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_encoder3_ResidualBlock_0_body_pw_expand_bias = { embedded_encoder3_ResidualBlock_0_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_encoder3_ResidualBlock_0_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_0_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.003923932556062937, storage_embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder3_ResidualBlock_0_body_pw_contract_bias = { embedded_encoder3_ResidualBlock_0_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder3_ResidualBlock_0_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_0_body_pw_contract_bias };
    
    // /encoder3/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_8 = uint3(960, 540, 32);
    const int3 groupStart_slice_8 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_8 = uint3(64, 1, 32);
    const uint3 storageSize_slice_8 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_8 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_8 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_8 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_8 = dot(groupStart_slice_8, tensorByteStrides_slice_8);
    const RWBufferStorage storage_slice_8 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_8 = { logicalSize_slice_8, groupStart_slice_8, groupSize_slice_8, storageSize_slice_8, tensorByteStrides_slice_8, paddingBegin_slice_8, paddingEnd_slice_8, threadGroupByteOffsetInTensor_slice_8 + 49766400, storage_slice_8 };
    // Fusedquantized_/encoder3/ResidualBlock_0/residual_func/Concat_quantized_/encoder3/ResidualBlock_0/body/spatial_mixing/partial_conv/Conv_quantized_/encoder3/ResidualBlock_0/body/spatial_mixing/Concat_quantized_/encoder3/ResidualBlock_0/body/pw_expand/Conv_/encoder3/ResidualBlock_0/body/pw_expand_act/Relu_quantized_/encoder3/ResidualBlock_0/body/pw_contract/Conv_/encoder3/ResidualBlock_0/Add (32, 540, 960), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,) -> (32, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<32, 1>(0.014414075762033463, 0.01589442603290081, 0.016248498111963272, 0.014839759096503258, 0.01929340697824955, Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped, embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias, embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_0_body_pw_expand_bias, embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_0_body_pw_contract_bias, slice_8, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_4
#ifdef MLSR_PASS_4_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass4_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /encoder3/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_9 = uint3(960, 540, 32);
    const int3 groupStart_slice_9 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_9 = uint3(32, 1, 32);
    const uint3 storageSize_slice_9 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_9 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_9 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_9 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_9 = dot(groupStart_slice_9, tensorByteStrides_slice_9);
    const RWBufferStorage storage_slice_9 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_9 = { logicalSize_slice_9, groupStart_slice_9, groupSize_slice_9, storageSize_slice_9, tensorByteStrides_slice_9, paddingBegin_slice_9, paddingEnd_slice_9, threadGroupByteOffsetInTensor_slice_9 + 49766400, storage_slice_9 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_9, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_4_POST


#ifdef MLSR_PASS_5
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 4, 11, 3, 4, 28, 3, 36, 6, 20, 19, 27, -38, 17, 27, 7, 17, 14, -35, 47, 54, 11, -22, -23, -50, -91, -42, -13, -1, -12, -29, -28, -50
    0x4030b04, 0x624031c, 0xda1b1314, 0x11071b11, 0x362fdd0e, 0xcee9ea0b, 0xfff3d6a5, 0xcee4e3f4,
    // -3, -12, 0, 39, -24, -12, 0, -18, -25, -14, 15, -17, -6, 8, -11, 32, -11, 65, 49, -31, 91, 72, -38, -1, 22, 38, 9, -9, -22, 39, -14, -7
    0x2700f4fd, 0xee00f4e8, 0xef0ff2e7, 0x20f508fa, 0xe13141f5, 0xffda485b, 0xf7092616, 0xf9f227ea,
    // -66, 18, 53, -58, -76, 48, 100, 57, 13, -20, 3, 14, -34, -105, 36, -41, -31, 16, 19, -25, 45, 55, -33, -7, 44, -41, 45, 27, -34, -54, 85, -56
    0xc63512be, 0x396430b4, 0xe03ec0d, 0xd72497de, 0xe71310e1, 0xf9df372d, 0x1b2dd72c, 0xc855cade,
    // 16, -8, -1, 9, 26, -9, 26, -19, 13, 33, -2, -45, 23, 22, 6, 44, 69, -24, 12, 24, 29, -44, -41, -52, -79, 24, 6, 7, 15, 1, -19, -36
    0x9fff810, 0xed1af71a, 0xd3fe210d, 0x2c061617, 0x180ce845, 0xccd7d41d, 0x70618b1, 0xdced010f,
    // -1, -9, 10, 0, 11, -18, 6, 6, -24, 39, 8, -42, 23, 20, -11, 13, 30, -64, 47, 13, -33, -28, -23, 5, -64, -22, 7, -4, -3, 9, 30, -62
    0xaf7ff, 0x606ee0b, 0xd60827e8, 0xdf51417, 0xd2fc01e, 0x5e9e4df, 0xfc07eac0, 0xc21e09fd,
    // 5, -24, 10, 19, -36, 8, 5, -35, -13, 23, -18, 3, 10, 7, -22, 36, -16, 20, 21, 15, -46, 24, -8, 9, -16, -7, 13, 12, 5, 11, -16, -52
    0x130ae805, 0xdd0508dc, 0x3ee17f3, 0x24ea070a, 0xf1514f0, 0x9f818d2, 0xc0df9f0, 0xccf00b05,
    // 95, -73, 5, 43, -55, -15, 57, 3, -58, 18, 24, -5, 38, 8, -10, 17, -95, 124, -27, -70, -46, -18, -70, -34, 94, -46, 51, -65, -30, -58, 57, -19
    0x2b05b75f, 0x339f1c9, 0xfb1812c6, 0x11f60826, 0xbae57ca1, 0xdebaeed2, 0xbf33d25e, 0xed39c6e2,
    // -44, 29, -40, 12, -29, 11, 46, 7, 44, -19, -51, 31, 7, 32, 20, 29, 40, -10, 65, -2, -40, 17, -53, 11, -47, 8, 31, 28, 2, 33, -21, -27
    0xcd81dd4, 0x72e0be3, 0x1fcded2c, 0x1d142007, 0xfe41f628, 0xbcb11d8, 0x1c1f08d1, 0xe5eb2102,
    // 10, -5, 23, -14, -19, 3, 32, 0, -17, 31, -54, -17, 60, -14, -3, 17, -24, 13, 25, -12, -22, 29, -4, -13, -3, -7, 3, -2, -15, 10, 14, -46
    0xf217fb0a, 0x2003ed, 0xefca1fef, 0x11fdf23c, 0xf4190de8, 0xf3fc1dea, 0xfe03f9fd, 0xd20e0af1,
    // 6, -4, -11, 32, 78, -10, -2, 4, -11, -12, 0, 0, 1, -11, 20, 2, 33, -32, 35, 31, 107, 34, -11, 8, 44, 7, -14, 28, -31, 6, 0, -38
    0x20f5fc06, 0x4fef64e, 0xf4f5, 0x214f501, 0x1f23e021, 0x8f5226b, 0x1cf2072c, 0xda0006e1,
    // 5, 7, -6, 26, 77, -7, -10, 18, 9, 15, 7, 3, 1, -13, -9, 1, -5, 2, -40, 22, 43, -73, 15, -25, -9, -30, -19, -14, 14, -24, 85, -68
    0x1afa0705, 0x12f6f94d, 0x3070f09, 0x1f7f301, 0x16d802fb, 0xe70fb72b, 0xf2ede2f7, 0xbc55e80e,
    // -24, -31, 26, -29, -35, -4, -36, 77, 99, 6, 67, 102, -102, -68, 7, 67, 9, -9, 27, 43, 30, -53, 35, -33, -51, 15, 41, -23, 31, 7, 13, 15
    0xe31ae1e8, 0x4ddcfcdd, 0x66430663, 0x4307bc9a, 0x2b1bf709, 0xdf23cb1e, 0xe9290fcd, 0xf0d071f,
    // 20, 22, -24, 5, 73, -3, -12, 20, -4, -12, 33, -12, -15, 9, 24, 1, 32, -14, 66, 29, 127, 3, 8, 66, -10, -33, -51, 37, -12, 7, 0, -36
    0x5e81614, 0x14f4fd49, 0xf421f4fc, 0x11809f1, 0x1d42f220, 0x4208037f, 0x25cddff6, 0xdc0007f4,
    // 18, 9, -1, 3, 75, 2, 18, 21, 4, -10, 21, -22, -27, -9, 20, 6, -2, 16, -6, -23, 32, -20, 12, 19, 8, -18, 10, -3, -8, -40, 14, 5
    0x3ff0912, 0x1512024b, 0xea15f604, 0x614f7e5, 0xe9fa10fe, 0x130cec20, 0xfd0aee08, 0x50ed8f8,
    // -21, 50, -45, -1, -15, 15, -6, 8, 39, -33, 4, 21, -77, -37, -31, 14, -17, 24, -23, 8, -5, 4, 19, 7, 20, -48, -2, 39, -53, -19, -28, 7
    0xffd332eb, 0x8fa0ff1, 0x1504df27, 0xee1dbb3, 0x8e918ef, 0x71304fb, 0x27fed014, 0x7e4edcb,
    // 32, -7, -39, -39, 23, -5, 63, 17, 2, 45, 21, -7, 27, 52, 12, 68, 88, -83, -4, 95, -5, -119, 4, 21, -48, 67, 79, -114, 25, -54, -80, -40
    0xd9d9f920, 0x113ffb17, 0xf9152d02, 0x440c341b, 0x5ffcad58, 0x150489fb, 0x8e4f43d0, 0xd8b0ca19,
    // -76, 19, -20, 9, -5, 3, 63, 27, 35, -60, 61, -16, 1, -14, 61, 53, -11, 18, 16, -46, 40, -5, 8, 15, 15, 25, 31, -3, -9, 0, -2, 35
    0x9ec13b4, 0x1b3f03fb, 0xf03dc423, 0x353df201, 0xd21012f5, 0xf08fb28, 0xfd1f190f, 0x23fe00f7,
    // 14, 55, 16, -38, 68, -3, 45, 62, -33, 17, -52, -9, 10, 16, -59, 31, -24, 15, 8, -31, 27, 18, 40, 55, -4, -2, 52, -12, -21, -20, 38, 18
    0xda10370e, 0x3e2dfd44, 0xf7cc11df, 0x1fc5100a, 0xe1080fe8, 0x3728121b, 0xf434fefc, 0x1226eceb,
    // -12, -18, -6, 21, 8, 6, 31, 5, 3, 3, -28, -31, 35, -25, 32, 66, 21, -6, 4, 33, 13, 2, -9, -23, -11, 11, 25, 27, -38, 51, 1, -62
    0x15faeef4, 0x51f0608, 0xe1e40303, 0x4220e723, 0x2104fa15, 0xe9f7020d, 0x1b190bf5, 0xc20133da,
    // -30, -15, -35, 10, 16, 5, 7, -1, -3, 35, -21, -11, 39, -2, -50, 33, -20, 26, 28, -42, -20, 61, -14, 26, 62, 26, 50, -9, -81, -24, 21, -85
    0xaddf1e2, 0xff070510, 0xf5eb23fd, 0x21cefe27, 0xd61c1aec, 0x1af23dec, 0xf7321a3e, 0xab15e8af,
    // -53, -62, -93, 72, 32, -86, -83, -95, 81, -48, -19, 18, 36, 42, 66, 35, -16, 28, 16, -47, -2, 21, -59, -5, 33, 50, -35, 16, -69, 23, -17, -59
    0x48a3c2cb, 0xa1adaa20, 0x12edd051, 0x23422a24, 0xd1101cf0, 0xfbc515fe, 0x10dd3221, 0xc5ef17bb,
    // 1, -2, -20, -7, 0, 17, 15, 4, -4, 0, 2, 6, 34, 7, -27, 65, 51, 3, 78, 3, 43, -6, 53, 47, -83, -42, -8, 27, 39, -4, 34, -56
    0xf9ecfe01, 0x40f1100, 0x60200fc, 0x41e50722, 0x34e0333, 0x2f35fa2b, 0x1bf8d6ad, 0xc822fc27,
    // 11, -14, -23, -25, -14, -6, 9, 7, 4, 33, -15, -10, 11, -14, -7, 47, 2, -15, 64, -21, -25, 23, 2, 35, -1, 7, 13, 12, -7, 16, -12, -12
    0xe7e9f20b, 0x709faf2, 0xf6f12104, 0x2ff9f20b, 0xeb40f102, 0x230217e7, 0xc0d07ff, 0xf4f410f9,
    // 5, -66, 29, 8, -15, -28, -75, 61, 7, -4, -43, -3, -8, -44, -25, 11, -5, -18, 50, 0, -37, 16, -17, 14, -10, -34, 11, -2, -19, -1, 12, 14
    0x81dbe05, 0x3db5e4f1, 0xfdd5fc07, 0xbe7d4f8, 0x32eefb, 0xeef10db, 0xfe0bdef6, 0xe0cffed,
    // 19, -15, 65, -19, 24, 39, -27, 69, 47, 32, -23, 16, -1, 39, -37, 11, -21, -1, 26, 16, 35, 40, -110, 22, 50, 17, -70, -12, -59, -54, 31, -43
    0xed41f113, 0x45e52718, 0x10e9202f, 0xbdb27ff, 0x101affeb, 0x16922823, 0xf4ba1132, 0xd51fcac5,
    // -17, -31, 49, 25, 21, 37, -31, 15, 53, -13, -29, 20, -1, -11, 25, 9, 13, -9, 38, -17, -26, 10, -21, 47, -10, 0, -6, 2, 12, 14, 18, 0
    0x1931e1ef, 0xfe12515, 0x14e3f335, 0x919f5ff, 0xef26f70d, 0x2feb0ae6, 0x2fa00f6, 0x120e0c,
    // 23, -75, 43, 13, -18, -20, -14, 51, 22, 15, -20, -27, -5, -21, -20, 54, -1, -23, 53, 8, -27, 8, -1, 33, -26, -12, 17, -4, 0, -10, 0, -13
    0xd2bb517, 0x33f2ecee, 0xe5ec0f16, 0x36ecebfb, 0x835e9ff, 0x21ff08e5, 0xfc11f4e6, 0xf300f600,
    // -10, 15, 7, -22, -50, 49, -11, -36, 13, 11, -24, 16, 23, 33, -49, -9, 49, 66, 2, 18, -82, 38, -17, 13, -4, 28, 44, -7, 33, -1, -67, -20
    0xea070ff6, 0xdcf531ce, 0x10e80b0d, 0xf7cf2117, 0x12024231, 0xdef26ae, 0xf92c1cfc, 0xecbdff21,
    // 29, -20, 14, 12, -71, 13, -21, -25, -11, -26, -36, 12, 24, 8, 3, -11, -58, 2, -26, 11, -24, -26, -51, -52, 27, -15, -102, -8, 15, 7, 15, 27
    0xc0eec1d, 0xe7eb0db9, 0xcdce6f5, 0xf5030818, 0xbe602c6, 0xcccde6e8, 0xf89af11b, 0x1b0f070f,
    // -47, 52, 16, 3, -38, 9, 10, -39, 57, 4, 16, -28, -84, 70, 41, -68, 79, -55, 24, 62, -60, -13, -11, -45, -16, -29, 22, -12, 45, -27, 25, 15
    0x31034d1, 0xd90a09da, 0xe4100439, 0xbc2946ac, 0x3e18c94f, 0xd3f5f3c4, 0xf416e3f0, 0xf19e52d,
    // -49, -8, -9, -33, -61, 11, 0, -37, 24, -5, -50, -4, 26, -22, 29, -33, 6, 36, 39, -6, -21, 16, 34, 17, -62, 8, -18, 5, 86, 43, 30, -23
    0xdff7f8cf, 0xdb000bc3, 0xfccefb18, 0xdf1dea1a, 0xfa272406, 0x112210eb, 0x5ee08c2, 0xe91e2b56,
    // 9, -30, 50, -14, -83, 29, -22, -3, -25, 19, -3, -14, 30, -8, -28, 0, 10, -29, 11, 34, -23, -42, -5, -13, -42, -33, -28, -25, 25, -40, 81, 16
    0xf232e209, 0xfdea1dad, 0xf2fd13e7, 0xe4f81e, 0x220be30a, 0xf3fbd6e9, 0xe7e4dfd6, 0x1051d819,
    // 1, -2, -18, 7, -21, -20, 10, -39, -5, 10, 15, -20, 18, 25, 42, 7, 3, -7, 21, 8, 4, 3, 3, -22, -30, 16, -10, -8, 26, 6, -17, -9
    0x7eefe01, 0xd90aeceb, 0xec0f0afb, 0x72a1912, 0x815f903, 0xea030304, 0xf8f610e2, 0xf7ef061a,
    // 18, -19, 9, -8, 2, 47, 7, -35, 61, 1, 7, 8, -20, -47, 33, -35, 8, 120, -71, -44, 13, 64, -33, 127, 24, 127, -58, 2, 1, 80, -88, 21
    0xf809ed12, 0xdd072f02, 0x807013d, 0xdd21d1ec, 0xd4b97808, 0x7fdf400d, 0x2c67f18, 0x15a85001,
    // -80, -25, 111, 19, 2, 30, -50, -41, 3, -8, 33, -29, -42, 19, -31, -13, 23, -2, 15, 4, -17, 8, 4, -27, -9, -4, 6, -8, 21, 6, -20, 12
    0x136fe7b0, 0xd7ce1e02, 0xe321f803, 0xf3e113d6, 0x40ffe17, 0xe50408ef, 0xf806fcf7, 0xcec0615,
    // 4, 1, 19, 25, -38, -33, 29, -36, -39, -15, -39, -12, 6, -32, -26, -34, -5, -36, 13, 23, -28, -1, -3, -1, -27, -46, 43, -3, 38, 0, 38, -3
    0x19130104, 0xdc1ddfda, 0xf4d9f1d9, 0xdee6e006, 0x170ddcfb, 0xfffdffe4, 0xfd2bd2e5, 0xfd260026,
    // -6, -7, 4, 4, 20, -44, -18, 4, -53, -37, 18, 1, -4, -33, 28, -32, 52, -36, -10, -8, 31, -1, 71, -27, 15, 22, -11, -4, 58, 42, -26, 53
    0x404f9fa, 0x4eed414, 0x112dbcb, 0xe01cdffc, 0xf8f6dc34, 0xe547ff1f, 0xfcf5160f, 0x35e62a3a,
    // 19, 21, -30, -39, 25, -29, -25, -8, -32, 23, 1, -2, 18, -4, -53, -20, -35, 20, -5, -41, 18, 10, -50, 21, 7, -16, -51, 29, -36, -24, -18, 61
    0xd9e21513, 0xf8e7e319, 0xfe0117e0, 0xeccbfc12, 0xd7fb14dd, 0x15ce0a12, 0x1dcdf007, 0x3deee8dc,
    // 70, -29, 11, 39, -84, -44, -37, -37, -11, -7, -6, 2, -126, 10, -58, 39, -52, 28, 8, -77, 58, 36, 5, 59, 87, 17, -13, 8, 25, -24, -3, 34
    0x270be346, 0xdbdbd4ac, 0x2faf9f5, 0x27c60a82, 0xb3081ccc, 0x3b05243a, 0x8f31157, 0x22fde819,
    // -3, -20, -26, 5, -5, -51, -4, -51, -17, -65, -15, 11, -50, -54, 13, -81, -10, -37, -33, 7, 43, -9, 29, 0, 9, -68, -12, 36, 82, -4, -6, 36
    0x5e6ecfd, 0xcdfccdfb, 0xbf1bfef, 0xaf0dcace, 0x7dfdbf6, 0x1df72b, 0x24f4bc09, 0x24fafc52,
    // 13, 32, -14, -26, 15, -3, -15, -1, 0, -10, -10, 21, -48, 1, 13, -29, 9, -4, 3, 9, -20, 37, 7, 2, 16, 6, -18, 21, 2, 45, -26, 4
    0xe6f2200d, 0xfff1fd0f, 0x15f6f600, 0xe30d01d0, 0x903fc09, 0x20725ec, 0x15ee0610, 0x4e62d02,
    // 50, 2, 21, 46, -15, 9, -53, 37, -1, -3, 28, 24, -3, -45, -35, -60, 34, 47, -19, -16, -21, 19, -20, -23, 55, -27, -13, 8, -6, -15, -1, 13
    0x2e150232, 0x25cb09f1, 0x181cfdff, 0xc4ddd3fd, 0xf0ed2f22, 0xe9ec13eb, 0x8f3e537, 0xdfff1fa,
    // -7, -82, 6, 45, -3, -87, -32, -37, -34, -22, -36, -20, 39, 24, 58, -66, 1, -25, 25, -37, 6, 37, 40, 37, -42, 23, -38, 32, 15, 43, -46, 87
    0x2d06aef9, 0xdbe0a9fd, 0xecdceade, 0xbe3a1827, 0xdb19e701, 0x25282506, 0x20da17d6, 0x57d22b0f,
    // -18, 114, -57, -53, 10, 71, -21, 23, 89, 10, -67, 24, -62, 16, 50, -45, -19, -40, 0, 23, -12, -24, -11, -4, 15, -7, -25, -6, 23, 1, 15, -28
    0xcbc772ee, 0x17eb470a, 0x18bd0a59, 0xd33210c2, 0x1700d8ed, 0xfcf5e8f4, 0xfae7f90f, 0xe40f0117,
    // -8, -57, 50, 42, 3, 5, -30, -39, -16, 23, 6, 0, -11, -13, -36, -26, -38, 21, 6, -7, 17, 3, 11, -6, 26, 26, -7, -22, 33, 20, 8, 10
    0x2a32c7f8, 0xd9e20503, 0x617f0, 0xe6dcf3f5, 0xf90615da, 0xfa0b0311, 0xeaf91a1a, 0xa081421,
    // 12, 29, 27, -14, -22, 25, 0, 7, 24, 12, 30, -13, 10, 9, -9, 14, 68, -8, 27, 2, 19, 36, 29, 54, 29, 43, -6, 20, 59, 57, -33, -59
    0xf21b1d0c, 0x70019ea, 0xf31e0c18, 0xef7090a, 0x21bf844, 0x361d2413, 0x14fa2b1d, 0xc5df393b,
    // -29, 25, 7, -10, 3, 21, -34, -5, -13, 63, 1, -10, 39, 19, -83, -1, 52, 78, 4, -24, -23, 58, 10, 9, -32, 32, 46, 28, -16, 36, -4, 29
    0xf60719e3, 0xfbde1503, 0xf6013ff3, 0xffad1327, 0xe8044e34, 0x90a3ae9, 0x1c2e20e0, 0x1dfc24f0,
    // -39, -46, 24, 6, -7, -96, 12, 0, -28, -8, -115, -27, 68, -17, -18, -37, -100, -10, 48, 26, -10, -20, 36, -42, -31, -24, 48, -5, 15, 18, 15, 6
    0x618d2d9, 0xca0f9, 0xe58df8e4, 0xdbeeef44, 0x1a30f69c, 0xd624ecf6, 0xfb30e8e1, 0x60f120f,
    // -4, 36, 17, -1, -15, 38, -11, 13, 10, -2, 5, -8, -5, 7, -4, 7, 41, -11, -33, 24, -45, 20, -70, -1, 46, -1, 21, -10, -42, -14, 32, -14
    0xff1124fc, 0xdf526f1, 0xf805fe0a, 0x7fc07fb, 0x18dff529, 0xffba14d3, 0xf615ff2e, 0xf220f2d6,
    // -42, 23, 20, 23, -26, 40, 18, 11, 20, -20, 20, -2, -10, -7, 16, -1, 0, -24, 8, -11, 49, -41, 42, 36, -12, 19, 48, -35, -2, -31, 12, 65
    0x171417d6, 0xb1228e6, 0xfe14ec14, 0xff10f9f6, 0xf508e800, 0x242ad731, 0xdd3013f4, 0x410ce1fe,
    // 43, 111, -45, -40, 24, 12, 40, -8, 35, -31, 77, 56, -69, -15, -67, -14, 44, 24, -78, 0, 23, -7, -24, 32, 37, -28, -20, 12, -20, -17, -107, -1
    0xd8d36f2b, 0xf8280c18, 0x384de123, 0xf2bdf1bb, 0xb2182c, 0x20e8f917, 0xcece425, 0xff95efec,
    // 74, -41, 19, 20, 63, 6, 17, 26, -42, 71, 51, -11, 27, 32, -81, 47, -95, 83, -48, -8, 32, -35, -15, -6, -27, -14, -82, 35, -50, -35, 16, 36
    0x1413d74a, 0x1a11063f, 0xf53347d6, 0x2faf201b, 0xf8d053a1, 0xfaf1dd20, 0x23aef2e5, 0x2410ddce,
    // 2, -52, -6, 52, 45, -44, 3, -33, -9, -48, 5, 22, -41, -4, 0, -1, 6, -33, -6, 10, 57, -43, 37, 22, -18, 5, 13, -7, -20, -4, -37, 45
    0x34facc02, 0xdf03d42d, 0x1605d0f7, 0xff00fcd7, 0xafadf06, 0x1625d539, 0xf90d05ee, 0x2ddbfcec,
    // -37, 10, -42, -28, 40, -35, 39, 0, -7, -29, 70, -31, -30, -33, 26, -13, -6, -41, 0, 34, 60, -40, 47, 36, -36, -4, 39, -10, -38, 12, -9, 31
    0xe4d60adb, 0x27dd28, 0xe146e3f9, 0xf31adfe2, 0x2200d7fa, 0x242fd83c, 0xf627fcdc, 0x1ff70cda,
    // -13, 6, 24, -7, -1, 26, 5, -22, -1, 29, -9, -17, 18, 24, -10, 4, 10, 22, 14, -5, 10, 37, -26, -2, 17, 30, -23, -10, 27, 7, -44, -16
    0xf91806f3, 0xea051aff, 0xeff71dff, 0x4f61812, 0xfb0e160a, 0xfee6250a, 0xf6e91e11, 0xf0d4071b,
    // 32, 30, 7, -10, -25, 32, -26, -32, 25, -13, -7, 3, 3, -17, -1, -26, 0, 51, 16, -70, 36, 76, 63, 33, 65, 22, 22, -36, 6, 15, 39, -31
    0xf6071e20, 0xe0e620e7, 0x3f9f319, 0xe6ffef03, 0xba103300, 0x213f4c24, 0xdc161641, 0xe1270f06,
    // 55, -45, 11, 83, -66, -36, -120, 11, -103, -1, 40, 54, -21, -47, -18, 86, 1, 5, 28, 13, -6, -5, 14, -25, -23, -10, -68, 1, -19, 48, -31, 30
    0x530bd337, 0xb88dcbe, 0x3628ff99, 0x56eed1eb, 0xd1c0501, 0xe70efbfa, 0x1bcf6e9, 0x1ee130ed,
    // 5, 33, 14, -25, 3, 20, -42, -1, 2, 41, 10, -2, 9, 49, -20, -15, -70, -51, 66, -2, 5, 2, 36, -14, -10, 6, -48, -51, 32, -54, -15, -60
    0xe70e2105, 0xffd61403, 0xfe0a2902, 0xf1ec3109, 0xfe42cdba, 0xf2240205, 0xcdd006f6, 0xc4f1ca20,
    // -43, -18, 16, 21, -1, 12, -18, -43, -9, -13, 24, 4, 25, 13, 8, -33, 23, 18, 3, -11, 43, 28, 30, 15, 0, 1, 55, 32, -62, 28, -90, -29
    0x1510eed5, 0xd5ee0cff, 0x418f3f7, 0xdf080d19, 0xf5031217, 0xf1e1c2b, 0x20370100, 0xe3a61cc2,
    // 49, -45, 8, 76, 32, -74, -1, 42, -39, 22, 17, -48, 42, -45, -58, 22, 17, -12, 5, -11, 65, -47, 50, -8, -28, -31, 25, 1, -28, -32, 60, 9
    0x4c08d331, 0x2affb620, 0xd01116d9, 0x16c6d32a, 0xf505f411, 0xf832d141, 0x119e1e4, 0x93ce0e4,
    // -14, 20, -27, -26, 8, -6, 2, 30, 29, 31, 9, 23, -19, 7, 3, 68, -68, 76, -77, -105, 11, -2, 40, 3, 55, 51, 19, -62, -61, 67, -8, 41
    0xe6e514f2, 0x1e02fa08, 0x17091f1d, 0x440307ed, 0x97b34cbc, 0x328fe0b, 0xc2133337, 0x29f843c3,
    // 32, 5, -27, 10, 4, -11, 17, 30, -4, 23, -1, 20, 2, -18, -9, 24, -14, 4, -1, -1, 53, -7, 22, 46, -20, -35, 47, 7, -49, -29, -1, -8
    0xae50520, 0x1e11f504, 0x14ff17fc, 0x18f7ee02, 0xffff04f2, 0x2e16f935, 0x72fddec, 0xf8ffe3cf,
    // 6, -56, 23, 53, 56, -43, 58, 21, -47, -55, -12, 6, 21, -35, -25, -2, -11, -2, -34, 5, 34, -29, -1, 3, -6, -55, 4, 30, -27, -20, -38, -11
    0x3517c806, 0x153ad538, 0x6f4c9d1, 0xfee7dd15, 0x5defef5, 0x3ffe322, 0x1e04c9fa, 0xf5daece5,
    // 9, 27, 51, -7, -7, 74, 40, 20, 36, 44, 35, -1, 22, 34, -59, -5, -60, 38, 6, -25, 16, 8, -76, -9, -6, 39, -3, -37, -40, -23, 69, -24
    0xf9331b09, 0x14284af9, 0xff232c24, 0xfbc52216, 0xe70626c4, 0xf7b40810, 0xdbfd27fa, 0xe845e9d8,
    // -39, -35, 28, 26, 6, -8, 14, -37, -23, 17, 13, -23, 18, 36, 42, 23, 76, 7, 22, 31, -11, -51, -73, -16, -89, 23, 30, 17, 34, 106, -53, 17
    0x1a1cddd9, 0xdb0ef806, 0xe90d11e9, 0x172a2412, 0x1f16074c, 0xf0b7cdf5, 0x111e17a7, 0x11cb6a22,
    // 27, -75, 2, 63, -73, 11, 12, -37, 48, 43, -74, 8, -124, 4, -41, 34, -37, 26, -31, 5, 6, 27, 14, 28, -4, -14, 58, -3, 41, -11, 41, -59
    0x3f02b51b, 0xdb0c0bb7, 0x8b62b30, 0x22d70484, 0x5e11adb, 0x1c0e1b06, 0xfd3af2fc, 0xc529f529,
    // 9, -14, 38, 2, -11, 15, 14, -10, -7, -3, -1, -37, 10, -17, 4, 5, -44, 13, 21, -41, 40, 18, 22, -19, -15, -43, -56, 51, 65, -13, 22, -85
    0x226f209, 0xf60e0ff5, 0xdbfffdf9, 0x504ef0a, 0xd7150dd4, 0xed161228, 0x33c8d5f1, 0xab16f341,
    // 6, 14, 10, -12, -18, 16, -6, -6, 3, 25, -28, -22, 11, 7, -20, 15, 41, -3, 1, -6, 20, 22, 25, -47, 5, 36, 7, 22, -27, 50, -93, -5
    0xf40a0e06, 0xfafa10ee, 0xeae41903, 0xfec070b, 0xfa01fd29, 0xd1191614, 0x16072405, 0xfba332e5,
    // -27, 100, -83, -44, 2, -36, -1, 72, 12, 16, -12, -49, 76, -40, -71, -8, -10, -24, 20, -15, 40, -40, 33, -32, -44, 6, 53, -31, -17, 7, 60, 24
    0xd4ad64e5, 0x48ffdc02, 0xcff4100c, 0xf8b9d84c, 0xf114e8f6, 0xe021d828, 0xe13506d4, 0x183c07ef,
    // -12, -59, 64, 27, 4, -55, -3, -13, -10, -47, 15, -15, 0, -62, -5, -18, -17, -33, 14, 62, 7, -12, -4, -15, 5, -45, 37, 44, 39, -64, -18, 51
    0x1b40c5f4, 0xf3fdc904, 0xf10fd1f6, 0xeefbc200, 0x3e0edfef, 0xf1fcf407, 0x2c25d305, 0x33eec027,
    // -41, 4, 6, -56, 42, 12, -6, -15, 31, 36, -26, 10, -27, 7, -16, 21, 50, -4, -35, 8, 28, -13, 6, 20, -9, -21, 26, 4, 7, -16, 58, 11
    0xc80604d7, 0xf1fa0c2a, 0xae6241f, 0x15f007e5, 0x8ddfc32, 0x1406f31c, 0x41aebf7, 0xb3af007,
    // 35, 92, -49, -23, -25, 4, 56, 37, -1, -7, -16, -20, -66, -12, -2, 51, -15, -4, -15, -4, -8, -34, -6, 7, -6, -32, 50, -14, -5, -3, -21, -21
    0xe9cf5c23, 0x253804e7, 0xecf0f9ff, 0x33fef4be, 0xfcf1fcf1, 0x7fadef8, 0xf232e0fa, 0xebebfdfb,
};
static const uint embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // -8.917e-05, 3.535e-05, 0.00011605, -8.3e-07, -0.0002013, -0.00029, -0.0002337, 0.00029, -0.0001925, -9.83e-06, -0.0003135, -7.766e-05, 0.0003886, 0.000248, 0.000286, 0.0001103
    0x25185d8, 0x800e079b, 0x8cc08a99, 0xcc08ba8, 0x80a58a4f, 0x85178d23, 0xc100e5e, 0x73b0cb0,
};
static const uint embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 15, -13, 5, 18, 23, -24, -16, -10, 22, -8, 13, -11, 33, -16, 26, 15, 12, 40, 25, -31, 5, 35, -43, 1, 51, 19, 40, -12, 57, -6, -24, 22
    0x1205f30f, 0xf6f0e817, 0xf50df816, 0xf1af021, 0xe119280c, 0x1d52305, 0xf4281333, 0x16e8fa39,
    // 10, 3, 16, -10, -14, -22, -16, -13, 8, 14, -4, -16, 12, 1, -1, -18, -34, 36, -17, 22, 83, 4, -18, -26, -35, 17, -38, 10, 17, -126, -30, 3
    0xf610030a, 0xf3f0eaf2, 0xf0fc0e08, 0xeeff010c, 0x16ef24de, 0xe6ee0453, 0xada11dd, 0x3e28211,
    // -47, -17, 53, -81, 31, 62, -31, 24, -82, 85, -85, -46, 65, 50, -60, 71, -2, 40, -7, -57, 0, -31, 52, -14, 4, -3, 34, 6, -15, -17, -20, 12
    0xaf35efd1, 0x18e13e1f, 0xd2ab55ae, 0x47c43241, 0xc7f928fe, 0xf234e100, 0x622fd04, 0xceceff1,
    // -12, 81, -21, -4, 27, -28, -66, -41, 57, 88, -24, -12, -31, -34, 19, 10, 13, 28, 1, -27, -12, -34, 11, -13, -23, 2, 22, 5, -30, -33, -2, -12
    0xfceb51f4, 0xd7bee41b, 0xf4e85839, 0xa13dee1, 0xe5011c0d, 0xf30bdef4, 0x51602e9, 0xf4fedfe2,
    // 66, 1, 0, 53, -43, 7, 59, -48, -57, 67, -71, 75, 35, -5, -51, -60, -44, 11, 15, 9, 53, -42, 16, 68, 6, 31, -9, 22, -44, 4, -13, -87
    0x35000142, 0xd03b07d5, 0x4bb943c7, 0xc4cdfb23, 0x90f0bd4, 0x4410d635, 0x16f71f06, 0xa9f304d4,
    // -53, 51, 28, -41, -72, -32, 62, 50, -82, -55, -32, 76, -63, -12, 23, 17, -21, 30, 3, -33, 10, -24, -52, -30, 20, 31, 79, -36, -18, -43, 2, -22
    0xd71c33cb, 0x323ee0b8, 0x4ce0c9ae, 0x1117f4c1, 0xdf031eeb, 0xe2cce80a, 0xdc4f1f14, 0xea02d5ee,
    // -33, -9, 29, 31, -28, -14, -13, -28, -9, 16, 25, -31, 3, 19, -3, -37, 25, 108, -16, 19, 22, -35, 69, 0, 36, -66, -70, 58, -11, -17, -2, 8
    0x1f1df7df, 0xe4f3f2e4, 0xe11910f7, 0xdbfd1303, 0x13f06c19, 0x45dd16, 0x3ababe24, 0x8feeff5,
    // -12, 50, 50, 27, 77, -13, 53, 24, 30, -8, -48, 1, 40, 56, 79, -31, -4, -5, -31, 20, 3, 22, 21, -9, -43, -9, 9, -27, 16, 24, -7, -30
    0x1b3232f4, 0x1835f34d, 0x1d0f81e, 0xe14f3828, 0x14e1fbfc, 0xf7151603, 0xe509f7d5, 0xe2f91810,
    // 10, -28, -29, 25, 0, 23, -54, 67, -35, 25, -73, 25, -62, -74, 100, 18, 5, 74, 16, -72, -8, 6, 34, -22, 2, -15, -18, 25, -62, -60, 29, -4
    0x19e3e40a, 0x43ca1700, 0x19b719dd, 0x1264b6c2, 0xb8104a05, 0xea2206f8, 0x19eef102, 0xfc1dc4c2,
    // 7, -26, 42, 32, 15, -8, -41, -20, 20, -21, -19, 59, -36, 66, -29, 32, 80, 33, 22, 42, 12, 2, -1, -8, -14, 3, -21, 7, 4, -20, 50, -31
    0x202ae607, 0xecd7f80f, 0x3bedeb14, 0x20e342dc, 0x2a162150, 0xf8ff020c, 0x7eb03f2, 0xe132ec04,
    // -35, -85, 9, -41, -1, 12, 72, 2, -21, -92, -50, -22, 22, 39, -56, -28, 4, 34, -3, -7, -3, -23, 14, -16, 1, 5, 13, 14, -29, -12, 30, -6
    0xd709abdd, 0x2480cff, 0xeacea4eb, 0xe4c82716, 0xf9fd2204, 0xf00ee9fd, 0xe0d0501, 0xfa1ef4e3,
    // 14, 22, 22, -21, -8, 31, 10, 3, 7, 1, -16, 12, 5, 8, -1, -1, 51, -13, 13, 66, 29, -17, -50, 96, -76, -27, -44, -45, 14, -10, -51, 41
    0xeb16160e, 0x30a1ff8, 0xcf00107, 0xffff0805, 0x420df333, 0x60ceef1d, 0xd3d4e5b4, 0x29cdf60e,
    // 15, 14, 32, -25, 3, 51, -6, 0, 7, 7, -3, 0, -5, 18, -7, -22, -8, -3, 6, -104, -24, -63, 61, -16, 7, 47, 69, -14, 1, -46, 16, 25
    0xe7200e0f, 0xfa3303, 0xfd0707, 0xeaf912fb, 0x9806fdf8, 0xf03dc1e8, 0xf2452f07, 0x1910d201,
    // -63, -77, 91, -67, 15, 13, 29, -32, 75, 59, -84, -55, -43, -53, -66, -40, -2, 44, 32, -43, -21, -47, 16, -2, -4, 35, 71, 8, -14, -19, -11, 9
    0xbd5bb3c1, 0xe01d0d0f, 0xc9ac3b4b, 0xd8becbd5, 0xd5202cfe, 0xfe10d1eb, 0x84723fc, 0x9f5edf2,
    // 27, 11, 32, -22, -17, -18, -5, -8, -9, 1, 1, 1, 8, -3, -3, -4, 15, -18, 34, -33, 42, 23, -20, 48, -55, 31, -43, -49, -15, -37, 119, -32
    0xea200b1b, 0xf8fbeeef, 0x10101f7, 0xfcfdfd08, 0xdf22ee0f, 0x30ec172a, 0xcfd51fc9, 0xe077dbf1,
    // 35, -18, 9, -12, 9, 48, -20, 49, 40, 4, -31, -6, 0, 16, -6, 9, -16, -9, 38, -6, -32, 6, -84, 1, 83, -15, 56, 64, -15, 28, -24, -55
    0xf409ee23, 0x31ec3009, 0xfae10428, 0x9fa1000, 0xfa26f7f0, 0x1ac06e0, 0x4038f153, 0xc9e81cf1,
    // -53, -50, -16, 61, 33, 10, -13, -71, 6, -16, 31, -13, 38, -68, 22, 39, 43, 57, -1, 6, -10, -119, 36, -21, 37, -33, -34, 54, -94, -54, 19, -63
    0x3df0cecb, 0xb9f30a21, 0xf31ff006, 0x2716bc26, 0x6ff392b, 0xeb2489f6, 0x36dedf25, 0xc113caa2,
    // -7, 21, 8, -10, 19, 12, 0, -1, -17, 9, 6, 3, -10, 13, 7, -9, -34, -83, -4, 7, -36, 19, -14, 2, 36, 53, 13, 2, 100, 53, 15, 88
    0xf60815f9, 0xff000c13, 0x30609ef, 0xf7070df6, 0x7fcadde, 0x2f213dc, 0x20d3524, 0x580f3564,
    // 4, -10, -8, -25, -15, 34, -9, 57, 4, 8, -47, 5, -13, 14, 1, -14, 10, 81, -15, -44, 12, -28, -16, -15, -36, 9, 47, 15, -32, 26, 13, -43
    0xe7f8f604, 0x39f722f1, 0x5d10804, 0xf2010ef3, 0xd4f1510a, 0xf1f0e40c, 0xf2f09dc, 0xd50d1ae0,
    // 7, 9, 30, -35, -7, -4, 5, 29, -29, 19, 15, 11, -26, 15, -3, -7, 53, 6, 24, -6, 22, -37, -24, 30, 22, 28, 8, -3, -15, -64, 82, -27
    0xdd1e0907, 0x1d05fcf9, 0xb0f13e3, 0xf9fd0fe6, 0xfa180635, 0x1ee8db16, 0xfd081c16, 0xe552c0f1,
    // 25, 14, -9, 3, -16, 5, 47, 10, -14, -5, -19, 26, -2, 7, -25, 11, -16, 43, -77, -21, -21, 31, -10, -24, 13, -79, 39, 19, 19, -13, 42, 21
    0x3f70e19, 0xa2f05f0, 0x1aedfbf2, 0xbe707fe, 0xebb32bf0, 0xe8f61feb, 0x1327b10d, 0x152af313,
    // 0, 0, 18, 7, 22, -1, 6, -12, -22, 13, 8, 0, -22, 11, 1, -26, 2, -26, 23, -19, 12, -9, -20, 75, 35, -11, -63, 17, 16, 15, 91, -6
    0x7120000, 0xf406ff16, 0x80dea, 0xe6010bea, 0xed17e602, 0x4becf70c, 0x11c1f523, 0xfa5b0f10,
    // -5, 81, 12, -90, 25, 35, -32, -79, -47, -47, -5, 52, 5, 36, 41, -38, -13, 18, 10, 27, 0, -8, -21, 4, 24, -2, 13, -18, -3, -14, 12, 4
    0xa60c51fb, 0xb1e02319, 0x34fbd1d1, 0xda292405, 0x1b0a12f3, 0x4ebf800, 0xee0dfe18, 0x40cf2fd,
    // 53, 2, 8, 7, -23, 57, 13, 0, 65, -31, 40, 32, -69, -12, 23, -85, -3, 14, -29, -6, -5, -34, 19, -20, -3, -5, 26, -2, -28, -15, 4, -20
    0x7080235, 0xd39e9, 0x2028e141, 0xab17f4bb, 0xfae30efd, 0xec13defb, 0xfe1afbfd, 0xec04f1e4,
    // 34, -33, -31, -38, -72, -4, -46, -42, -31, 19, 44, 0, -23, -40, -69, 20, 14, 0, -26, -31, -46, 4, 31, 8, 30, -38, 0, -9, -22, 1, -12, -30
    0xdae1df22, 0xd6d2fcb8, 0x2c13e1, 0x14bbd8e9, 0xe1e6000e, 0x81f04d2, 0xf700da1e, 0xe2f401ea,
    // 93, 26, -5, -24, 64, 13, 16, 25, 38, 19, 11, -29, -5, 58, -62, -6, -8, 38, 0, 4, 16, -42, -19, -21, -53, 7, 69, -7, -23, -9, -24, -42
    0xe8fb1a5d, 0x19100d40, 0xe30b1326, 0xfac23afb, 0x40026f8, 0xebedd610, 0xf94507cb, 0xd6e8f7e9,
    // 28, -25, -21, -40, -73, 26, 50, -47, 28, 31, -52, -43, -71, 65, 54, 53, 4, 29, -1, -49, -11, -17, 54, -14, -2, -9, 14, 5, -18, -35, -28, 16
    0xd8ebe71c, 0xd1321ab7, 0xd5cc1f1c, 0x353641b9, 0xcfff1d04, 0xf236eff5, 0x50ef7fe, 0x10e4ddee,
    // 12, 1, 12, 7, -22, 6, 1, 1, -9, 10, -11, 1, 9, -7, -16, 4, -5, 113, 70, 9, -33, 20, 32, -38, 5, 17, -16, -8, 2, -14, 60, -28
    0x70c010c, 0x10106ea, 0x1f50af7, 0x4f0f909, 0x94671fb, 0xda2014df, 0xf8f01105, 0xe43cf202,
    // 9, 6, 25, -18, -18, -13, -3, -13, 6, -1, 4, -2, 18, -20, 9, 6, -52, 45, 40, -44, 92, -128, 5, 22, -10, -75, -72, -25, 2, -34, 61, -69
    0xee190609, 0xf3fdf3ee, 0xfe04ff06, 0x609ec12, 0xd4282dcc, 0x1605805c, 0xe7b8b5f6, 0xbb3dde02,
    // 52, 34, 27, 71, -73, 77, -13, 44, -63, -18, 71, -2, 39, 34, 46, 33, -19, 31, 23, -40, 0, -31, -33, 0, -12, -13, 41, 19, -8, -32, 31, 9
    0x471b2234, 0x2cf34db7, 0xfe47eec1, 0x212e2227, 0xd8171fed, 0xdfe100, 0x1329f3f4, 0x91fe0f8,
    // 10, 84, -77, -92, -13, 11, 101, 48, -35, 33, 43, -91, 34, -105, 42, -50, 10, 18, -14, -7, 33, -34, 48, -3, -31, -14, -4, 0, 13, 23, 32, -32
    0xa4b3540a, 0x30650bf3, 0xa52b21dd, 0xce2a9722, 0xf9f2120a, 0xfd30de21, 0xfcf2e1, 0xe020170d,
    // 8, 43, -15, -42, 43, 24, 11, -6, -28, -17, -9, 48, -61, 38, -14, 1, -22, 97, -39, -65, 54, -34, 81, -40, 48, 16, -15, 16, -43, -29, 8, 8
    0xd6f12b08, 0xfa0b182b, 0x30f7efe4, 0x1f226c3, 0xbfd961ea, 0xd851de36, 0x10f11030, 0x808e3d5,
    // 17, 26, 33, -40, 2, -10, 9, 25, -10, 4, -2, 2, -22, 30, 8, -19, -15, -65, 18, 4, 115, -65, -4, 9, 34, -50, -65, 35, 26, -125, -5, -59
    0xd8211a11, 0x1909f602, 0x2fe04f6, 0xed081eea, 0x412bff1, 0x9fcbf73, 0x23bfce22, 0xc5fb831a,
    // 3, 34, -5, 8, -48, 5, 10, -35, 74, -41, -18, -10, 51, -4, -30, 29, 76, 9, -43, 66, 30, -92, -56, 71, 8, -1, 23, 38, -48, -2, -43, 41
    0x8fb2203, 0xdd0a05d0, 0xf6eed74a, 0x1de2fc33, 0x42d5094c, 0x47c8a41e, 0x2617ff08, 0x29d5fed0,
    // -16, -37, -45, -7, -59, -11, -68, 54, -14, -17, -75, -36, 21, 4, 40, -58, -9, -7, -19, 32, 5, -40, 11, -11, -42, 0, 25, 8, -14, 5, 4, -8
    0xf9d3dbf0, 0x36bcf5c5, 0xdcb5eff2, 0xc6280415, 0x20edf9f7, 0xf50bd805, 0x81900d6, 0xf80405f2,
    // -42, 60, 23, -4, -26, 39, 14, -12, 35, -32, -3, -24, 18, 54, -18, -5, -2, 71, -52, -2, -13, 47, 37, -69, 63, -40, 62, -103, -41, -17, -20, -22
    0xfc173cd6, 0xf40e27e6, 0xe8fde023, 0xfbee3612, 0xfecc47fe, 0xbb252ff3, 0x993ed83f, 0xeaecefd7,
    // 19, -20, -21, -23, -9, -15, -7, 10, -32, 15, 11, 11, -28, 6, -6, 0, 65, -53, 20, -68, -60, -12, 47, 80, 44, -51, -3, 50, 18, -50, 25, -62
    0xe9ebec13, 0xaf9f1f7, 0xb0b0fe0, 0xfa06e4, 0xbc14cb41, 0x502ff4c4, 0x32fdcd2c, 0xc219ce12,
    // -3, 11, 25, -29, -52, -34, 16, 80, -40, 31, -4, -14, -60, 56, -9, -59, 34, -34, 57, -44, -7, 81, -81, 59, 51, 52, 82, -40, 47, -70, -42, 41
    0xe3190bfd, 0x5010decc, 0xf2fc1fd8, 0xc5f738c4, 0xd439de22, 0x3baf51f9, 0xd8523433, 0x29d6ba2f,
    // 51, 43, 40, -65, -7, 36, 8, 37, -4, 51, 20, -3, -37, 82, -31, -48, 10, -1, 45, -30, 4, -16, 34, -11, -26, 58, 33, -41, 20, -23, 49, 17
    0xbf282b33, 0x250824f9, 0xfd1433fc, 0xd0e152db, 0xe22dff0a, 0xf522f004, 0xd7213ae6, 0x1131e914,
    // 39, -3, 17, 36, 8, 97, -29, 53, -10, -11, 67, 27, -2, -15, 54, -6, -19, 30, 35, -26, -16, -33, 33, -1, -8, 13, 31, 6, 6, -3, -1, 10
    0x2411fd27, 0x35e36108, 0x1b43f5f6, 0xfa36f1fe, 0xe6231eed, 0xff21dff0, 0x61f0df8, 0xafffd06,
    // -45, 12, -18, 9, 11, 58, 9, -1, 19, -24, -12, -10, -24, 23, -10, -7, 45, 55, 49, -22, 26, -15, 37, -77, -57, 39, -79, 31, 32, 50, 19, -93
    0x9ee0cd3, 0xff093a0b, 0xf6f4e813, 0xf9f617e8, 0xea31372d, 0xb325f11a, 0x1fb127c7, 0xa3133220,
    // -30, -24, -19, -72, -12, -3, 28, 37, 52, 58, 41, 62, 58, 40, 22, 2, -4, 5, -16, 6, 8, -12, 22, 7, -18, 18, 5, 18, -10, -14, -2, -32
    0xb8ede8e2, 0x251cfdf4, 0x3e293a34, 0x216283a, 0x6f005fc, 0x716f408, 0x120512ee, 0xe0fef2f6,
    // 6, 13, -6, -11, -5, -4, 3, 0, 2, -16, -13, 14, -4, -3, 1, 5, 35, 13, 8, 1, -24, 22, 121, 11, -3, -100, -38, 20, 5, -27, -21, -13
    0xf5fa0d06, 0x3fcfb, 0xef3f002, 0x501fdfc, 0x1080d23, 0xb7916e8, 0x14da9cfd, 0xf3ebe505,
    // -20, 65, 17, 3, 25, 15, -29, 69, 6, -45, 29, 55, 52, -37, -89, -42, 3, 34, 11, -39, 9, -7, 55, -16, 19, -36, 39, 16, -10, -25, -29, 2
    0x31141ec, 0x45e30f19, 0x371dd306, 0xd6a7db34, 0xd90b2203, 0xf037f909, 0x1027dc13, 0x2e3e7f6,
    // 12, 28, 26, -32, -28, -5, 10, 19, -10, -3, -13, 13, -20, 13, 0, -4, -5, -3, 8, -82, 87, -4, 10, -31, -28, 18, 52, -11, -7, -17, -43, 8
    0xe01a1c0c, 0x130afbe4, 0xdf3fdf6, 0xfc000dec, 0xae08fdfb, 0xe10afc57, 0xf53412e4, 0x8d5eff9,
    // -10, 4, -27, 3, 8, 20, 6, -7, 3, 10, 5, -28, 10, -11, -2, -11, 96, -9, 43, 24, -62, -36, -41, -22, -5, 28, -37, -36, 70, -6, -2, -110
    0x3e504f6, 0xf9061408, 0xe4050a03, 0xf5fef50a, 0x182bf760, 0xead7dcc2, 0xdcdb1cfb, 0x92fefa46,
    // 39, 19, 12, -42, 13, 4, -8, -25, 45, -30, -7, 17, 43, -7, 15, 41, -116, 31, -54, -21, 44, -60, -10, 94, -43, -80, -33, -45, -3, 35, 10, -50
    0xd60c1327, 0xe7f8040d, 0x11f9e22d, 0x290ff92b, 0xebca1f8c, 0x5ef6c42c, 0xd3dfb0d5, 0xce0a23fd,
    // -24, 7, 40, -18, 22, 0, 78, -37, 16, 33, 81, 61, 23, -5, 0, 50, 3, 4, -17, 39, 1, -26, 16, -23, -8, 3, -27, -6, -36, -26, -31, 9
    0xee2807e8, 0xdb4e0016, 0x3d512110, 0x3200fb17, 0x27ef0403, 0xe910e601, 0xfae503f8, 0x9e1e6dc,
    // -27, 93, -21, 23, -63, 50, -1, 37, 20, 20, -14, 26, -20, 16, -1, 30, 1, 44, 11, -13, 5, -12, 25, 7, -10, -4, 21, 5, -44, -30, 42, 0
    0x17eb5de5, 0x25ff32c1, 0x1af21414, 0x1eff10ec, 0xf30b2c01, 0x719f405, 0x515fcf6, 0x2ae2d4,
    // -10, 18, -11, 3, 5, -17, 18, 0, -5, 2, -12, 18, -1, 7, -5, 4, -88, -22, -23, 73, -69, -4, -52, -72, 38, 2, 44, 13, 5, 53, -60, 66
    0x3f512f6, 0x12ef05, 0x12f402fb, 0x4fb07ff, 0x49e9eaa8, 0xb8ccfcbb, 0xd2c0226, 0x42c43505,
    // 4, -4, 4, -9, -2, 2, -10, 3, -1, -3, 0, -3, 5, 1, 8, -3, 29, -18, -105, 34, 26, -26, 54, 43, 24, -32, -22, 27, -33, -37, 51, -18
    0xf704fc04, 0x3f602fe, 0xfd00fdff, 0xfd080105, 0x2297ee1d, 0x2b36e61a, 0x1beae018, 0xee33dbdf,
    // 5, -27, 3, -28, 31, 92, -2, 13, 7, 16, -12, 7, -14, -7, 6, -6, 1, 55, -3, -72, 20, -25, 13, 20, 25, 19, -12, 54, 0, 12, -14, 12
    0xe403e505, 0xdfe5c1f, 0x7f41007, 0xfa06f9f2, 0xb8fd3701, 0x140de714, 0x36f41319, 0xcf20c00,
    // 28, -29, 36, 23, -5, -31, -32, 9, 19, -29, -29, 67, -47, 51, -31, 44, -14, -17, -56, -16, 40, 4, 36, 29, -49, 23, 20, 21, -44, -43, 6, 33
    0x1724e31c, 0x9e0e1fb, 0x43e3e313, 0x2ce133d1, 0xf0c8eff2, 0x1d240428, 0x151417cf, 0x2106d5d4,
    // 27, 4, 31, -21, -11, -31, -2, 26, -10, 4, 1, 1, 6, 0, 29, -5, -14, -39, -64, -21, 14, 16, 9, 93, 8, -17, 23, -19, -34, -56, 26, 28
    0xeb1f041b, 0x1afee1f5, 0x10104f6, 0xfb1d0006, 0xebc0d9f2, 0x5d09100e, 0xed17ef08, 0x1c1ac8de,
    // 66, 34, 33, -97, -58, -9, -7, 93, -6, -21, -49, 25, -4, -7, 20, 19, -50, 67, -69, 82, 8, 0, 13, 24, 33, -47, 32, -61, 22, -52, -38, -40
    0x9f212242, 0x5df9f7c6, 0x19cfebfa, 0x1314f9fc, 0x52bb43ce, 0x180d0008, 0xc320d121, 0xd8dacc16,
    // 40, -61, -65, 17, 59, 9, 13, -41, -51, -88, 44, -7, 67, 63, -1, -43, 0, 35, 13, -66, -1, -71, 44, -14, 5, 2, 10, 4, -28, -47, -36, -3
    0x11bfc328, 0xd70d093b, 0xf92ca8cd, 0xd5ff3f43, 0xbe0d2300, 0xf22cb9ff, 0x40a0205, 0xfddcd1e4,
    // 22, 2, 21, -4, -7, -19, 3, 0, 16, 3, -13, 5, 34, -9, 13, 5, 23, 1, -38, 41, -81, -27, -20, 89, -76, -18, -33, 22, 4, -77, -11, -70
    0xfc150216, 0x3edf9, 0x5f30310, 0x50df722, 0x29da0117, 0x59ece5af, 0x16dfeeb4, 0xbaf5b304,
    // -36, -36, 26, 48, -43, -11, -30, 26, 32, 3, -11, -38, 36, -27, 44, -4, 54, 79, -69, -29, 21, -29, 115, 9, -84, 24, -6, 26, -54, -40, 21, -39
    0x301adcdc, 0x1ae2f5d5, 0xdaf50320, 0xfc2ce524, 0xe3bb4f36, 0x973e315, 0x1afa18ac, 0xd915d8ca,
    // 89, 69, 45, 56, 30, 0, 10, -34, -52, -70, -57, -76, -86, -46, -61, 28, 16, 12, -35, -2, -18, -24, 45, -20, -55, 4, -9, -31, -35, -13, -42, 8
    0x382d4559, 0xde0a001e, 0xb4c7bacc, 0x1cc3d2aa, 0xfedd0c10, 0xec2de8ee, 0xe1f704c9, 0x8d6f3dd,
    // -32, 3, 21, -64, 53, -16, -41, 47, 25, -68, 59, -39, -34, 32, 39, 45, 51, 20, -45, -74, 32, -13, -42, 10, -27, -19, 21, 60, -18, -22, 51, 10
    0xc01503e0, 0x2fd7f035, 0xd93bbc19, 0x2d2720de, 0xb6d31433, 0xad6f320, 0x3c15ede5, 0xa33eaee,
    // -8, -43, 11, 21, -23, -12, -29, 31, -17, 30, -1, -33, -4, 0, 1, -25, 37, 20, -48, -14, 70, 56, -25, 42, -29, 44, 55, 99, -93, -84, 4, 11
    0x150bd5f8, 0x1fe3f4e9, 0xdfff1eef, 0xe70100fc, 0xf2d01425, 0x2ae73846, 0x63372ce3, 0xb04aca3,
    // -24, 36, -70, 11, 5, -34, 27, 4, -28, -21, -4, 15, -46, 31, -17, -5, 4, -27, 1, -76, -57, -44, 17, 18, -20, 75, -19, 73, 16, 25, 34, 31
    0xbba24e8, 0x41bde05, 0xffcebe4, 0xfbef1fd2, 0xb401e504, 0x1211d4c7, 0x49ed4bec, 0x1f221910,
    // 8, 14, 25, -7, -28, -13, 11, 34, -4, 14, -4, -5, -3, 20, 10, -16, 118, -2, 63, 18, 28, 30, -32, 1, -65, 7, -13, -13, -62, -24, 19, -58
    0xf9190e08, 0x220bf3e4, 0xfbfc0efc, 0xf00a14fd, 0x123ffe76, 0x1e01e1c, 0xf3f307bf, 0xc613e8c2,
    // 5, -7, 23, -10, -3, 5, -12, -6, -16, 9, 13, 2, 2, 5, 6, -9, -16, 99, -91, 33, 39, -3, 31, -16, -62, -21, 24, -7, -56, -37, -43, -23
    0xf617f905, 0xfaf405fd, 0x20d09f0, 0xf7060502, 0x21a563f0, 0xf01ffd27, 0xf918ebc2, 0xe9d5dbc8,
};
static const uint embedded_encoder3_ResidualBlock_1_body_pw_expand_bias_dwords[32] = {
    // -0.1272, -0.05838, -0.0475, -0.01947, -0.0931, -0.0808, 0.02806, -0.05185, -0.05975, -0.04904, -0.01755, -0.0692, 0.01155, -0.03555, 0.0696, -0.05878
    0xab79b012, 0xa4fcaa14, 0xad2cadf5, 0xaaa3272f, 0xaa47aba6, 0xac6ea47e, 0xa88d21ea, 0xab862c74,
    // -0.005127, -0.4683, -0.03613, 0.0787, 0.00843, 0.11285, -0.02335, -0.04507, -0.00923, -0.0731, -0.0657, -0.08075, -0.0655, -0.03604, -0.03085, -0.002865
    0xb77e9d40, 0x2d09a8a0, 0x2f392051, 0xa9c5a5fa, 0xacaea0ba, 0xad2bac34, 0xa89dac31, 0x99dea7e6,
    // -0.0809, -0.0701, -0.04153, -0.4092, -0.07086, -0.2756, -0.03494, 0.02763, -0.1488, -0.05765, -0.0228, -0.05594, -0.0196, -0.178, -0.05716, -0.03482
    0xac7dad2d, 0xb68ca951, 0xb469ac89, 0x2713a879, 0xab61b0c3, 0xab29a5d6, 0xb1b2a505, 0xa875ab51,
    // 0.00925, -0.2439, 0.0003912, 0.01392, -0.0918, -0.0125, -0.05768, -0.02505, -0.001488, -0.004635, -0.05408, -0.0711, -0.06464, -0.05743, -0.01124, 0.002008
    0xb3ce20bc, 0x23210e69, 0xa266ade0, 0xa66aab62, 0x9cbf9618, 0xac8daaec, 0xab5aac23, 0x181da1c1,
};
static const uint embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 24, 9, -5, 31, 2, -14, 58, -3, -42, 18, -46, 68, -5, -6, -38, 7, 10, 40, 62, 28, 14, 0, -28, -34, 19, -43, -7, 41, 65, 0, 22, -34
    0x1ffb0918, 0xfd3af202, 0x44d212d6, 0x7dafafb, 0x1c3e280a, 0xdee4000e, 0x29f9d513, 0xde160041,
    // 14, 54, -23, -1, -30, 65, -17, -46, 1, 7, 11, -10, 22, -5, 4, 31, -20, -9, 73, -47, 12, -23, 30, 3, 1, -44, 9, 35, -39, 15, -26, 48
    0xffe9360e, 0xd2ef41e2, 0xf60b0701, 0x1f04fb16, 0xd149f7ec, 0x31ee90c, 0x2309d401, 0x30e60fd9,
    // -57, -34, -13, -42, -31, 58, -106, -56, -59, 34, -2, -57, -69, 22, -32, 35, -120, -59, 2, 70, -22, -11, 67, -15, 2, -40, 13, 21, 31, 26, 4, 36
    0xd6f3dec7, 0xc8963ae1, 0xc7fe22c5, 0x23e016bb, 0x4602c588, 0xf143f5ea, 0x150dd802, 0x24041a1f,
    // 9, -40, -8, -8, 31, -52, -84, 10, 22, -9, -90, -8, 3, -21, -17, -19, 57, 25, -64, -29, 35, -17, -36, -27, 10, -1, -10, -35, 46, -3, 6, -91
    0xf8f8d809, 0xaaccc1f, 0xf8a6f716, 0xedefeb03, 0xe3c01939, 0xe5dcef23, 0xddf6ff0a, 0xa506fd2e,
    // 23, 32, -38, -10, 7, -14, 39, -22, -16, -45, -45, -76, -9, -92, 84, 48, 95, 19, -76, 83, -36, 39, -78, 27, -12, -16, -18, -28, -34, -60, -38, 81
    0xf6da2017, 0xea27f207, 0xb4d3d3f0, 0x3054a4f7, 0x53b4135f, 0x1bb227dc, 0xe4eef0f4, 0x51dac4de,
    // -6, 2, -29, 25, 39, 28, 33, 30, 42, 2, 75, -11, -47, -35, 38, 5, 3, 33, 28, 52, -20, 11, 16, 13, -36, 45, -2, 8, -39, 64, 11, 53
    0x19e302fa, 0x1e211c27, 0xf54b022a, 0x526ddd1, 0x341c2103, 0xd100bec, 0x8fe2ddc, 0x350b40d9,
    // -1, 39, -8, 29, 23, -21, 110, 7, 5, -16, 44, -4, 34, 14, 0, 25, 30, -44, -11, -15, 15, 23, 4, -18, 14, -36, -13, 44, 57, 10, -14, -50
    0x1df827ff, 0x76eeb17, 0xfc2cf005, 0x19000e22, 0xf1f5d41e, 0xee04170f, 0x2cf3dc0e, 0xcef20a39,
    // 6, -71, 26, 45, -11, 34, 7, -18, -59, 20, 35, -5, 1, -38, 11, -31, 41, 1, -31, -7, 4, -59, -42, -4, 0, 22, 6, 26, -2, 2, 5, 37
    0x2d1ab906, 0xee0722f5, 0xfb2314c5, 0xe10bda01, 0xf9e10129, 0xfcd6c504, 0x1a061600, 0x250502fe,
    // -46, 77, 9, 55, -20, -24, -30, 31, -28, 67, 14, -52, -4, -4, 9, -23, 51, 54, 79, -41, 38, -49, -30, -16, 17, -12, -4, -32, -31, -6, 106, 36
    0x37094dd2, 0x1fe2e8ec, 0xcc0e43e4, 0xe909fcfc, 0xd74f3633, 0xf0e2cf26, 0xe0fcf411, 0x246afae1,
    // 12, -32, -40, 26, -25, 20, 59, -14, -48, -1, 36, -12, 88, -20, 16, -22, 16, 13, 89, -8, 51, -29, 14, 45, -15, -16, -20, -42, -15, 2, -100, 96
    0x1ad8e00c, 0xf23b14e7, 0xf424ffd0, 0xea10ec58, 0xf8590d10, 0x2d0ee333, 0xd6ecf0f1, 0x609c02f1,
    // 29, -76, 13, -46, -23, -21, -22, 3, 101, -70, 92, -73, 23, -3, 41, 31, -38, 18, 82, 52, -37, 37, 36, 20, -47, 54, 2, -69, -50, -20, -52, -62
    0xd20db41d, 0x3eaebe9, 0xb75cba65, 0x1f29fd17, 0x345212da, 0x142425db, 0xbb0236d1, 0xc2ccecce,
    // 2, -6, -14, 18, -26, -83, 40, 27, 37, 9, 1, 6, -38, -16, -14, -36, 16, 59, 73, 29, -24, 29, -18, -58, -3, 115, -1, 4, 46, 46, -29, -19
    0x12f2fa02, 0x1b28ade6, 0x6010925, 0xdcf2f0da, 0x1d493b10, 0xc6ee1de8, 0x4ff73fd, 0xede32e2e,
    // -3, 8, -34, -17, -19, -1, -29, 5, 15, 22, -36, -35, -53, 12, -41, -19, -31, -54, 55, 40, 16, -21, 49, 13, -18, -3, 6, -87, 21, 26, 51, -6
    0xefde08fd, 0x5e3ffed, 0xdddc160f, 0xedd70ccb, 0x2837cae1, 0xd31eb10, 0xa906fdee, 0xfa331a15,
    // 10, -92, 22, -60, -10, -4, -81, 15, -4, 0, -23, 14, 29, 10, -8, 43, -66, -25, -33, -61, 22, -23, 17, 18, -28, -78, 16, -30, 14, -40, -9, -12
    0xc416a40a, 0xfaffcf6, 0xee900fc, 0x2bf80a1d, 0xc3dfe7be, 0x1211e916, 0xe210b2e4, 0xf4f7d80e,
    // 9, 5, 17, -59, 8, -7, -42, 37, 86, 79, 12, -83, 60, -72, -2, 15, 11, -20, -9, -52, 23, -19, -91, 25, 61, 17, 5, -11, 11, -78, 52, -62
    0xc5110509, 0x25d6f908, 0xad0c4f56, 0xffeb83c, 0xccf7ec0b, 0x19a5ed17, 0xf505113d, 0xc234b20b,
    // -1, -27, 27, -76, 81, -14, 75, 21, -44, 21, 121, 1, 34, 28, 16, -12, 20, -5, -17, 48, 33, -59, 22, -34, -24, 28, 13, 6, 2, 77, -15, 69
    0xb41be5ff, 0x154bf251, 0x17915d4, 0xf4101c22, 0x30effb14, 0xde16c521, 0x60d1ce8, 0x45f14d02,
    // -51, -8, 31, -75, 3, -57, -10, 30, -3, 28, 48, -2, 84, -7, 41, -33, -68, 2, -44, -23, -28, -20, 11, -13, 73, 83, -5, 19, -27, -28, 1, 31
    0xb51ff8cd, 0x1ef6c703, 0xfe301cfd, 0xdf29f954, 0xe9d402bc, 0xf30bece4, 0x13fb5349, 0x1f01e4e5,
    // -19, -19, 52, -10, 13, -78, 30, -61, -65, 20, -97, -23, -4, -13, -16, 52, -60, 24, 58, 0, 10, 14, -19, -89, 38, 51, 27, -26, 34, 41, -4, 42
    0xf634eded, 0xc31eb20d, 0xe99f14bf, 0x34f0f3fc, 0x3a18c4, 0xa7ed0e0a, 0xe61b3326, 0x2afc2922,
    // -23, 9, -24, 32, 8, 28, -29, 27, 58, -8, 18, 7, 16, 8, 48, -10, 3, 84, -26, 32, -35, 3, 12, 21, 26, 1, -30, -9, -112, 19, -22, -17
    0x20e809e9, 0x1be31c08, 0x712f83a, 0xf6300810, 0x20e65403, 0x150c03dd, 0xf7e2011a, 0xefea1390,
    // -25, -20, -65, -26, -9, -34, 62, 59, -31, -46, 12, -5, 26, 16, 20, -30, 34, 40, -37, -19, -51, -68, 3, 39, 6, 110, -20, -21, -44, 16, 27, 61
    0xe6bfece7, 0x3b3edef7, 0xfb0cd2e1, 0xe214101a, 0xeddb2822, 0x2703bccd, 0xebec6e06, 0x3d1b10d4,
    // 28, -23, -16, 1, -20, 11, 1, -35, -21, 42, 39, 74, -4, 9, -33, -44, -16, 34, -43, -43, -21, -28, 40, 13, 34, 29, -20, 33, 44, 22, 34, -20
    0x1f0e91c, 0xdd010bec, 0x4a272aeb, 0xd4df09fc, 0xd5d522f0, 0xd28e4eb, 0x21ec1d22, 0xec22162c,
    // 4, 48, -12, 49, -11, -2, 23, 98, -12, -4, -19, 22, 45, 14, -16, 1, 36, -37, 0, -94, 45, -20, -6, 33, 17, -13, -36, 12, -9, -46, 27, -32
    0x31f43004, 0x6217fef5, 0x16edfcf4, 0x1f00e2d, 0xa200db24, 0x21faec2d, 0xcdcf311, 0xe01bd2f7,
    // -9, -24, 23, 2, 10, 15, 33, -42, -23, -7, 54, -36, 13, 7, -19, 36, 47, -36, -67, 2, -49, -22, -47, 1, -10, -30, -4, -8, -45, -6, 2, -59
    0x217e8f7, 0xd6210f0a, 0xdc36f9e9, 0x24ed070d, 0x2bddc2f, 0x1d1eacf, 0xf8fce2f6, 0xc502fad3,
    // 0, 13, -7, 36, 32, 36, 65, -56, 22, -12, 119, 11, 23, 31, -2, 20, -50, 20, -27, 39, -2, -45, 21, -4, -75, 75, 11, -5, -50, 31, 21, -23
    0x24f90d00, 0xc8412420, 0xb77f416, 0x14fe1f17, 0x27e514ce, 0xfc15d3fe, 0xfb0b4bb5, 0xe9151fce,
    // 38, 13, 3, 17, -10, 0, 83, -19, -47, -38, -10, -23, -15, 37, -16, 33, 0, -51, -15, 52, 27, 65, 23, -7, -29, -18, 6, 10, -44, 24, -36, 23
    0x11030d26, 0xed5300f6, 0xe9f6dad1, 0x21f025f1, 0x34f1cd00, 0xf917411b, 0xa06eee3, 0x17dc18d4,
    // -28, -93, -32, -13, 15, -2, -53, 9, 42, 0, -48, 4, -73, -32, 3, 19, -83, 8, 36, 27, -18, 94, 13, 3, -43, 34, 3, -29, -11, 3, 5, 25
    0xf3e0a3e4, 0x9cbfe0f, 0x4d0002a, 0x1303e0b7, 0x1b2408ad, 0x30d5eee, 0xe30322d5, 0x190503f5,
    // -13, -24, 24, 30, 38, 54, 3, 8, 45, -9, 49, -2, -76, -26, 9, -12, -19, 12, -8, -13, -80, -13, -1, 50, 41, 34, 43, -15, 47, -8, -21, -1
    0x1e18e8f3, 0x8033626, 0xfe31f72d, 0xf409e6b4, 0xf3f80ced, 0x32fff3b0, 0xf12b2229, 0xffebf82f,
    // -59, 37, -23, 2, 1, -25, 14, -24, 11, -44, 6, 35, 20, -16, 33, 1, -14, -4, -1, 46, 2, -40, 11, -15, 29, 44, -5, 31, 50, 19, 69, 34
    0x2e925c5, 0xe80ee701, 0x2306d40b, 0x121f014, 0x2efffcf2, 0xf10bd802, 0x1ffb2c1d, 0x22451332,
    // -6, 43, 19, 54, 4, 83, -77, -24, 57, 6, 47, -98, -39, -12, 24, 85, 56, 7, -23, 49, -57, -22, -53, -4, 3, -31, 7, 10, -16, 2, -15, 99
    0x36132bfa, 0xe8b35304, 0x9e2f0639, 0x5518f4d9, 0x31e90738, 0xfccbeac7, 0xa07e103, 0x63f102f0,
    // 7, -24, -27, -13, 36, 13, 62, -44, -12, -7, 111, -1, 6, 2, 42, -75, -2, -10, -94, -13, -3, -49, 6, 36, -19, 31, -20, 31, 0, 47, 29, 9
    0xf3e5e807, 0xd43e0d24, 0xff6ff9f4, 0xb52a0206, 0xf3a2f6fe, 0x2406cffd, 0x1fec1fed, 0x91d2f00,
    // 27, -1, -45, -42, -42, -53, 8, 41, -18, 23, -34, 46, 69, 7, -13, -15, -33, -5, -25, -22, -53, 19, 15, -33, 19, -90, -50, -78, -11, 12, 20, 83
    0xd6d3ff1b, 0x2908cbd6, 0x2ede17ee, 0xf1f30745, 0xeae7fbdf, 0xdf0f13cb, 0xb2cea613, 0x53140cf5,
    // 26, -67, 38, -62, 4, 9, -59, 54, -33, 6, -46, -41, -33, 1, -16, 22, -94, -8, -7, 83, 9, 50, 9, 12, -1, -73, 61, -5, -22, -9, -53, 16
    0xc226bd1a, 0x36c50904, 0xd7d206df, 0x16f001df, 0x53f9f8a2, 0xc093209, 0xfb3db7ff, 0x10cbf7ea,
    // -54, -82, -11, 5, 17, 10, 9, -17, 25, 13, 52, 20, -22, 9, 70, 15, 14, 40, 30, 23, -18, 39, -6, -12, 3, 13, -13, -15, -91, 14, 24, 4
    0x5f5aeca, 0xef090a11, 0x14340d19, 0xf4609ea, 0x171e280e, 0xf4fa27ee, 0xf1f30d03, 0x4180ea5,
    // -125, 16, 43, -24, -22, -18, 6, -12, 25, 36, 41, -15, -42, -72, 62, -7, 46, 46, -71, -45, 68, 59, 24, -2, 2, 86, 23, -4, 12, 6, 47, -35
    0xe82b1083, 0xf406eeea, 0xf1292419, 0xf93eb8d6, 0xd3b92e2e, 0xfe183b44, 0xfc175602, 0xdd2f060c,
    // -9, -2, -16, -19, 23, -30, -6, -18, 10, 55, -13, 20, 19, 7, -19, -8, -50, 51, -61, -45, 27, 24, 4, -20, 14, 7, -24, -114, 35, 13, 3, 14
    0xedf0fef7, 0xeefae217, 0x14f3370a, 0xf8ed0713, 0xd3c333ce, 0xec04181b, 0x8ee8070e, 0xe030d23,
    // -10, -11, 27, -52, 32, -3, -48, 14, -83, 13, 19, -13, -6, 31, 20, 6, 19, -19, 15, 55, 12, -60, 27, -15, -1, 13, 21, 20, 1, 72, 35, 91
    0xcc1bf5f6, 0xed0fd20, 0xf3130dad, 0x6141ffa, 0x370fed13, 0xf11bc40c, 0x14150dff, 0x5b234801,
    // -46, 92, 11, -17, -71, 9, -8, 27, -27, -22, -36, 2, 38, -22, 22, 40, 16, -101, 65, 44, -21, 2, -26, 12, 19, 37, -20, -73, -40, -24, 5, -28
    0xef0b5cd2, 0x1bf809b9, 0x2dceae5, 0x2816ea26, 0x2c419b10, 0xce602eb, 0xb7ec2513, 0xe405e8d8,
    // 21, 7, 21, 22, 7, -39, 49, -26, -59, 12, 14, -16, -35, 7, -63, 17, -34, -43, -11, 39, 14, 36, -53, -23, 15, -16, 13, -74, -54, -23, -20, -66
    0x16150715, 0xe631d907, 0xf00e0cc5, 0x11c107dd, 0x27f5d5de, 0xe9cb240e, 0xb60df00f, 0xbeece9ca,
    // 35, 2, 33, 18, 32, 44, 8, -6, -19, -9, -39, -51, -105, -22, 55, 30, 1, -1, -52, 83, 71, 18, -48, 42, -28, -39, 37, -18, 14, -37, 15, -3
    0x12210223, 0xfa082c20, 0xcdd9f7ed, 0x1e37ea97, 0x53ccff01, 0x2ad01247, 0xee25d9e4, 0xfd0fdb0e,
    // -46, -18, -32, -29, 39, 6, -13, -37, -18, -73, 123, 24, 2, -17, 3, -26, -11, -7, -105, -23, 24, -27, 52, 13, -65, 1, -72, 62, 15, 67, 42, 86
    0xe3e0eed2, 0xdbf30627, 0x187bb7ee, 0xe603ef02, 0xe997f9f5, 0xd34e518, 0x3eb801bf, 0x562a430f,
    // -42, 65, 26, 43, -88, -16, 58, 80, -16, -82, 24, 8, -61, 14, 44, 84, 12, 45, 65, -79, 5, -36, -11, 8, 62, 13, 29, 27, -28, -15, -28, 38
    0x2b1a41d6, 0x503af0a8, 0x818aef0, 0x542c0ec3, 0xb1412d0c, 0x8f5dc05, 0x1b1d0d3e, 0x26e4f1e4,
    // 51, -52, 14, -53, -2, -35, -50, 8, -79, 35, -10, 27, 77, -51, -117, 24, 25, -1, 13, 14, -30, -87, -15, 4, 81, 48, 29, -67, -66, 55, -33, 69
    0xcb0ecc33, 0x8ceddfe, 0x1bf623b1, 0x188bcd4d, 0xe0dff19, 0x4f1a9e2, 0xbd1d3051, 0x45df37be,
    // 27, 12, -6, 23, -5, -8, -22, -3, -42, -21, -18, 5, -65, -6, 74, 16, 43, -7, 14, -31, 11, -92, -6, 15, -25, 24, -2, -76, -1, -1, -26, -24
    0x17fa0c1b, 0xfdeaf8fb, 0x5eeebd6, 0x104afabf, 0xe10ef92b, 0xffaa40b, 0xb4fe18e7, 0xe8e6ffff,
    // -44, -42, 56, -36, -16, 4, -38, -23, -55, 26, -47, 4, 86, 14, 8, 4, 20, -21, -11, 10, -2, -10, 99, 17, -45, 3, 17, -3, -15, -58, 119, 59
    0xdc38d6d4, 0xe9da04f0, 0x4d11ac9, 0x4080e56, 0xaf5eb14, 0x1163f6fe, 0xfd1103d3, 0x3b77c6f1,
    // 45, 18, -86, 87, 9, 72, 18, -11, 5, 6, 63, -44, -34, 29, -35, 38, 10, 67, -21, -59, 47, 13, 24, -86, 19, 45, -71, 28, -30, 27, -6, 16
    0x57aa122d, 0xf5124809, 0xd43f0605, 0x26dd1dde, 0xc5eb430a, 0xaa180d2f, 0x1cb92d13, 0x10fa1be2,
    // -1, -4, -25, 21, 7, 40, 0, -21, -30, 33, 105, -64, 44, 35, 20, 33, 68, 89, 93, -36, -34, -42, -23, 46, -2, 62, 3, 59, -2, 39, -6, 63
    0x15e7fcff, 0xeb002807, 0xc06921e2, 0x2114232c, 0xdc5d5944, 0x2ee9d6de, 0x3b033efe, 0x3ffa27fe,
    // -2, -12, 31, 41, 8, 16, 12, -24, 58, -2, 8, 18, -13, 23, 52, 14, 53, 43, -14, 2, 42, -17, 16, 52, -67, 95, 20, 51, -57, 21, -12, 16
    0x291ff4fe, 0xe80c1008, 0x1208fe3a, 0xe3417f3, 0x2f22b35, 0x3410ef2a, 0x33145fbd, 0x10f415c7,
    // 11, 28, 48, 38, -65, 32, 35, 29, 94, 72, -55, 28, -40, 42, 32, 52, 1, 55, 39, -8, -13, -78, 29, 4, -90, -35, 68, 25, 7, 12, -68, -54
    0x26301c0b, 0x1d2320bf, 0x1cc9485e, 0x34202ad8, 0xf8273701, 0x41db2f3, 0x1944dda6, 0xcabc0c07,
    // -42, -52, 10, -15, 51, -71, -63, -62, -13, 49, -45, 26, 5, 35, -34, -41, -30, -23, 21, -82, -12, -45, 59, 23, -34, 48, -12, 15, 127, 15, 10, 18
    0xf10accd6, 0xc2c1b933, 0x1ad331f3, 0xd7de2305, 0xae15e9e2, 0x173bd3f4, 0xff430de, 0x120a0f7f,
    // 21, -18, 20, -72, -8, -16, 13, 9, -12, 5, -51, -15, 32, 60, 22, 23, -30, -49, -102, 20, -7, -48, -4, -30, 20, -39, 24, 61, 101, -50, 58, 17
    0xb814ee15, 0x90df0f8, 0xf1cd05f4, 0x17163c20, 0x149acfe2, 0xe2fcd0f9, 0x3d18d914, 0x113ace65,
    // 6, -48, -17, 42, -21, 44, 0, 20, -21, 17, 12, 27, 81, 15, -64, -79, 7, -46, -33, 14, 31, -15, -41, -17, 22, -46, 1, -12, 18, -10, 17, 29
    0x2aefd006, 0x14002ceb, 0x1b0c11eb, 0xb1c00f51, 0xedfd207, 0xefd7f11f, 0xf401d216, 0x1d11f612,
    // -64, -15, -23, -7, -1, 19, 19, -1, 7, 11, -74, -5, 14, 1, 31, -24, -23, -2, 71, -19, -39, 86, -10, -13, -16, 8, 1, 7, -20, -40, -14, -47
    0xf9e9f1c0, 0xff1313ff, 0xfbb60b07, 0xe81f010e, 0xed47fee9, 0xf3f656d9, 0x70108f0, 0xd1f2d8ec,
    // -25, -51, 15, -89, 23, -55, -85, -30, -8, -56, -33, -33, 71, -34, -49, 20, -18, 10, 82, 14, -43, -3, -47, -24, -53, 35, -13, 89, 23, -58, -34, -49
    0xa70fcde7, 0xe2abc917, 0xdfdfc8f8, 0x14cfde47, 0xe520aee, 0xe8d1fdd5, 0x59f323cb, 0xcfdec617,
    // -3, -41, -16, -36, 43, -6, 1, -13, -4, 0, 13, -11, 29, 10, 46, 9, -14, -5, -54, -13, -54, -14, -47, -23, 1, -28, -30, 30, 43, 24, 97, 8
    0xdcf0d7fd, 0xf301fa2b, 0xf50d00fc, 0x92e0a1d, 0xf3cafbf2, 0xe9d1f2ca, 0x1ee2e401, 0x861182b,
    // -35, -9, 13, -59, -30, -22, -10, 10, -3, -19, -48, -2, -46, 1, -119, 15, -25, -4, 34, -79, -14, -13, -2, 44, 6, 27, 29, 111, -78, 3, 3, 29
    0xc50df7dd, 0xaf6eae2, 0xfed0edfd, 0xf8901d2, 0xb122fce7, 0x2cfef3f2, 0x6f1d1b06, 0x1d0303b2,
    // -70, -14, 76, 104, -7, -6, -18, 15, 8, 53, -46, 29, -26, -24, -30, 26, -28, -5, 50, 43, 34, 1, 23, -10, 42, 11, 39, -7, -5, -15, 36, -100
    0x684cf2ba, 0xfeefaf9, 0x1dd23508, 0x1ae2e8e6, 0x2b32fbe4, 0xf6170122, 0xf9270b2a, 0x9c24f1fb,
    // -40, -40, -42, 46, 33, 55, 10, -31, -10, -21, 17, -10, -49, -17, -19, 14, 42, -67, 29, -33, -3, -25, -1, -47, -45, 89, -56, 11, -14, 7, -8, -39
    0x2ed6d8d8, 0xe10a3721, 0xf611ebf6, 0xeedefcf, 0xdf1dbd2a, 0xd1ffe7fd, 0xbc859d3, 0xd9f807f2,
    // 15, -12, -3, 24, -41, 5, 55, -22, -9, 4, 28, -41, 60, -8, 24, 29, -31, -17, -94, -26, -17, -7, 17, 20, -4, 17, 2, 20, 29, -39, -17, -8
    0x18fdf40f, 0xea3705d7, 0xd71c04f7, 0x1d18f83c, 0xe6a2efe1, 0x1411f9ef, 0x140211fc, 0xf8efd91d,
    // -20, 127, 13, -31, -22, -38, -14, -4, 1, -49, -20, -5, -26, -7, -67, -4, 1, 57, 19, -18, -47, -65, 10, 45, 39, -69, 30, -21, 56, -10, -43, 11
    0xe10d7fec, 0xfcf2daea, 0xfbeccf01, 0xfcbdf9e6, 0xee133901, 0x2d0abfd1, 0xeb1ebb27, 0xbd5f638,
    // 52, -19, -41, 14, 31, 24, -31, -2, -77, -53, -82, 42, 16, 0, -48, -12, 5, 47, -31, 11, -55, -7, -32, 24, 66, -55, -19, -16, -66, 29, -18, 70
    0xed7ed34, 0xfee1181f, 0x2aaecbb3, 0xf4d00010, 0xbe12f05, 0x18e0f9c9, 0xf0edc942, 0x46ee1dbe,
    // 14, -12, 62, 52, 45, -21, 12, 34, 23, -20, 11, 55, -59, 11, -27, 11, 48, 19, 20, -21, -70, -51, -16, 62, -5, 8, 73, -31, 72, 25, -29, 6
    0x343ef40e, 0x220ceb2d, 0x370bec17, 0xbe50bc5, 0xeb141330, 0x3ef0cdba, 0xe14908fb, 0x6e31948,
    // -21, -53, 25, -29, 10, 67, 11, 41, -26, 69, 41, 89, 32, 4, 26, 82, -14, 20, -91, 8, -16, -41, -21, 62, 29, -21, 90, 45, 31, 33, 45, 19
    0xe319cbeb, 0x290b430a, 0x592945e6, 0x521a0420, 0x8a514f2, 0x3eebd7f0, 0x2d5aeb1d, 0x132d211f,
    // 30, -21, -40, 17, 27, 39, -9, -18, -19, 66, -10, 56, 105, -25, -50, -43, 1, -66, -8, -59, -10, -61, -22, -60, -39, -44, -41, -12, 69, 0, 4, -21
    0x11d8eb1e, 0xeef7271b, 0x38f642ed, 0xd5cee769, 0xc5f8be01, 0xc4eac3f6, 0xf4d7d4d9, 0xeb040045,
    // -13, 4, -37, -19, 11, 13, 39, 6, 11, -39, -22, -38, 24, 111, 8, -23, -36, -10, -20, -4, -45, -35, 14, 33, -4, -8, -25, 14, 23, -51, 67, 5
    0xeddb04f3, 0x6270d0b, 0xdaead90b, 0xe9086f18, 0xfcecf6dc, 0x210eddd3, 0xee7f8fc, 0x543cd17,
};
static const uint embedded_encoder3_ResidualBlock_1_body_pw_contract_bias_dwords[16] = {
    // -0.0001639, -0.0001715, 1.25e-05, 0.0003898, -0.000654, 8.166e-05, 0.0001265, 0.000282, -3.57e-05, -0.0001347, -0.0001616, 2.1e-06, -0.0001054, 0.0003607, 0.000129, -0.000267
    0x899f895f, 0xe6300d2, 0x55a915c, 0xc9f0825, 0x886a8257, 0x23894c, 0xde986e8, 0x8c60083a,
    // 0.0003645, 0.000243, 0.0001537, -0.000211, -3.356e-05, -0.0003524, 0.0004456, 0.0004506, 0.0001322, -0.0001851, -0.000353, 0.0004597, -8.37e-05, -0.0002171, -0.0001509, -0.0007386
    0xbf60df9, 0x8aea0909, 0x8dc68233, 0xf620f4d, 0x8a110855, 0xf888dc9, 0x8b1d857c, 0x920d88f2,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass5(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage__encoder3_ResidualBlock_1_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _encoder3_ResidualBlock_1_residual_func_Split_output_grouped = {
        uint3(960, 540, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 32), // threadGroupSliceSize
        uint3(960, 540, 32), // storageSize
        uint3(32, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        49766400, // threadGroupStorageByteOffset
        storage__encoder3_ResidualBlock_1_residual_func_Split_output_grouped };
    
    const ConstantBufferStorage<576> storage_embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0036074582021683455, storage_embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = { embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.003916583023965359, storage_embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_encoder3_ResidualBlock_1_body_pw_expand_bias = { embedded_encoder3_ResidualBlock_1_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_encoder3_ResidualBlock_1_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_1_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0038842549547553062, storage_embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder3_ResidualBlock_1_body_pw_contract_bias = { embedded_encoder3_ResidualBlock_1_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder3_ResidualBlock_1_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_1_body_pw_contract_bias };
    
    // fused_quantized_NHWC_/encoder3/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_10 = uint3(960, 540, 32);
    const int3 groupStart_slice_10 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_10 = uint3(64, 1, 32);
    const uint3 storageSize_slice_10 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_10 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_10 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_10 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_10 = dot(groupStart_slice_10, tensorByteStrides_slice_10);
    const float quantizationScale_slice_10 = 0.01623149961233139;
    const RWBufferStorage storage_slice_10 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_10 = { logicalSize_slice_10, groupStart_slice_10, groupSize_slice_10, storageSize_slice_10, tensorByteStrides_slice_10, paddingBegin_slice_10, paddingEnd_slice_10, threadGroupByteOffsetInTensor_slice_10 + 33177600, quantizationScale_slice_10, storage_slice_10 };
    // Fusedquantized_/encoder3/ResidualBlock_1/residual_func/Concat_quantized_/encoder3/ResidualBlock_1/body/spatial_mixing/partial_conv/Conv_quantized_/encoder3/ResidualBlock_1/body/spatial_mixing/Concat_quantized_/encoder3/ResidualBlock_1/body/pw_expand/Conv_/encoder3/ResidualBlock_1/body/pw_expand_act/Relu_quantized_/encoder3/ResidualBlock_1/body/pw_contract/Conv_/encoder3/ResidualBlock_1/Add (32, 540, 960), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,) -> (32, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<32, 1>(0.014839759096503258, 0.01929340697824955, 0.014490243047475815, _encoder3_ResidualBlock_1_residual_func_Split_output_grouped, embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias, embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_1_body_pw_expand_bias, embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_1_body_pw_contract_bias, slice_10, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_5
#ifdef MLSR_PASS_5_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass5_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/encoder3/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_11 = uint3(960, 540, 32);
    const int3 groupStart_slice_11 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_11 = uint3(32, 1, 32);
    const uint3 storageSize_slice_11 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_11 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_11 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_11 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_11 = dot(groupStart_slice_11, tensorByteStrides_slice_11);
    const float quantizationScale_slice_11 = 0.01623149961233139;
    const RWBufferStorage storage_slice_11 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_11 = { logicalSize_slice_11, groupStart_slice_11, groupSize_slice_11, storageSize_slice_11, tensorByteStrides_slice_11, paddingBegin_slice_11, paddingEnd_slice_11, threadGroupByteOffsetInTensor_slice_11 + 33177600, quantizationScale_slice_11, storage_slice_11 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_11, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_5_POST


#ifdef MLSR_PASS_6
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FusedConv2D_k2s2b_QuantizedOutput.hlsli"

static const uint embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias_dwords[32] = {
    // 0.02016, 0.013565, 0.02542, 0.0009527, 0.01131, -0.01836, 0.00688, -0.04617, -0.002048, -0.0175, -0.06964, -0.04013, -0.01773, -0.01825, -0.00436, -0.01683
    0x22f22529, 0x13ce2682, 0xa4b321ca, 0xa9e91f0c, 0xa47b9832, 0xa923ac75, 0xa4aca48a, 0xa44f9c77,
    // -0.00983, 0.02036, 0.02798, 0.001617, 0.1214, 0.1703, 0.06616, 0.01269, -0.09656, -0.181, 0.0686, -0.1868, 0.0835, -0.04617, -0.07935, 0.03873
    0x2536a108, 0x16a0272a, 0x31732fc5, 0x227f2c3c, 0xb1cbae2e, 0xb1fa2c64, 0xa9e92d58, 0x28f5ad14,
    // -0.1447, -0.0741, -0.1427, 0.0847, 0.2316, -0.0851, -0.1754, -0.306, 0.07166, 0.1263, -0.0491, -0.1261, -0.03084, 0.00977, 0.04596, 0.08386
    0xacbeb0a1, 0x2d6cb091, 0xad723369, 0xb4e5b19d, 0x300b2c96, 0xb009aa49, 0x2101a7e5, 0x2d5e29e2,
    // -0.1886, -0.01755, -0.01659, -0.0401, 0.04944, -0.11835, -0.009254, -0.01881, -0.04263, 0.05865, -0.2107, -0.1813, 0.121, -0.0951, 0.06824, 0.07227
    0xa47eb209, 0xa922a43f, 0xaf932a54, 0xa4d1a0bd, 0x2b82a975, 0xb1cdb2be, 0xae162fbe, 0x2ca02c5e,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass6(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(960, 540, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 32), // threadGroupSliceSize
        uint3(960, 540, 32), // storageSize
        uint3(32, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        33177600, // threadGroupStorageByteOffset
        0.01623149961233139, storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const BufferStorage storage__encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 32, 64), // threadGroupSliceSize
        uint4(2, 2, 32, 64), // storageSize
        uint4(32, 64, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        9856, // threadGroupStorageByteOffset
        0.0029193193186074495, storage__encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias = { embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias };
    
    // Fusedquantized_/encoder3/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_12 = uint3(480, 270, 64);
    const int3 groupStart_slice_12 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 64);
    const uint3 groupSize_slice_12 = uint3(64, 1, 64);
    const uint3 storageSize_slice_12 = uint3(480, 270, 64);
    const uint3 tensorByteStrides_slice_12 = uint3(64, 30720, 1);
    const uint3 paddingBegin_slice_12 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_12 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_12 = dot(groupStart_slice_12, tensorByteStrides_slice_12);
    const RWBufferStorage storage_slice_12 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_12 = { logicalSize_slice_12, groupStart_slice_12, groupSize_slice_12, storageSize_slice_12, tensorByteStrides_slice_12, paddingBegin_slice_12, paddingEnd_slice_12, threadGroupByteOffsetInTensor_slice_12 + 49766400, storage_slice_12 };
    // Fusedquantized_/encoder3/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs (32, 540, 960), (64, 32, 2, 2), (64,) -> (64, 270, 480)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FusedConv2D_k2s2b_QuantizedOutput(0.018023621290922165, 0.027566062286496162, fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, _encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias, slice_12, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_6
#ifdef MLSR_PASS_6_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass6_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // Fusedquantized_/encoder3/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_13 = uint3(480, 270, 64);
    const int3 groupStart_slice_13 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 64);
    const uint3 groupSize_slice_13 = uint3(32, 1, 64);
    const uint3 storageSize_slice_13 = uint3(480, 270, 64);
    const uint3 tensorByteStrides_slice_13 = uint3(64, 30720, 1);
    const uint3 paddingBegin_slice_13 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_13 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_13 = dot(groupStart_slice_13, tensorByteStrides_slice_13);
    const RWBufferStorage storage_slice_13 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_13 = { logicalSize_slice_13, groupStart_slice_13, groupSize_slice_13, storageSize_slice_13, tensorByteStrides_slice_13, paddingBegin_slice_13, paddingEnd_slice_13, threadGroupByteOffsetInTensor_slice_13 + 49766400, storage_slice_13 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_13, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_6_POST


#ifdef MLSR_PASS_7
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords[16] = {
    // -0.00203, 0.0001757, 0.0007157, 2.503e-05, 0.00038, 0.0004766, -0.0005064, -0.0003412, -0.0002563, -5.89e-05, -0.0001903, 0.00312, -0.0001687, 0.002443, -0.0009465, -0.0005684
    0x9c29828, 0x1a411dd, 0xfcf0e3a, 0x8d979026, 0x83dc8c33, 0x1a648a3c, 0x19018987, 0x90a893c1,
    // 0.0002121, 0.0004842, 0.0001856, -0.0003507, 0.001767, -0.0001541, -0.0002385, 0.0005236, -0.0005445, -0.000655, -8.47e-05, 0.00010616, 0.00158, 0.00085, -0.0005255, 0.0008388
    0xfef0af3, 0x8dbf0a15, 0x890d173d, 0x104a8bd1, 0x915e9076, 0x6f5858d, 0x12f71679, 0x12df904e,
};
static const uint embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias_dwords[64] = {
    // -0.09064, -0.0674, -0.03238, -0.0473, -0.063, -0.0376, 0.005825, -0.1016, -0.1008, 0.011566, 0.03845, 0.03928, -0.12366, -0.02428, -0.0687, 0.0429
    0xac50adcd, 0xaa0ea825, 0xa8d0ac08, 0xae811df7, 0x21ecae74, 0x290728ec, 0xa637afea, 0x297eac66,
    // -0.03026, 0.02686, -0.1765, -0.0824, 0.01391, -0.0735, -0.1398, -0.00426, -0.1962, -0.0242, -0.218, -0.1917, -0.1505, -0.1348, 0.00266, -0.1727
    0x26e0a7bf, 0xad46b1a6, 0xacb4231f, 0x9c5db079, 0xa632b247, 0xb222b2fa, 0xb050b0d1, 0xb1871973,
    // -0.1167, 0.06824, -0.09546, -0.17, 0.01808, -0.07587, -0.11237, -0.07166, 0.01517, -0.0825, -0.1775, -0.08136, -0.04483, -0.2122, -0.00604, -0.0647
    0x2c5eaf78, 0xb171ae1c, 0xacdb24a1, 0xac96af31, 0xad4823c4, 0xad35b1ae, 0xb2caa9bd, 0xac249e2f,
    // -0.167, -0.1059, -0.11145, -0.09705, -0.0275, -0.05722, 0.02509, 0.08, 0.03973, -0.1261, -0.1129, -0.1508, -0.4001, -0.2285, -0.06537, -0.09906
    0xaec7b158, 0xae36af22, 0xab53a70a, 0x2d1f266c, 0xb0092916, 0xb0d3af3a, 0xb350b667, 0xae57ac2f,
    // -0.0723, -0.02357, -0.2211, -0.0384, -0.0404, -0.03748, -0.135, -0.0962, -0.0165, -0.1425, -0.12494, -0.1274, -0.0186, 0.01956, -0.2898, 0.02756
    0xa609aca1, 0xa8eab313, 0xa8cca92c, 0xae28b052, 0xb08fa439, 0xb014afff, 0x2502a4c3, 0x270eb4a3,
    // -0.01196, -0.02295, -0.0498, -0.1659, 0.03033, -0.1936, -0.149, -0.05515, -0.0505, -0.009705, -0.1848, -0.2109, -0.2054, -0.01945, -0.1042, -0.2007
    0xa5e0a220, 0xb14faa60, 0xb23227c4, 0xab0fb0c5, 0xa0f8aa77, 0xb2c0b1ea, 0xa4fbb293, 0xb26caeab,
    // -0.02713, 0.04733, -0.0341, -0.0641, -0.05948, -0.0127, -0.2104, 0.00984, -0.0465, -0.02899, -0.349, -0.3745, -0.07806, -0.1547, -0.237, -0.0363
    0x2a0fa6f2, 0xac1aa85d, 0xa281ab9d, 0x210ab2bc, 0xa76ca9f4, 0xb5feb596, 0xb0f3acff, 0xa8a5b396,
    // -0.1393, -0.1493, -0.0457, -0.0918, -0.106, -0.05347, -0.1399, -0.2106, -0.2415, -0.0629, -0.196, -0.0541, -0.01005, 0.01715, -0.0582, -0.0912
    0xb0c7b075, 0xade0a9d9, 0xaad8aec9, 0xb2bdb07a, 0xac07b3ba, 0xaaedb246, 0x2464a125, 0xadd6ab73,
};
static const uint embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias_dwords[32] = {
    // 0.0002185, 0.0007615, -0.00036, 0.0002052, 0.000766, -0.000445, 0.0001291, 0.0002778, 0.0005913, -3.29e-05, 0.0007753, -0.0009527, 0.0004141, -0.0001137, -0.0002499, 1.425e-05
    0x123d0b29, 0xab98de6, 0x8f4a1246, 0xc8d083b, 0x822810d8, 0x93ce125a, 0x87740ec9, 0xef8c18,
    // 0.000787, -8.34e-06, -0.0004103, 0.0003338, 0.0005255, -0.001864, -0.000374, -0.0003204, 0.000666, 0.001251, 0.000439, 0.001365, -0.0002484, 0.0003412, 0.0004594, -0.00087
    0x808c1272, 0xd788eb9, 0x97a3104e, 0x8d408e21, 0x15201175, 0x15970f31, 0xd978c12, 0x93210f87,
    // 0.0008187, -0.001049, -0.001147, 0.001581, 0.00119, 0.0003333, -0.0002913, -0.000456, -0.000568, 0.000872, 4.94e-05, -2.456e-05, 0.0003922, 0.001147, 0.001145, -0.000785
    0x944c12b5, 0x167a94b3, 0xd7614e0, 0x8f798cc6, 0x132590a7, 0x819c033d, 0x14b30e6d, 0x926e14b1,
    // -0.00092, -0.0009074, 0.0009437, 0.0003836, 0.001739, -0.001865, -0.0004418, -0.0004065, -0.000652, -6.884e-05, 0.0003128, -0.0008464, 0.000507, -0.0002625, 0.0001934, -0.0014715
    0x936f9389, 0xe4913bb, 0x97a4171f, 0x8ea98f3d, 0x84839157, 0x92ef0d20, 0x8c4d1027, 0x96070a56,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass7(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = {
        uint3(480, 270, 64), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(480, 270, 64), // threadGroupSliceSize
        uint3(480, 270, 64), // storageSize
        uint3(64, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        49766400, // threadGroupStorageByteOffset
        storage_Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped };
    
    const BufferStorage storage__bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 32), // threadGroupSliceSize
        uint4(3, 3, 16, 32), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        18048, // threadGroupStorageByteOffset
        0.004673882387578487, storage__bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = { embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 128), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 128), // threadGroupSliceSize
        uint4(1, 1, 64, 128), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        22656, // threadGroupStorageByteOffset
        0.005801581311970949, storage__bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<64> storage_embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias = { embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<64> > embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias = {
        128, // logicalSize
        0, // threadGroupSliceStart
        128, // threadGroupSliceSize
        128, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 128, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 128, 64), // threadGroupSliceSize
        uint4(1, 1, 128, 64), // storageSize
        uint4(128, 128, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        30848, // threadGroupStorageByteOffset
        0.005744884721934795, storage__bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias = { embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias };
    
    // /bottleneck/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_14 = uint3(480, 270, 64);
    const int3 groupStart_slice_14 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 64);
    const uint3 groupSize_slice_14 = uint3(64, 1, 64);
    const uint3 storageSize_slice_14 = uint3(480, 270, 64);
    const uint3 tensorByteStrides_slice_14 = uint3(64, 30720, 1);
    const uint3 paddingBegin_slice_14 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_14 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_14 = dot(groupStart_slice_14, tensorByteStrides_slice_14);
    const RWBufferStorage storage_slice_14 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_14 = { logicalSize_slice_14, groupStart_slice_14, groupSize_slice_14, storageSize_slice_14, tensorByteStrides_slice_14, paddingBegin_slice_14, paddingEnd_slice_14, threadGroupByteOffsetInTensor_slice_14 + 58060800, storage_slice_14 };
    // Fusedquantized_/bottleneck/ResidualBlock_0/residual_func/Concat_quantized_/bottleneck/ResidualBlock_0/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_0/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_0/body/pw_expand/Conv_/bottleneck/ResidualBlock_0/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_0/body/pw_contract/Conv_/bottleneck/ResidualBlock_0/Add (64, 270, 480), (32, 16, 3, 3), (32,), (128, 64, 1, 1), (128,), (64, 128, 1, 1), (64,) -> (64, 270, 480)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<64, 2>(0.018023621290922165, 0.027566062286496162, 0.023022513836622238, 0.015865059569478035, 0.03273303806781769, Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped, _bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias, _bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias, _bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias, slice_14, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_7
#ifdef MLSR_PASS_7_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass7_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /bottleneck/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_15 = uint3(480, 270, 64);
    const int3 groupStart_slice_15 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 64);
    const uint3 groupSize_slice_15 = uint3(32, 1, 64);
    const uint3 storageSize_slice_15 = uint3(480, 270, 64);
    const uint3 tensorByteStrides_slice_15 = uint3(64, 30720, 1);
    const uint3 paddingBegin_slice_15 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_15 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_15 = dot(groupStart_slice_15, tensorByteStrides_slice_15);
    const RWBufferStorage storage_slice_15 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_15 = { logicalSize_slice_15, groupStart_slice_15, groupSize_slice_15, storageSize_slice_15, tensorByteStrides_slice_15, paddingBegin_slice_15, paddingEnd_slice_15, threadGroupByteOffsetInTensor_slice_15 + 58060800, storage_slice_15 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_15, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_7_POST


#ifdef MLSR_PASS_8
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords[16] = {
    // 0.0002615, 0.002516, -0.000488, 0.0007625, -0.000309, -0.0001372, -0.000998, 0.0001521, -0.0004544, 0.000583, 0.0008035, 0.0002499, -0.0007434, 0.0002177, 0.001288, -0.0008717
    0x19270c49, 0x123f8fff, 0x887f8d10, 0x8fc9416, 0x10c78f72, 0xc181295, 0xb229217, 0x93241547,
    // 0.0002959, 0.0003927, -0.0003958, 0.000397, -0.001278, -0.0005465, -0.0004432, 0.001163, -0.0007334, 0.0001963, 0.0008497, -0.0002389, 8.667e-05, -0.0002487, -0.000711, 0.00011086
    0xe6f0cd9, 0xe818e7c, 0x907a953c, 0x14c38f43, 0xa6f9202, 0x8bd412f6, 0x8c1305ae, 0x74491d3,
};
static const uint embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias_dwords[64] = {
    // -0.10223, -0.04535, 0.10016, -0.03876, -0.1534, 0.014565, 0.03662, 0.0512, -0.2306, -0.0909, -0.0319, 0.05432, -0.1071, -0.0751, 0.05258, -0.1643
    0xa9ceae8b, 0xa8f62e69, 0x2375b0e9, 0x2a8e28b0, 0xadd1b361, 0x2af4a815, 0xacceaedb, 0xb1422abb,
    // -0.1631, -0.1547, -0.03714, 0.03677, -0.1124, 0.06384, -0.1242, -0.09094, 0.073, 0.1443, 0.0534, 0.03702, -0.1508, -0.1622, -0.2372, -0.1439
    0xb0f3b138, 0x28b5a8c1, 0x2c16af32, 0xadd2aff3, 0x309e2cac, 0x28bd2ad6, 0xb131b0d3, 0xb09bb397,
    // 0.03598, 0.04007, -0.10004, -0.0582, -0.10803, -0.02405, 0.06946, -0.0158, -0.161, -0.178, -0.03854, -0.06354, 0.1783, -0.1812, -0.07715, 0.09985
    0x2921289b, 0xab73ae67, 0xa628aeea, 0xa40b2c72, 0xb1b2b127, 0xac11a8ef, 0xb1cc31b5, 0x2e64acf0,
    // -0.01892, -0.131, -0.1422, 0.003454, -0.1407, -0.0145, 0.00302, -0.1279, 0.0378, -0.11, -0.093, -0.0446, -0.10815, -0.042, -0.3538, -0.07184
    0xb031a4d8, 0x1b13b08d, 0xa36db081, 0xb0181a2f, 0xaf0a28d7, 0xa9b5adf4, 0xa960aeec, 0xac99b5a9,
    // -0.2191, -0.003967, -0.1613, 0.04086, 0.01852, -0.03833, -0.0397, -0.136, -0.1043, 0.066, -0.1274, -0.0936, 0.06885, -0.05536, -0.2421, -0.0506
    0x9c10b303, 0x293bb129, 0xa8e824be, 0xb05aa915, 0x2c39aead, 0xadfeb014, 0xab162c68, 0xaa7ab3bf,
    // 0.06128, -0.03534, -0.01985, -0.05942, 0.00543, -0.2966, -0.08, 0.07965, 0.1056, -0.05, -0.2448, -0.2001, 0.1697, -0.0709, -0.093, -0.1299
    0xa8862bd8, 0xab9ba515, 0xb4bf1d8f, 0x2d19ad1f, 0xaa662ec2, 0xb267b3d5, 0xac8a316e, 0xb028adf4,
    // -0.277, 0.1354, 0.00442, -0.11383, -0.02667, -0.0719, -0.1024, -0.4854, -0.06854, -0.0003705, 0.0792, -0.2196, -0.05164, 0.003529, -0.0954, 0.06134
    0x3055b46f, 0xaf491c87, 0xac9aa6d4, 0xb7c4ae8e, 0x8e12ac63, 0xb3072d12, 0x1b3aaa9c, 0x2bdaae1b,
    // -0.1469, -0.037, -0.06696, -0.05295, 0.101, -0.08844, 0.05984, -0.0804, -0.0859, -0.0809, -0.1882, -0.1525, 0.05032, 0.02261, -0.2345, -0.2827
    0xa8bcb0b3, 0xaac7ac49, 0xada92e77, 0xad252ba9, 0xad2dad7f, 0xb0e1b206, 0x25ca2a71, 0xb486b381,
};
static const uint embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias_dwords[32] = {
    // -0.0001028, 3.08e-05, -6.7e-05, -0.0001768, 2e-06, 0.0001643, 4.02e-05, -8e-06, 0.0002868, 5.05e-05, -0.0001358, -0.000255, 0.000239, 0.0001401, -0.000507, 0.0001587
    0x20586bd, 0x89cb8464, 0x9620022, 0x808602a2, 0x34f0cb3, 0x8c2e8873, 0x8970bd5, 0x9339027,
    // 4.12e-05, -0.000187, 0.0002278, 0.0003302, -4.61e-05, 0.000172, -8.714e-05, 6.54e-05, -8.12e-05, 0.00036, -2.96e-05, 2.664e-05, 0.0002333, -5.525e-05, 0.0001265, 0.0001539
    0x8a2102b3, 0xd690b77, 0x9a38305, 0x44985b6, 0xde68552, 0x1bf81f1, 0x839f0ba5, 0x90b0825,
    // -0.0002158, -0.0001502, -0.0001866, 0.000531, 0.0001683, -1.81e-05, -1.365e-05, 3.5e-05, -0.0001135, 2.51e-05, 0.0001752, -0.000689, 0.0002747, 0.0003412, 0.000271, 3.4e-05
    0x88ec8b12, 0x105a8a1d, 0x81300984, 0x24b80e5, 0x1a58770, 0x91a509be, 0xd970c80, 0x23a0c71,
    // 0.000127, -0.0005493, 0.0001142, -0.0003211, -0.0001293, 3.11e-05, -3.81e-05, 0.0001465, -9.185e-05, 0.0003319, -0.0001286, -6.115e-05, -0.000353, 0.0003026, -9.62e-05, -0.0001595
    0x90800829, 0x8d43077c, 0x20a883d, 0x8cd827f, 0xd708605, 0x84028837, 0xcf58dc9, 0x893a864e,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass8(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage__bottleneck_ResidualBlock_1_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _bottleneck_ResidualBlock_1_residual_func_Split_output_grouped = {
        uint3(480, 270, 64), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(480, 270, 64), // threadGroupSliceSize
        uint3(480, 270, 64), // storageSize
        uint3(64, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        58060800, // threadGroupStorageByteOffset
        storage__bottleneck_ResidualBlock_1_residual_func_Split_output_grouped };
    
    const BufferStorage storage__bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 32), // threadGroupSliceSize
        uint4(3, 3, 16, 32), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        39040, // threadGroupStorageByteOffset
        0.004342703148722649, storage__bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = { embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 128), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 128), // threadGroupSliceSize
        uint4(1, 1, 64, 128), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        43648, // threadGroupStorageByteOffset
        0.0053491052240133286, storage__bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<64> storage_embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias = { embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<64> > embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias = {
        128, // logicalSize
        0, // threadGroupSliceStart
        128, // threadGroupSliceSize
        128, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 128, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 128, 64), // threadGroupSliceSize
        uint4(1, 1, 128, 64), // storageSize
        uint4(128, 128, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        51840, // threadGroupStorageByteOffset
        0.005347635131329298, storage__bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias = { embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias };
    
    // /bottleneck/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_16 = uint3(480, 270, 64);
    const int3 groupStart_slice_16 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 64);
    const uint3 groupSize_slice_16 = uint3(64, 1, 64);
    const uint3 storageSize_slice_16 = uint3(480, 270, 64);
    const uint3 tensorByteStrides_slice_16 = uint3(64, 30720, 1);
    const uint3 paddingBegin_slice_16 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_16 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_16 = dot(groupStart_slice_16, tensorByteStrides_slice_16);
    const RWBufferStorage storage_slice_16 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_16 = { logicalSize_slice_16, groupStart_slice_16, groupSize_slice_16, storageSize_slice_16, tensorByteStrides_slice_16, paddingBegin_slice_16, paddingEnd_slice_16, threadGroupByteOffsetInTensor_slice_16 + 49766400, storage_slice_16 };
    // Fusedquantized_/bottleneck/ResidualBlock_1/residual_func/Concat_quantized_/bottleneck/ResidualBlock_1/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_1/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_1/body/pw_expand/Conv_/bottleneck/ResidualBlock_1/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_1/body/pw_contract/Conv_/bottleneck/ResidualBlock_1/Add (64, 270, 480), (32, 16, 3, 3), (32,), (128, 64, 1, 1), (128,), (64, 128, 1, 1), (64,) -> (64, 270, 480)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<64, 2>(0.015865059569478035, 0.03273303806781769, 0.020553670823574066, 0.018667347729206085, 0.032635949552059174, _bottleneck_ResidualBlock_1_residual_func_Split_output_grouped, _bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias, _bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias, _bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias, slice_16, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_8
#ifdef MLSR_PASS_8_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass8_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /bottleneck/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_17 = uint3(480, 270, 64);
    const int3 groupStart_slice_17 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 64);
    const uint3 groupSize_slice_17 = uint3(32, 1, 64);
    const uint3 storageSize_slice_17 = uint3(480, 270, 64);
    const uint3 tensorByteStrides_slice_17 = uint3(64, 30720, 1);
    const uint3 paddingBegin_slice_17 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_17 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_17 = dot(groupStart_slice_17, tensorByteStrides_slice_17);
    const RWBufferStorage storage_slice_17 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_17 = { logicalSize_slice_17, groupStart_slice_17, groupSize_slice_17, storageSize_slice_17, tensorByteStrides_slice_17, paddingBegin_slice_17, paddingEnd_slice_17, threadGroupByteOffsetInTensor_slice_17 + 49766400, storage_slice_17 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_17, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_8_POST


#ifdef MLSR_PASS_9
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FNB_CT2D_ADD.hlsli"

static const uint embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords[16] = {
    // -0.0001403, 9.78e-05, 0.0002143, -2.26e-06, 7.24e-05, 0.0002251, -3.03e-05, -0.000134, -5.88e-05, -2e-05, 0.0002813, -0.0002409, 0.000268, -0.0001062, 0.0001367, 0.0003276
    0x6698899, 0x80260b06, 0xb6004bf, 0x886481fc, 0x815083db, 0x8be50c9c, 0x86f60c64, 0xd5e087b,
    // 3.165e-05, -0.0001033, -0.0002326, 0.0001694, -3.266e-05, -0.0001829, 0.0002078, 7.516e-05, -0.0001819, 0.000317, 0.0002832, -1.323e-05, -3.946e-05, 1.14e-05, 0.0002437, -0.0001774
    0x86c50213, 0x98d8b9f, 0x89fe8224, 0x4ed0acf, 0xd3289f6, 0x80de0ca4, 0xbf8296, 0x89d00bfc,
};
static const uint embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias_dwords[64] = {
    // 0.0799, 0.02422, -0.1659, -0.2412, 0.152, 0.1113, 0.002317, -0.2734, 0.0986, 0.03268, -0.10144, -0.3164, -0.4082, -0.10455, -0.1444, -0.2297
    0x26332d1d, 0xb3b8b14f, 0x2f2030dd, 0xb46018bf, 0x282f2e4f, 0xb510ae7e, 0xaeb1b688, 0xb35ab09f,
    // -0.1173, -0.1417, -0.1067, -0.03111, -0.1263, -0.04108, 0.1329, -0.1187, -0.0755, -0.1278, 0.0794, 0.0665, -0.1945, -0.03458, 0.10864, -0.2717
    0xb089af82, 0xa7f7aed4, 0xa942b00b, 0xaf993041, 0xb017acd5, 0x2c422d15, 0xa86db239, 0xb4592ef4,
    // -0.2145, -0.249, 0.02005, -0.4634, -0.203, -0.07135, 0.1565, -0.2184, -0.02756, -0.04965, -0.1765, -0.0677, 0.0635, -0.1102, -0.10364, -0.187
    0xb3f8b2dd, 0xb76a2522, 0xac91b27f, 0xb2fd3102, 0xaa5ba70e, 0xac55b1a6, 0xaf0e2c10, 0xb1fcaea2,
    // -0.0692, -0.2198, -0.0693, -0.02446, 0.10443, -0.4531, 0.0932, -0.1014, -0.08563, -0.0183, 0.0727, -0.00071, 0.07007, -0.05936, -0.2927, -0.1256
    0xb309ac6e, 0xa643ac6f, 0xb7402eaf, 0xae7d2df7, 0xa4afad7b, 0x91d12ca7, 0xab992c7c, 0xb005b4af,
    // -0.1967, -0.0955, -0.1882, -0.1975, -0.02786, 0.0688, 0.003557, -0.1982, -0.11017, -0.129, -0.05463, 0.01941, -0.0537, -0.1335, -0.0928, 0.0948
    0xae1db24b, 0xb252b206, 0x2c67a722, 0xb2581b49, 0xb021af0d, 0x24f8aafe, 0xb046aae0, 0x2e11adf0,
    // 0.03217, 0.0322, -0.08624, -0.1357, -0.06116, 0.01529, -0.3813, -0.01985, 0.0296, -0.1511, -0.1602, 0.03766, -0.09515, 0.05325, 0.02551, -0.1309
    0x281f281e, 0xb058ad85, 0x23d4abd4, 0xa515b61a, 0xb0d62794, 0x28d2b120, 0x2ad1ae17, 0xb0302688,
    // -0.1206, -0.05344, -0.2632, -0.1027, 0.0165, -0.1361, -0.337, -0.0324, -0.001185, -0.167, -0.08606, 0.0673, -0.1201, -0.09125, -0.1354, -0.0608
    0xaad7afb8, 0xae93b436, 0xb05b2439, 0xa826b564, 0xb15894db, 0x2c4fad82, 0xadd7afb0, 0xabc8b055,
    // -0.01599, -0.2664, -0.2085, -0.0891, 0.0446, -0.1065, -0.2854, -0.0249, -0.1512, -0.2163, -0.0942, -0.3386, -0.1326, -0.03885, -0.223, 0.0414
    0xb443a418, 0xadb4b2ac, 0xaed129b5, 0xa660b491, 0xb2ecb0d7, 0xb56bae07, 0xa8f9b03e, 0x294db323,
};
static const uint embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias_dwords[32] = {
    // 9.76e-05, -0.0001376, -0.0003376, -0.0001543, -0.0003347, 0.0006566, 0.0004883, 0.0009713, 0.0004783, -0.000288, -4.476e-05, -0.0003524, -0.001411, 0.000663, 0.0008984, -0.0002456
    0x88820665, 0x890e8d88, 0x11618d7c, 0x13f51000, 0x8cb80fd6, 0x8dc682ef, 0x116e95c8, 0x8c06135c,
    // -0.000316, -0.000323, 0.001349, 0.000842, 0.0008416, 0.00107, 0.0003786, -0.0004168, -0.0006685, -0.001371, -0.0002165, -0.000603, 0.0002276, 0.0002522, -0.002087, 0.0005856
    0x8d4b8d2d, 0x12e61587, 0x146212e5, 0x8ed40e34, 0x959e917a, 0x90f18b18, 0xc220b75, 0x10cc9846,
    // 0.001035, 0.001187, 0.001679, -0.0029, -0.0003986, -0.0017185, -5.13e-05, 0.001395, 0.001797, -0.001731, -0.0002378, 0.0008807, 0.0009074, -0.0008, 0.001012, -0.000622
    0x14dd143d, 0x99f016e1, 0x970a8e88, 0x15b7835d, 0x9717175c, 0x13378bcb, 0x928e136f, 0x91181425,
    // 0.001882, 0.002003, -0.0006876, -0.00128, -0.0002704, 0.0001688, 0.0008774, -0.001675, -0.0005174, -0.00105, 0.000828, 0.001626, -0.002693, 0.002172, 0.000299, -0.002207
    0x181a17b5, 0x953e91a2, 0x9888c6e, 0x96dc1330, 0x944d903d, 0x16a912c8, 0x18739984, 0x98850ce6,
};
static const uint embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias_dwords[16] = {
    // 0.004795, 0.01602, -0.004765, -0.06244, 0.0826, 0.03345, 0.0641, -0.02354, -0.0131, -0.002537, 0.01532, 0.01053, -0.06946, -0.01167, -0.00434, -0.0445
    0x241a1ce9, 0xabfe9ce1, 0x28482d49, 0xa6072c1a, 0x9932a2b5, 0x216423d8, 0xa1faac72, 0xa9b29c72,
    // -0.1797, 0.02188, 0.0614, -0.001492, 0.003344, 0.1226, -0.04034, -0.003124, -0.04248, 0.1436, -0.0754, -0.005875, -0.003141, -0.1103, 0.06616, 0.0002444
    0x259ab1c0, 0x961c2bdc, 0x2fd91ad9, 0x9a66a92a, 0x3098a970, 0x9e04acd3, 0xaf0f9a6f, 0xc012c3c,
};

[numthreads(8, 8, 1)]
void fsr4_model_v07_i8_pass9(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(8, 8, 1);
    
    const RWBufferStorage storage__bottleneck_ResidualBlock_2_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _bottleneck_ResidualBlock_2_residual_func_Split_output_grouped = {
        uint3(480, 270, 64), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(480, 270, 64), // threadGroupSliceSize
        uint3(480, 270, 64), // storageSize
        uint3(64, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        49766400, // threadGroupStorageByteOffset
        storage__bottleneck_ResidualBlock_2_residual_func_Split_output_grouped };
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(960, 540, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 32), // threadGroupSliceSize
        uint3(960, 540, 32), // storageSize
        uint3(32, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        33177600, // threadGroupStorageByteOffset
        0.01623149961233139, storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const BufferStorage storage__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 32), // threadGroupSliceSize
        uint4(3, 3, 16, 32), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        60032, // threadGroupStorageByteOffset
        0.0036195958964526653, storage__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = { embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 128), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 128), // threadGroupSliceSize
        uint4(1, 1, 64, 128), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        64640, // threadGroupStorageByteOffset
        0.0047292523086071014, storage__bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<64> storage_embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias = { embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<64> > embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias = {
        128, // logicalSize
        0, // threadGroupSliceStart
        128, // threadGroupSliceSize
        128, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 128, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 128, 64), // threadGroupSliceSize
        uint4(1, 1, 128, 64), // storageSize
        uint4(128, 128, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        72832, // threadGroupStorageByteOffset
        0.004723267629742622, storage__bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias = { embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias };
    
    const BufferStorage storage_hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_HWCN< BufferStorage > hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 32, 64), // threadGroupSliceSize
        uint4(2, 2, 32, 64), // storageSize
        uint4(2048, 4096, 64, 1), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        81024, // threadGroupStorageByteOffset
        0.003016937989741564, storage_hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias = { embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias };
    
    // FusedFusedquantized_/bottleneck/ResidualBlock_2/residual_func/Concat_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_2/body/pw_expand/Conv_/bottleneck/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_2/body/pw_contract/Conv_/bottleneck/ResidualBlock_2/Add_Fusedquantized_/bottleneck/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_Fusedquantized_/decoder3/skip_pop_0/Add_QuantizedOutput_output_grouped
    const uint3 logicalSize_slice_18 = uint3(960, 540, 32);
    const int3 groupStart_slice_18 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(16, 16, 32);
    const uint3 groupSize_slice_18 = uint3(16, 16, 32);
    const uint3 storageSize_slice_18 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_18 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_18 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_18 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_18 = dot(groupStart_slice_18, tensorByteStrides_slice_18);
    const RWBufferStorage storage_slice_18 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_18 = { logicalSize_slice_18, groupStart_slice_18, groupSize_slice_18, storageSize_slice_18, tensorByteStrides_slice_18, paddingBegin_slice_18, paddingEnd_slice_18, threadGroupByteOffsetInTensor_slice_18 + 66355200, storage_slice_18 };
    // FusedFusedquantized_/bottleneck/ResidualBlock_2/residual_func/Concat_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_2/body/pw_expand/Conv_/bottleneck/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_2/body/pw_contract/Conv_/bottleneck/ResidualBlock_2/Add_Fusedquantized_/bottleneck/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_Fusedquantized_/decoder3/skip_pop_0/Add_QuantizedOutput (64, 270, 480), (32, 540, 960), (32, 16, 3, 3), (32,), (128, 64, 1, 1), (128,), (64, 128, 1, 1), (64,), (64, 32, 2, 2), (32,) -> (32, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FNB_CT2D_ADD<64, 2>(0.018667347729206085, 0.032635949552059174, 0.02135300077497959, 0.02608010359108448, 0.017770705744624138, 0.03233850747346878, _bottleneck_ResidualBlock_2_residual_func_Split_output_grouped, fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, _bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias, _bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias, _bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias, hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias, slice_18, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_9
#ifdef MLSR_PASS_9_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass9_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // FusedFusedquantized_/bottleneck/ResidualBlock_2/residual_func/Concat_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_2/body/pw_expand/Conv_/bottleneck/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_2/body/pw_contract/Conv_/bottleneck/ResidualBlock_2/Add_Fusedquantized_/bottleneck/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_Fusedquantized_/decoder3/skip_pop_0/Add_QuantizedOutput_output_grouped
    const uint3 logicalSize_slice_19 = uint3(960, 540, 32);
    const int3 groupStart_slice_19 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_19 = uint3(32, 1, 32);
    const uint3 storageSize_slice_19 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_19 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_19 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_19 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_19 = dot(groupStart_slice_19, tensorByteStrides_slice_19);
    const RWBufferStorage storage_slice_19 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_19 = { logicalSize_slice_19, groupStart_slice_19, groupSize_slice_19, storageSize_slice_19, tensorByteStrides_slice_19, paddingBegin_slice_19, paddingEnd_slice_19, threadGroupByteOffsetInTensor_slice_19 + 66355200, storage_slice_19 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_19, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_9_POST


#ifdef MLSR_PASS_10
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 16, -5, 16, 7, 19, 9, 6, -24, 4, 21, 7, -17, 7, 10, -15, -20, 15, 8, 10, 27, 23, 23, -5, -12, -6, 30, 18, 12, -10, 6, 0, 4
    0x710fb10, 0xe8060913, 0xef071504, 0xecf10a07, 0x1b0a080f, 0xf4fb1717, 0xc121efa, 0x40006f6,
    // -5, 16, 15, 19, 29, 9, -3, -17, 12, 19, -6, -13, -21, 2, -12, -16, -16, -1, 20, -6, -24, -8, -25, -8, -6, -23, -37, 16, 2, -3, -2, 11
    0x130f10fb, 0xeffd091d, 0xf3fa130c, 0xf0f402eb, 0xfa14fff0, 0xf8e7f8e8, 0x10dbe9fa, 0xbfefd02,
    // -66, -41, 39, -7, 17, -79, 77, 24, 58, 3, -1, 96, -5, 1, 82, 58, 49, 12, -42, 8, 24, 12, -14, 2, 57, 6, -53, -3, -14, -17, 12, -34
    0xf927d7be, 0x184db111, 0x60ff033a, 0x3a5201fb, 0x8d60c31, 0x2f20c18, 0xfdcb0639, 0xde0ceff2,
    // -2, 9, 7, -15, -34, 11, -12, -14, 6, -18, -18, 2, 14, -18, 5, 1, 1, 17, 2, -9, -33, 12, -16, 37, -20, -18, 2, -13, 1, -16, -3, -7
    0xf10709fe, 0xf2f40bde, 0x2eeee06, 0x105ee0e, 0xf7021101, 0x25f00cdf, 0xf302eeec, 0xf9fdf001,
    // 1, 11, 13, -5, -4, 8, -11, -3, 4, -7, 4, 13, -15, 9, -5, -7, 14, 2, 12, -9, -7, 8, 3, 4, 5, 0, 8, 3, 3, -4, -11, -6
    0xfb0d0b01, 0xfdf508fc, 0xd04f904, 0xf9fb09f1, 0xf70c020e, 0x40308f9, 0x3080005, 0xfaf5fc03,
    // -47, -32, 21, 14, -1, -17, 32, 5, -28, -45, -18, -15, -9, -1, 45, 28, 3, 11, 3, 9, -14, -8, 12, 11, -6, -10, 5, 12, 17, 3, -3, -21
    0xe15e0d1, 0x520efff, 0xf1eed3e4, 0x1c2dfff7, 0x9030b03, 0xb0cf8f2, 0xc05f6fa, 0xebfd0311,
    // 53, -6, 43, -7, -7, 45, 38, 31, 3, 6, 42, -5, 13, -12, -6, -9, -44, -19, 7, -52, -17, 12, 4, 13, 63, 11, 98, 33, 34, -30, 95, -4
    0xf92bfa35, 0x1f262df9, 0xfb2a0603, 0xf7faf40d, 0xcc07edd4, 0xd040cef, 0x21620b3f, 0xfc5fe222,
    // -23, 4, 23, 11, 1, 8, 10, 6, -20, -26, -21, 5, -25, 6, 2, 6, 8, 2, 9, 0, 24, -3, 2, 0, 0, 9, -3, 0, 8, 13, 4, 19
    0xb1704e9, 0x60a0801, 0x5ebe6ec, 0x60206e7, 0x90208, 0x2fd18, 0xfd0900, 0x13040d08,
    // 74, 45, 6, -8, 16, 18, 5, 33, 4, 40, -48, 20, -24, 40, -15, 16, -29, -11, 30, 5, 0, 27, 29, 14, -13, 1, 52, -27, -2, -25, 21, 8
    0xf8062d4a, 0x21051210, 0x14d02804, 0x10f128e8, 0x51ef5e3, 0xe1d1b00, 0xe53401f3, 0x815e7fe,
    // 19, -14, 9, -18, -18, 5, 24, 1, -10, 2, 9, 12, 11, -5, -18, 8, -40, -7, -24, -24, 1, -24, 9, 2, -41, -16, -23, -17, -14, -1, 23, 28
    0xee09f213, 0x11805ee, 0xc0902f6, 0x8eefb0b, 0xe8e8f9d8, 0x209e801, 0xefe9f0d7, 0x1c17fff2,
    // -5, -3, -13, 2, 3, -4, 5, -10, 9, 8, -17, 21, -10, -3, -14, -6, 2, -4, -8, -11, -26, -25, -1, 5, -27, -14, -8, 18, 0, 4, 0, 29
    0x2f3fdfb, 0xf605fc03, 0x15ef0809, 0xfaf2fdf6, 0xf5f8fc02, 0x5ffe7e6, 0x12f8f2e5, 0x1d000400,
    // -56, -111, -47, 15, -18, -47, 12, -48, 6, -9, 56, -91, 50, -43, -2, -119, 44, -1, -25, 6, 9, -22, 10, -14, 16, 25, -12, -5, -6, -5, 9, -7
    0xfd191c8, 0xd00cd1ee, 0xa538f706, 0x89fed532, 0x6e7ff2c, 0xf20aea09, 0xfbf41910, 0xf909fbfa,
    // -9, -4, -16, -11, -15, 4, 10, -5, 1, -12, -10, 4, -7, -35, 13, -8, 34, 33, -34, -23, 16, 1, -8, 4, -13, 4, 22, 16, -12, 22, 15, 14
    0xf5f0fcf7, 0xfb0a04f1, 0x4f6f401, 0xf80dddf9, 0xe9de2122, 0x4f80110, 0x101604f3, 0xe0f16f4,
    // -9, 4, -6, 9, 17, -9, 7, -3, 2, -8, -3, 15, -13, -2, -7, 0, -9, 14, -8, 14, 18, -12, -13, -20, 5, -4, -5, -12, -26, -8, 27, -32
    0x9fa04f7, 0xfd07f711, 0xffdf802, 0xf9fef3, 0xef80ef7, 0xecf3f412, 0xf4fbfc05, 0xe01bf8e6,
    // -38, -7, -16, 2, 3, -8, 11, -64, -21, -8, 3, -34, -31, 12, 71, 15, 1, -19, 6, 1, -9, -8, -3, -11, 0, 6, -2, -3, -6, -2, -4, -7
    0x2f0f9da, 0xc00bf803, 0xde03f8eb, 0xf470ce1, 0x106ed01, 0xf5fdf8f7, 0xfdfe0600, 0xf9fcfefa,
    // -17, -1, -12, -1, 24, 2, -17, -38, 3, 10, -13, -11, -21, -1, 12, -11, 64, 84, 16, -31, 17, 19, 12, 0, 35, -16, 69, -2, 14, -73, 17, 26
    0xfff4ffef, 0xdaef0218, 0xf5f30a03, 0xf50cffeb, 0xe1105440, 0xc1311, 0xfe45f023, 0x1a11b70e,
    // 17, 11, 1, -23, -22, 0, -13, -1, 0, 19, 11, 7, 9, -15, 3, -23, 12, -15, 2, -6, 3, -1, -12, -22, 14, 2, -5, 3, -2, -3, 11, 3
    0xe9010b11, 0xfff300ea, 0x70b1300, 0xe903f109, 0xfa02f10c, 0xeaf4ff03, 0x3fb020e, 0x30bfdfe,
    // 44, 40, -14, -35, -19, -1, -23, -30, -15, 44, -16, -14, 8, 13, -12, -5, 19, -3, -14, -28, -14, -1, -34, -4, 1, 9, -8, 9, -4, -2, 9, -8
    0xddf2282c, 0xe2e9ffed, 0xf2f02cf1, 0xfbf40d08, 0xe4f2fd13, 0xfcdefff2, 0x9f80901, 0xf809fefc,
    // -37, 2, -7, -24, -27, 13, -3, 5, -1, 7, -13, 4, 10, -25, -2, -7, -63, -4, -2, -16, -4, 13, -23, -6, 6, -19, -15, 7, -1, -13, 11, -2
    0xe8f902db, 0x5fd0de5, 0x4f307ff, 0xf9fee70a, 0xf0fefcc1, 0xfae90dfc, 0x7f1ed06, 0xfe0bf3ff,
    // -41, 3, 7, -16, -1, 30, 10, -3, 6, 3, 10, 6, -11, 3, -1, 1, -9, 1, -16, -37, -18, 7, -22, -26, 8, 6, -20, 23, 10, 0, -10, -8
    0xf00703d7, 0xfd0a1eff, 0x60a0306, 0x1ff03f5, 0xdbf001f7, 0xe6ea07ee, 0x17ec0608, 0xf8f6000a,
    // 58, -35, 28, -10, 13, 20, -6, -1, 2, -52, 44, -7, 11, -21, -49, 42, -25, 9, -11, -12, 7, 28, -3, 7, 6, 29, 1, -13, -8, -2, -9, 3
    0xf61cdd3a, 0xfffa140d, 0xf92ccc02, 0x2acfeb0b, 0xf4f509e7, 0x7fd1c07, 0xf3011d06, 0x3f7fef8,
    // -16, 9, -10, -20, -14, 17, -13, -1, 1, 11, -9, 12, 11, -1, -16, -1, -23, -13, -5, -11, -2, 28, -23, 7, 12, -3, 9, 2, 9, -21, 0, -3
    0xecf609f0, 0xfff311f2, 0xcf70b01, 0xfff0ff0b, 0xf5fbf3e9, 0x7e91cfe, 0x209fd0c, 0xfd00eb09,
    // -27, 8, 7, -7, 3, 16, 2, -2, 3, 18, -5, 1, -3, 0, -31, -9, 16, -1, 12, 4, -7, -4, -3, -11, -1, -14, 15, -10, 15, 5, -3, 15
    0xf90708e5, 0xfe021003, 0x1fb1203, 0xf7e100fd, 0x40cff10, 0xf5fdfcf9, 0xf60ff2ff, 0xffd050f,
    // 15, 2, -7, -1, -17, -10, -17, 8, -21, -10, 7, -5, 10, -12, -36, -24, -7, 7, -1, 2, -7, 11, 1, 6, -7, 12, 13, 12, -7, -1, -2, -5
    0xfff9020f, 0x8eff6ef, 0xfb07f6eb, 0xe8dcf40a, 0x2ff07f9, 0x6010bf9, 0xc0d0cf9, 0xfbfefff9,
    // 16, -2, 2, -2, -12, 17, -33, 3, -63, 19, 0, -1, -3, 8, -41, 38, -2, -44, 36, 11, -5, -10, 48, -111, 9, -5, 28, 34, -85, 84, 48, 76
    0xfe02fe10, 0x3df11f4, 0xff0013c1, 0x26d708fd, 0xb24d4fe, 0x9130f6fb, 0x221cfb09, 0x4c3054ab,
    // -34, -14, 32, 3, 0, -8, 5, 17, 15, 5, 96, -10, 26, -33, 31, 3, 0, -6, -26, 2, 0, 6, 8, 3, 1, -1, -5, -10, 0, -19, 22, -22
    0x320f2de, 0x1105f800, 0xf660050f, 0x31fdf1a, 0x2e6fa00, 0x3080600, 0xf6fbff01, 0xea16ed00,
    // 19, 2, -43, -11, 13, -11, -28, -25, 18, -12, 19, 53, 10, 22, 18, 27, -4, 6, -10, 4, -4, -8, -11, -22, 11, -2, -25, 18, -11, -3, -9, -5
    0xf5d50213, 0xe7e4f50d, 0x3513f412, 0x1b12160a, 0x4f606fc, 0xeaf5f8fc, 0x12e7fe0b, 0xfbf7fdf5,
    // -2, 14, -9, 12, -19, 0, -9, -21, -6, -5, -3, -22, 7, -8, 5, -1, 24, 26, 3, 1, 28, 2, 9, -18, 13, 2, 43, 2, -19, 13, -4, -8
    0xcf70efe, 0xebf700ed, 0xeafdfbfa, 0xff05f807, 0x1031a18, 0xee09021c, 0x22b020d, 0xf8fc0ded,
    // 14, 27, -1, 31, 28, 11, 6, -14, 19, 9, 1, -11, -3, 17, 3, -15, 49, 15, 36, -42, -22, 52, 4, 30, 6, -9, 44, 0, -8, 3, -23, 31
    0x1fff1b0e, 0xf2060b1c, 0xf5010913, 0xf10311fd, 0xd6240f31, 0x1e0434ea, 0x2cf706, 0x1fe903f8,
    // 2, -43, 6, -22, 6, -35, -70, 50, -2, 53, -46, -13, -48, -53, -36, -29, -16, -13, 49, 27, 17, -4, -2, -13, 6, -30, 37, -30, -29, -11, -13, 24
    0xea06d502, 0x32badd06, 0xf3d235fe, 0xe3dccbd0, 0x1b31f3f0, 0xf3fefc11, 0xe225e206, 0x18f3f5e3,
    // 17, 4, 6, -18, -21, 18, 16, -13, -8, -11, 1, 3, 22, 3, 17, 25, 19, 5, -23, -16, -10, 8, -6, 9, -3, -17, 12, -13, -16, -30, -4, -16
    0xee060411, 0xf31012eb, 0x301f5f8, 0x19110316, 0xf0e90513, 0x9fa08f6, 0xf30ceffd, 0xf0fce2f0,
    // 6, 14, -13, 23, 0, 8, 8, -19, 13, -15, 7, -9, -13, -3, 13, -3, 8, -12, -8, -26, 0, -14, -9, -8, 3, 19, 1, 11, -30, -11, 7, 19
    0x17f30e06, 0xed080800, 0xf707f10d, 0xfd0dfdf3, 0xe6f8f408, 0xf8f7f200, 0xb011303, 0x1307f5e2,
    // 5, -45, 16, -36, -9, 1, -19, 33, 6, 21, -14, 15, -31, -23, -6, 15, 7, -8, -2, -26, 2, -9, -2, 4, -1, 16, -3, 0, -25, -8, 13, 4
    0xdc10d305, 0x21ed01f7, 0xff21506, 0xffae9e1, 0xe6fef807, 0x4fef702, 0xfd10ff, 0x40df8e7,
    // 19, -17, 3, -50, 12, -7, -20, 9, 1, 16, -6, 19, -31, -28, 8, 11, 54, 28, 52, -32, 31, 0, 21, 45, -36, 9, -42, 3, -32, -6, -33, -23
    0xce03ef13, 0x9ecf90c, 0x13fa1001, 0xb08e4e1, 0xe0341c36, 0x2d15001f, 0x3d609dc, 0xe9dffae0,
    // -13, -32, 43, -30, 3, -13, 5, 23, -2, 3, 19, -2, -51, -14, -2, 15, 3, -2, -4, -13, -1, -19, -3, 11, 5, 4, -6, -1, -31, -15, 3, -15
    0xe22be0f3, 0x1705f303, 0xfe1303fe, 0xffef2cd, 0xf3fcfe03, 0xbfdedff, 0xfffa0405, 0xf103f1e1,
    // -11, -42, 18, -16, 4, -15, -22, 21, 0, 0, -5, 23, -31, -12, -18, 11, 12, -13, 4, -6, 4, -12, -7, 1, 0, 5, 10, 7, -20, -6, -11, 13
    0xf012d6f5, 0x15eaf104, 0x17fb0000, 0xbeef4e1, 0xfa04f30c, 0x1f9f404, 0x70a0500, 0xdf5faec,
    // -8, -5, -10, 3, -1, -8, 10, 6, 3, -11, -13, -2, 4, -21, 5, 12, -52, 26, -1, -9, 18, -23, 29, 20, -5, -1, 8, 6, 9, -12, 46, 5
    0x3f6fbf8, 0x60af8ff, 0xfef3f503, 0xc05eb04, 0xf7ff1acc, 0x141de912, 0x608fffb, 0x52ef409,
    // -13, 15, 4, 9, 19, 8, 27, 3, 4, 10, 1, -4, -14, -1, 13, 17, -43, -5, -26, 3, -6, -54, -15, -9, -18, -39, -59, -3, 21, -9, 24, 22
    0x9040ff3, 0x31b0813, 0xfc010a04, 0x110dfff2, 0x3e6fbd5, 0xf7f1cafa, 0xfdc5d9ee, 0x1618f715,
    // 108, 18, -71, 6, 15, 108, 51, 2, 23, 44, -8, 33, -14, 50, -69, -86, 5, -5, -2, -8, 20, 3, 16, -2, 12, 5, 28, -24, 29, -15, 21, 21
    0x6b9126c, 0x2336c0f, 0x21f82c17, 0xaabb32f2, 0xf8fefb05, 0xfe100314, 0xe81c050c, 0x1515f11d,
    // -4, -10, -26, -5, -11, 2, 16, 3, 19, -23, -13, -16, 13, -27, 25, -9, 7, 34, -34, -17, 7, -18, -1, 24, -4, 1, -8, 33, 11, 18, 0, 20
    0xfbe6f6fc, 0x31002f5, 0xf0f3e913, 0xf719e50d, 0xefde2207, 0x18ffee07, 0x21f801fc, 0x1400120b,
    // 1, 7, -2, 2, 21, -17, 2, -2, 10, -6, 10, -1, 0, 0, -10, 19, 35, 5, 17, -1, -18, 4, 15, -16, 3, 1, 22, 11, 6, 16, -4, 1
    0x2fe0701, 0xfe02ef15, 0xff0afa0a, 0x13f60000, 0xff110523, 0xf00f04ee, 0xb160103, 0x1fc1006,
    // 9, -5, 21, 2, -21, -7, -36, 55, -21, -29, -11, -21, 39, -40, -32, -27, -12, 0, 3, -19, -15, 11, 0, 11, -12, -8, 10, 7, 8, 14, 24, 1
    0x215fb09, 0x37dcf9eb, 0xebf5e3eb, 0xe5e0d827, 0xed0300f4, 0xb000bf1, 0x70af8f4, 0x1180e08,
    // -9, 23, 10, 7, 32, 21, -41, 5, -12, -25, -22, 33, -23, 32, -25, 45, -19, 24, 127, -28, -14, 2, 51, 2, 27, 6, -22, -81, -65, -29, 41, -61
    0x70a17f7, 0x5d71520, 0x21eae7f4, 0x2de720e9, 0xe47f18ed, 0x23302f2, 0xafea061b, 0xc329e3bf,
    // 55, 7, -19, -21, 5, 36, -18, 50, 27, 3, 1, 1, 39, -33, 18, -40, -9, 8, -20, 25, 23, 11, 6, 7, 10, 4, 5, -10, -6, -5, 25, -30
    0xebed0737, 0x32ee2405, 0x101031b, 0xd812df27, 0x19ec08f7, 0x7060b17, 0xf605040a, 0xe219fbfa,
    // 29, -5, 8, 10, 28, 25, -5, 0, 30, -7, -6, 47, 2, 53, 32, 28, -6, -1, 5, 25, 11, -23, -11, -21, 4, 7, -40, -6, -4, 7, -10, -14
    0xa08fb1d, 0xfb191c, 0x2ffaf91e, 0x1c203502, 0x1905fffa, 0xebf5e90b, 0xfad80704, 0xf2f607fc,
    // -16, 6, -20, -11, -32, -8, 3, 16, -9, -15, -28, -27, 14, -20, 27, 6, -27, -44, 24, -22, -9, -2, 4, 9, 2, -28, -16, -2, 1, 13, 34, 26
    0xf5ec06f0, 0x1003f8e0, 0xe5e4f1f7, 0x61bec0e, 0xea18d4e5, 0x904fef7, 0xfef0e402, 0x1a220d01,
    // 10, 5, -10, -2, 7, 5, -8, -9, 17, 14, -10, 13, 9, 15, 1, 0, 10, -20, -10, -18, -13, -3, 11, -6, 31, -30, -32, 2, 10, -26, 55, -27
    0xfef6050a, 0xf7f80507, 0xdf60e11, 0x10f09, 0xeef6ec0a, 0xfa0bfdf3, 0x2e0e21f, 0xe537e60a,
    // 24, -27, 57, 48, 31, 8, 10, 58, -70, -21, 19, 12, 2, 66, 33, -3, 35, 0, 18, 13, 26, -16, -15, -6, -5, 40, -41, 2, -17, 16, -7, 1
    0x3039e518, 0x3a0a081f, 0xc13ebba, 0xfd214202, 0xd120023, 0xfaf1f01a, 0x2d728fb, 0x1f910ef,
    // 7, 6, 4, 2, -6, 6, 3, -5, -12, -4, 22, -9, 0, -3, -5, -1, -5, -42, 22, 25, 30, 11, -15, 12, 17, -6, 9, 13, 0, -41, -2, -15
    0x2040607, 0xfb0306fa, 0xf716fcf4, 0xfffbfd00, 0x1916d6fb, 0xcf10b1e, 0xd09fa11, 0xf1fed700,
    // 6, 21, -21, 18, 31, -1, 3, -10, 18, 24, -40, -6, -10, 7, 5, -13, 3, -7, -6, -6, -18, 1, -4, 4, 2, -10, -15, -4, 1, -22, 3, 4
    0x12eb1506, 0xf603ff1f, 0xfad81812, 0xf30507f6, 0xfafaf903, 0x4fc01ee, 0xfcf1f602, 0x403ea01,
    // 55, 73, -1, -38, -10, -20, 27, 19, 14, 25, 69, 12, 31, -1, -7, -30, -7, 9, 0, 4, -3, 2, -1, 4, -9, 4, 24, 7, -11, -7, -11, 24
    0xdaff4937, 0x131becf6, 0xc45190e, 0xe2f9ff1f, 0x40009f9, 0x4ff02fd, 0x71804f7, 0x18f5f9f5,
    // 24, -7, -16, -11, -18, -28, 10, -19, 40, -21, -10, 16, -1, -17, 22, 5, -100, 60, -36, -83, 16, -11, -67, -54, -12, -19, -10, 12, -51, 55, 65, 52
    0xf5f0f918, 0xed0ae4ee, 0x10f6eb28, 0x516efff, 0xaddc3c9c, 0xcabdf510, 0xcf6edf4, 0x344137cd,
    // 48, 14, -49, -7, 8, 2, -10, -1, -3, 28, -54, -1, -14, -9, -17, 14, -5, -5, 8, 9, -1, -10, -7, 7, -24, -2, 27, 7, -3, 5, -33, 13
    0xf9cf0e30, 0xfff60208, 0xffca1cfd, 0xeeff7f2, 0x908fbfb, 0x7f9f6ff, 0x71bfee8, 0xddf05fd,
    // -21, 20, -23, -9, 17, -28, 30, -13, -9, 9, 29, -14, -21, 3, 26, 5, -22, -6, -11, 22, 12, -8, 29, 2, 7, 10, -18, -8, -12, -11, -10, -8
    0xf7e914eb, 0xf31ee411, 0xf21d09f7, 0x51a03eb, 0x16f5faea, 0x21df80c, 0xf8ee0a07, 0xf8f6f5f4,
    // 11, 3, 3, 13, 34, 2, 11, 21, -4, -7, 22, -1, -9, 22, -9, -6, 17, -26, 29, 12, 22, 5, 3, 18, 25, -21, -23, 2, -7, 3, 1, 25
    0xd03030b, 0x150b0222, 0xff16f9fc, 0xfaf716f7, 0xc1de611, 0x12030516, 0x2e9eb19, 0x190103f9,
    // 17, -10, -10, 1, 3, -23, -1, 4, 1, -10, -10, 2, -3, 6, 2, -3, -10, -6, 2, 25, 15, -15, 7, 9, 18, -12, -15, -18, -21, -10, -5, -8
    0x1f6f611, 0x4ffe903, 0x2f6f601, 0xfd0206fd, 0x1902faf6, 0x907f10f, 0xeef1f412, 0xf8fbf6eb,
    // -1, -99, -44, -69, 32, 73, -60, -53, 92, -80, -6, 23, 1, 33, -18, 71, 59, 14, -21, -23, 2, -1, -25, 36, 33, -20, -50, 2, 6, -7, -9, -22
    0xbbd49dff, 0xcbc44920, 0x17fab05c, 0x47ee2101, 0xe9eb0e3b, 0x24e7ff02, 0x2ceec21, 0xeaf7f906,
    // 15, -13, 7, -2, 12, 1, 35, 19, -4, 7, 10, 4, -2, 13, 18, 24, 24, -21, 36, -10, -14, -11, -6, 27, 15, -11, -33, 9, 3, 2, -36, 4
    0xfe07f30f, 0x1323010c, 0x40a07fc, 0x18120dfe, 0xf624eb18, 0x1bfaf5f2, 0x9dff50f, 0x4dc0203,
    // 14, -5, -14, -12, -12, -17, -12, 14, -3, -7, 0, 14, -7, 2, 12, 13, -11, -5, -9, 15, -4, -13, -12, 14, 19, 7, 10, -10, -9, -10, -6, 6
    0xf4f2fb0e, 0xef4eff4, 0xe00f9fd, 0xd0c02f9, 0xff7fbf5, 0xef4f3fc, 0xf60a0713, 0x6faf6f7,
    // -42, -17, 10, 32, -8, -25, -32, -7, 6, -16, 45, -6, -24, -21, 20, 31, -19, -6, -3, 14, -3, -10, -7, 13, 7, -2, 22, -12, -19, -5, 7, 27
    0x200aefd6, 0xf9e0e7f8, 0xfa2df006, 0x1f14ebe8, 0xefdfaed, 0xdf9f6fd, 0xf416fe07, 0x1b07fbed,
    // -17, 7, -25, 10, -13, -48, -56, -25, 32, -14, 2, -2, -19, -17, 3, 19, 43, 34, 38, 59, -16, 2, -38, -6, 23, -22, 69, -6, -12, -39, -5, -32
    0xae707ef, 0xe7c8d0f3, 0xfe02f220, 0x1303efed, 0x3b26222b, 0xfada02f0, 0xfa45ea17, 0xe0fbd9f4,
    // -2, -2, -55, 1, 1, 2, -38, 2, 17, 0, 13, -6, -27, -4, -2, 21, -6, -8, -24, 8, -6, -14, -15, 17, 8, 9, 10, -9, 7, 15, 5, 27
    0x1c9fefe, 0x2da0201, 0xfa0d0011, 0x15fefce5, 0x8e8f8fa, 0x11f1f2fa, 0xf70a0908, 0x1b050f07,
    // 16, 1, -6, 12, -16, -3, -29, 25, 0, 29, 7, 10, -13, 11, -15, 24, -8, -14, 2, 1, 9, -6, -2, 25, -2, 20, 32, -16, 3, 4, 0, 25
    0xcfa0110, 0x19e3fdf0, 0xa071d00, 0x18f10bf3, 0x102f2f8, 0x19fefa09, 0xf02014fe, 0x19000403,
    // -14, -14, -10, 15, 11, -11, -6, 12, -2, 22, 0, -8, 7, 11, -4, 13, -2, 4, -25, -1, 37, -18, -23, 2, -5, 24, -6, -13, 22, 29, 9, 5
    0xff6f2f2, 0xcfaf50b, 0xf80016fe, 0xdfc0b07, 0xffe704fe, 0x2e9ee25, 0xf3fa18fb, 0x5091d16,
    // -5, 3, -18, 22, 28, -6, -1, 9, 16, 22, 2, -15, 5, 8, 4, 0, 24, 9, -4, -24, 8, -3, -2, 13, -14, 31, 7, 15, 34, 49, -21, 29
    0x16ee03fb, 0x9fffa1c, 0xf1021610, 0x40805, 0xe8fc0918, 0xdfefd08, 0xf071ff2, 0x1deb3122,
    // -33, 39, 13, -59, 12, -22, 30, 66, 2, -61, -4, -43, 48, 35, 9, 16, -12, -1, 2, 16, 33, -23, 7, 29, 10, 10, 17, -45, 12, 29, -6, 5
    0xc50d27df, 0x421eea0c, 0xd5fcc302, 0x10092330, 0x1002fff4, 0x1d07e921, 0xd3110a0a, 0x5fa1d0c,
    // -1, 4, -8, 8, -1, -7, -12, 12, -5, 8, 3, -3, 12, 7, -4, 6, 7, 16, -19, -10, 22, -14, -45, -10, -8, -10, 9, -14, 14, 20, -2, 9
    0x8f804ff, 0xcf4f9ff, 0xfd0308fb, 0x6fc070c, 0xf6ed1007, 0xf6d3f216, 0xf209f6f8, 0x9fe140e,
    // -10, 0, -6, 28, 23, -9, 9, 4, 13, 11, 18, 4, 2, 20, -7, 14, -27, 4, -10, 18, 23, -27, 8, 10, -7, -10, -8, -12, 7, -7, 3, 0
    0x1cfa00f6, 0x409f717, 0x4120b0d, 0xef91402, 0x12f604e5, 0xa08e517, 0xf4f8f6f9, 0x3f907,
    // 3, 15, 23, 26, 18, 3, 43, 14, 10, -14, 19, 14, -2, 12, 24, 16, -2, 1, -6, -7, 23, 3, 1, 13, 3, -9, -19, 6, 0, -20, -13, -15
    0x1a170f03, 0xe2b0312, 0xe13f20a, 0x10180cfe, 0xf9fa01fe, 0xd010317, 0x6edf703, 0xf1f3ec00,
    // -9, 2, 8, -13, 16, 26, 19, 25, -12, 25, -6, 5, 0, 13, -13, 49, -105, 4, -3, 21, -46, -11, -7, 64, 9, 59, -1, -91, -46, -38, -38, 36
    0xf30802f7, 0x19131a10, 0x5fa19f4, 0x31f30d00, 0x15fd0497, 0x40f9f5d2, 0xa5ff3b09, 0x24dadad2,
    // -22, -12, 27, -4, -20, -21, 11, 13, 8, -17, 23, 24, 32, -12, -13, 1, 8, -7, -8, -19, -3, 4, 15, 15, 8, -4, -7, -6, 21, -5, 28, 12
    0xfc1bf4ea, 0xd0bebec, 0x1817ef08, 0x1f3f420, 0xedf8f908, 0xf0f04fd, 0xfaf9fc08, 0xc1cfb15,
    // 4, 0, -1, -7, -18, -7, 15, 37, 13, 2, -18, 32, 28, -8, 11, 9, 29, -7, -26, -25, -17, -19, -22, 12, -3, 0, -39, 25, 7, -12, -5, 8
    0xf9ff0004, 0x250ff9ee, 0x20ee020d, 0x90bf81c, 0xe7e6f91d, 0xceaedef, 0x19d900fd, 0x8fbf407,
};
static const uint embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // 3.46e-06, -0.0003622, -0.000443, 0.000971, -0.000299, 0.0002553, -0.000258, -0.000365, -0.000993, 7.29e-05, 0.000353, 0.0001763, 0.000507, -0.0006275, -8.947e-05, -0.000912
    0x8def003a, 0x13f48f42, 0xc2f8ce6, 0x8dfb8c3a, 0x4c79411, 0x9c70dc9, 0x91241027, 0x937985dd,
};
static const uint embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 6, -3, -7, -4, 9, -5, 54, 47, -25, 23, -6, -14, 52, 0, -25, -22, 47, 26, 56, -74, 3, 44, 18, 50, 58, -101, 9, 75, -4, -66, 36, -83
    0xfcf9fd06, 0x2f36fb09, 0xf2fa17e7, 0xeae70034, 0xb6381a2f, 0x32122c03, 0x4b099b3a, 0xad24befc,
    // 21, 5, 16, -25, 34, 14, -3, 29, -4, -27, -35, 11, -9, 30, -72, 35, 94, 43, -38, -7, 14, 23, -20, -21, 43, 51, 48, 15, -48, 77, -10, 73
    0xe7100515, 0x1dfd0e22, 0xbdde5fc, 0x23b81ef7, 0xf9da2b5e, 0xebec170e, 0xf30332b, 0x49f64dd0,
    // 27, -7, 18, 24, -14, 9, -26, 18, -38, -2, 16, -12, -18, 22, -2, -4, 46, -16, -39, -34, -7, 21, -35, 75, -28, 54, -2, 9, -5, 31, 68, 16
    0x1812f91b, 0x12e609f2, 0xf410feda, 0xfcfe16ee, 0xded9f02e, 0x4bdd15f9, 0x9fe36e4, 0x10441ffb,
    // -2, -7, -21, 4, 38, 64, -32, -59, 36, -67, -12, 1, 70, -38, -4, -64, 10, 0, -54, 9, 17, -33, -5, 28, 18, 54, -10, 15, -66, 13, 0, -24
    0x4ebf9fe, 0xc5e04026, 0x1f4bd24, 0xc0fcda46, 0x9ca000a, 0x1cfbdf11, 0xff63612, 0xe8000dbe,
    // -36, 20, 31, 24, -67, -5, 44, -30, 6, 15, -8, 29, 26, -49, 46, -25, 28, -9, 45, -26, -28, 8, -59, 15, -25, 56, 19, -1, 6, -92, -43, 9
    0x181f14dc, 0xe22cfbbd, 0x1df80f06, 0xe72ecf1a, 0xe62df71c, 0xfc508e4, 0xff1338e7, 0x9d5a406,
    // 33, 8, -56, -6, -53, -13, 30, 58, 29, 30, 27, -23, -25, 41, -58, -4, 52, 9, 12, 51, -13, -10, 7, -12, -19, 31, 69, 31, -22, 47, 0, -11
    0xfac80821, 0x3a1ef3cb, 0xe91b1e1d, 0xfcc629e7, 0x330c0934, 0xf407f6f3, 0x1f451fed, 0xf5002fea,
    // 25, 59, 0, -39, -31, -94, -4, 46, -68, -38, 48, 50, 42, 19, -4, -24, -8, 38, 28, -12, -13, 4, 87, -21, -34, 15, 26, -15, 8, -35, -24, 0
    0xd9003b19, 0x2efca2e1, 0x3230dabc, 0xe8fc132a, 0xf41c26f8, 0xeb5704f3, 0xf11a0fde, 0xe8dd08,
    // -4, -1, -8, 14, 35, 10, 7, 48, 10, -13, -11, 2, 4, -3, -63, -2, -58, 44, 3, -16, 54, -99, 3, -1, 7, -29, -40, -57, 29, 51, 46, -2
    0xef8fffc, 0x30070a23, 0x2f5f30a, 0xfec1fd04, 0xf0032cc6, 0xff039d36, 0xc7d8e307, 0xfe2e331d,
    // -23, -36, 13, -26, 29, -3, -8, 25, 37, -36, 11, -27, -16, 31, -48, 9, 18, 47, -12, -27, 4, -16, 21, -60, 17, 15, 11, 94, -53, -36, -35, 0
    0xe60ddce9, 0x19f8fd1d, 0xe50bdc25, 0x9d01ff0, 0xe5f42f12, 0xc415f004, 0x5e0b0f11, 0xdddccb,
    // 40, -91, -82, -35, -2, 36, -37, -24, 10, -13, 38, 85, 46, -6, -30, -52, -1, 43, 35, 19, 4, -58, 21, -35, 0, 51, 19, 3, -42, -29, -41, -9
    0xddaea528, 0xe8db24fe, 0x5526f30a, 0xcce2fa2e, 0x13232bff, 0xdd15c604, 0x3133300, 0xf7d7e3d6,
    // 11, -115, -3, -31, -101, 48, -52, 10, -41, -71, -36, 76, -66, -30, 14, -22, -23, 82, -18, 0, -7, -75, 30, -70, -34, 49, 101, -24, -17, -25, -104, 40
    0xe1fd8d0b, 0xacc309b, 0x4cdcb9d7, 0xea0ee2be, 0xee52e9, 0xba1eb5f9, 0xe86531de, 0x2898e7ef,
    // -47, 90, -71, -46, -3, 44, 83, 94, -76, -41, 16, -41, 24, -26, 46, 50, -22, 44, 12, -27, -22, -6, 18, -27, -31, -47, 86, 30, -19, -59, -25, 15
    0xd2b95ad1, 0x5e532cfd, 0xd710d7b4, 0x322ee618, 0xe50c2cea, 0xe512faea, 0x1e56d1e1, 0xfe7c5ed,
    // 4, 24, -4, -54, 3, -77, 58, 71, -37, 56, -18, -42, 14, 37, 22, 7, -29, 26, 32, -29, -15, 14, -35, -7, -27, 10, 30, -3, -3, 18, 1, 24
    0xcafc1804, 0x473ab303, 0xd6ee38db, 0x716250e, 0xe3201ae3, 0xf9dd0ef1, 0xfd1e0ae5, 0x180112fd,
    // 98, 78, 53, 35, 25, 40, -65, -16, 55, 54, -14, -27, 63, 46, 1, -77, 12, 24, -12, -1, 0, -52, 13, -23, -23, 35, 11, -20, -29, -12, -21, -6
    0x23354e62, 0xf0bf2819, 0xe5f23637, 0xb3012e3f, 0xfff4180c, 0xe90dcc00, 0xec0b23e9, 0xfaebf4e3,
    // -29, -42, 11, -26, 56, 19, 29, -39, -36, -17, -20, -53, 8, 23, -43, -30, 34, 52, 43, -41, 6, 15, 59, -57, 60, -3, -52, -25, -27, 57, 28, 34
    0xe60bd6e3, 0xd91d1338, 0xcbecefdc, 0xe2d51708, 0xd72b3422, 0xc73b0f06, 0xe7ccfd3c, 0x221c39e5,
    // 76, -27, -7, 32, -18, -30, 42, -10, 12, -87, -52, -22, 19, 5, 29, 60, -33, 16, 11, 11, 2, 8, 14, -2, 4, 2, 9, -13, -15, -23, -17, -5
    0x20f9e54c, 0xf62ae2ee, 0xeacca90c, 0x3c1d0513, 0xb0b10df, 0xfe0e0802, 0xf3090204, 0xfbefe9f1,
    // 14, -6, 39, -8, 4, -4, -14, -19, -52, 1, -24, 20, 20, -7, 2, 28, -44, 37, -71, -22, 10, -80, 30, 45, 5, 25, -33, -5, 4, 18, -11, -7
    0xf827fa0e, 0xedf2fc04, 0x14e801cc, 0x1c02f914, 0xeab925d4, 0x2d1eb00a, 0xfbdf1905, 0xf9f51204,
    // -41, -3, 2, -6, -25, -32, -13, -2, 65, -12, -12, 2, -29, 30, 14, 9, -12, 42, -67, -5, 14, -19, 41, -30, -33, 89, 50, 10, -26, -19, -43, 26
    0xfa02fdd7, 0xfef3e0e7, 0x2f4f441, 0x90e1ee3, 0xfbbd2af4, 0xe229ed0e, 0xa3259df, 0x1ad5ede6,
    // -14, 73, 60, 107, -17, 6, 12, 1, 31, -2, 17, 17, -35, 51, -23, 19, -22, 30, 10, -1, -26, -17, -10, -75, -15, 13, 27, -53, -43, 19, -81, 21
    0x6b3c49f2, 0x10c06ef, 0x1111fe1f, 0x13e933dd, 0xff0a1eea, 0xb5f6efe6, 0xcb1b0df1, 0x15af13d5,
    // -21, -19, -13, 6, 15, -1, -8, -2, 10, -16, 31, -46, -19, 40, 2, -27, -10, 29, 2, -34, -26, -128, 9, -43, -29, -6, 47, -3, -55, 35, -20, -1
    0x6f3edeb, 0xfef8ff0f, 0xd21ff00a, 0xe50228ed, 0xde021df6, 0xd50980e6, 0xfd2ffae3, 0xffec23c9,
    // 14, 8, -23, 30, -9, 2, 36, 11, -5, 21, -3, 16, 2, -8, -18, -27, 22, 3, -66, 3, -8, -18, 53, 51, 0, -30, 6, 27, -23, 103, 47, 10
    0x1ee9080e, 0xb2402f7, 0x10fd15fb, 0xe5eef802, 0x3be0316, 0x3335eef8, 0x1b06e200, 0xa2f67e9,
    // -27, -10, 4, -34, -37, -7, -34, -22, 26, -15, 15, -14, -7, 57, 24, 28, -16, -18, 70, -10, -22, 21, -46, -66, -5, 36, 22, -6, 17, -12, -38, 28
    0xde04f6e5, 0xeadef9db, 0xf20ff11a, 0x1c1839f9, 0xf646eef0, 0xbed215ea, 0xfa1624fb, 0x1cdaf411,
    // -1, 14, -59, -9, -20, 85, -28, -29, 39, -62, -16, 38, 23, 27, 15, -25, -46, 97, -58, -5, -3, -73, 51, -42, -14, 73, 51, -4, -61, -37, -35, -10
    0xf7c50eff, 0xe3e455ec, 0x26f0c227, 0xe70f1b17, 0xfbc661d2, 0xd633b7fd, 0xfc3349f2, 0xf6dddbc3,
    // 29, 10, -11, -16, -20, -4, -15, -10, 0, 11, 22, -16, -13, -16, -7, 7, 123, -53, -34, -28, -10, -44, 23, 33, -24, -53, 13, 19, -62, -42, -17, -28
    0xf0f50a1d, 0xf6f1fcec, 0xf0160b00, 0x7f9f0f3, 0xe4decb7b, 0x2117d4f6, 0x130dcbe8, 0xe4efd6c2,
    // -16, -8, 25, -26, 43, -8, -2, -1, 3, -18, -14, -14, 17, 8, -18, 18, 125, -3, 40, -13, 22, -93, -8, -72, 57, 20, -66, 35, 68, 35, -51, -19
    0xe619f8f0, 0xfffef82b, 0xf2f2ee03, 0x12ee0811, 0xf328fd7d, 0xb8f8a316, 0x23be1439, 0xedcd2344,
    // 27, -76, 10, -34, -64, 17, -16, 41, -20, -40, -41, 46, -18, -58, 12, -37, -30, 31, 9, 50, -19, -6, 7, -92, -20, -3, 22, -30, 4, 16, -84, 33
    0xde0ab41b, 0x29f011c0, 0x2ed7d8ec, 0xdb0cc6ee, 0x32091fe2, 0xa407faed, 0xe216fdec, 0x21ac1004,
    // 72, -53, 17, 25, -25, -41, -15, 31, 11, 95, 93, 10, 108, 33, -31, -11, 8, 63, 33, -9, -19, 7, 11, -27, -25, 12, 73, -4, -26, -38, -53, 24
    0x1911cb48, 0x1ff1d7e7, 0xa5d5f0b, 0xf5e1216c, 0xf7213f08, 0xe50b07ed, 0xfc490ce7, 0x18cbdae6,
    // 1, 6, -17, -11, 14, -14, 3, -2, 20, 3, 0, -10, 2, -16, -7, 4, 57, -5, -42, 21, 21, 7, -5, 27, 24, 41, -9, 76, 11, 5, -12, 8
    0xf5ef0601, 0xfe03f20e, 0xf6000314, 0x4f9f002, 0x15d6fb39, 0x1bfb0715, 0x4cf72918, 0x8f4050b,
    // 18, -9, 4, -31, -42, 7, -2, -62, -6, -1, 12, -11, -13, 5, 0, 5, 67, 24, 22, 8, 7, 39, -10, -42, -1, 17, 37, -33, -77, -16, 8, -7
    0xe104f712, 0xc2fe07d6, 0xf50cfffa, 0x50005f3, 0x8161843, 0xd6f62707, 0xdf2511ff, 0xf908f0b3,
    // 5, -61, 23, 39, -36, 77, 51, 72, 48, 87, 25, -79, 10, 3, 34, 78, -8, 50, 0, -49, 12, 10, 95, -28, -24, 45, 33, -14, 24, -37, -1, 12
    0x2717c305, 0x48334ddc, 0xb1195730, 0x4e22030a, 0xcf0032f8, 0xe45f0a0c, 0xf2212de8, 0xcffdb18,
    // 25, -2, -39, 7, -56, -6, -33, -28, 9, 0, 20, 1, -31, 18, 27, 2, -15, -49, -54, 27, 30, -117, -36, 122, -9, -47, -42, 5, 59, 2, 76, -74
    0x7d9fe19, 0xe4dffac8, 0x1140009, 0x21b12e1, 0x1bcacff1, 0x7adc8b1e, 0x5d6d1f7, 0xb64c023b,
    // 1, 10, 46, -33, 5, 5, -6, -59, -56, 21, 42, -86, 29, 20, 0, 7, 29, 37, -8, -6, 4, -23, 9, -43, -41, 76, -52, 9, -17, -39, 7, 26
    0xdf2e0a01, 0xc5fa0505, 0xaa2a15c8, 0x700141d, 0xfaf8251d, 0xd509e904, 0x9cc4cd7, 0x1a07d9ef,
    // -34, 47, 63, 19, 0, -44, 41, 1, 0, 25, -14, -83, -40, 26, 16, 27, -17, 19, -15, -14, -5, -56, 5, -15, -15, 32, 15, -5, -23, -12, -15, 6
    0x133f2fde, 0x129d400, 0xadf21900, 0x1b101ad8, 0xf2f113ef, 0xf105c8fb, 0xfb0f20f1, 0x6f1f4e9,
    // 35, 60, 10, 27, -5, -52, 5, -27, -98, -39, -12, 58, -31, 4, 13, 9, -11, 5, -24, -26, -7, -6, -16, -7, 3, -6, -21, 18, -7, -7, 27, 9
    0x1b0a3c23, 0xe505ccfb, 0x3af4d99e, 0x90d04e1, 0xe6e805f5, 0xf9f0faf9, 0x12ebfa03, 0x91bf9f9,
    // -55, -58, 26, 14, -7, 28, -5, 15, 86, 44, -13, -66, -37, 8, -10, 2, 16, 9, 0, -5, 4, -11, -42, -31, -24, -15, 43, 0, 12, -18, 8, 21
    0xe1ac6c9, 0xffb1cf9, 0xbef32c56, 0x2f608db, 0xfb000910, 0xe1d6f504, 0x2bf1e8, 0x1508ee0c,
    // 4, 13, 40, 21, 2, 12, -11, 21, -23, -15, 8, 14, -12, -5, -56, 27, 50, 78, 48, 25, 32, 3, -37, -64, 17, 68, 19, 77, -21, -52, 23, 29
    0x15280d04, 0x15f50c02, 0xe08f1e9, 0x1bc8fbf4, 0x19304e32, 0xc0db0320, 0x4d134411, 0x1d17cceb,
    // 45, -8, 14, 0, -39, 17, -31, -16, -2, -6, 16, -31, -45, -32, 9, -33, -49, -23, 20, -48, -11, 18, 42, -3, 58, -68, 7, 27, 58, -74, -43, -45
    0xef82d, 0xf0e111d9, 0xe110fafe, 0xdf09e0d3, 0xd014e9cf, 0xfd2a12f5, 0x1b07bc3a, 0xd3d5b63a,
    // -2, -2, -3, -15, 6, -10, -2, -5, -2, 7, 4, -29, 7, -4, 19, -16, -19, -2, 40, -12, -22, -21, 32, 25, -69, -33, -44, 102, -53, 35, -26, -8
    0xf1fdfefe, 0xfbfef606, 0xe30407fe, 0xf013fc07, 0xf428feed, 0x1920ebea, 0x66d4dfbb, 0xf8e623cb,
    // -57, 6, -78, 51, -25, -19, -70, 9, -23, 34, -76, -32, 46, -8, -43, 32, -20, 2, 29, 18, -24, 4, 10, 9, -7, -3, 16, -14, -26, -2, 0, 12
    0x33b206c7, 0x9baede7, 0xe0b422e9, 0x20d5f82e, 0x121d02ec, 0x90a04e8, 0xf210fdf9, 0xc00fee6,
    // -12, 9, 46, -16, -3, 0, -4, 36, 16, -15, -24, 30, 25, -7, 30, 16, 8, -4, -12, 17, -22, 50, -28, -65, -32, 58, -23, 1, 11, 8, -16, 6
    0xf02e09f4, 0x24fc00fd, 0x1ee8f110, 0x101ef919, 0x11f4fc08, 0xbfe432ea, 0x1e93ae0, 0x6f0080b,
    // -2, -1, 13, 1, 20, -13, 17, -22, -2, 5, -18, 6, 10, -11, -4, -3, 9, -36, 72, -40, -22, 11, -98, 33, 71, 2, 11, 6, -1, 47, -10, -4
    0x10dfffe, 0xea11f314, 0x6ee05fe, 0xfdfcf50a, 0xd848dc09, 0x219e0bea, 0x60b0247, 0xfcf62fff,
    // -16, -10, 17, 4, 49, -4, 0, 15, -10, -14, -12, -13, 20, -3, 3, 0, -64, 12, -9, 0, 32, -111, -22, -26, 34, -72, -26, -27, 23, 5, -41, 18
    0x411f6f0, 0xf00fc31, 0xf3f4f2f6, 0x3fd14, 0xf70cc0, 0xe6ea9120, 0xe5e6b822, 0x12d70517,
    // 21, 14, 3, -4, -4, -3, -25, -1, -8, 10, 2, 28, -7, 3, 14, 42, 107, -11, -10, 53, -17, 60, 9, -16, 26, -30, 97, 49, -72, -5, -39, 1
    0xfc030e15, 0xffe7fdfc, 0x1c020af8, 0x2a0e03f9, 0x35f6f56b, 0xf0093cef, 0x3161e21a, 0x1d9fbb8,
    // -3, 2, -16, 16, -23, -6, -2, -24, 21, 15, 0, 1, 12, -9, 32, -13, -68, -13, 14, 50, 10, 77, -52, -12, 3, -19, -53, -69, 42, -60, 58, -25
    0x10f002fd, 0xe8fefae9, 0x1000f15, 0xf320f70c, 0x320ef3bc, 0xf4cc4d0a, 0xbbcbed03, 0xe73ac42a,
    // 47, -16, -44, 56, -20, -2, 5, 15, -46, 33, 26, -59, -56, 13, 9, -95, -78, 19, -7, -28, -27, 46, -40, -63, 44, 33, 59, -45, -49, -25, 17, -40
    0x38d4f02f, 0xf05feec, 0xc51a21d2, 0xa1090dc8, 0xe4f913b2, 0xc1d82ee5, 0xd33b212c, 0xd811e7cf,
    // -6, -5, -68, 41, 11, -14, -1, -2, 16, 33, 14, 6, -9, 19, 58, -10, -23, -32, -17, 1, -17, -65, 24, 47, -6, -58, -4, -44, 102, -3, 4, -30
    0x29bcfbfa, 0xfefff20b, 0x60e2110, 0xf63a13f7, 0x1efe0e9, 0x2f18bfef, 0xd4fcc6fa, 0xe204fd66,
    // 11, -21, 48, -2, -12, -18, 13, 34, -56, 0, 16, -33, 21, -22, -6, -12, 15, 11, -12, 34, -2, -70, -41, 30, -38, -24, -44, 23, -15, 6, -8, 8
    0xfe30eb0b, 0x220deef4, 0xdf1000c8, 0xf4faea15, 0x22f40b0f, 0x1ed7bafe, 0x17d4e8da, 0x8f806f1,
    // -4, 5, -18, -11, 2, -16, 25, -11, 31, 10, 6, -10, 3, -9, -2, -15, 12, 41, -16, 63, 24, 3, -6, 17, -14, -30, -75, 48, -6, -38, -42, -31
    0xf5ee05fc, 0xf519f002, 0xf6060a1f, 0xf1fef703, 0x3ff0290c, 0x11fa0318, 0x30b5e2f2, 0xe1d6dafa,
    // -2, -10, -7, 4, -29, 1, 10, -12, -9, -1, 15, -9, 2, 18, 43, -22, 0, -29, 22, 13, -111, -22, 13, 16, -47, -49, 33, 48, -65, -22, -16, -23
    0x4f9f6fe, 0xf40a01e3, 0xf70ffff7, 0xea2b1202, 0xd16e300, 0x100dea91, 0x3021cfd1, 0xe9f0eabf,
    // -61, -4, 6, -12, 37, -14, 41, -25, -32, 23, -30, -18, -72, 15, 41, 53, -25, 15, -55, -39, -1, -52, -59, 36, 15, 30, 18, 25, -19, 35, 7, 13
    0xf406fcc3, 0xe729f225, 0xeee217e0, 0x35290fb8, 0xd9c90fe7, 0x24c5ccff, 0x19121e0f, 0xd0723ed,
    // -13, 22, 1, -1, 25, 27, 17, -2, 0, -24, -37, -2, 43, -12, -19, -37, 18, 15, -83, -90, 8, 20, -98, -103, -78, -78, -44, 2, 44, 6, 23, 63
    0xff0116f3, 0xfe111b19, 0xfedbe800, 0xdbedf42b, 0xa6ad0f12, 0x999e1408, 0x2d4b2b2, 0x3f17062c,
    // -54, -41, 17, 38, 9, 56, 58, -3, -49, -18, -29, 17, 31, 113, 10, -33, 12, -24, -19, 16, 4, -30, -27, 61, -38, -1, -2, 14, -17, -31, 20, 3
    0x2611d7ca, 0xfd3a3809, 0x11e3eecf, 0xdf0a711f, 0x10ede80c, 0x3de5e204, 0xefeffda, 0x314e1ef,
    // -4, -3, -1, -5, -26, -8, 28, -7, -19, 0, -2, -20, -22, 15, -33, -6, 26, -16, 38, 56, 15, -46, 64, 30, 45, 25, 36, 22, -78, -9, -7, -51
    0xfbfffdfc, 0xf91cf8e6, 0xecfe00ed, 0xfadf0fea, 0x3826f01a, 0x1e40d20f, 0x1624192d, 0xcdf9f7b2,
    // -75, -11, -65, 24, -10, -92, 44, 10, 34, -102, 76, -30, 4, -3, -35, 1, 2, 11, -4, -6, 8, -13, -14, -29, -23, -2, 28, -1, 12, -18, -6, 18
    0x18bff5b5, 0xa2ca4f6, 0xe24c9a22, 0x1ddfd04, 0xfafc0b02, 0xe3f2f308, 0xff1cfee9, 0x12faee0c,
    // 6, 10, -11, 2, 10, -10, 28, -53, 20, 13, -21, 6, 2, -25, 3, 9, -51, 64, 15, -40, 1, 79, 3, -33, 13, 11, 11, -55, 10, 34, 21, 20
    0x2f50a06, 0xcb1cf60a, 0x6eb0d14, 0x903e702, 0xd80f40cd, 0xdf034f01, 0xc90b0b0d, 0x1415220a,
    // -93, 16, 26, -11, -2, 31, -48, 5, -3, 72, 38, 40, -43, -8, -27, -67, -11, 9, 9, 8, -7, 5, -6, 7, 16, 14, 20, -35, -8, 30, -18, 21
    0xf51a10a3, 0x5d01ffe, 0x282648fd, 0xbde5f8d5, 0x80909f5, 0x7fa05f9, 0xdd140e10, 0x15ee1ef8,
    // 39, 33, -53, 6, -29, 81, -21, -13, -6, -31, 19, 9, -16, 2, -23, -7, 41, -16, 11, 4, -19, -47, -35, -50, -27, -75, 75, 25, 11, -23, 84, 11
    0x6cb2127, 0xf3eb51e3, 0x913e1fa, 0xf9e902f0, 0x40bf029, 0xceddd1ed, 0x194bb5e5, 0xb54e90b,
    // 6, -71, -36, -57, -22, 48, 76, 32, -68, 91, -32, 26, -58, -37, 26, 77, -31, 22, -14, -16, -7, -36, -21, -28, -8, -2, -41, 19, -22, -21, 0, 11
    0xc7dcb906, 0x204c30ea, 0x1ae05bbc, 0x4d1adbc6, 0xf0f216e1, 0xe4ebdcf9, 0x13d7fef8, 0xb00ebea,
    // 55, -1, 48, -56, 27, 8, 62, 17, 25, -10, 82, 26, -28, 2, 46, -30, -33, 11, -5, 13, 17, 24, -4, 34, 17, -20, 19, -9, -2, 8, -14, -3
    0xc830ff37, 0x113e081b, 0x1a52f619, 0xe22e02e4, 0xdfb0bdf, 0x22fc1811, 0xf713ec11, 0xfdf208fe,
    // 16, 15, -35, 8, -15, -9, -28, 4, 6, 10, 35, -16, -20, -16, 12, -11, -48, 0, 38, 43, 32, -81, -3, -41, 24, -75, -34, -9, 61, -62, 5, -35
    0x8dd0f10, 0x4e4f7f1, 0xf0230a06, 0xf50cf0ec, 0x2b2600d0, 0xd7fdaf20, 0xf7deb518, 0xdd05c23d,
    // 25, 43, -76, -32, 19, 86, -14, 38, 1, -36, 36, -7, 83, 4, 14, -16, -18, 25, 57, -23, -16, -16, -35, -10, -19, 28, 71, -19, 8, 14, -16, 17
    0xe0b42b19, 0x26f25613, 0xf924dc01, 0xf00e0453, 0xe93919ee, 0xf6ddf0f0, 0xed471ced, 0x11f00e08,
    // 24, 9, 20, -9, 37, 12, -20, 13, -77, 32, 60, 14, 69, -11, 24, 45, -32, -13, 25, -3, -22, -20, -47, -10, -21, 18, 40, 11, 14, 29, 3, 56
    0xf7140918, 0xdec0c25, 0xe3c20b3, 0x2d18f545, 0xfd19f3e0, 0xf6d1ecea, 0xb2812eb, 0x38031d0e,
    // -18, -38, -21, -53, 2, 1, 12, 1, -10, 3, 47, -70, 28, 24, -9, -13, 4, 44, -71, 3, 9, -36, 43, -88, -33, 34, 24, -33, -72, 11, -54, 5
    0xcbebdaee, 0x10c0102, 0xba2f03f6, 0xf3f7181c, 0x3b92c04, 0xa82bdc09, 0xdf1822df, 0x5ca0bb8,
    // -42, -27, 80, 73, -62, 43, -5, -22, 5, -59, -31, 35, -57, -11, -33, -48, 42, 57, -54, 31, 17, -1, 77, -55, -41, -55, -82, -12, -17, -32, -81, -8
    0x4950e5d6, 0xeafb2bc2, 0x23e1c505, 0xd0dff5c7, 0x1fca392a, 0xc94dff11, 0xf4aec9d7, 0xf8afe0ef,
};
static const uint embedded_decoder3_ResidualBlock_1_body_pw_expand_bias_dwords[32] = {
    // -0.2585, -0.3567, 0.02846, -0.1304, 0.2086, 0.01001, -0.0373, -0.04932, 0.05917, -0.0754, -0.5205, -0.0805, -0.186, -0.0445, -0.03955, 0.0953
    0xb5b5b423, 0xb02c2749, 0x212032ad, 0xaa50a8c6, 0xacd32b93, 0xad27b82a, 0xa9b2b1f4, 0x2e19a910,
    // -0.1761, -0.183, -0.01602, -0.03162, -0.3972, -0.04672, -0.2448, -0.168, -0.2605, 0.0447, -0.0796, -0.0932, 0.06207, -0.006348, -0.746, -0.1586
    0xb1dbb1a3, 0xa80ca41a, 0xa9fbb65b, 0xb160b3d5, 0x29b9b42b, 0xadf7ad18, 0x9e802bf2, 0xb113b9f8,
    // -0.08606, 0.008766, 0.01877, 0.01607, -0.1615, 0.1184, 0.03653, -0.04608, -0.185, -0.213, -0.06287, -0.3328, -0.00547, -0.1537, 0.01807, -0.01979
    0x207dad82, 0x241d24ce, 0x2f94b12b, 0xa9e628ad, 0xb2d1b1ec, 0xb553ac06, 0xb0eb9d9a, 0xa51124a0,
    // -0.0761, -0.178, 0.09705, -0.04556, -0.11395, -0.014435, -0.127, 0.05148, 0.05948, -0.07715, 0.0943, -0.1991, -0.0991, -0.0948, -0.0527, -0.39
    0xb1b2acdf, 0xa9d52e36, 0xa364af4b, 0x2a97b010, 0xacf02b9d, 0xb25f2e09, 0xae11ae58, 0xb63daabf,
};
static const uint embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 10, 17, -14, -20, -8, -32, 96, 21, 33, 56, -54, -31, -21, -56, 6, 78, -20, 55, 13, 23, -1, 19, -12, 31, 3, -21, -5, -1, 25, -96, 12, 25
    0xecf2110a, 0x1560e0f8, 0xe1ca3821, 0x4e06c8eb, 0x170d37ec, 0x1ff413ff, 0xfffbeb03, 0x190ca019,
    // 50, 29, 58, 4, 7, 12, -12, -5, 12, -30, 63, 20, -19, -39, 19, -12, 20, 26, -10, -9, -24, -31, -4, -93, 30, -63, 8, 10, 35, 18, 78, 17
    0x43a1d32, 0xfbf40c07, 0x143fe20c, 0xf413d9ed, 0xf7f61a14, 0xa3fce1e8, 0xa08c11e, 0x114e1223,
    // 14, 17, 10, 9, -13, 6, 68, 1, -28, -92, 0, 9, 32, 89, 11, 27, -28, 36, 10, 7, 18, -40, -14, 19, 16, -3, -3, 3, 12, -76, -51, 10
    0x90a110e, 0x14406f3, 0x900a4e4, 0x1b0b5920, 0x70a24e4, 0x13f2d812, 0x3fdfd10, 0xacdb40c,
    // -84, -98, -53, 13, 5, -35, -73, 10, 17, -9, -5, 5, 26, -45, 29, -34, -17, -4, 22, -8, 10, 96, 12, -35, -36, 78, 67, -44, -28, 31, -88, -11
    0xdcb9eac, 0xab7dd05, 0x5fbf711, 0xde1dd31a, 0xf816fcef, 0xdd0c600a, 0xd4434edc, 0xf5a81fe4,
    // 6, 3, -5, 44, 11, 5, -15, 10, -19, 88, 39, 66, 77, -70, 2, 81, 44, -61, -11, -30, -48, 8, 27, 3, 14, 37, -108, -30, 1, 16, 0, 13
    0x2cfb0306, 0xaf1050b, 0x422758ed, 0x5102ba4d, 0xe2f5c32c, 0x31b08d0, 0xe294250e, 0xd001001,
    // 66, 56, 77, -4, -28, -12, -22, 17, 12, 12, -17, 9, -11, 19, -31, -4, -6, -50, 31, -34, -3, -92, 14, -82, -54, -81, 21, -11, -17, -44, -13, 11
    0xfc4d3842, 0x11eaf4e4, 0x9ef0c0c, 0xfce113f5, 0xde1fcefa, 0xae0ea4fd, 0xf515afca, 0xbf3d4ef,
    // 27, -28, -30, -8, 16, -34, 89, 23, -9, -47, 12, 95, 40, -12, -12, -34, -13, 24, -7, -45, 76, -8, 19, 33, 15, 48, -109, -13, -11, -55, 4, 43
    0xf8e2e41b, 0x1759de10, 0x5f0cd1f7, 0xdef4f428, 0xd3f918f3, 0x2113f84c, 0xf393300f, 0x2b04c9f5,
    // -60, -34, -86, -3, -17, 3, 12, 49, 5, 27, 18, -22, -20, -39, 0, -27, -5, -11, 15, -33, 6, 13, 29, 42, -5, 9, -4, 59, 6, 39, 5, 29
    0xfdaadec4, 0x310c03ef, 0xea121b05, 0xe500d9ec, 0xdf0ff5fb, 0x2a1d0d06, 0x3bfc09fb, 0x1d052706,
    // 4, 46, 14, -20, 13, 14, 67, 7, -17, 23, -32, 36, 31, 0, -19, -49, 56, -73, 31, -14, -48, 14, 32, -27, 33, -22, -77, 17, 30, -74, -23, -34
    0xec0e2e04, 0x7430e0d, 0x24e017ef, 0xcfed001f, 0xf21fb738, 0xe5200ed0, 0x11b3ea21, 0xdee9b61e,
    // 16, 17, 50, 24, -18, -42, 56, -14, 5, -23, 17, 23, -29, -3, -63, 26, -57, 8, 15, -49, 59, 2, 3, 61, 27, -32, -77, -62, 4, -67, 49, 16
    0x18321110, 0xf238d6ee, 0x1711e905, 0x1ac1fde3, 0xcf0f08c7, 0x3d03023b, 0xc2b3e01b, 0x1031bd04,
    // 11, 28, 39, -18, -11, 15, -32, -31, -7, 30, 116, 31, 19, -35, -15, 20, -35, -65, -78, 32, -15, 19, -5, -6, 27, 88, -26, 16, 7, 40, -6, -38
    0xee271c0b, 0xe1e00ff5, 0x1f741ef9, 0x14f1dd13, 0x20b2bfdd, 0xfafb13f1, 0x10e6581b, 0xdafa2807,
    // 45, 46, 10, 18, 18, -17, -78, 4, -9, -6, -27, -7, -11, 33, -19, -45, 15, -24, -16, -30, 4, -46, 5, -24, 28, -33, 83, -22, 25, -42, -64, 13
    0x120a2e2d, 0x4b2ef12, 0xf9e5faf7, 0xd3ed21f5, 0xe2f0e80f, 0xe805d204, 0xea53df1c, 0xdc0d619,
    // 1, 2, -12, 27, 31, -5, -20, -7, -12, -9, -93, 36, 57, 24, -13, -14, -33, 37, 91, 29, 38, -21, 28, -3, 12, -90, -75, -2, -2, 9, -12, -5
    0x1bf40201, 0xf9ecfb1f, 0x24a3f7f4, 0xf2f31839, 0x1d5b25df, 0xfd1ceb26, 0xfeb5a60c, 0xfbf409fe,
    // -31, -35, 12, -28, -32, -36, -36, 28, 23, -16, 37, -13, -26, -12, 19, -28, 27, -36, 52, 9, 78, 18, -5, 18, -51, 34, 32, -34, -27, 32, 23, -5
    0xe40cdde1, 0x1cdcdce0, 0xf325f017, 0xe413f4e6, 0x934dc1b, 0x12fb124e, 0xde2022cd, 0xfb1720e5,
    // 12, 10, -2, 70, -29, -2, -6, 3, 4, 90, -41, 20, 37, -99, -13, -54, -39, 58, 52, -5, 17, -9, -36, -2, -28, -54, -46, -23, 15, 19, 2, -29
    0x46fe0a0c, 0x3fafee3, 0x14d75a04, 0xcaf39d25, 0xfb343ad9, 0xfedcf711, 0xe9d2cae4, 0xe302130f,
    // 77, 68, 55, -15, 42, 21, 20, -13, 12, 0, 3, 21, 7, -21, -9, -4, 17, -49, 27, 36, 51, -103, 2, 58, -33, -92, -18, -18, -35, 19, -53, 7
    0xf137444d, 0xf314152a, 0x1503000c, 0xfcf7eb07, 0x241bcf11, 0x3a029933, 0xeeeea4df, 0x7cb13dd,
    // 6, -21, 1, -45, 4, -18, 74, 1, -7, 37, 11, -20, -27, -40, -18, -78, 10, -15, -19, 0, 29, -35, -26, -26, -5, 21, 41, -26, -16, -45, 8, 9
    0xd301eb06, 0x14aee04, 0xec0b25f9, 0xb2eed8e5, 0xedf10a, 0xe6e6dd1d, 0xe62915fb, 0x908d3f0,
    // 71, 58, 6, 10, -10, 7, -68, 7, -53, 10, -29, -9, 21, -13, 9, 20, -5, 39, -47, 13, -21, -59, -4, 79, 28, -43, 81, 30, 10, 15, -85, 18
    0xa063a47, 0x7bc07f6, 0xf7e30acb, 0x1409f315, 0xdd127fb, 0x4ffcc5eb, 0x1e51d51c, 0x12ab0f0a,
    // 7, 21, 77, 20, -9, -8, 2, -100, 22, -10, 0, 17, 13, -3, 20, -12, -34, 44, -11, 103, -103, -11, -2, -48, -14, 1, -21, 49, -27, -1, 17, -51
    0x144d1507, 0x9c02f8f7, 0x1100f616, 0xf414fd0d, 0x67f52cde, 0xd0fef599, 0x31eb01f2, 0xcd11ffe5,
    // -26, -15, -4, 79, 38, -21, 0, 33, 4, 15, -108, -3, 17, 68, -41, 38, -13, -13, -11, -1, 0, 9, -22, 11, 4, -15, -3, 36, 0, -4, 85, -1
    0x4ffcf1e6, 0x2100eb26, 0xfd940f04, 0x26d74411, 0xfff5f3f3, 0xbea0900, 0x24fdf104, 0xff55fc00,
    // -7, -9, -26, 38, -1, 17, 0, 19, -7, -51, 100, 20, 72, 50, -20, 8, 16, -36, -97, 15, 7, -3, 60, -26, -1, 93, -44, -13, 12, -1, 12, 44
    0x26e6f7f9, 0x130011ff, 0x1464cdf9, 0x8ec3248, 0xf9fdc10, 0xe63cfd07, 0xf3d45dff, 0x2c0cff0c,
    // -23, -29, -25, -23, -18, 19, 33, -11, 22, -6, 25, 11, 38, -9, 22, 1, 10, -73, 37, 7, 76, 34, -13, -7, -84, 34, -28, -30, -73, -9, -49, -28
    0xe9e7e3e9, 0xf52113ee, 0xb19fa16, 0x116f726, 0x725b70a, 0xf9f3224c, 0xe2e422ac, 0xe4cff7b7,
    // -20, 9, 19, -29, -29, -9, -37, -35, -11, 8, 40, -24, -37, -54, -3, -17, -47, 20, -54, 35, -27, 29, 82, 39, 6, 41, 57, 21, -1, 26, -5, -30
    0xe31309ec, 0xdddbf7e3, 0xe82808f5, 0xeffdcadb, 0x23ca14d1, 0x27521de5, 0x15392906, 0xe2fb1aff,
    // 57, 49, 2, 28, 43, 1, 28, 40, 12, 17, 1, -9, -19, -4, 3, -16, 6, 21, 1, -40, -27, -33, -7, 5, -25, -38, -39, 2, -35, 34, 16, 8
    0x1c023139, 0x281c012b, 0xf701110c, 0xf003fced, 0xd8011506, 0x5f9dfe5, 0x2d9dae7, 0x81022dd,
    // 21, 39, -33, -26, -51, 40, -13, 25, 16, -68, -28, 27, 21, 57, -32, -9, 30, -47, 91, -5, -40, 63, -22, 17, 0, -46, -45, -22, 16, 43, -33, -40
    0xe6df2715, 0x19f328cd, 0x1be4bc10, 0xf7e03915, 0xfb5bd11e, 0x11ea3fd8, 0xead3d200, 0xd8df2b10,
    // -65, -54, -67, 29, 39, 3, -31, -3, 9, -3, 13, 10, -35, 20, -57, -9, 7, -1, -26, -36, -2, 58, -7, 10, 29, 48, 34, -10, 32, -77, 6, 30
    0x1dbdcabf, 0xfde10327, 0xa0dfd09, 0xf7c714dd, 0xdce6ff07, 0xaf93afe, 0xf622301d, 0x1e06b320,
    // 9, 4, 28, -31, -30, 16, 41, 9, 17, 12, -65, 23, 55, 16, 11, 45, -38, -48, 62, -20, 6, -11, 59, -39, -16, -39, -72, -16, 13, -53, -1, -86
    0xe11c0409, 0x92910e2, 0x17bf0c11, 0x2d0b1037, 0xec3ed0da, 0xd93bf506, 0xf0b8d9f0, 0xaaffcb0d,
    // -78, 6, -42, 18, 14, 29, 28, -41, -31, 9, -31, 1, 23, 5, 7, 0, 2, 21, 61, 34, 62, 39, 11, -51, -22, 38, -28, 8, -30, 11, -23, 10
    0x12d606b2, 0xd71c1d0e, 0x1e109e1, 0x70517, 0x223d1502, 0xcd0b273e, 0x8e426ea, 0xae90be2,
    // 38, -12, -4, -27, 20, -26, 14, -9, -33, 22, -31, -59, 14, -38, 5, 49, 8, -23, 108, -57, 19, -30, 52, -8, 4, -38, 90, 28, -41, -5, -5, 16
    0xe5fcf426, 0xf70ee614, 0xc5e116df, 0x3105da0e, 0xc76ce908, 0xf834e213, 0x1c5ada04, 0x10fbfbd7,
    // 3, -14, 18, 20, -2, -17, 40, 49, 13, 47, -25, -13, 11, 3, 8, 1, -13, 21, 46, -41, 49, -13, 9, -49, -16, -38, -43, 15, -28, -7, -22, 7
    0x1412f203, 0x3128effe, 0xf3e72f0d, 0x108030b, 0xd72e15f3, 0xcf09f331, 0xfd5daf0, 0x7eaf9e4,
    // -10, 1, -34, 5, 16, 19, -4, 17, 1, 24, -42, -68, 76, -19, -10, -88, -15, -59, 3, -16, 2, 39, 98, -26, -26, -30, 54, -20, 21, -13, 1, 13
    0x5de01f6, 0x11fc1310, 0xbcd61801, 0xa8f6ed4c, 0xf003c5f1, 0xe6622702, 0xec36e2e6, 0xd01f315,
    // -12, -25, 65, -20, -7, 19, -57, -13, 7, -8, 35, 12, 15, -24, 21, 18, 0, -21, 104, 16, 79, 7, -41, 84, -83, -28, 53, -14, -87, -19, 89, 6
    0xec41e7f4, 0xf3c713f9, 0xc23f807, 0x1215e80f, 0x1068eb00, 0x54d7074f, 0xf235e4ad, 0x659eda9,
    // 1, -42, 44, 8, -13, -39, 4, -56, 54, -3, -27, 7, 8, 14, -44, 19, -52, 25, 10, 127, -32, -37, 12, -124, -67, -12, 2, 12, -77, 10, 25, -64
    0x82cd601, 0xc804d9f3, 0x7e5fd36, 0x13d40e08, 0x7f0a19cc, 0x840cdbe0, 0xc02f4bd, 0xc0190ab3,
    // -2, -20, 0, 46, 16, 62, -4, 11, -9, 26, -44, -52, 31, 41, -8, 18, 49, 12, 9, 37, -25, 12, -65, -24, -9, 13, 11, 49, -16, 68, 74, 2
    0x2e00ecfe, 0xbfc3e10, 0xccd41af7, 0x12f8291f, 0x25090c31, 0xe8bf0ce7, 0x310b0df7, 0x24a44f0,
    // -26, 3, -21, -12, 3, -7, 0, 10, -26, 3, 0, 14, 25, -3, 23, -18, -25, -30, -17, -10, -82, -34, -15, 53, -48, 9, 5, -27, -17, 7, -7, 4
    0xf4eb03e6, 0xa00f903, 0xe0003e6, 0xee17fd19, 0xf6efe2e7, 0x35f1deae, 0xe50509d0, 0x4f907ef,
    // -19, -4, 5, 2, 14, 23, 8, 46, 50, 2, 8, -28, 10, -1, -48, -33, 53, -3, -5, -61, 21, 0, -39, 8, 18, 4, 9, -5, 17, 40, -30, -2
    0x205fced, 0x2e08170e, 0xe4080232, 0xdfd0ff0a, 0xc3fbfd35, 0x8d90015, 0xfb090412, 0xfee22811,
    // 47, 16, 37, 5, -9, 23, 7, -21, 38, -6, -44, -8, -21, 29, -41, 28, 8, 19, -11, 10, 78, 47, 36, 12, 13, -24, 28, 22, -19, 14, 45, -18
    0x525102f, 0xeb0717f7, 0xf8d4fa26, 0x1cd71deb, 0xaf51308, 0xc242f4e, 0x161ce80d, 0xee2d0eed,
    // 12, -7, 14, -17, -25, -61, 2, 7, -99, 39, -34, -16, 23, 21, 30, 13, 17, 2, 1, 2, 50, 0, -5, -13, -6, 9, 19, -33, -19, 2, 11, 75
    0xef0ef90c, 0x702c3e7, 0xf0de279d, 0xd1e1517, 0x2010211, 0xf3fb0032, 0xdf1309fa, 0x4b0b02ed,
    // 21, -95, 21, 3, -7, -7, -1, 14, 40, 4, -3, 7, -11, -17, 54, 15, -13, 84, 19, -41, 15, 29, 14, 84, 7, 0, -44, -51, -27, -28, -9, 40
    0x315a115, 0xefff9f9, 0x7fd0428, 0xf36eff5, 0xd71354f3, 0x540e1d0f, 0xcdd40007, 0x28f7e4e5,
    // -16, 16, -15, 11, 46, 48, -5, 45, 30, 54, -82, -77, 15, 15, -65, -31, -17, -5, 5, -46, 7, -19, -11, 0, 3, -18, -6, 6, 2, 5, -2, -41
    0xbf110f0, 0x2dfb302e, 0xb3ae361e, 0xe1bf0f0f, 0xd205fbef, 0xf5ed07, 0x6faee03, 0xd7fe0502,
    // -20, 35, -15, -6, 8, -9, 2, -19, -2, -10, 21, -3, -7, -7, 13, -2, -23, 12, -7, 4, 20, -20, -14, -28, -125, 4, -7, -37, 4, 2, -8, -14
    0xfaf123ec, 0xed02f708, 0xfd15f6fe, 0xfe0df9f9, 0x4f90ce9, 0xe4f2ec14, 0xdbf90483, 0xf2f80204,
    // 1, -6, -12, 3, -1, 0, 12, -9, 8, 16, -20, -3, -43, 2, 8, -16, 112, -1, 1, -21, -2, 0, -7, 8, -10, -4, -3, 31, 7, 3, 19, -24
    0x3f4fa01, 0xf70c00ff, 0xfdec1008, 0xf00802d5, 0xeb01ff70, 0x8f900fe, 0x1ffdfcf6, 0xe8130307,
    // -102, -67, -23, 35, 6, -36, 28, -11, -14, 6, 29, 7, -23, 8, -10, -3, 71, -53, 20, 13, -52, -54, -17, 12, 36, -5, -39, 10, -1, 16, 96, 23
    0x23e9bd9a, 0xf51cdc06, 0x71d06f2, 0xfdf608e9, 0xd14cb47, 0xcefcacc, 0xad9fb24, 0x176010ff,
    // 33, 10, 23, 13, -44, -30, 8, -14, 8, 112, -5, -43, -12, 33, 11, -6, -57, 42, -10, -32, -14, 14, -24, 12, -24, -13, -10, -82, 12, 20, 31, -83
    0xd170a21, 0xf208e2d4, 0xd5fb7008, 0xfa0b21f4, 0xe0f62ac7, 0xce80ef2, 0xaef6f3e8, 0xad1f140c,
    // 51, 20, 4, 8, 14, -53, -7, -9, -31, -31, 25, -27, -4, -4, -17, -14, -79, 38, -3, 67, -29, 20, 38, -56, -3, -13, 33, -1, 8, -15, 10, 6
    0x8041433, 0xf7f9cb0e, 0xe519e1e1, 0xf2effcfc, 0x43fd26b1, 0xc82614e3, 0xff21f3fd, 0x60af108,
    // -16, -2, 39, 35, -55, 19, -2, 14, 65, 29, -56, 62, -75, 11, 71, 6, -6, 20, 32, 12, -36, 0, 12, 21, -67, 1, 10, 8, 5, 64, -78, -7
    0x2327fef0, 0xefe13c9, 0x3ec81d41, 0x6470bb5, 0xc2014fa, 0x150c00dc, 0x80a01bd, 0xf9b24005,
    // -51, 72, -27, -7, -29, -30, 21, -1, 12, -3, -18, 22, 22, 11, 32, 6, -35, -63, 20, -26, -88, 5, -9, 34, 22, 3, 39, 48, -13, 5, 50, -20
    0xf9e548cd, 0xff15e2e3, 0x16eefd0c, 0x6200b16, 0xe614c1dd, 0x22f705a8, 0x30270316, 0xec3205f3,
    // -20, 4, 0, 15, 64, -49, -4, 31, 17, -16, 40, -41, 16, -32, 9, -23, 37, -4, 57, -13, 65, 15, 17, -10, -18, 19, -1, 42, 4, 40, 18, -24
    0xf0004ec, 0x1ffccf40, 0xd728f011, 0xe909e010, 0xf339fc25, 0xf6110f41, 0x2aff13ee, 0xe8122804,
    // -38, -90, -8, -18, 6, 3, 18, 40, -10, -7, -6, 21, -22, -10, -53, -1, -17, -49, -31, -24, 39, 61, -30, -40, -22, -5, -26, -47, 0, 43, -39, 46
    0xeef8a6da, 0x28120306, 0x15faf9f6, 0xffcbf6ea, 0xe8e1cfef, 0xd8e23d27, 0xd1e6fbea, 0x2ed92b00,
    // -39, 0, -20, -23, -27, 103, 6, 13, -70, -31, -21, 5, -10, -7, -27, 26, -1, -21, 19, 14, -14, -5, -79, 9, -21, -12, -3, 10, 7, -5, 41, 31
    0xe9ec00d9, 0xd0667e5, 0x5ebe1ba, 0x1ae5f9f6, 0xe13ebff, 0x9b1fbf2, 0xafdf4eb, 0x1f29fb07,
    // 73, 14, -48, -43, -7, 36, -33, -24, -1, -16, -51, 12, 0, -28, -45, -28, -16, -16, -23, -4, -20, -53, 26, -36, -6, 19, -15, -38, 18, -21, -123, -33
    0xd5d00e49, 0xe8df24f9, 0xccdf0ff, 0xe4d3e400, 0xfce9f0f0, 0xdc1acbec, 0xdaf113fa, 0xdf85eb12,
    // 7, 1, 3, -19, -35, -1, 5, -37, 22, 57, 33, -27, 11, 13, 25, 20, -6, 4, 13, 11, -18, -15, -27, 2, -10, -28, 9, -21, 36, 26, 16, 58
    0xed030107, 0xdb05ffdd, 0xe5213916, 0x14190d0b, 0xb0d04fa, 0x2e5f1ee, 0xeb09e4f6, 0x3a101a24,
    // -15, -50, 12, 16, 3, -27, 16, -41, -3, -34, -20, 19, 14, -19, 31, 8, -60, -6, 6, 0, -36, -67, 6, -11, 11, -17, 3, 0, -29, -17, -28, 20
    0x100ccef1, 0xd710e503, 0x13ecdefd, 0x81fed0e, 0x6fac4, 0xf506bddc, 0x3ef0b, 0x14e4efe3,
    // 1, -41, -13, 24, 1, -1, -5, 18, -31, 56, -66, 2, -15, 26, 8, -1, -49, -12, 34, -19, -53, -11, 7, -19, -42, -17, 7, 18, -33, 28, -7, 51
    0x18f3d701, 0x12fbff01, 0x2be38e1, 0xff081af1, 0xed22f4cf, 0xed07f5cb, 0x1207efd6, 0x33f91cdf,
    // -15, -48, -10, 2, 61, 16, -9, 35, -50, 24, 12, 18, 14, 0, -2, 0, 22, -46, -7, -94, 65, 12, -11, 75, 14, -2, -6, -77, 39, 7, -13, 67
    0x2f6d0f1, 0x23f7103d, 0x120c18ce, 0xfe000e, 0xa2f9d216, 0x4bf50c41, 0xb3fafe0e, 0x43f30727,
    // 2, 2, 12, -8, -7, -33, -6, -38, 2, 100, -68, -13, 5, 13, 2, 7, 44, -11, -14, -28, 7, -6, 16, -13, 2, -1, -6, -57, 0, 27, -77, 11
    0xf80c0202, 0xdafadff9, 0xf3bc6402, 0x7020d05, 0xe4f2f52c, 0xf310fa07, 0xc7faff02, 0xbb31b00,
    // 15, 69, -37, 30, 2, 50, -1, 49, -95, -12, -15, -19, 7, 5, -38, 12, 56, 14, 20, -27, 69, 36, 24, 24, -49, -27, 24, -56, 76, -1, -23, 82
    0x1edb450f, 0x31ff3202, 0xedf1f4a1, 0xcda0507, 0xe5140e38, 0x18182445, 0xc818e5cf, 0x52e9ff4c,
    // 22, -15, 14, -51, -24, 48, 4, -9, 11, -29, 73, -30, 10, -102, 22, -15, 21, 17, -3, 7, 79, -6, -55, 4, 1, -9, -3, -59, -14, -58, 52, -1
    0xcd0ef116, 0xf70430e8, 0xe249e30b, 0xf1169a0a, 0x7fd1115, 0x4c9fa4f, 0xc5fdf701, 0xff34c6f2,
    // 36, -40, 8, 24, 93, -71, -1, -33, 6, 1, 39, 23, -47, -25, -51, -15, 3, 90, -27, 20, -42, 17, 2, 0, -7, 51, -1, 15, -47, 21, 30, 26
    0x1808d824, 0xdfffb95d, 0x17270106, 0xf1cde7d1, 0x14e55a03, 0x211d6, 0xfff33f9, 0x1a1e15d1,
    // -6, 12, -27, 28, 74, -53, -10, 42, -23, -59, -21, 38, 16, -19, 42, 76, 41, 6, -56, 18, -60, -49, -38, 29, -28, -2, -13, 30, -4, 38, -25, -18
    0x1ce50cfa, 0x2af6cb4a, 0x26ebc5e9, 0x4c2aed10, 0x12c80629, 0x1ddacfc4, 0x1ef3fee4, 0xeee726fc,
    // -42, -8, -48, 28, 37, -11, 44, -18, 24, 22, 4, -18, 26, 12, -12, -13, -11, -46, -43, 5, -26, 42, -39, 26, 31, 29, 44, 45, 22, -31, -27, -17
    0x1cd0f8d6, 0xee2cf525, 0xee041618, 0xf3f40c1a, 0x5d5d2f5, 0x1ad92ae6, 0x2d2c1d1f, 0xefe5e116,
    // 29, -12, -13, -5, -3, 19, -1, -12, 0, 12, 13, -27, -96, 36, 23, 70, -25, -26, 0, -19, -5, 15, -42, 0, -55, 22, -5, 31, -25, 53, 10, -45
    0xfbf3f41d, 0xf4ff13fd, 0xe50d0c00, 0x461724a0, 0xed00e6e7, 0xd60ffb, 0x1ffb16c9, 0xd30a35e7,
    // 55, -70, 8, 8, 17, 12, 2, -30, -1, 0, 2, -11, 1, -11, -59, 13, 44, 21, -16, -58, 49, 71, 19, 4, 13, 3, 5, -30, 42, 0, -17, 2
    0x808ba37, 0xe2020c11, 0xf50200ff, 0xdc5f501, 0xc6f0152c, 0x4134731, 0xe205030d, 0x2ef002a,
    // 29, -18, -6, -46, -21, -28, -4, 66, -2, 73, 20, 6, -16, 8, -7, 34, -4, 2, 18, 114, 8, -18, -22, 3, -6, -10, 10, -25, -7, -8, -37, 21
    0xd2faee1d, 0x42fce4eb, 0x61449fe, 0x22f908f0, 0x721202fc, 0x3eaee08, 0xe70af6fa, 0x15dbf8f9,
};
static const uint embedded_decoder3_ResidualBlock_1_body_pw_contract_bias_dwords[16] = {
    // -7.504e-05, -0.0008307, -0.0002352, -0.0005765, 0.000641, 8.45e-05, -1.943e-05, 0.0003045, -0.001098, -0.000638, 0.0006456, -0.0004888, 0.0001667, 0.0002887, -0.001239, 0.0004833
    0x92ce84eb, 0x90b98bb5, 0x58a1140, 0xcfd8146, 0x913a947f, 0x9001114a, 0xcbb0976, 0xfeb9513,
    // 0.00164, -0.0001733, 0.0004497, 0.0005593, -0.0009747, -0.0004501, -0.0008187, -0.000652, -0.000609, -0.000684, -0.000866, 0.0003192, 0.0003111, -0.000638, 0.0005646, -0.000423
    0x89ae16b8, 0x10950f5e, 0x8f6093fc, 0x915792b5, 0x919a90fd, 0xd3b9318, 0x913a0d19, 0x8eee10a0,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass10(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped = {
        uint3(960, 540, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 32), // threadGroupSliceSize
        uint3(960, 540, 32), // storageSize
        uint3(32, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        66355200, // threadGroupStorageByteOffset
        storage_FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped };
    
    const ConstantBufferStorage<576> storage_embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0053483592346310616, storage_embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = { embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004434272181242704, storage_embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_decoder3_ResidualBlock_1_body_pw_expand_bias = { embedded_decoder3_ResidualBlock_1_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_decoder3_ResidualBlock_1_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_1_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0044114249758422375, storage_embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder3_ResidualBlock_1_body_pw_contract_bias = { embedded_decoder3_ResidualBlock_1_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder3_ResidualBlock_1_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_1_body_pw_contract_bias };
    
    // /decoder3/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_20 = uint3(960, 540, 32);
    const int3 groupStart_slice_20 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_20 = uint3(64, 1, 32);
    const uint3 storageSize_slice_20 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_20 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_20 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_20 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_20 = dot(groupStart_slice_20, tensorByteStrides_slice_20);
    const RWBufferStorage storage_slice_20 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_20 = { logicalSize_slice_20, groupStart_slice_20, groupSize_slice_20, storageSize_slice_20, tensorByteStrides_slice_20, paddingBegin_slice_20, paddingEnd_slice_20, threadGroupByteOffsetInTensor_slice_20 + 33177600, storage_slice_20 };
    // Fusedquantized_/decoder3/ResidualBlock_1/residual_func/Concat_quantized_/decoder3/ResidualBlock_1/body/spatial_mixing/partial_conv/Conv_quantized_/decoder3/ResidualBlock_1/body/spatial_mixing/Concat_quantized_/decoder3/ResidualBlock_1/body/pw_expand/Conv_/decoder3/ResidualBlock_1/body/pw_expand_act/Relu_quantized_/decoder3/ResidualBlock_1/body/pw_contract/Conv_/decoder3/ResidualBlock_1/Add (32, 540, 960), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,) -> (32, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<32, 1>(0.017770705744624138, 0.03233850747346878, 0.026503240689635277, 0.02035362459719181, 0.028417395427823067, FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped, embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias, embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_1_body_pw_expand_bias, embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_1_body_pw_contract_bias, slice_20, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_10
#ifdef MLSR_PASS_10_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass10_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /decoder3/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_21 = uint3(960, 540, 32);
    const int3 groupStart_slice_21 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_21 = uint3(32, 1, 32);
    const uint3 storageSize_slice_21 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_21 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_21 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_21 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_21 = dot(groupStart_slice_21, tensorByteStrides_slice_21);
    const RWBufferStorage storage_slice_21 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_21 = { logicalSize_slice_21, groupStart_slice_21, groupSize_slice_21, storageSize_slice_21, tensorByteStrides_slice_21, paddingBegin_slice_21, paddingEnd_slice_21, threadGroupByteOffsetInTensor_slice_21 + 33177600, storage_slice_21 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_21, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_10_POST


#ifdef MLSR_PASS_11
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FNB_CT2D_ADD.hlsli"

static const uint embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 0, -2, 1, 14, -2, -26, 7, -6, -6, -20, -3, 13, -14, 4, 32, -11, -20, -16, 19, 8, 27, 13, -1, -26, -29, -53, -25, -24, -5, 8, 28, 6
    0xe01fe00, 0xfa07e6fe, 0xdfdecfa, 0xf52004f2, 0x813f0ec, 0xe6ff0d1b, 0xe8e7cbe3, 0x61c08fb,
    // 11, -8, 17, 11, -9, -6, 22, -4, 1, -12, -3, -5, -7, 1, 7, 8, 5, 28, 11, 12, 42, 17, 24, -3, 14, 19, 8, -1, -10, -25, -9, -22
    0xb11f80b, 0xfc16faf7, 0xfbfdf401, 0x80701f9, 0xc0b1c05, 0xfd18112a, 0xff08130e, 0xeaf7e7f6,
    // -17, -4, -16, -77, 9, 83, 47, -10, 33, -37, -3, -117, -28, -18, 4, -26, 0, 22, -5, -32, -12, 27, -10, 16, 17, 23, -21, 20, 5, -44, 4, -7
    0xb3f0fcef, 0xf62f5309, 0x8bfddb21, 0xe604eee4, 0xe0fb1600, 0x10f61bf4, 0x14eb1711, 0xf904d405,
    // -6, -1, 14, -2, -3, -23, -6, -7, -3, 22, 0, 15, -8, 5, -8, 14, 14, -23, 36, 11, 0, -46, -8, -31, -8, 22, -2, 11, 5, -6, -3, 40
    0xfe0efffa, 0xf9fae9fd, 0xf0016fd, 0xef805f8, 0xb24e90e, 0xe1f8d200, 0xbfe16f8, 0x28fdfa05,
    // 1, -4, 23, -1, 8, -24, -1, -13, 6, 4, -1, -4, -1, -4, -15, 19, -14, -5, -21, 17, -9, -14, -20, 26, -3, -45, -12, -7, 2, -24, 2, 11
    0xff17fc01, 0xf3ffe808, 0xfcff0406, 0x13f1fcff, 0x11ebfbf2, 0x1aecf2f7, 0xf9f4d3fd, 0xb02e802,
    // 10, -27, 26, -7, -18, 16, 34, -55, -3, -4, 28, 40, -10, 26, 37, 32, -15, -1, -10, -23, 4, -13, -54, 15, 8, 44, 5, 41, 12, -30, -15, -2
    0xf91ae50a, 0xc92210ee, 0x281cfcfd, 0x20251af6, 0xe9f6fff1, 0xfcaf304, 0x29052c08, 0xfef1e20c,
    // 19, -7, -9, 5, 1, 51, 50, 0, 4, 39, 22, 38, -31, 8, 29, -1, 0, -5, 22, -3, 12, -44, -52, 39, 25, 2, 46, -69, 53, -29, 3, -43
    0x5f7f913, 0x323301, 0x26162704, 0xff1d08e1, 0xfd16fb00, 0x27ccd40c, 0xbb2e0219, 0xd503e335,
    // -4, 0, 36, 46, 17, -33, 13, -15, -21, -1, -34, 8, -29, 11, -18, -15, 3, -2, 3, -3, -3, -6, -8, 13, 3, 10, 0, 29, 15, 2, 10, 13
    0x2e2400fc, 0xf10ddf11, 0x8deffeb, 0xf1ee0be3, 0xfd03fe03, 0xdf8fafd, 0x1d000a03, 0xd0a020f,
    // -23, 9, 5, 10, 17, 26, -12, 12, 21, -30, 8, -10, -12, -38, 1, -7, 15, 11, 0, 14, -14, 16, -9, -7, 0, -20, 20, 8, -5, 11, 9, -5
    0xa0509e9, 0xcf41a11, 0xf608e215, 0xf901daf4, 0xe000b0f, 0xf9f710f2, 0x814ec00, 0xfb090bfb,
    // 9, -21, -16, -2, 1, -16, 16, -6, -19, -8, -2, 18, -11, 11, 0, -16, 12, 15, 21, -29, 10, -34, 14, -18, -22, -28, 6, -20, 3, 20, 29, -10
    0xfef0eb09, 0xfa10f001, 0x12fef8ed, 0xf0000bf5, 0xe3150f0c, 0xee0ede0a, 0xec06e4ea, 0xf61d1403,
    // -3, 15, -11, -7, 8, 16, 19, -14, -5, -7, 0, 2, -13, 19, -5, -18, 6, 12, -37, -23, 28, -19, -1, -5, 34, -34, 21, 21, -28, -11, 18, -11
    0xf9f50ffd, 0xf2131008, 0x200f9fb, 0xeefb13f3, 0xe9db0c06, 0xfbffed1c, 0x1515de22, 0xf512f5e4,
    // 52, -8, -53, -71, 5, 13, -26, -1, -43, 24, 36, 20, 32, 69, -85, -1, -3, 20, 9, 0, 3, 25, 41, 6, -4, -22, 9, -13, -6, -4, -35, -16
    0xb9cbf834, 0xffe60d05, 0x142418d5, 0xffab4520, 0x914fd, 0x6291903, 0xf309eafc, 0xf0ddfcfa,
    // -36, 13, -25, -8, 3, -12, 1, 9, 10, -8, 3, 21, -18, 5, -16, -17, -25, -8, -16, -5, 28, 40, -3, -21, 25, -67, 52, -33, -2, -43, -16, -11
    0xf8e70ddc, 0x901f403, 0x1503f80a, 0xeff005ee, 0xfbf0f8e7, 0xebfd281c, 0xdf34bd19, 0xf5f0d5fe,
    // 1, 24, -5, 18, -2, 9, 18, -8, 7, -14, 8, 6, -10, -11, -19, 22, -12, -1, -4, -2, -5, -12, -40, 4, -17, -27, 4, -8, -3, -10, 17, -14
    0x12fb1801, 0xf81209fe, 0x608f207, 0x16edf5f6, 0xfefcfff4, 0x4d8f4fb, 0xf804e5ef, 0xf211f6fd,
    // -20, -1, -33, 18, -1, 22, -42, 6, -12, 35, 5, 10, -28, -23, -40, -10, -1, -6, 4, 15, 10, -6, 26, -13, 2, -26, 11, -5, -3, 17, 9, 8
    0x12dfffec, 0x6d616ff, 0xa0523f4, 0xf6d8e9e4, 0xf04faff, 0xf31afa0a, 0xfb0be602, 0x80911fd,
    // 15, -23, -9, 18, 16, -11, 27, 9, -7, 38, 41, -34, 9, 3, -20, -38, 2, 4, -43, 9, 2, 1, 20, 51, 35, 20, 32, -9, 21, -54, -20, -44
    0x12f7e90f, 0x91bf510, 0xde2926f9, 0xdaec0309, 0x9d50402, 0x33140102, 0xf7201423, 0xd4ecca15,
    // -8, -10, -49, -18, -42, -10, -2, 32, 5, -11, 68, 18, 39, -35, 24, -4, -22, -4, -21, 9, 7, 0, -4, 26, 1, -16, -10, 6, 7, 19, -7, 5
    0xeecff6f8, 0x20fef6d6, 0x1244f505, 0xfc18dd27, 0x9ebfcea, 0x1afc0007, 0x6f6f001, 0x5f91307,
    // -11, 23, -29, -5, 1, 3, 5, 23, 23, -18, -32, -8, 15, 20, 15, -19, -15, 11, -3, -4, -4, -12, -5, -3, 0, 14, -27, 21, -6, 16, -35, -23
    0xfbe317f5, 0x17050301, 0xf8e0ee17, 0xed0f140f, 0xfcfd0bf1, 0xfdfbf4fc, 0x15e50e00, 0xe9dd10fa,
    // -14, -5, -18, -15, 3, 25, 10, 29, 10, -1, -17, 30, -29, 20, -3, -21, 22, 6, 34, -18, 8, -11, 22, 28, -4, -6, 6, 1, 18, 22, 27, -14
    0xf1eefbf2, 0x1d0a1903, 0x1eefff0a, 0xebfd14e3, 0xee220616, 0x1c16f508, 0x106fafc, 0xf21b1612,
    // 34, -18, 8, 8, 0, 7, 14, -10, 6, 14, -2, -10, -5, -2, -2, 28, 22, -6, -23, -12, 8, -20, -15, -15, 50, -44, -14, -15, -8, -31, 26, -9
    0x808ee22, 0xf60e0700, 0xf6fe0e06, 0x1cfefefb, 0xf4e9fa16, 0xf1f1ec08, 0xf1f2d432, 0xf71ae1f8,
    // -7, 26, -1, 1, -1, 63, -13, 83, -58, 18, -57, -25, -26, -39, 10, -33, -31, -33, 47, 7, -7, -15, 11, 16, 10, -24, 32, 9, 26, -14, -11, -15
    0x1ff1af9, 0x53f33fff, 0xe7c712c6, 0xdf0ad9e6, 0x72fdfe1, 0x100bf1f9, 0x920e80a, 0xf1f5f21a,
    // 21, -22, 9, 0, -7, -3, -3, 3, -11, 17, 9, 4, -6, -6, -13, 17, -7, -15, 18, 8, 7, 12, -2, 0, 11, -10, 34, 27, -14, -2, -6, 38
    0x9ea15, 0x3fdfdf9, 0x40911f5, 0x11f3fafa, 0x812f1f9, 0xfe0c07, 0x1b22f60b, 0x26fafef2,
    // 2, 17, 1, -26, 6, 20, 14, 22, 11, 21, -43, 1, -16, 15, 15, -28, -1, 23, 8, -18, 16, 16, -3, 14, 11, 14, 19, 12, -19, 13, -2, -19
    0xe6011102, 0x160e1406, 0x1d5150b, 0xe40f0ff0, 0xee0817ff, 0xefd1010, 0xc130e0b, 0xedfe0ded,
    // 1, -13, 3, 5, -2, -19, -19, 20, -7, 8, -19, -11, 18, -46, -11, -25, 30, -14, 16, 11, -14, -29, 15, 2, -11, 4, -2, 1, 6, -8, 2, 10
    0x503f301, 0x14ededfe, 0xf5ed08f9, 0xe7f5d212, 0xb10f21e, 0x20fe3f2, 0x1fe04f5, 0xa02f806,
    // -33, -8, -8, -18, 10, 5, -29, 17, -27, -14, -30, 36, 6, 24, 9, 43, -29, -16, 9, -79, 12, 51, 20, 27, 52, -12, -4, 11, -24, 46, -26, -8
    0xeef8f8df, 0x11e3050a, 0x24e2f2e5, 0x2b091806, 0xb109f0e3, 0x1b14330c, 0xbfcf434, 0xf8e62ee8,
    // 6, 49, 36, 26, 2, 1, 9, 50, -26, -53, 14, -15, -12, 0, 0, 8, 29, -6, -3, 24, -1, 1, -4, 5, 0, -24, 3, -20, -7, -43, -3, 9
    0x1a243106, 0x32090102, 0xf10ecbe6, 0x80000f4, 0x18fdfa1d, 0x5fc01ff, 0xec03e800, 0x9fdd5f9,
    // 14, -1, 17, 3, 15, 25, -44, 3, 0, -53, 20, -19, 16, -27, -9, -11, -6, 9, -5, 7, 8, 18, -5, 8, 12, 9, -4, 33, -6, 16, 9, -28
    0x311ff0e, 0x3d4190f, 0xed14cb00, 0xf5f7e510, 0x7fb09fa, 0x8fb1208, 0x21fc090c, 0xe40910fa,
    // -13, 12, 0, 13, -4, 19, 6, 10, 28, -2, -13, 3, 6, -24, -16, 36, -11, -18, -26, 20, 16, -18, -9, 29, 22, 7, 14, 39, 17, 4, -37, 37
    0xd000cf3, 0xa0613fc, 0x3f3fe1c, 0x24f0e806, 0x14e6eef5, 0x1df7ee10, 0x270e0716, 0x25db0411,
    // -20, -6, -17, 7, 14, -26, -22, 24, 4, -9, 18, 20, -3, -3, -18, -11, 15, 35, 15, -4, -36, 25, 14, 25, 39, -9, -7, 5, 17, 0, -25, 19
    0x7effaec, 0x18eae60e, 0x1412f704, 0xf5eefdfd, 0xfc0f230f, 0x190e19dc, 0x5f9f727, 0x13e70011,
    // -51, 27, 0, -25, 8, 6, 4, -8, -17, -36, -14, -6, -60, 3, 38, 46, -3, -32, -56, -10, 4, -29, -43, 39, -18, 10, 29, 36, 12, 6, 5, -40
    0xe7001bcd, 0xf8040608, 0xfaf2dcef, 0x2e2603c4, 0xf6c8e0fd, 0x27d5e304, 0x241d0aee, 0xd805060c,
    // 15, 18, 32, -20, -30, 26, 12, -15, 2, -6, -4, 13, 27, 15, 3, 2, 16, 26, 21, -29, -30, 14, -3, 11, -33, -5, -12, 21, 14, 29, 30, -20
    0xec20120f, 0xf10c1ae2, 0xdfcfa02, 0x2030f1b, 0xe3151a10, 0xbfd0ee2, 0x15f4fbdf, 0xec1e1d0e,
    // 3, -10, -4, -18, 9, 4, -20, 23, -37, -26, 30, 8, -4, 15, 22, -24, -4, 3, -12, 8, -15, 0, 9, 7, 3, -41, -18, -17, 12, -10, 22, 5
    0xeefcf603, 0x17ec0409, 0x81ee6db, 0xe8160ffc, 0x8f403fc, 0x70900f1, 0xefeed703, 0x516f60c,
    // -14, 2, -11, 0, -2, 26, 23, 3, 5, -16, -13, 6, -13, 6, 7, 8, -7, -5, -3, -2, 1, -5, 7, 7, 6, -4, -12, 7, 10, 0, -7, -9
    0xf502f2, 0x3171afe, 0x6f3f005, 0x80706f3, 0xfefdfbf9, 0x707fb01, 0x7f4fc06, 0xf7f9000a,
    // 17, 14, 20, 9, 2, 6, 26, -22, 5, 25, 11, -42, -16, -9, -19, -26, -30, 127, 17, -23, 30, -29, -128, 72, -6, -5, -12, 28, -20, 32, -26, 31
    0x9140e11, 0xea1a0602, 0xd60b1905, 0xe6edf7f0, 0xe9117fe2, 0x4880e31e, 0x1cf4fbfa, 0x1fe620ec,
    // 10, 23, 26, -4, -5, -9, 25, 4, 1, -26, -4, -17, -29, 3, 8, 5, -1, 3, -8, -18, 24, -3, 8, -9, 5, 24, -2, -3, 11, 13, 18, 17
    0xfc1a170a, 0x419f7fb, 0xeffce601, 0x50803e3, 0xeef803ff, 0xf708fd18, 0xfdfe1805, 0x11120d0b,
    // 49, 12, 1, -9, -6, -20, 16, -6, -21, 18, -35, -26, 2, -22, 3, -12, 12, 3, 6, 8, 2, -13, 1, -3, -16, -5, 8, 5, -18, -7, -5, 7
    0xf7010c31, 0xfa10ecfa, 0xe6dd12eb, 0xf403ea02, 0x806030c, 0xfd01f302, 0x508fbf0, 0x7fbf9ee,
    // -8, 6, 14, -20, 22, -13, -1, 7, -24, -22, -2, 12, -19, 14, 31, -47, 24, 21, 24, -12, 1, 11, -20, 8, -18, 1, 8, -8, -26, -3, 11, -27
    0xec0e06f8, 0x7fff316, 0xcfeeae8, 0xd11f0eed, 0xf4181518, 0x8ec0b01, 0xf80801ee, 0xe50bfde6,
    // 42, -3, 34, 1, 5, 21, 24, -9, -3, -16, -1, -18, -10, -12, 17, 9, -11, -35, -11, 3, 34, -1, 11, 24, -49, 30, 40, 41, -32, 15, 17, -24
    0x122fd2a, 0xf7181505, 0xeefff0fd, 0x911f4f6, 0x3f5ddf5, 0x180bff22, 0x29281ecf, 0xe8110fe0,
    // -16, -22, 36, 26, 5, -7, -73, 18, -42, 8, -32, -22, -45, 14, 8, 67, 44, 28, -17, -16, -3, 28, 1, -13, 15, 53, -20, 4, -20, -42, 13, 18
    0x1a24eaf0, 0x12b7f905, 0xeae008d6, 0x43080ed3, 0xf0ef1c2c, 0xf3011cfd, 0x4ec350f, 0x120dd6ec,
    // -8, -25, -17, 22, 27, -20, -16, 28, 7, -14, 2, 5, -31, -33, -9, 0, -32, 12, -17, 9, 24, 14, 18, 37, 49, 5, -16, 13, -5, -15, -3, 28
    0x16efe7f8, 0x1cf0ec1b, 0x502f207, 0xf7dfe1, 0x9ef0ce0, 0x25120e18, 0xdf00531, 0x1cfdf1fb,
    // -28, 20, 5, 4, -2, 34, 23, 8, 38, -17, -7, -3, -3, -6, -28, 0, -18, 7, 2, 13, 3, -3, 0, -3, 3, -7, -24, -20, 1, -16, -7, 16
    0x40514e4, 0x81722fe, 0xfdf9ef26, 0xe4fafd, 0xd0207ee, 0xfd00fd03, 0xece8f903, 0x10f9f001,
    // -6, 19, -10, -3, -8, -1, -4, 16, 26, 17, 22, 16, 12, 5, 0, -8, -3, 0, 5, 3, 4, -9, 18, 7, -2, -26, 0, -5, 8, 10, 19, -1
    0xfdf613fa, 0x10fcfff8, 0x1016111a, 0xf800050c, 0x30500fd, 0x712f704, 0xfb00e6fe, 0xff130a08,
    // 6, 2, -13, 1, -8, 42, 39, -5, -5, 35, 8, 18, 24, -1, -10, -4, -46, 9, 68, -29, -65, -109, 44, -36, 27, 50, -80, 0, -47, 4, -88, -24
    0x1f30206, 0xfb272af8, 0x120823fb, 0xfcf6ff18, 0xe34409d2, 0xdc2c93bf, 0xb0321b, 0xe8a804d1,
    // 12, -13, -25, -39, -22, -24, -23, 12, 0, 8, 20, 18, 29, -9, -2, -17, 21, 21, 5, 2, -25, 5, -8, -25, 2, -15, 6, -16, -19, -11, 10, 5
    0xd9e7f30c, 0xce9e8ea, 0x12140800, 0xeffef71d, 0x2051515, 0xe7f805e7, 0xf006f102, 0x50af5ed,
    // 9, -9, 17, 7, 15, 26, 2, -23, 0, -41, 55, 5, 21, -17, 19, 12, 11, 5, 16, -11, 10, -13, -9, -19, -21, 23, -5, -1, -9, 7, 2, -15
    0x711f709, 0xe9021a0f, 0x537d700, 0xc13ef15, 0xf510050b, 0xedf7f30a, 0xfffb17eb, 0xf10207f7,
    // 10, 2, -12, 18, -4, -29, 5, -27, -17, 27, 20, 6, 7, -3, -21, -8, -9, 55, -15, -7, 0, 9, 10, -1, -22, -17, 6, -15, 20, 7, 6, -36
    0x12f4020a, 0xe505e3fc, 0x6141bef, 0xf8ebfd07, 0xf9f137f7, 0xff0a0900, 0xf106efea, 0xdc060714,
    // -17, 45, -12, -13, -6, 16, 25, -2, -3, 1, 6, 6, 3, 7, 22, -16, -34, 5, -51, -8, 0, -22, 0, -28, -43, 10, 9, 38, -8, -5, 36, 15
    0xf3f42def, 0xfe1910fa, 0x60601fd, 0xf0160703, 0xf8cd05de, 0xe400ea00, 0x26090ad5, 0xf24fbf8,
    // -58, 37, -51, -5, -4, 9, 7, -28, -57, 19, 32, -58, 24, -35, 75, -21, -14, 42, -12, 24, 5, -6, 14, -16, -10, 1, 5, -15, -13, 3, -22, 12
    0xfbcd25c6, 0xe40709fc, 0xc62013c7, 0xeb4bdd18, 0x18f42af2, 0xf00efa05, 0xf10501f6, 0xcea03f3,
    // -23, 22, -45, 7, 7, 10, 2, 11, -2, -15, 25, -21, -5, 3, 11, -33, -44, 28, -18, 8, 6, -11, -3, -9, -4, 26, 23, 36, -4, 17, -23, 22
    0x7d316e9, 0xb020a07, 0xeb19f1fe, 0xdf0b03fb, 0x8ee1cd4, 0xf7fdf506, 0x24171afc, 0x16e911fc,
    // 17, 12, -14, 8, 2, -17, 9, -43, -12, 50, -8, 4, 26, -31, -11, 33, 2, 25, 24, 7, 15, 13, 4, 16, 18, -7, -2, -21, -5, 5, -1, -8
    0x8f20c11, 0xd509ef02, 0x4f832f4, 0x21f5e11a, 0x7181902, 0x10040d0f, 0xebfef912, 0xf8ff05fb,
    // 26, 46, 4, -27, -18, 62, 9, -10, 28, 44, 39, 37, -32, -8, -35, -13, 11, 3, 4, -42, -15, 6, -33, 7, 11, 9, 2, 22, 19, -30, -16, 12
    0xe5042e1a, 0xf6093eee, 0x25272c1c, 0xf3ddf8e0, 0xd604030b, 0x7df06f1, 0x1602090b, 0xcf0e213,
    // -7, -16, 32, -13, 32, 23, 18, 11, -38, 23, 5, -17, -12, 34, -25, -38, 23, -22, -9, -3, 31, 17, 41, -15, 45, -14, 39, 12, -38, -49, 1, -26
    0xf320f0f9, 0xb121720, 0xef0517da, 0xdae722f4, 0xfdf7ea17, 0xf129111f, 0xc27f22d, 0xe601cfda,
    // 38, 14, -17, -56, 18, 11, -13, -17, 5, 13, -12, 15, -14, -13, 19, 28, 4, -28, 20, 0, 23, -13, 7, 3, -15, 18, 5, 6, 23, 14, 4, 15
    0xc8ef0e26, 0xeff30b12, 0xff40d05, 0x1c13f3f2, 0x14e404, 0x307f317, 0x60512f1, 0xf040e17,
    // 24, 0, -17, -16, 14, -19, 52, 29, -6, 48, -43, 8, 8, 15, 23, 23, -11, 5, 1, -35, 16, 4, 12, 18, 5, -18, -24, 4, -5, 12, 9, -4
    0xf0ef0018, 0x1d34ed0e, 0x8d530fa, 0x17170f08, 0xdd0105f5, 0x120c0410, 0x4e8ee05, 0xfc090cfb,
    // 3, 3, 4, 12, -2, -8, -21, -8, -18, 1, 6, -27, 13, -26, -9, -3, 9, 32, -1, 3, -24, 15, 14, -10, 22, 69, 28, 37, 3, -31, 4, -2
    0xc040303, 0xf8ebf8fe, 0xe50601ee, 0xfdf7e60d, 0x3ff2009, 0xf60e0fe8, 0x251c4516, 0xfe04e103,
    // -14, 15, -5, -13, -7, 11, -11, -1, 1, -2, 5, 15, 16, 3, 11, 1, 11, -8, 2, 6, 15, -13, 10, -18, 13, 20, 14, -12, 19, -1, 5, -22
    0xf3fb0ff2, 0xfff50bf9, 0xf05fe01, 0x10b0310, 0x602f80b, 0xee0af30f, 0xf40e140d, 0xea05ff13,
    // -22, -37, -40, 74, 34, 86, -22, -63, -85, -44, -62, -43, -77, 17, -34, 49, -1, -12, 0, 5, -17, -6, 6, -9, -9, -16, 16, -13, 22, -14, 6, 3
    0x4ad8dbea, 0xc1ea5622, 0xd5c2d4ab, 0x31de11b3, 0x500f4ff, 0xf706faef, 0xf310f0f7, 0x306f216,
    // -14, -2, -8, -4, 6, 0, -4, 9, -2, 11, -3, 16, 21, 31, 15, 17, 9, -17, -9, 15, -10, -7, 1, -4, 3, 4, 6, -55, 28, -24, 44, -6
    0xfcf8fef2, 0x9fc0006, 0x10fd0bfe, 0x110f1f15, 0xff7ef09, 0xfc01f9f6, 0xc9060403, 0xfa2ce81c,
    // 9, 5, -6, 13, -4, -21, -5, -24, -8, 22, -4, 4, 9, 3, 1, 3, -13, 24, -1, -4, -12, 19, 15, 13, 32, -19, -20, -9, -2, -13, 10, 25
    0xdfa0509, 0xe8fbebfc, 0x4fc16f8, 0x3010309, 0xfcff18f3, 0xd0f13f4, 0xf7eced20, 0x190af3fe,
    // -49, -8, -24, 3, 28, 22, 6, 22, 16, -55, -35, -15, -18, 14, -5, 13, -13, -5, 4, 12, 6, -25, 12, 20, 10, -10, -9, 6, -8, -1, -2, -3
    0x3e8f8cf, 0x1606161c, 0xf1ddc910, 0xdfb0eee, 0xc04fbf3, 0x140ce706, 0x6f7f60a, 0xfdfefff8,
    // -2, -8, 1, -1, -47, 4, 9, -11, 9, 0, -17, -20, -13, 13, -19, 17, 67, -85, -35, -21, -13, -18, 16, 7, -71, 1, 3, -51, -5, -42, -47, 50
    0xff01f8fe, 0xf50904d1, 0xecef0009, 0x11ed0df3, 0xebddab43, 0x710eef3, 0xcd0301b9, 0x32d1d6fb,
    // 1, -15, 16, 19, -12, -49, 2, 29, -24, -15, 7, -17, -47, 37, -17, -12, 33, 27, 18, -18, -17, 17, 7, -23, 5, -9, -3, -21, -5, -20, -1, 10
    0x1310f101, 0x1d02cff4, 0xef07f1e8, 0xf4ef25d1, 0xee121b21, 0xe90711ef, 0xebfdf705, 0xaffecfb,
    // 32, 17, 11, -21, -17, 13, -21, -2, -19, -13, 5, -24, -24, 6, 4, -15, 9, 8, 11, -8, 10, 9, 0, 14, -17, -16, 9, 16, -33, 17, 13, -28
    0xeb0b1120, 0xfeeb0def, 0xe805f3ed, 0xf10406e8, 0xf80b0809, 0xe00090a, 0x1009f0ef, 0xe40d11df,
    // 12, -4, 6, -7, 14, -6, 1, -11, -2, -4, 17, -2, -3, 16, -13, -5, 42, 5, -6, -20, -31, 41, -1, -40, -23, 24, 47, 12, -23, 1, -29, -5
    0xf906fc0c, 0xf501fa0e, 0xfe11fcfe, 0xfbf310fd, 0xecfa052a, 0xd8ff29e1, 0xc2f18e9, 0xfbe301e9,
    // -8, 13, -13, -19, -1, 0, -11, -6, 0, -3, 1, 1, 10, -4, -13, -9, -13, -11, 9, -10, 38, 7, -28, 9, -35, -23, 9, -32, 2, 14, -14, -18
    0xedf30df8, 0xfaf500ff, 0x101fd00, 0xf7f3fc0a, 0xf609f5f3, 0x9e40726, 0xe009e9dd, 0xeef20e02,
    // -58, -24, 31, 21, -11, -35, -26, -16, -15, -53, -21, -64, 7, -68, 1, 18, -26, 8, 13, -20, -3, 15, -11, -39, 21, -37, 11, -1, -2, 7, -11, 13
    0x151fe8c6, 0xf0e6ddf5, 0xc0ebcbf1, 0x1201bc07, 0xec0d08e6, 0xd9f50ffd, 0xff0bdb15, 0xdf507fe,
    // -19, -5, -8, 9, 18, -4, 3, 2, -4, -20, -2, -11, 2, 19, -16, -26, -15, 0, -45, -19, 12, -7, 43, 30, 17, 38, -28, 4, 6, 53, -2, 42
    0x9f8fbed, 0x203fc12, 0xf5feecfc, 0xe6f01302, 0xedd300f1, 0x1e2bf90c, 0x4e42611, 0x2afe3506,
    // 0, -2, 0, -26, 4, -7, 4, -7, 20, -1, -25, -17, 19, 16, -9, 0, -2, -1, -11, -5, -1, 14, 3, 4, -16, 0, -2, 13, -8, 2, 5, -14
    0xe600fe00, 0xf904f904, 0xefe7ff14, 0xf71013, 0xfbf5fffe, 0x4030eff, 0xdfe00f0, 0xf20502f8,
    // -2, 24, 9, -3, 10, -6, 9, 22, 13, 20, 0, 5, 1, -13, 7, -15, 10, 5, 6, 13, 5, 24, 21, -9, 0, -2, -7, -12, -9, 4, 10, 6
    0xfd0918fe, 0x1609fa0a, 0x500140d, 0xf107f301, 0xd06050a, 0xf7151805, 0xf4f9fe00, 0x60a04f7,
    // 9, 10, -18, -13, -12, -62, -21, -31, 47, -46, -9, -12, -22, -35, 37, -1, -25, -90, 83, -42, 19, -94, -27, -79, 59, -47, 63, -12, 50, 34, -23, 4
    0xf3ee0a09, 0xe1ebc2f4, 0xf4f7d22f, 0xff25ddea, 0xd653a6e7, 0xb1e5a213, 0xf43fd13b, 0x4e92232,
    // -15, 0, 38, 42, -1, -15, 25, 26, -2, -17, 22, -26, -13, -17, -1, -2, -3, 1, -7, -3, 14, 2, 10, 8, -1, 12, 1, 27, -8, 5, 4, 6
    0x2a2600f1, 0x1a19f1ff, 0xe616effe, 0xfeffeff3, 0xfdf901fd, 0x80a020e, 0x1b010cff, 0x60405f8,
    // 1, 22, 7, 9, -15, 2, -20, 7, -18, 12, -16, 16, -15, -20, -25, -1, -7, 20, -11, 13, 0, 10, 9, 7, 0, 15, -6, 12, -16, -16, 2, 1
    0x9071601, 0x7ec02f1, 0x10f00cee, 0xffe7ecf1, 0xdf514f9, 0x7090a00, 0xcfa0f00, 0x102f0f0,
};
static const uint embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // 0.0002375, 1.526e-05, -0.0001932, 3.32e-05, -0.0002913, -0.0005097, 0.0004425, 0.0001353, 0.0004256, -0.0002944, 0.000498, 0.000446, 0.0003176, 0.0003097, -1.6e-05, -7.85e-05
    0x1000bc8, 0x22d8a55, 0x902d8cc6, 0x86f0f40, 0x8cd30ef9, 0xf4f1014, 0xd130d34, 0x8525810c,
};
static const uint embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -8, 68, -28, -12, 110, 14, -14, 44, 56, 68, -40, -7, 72, -20, -1, -18, 8, 33, 52, -11, -3, -39, 6, -40, 7, 22, -10, -16, 45, 20, -35, 37
    0xf4e444f8, 0x2cf20e6e, 0xf9d84438, 0xeeffec48, 0xf5342108, 0xd806d9fd, 0xf0f61607, 0x25dd142d,
    // -27, 37, 41, 59, -45, 23, -37, -35, -35, 50, -27, 21, -39, -2, -42, 6, 10, 2, 2, 54, 11, -26, 12, 13, -78, 28, -12, -20, 52, -13, 10, 41
    0x3b2925e5, 0xdddb17d3, 0x15e532dd, 0x6d6fed9, 0x3602020a, 0xd0ce60b, 0xecf41cb2, 0x290af334,
    // 34, 38, 4, 86, 25, -44, -25, -46, 6, 0, 17, 35, -59, 19, -61, 30, -29, 19, 56, 60, -4, -34, -20, -68, -57, -16, 38, -21, 73, 40, -29, 29
    0x56042622, 0xd2e7d419, 0x23110006, 0x1ec313c5, 0x3c3813e3, 0xbcecdefc, 0xeb26f0c7, 0x1de32849,
    // 27, 80, 9, -78, 24, -88, 5, -77, -9, 15, 4, -19, -19, -19, 33, -31, -24, 12, -57, -35, 8, -11, 86, -38, 2, 24, -26, 17, 15, 12, -57, 7
    0xb209501b, 0xb305a818, 0xed040ff7, 0xe121eded, 0xddc70ce8, 0xda56f508, 0x11e61802, 0x7c70c0f,
    // 32, 44, 45, -6, -21, 32, 62, 25, 33, -10, 12, -35, -10, 66, 53, 91, -33, 46, 30, -30, -18, 82, 52, -15, 22, 27, -28, -35, 61, 11, 38, -4
    0xfa2d2c20, 0x193e20eb, 0xdd0cf621, 0x5b3542f6, 0xe21e2edf, 0xf13452ee, 0xdde41b16, 0xfc260b3d,
    // -3, -11, -16, 5, 36, -1, -11, 1, -47, -35, -25, -13, 22, -9, 48, 60, 12, 16, 13, -77, -1, -24, -3, 33, 31, -2, 20, 6, -20, -8, 4, -17
    0x5f0f5fd, 0x1f5ff24, 0xf3e7ddd1, 0x3c30f716, 0xb30d100c, 0x21fde8ff, 0x614fe1f, 0xef04f8ec,
    // -8, 16, 2, 5, -32, 14, -6, 29, -16, 27, 45, -30, 44, -28, 7, -22, -17, 35, -3, -11, 4, -90, 9, -37, 0, 81, 17, -4, -21, -48, -20, 28
    0x50210f8, 0x1dfa0ee0, 0xe22d1bf0, 0xea07e42c, 0xf5fd23ef, 0xdb09a604, 0xfc115100, 0x1cecd0eb,
    // 4, -4, -20, -15, 24, -23, 24, -31, 12, -6, 16, 12, 28, -18, 2, 29, -32, -22, -8, -34, -8, -8, -11, 12, 22, -18, 120, 39, 12, 4, -7, -19
    0xf1ecfc04, 0xe118e918, 0xc10fa0c, 0x1d02ee1c, 0xdef8eae0, 0xcf5f8f8, 0x2778ee16, 0xedf9040c,
    // -17, -23, 20, -12, 23, 12, -2, 7, -26, -6, 8, 30, -14, -28, -33, -42, 6, 17, -4, -19, -3, 0, 9, 18, -26, -10, 23, 3, -66, 0, -78, -27
    0xf414e9ef, 0x7fe0c17, 0x1e08fae6, 0xd6dfe4f2, 0xedfc1106, 0x120900fd, 0x317f6e6, 0xe5b200be,
    // 6, -47, 2, -24, 34, 60, 21, 21, 58, 2, -44, 22, 6, 0, -29, -25, -29, 20, 23, 18, -4, -83, 25, -52, -16, 81, 21, -4, -8, -21, -32, 21
    0xe802d106, 0x15153c22, 0x16d4023a, 0xe7e30006, 0x121714e3, 0xcc19adfc, 0xfc1551f0, 0x15e0ebf8,
    // 5, 1, -8, -4, 1, -6, -12, -16, -9, -1, -16, -10, 6, -14, -7, -14, -70, -41, -17, 38, -5, -110, 16, -2, 25, -44, -14, 43, -6, -56, -20, -20
    0xfcf80105, 0xf0f4fa01, 0xf6f0fff7, 0xf2f9f206, 0x26efd7ba, 0xfe1092fb, 0x2bf2d419, 0xececc8fa,
    // 20, 9, -13, -3, 12, 23, 6, 22, 5, -36, 34, 15, 16, -3, 1, -5, -36, 0, -66, -47, -32, 10, 23, 1, -7, -25, 30, -16, 9, 21, -37, -3
    0xfdf30914, 0x1606170c, 0xf22dc05, 0xfb01fd10, 0xd1be00dc, 0x1170ae0, 0xf01ee7f9, 0xfddb1509,
    // -5, 87, -43, 10, -61, -54, -31, 40, -15, -9, 43, -16, 22, -35, 29, -4, 2, 14, 43, -28, 8, -65, 26, -21, 24, -17, 14, -47, 43, 8, 4, 26
    0xad557fb, 0x28e1cac3, 0xf02bf7f1, 0xfc1ddd16, 0xe42b0e02, 0xeb1abf08, 0xd10eef18, 0x1a04082b,
    // -9, 13, -38, 5, -23, 0, 29, -15, -6, 15, -12, -22, 12, 29, 2, 16, -16, 50, -47, 40, 60, 25, -10, -24, 47, -3, 37, -96, -35, -49, 7, 42
    0x5da0df7, 0xf11d00e9, 0xeaf40ffa, 0x10021d0c, 0x28d132f0, 0xe8f6193c, 0xa025fd2f, 0x2a07cfdd,
    // 12, 24, -28, 1, -32, 9, 67, 5, 19, 26, 13, 11, 12, -30, -12, 5, 23, 21, -1, -36, 76, 92, 6, 15, -2, 32, 26, 16, 11, 16, 23, 83
    0x1e4180c, 0x54309e0, 0xb0d1a13, 0x5f4e20c, 0xdcff1517, 0xf065c4c, 0x101a20fe, 0x5317100b,
    // 19, 76, 9, -13, 33, 7, -18, 38, 1, -68, -68, -20, -8, 8, -49, 5, 42, 26, 12, -24, -9, -26, 17, -46, -21, 34, 24, -8, 10, 6, -33, 31
    0xf3094c13, 0x26ee0721, 0xecbcbc01, 0x5cf08f8, 0xe80c1a2a, 0xd211e6f7, 0xf81822eb, 0x1fdf060a,
    // -61, 24, 63, -8, -39, 28, 35, -70, 20, -8, -54, -34, 46, 2, 4, -57, 34, 25, -2, -38, -11, -3, -19, -78, 26, 40, 64, 16, -24, -16, 25, 11
    0xf83f18c3, 0xba231cd9, 0xdecaf814, 0xc704022e, 0xdafe1922, 0xb2edfdf5, 0x1040281a, 0xb19f0e8,
    // 26, 40, -11, 34, -37, 24, -16, -16, -29, -20, -2, 19, -73, 37, 25, 23, 15, 13, -78, -19, 13, -7, 23, 36, 6, 42, 3, 20, -55, -16, 41, -39
    0x22f5281a, 0xf0f018db, 0x13feece3, 0x171925b7, 0xedb20d0f, 0x2417f90d, 0x14032a06, 0xd929f0c9,
    // 20, -13, 25, -34, 20, 0, 16, -7, 40, 27, -60, 14, 3, 15, 14, 6, 28, 4, -55, -29, 9, 20, -23, 8, -9, -51, -27, 22, -21, 8, 41, -25
    0xde19f314, 0xf9100014, 0xec41b28, 0x60e0f03, 0xe3c9041c, 0x8e91409, 0x16e5cdf7, 0xe72908eb,
    // -1, 2, -9, -2, 4, -8, -8, -32, 14, 3, 10, 6, 4, -20, -11, 6, 55, 21, 18, 32, -7, 72, -7, -12, -18, 42, 11, 23, -46, -52, 14, 47
    0xfef702ff, 0xe0f8f804, 0x60a030e, 0x6f5ec04, 0x20121537, 0xf4f948f9, 0x170b2aee, 0x2f0eccd2,
    // 4, 31, 14, 15, -26, 64, 4, -28, -56, 19, -6, 32, 11, -79, 24, 47, -20, -12, -8, -14, -3, -18, 1, 15, -7, -29, 43, 25, 51, -22, -22, 20
    0xf0e1f04, 0xe40440e6, 0x20fa13c8, 0x2f18b10b, 0xf2f8f4ec, 0xf01eefd, 0x192be3f9, 0x14eaea33,
    // 2, -33, 6, 2, -47, 6, 9, 22, -3, -8, 1, -24, 82, -55, -39, 25, 12, 16, 19, -19, 0, -23, 24, -7, 10, 16, 4, -18, 23, 1, -20, 22
    0x206df02, 0x160906d1, 0xe801f8fd, 0x19d9c952, 0xed13100c, 0xf918e900, 0xee04100a, 0x16ec0117,
    // -7, -3, -9, -3, 6, -1, 12, 5, -15, 1, 4, 15, 0, -1, -4, -11, 23, -1, 52, 1, 7, -31, -21, -78, -32, 19, -19, 51, 23, 0, 47, -51
    0xfdf7fdf9, 0x50cff06, 0xf0401f1, 0xf5fcff00, 0x134ff17, 0xb2ebe107, 0x33ed13e0, 0xcd2f0017,
    // -13, -30, -2, -84, -3, -40, 50, -46, 42, -74, -82, 21, -50, -27, -21, 32, 0, 32, 32, -45, -9, -29, -1, -23, 22, 46, 61, 30, -5, -65, -13, -14
    0xacfee2f3, 0xd232d8fd, 0x15aeb62a, 0x20ebe5ce, 0xd3202000, 0xe9ffe3f7, 0x1e3d2e16, 0xf2f3bffb,
    // -29, 2, -42, -6, -15, -20, -18, 40, -7, 56, -2, -36, -81, -71, -21, 44, -21, 8, 8, 20, 0, -22, -50, -1, -5, 29, -77, 0, 20, 18, -34, 36
    0xfad602e3, 0x28eeecf1, 0xdcfe38f9, 0x2cebb9af, 0x140808eb, 0xffceea00, 0xb31dfb, 0x24de1214,
    // -6, -10, 12, -6, 18, 7, 46, 12, -46, 5, 10, 24, -17, 27, -21, -3, -27, 64, -31, -24, 94, 44, -17, 15, 33, 6, 4, -96, 34, -25, -2, 33
    0xfa0cf6fa, 0xc2e0712, 0x180a05d2, 0xfdeb1bef, 0xe8e140e5, 0xfef2c5e, 0xa0040621, 0x21fee722,
    // 4, 0, 10, -11, 0, -5, 0, -7, 2, 2, -2, 17, 11, 17, 8, 12, -1, -8, 57, 39, 19, 46, 32, 90, 41, 127, -37, -9, 6, 33, -5, -16
    0xf50a0004, 0xf900fb00, 0x11fe0202, 0xc08110b, 0x2739f8ff, 0x5a202e13, 0xf7db7f29, 0xf0fb2106,
    // 6, 8, 18, -3, 10, 14, 19, 0, -20, -9, -7, -55, -5, 26, 3, 20, -4, 34, 27, 38, -3, -23, 5, -103, 57, 2, 27, -22, 9, 1, 26, -10
    0xfd120806, 0x130e0a, 0xc9f9f7ec, 0x14031afb, 0x261b22fc, 0x9905e9fd, 0xea1b0239, 0xf61a0109,
    // 11, -12, -33, -31, 1, 11, 21, 25, 3, -38, 6, -44, -13, -27, 34, -49, -11, -37, -20, -90, -26, 85, -30, 30, 43, 80, -21, 62, -70, 1, -87, -35
    0xe1dff40b, 0x19150b01, 0xd406da03, 0xcf22e5f3, 0xa6ecdbf5, 0x1ee255e6, 0x3eeb502b, 0xdda901ba,
    // 71, -30, -5, -14, -55, -7, 70, -71, -17, 78, 52, -36, -10, 15, 100, 45, -11, -4, -102, -35, 15, -84, -21, -13, 22, 1, -69, 33, -102, 8, 18, -59
    0xf2fbe247, 0xb946f9c9, 0xdc344eef, 0x2d640ff6, 0xdd9afcf5, 0xf3ebac0f, 0x21bb0116, 0xc512089a,
    // -17, -25, -57, 7, 28, -98, -60, -54, -40, -15, 38, 89, -2, 84, 6, 107, -16, 31, 0, 40, 9, -50, -25, -79, -50, 22, 64, -31, -1, 8, 1, 8
    0x7c7e7ef, 0xcac49e1c, 0x5926f1d8, 0x6b0654fe, 0x28001ff0, 0xb1e7ce09, 0xe14016ce, 0x80108ff,
    // 19, 8, -20, 11, -67, -6, 5, 12, 26, 3, -30, 51, 45, -17, 35, -11, 64, 59, 68, -30, -4, -31, 39, -78, 13, -2, 7, -61, 17, 17, -13, -17
    0xbec0813, 0xc05fabd, 0x33e2031a, 0xf523ef2d, 0xe2443b40, 0xb227e1fc, 0xc307fe0d, 0xeff31111,
    // 2, 1, 36, 0, -3, 10, -52, -5, 45, -15, 8, -2, 2, -27, 5, 19, -16, 43, -6, -22, -84, 4, -7, -29, 36, 57, -5, -74, 67, 22, 25, 7
    0x240102, 0xfbcc0afd, 0xfe08f12d, 0x1305e502, 0xeafa2bf0, 0xe3f904ac, 0xb6fb3924, 0x7191643,
    // -42, 20, -43, -66, -55, 86, -40, -14, -5, -24, 24, -9, 13, 13, 21, -9, 34, 25, 34, -84, -7, 16, 32, 30, 74, -16, 18, 11, 8, -20, 12, -11
    0xbed514d6, 0xf2d856c9, 0xf718e8fb, 0xf7150d0d, 0xac221922, 0x1e2010f9, 0xb12f04a, 0xf50cec08,
    // 24, -31, -92, 4, 22, 75, 7, -38, 75, 51, -61, 21, -16, -23, 29, 5, -34, 7, 23, -26, 0, -60, 54, -17, 0, 10, -9, -34, 52, 19, -9, 35
    0x4a4e118, 0xda074b16, 0x15c3334b, 0x51de9f0, 0xe61707de, 0xef36c400, 0xdef70a00, 0x23f71334,
    // 44, -29, -24, -1, -32, -21, -43, 18, 24, 6, 4, -5, -35, 32, -43, -72, 19, 34, 12, -58, -8, 16, 33, 6, 27, 15, 30, 45, 18, -64, 32, -36
    0xffe8e32c, 0x12d5ebe0, 0xfb040618, 0xb8d520dd, 0xc60c2213, 0x62110f8, 0x2d1e0f1b, 0xdc20c012,
    // -36, -10, -26, -3, 21, -23, 24, 35, 48, -43, 24, -38, -8, 25, -4, -35, 19, 10, 16, -5, 7, 6, -35, -38, 0, 26, -91, -17, -25, 9, 2, 15
    0xfde6f6dc, 0x2318e915, 0xda18d530, 0xddfc19f8, 0xfb100a13, 0xdadd0607, 0xefa51a00, 0xf0209e7,
    // 47, -13, 24, 0, -37, -63, 41, -4, -37, -45, 34, -30, -39, -51, -6, -5, 5, 26, -28, 3, 7, -116, 14, -40, -28, 98, 60, 8, -18, -57, -6, 22
    0x18f32f, 0xfc29c1db, 0xe222d3db, 0xfbfacdd9, 0x3e41a05, 0xd80e8c07, 0x83c62e4, 0x16fac7ee,
    // -22, 3, -1, -58, -35, -5, -6, 43, 25, 52, -17, -10, 41, 55, 11, 44, 16, 8, -24, -35, 4, -27, -12, 15, 18, 21, -5, 14, -9, 3, 28, -22
    0xc6ff03ea, 0x2bfafbdd, 0xf6ef3419, 0x2c0b3729, 0xdde80810, 0xff4e504, 0xefb1512, 0xea1c03f7,
    // 76, -27, -5, 76, 39, -82, -19, 14, -21, -1, -67, -48, -5, -45, 6, 0, 17, 37, 24, -90, -10, 21, 60, 7, 36, -6, 47, 18, 32, -56, -3, -24
    0x4cfbe54c, 0xeedae27, 0xd0bdffeb, 0x6d3fb, 0xa6182511, 0x73c15f6, 0x122ffa24, 0xe8fdc820,
    // 59, -34, -14, 38, 112, 82, -21, -43, -40, 20, -18, 13, -62, 46, 47, -66, 12, -8, -38, 23, -2, -11, -3, 2, -48, 31, 16, -2, -31, 0, 6, -16
    0x26f2de3b, 0xd5eb5270, 0xdee14d8, 0xbe2f2ec2, 0x17daf80c, 0x2fdf5fe, 0xfe101fd0, 0xf00600e1,
    // 37, 7, 21, 16, 35, 35, 65, -7, 20, -75, 33, -15, 29, -3, -6, -66, 13, -17, 15, -1, 3, 24, 9, 5, 26, -5, -8, -3, 26, 13, -8, -1
    0x10150725, 0xf9412323, 0xf121b514, 0xbefafd1d, 0xff0fef0d, 0x5091803, 0xfdf8fb1a, 0xfff80d1a,
    // -34, -12, -25, 21, 26, 2, 51, 6, 63, -75, 29, -13, 38, 31, 34, -17, 20, 9, -13, -4, 14, -16, 36, -99, 21, -58, -47, 3, -63, -32, 15, -3
    0x15e7f4de, 0x633021a, 0xf31db53f, 0xef221f26, 0xfcf30914, 0x9d24f00e, 0x3d1c615, 0xfd0fe0c1,
    // 29, -48, -84, -50, 39, -46, 24, 35, 21, -20, 40, -15, 27, -18, 17, 11, -15, 6, 0, -33, 7, -17, -60, -23, 32, 18, -40, 15, 1, 21, 22, 7
    0xceacd01d, 0x2318d227, 0xf128ec15, 0xb11ee1b, 0xdf0006f1, 0xe9c4ef07, 0xfd81220, 0x7161501,
    // -59, 6, -42, 28, 17, 0, -29, 21, -9, -12, 27, -33, -25, -15, 3, -2, 12, 11, 53, -35, -7, -12, -16, -30, 39, 58, 42, 30, 21, -67, -6, 3
    0x1cd606c5, 0x15e30011, 0xdf1bf4f7, 0xfe03f1e7, 0xdd350b0c, 0xe2f0f4f9, 0x1e2a3a27, 0x3fabd15,
    // 5, 7, 19, -18, -25, -3, -4, 6, 46, 13, 7, -7, 9, 9, -52, -42, -1, 31, 16, 39, -1, -13, -21, -49, -17, 14, -6, -11, -13, 27, -41, 30
    0xee130705, 0x6fcfde7, 0xf9070d2e, 0xd6cc0909, 0x27101fff, 0xcfebf3ff, 0xf5fa0eef, 0x1ed71bf3,
    // 37, 13, 37, 5, -16, -7, -29, -7, 27, -30, -3, -4, -1, 48, 55, 36, 48, -5, -7, -36, -1, -65, 13, -14, 11, 50, -37, 21, -18, -7, 40, 18
    0x5250d25, 0xf9e3f9f0, 0xfcfde21b, 0x243730ff, 0xdcf9fb30, 0xf20dbfff, 0x15db320b, 0x1228f9ee,
    // -28, -3, 13, 24, 13, -25, -10, -88, 22, -47, 1, 13, 75, 80, -12, -54, -11, -7, 1, 68, 21, -28, 26, -1, -65, -5, 46, -39, 35, 6, 55, 12
    0x180dfde4, 0xa8f6e70d, 0xd01d116, 0xcaf4504b, 0x4401f9f5, 0xff1ae415, 0xd92efbbf, 0xc370623,
    // -76, -4, 2, -18, 6, 2, 26, 16, 37, 23, -4, 2, 19, -29, 7, -10, -14, -15, 38, 16, -12, 25, 16, -4, 9, -9, -44, -2, 11, -11, -33, 1
    0xee02fcb4, 0x101a0206, 0x2fc1725, 0xf607e313, 0x1026f1f2, 0xfc1019f4, 0xfed4f709, 0x1dff50b,
    // 36, 60, -44, -5, 45, 47, 20, 37, 17, -22, -37, 26, -35, -25, -7, 18, 5, 26, -39, 10, 8, -106, 8, -54, -42, 91, 27, 23, -22, -49, -22, 32
    0xfbd43c24, 0x25142f2d, 0x1adbea11, 0x12f9e7dd, 0xad91a05, 0xca089608, 0x171b5bd6, 0x20eacfea,
    // -9, -73, 5, 21, 7, 20, -9, -45, -20, 24, 41, -74, 23, -22, -39, -7, 7, 27, 40, -38, -24, -19, 18, -36, 21, 33, 25, 4, 40, -7, -44, 36
    0x1505b7f7, 0xd3f71407, 0xb62918ec, 0xf9d9ea17, 0xda281b07, 0xdc12ede8, 0x4192115, 0x24d4f928,
    // -9, -4, -17, -3, -8, -12, 4, -24, -3, 8, -5, 36, 7, -14, -4, -1, 73, 12, -14, -47, 2, 80, -18, 19, -44, 22, -13, 31, 39, 24, 18, 61
    0xfdeffcf7, 0xe804f4f8, 0x24fb08fd, 0xfffcf207, 0xd1f20c49, 0x13ee5002, 0x1ff316d4, 0x3d121827,
    // -11, 7, -14, 0, 22, 15, 16, 5, -20, -38, 7, -14, -6, -30, 25, 19, -3, -15, -23, 27, -13, -19, -17, 28, -54, 42, -25, -67, 4, 82, 22, 78
    0xf207f5, 0x5100f16, 0xf207daec, 0x1319e2fa, 0x1be9f1fd, 0x1cefedf3, 0xbde72aca, 0x4e165204,
    // 30, -2, -20, -21, 17, -3, 8, -7, -38, -16, 16, 8, -8, -27, 6, 8, -63, 22, -27, 49, 1, 57, 1, -41, 23, -5, -1, 47, -12, -16, 1, -4
    0xebecfe1e, 0xf908fd11, 0x810f0da, 0x806e5f8, 0x31e516c1, 0xd7013901, 0x2ffffb17, 0xfc01f0f4,
    // -9, -9, 34, -8, -7, 23, 40, 30, 18, 17, -37, -43, 66, -11, 45, -9, 26, 39, -97, -74, 10, -36, -20, -42, 18, 29, 0, 25, -70, -20, 4, -10
    0xf822f7f7, 0x1e2817f9, 0xd5db1112, 0xf72df542, 0xb69f271a, 0xd6ecdc0a, 0x19001d12, 0xf604ecba,
    // 75, -13, -26, -23, 24, -12, -26, -55, -8, -56, 54, 21, 74, 77, -55, -40, 5, 29, -8, 31, 35, -53, -46, -22, -52, -1, 61, -4, 35, 34, 22, 35
    0xe9e6f34b, 0xc9e6f418, 0x1536c8f8, 0xd8c94d4a, 0x1ff81d05, 0xead2cb23, 0xfc3dffcc, 0x23162223,
    // -13, -19, 16, -1, -8, -16, -3, 4, -2, 3, -9, 16, -2, 24, 9, -1, 28, -11, -16, 50, 0, 38, 81, -45, -38, -39, -71, -28, 20, 20, -20, 7
    0xff10edf3, 0x4fdf0f8, 0x10f703fe, 0xff0918fe, 0x32f0f51c, 0xd3512600, 0xe4b9d9da, 0x7ec1414,
    // -49, 25, -26, 21, -20, -18, 34, -6, 27, -10, 13, -18, -52, -9, 15, 51, 8, 11, -23, -29, -4, 21, 3, -27, 31, 19, -57, 23, -78, -28, -39, -21
    0x15e619cf, 0xfa22eeec, 0xee0df61b, 0x330ff7cc, 0xe3e90b08, 0xe50315fc, 0x17c7131f, 0xebd9e4b2,
    // 52, -40, -75, -16, -58, 45, -8, -35, 11, -112, -48, 16, -60, -30, -74, 38, 5, 28, 28, 1, -10, -42, 41, -50, -13, 19, 34, -23, 36, 12, -60, 44
    0xf0b5d834, 0xddf82dc6, 0x10d0900b, 0x26b6e2c4, 0x11c1c05, 0xce29d6f6, 0xe92213f3, 0x2cc40c24,
    // -29, 4, 81, 26, -1, -15, -40, 77, -65, -32, -9, 5, -6, 10, 8, -56, 20, -32, -48, 11, 0, 78, -10, 26, -29, -30, 42, 7, -3, -32, 49, -11
    0x1a5104e3, 0x4dd8f1ff, 0x5f7e0bf, 0xc8080afa, 0xbd0e014, 0x1af64e00, 0x72ae2e3, 0xf531e0fd,
    // -28, -24, 37, 10, 12, -23, -2, 9, 17, -1, 12, 33, -19, 34, 5, -16, -44, 37, -31, 9, -1, 33, 7, 44, -20, -77, -19, 21, -49, -5, -3, -82
    0xa25e8e4, 0x9fee90c, 0x210cff11, 0xf00522ed, 0x9e125d4, 0x2c0721ff, 0x15edb3ec, 0xaefdfbcf,
    // 92, -24, 36, -10, 20, 69, 41, 99, -26, 12, 45, 87, -5, -56, 0, 6, 35, -78, 35, -14, -16, -41, 12, -106, 32, 16, -53, -87, 13, -97, 86, -29
    0xf624e85c, 0x63294514, 0x572d0ce6, 0x600c8fb, 0xf223b223, 0x960cd7f0, 0xa9cb1020, 0xe3569f0d,
    // -1, 35, -15, -48, 41, 0, -69, -45, -26, -15, 18, -40, 8, -5, -36, 25, 31, 55, 10, -53, -12, 4, 67, -7, 22, -52, -15, -13, 28, -8, -34, -2
    0xd0f123ff, 0xd3bb0029, 0xd812f1e6, 0x19dcfb08, 0xcb0a371f, 0xf94304f4, 0xf3f1cc16, 0xfedef81c,
    // 4, -9, -12, 0, 10, -21, -19, -5, -21, -6, -13, 0, 2, 13, -26, -22, 28, 7, 27, -12, 10, -12, 4, 63, 31, -77, -71, 8, 11, 26, 5, 1
    0xf4f704, 0xfbedeb0a, 0xf3faeb, 0xeae60d02, 0xf41b071c, 0x3f04f40a, 0x8b9b31f, 0x1051a0b,
};
static const uint embedded_decoder3_ResidualBlock_2_body_pw_expand_bias_dwords[32] = {
    // -0.07513, 0.03143, -0.0265, -0.24, 0.1544, -0.2773, 0.1555, -0.09174, -0.027, 0.1917, -0.10144, -0.01591, -0.1588, -0.02608, -0.3193, -0.10724
    0x2806accf, 0xb3aea6c9, 0xb47030f1, 0xaddf30fa, 0x3222a6e9, 0xa413ae7e, 0xa6adb115, 0xaeddb51c,
    // -0.3213, -0.1984, -0.1436, -0.0453, -0.02959, -0.0945, 0.00908, -0.3591, -0.09064, -0.003368, -0.1084, 0.01038, -0.2656, -0.0833, -0.04697, -0.2394
    0xb259b524, 0xa9ccb098, 0xae0ca793, 0xb5bf20a6, 0x9ae6adcd, 0x2151aef0, 0xad55b440, 0xb3a9aa03,
    // 0.084, -0.3093, -0.3628, -0.2754, -0.04636, -0.05295, -0.015366, -0.2659, -0.217, 0.03668, -0.0004258, -0.07886, -0.00845, -0.08875, 0.1815, 0.02348
    0xb4f32d60, 0xb468b5ce, 0xaac7a9ef, 0xb441a3de, 0x28b2b2f2, 0xad0c8efa, 0xadaea054, 0x260331cf,
    // 0.0855, 0.05707, -0.0874, 0.0004735, -0.5054, 0.01683, -0.2754, -0.1821, -0.2969, -0.1295, -0.07446, -0.17, -0.10046, -0.5884, -0.1018, -0.3318
    0x2b4e2d79, 0xfc2ad98, 0x244fb80b, 0xb1d4b468, 0xb025b4c0, 0xb171acc4, 0xb8b5ae6e, 0xb54fae84,
};
static const uint embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 0, -29, -5, -10, 5, -24, -12, 43, -32, -10, -2, -4, 86, -14, -48, 53, 51, -24, 11, -48, 25, 77, -23, -55, 40, 19, 35, -57, -13, 101, -34, 26
    0xf6fbe300, 0x2bf4e805, 0xfcfef6e0, 0x35d0f256, 0xd00be833, 0xc9e94d19, 0xc7231328, 0x1ade65f3,
    // 28, 0, -91, 17, 38, -25, -48, 29, 65, 60, 17, -35, 25, -21, -28, -31, 31, -2, -73, -10, 3, -6, 5, -38, -33, -7, 9, -57, -22, -5, -43, -21
    0x11a5001c, 0x1dd0e726, 0xdd113c41, 0xe1e4eb19, 0xf6b7fe1f, 0xda05fa03, 0xc709f9df, 0xebd5fbea,
    // -1, 0, -18, 25, 45, 57, 32, -77, 7, -44, -15, -17, 23, 22, -38, 75, -28, -29, 59, -38, 34, -28, 20, -33, -61, 17, -16, -43, 1, 16, -9, -16
    0x19ee00ff, 0xb320392d, 0xeff1d407, 0x4bda1617, 0xda3be3e4, 0xdf14e422, 0xd5f011c3, 0xf0f71001,
    // 15, -20, -5, -29, -34, 9, 20, -4, 35, -40, 2, -12, 0, 41, 1, 66, 0, -67, -31, 8, -13, -19, -18, 9, -39, -9, 9, -80, -2, 16, 15, 13
    0xe3fbec0f, 0xfc1409de, 0xf402d823, 0x42012900, 0x8e1bd00, 0x9eeedf3, 0xb009f7d9, 0xd0f10fe,
    // 92, 7, 3, 7, -18, 18, 75, -12, 37, -43, 2, 13, -28, 18, 7, 9, -8, 36, 23, -20, -22, -66, 0, 12, -42, 7, -73, -34, -39, -13, -9, 28
    0x703075c, 0xf44b12ee, 0xd02d525, 0x90712e4, 0xec1724f8, 0xc00beea, 0xdeb707d6, 0x1cf7f3d9,
    // 12, -59, 4, -27, 52, 62, 2, 40, -60, 54, 7, 44, 5, 26, -10, 56, -12, -80, 12, 38, -9, -23, -40, -17, -1, -69, -84, 31, -12, 57, -27, 8
    0xe504c50c, 0x28023e34, 0x2c0736c4, 0x38f61a05, 0x260cb0f4, 0xefd8e9f7, 0x1facbbff, 0x8e539f4,
    // -8, 66, 21, -87, 6, -23, -36, 26, 13, 63, -57, 35, 36, -5, -8, 6, -42, 10, 0, -40, -21, 25, -17, 31, 1, 52, 27, -72, -12, 29, -12, 5
    0xa91542f8, 0x1adce906, 0x23c73f0d, 0x6f8fb24, 0xd8000ad6, 0x1fef19eb, 0xb81b3401, 0x5f41df4,
    // 7, 18, -50, -3, -7, -51, -14, -25, 111, 21, -25, 21, 27, -34, -7, -30, 1, 48, -7, -3, -12, 14, 33, -8, 17, 52, -9, -23, -20, 52, -9, -6
    0xfdce1207, 0xe7f2cdf9, 0x15e7156f, 0xe2f9de1b, 0xfdf93001, 0xf8210ef4, 0xe9f73411, 0xfaf734ec,
    // 3, 23, -18, 16, -14, 9, 63, -31, 4, -69, 31, -21, -8, 50, -4, 59, 28, -15, 41, -46, -9, 8, 32, -4, 14, 53, -16, 34, 0, 10, 2, 5
    0x10ee1703, 0xe13f09f2, 0xeb1fbb04, 0x3bfc32f8, 0xd229f11c, 0xfc2008f7, 0x22f0350e, 0x5020a00,
    // -33, 10, 9, 35, -1, 82, 13, -12, -29, -13, 19, -27, 27, 7, 4, -5, -16, -78, -17, -11, -22, 0, -19, -6, -3, 8, 21, -2, 9, -105, 6, -10
    0x23090adf, 0xf40d52ff, 0xe513f3e3, 0xfb04071b, 0xf5efb2f0, 0xfaed00ea, 0xfe1508fd, 0xf6069709,
    // -19, 57, -4, 36, 18, -62, 39, -51, -69, -37, -18, 15, 41, 29, 12, 28, -34, -50, 24, -53, -46, -66, 15, -10, 55, 14, -13, 8, 30, 22, 106, -50
    0x24fc39ed, 0xcd27c212, 0xfeedbbb, 0x1c0c1d29, 0xcb18cede, 0xf60fbed2, 0x8f30e37, 0xce6a161e,
    // -2, 18, -13, 7, 1, 8, -9, -26, -15, -74, 0, -52, 33, -44, 21, -52, 52, -27, -57, -11, -23, 15, -19, -11, -37, 36, 9, -43, -12, 94, -6, 11
    0x7f312fe, 0xe6f70801, 0xcc00b6f1, 0xcc15d421, 0xf5c7e534, 0xf5ed0fe9, 0xd50924db, 0xbfa5ef4,
    // 8, -40, 14, 60, -9, -18, -41, 81, -23, 15, -41, 26, 41, 23, -36, -30, 42, -37, 14, -71, 13, -59, -12, 31, 8, 59, -69, -74, -31, -6, -23, 55
    0x3c0ed808, 0x51d7eef7, 0x1ad70fe9, 0xe2dc1729, 0xb90edb2a, 0x1ff4c50d, 0xb6bb3b08, 0x37e9fae1,
    // 23, -2, 17, 29, 91, -30, -4, -1, -33, 47, 36, -35, -37, -30, -1, -46, 57, 91, 10, 22, -11, -13, 18, -40, -51, 24, -34, 26, 21, -59, -7, -12
    0x1d11fe17, 0xfffce25b, 0xdd242fdf, 0xd2ffe2db, 0x160a5b39, 0xd812f3f5, 0x1ade18cd, 0xf4f9c515,
    // 3, 14, -13, 77, 27, 8, 33, 9, -33, -34, -28, -4, 40, -56, -23, -29, -23, -19, 28, 3, 44, -81, -3, 31, -55, 7, 12, -42, 41, 37, 10, 8
    0x4df30e03, 0x921081b, 0xfce4dedf, 0xe3e9c828, 0x31cede9, 0x1ffdaf2c, 0xd60c07c9, 0x80a2529,
    // 20, 15, 24, 21, -79, 38, -2, -30, -75, -42, -42, 38, -22, 8, -9, 39, -20, -19, 4, 14, 25, 53, 7, 76, -8, 42, -6, -1, -11, -16, 21, -20
    0x15180f14, 0xe2fe26b1, 0x26d6d6b5, 0x27f708ea, 0xe04edec, 0x4c073519, 0xfffa2af8, 0xec15f0f5,
    // -7, -66, -45, 12, -4, -12, -23, -62, 21, 9, -15, -31, -3, 36, -8, -26, 18, 10, -57, -18, -46, 81, 22, -70, 3, -3, 49, -3, -18, -5, 14, 0
    0xcd3bef9, 0xc2e9f4fc, 0xe1f10915, 0xe6f824fd, 0xeec70a12, 0xba1651d2, 0xfd31fd03, 0xefbee,
    // -7, -62, -11, -20, 71, -8, 7, 15, 27, 19, 3, 29, -16, 22, 29, 52, 1, 28, 14, -3, -4, 4, -40, -25, -18, -68, -10, 11, 14, 37, -22, -11
    0xecf5c2f9, 0xf07f847, 0x1d03131b, 0x341d16f0, 0xfd0e1c01, 0xe7d804fc, 0xbf6bcee, 0xf5ea250e,
    // 22, -13, -1, 15, 27, 9, -88, -36, -77, 62, 40, 9, 55, 89, 90, -21, 41, 11, -33, -30, 31, -6, 30, 8, -52, 3, 10, 103, -22, 32, -37, -73
    0xffff316, 0xdca8091b, 0x9283eb3, 0xeb5a5937, 0xe2df0b29, 0x81efa1f, 0x670a03cc, 0xb7db20ea,
    // -46, -17, -41, -8, -4, -78, 6, 9, 30, -9, 14, -17, -1, -14, -12, 9, -1, 94, -27, 6, 19, 36, 1, 7, -13, 6, -38, -47, 3, -68, -18, -21
    0xf8d7efd2, 0x906b2fc, 0xef0ef71e, 0x9f4f2ff, 0x6e55eff, 0x7012413, 0xd1da06f3, 0xebeebc03,
    // 109, -38, -57, 63, -8, 13, -64, -85, 21, 26, -8, -24, 47, 14, -16, -1, 6, 20, -22, -22, -64, -78, -2, -63, 53, 36, -30, -69, 30, 15, 48, 8
    0x3fc7da6d, 0xabc00df8, 0xe8f81a15, 0xfff00e2f, 0xeaea1406, 0xc1feb2c0, 0xbbe22435, 0x8300f1e,
    // -18, -29, 6, -3, 13, 13, 1, 42, 36, 12, -26, 82, -1, -32, -7, 19, 44, 36, -35, -25, -5, 1, -69, -10, -10, -57, -111, -27, -15, 37, 11, 29
    0xfd06e3ee, 0x2a010d0d, 0x52e60c24, 0x13f9e0ff, 0xe7dd242c, 0xf6bb01fb, 0xe591c7f6, 0x1d0b25f1,
    // 20, -19, 8, 6, 20, 70, 2, 101, -78, 5, 4, 36, -1, 21, 11, 3, -12, 65, 5, -14, 40, -4, 11, -18, -80, 38, -21, 22, -12, 37, -24, -23
    0x608ed14, 0x65024614, 0x240405b2, 0x30b15ff, 0xf20541f4, 0xee0bfc28, 0x16eb26b0, 0xe9e825f4,
    // -10, -17, -24, -33, 17, 41, 40, 40, -8, 18, -24, 44, 1, 30, 0, 14, -57, 7, -12, -2, 25, 23, -45, 29, 20, 31, -7, -33, -14, 24, 7, 17
    0xdfe8eff6, 0x28282911, 0x2ce812f8, 0xe001e01, 0xfef407c7, 0x1dd31719, 0xdff91f14, 0x110718f2,
    // 7, -18, -17, 38, -5, 12, -18, 34, -14, 32, 24, 13, -39, -3, -19, -7, -27, 49, 27, 50, 5, 28, 25, -26, -47, -24, 53, 22, 4, -26, -2, 3
    0x26efee07, 0x22ee0cfb, 0xd1820f2, 0xf9edfdd9, 0x321b31e5, 0xe6191c05, 0x1635e8d1, 0x3fee604,
    // 12, -30, 3, -15, 9, -26, 29, -4, -15, 20, -8, 25, -30, 41, 8, 10, -35, 70, 30, -17, -12, 12, -49, 30, 12, -15, 19, -24, -2, 54, -7, -33
    0xf103e20c, 0xfc1de609, 0x19f814f1, 0xa0829e2, 0xef1e46dd, 0x1ecf0cf4, 0xe813f10c, 0xdff936fe,
    // 26, -12, 49, 8, -10, 16, -28, 24, -15, 3, -35, 0, 57, -45, 40, 29, -17, 42, -22, 41, -11, -36, -53, -23, -34, -41, -91, 54, 0, -4, -1, 19
    0x831f41a, 0x18e410f6, 0xdd03f1, 0x1d28d339, 0x29ea2aef, 0xe9cbdcf5, 0x36a5d7de, 0x13fffc00,
    // 14, -16, -26, 9, 37, -50, -12, 19, 17, -8, -30, 3, 32, -19, 12, 16, -63, 11, -4, 39, -7, 49, -14, 26, 2, -9, 7, -46, 15, -80, 18, -28
    0x9e6f00e, 0x13f4ce25, 0x3e2f811, 0x100ced20, 0x27fc0bc1, 0x1af231f9, 0xd207f702, 0xe412b00f,
    // -45, 45, 16, -46, -6, 24, -86, -100, 4, 82, 20, 14, 11, 44, -1, -42, -17, -48, -5, 15, 17, 0, 3, -33, -38, 12, -36, 15, 29, -18, 15, -14
    0xd2102dd3, 0x9caa18fa, 0xe145204, 0xd6ff2c0b, 0xffbd0ef, 0xdf030011, 0xfdc0cda, 0xf20fee1d,
    // 18, 53, -8, -15, -71, -40, 22, -34, 10, -42, -16, -50, -65, -6, 31, 29, 5, 83, 32, 32, -1, -62, 33, 18, 25, -20, 3, 59, 29, -3, -13, -13
    0xf1f83512, 0xde16d8b9, 0xcef0d60a, 0x1d1ffabf, 0x20205305, 0x1221c2ff, 0x3b03ec19, 0xf3f3fd1d,
    // 27, 31, 30, 59, 0, -14, -33, -17, 28, 26, 3, -17, 18, -1, -2, -24, 34, 3, -8, 61, 11, -65, 1, 13, 16, -30, -107, 17, 7, 11, -39, -22
    0x3b1e1f1b, 0xefdff200, 0xef031a1c, 0xe8feff12, 0x3df80322, 0xd01bf0b, 0x1195e210, 0xead90b07,
    // -11, 24, -12, 30, -69, 11, -35, -13, 6, -5, -19, 14, 33, -51, -19, 15, 25, 62, 29, 24, 12, 9, 34, 7, -34, 33, -23, 12, 3, 17, -1, 7
    0x1ef418f5, 0xf3dd0bbb, 0xeedfb06, 0xfedcd21, 0x181d3e19, 0x722090c, 0xce921de, 0x7ff1103,
    // -4, -15, -11, -7, -37, -42, 13, 21, -11, -24, 73, 10, 42, 76, 43, -48, 35, -15, 16, -10, 1, 6, 32, -10, 13, 20, 11, 8, 5, 1, 21, 59
    0xf9f5f1fc, 0x150dd6db, 0xa49e8f5, 0xd02b4c2a, 0xf610f123, 0xf6200601, 0x80b140d, 0x3b150105,
    // -20, -22, 42, 39, -13, 0, -44, 3, -4, -5, 23, 14, -30, -36, -11, 0, 15, -7, -60, 34, 36, 38, -15, -10, -24, -23, 6, -2, 2, 18, -45, -12
    0x272aeaec, 0x3d400f3, 0xe17fbfc, 0xf5dce2, 0x22c4f90f, 0xf6f12624, 0xfe06e9e8, 0xf4d31202,
    // 6, 5, 0, -25, 9, -26, -45, -25, 55, -3, 44, -5, 17, 94, 42, -11, -16, 6, -4, 10, 9, 24, 77, -25, 36, 62, 21, 76, 18, 7, 12, 34
    0xe7000506, 0xe7d3e609, 0xfb2cfd37, 0xf52a5e11, 0xafc06f0, 0xe74d1809, 0x4c153e24, 0x220c0712,
    // 25, -30, 10, 7, 0, -13, -20, 3, 15, 16, 10, 35, -13, -17, -36, 25, 27, 0, -8, 38, 38, -8, -24, -4, 4, -27, 15, 28, 0, 51, -6, -20
    0x70ae219, 0x3ecf300, 0x230a100f, 0x19dceff3, 0x26f8001b, 0xfce8f826, 0x1c0fe504, 0xecfa3300,
    // -20, 25, -22, 19, -19, 13, 26, 37, 1, -50, 49, 31, -15, 43, 21, -23, 2, 11, 46, -11, 28, -48, -74, 50, -19, 36, -19, -9, 41, 16, -6, -17
    0x13ea19ec, 0x251a0ded, 0x1f31ce01, 0xe9152bf1, 0xf52e0b02, 0x32b6d01c, 0xf7ed24ed, 0xeffa1029,
    // 9, 7, 2, -29, -37, 55, -1, -41, -20, -3, -21, 15, 11, -23, -5, -1, -40, -45, -37, -5, 4, -4, 37, 10, 40, 35, 1, 10, 22, -30, -22, -49
    0xe3020709, 0xd7ff37db, 0xfebfdec, 0xfffbe90b, 0xfbdbd3d8, 0xa25fc04, 0xa012328, 0xcfeae216,
    // 1, -28, -8, 12, 37, 42, 47, -21, 17, -24, -41, 53, -15, -20, 77, 20, -12, -17, 8, 69, 2, -14, -7, 11, 6, -41, -18, 0, -25, 17, -23, -78
    0xcf8e401, 0xeb2f2a25, 0x35d7e811, 0x144decf1, 0x4508eff4, 0xbf9f202, 0xeed706, 0xb2e911e7,
    // 22, 49, -14, 17, 37, 28, -2, -6, 4, 11, 33, -39, 14, 7, -20, -43, -11, -8, 3, 31, -34, -34, 24, -4, -50, 23, -20, -8, -35, -56, 68, 8
    0x11f23116, 0xfafe1c25, 0xd9210b04, 0xd5ec070e, 0x1f03f8f5, 0xfc18dede, 0xf8ec17ce, 0x844c8dd,
    // 6, 3, 3, 22, -9, -1, -11, -14, 14, 1, 25, -23, 5, 86, 33, 7, -2, 10, -17, -59, -19, 5, 28, -1, 10, 94, -2, 32, 2, -7, 2, 35
    0x16030306, 0xf2f5fff7, 0xe919010e, 0x7215605, 0xc5ef0afe, 0xff1c05ed, 0x20fe5e0a, 0x2302f902,
    // -83, 7, 9, -4, 12, 0, 6, 8, -3, 18, -5, 10, -5, 6, -15, -6, 5, -7, 18, 6, 6, -5, -5, 3, 14, 12, 7, 3, 3, -5, -9, 10
    0xfc0907ad, 0x806000c, 0xafb12fd, 0xfaf106fb, 0x612f905, 0x3fbfb06, 0x3070c0e, 0xaf7fb03,
    // -17, 11, -7, 19, -90, 75, -9, -22, 25, 14, 108, 5, 27, -17, 38, 18, -13, -20, -21, 4, 42, 7, 21, -8, -30, -29, -12, 59, -5, 41, -18, 63
    0x13f90bef, 0xeaf74ba6, 0x56c0e19, 0x1226ef1b, 0x4ebecf3, 0xf815072a, 0x3bf4e3e2, 0x3fee29fb,
    // -26, 1, -51, -47, -2, -22, 57, -13, 14, -13, 7, 18, 17, 37, 34, 5, -74, 59, -46, -79, 46, -45, 11, 16, 16, -14, 15, -66, -18, 18, 15, 9
    0xd1cd01e6, 0xf339eafe, 0x1207f30e, 0x5222511, 0xb1d23bb6, 0x100bd32e, 0xbe0ff210, 0x90f12ee,
    // -23, -12, 23, -44, -36, -23, 72, -28, -26, -22, 3, -27, -1, 7, -7, -29, -27, -25, 45, 19, -16, -56, 3, -36, 41, -2, -32, 55, 12, 17, 21, 32
    0xd417f4e9, 0xe448e9dc, 0xe503eae6, 0xe3f907ff, 0x132de7e5, 0xdc03c8f0, 0x37e0fe29, 0x2015110c,
    // 23, 20, 0, -8, 17, 60, -50, -41, 23, -27, -24, 34, -35, -26, -5, -4, -18, -105, -53, 20, -14, 13, -4, 14, -80, -6, 5, 37, 12, 91, -39, -26
    0xf8001417, 0xd7ce3c11, 0x22e8e517, 0xfcfbe6dd, 0x14cb97ee, 0xefc0df2, 0x2505fab0, 0xe6d95b0c,
    // -21, -77, 36, 26, -9, -60, 37, 8, -2, 20, 0, -66, 55, -2, -82, -16, 7, -59, 0, -34, 38, -52, 70, 39, 27, 31, -112, 4, -49, 0, 2, 41
    0x1a24b3eb, 0x825c4f7, 0xbe0014fe, 0xf0aefe37, 0xde00c507, 0x2746cc26, 0x4901f1b, 0x290200cf,
    // 14, 20, -1, 24, 37, -5, -16, -55, 19, -33, 71, -42, 4, -2, 5, -9, -59, 22, -27, -10, 35, -35, 31, -6, 62, -42, -13, -27, -60, 27, -9, -54
    0x18ff140e, 0xc9f0fb25, 0xd647df13, 0xf705fe04, 0xf6e516c5, 0xfa1fdd23, 0xe5f3d63e, 0xcaf71bc4,
    // -13, 30, 12, 11, -20, -14, -40, -27, 50, 0, -46, -15, -15, -25, -27, -13, 17, -15, 2, 15, 21, -32, 70, 30, -12, -47, 3, -39, 7, 3, 3, 58
    0xb0c1ef3, 0xe5d8f2ec, 0xf1d20032, 0xf3e5e7f1, 0xf02f111, 0x1e46e015, 0xd903d1f4, 0x3a030307,
    // 45, 4, -30, 12, -16, -1, -12, -35, 12, 1, -2, 16, 36, -4, 27, 5, -28, 15, -3, 28, 18, -22, 11, 26, 37, 4, -2, 18, 26, 34, 4, -68
    0xce2042d, 0xddf4fff0, 0x10fe010c, 0x51bfc24, 0x1cfd0fe4, 0x1a0bea12, 0x12fe0425, 0xbc04221a,
    // -58, -72, 85, 18, 18, -24, -74, 49, 28, -13, 18, 4, 46, 22, 74, -1, -10, -77, 51, 20, 77, -41, -22, 83, 30, -22, -128, -1, -89, -7, -28, -37
    0x1255b8c6, 0x31b6e812, 0x412f31c, 0xff4a162e, 0x1433b3f6, 0x53ead74d, 0xff80ea1e, 0xdbe4f9a7,
    // -41, 86, -19, 67, 47, -101, 27, -89, -19, -13, 98, -55, 13, -24, -1, -22, -11, -2, 2, 17, -8, 49, 95, 21, 3, 59, 70, 33, 81, 75, 40, 76
    0x43ed56d7, 0xa71b9b2f, 0xc962f3ed, 0xeaffe80d, 0x1102fef5, 0x155f31f8, 0x21463b03, 0x4c284b51,
    // 18, -9, -22, 12, 23, -30, 27, -10, -17, -30, 14, 17, 16, -38, 60, -12, 24, 1, 32, 66, -3, 13, 10, 13, 39, -59, 20, 26, 31, 32, 28, -50
    0xceaf712, 0xf61be217, 0x110ee2ef, 0xf43cda10, 0x42200118, 0xd0a0dfd, 0x1a14c527, 0xce1c201f,
    // 26, -23, 26, 13, 36, 59, -11, 12, 38, 16, -5, -1, 11, 11, 24, -20, 62, -59, -54, 31, 51, 19, -10, -44, 56, -7, -26, -12, 14, 18, 20, 29
    0xd1ae91a, 0xcf53b24, 0xfffb1026, 0xec180b0b, 0x1fcac53e, 0xd4f61333, 0xf4e6f938, 0x1d14120e,
    // 3, 1, -2, 0, 22, 28, -16, 2, 36, -8, -34, -20, -27, 77, 40, 44, -77, -17, -20, -11, -22, 5, -2, 6, 2, 29, -18, 73, -2, 6, -3, -69
    0xfe0103, 0x2f01c16, 0xecdef824, 0x2c284de5, 0xf5ecefb3, 0x6fe05ea, 0x49ee1d02, 0xbbfd06fe,
    // -34, -29, -27, -51, -4, -9, 24, -24, 2, -3, -11, -3, 24, 50, -14, -7, -14, -19, 49, -27, -3, -47, -42, 11, 26, -9, -10, -12, -8, 17, 42, -5
    0xcde5e3de, 0xe818f7fc, 0xfdf5fd02, 0xf9f23218, 0xe531edf2, 0xbd6d1fd, 0xf4f6f71a, 0xfb2a11f8,
    // -6, 0, -17, 19, 16, 55, 11, -22, 39, -7, -15, -14, -35, 21, -38, 46, -9, 10, 29, -68, -6, -37, 14, 8, -19, 25, -34, -19, -6, 43, -26, -22
    0x13ef00fa, 0xea0b3710, 0xf2f1f927, 0x2eda15dd, 0xbc1d0af7, 0x80edbfa, 0xedde19ed, 0xeae62bfa,
    // -28, -18, -37, -71, 14, 10, 53, -17, -1, 21, -21, -5, 20, 41, 16, -3, -37, -26, 31, -67, -25, -6, 5, 2, -23, 45, -30, -32, 1, -12, 31, -9
    0xb9dbeee4, 0xef350a0e, 0xfbeb15ff, 0xfd102914, 0xbd1fe6db, 0x205fae7, 0xe0e22de9, 0xf71ff401,
    // -17, -14, -28, -52, -1, 20, 88, -32, 7, -7, 52, -23, 5, 54, -13, -14, 29, -3, -16, -7, 54, 19, 9, 16, -45, 39, -18, -15, -2, -24, 6, 12
    0xcce4f2ef, 0xe05814ff, 0xe934f907, 0xf2f33605, 0xf9f0fd1d, 0x10091336, 0xf1ee27d3, 0xc06e8fe,
    // -31, 36, 23, 13, -40, 3, 19, -14, 4, -41, 24, 8, -23, -38, -17, 20, -16, -23, -29, 19, -2, 1, 53, -8, -21, 22, 5, -15, -12, -64, -20, -43
    0xd1724e1, 0xf21303d8, 0x818d704, 0x14efdae9, 0x13e3e9f0, 0xf83501fe, 0xf10516eb, 0xd5ecc0f4,
    // 35, 24, 13, 66, -28, -6, -68, 119, 60, 33, 48, 32, 26, -6, 11, -9, -44, -54, -47, 15, -55, -7, -15, 0, 30, -29, -34, 33, 29, -40, 22, 18
    0x420d1823, 0x77bcfae4, 0x2030213c, 0xf70bfa1a, 0xfd1cad4, 0xf1f9c9, 0x21dee31e, 0x1216d81d,
    // 23, -30, -55, -12, -12, -115, 12, -2, -7, 23, -35, -7, 40, 25, -34, -87, 48, 36, 3, -10, -46, 6, -15, -8, 39, 78, 3, -40, -5, 6, 43, -27
    0xf4c9e217, 0xfe0c8df4, 0xf9dd17f9, 0xa9de1928, 0xf6032430, 0xf8f106d2, 0xd8034e27, 0xe52b06fb,
    // 25, -9, 5, -5, 0, 52, 50, -10, 20, 17, -25, 1, -6, -53, -28, 28, -19, 32, 37, 54, 6, 1, -6, -23, 9, -39, 10, -6, -2, 20, -10, -18
    0xfb05f719, 0xf6323400, 0x1e71114, 0x1ce4cbfa, 0x362520ed, 0xe9fa0106, 0xfa0ad909, 0xeef614fe,
    // 68, -5, -20, -14, 23, -14, 9, 22, 3, -2, -5, 4, 3, 19, 64, 10, -22, 0, 3, -40, -82, -32, -6, -8, -47, -33, -6, -8, 47, 15, 7, -37
    0xf2ecfb44, 0x1609f217, 0x4fbfe03, 0xa401303, 0xd80300ea, 0xf8fae0ae, 0xf8fadfd1, 0xdb070f2f,
};
static const uint embedded_decoder3_ResidualBlock_2_body_pw_contract_bias_dwords[16] = {
    // 0.0001158, -0.0001296, -0.0001998, -0.0002033, 4.363e-05, 0.0002747, -7.963e-05, 6.187e-05, 0.0001233, -5e-07, 9.763e-05, -0.0001105, -9.626e-05, -0.00011754, 0.0002391, -0.00011647
    0x883f0797, 0x8aa98a8c, 0xc8002dc, 0x40e8538, 0x8008080a, 0x873e0666, 0x87b4864f, 0x87a20bd6,
    // 5.63e-05, -7.457e-05, -9.435e-05, -0.0002067, -0.0001638, -0.0002983, -8.756e-05, -0.000225, -0.0002397, -2.915e-05, -2.1e-05, 4.56e-05, -3.34e-06, -0.0001297, -1.27e-05, -7.24e-05
    0x84e303b1, 0x8ac6862f, 0x8ce3895e, 0x8b5f85bd, 0x81e98bdb, 0x2fd8160, 0x88408038, 0x84bf80d5,
};
static const uint embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 7, 4, -4, -4, 20, 12, -9, 4, -20, 1, -19, -1, 8, -5, 20, 6, 33, 99, 6, 15, 4, 10, -23, 35, 28, -19, -17, 1, 10, 19, 16, -16
    0xfcfc0407, 0x4f70c14, 0xffed01ec, 0x614fb08, 0xf066321, 0x23e90a04, 0x1efed1c, 0xf010130a,
    // -19, 65, -45, 28, -13, 49, -11, 50, 4, -10, 5, 3, -60, 37, 62, -12, -10, 26, -54, 15, -19, 40, -13, 22, -25, 0, -36, -60, -2, -34, -95, -53
    0x1cd341ed, 0x32f531f3, 0x305f604, 0xf43e25c4, 0xfca1af6, 0x16f328ed, 0xc4dc00e7, 0xcba1defe,
    // 78, -9, -62, 34, -9, 32, 0, 16, -12, 18, -13, -53, 7, 13, 43, -3, -1, 20, 3, -44, 8, 41, -26, 8, -16, 10, -28, -47, -70, 18, -2, 13
    0x22c2f74e, 0x100020f7, 0xcbf312f4, 0xfd2b0d07, 0xd40314ff, 0x8e62908, 0xd1e40af0, 0xdfe12ba,
    // 13, -32, 6, 46, -21, -7, 32, 1, -6, -16, -12, 30, -21, 10, -44, -23, -52, 32, 47, -7, 9, -25, -15, 31, -42, -10, 19, -30, 1, -23, 36, -22
    0x2e06e00d, 0x120f9eb, 0x1ef4f0fa, 0xe9d40aeb, 0xf92f20cc, 0x1ff1e709, 0xe213f6d6, 0xea24e901,
    // -5, -8, -10, 3, -1, 6, -12, 5, 7, -16, 15, -19, -12, 1, 7, 9, -15, 13, 6, -21, -5, -24, -30, 23, -1, -22, 37, 25, 1, -7, 0, -11
    0x3f6f8fb, 0x5f406ff, 0xed0ff007, 0x90701f4, 0xeb060df1, 0x17e2e8fb, 0x1925eaff, 0xf500f901,
    // -35, -15, -1, 3, 7, -1, -10, -7, 13, 9, -9, 11, -31, 11, -27, -1, 22, -14, 48, 2, 25, -34, -32, 43, 20, -10, 9, 6, 9, -14, -16, 64
    0x3fff1dd, 0xf9f6ff07, 0xbf7090d, 0xffe50be1, 0x230f216, 0x2be0de19, 0x609f614, 0x40f0f209,
    // -23, 66, 18, -3, 35, 4, -12, 19, -30, -18, -41, 71, 8, -32, -22, 2, 7, 30, 33, 92, -4, 41, 80, 9, -99, 3, -44, -81, -61, 7, -51, 22
    0xfd1242e9, 0x13f40423, 0x47d7eee2, 0x2eae008, 0x5c211e07, 0x95029fc, 0xafd4039d, 0x16cd07c3,
    // -41, 1, 15, -26, -2, -13, -17, -7, 23, -15, 3, 15, -21, 17, -20, -5, -15, -2, 9, -4, -4, 26, -30, 20, -15, -7, 33, 29, 5, -46, -24, -29
    0xe60f01d7, 0xf9eff3fe, 0xf03f117, 0xfbec11eb, 0xfc09fef1, 0x14e21afc, 0x1d21f9f1, 0xe3e8d205,
    // -11, 18, 12, -1, -13, -6, -2, 16, 6, -19, 6, 14, 12, 8, -3, 17, -3, 5, 14, 15, -62, 5, -5, -4, 23, 3, -4, -20, -10, -11, 3, 24
    0xff0c12f5, 0x10fefaf3, 0xe06ed06, 0x11fd080c, 0xf0e05fd, 0xfcfb05c2, 0xecfc0317, 0x1803f5f6,
    // -5, 37, 21, 11, 17, -12, 19, 10, -8, -4, -35, 64, -6, -11, -23, -15, -39, 23, 102, -10, 8, -23, 8, 45, 1, -10, 12, -2, -44, 9, 6, 60
    0xb1525fb, 0xa13f411, 0x40ddfcf8, 0xf1e9f5fa, 0xf66617d9, 0x2d08e908, 0xfe0cf601, 0x3c0609d4,
    // -7, 11, -14, 30, 1, 19, -27, 27, -30, -22, -39, -27, -56, 13, -25, -29, 96, -62, -20, -23, 1, 44, 38, 17, 15, 40, 1, -82, 24, 46, -22, -35
    0x1ef20bf9, 0x1be51301, 0xe5d9eae2, 0xe3e70dc8, 0xe9ecc260, 0x11262c01, 0xae01280f, 0xddea2e18,
    // 3, 17, 1, 17, -13, -8, 14, 19, 23, -41, 12, 62, 10, -19, -17, -9, -31, -24, -14, -16, -12, -22, -65, 62, -2, -2, -13, 0, 55, -28, -27, -46
    0x11011103, 0x130ef8f3, 0x3e0cd717, 0xf7efed0a, 0xf0f2e8e1, 0x3ebfeaf4, 0xf3fefe, 0xd2e5e437,
    // 85, 8, -31, 29, 11, -3, -43, 14, -22, -15, -64, -9, 4, 13, -38, -14, 32, -9, 5, -76, -3, -19, -8, 11, 59, 39, 14, -18, -17, 42, 16, -47
    0x1de10855, 0xed5fd0b, 0xf7c0f1ea, 0xf2da0d04, 0xb405f720, 0xbf8edfd, 0xee0e273b, 0xd1102aef,
    // -13, -3, -20, 32, -52, 7, -24, 19, -3, 36, -47, 1, -41, 4, -15, -17, 38, 8, 9, -6, -29, 66, -81, 47, -7, 13, 60, -21, -63, -34, -11, -82
    0x20ecfdf3, 0x13e807cc, 0x1d124fd, 0xeff104d7, 0xfa090826, 0x2faf42e3, 0xeb3c0df9, 0xaef5dec1,
    // -23, 11, 21, -23, 4, -16, -4, -7, 25, -3, 5, 17, -1, 7, -8, -2, -19, -7, 36, -19, -5, 18, -31, 1, 41, -3, 20, 38, 22, -26, 13, -4
    0xe9150be9, 0xf9fcf004, 0x1105fd19, 0xfef807ff, 0xed24f9ed, 0x1e112fb, 0x2614fd29, 0xfc0de616,
    // -12, -20, 19, 3, -22, -21, 22, -19, 29, 19, 14, 22, 5, 18, 1, 3, -9, -33, -29, 11, -3, 33, -13, -39, 13, 11, -14, 5, 40, -54, 21, -24
    0x313ecf4, 0xed16ebea, 0x160e131d, 0x3011205, 0xbe3dff7, 0xd9f321fd, 0x5f20b0d, 0xe815ca28,
    // -11, 15, 7, -10, 15, 3, 0, 2, -14, 2, -11, 3, 7, -4, 24, 13, 29, 88, 8, 22, 1, -1, -17, 47, 30, -23, -9, 4, 10, 13, 30, -25
    0xf6070ff5, 0x200030f, 0x3f502f2, 0xd18fc07, 0x1608581d, 0x2fefff01, 0x4f7e91e, 0xe71e0d0a,
    // -60, 57, -20, 7, -30, 31, 6, 69, 5, 5, 20, -12, -58, 14, 60, 3, -18, 21, -51, 16, -19, 1, -7, 32, -11, 5, -39, -59, -2, -42, -80, -62
    0x7ec39c4, 0x45061fe2, 0xf4140505, 0x33c0ec6, 0x10cd15ee, 0x20f901ed, 0xc5d905f5, 0xc2b0d6fe,
    // -2, -35, -10, -2, -30, -12, 51, 26, -18, 30, 37, -19, 8, 7, 68, 53, -1, 5, 37, -23, 3, -15, 12, 50, 6, 58, -26, -35, -59, 30, 18, -4
    0xfef6ddfe, 0x1a33f4e2, 0xed251eee, 0x35440708, 0xe92505ff, 0x320cf103, 0xdde63a06, 0xfc121ec5,
    // -9, -35, 18, 41, -28, -12, 46, -4, -5, -2, -14, 41, -3, 6, -42, -21, -56, 20, 54, -1, 3, -32, -11, 35, -32, -3, 9, -26, 6, -28, 26, -24
    0x2912ddf7, 0xfc2ef4e4, 0x29f2fefb, 0xebd606fd, 0xff3614c8, 0x23f5e003, 0xe609fde0, 0xe81ae406,
    // 4, -16, -12, 4, -2, 7, -16, 6, 4, -16, 10, -22, -9, -7, -7, -2, -11, 13, 9, -22, -5, -20, -38, 13, -4, -20, 37, 21, 10, -13, 0, -4
    0x4f4f004, 0x6f007fe, 0xea0af004, 0xfef9f9f7, 0xea090df5, 0xddaecfb, 0x1525ecfc, 0xfc00f30a,
    // -22, -14, -2, 9, 13, 5, -19, -16, 11, -1, -13, 14, -21, 15, -32, -8, 30, -14, 48, 1, 28, -26, -40, 34, 13, -4, 9, 6, 10, -18, -19, 66
    0x9fef2ea, 0xf0ed050d, 0xef3ff0b, 0xf8e00feb, 0x130f21e, 0x22d8e61c, 0x609fc0d, 0x42edee0a,
    // -40, 66, 44, -9, 45, -4, -4, 4, -36, -30, -41, 86, 15, -22, -7, 16, 8, 19, 36, 89, -1, 23, 73, 12, -87, -1, -45, -70, -62, 0, -52, 19
    0xf72c42d8, 0x4fcfc2d, 0x56d7e2dc, 0x10f9ea0f, 0x59241308, 0xc4917ff, 0xbad3ffa9, 0x13cc00c2,
    // -8, 8, -11, 1, 5, -4, -38, -17, 29, -19, -21, 1, -27, 11, -35, -23, -13, 2, -5, -5, -1, 54, -35, 14, -29, -18, 44, 22, 2, -37, -31, -24
    0x1f508f8, 0xefdafc05, 0x1ebed1d, 0xe9dd0be5, 0xfbfb02f3, 0xedd36ff, 0x162ceee3, 0xe8e1db02,
    // -7, 12, 3, 2, -10, -13, -15, 10, 4, -14, -9, 7, 0, 4, 1, -3, -17, -5, -6, 15, -63, 1, 0, 8, 29, -17, -6, -16, -22, -16, -1, 24
    0x2030cf9, 0xaf1f3f6, 0x7f7f204, 0xfd010400, 0xffafbef, 0x80001c1, 0xf0faef1d, 0x18fff0ea,
    // -17, 23, 39, 5, 24, -20, 30, -6, -6, -18, -36, 74, 13, -4, -21, -12, -40, 18, 109, -9, 10, -37, -3, 30, 5, -8, 4, 6, -47, -6, -1, 57
    0x52717ef, 0xfa1eec18, 0x4adceefa, 0xf4ebfc0d, 0xf76d12d8, 0x1efddb0a, 0x604f805, 0x39fffad1,
    // -65, -15, 27, -29, 2, 28, 22, 51, -37, -12, 22, -31, -31, 30, -11, 41, 76, -57, 4, -15, 0, 8, 39, 10, 34, 44, -12, -80, 23, 39, -9, -47
    0xe31bf1bf, 0x33161c02, 0xe116f4db, 0x29f51ee1, 0xf104c74c, 0xa270800, 0xb0f42c22, 0xd1f72717,
    // 7, 12, -22, 33, -20, -1, 6, 22, 14, -24, 1, 20, 10, -54, -19, -40, -37, -9, -29, -18, -10, -5, -69, 47, 7, -17, -10, 1, 45, -31, -34, -41
    0x21ea0c07, 0x1606ffec, 0x1401e80e, 0xd8edca0a, 0xeee3f7db, 0x2fbbfbf6, 0x1f6ef07, 0xd7dee12d,
    // -5, -34, 21, -8, -1, -42, 16, 1, -17, -12, -11, 21, 4, 22, -4, 55, 21, -24, 40, -49, -9, -68, 31, 45, 78, 69, 16, -5, -11, 53, 35, -68
    0xf815defb, 0x110d6ff, 0x15f5f4ef, 0x37fc1604, 0xcf28e815, 0x2d1fbcf7, 0xfb10454e, 0xbc2335f5,
    // -56, -14, -2, -2, -44, 3, 2, 23, -12, 41, 1, 20, -33, 25, 19, 49, 29, -1, 15, 4, -35, 34, -60, 74, 9, 23, 71, -12, -74, -31, 1, -94
    0xfefef2c8, 0x170203d4, 0x140129f4, 0x311319df, 0x40fff1d, 0x4ac422dd, 0xf4471709, 0xa201e1b6,
    // -1, 13, -5, 3, -3, -14, -29, -17, 28, -6, -24, 7, -9, -4, -19, -34, -13, -4, 24, -26, -5, 38, -35, -7, 34, -12, 21, 37, 21, -23, 2, 3
    0x3fb0dff, 0xefe3f2fd, 0x7e8fa1c, 0xdeedfcf7, 0xe618fcf3, 0xf9dd26fb, 0x2515f422, 0x302e915,
    // 8, -12, -3, 27, -24, -20, 7, -33, 35, 20, -13, 21, -8, 14, 3, -24, -6, -34, -42, 13, -3, 46, -1, -28, 9, 17, -9, 2, 40, -39, 13, -24
    0x1bfdf408, 0xdf07ece8, 0x15f31423, 0xe8030ef8, 0xdd6defa, 0xe4ff2efd, 0x2f71109, 0xe80dd928,
    // -2, -22, 5, 0, 13, -16, -1, -19, 13, 6, -6, -1, 28, -4, -4, -12, 27, 91, 1, 22, 0, -10, -7, 40, 19, -22, -5, 10, 11, 8, 16, -26
    0x5eafe, 0xedfff00d, 0xfffa060d, 0xf4fcfc1c, 0x16015b1b, 0x28f9f600, 0xafbea13, 0xe610080b,
    // -29, 12, -19, -13, -13, 16, 36, -18, 62, -23, 6, -11, -55, 13, 8, -39, -23, 26, -81, 21, -6, -7, -11, 13, -54, -8, -5, -59, 8, -37, -75, -55
    0xf3ed0ce3, 0xee2410f3, 0xf506e93e, 0xd9080dc9, 0x15af1ae9, 0xdf5f9fa, 0xc5fbf8ca, 0xc9b5db08,
    // 15, -28, -9, -27, -41, -27, 30, -19, 56, 11, 0, -4, 34, -34, 2, -45, -2, 21, 0, -70, 4, -2, -37, -50, -15, -13, -51, -40, -70, 6, -21, 12
    0xe5f7e40f, 0xed1ee5d7, 0xfc000b38, 0xd302de22, 0xba0015fe, 0xcedbfe04, 0xd8cdf3f1, 0xceb06ba,
    // -16, 34, 15, 50, -15, -8, 3, 37, -20, -7, -33, 53, -36, -6, -23, 4, -46, 26, 64, -33, 2, -22, -36, -24, -8, -51, -24, -36, -16, -37, 17, -31
    0x320f22f0, 0x2503f8f1, 0x35dff9ec, 0x4e9fadc, 0xdf401ad2, 0xe8dcea02, 0xdce8cdf8, 0xe111dbf0,
    // -3, 4, 14, 3, -12, -23, -17, 6, 14, 3, 11, 1, -10, 15, -1, 21, -21, 13, 21, -20, -8, -6, -24, 36, 10, 9, 10, 24, 5, -7, -16, -11
    0x30e04fd, 0x6efe9f4, 0x10b030e, 0x15ff0ff6, 0xec150deb, 0x24e8faf8, 0x180a090a, 0xf5f0f905,
    // -20, -4, -19, 15, 11, 11, -18, 15, 3, 15, -5, 2, -28, 19, -21, 1, 26, -13, 56, 0, 25, -25, -32, 39, 14, -5, 14, 1, 12, -23, -18, 62
    0xfedfcec, 0xfee0b0b, 0x2fb0f03, 0x1eb13e4, 0x38f31a, 0x27e0e719, 0x10efb0e, 0x3eeee90c,
    // -6, 25, -14, -2, 52, 39, 2, -4, -34, -50, -30, 34, 14, -54, -20, -27, 19, 34, -3, 85, 10, 10, 59, -8, -128, -50, 19, -85, -57, -1, -20, 27
    0xfef219fa, 0xfc022734, 0x22e2cede, 0xe5ecca0e, 0x55fd2213, 0xf83b0a0a, 0xab13ce80, 0x1becffc7,
    // -20, -5, -16, -3, 5, 16, -24, 6, -19, -10, 1, -10, -40, 26, -2, 26, -12, -2, 19, 8, -3, 46, -19, 49, -14, 16, 40, 24, 13, -32, -14, -30
    0xfdf0fbec, 0x6e81005, 0xf601f6ed, 0x1afe1ad8, 0x813fef4, 0x31ed2efd, 0x182810f2, 0xe2f2e00d,
    // 2, -10, -2, -6, -7, 16, 16, -11, 2, -15, -4, -13, 14, 9, -2, 17, -23, -9, -8, 28, -59, -13, 4, 24, 16, -15, 26, -25, 3, -5, 13, 28
    0xfafef602, 0xf51010f9, 0xf3fcf102, 0x11fe090e, 0x1cf8f7e9, 0x1804f3c5, 0xe71af110, 0x1c0dfb03,
    // 8, 10, 0, 18, 27, 19, 26, -12, -21, -23, -38, 28, -8, -29, -23, -15, -37, 27, 90, -15, 18, -62, -3, 36, -11, -28, 41, -12, -40, 5, 15, 56
    0x12000a08, 0xf41a131b, 0x1cdae9eb, 0xf1e9e3f8, 0xf15a1bdb, 0x24fdc212, 0xf429e4f5, 0x380f05d8,
    // -16, 11, 23, -10, 10, -18, -19, -4, 42, -45, -16, -10, -27, -20, -53, -65, 95, -40, -66, -52, -2, 1, 4, -60, -5, -58, 22, -70, -4, 8, -33, -26
    0xf6170bf0, 0xfcedee0a, 0xf6f0d32a, 0xbfcbece5, 0xccbed85f, 0xc40401fe, 0xba16c6fb, 0xe6df08fc,
    // 1, 12, -12, 38, 0, 32, 17, 0, -26, -46, 2, 18, -29, -24, 3, 47, -21, -14, -15, -17, -4, -12, -52, 55, 8, -3, 7, 0, 51, -23, -2, -51
    0x26f40c01, 0x112000, 0x1202d2e6, 0x2f03e8e3, 0xeff1f2eb, 0x37ccf4fc, 0x7fd08, 0xcdfee933,
    // 19, -30, -8, -41, -22, -28, -9, -10, 22, -26, -51, 10, 33, -52, -49, -38, 41, -3, -11, -111, -16, -83, -32, -65, 52, -45, 9, -3, -29, 19, -2, -45
    0xd7f8e213, 0xf6f7e4ea, 0xacde616, 0xdacfcc21, 0x91f5fd29, 0xbfe0adf0, 0xfd09d334, 0xd3fe13e3,
    // -32, -20, -14, 19, -41, -20, -23, 9, 36, 26, -26, 8, -11, -23, -25, -39, 37, 9, 1, -11, -34, 28, -87, -7, -9, -25, 71, -22, -71, -51, -20, -84
    0x13f2ece0, 0x9e9ecd7, 0x8e61a24, 0xd9e7e9f5, 0xf5010925, 0xf9a91cde, 0xea47e7f7, 0xaceccdb9,
    // -2, -17, -5, 2, 10, 19, -3, -20, -15, -5, 0, -29, -17, 17, 4, 31, -21, -6, 39, -2, 2, 22, -10, 40, 40, 35, 32, 34, 28, -11, 24, -8
    0x2fbeffe, 0xecfd130a, 0xe300fbf1, 0x1f0411ef, 0xfe27faeb, 0x28f61602, 0x22202328, 0xf818f51c,
    // -11, -8, -16, 17, -24, 29, 11, -6, -10, 20, 6, 11, -15, 16, 21, 19, -7, -41, -20, 18, -1, 44, 3, -15, 26, 40, -25, 4, 49, -39, 27, -24
    0x11f0f8f5, 0xfa0b1de8, 0xb0614f6, 0x131510f1, 0x12ecd7f9, 0xf1032cff, 0x4e7281a, 0xe81bd931,
    // 8, -19, 15, -10, 16, -10, 10, -4, 2, 5, 6, -1, 8, -15, 5, 4, 30, 101, 2, 18, 1, 8, -7, 50, 16, -16, 8, 11, 17, 14, 25, -19
    0xf60fed08, 0xfc0af610, 0xff060502, 0x405f108, 0x1202651e, 0x32f90801, 0xb08f010, 0xed190e11,
    // -17, 31, -7, -1, -14, 19, 30, 6, 39, -5, 45, -18, -66, 8, 16, -27, -22, 30, -74, 25, -6, -5, -2, 27, -53, -5, 21, -58, 19, -46, -56, -55
    0xfff91fef, 0x61e13f2, 0xee2dfb27, 0xe51008be, 0x19b61eea, 0x1bfefbfa, 0xc615fbcb, 0xc9c8d213,
    // 42, 12, 6, 13, -23, -6, 25, -20, 28, 30, 76, 25, 13, 8, 31, 4, -6, 6, 3, -44, 1, 14, 8, 22, -17, -29, 20, -31, -57, 9, 4, 9
    0xd060c2a, 0xec19fae9, 0x194c1e1c, 0x41f080d, 0xd40306fa, 0x16080e01, 0xe114e3ef, 0x90409c7,
    // 1, 43, 8, 65, 1, 16, -2, 36, -32, -6, -24, 63, -27, 3, -7, 6, -44, 23, 62, -28, 2, -8, -31, -13, -9, -47, -15, -37, -12, -33, 7, -25
    0x41082b01, 0x24fe1001, 0x3fe8fae0, 0x6f903e5, 0xe43e17d4, 0xf3e1f802, 0xdbf1d1f7, 0xe707dff4,
    // 0, 5, 7, 8, -13, -16, -25, 13, 10, 1, -1, 0, -7, 10, -11, 7, -19, 11, 20, -22, -8, -2, -32, 28, 8, 6, 8, 21, 9, -11, -18, -5
    0x8070500, 0xde7f0f3, 0xff010a, 0x7f50af9, 0xea140bed, 0x1ce0fef8, 0x15080608, 0xfbeef509,
    // -21, -20, -13, 12, 10, 17, -15, -4, 6, 6, -25, 6, -23, 17, -23, 2, 25, -16, 56, -2, 23, -25, -35, 34, 25, -2, 3, 3, 7, -20, -32, 59
    0xcf3eceb, 0xfcf1110a, 0x6e70606, 0x2e911e9, 0xfe38f019, 0x22dde717, 0x303fe19, 0x3be0ec07,
    // -9, -1, 20, -8, 60, 25, 29, -26, -38, -44, -18, 46, 3, -52, -22, 8, 28, 36, 12, 99, 6, 15, 78, -5, -124, -21, 24, -73, -42, -9, -13, 24
    0xf814fff7, 0xe61d193c, 0x2eeed4da, 0x8eacc03, 0x630c241c, 0xfb4e0f06, 0xb718eb84, 0x18f3f7d6,
    // -46, -24, -14, -7, -6, -3, -26, 1, 3, -19, -39, -29, -28, 5, -16, 1, -19, -4, 10, -2, -2, 27, -32, 24, -15, 6, 16, 20, -2, -29, -27, -34
    0xf9f2e8d2, 0x1e6fdfa, 0xe3d9ed03, 0x1f005e4, 0xfe0afced, 0x18e01bfe, 0x141006f1, 0xdee5e3fe,
    // 4, -21, -17, -7, -1, -5, 7, 0, -22, -20, -4, -5, -7, -9, 1, -18, -16, 10, -6, 19, -51, -3, -5, 9, 7, -4, 20, -23, 8, -3, 16, 32
    0xf9efeb04, 0x7fbff, 0xfbfcecea, 0xee01f7f9, 0x13fa0af0, 0x9fbfdcd, 0xe914fc07, 0x2010fd08,
    // 11, -8, 21, 18, 35, 27, 41, -26, -34, -17, -32, 32, -6, -23, -21, 3, -41, 26, 97, -3, 12, -45, 7, 41, 4, -16, 35, 2, -38, 1, 9, 52
    0x1215f80b, 0xe6291b23, 0x20e0efde, 0x3ebe9fa, 0xfd611ad7, 0x2907d30c, 0x223f004, 0x340901da,
    // 22, 29, 42, -23, 31, 4, 7, 9, 29, -9, 71, 3, -20, 34, -46, 1, 87, -46, -33, -12, -4, 17, 29, -17, -5, -21, 57, -68, 21, -3, -6, -31
    0xe92a1d16, 0x907041f, 0x347f71d, 0x1d222ec, 0xf4dfd257, 0xef1d11fc, 0xbc39ebfb, 0xe1fafd15,
    // 1, 17, -14, 39, -4, 22, 3, 22, -17, -41, -12, -5, -16, -45, 5, 1, -31, -10, -27, -22, 2, -17, -66, 42, 16, 0, -7, -1, 32, -25, -16, -50
    0x27f21101, 0x160316fc, 0xfbf4d7ef, 0x105d3f0, 0xeae5f6e1, 0x2abeef02, 0xfff90010, 0xcef0e720,
    // 46, 2, 8, 0, 6, -25, -4, -31, 2, -11, 41, 51, 10, -1, -12, 36, 33, -17, 10, -76, -20, -57, 15, 4, 52, -52, 79, 7, -13, 30, 13, -51
    0x8022e, 0xe1fce706, 0x3329f502, 0x24f4ff0a, 0xb40aef21, 0x40fc7ec, 0x74fcc34, 0xcd0d1ef3,
    // -9, -3, -9, 8, -22, -2, -5, 12, 19, 43, 36, 42, -29, 20, 2, 8, 23, 7, 4, 5, -32, 54, -58, 52, -13, -24, 120, -18, -59, -47, 1, -81
    0x8f7fdf7, 0xcfbfeea, 0x2a242b13, 0x80214e3, 0x5040717, 0x34c636e0, 0xee78e8f3, 0xaf01d1c5,
    // -27, -35, -9, -3, -9, 2, -7, -17, -4, -14, -37, -40, -15, -10, -6, 0, -20, -3, 32, -14, 1, 7, -27, 17, 46, 24, 9, 36, 14, -10, 9, -6
    0xfdf7dde5, 0xeff902f7, 0xd8dbf2fc, 0xfaf6f1, 0xf220fdec, 0x11e50701, 0x2409182e, 0xfa09f60e,
    // -33, -12, -31, 18, -31, 21, 1, -5, 0, 2, -23, 1, -11, -2, 26, -20, -7, -36, -36, 1, 4, 27, -10, -31, 24, 20, -39, -2, 32, -31, 17, -24
    0x12e1f4df, 0xfb0115e1, 0x1e90200, 0xec1afef5, 0x1dcdcf9, 0xe1f61b04, 0xfed91418, 0xe811e120,
};
static const uint embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias_dwords[8] = {
    // -0.01729, 0.0422, 0.02339, -0.004772, 0.012184, 0.014656, -0.0775, -0.007904, 0.0455, 0.02393, 0.0079, -0.0165, -0.00556, -0.076, 0.02393, 0.0453
    0x2967a46d, 0x9ce325fd, 0x2381223d, 0xa00cacf6, 0x262029d3, 0xa439200b, 0xacdd9db2, 0x29cc2620,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass11(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage__decoder3_ResidualBlock_2_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _decoder3_ResidualBlock_2_residual_func_Split_output_grouped = {
        uint3(960, 540, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 32), // threadGroupSliceSize
        uint3(960, 540, 32), // storageSize
        uint3(32, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        33177600, // threadGroupStorageByteOffset
        storage__decoder3_ResidualBlock_2_residual_func_Split_output_grouped };
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 16), // threadGroupSliceSize
        uint3(1920, 1080, 16), // storageSize
        uint3(16, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.019636496901512146, storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005034407135099173, storage_embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = { embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004575032740831375, storage_embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_decoder3_ResidualBlock_2_body_pw_expand_bias = { embedded_decoder3_ResidualBlock_2_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_decoder3_ResidualBlock_2_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_2_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004621691536158323, storage_embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder3_ResidualBlock_2_body_pw_contract_bias = { embedded_decoder3_ResidualBlock_2_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder3_ResidualBlock_2_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_2_body_pw_contract_bias };
    
    const ConstantBufferStorage<512> storage_embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_HWCN< ConstantBufferStorage<512> > embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 16, 32), // threadGroupSliceSize
        uint4(2, 2, 16, 32), // storageSize
        uint4(512, 1024, 32, 1), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.002772853011265397, storage_embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias = { embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias };
    
    // fused_fused_quantized_NHWC_/decoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_22 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_22 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(128, 2, 16);
    const uint3 groupSize_slice_22 = uint3(128, 2, 16);
    const uint3 storageSize_slice_22 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_22 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_22 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_22 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_22 = dot(groupStart_slice_22, tensorByteStrides_slice_22);
    const float quantizationScale_slice_22 = 0.0217414740473032;
    const RWBufferStorage storage_slice_22 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_22 = { logicalSize_slice_22, groupStart_slice_22, groupSize_slice_22, storageSize_slice_22, tensorByteStrides_slice_22, paddingBegin_slice_22, paddingEnd_slice_22, threadGroupByteOffsetInTensor_slice_22 + 49766400, quantizationScale_slice_22, storage_slice_22 };
    // FusedFusedquantized_/decoder3/ResidualBlock_2/residual_func/Concat_quantized_/decoder3/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/decoder3/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/decoder3/ResidualBlock_2/body/pw_expand/Conv_/decoder3/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/decoder3/ResidualBlock_2/body/pw_contract/Conv_/decoder3/ResidualBlock_2/Add_Fusedquantized_/decoder3/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_quantized_/decoder2/skip_pop_0/Add (32, 540, 960), (16, 1080, 1920), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,), (32, 16, 2, 2), (16,) -> (16, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FNB_CT2D_ADD<32, 1>(0.02035362459719181, 0.028417395427823067, 0.024544769898056984, 0.025662658736109734, _decoder3_ResidualBlock_2_residual_func_Split_output_grouped, fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias, embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_2_body_pw_expand_bias, embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_2_body_pw_contract_bias, embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias, slice_22, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_11
#ifdef MLSR_PASS_11_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass11_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_fused_quantized_NHWC_/decoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_23 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_23 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_23 = uint3(32, 1, 16);
    const uint3 storageSize_slice_23 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_23 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_23 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_23 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_23 = dot(groupStart_slice_23, tensorByteStrides_slice_23);
    const float quantizationScale_slice_23 = 0.0217414740473032;
    const RWBufferStorage storage_slice_23 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_23 = { logicalSize_slice_23, groupStart_slice_23, groupSize_slice_23, storageSize_slice_23, tensorByteStrides_slice_23, paddingBegin_slice_23, paddingEnd_slice_23, threadGroupByteOffsetInTensor_slice_23 + 49766400, quantizationScale_slice_23, storage_slice_23 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_23, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_11_POST


#ifdef MLSR_PASS_12
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/ConvNextBlock.hlsli"

static const uint embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 1, 7, -9, 9, -14, 3, -15, 3, 1, 1, 24, -8, -4, 3, -2, 0, -2, -15, 18, -16, -39, -19, -17, -6, 9, 25, -7, 26, -14, -9, -12, -1
    0x9f70701, 0x3f103f2, 0xf8180101, 0xfe03fc, 0xf012f1fe, 0xfaefedd9, 0x1af91909, 0xfff4f7f2,
    // 2, 3, 1, -7, 11, -31, -2, 14, 2, 9, 8, -3, -2, -6, 3, -7, 5, 4, -13, 8, 44, 5, 11, 3, -13, -5, 10, -10, 4, 4, -30, 24
    0xf9010302, 0xefee10b, 0xfd080902, 0xf903fafe, 0x8f30405, 0x30b052c, 0xf60afbf3, 0x18e20404,
    // -25, -7, -25, -9, 40, 17, -30, -59, -27, 63, -43, 10, 24, 29, -94, 58, -4, 16, -19, -7, 14, 16, 4, 3, 2, -20, -17, -16, -5, 12, -12, -26
    0xf7e7f9e7, 0xc5e21128, 0xad53fe5, 0x3aa21d18, 0xf9ed10fc, 0x304100e, 0xf0efec02, 0xe6f40cfb,
    // -6, -6, -3, 6, 6, -3, 2, 2, -5, -7, -4, 0, -6, 3, -32, -6, 2, 10, 5, 3, 3, 5, -3, -3, -2, 2, 3, -4, -2, -6, 27, 8
    0x6fdfafa, 0x202fd06, 0xfcf9fb, 0xfae003fa, 0x3050a02, 0xfdfd0503, 0xfc0302fe, 0x81bfafe,
    // 4, 2, 1, 0, 2, 4, -3, 5, 1, -10, -10, -5, 6, -1, -13, -5, 11, 8, -4, 3, -3, 2, -4, 7, -1, 6, 6, -9, 5, -1, 11, 3
    0x10204, 0x5fd0402, 0xfbf6f601, 0xfbf3ff06, 0x3fc080b, 0x7fc02fd, 0xf70606ff, 0x30bff05,
    // -3, -14, 3, -5, 2, -9, -17, 12, 1, -2, 13, 7, -11, -9, -11, -3, 9, -4, 5, -6, 8, -15, -5, 14, 5, 19, 7, 8, -9, -4, 5, -10
    0xfb03f2fd, 0xceff702, 0x70dfe01, 0xfdf5f7f5, 0xfa05fc09, 0xefbf108, 0x8071305, 0xf605fcf7,
    // 8, -24, 24, 18, 5, 3, 5, 14, 7, -28, -25, -2, 2, -14, -3, -28, -35, 10, -36, 41, 127, 90, 64, -4, 5, -95, -32, 13, 5, 3, -35, 23
    0x1218e808, 0xe050305, 0xfee7e407, 0xe4fdf202, 0x29dc0add, 0xfc405a7f, 0xde0a105, 0x17dd0305,
    // -6, -25, -10, -24, 49, 2, -12, -28, 1, 2, -1, -5, -19, 8, 14, -34, 2, 2, 9, 4, 17, -2, -7, -7, -3, -16, 9, -4, -14, -10, 17, -21
    0xe8f6e7fa, 0xe4f40231, 0xfbff0201, 0xde0e08ed, 0x4090202, 0xf9f9fe11, 0xfc09f0fd, 0xeb11f6f2,
    // -4, -6, -12, -7, 48, 1, -15, -24, -10, 13, -13, -17, -5, -5, -27, 3, -3, -6, 7, -15, 18, -3, -3, 9, -5, -8, -6, 1, -10, 3, -5, -21
    0xf9f4fafc, 0xe8f10130, 0xeff30df6, 0x3e5fbfb, 0xf107fafd, 0x9fdfd12, 0x1faf8fb, 0xebfb03f6,
    // 2, 2, 21, -18, 3, -4, 3, -14, 6, 1, 3, 9, -9, -5, -9, 6, 28, -25, 8, 29, 20, 13, -21, 11, 12, -9, 3, -30, 17, -9, -11, -11
    0xee150202, 0xf203fc03, 0x9030106, 0x6f7fbf7, 0x1d08e71c, 0xbeb0d14, 0xe203f70c, 0xf5f5f711,
    // -11, 14, 19, 13, 14, 13, 17, -3, -1, -27, -8, 8, 4, 0, -26, 9, -26, -8, -3, -57, -14, -29, 14, -17, 6, 40, -38, 23, -12, 9, 22, 13
    0xd130ef5, 0xfd110d0e, 0x8f8e5ff, 0x9e60004, 0xc7fdf8e6, 0xef0ee3f2, 0x17da2806, 0xd1609f4,
    // -23, 111, -76, 4, -13, 71, -12, 9, -38, 83, -40, -42, 61, 27, -87, 108, -1, -25, 18, -19, -54, -44, 16, 21, 3, 25, 4, 10, 20, 12, 17, 17
    0x4b46fe9, 0x9f447f3, 0xd6d853da, 0x6ca91b3d, 0xed12e7ff, 0x1510d4ca, 0xa041903, 0x11110c14,
    // 8, -6, 33, -5, 26, -50, 6, -3, -6, -24, -13, -10, -13, -15, 71, -11, -4, 20, -31, -15, 50, 36, -8, 26, 10, -6, -13, -25, 27, 2, -41, 8
    0xfb21fa08, 0xfd06ce1a, 0xf6f3e8fa, 0xf547f1f3, 0xf1e114fc, 0x1af82432, 0xe7f3fa0a, 0x8d7021b,
    // 5, -7, -4, -20, -28, -6, -13, 1, -5, -11, -11, 6, -12, 5, -24, -2, 7, -7, -11, 19, 16, 9, 7, 0, -5, -10, 5, -10, 7, 3, -6, 17
    0xecfcf905, 0x1f3fae4, 0x6f5f5fb, 0xfee805f4, 0x13f5f907, 0x70910, 0xf605f6fb, 0x11fa0307,
    // -9, 12, 2, -10, 10, 31, 8, 0, 1, -20, 2, 21, -1, 0, -6, -21, 5, -1, -6, 5, 13, -13, -2, 4, -1, 2, 2, -9, -2, 2, 0, -6
    0xf6020cf7, 0x81f0a, 0x1502ec01, 0xebfa00ff, 0x5faff05, 0x4fef30d, 0xf70202ff, 0xfa0002fe,
    // 1, 0, 8, 7, 11, 4, 1, -18, 6, 3, 6, -1, -8, -1, -18, 1, -4, 4, 10, -25, -28, -32, 23, -20, -6, 8, -29, 1, 7, 1, 107, 14
    0x7080001, 0xee01040b, 0xff060306, 0x1eefff8, 0xe70a04fc, 0xec17e0e4, 0x1e308fa, 0xe6b0107,
    // -13, 4, -21, 19, 2, 2, -6, -22, 1, -9, -7, -14, -6, 3, 11, -12, -1, -3, -1, 5, 7, -15, -1, -3, -1, 1, 5, 1, 7, -1, 8, -10
    0x13eb04f3, 0xeafa0202, 0xf2f9f701, 0xf40b03fa, 0x5fffdff, 0xfdfff107, 0x10501ff, 0xf608ff07,
    // -6, 11, -15, -21, 6, 8, -9, -6, -7, 26, 2, -8, 2, 9, -15, 20, -1, 0, -4, 6, 3, -3, 3, 6, -3, -9, -4, -5, 3, -6, -3, 10
    0xebf10bfa, 0xfaf70806, 0xf8021af9, 0x14f10902, 0x6fc00ff, 0x603fd03, 0xfbfcf7fd, 0xafdfa03,
    // -1, 2, 0, -5, 30, 7, 11, 4, 3, -9, 2, -11, 0, -7, 11, 4, 1, 21, -22, -22, 10, 16, 3, 13, -5, 1, -1, 1, 2, 0, 24, -1
    0xfb0002ff, 0x40b071e, 0xf502f703, 0x40bf900, 0xeaea1501, 0xd03100a, 0x1ff01fb, 0xff180002,
    // 7, 3, -3, -7, 10, -4, -5, 18, -4, 4, 2, -7, -3, 6, 3, -13, 13, -16, -11, -7, -10, -32, -4, 33, 6, -9, -44, -7, 9, -19, 7, -13
    0xf9fd0307, 0x12fbfc0a, 0xf90204fc, 0xf30306fd, 0xf9f5f00d, 0x21fce0f6, 0xf9d4f706, 0xf307ed09,
    // -19, -53, -19, 35, -35, -17, 10, -13, 9, 17, -9, 45, -38, -48, 10, 110, 4, 6, -17, -7, -13, -11, -8, 14, 2, 3, 9, -1, -6, -9, 7, -3
    0x23edcbed, 0xf30aefdd, 0x2df71109, 0x6e0ad0da, 0xf9ef0604, 0xef8f5f3, 0xff090302, 0xfd07f7fa,
    // 0, 9, 7, -3, -4, 4, 2, 6, 0, -3, 0, -2, -8, 3, 10, -9, 4, -1, 9, -9, 9, -1, -3, 11, -1, -17, -4, 1, 0, -14, 16, -20
    0xfd070900, 0x60204fc, 0xfe00fd00, 0xf70a03f8, 0xf709ff04, 0xbfdff09, 0x1fcefff, 0xec10f200,
    // 4, -6, 1, -7, -1, 2, 5, 2, 4, -5, 4, 9, 10, 2, 12, 3, 1, 11, -5, -5, 21, 22, 0, -2, -2, -7, 12, -6, 1, -2, 7, -6
    0xf901fa04, 0x20502ff, 0x904fb04, 0x30c020a, 0xfbfb0b01, 0xfe001615, 0xfa0cf9fe, 0xfa07fe01,
    // -5, 15, 18, -38, 15, -2, 11, -24, 17, 11, -21, 45, -22, -14, 13, -19, 3, -4, 9, -14, 10, -24, 1, 9, 2, 14, -5, 11, -8, -1, -3, -11
    0xda120ffb, 0xe80bfe0f, 0x2deb0b11, 0xed0df2ea, 0xf209fc03, 0x901e80a, 0xbfb0e02, 0xf5fdfff8,
    // 4, -11, 20, 0, 14, -19, -7, -3, -1, -6, -10, 3, -10, -22, -18, -11, 30, -21, 45, 63, 54, 27, -10, 101, 4, -26, 57, -58, -12, -41, 34, 46
    0x14f504, 0xfdf9ed0e, 0x3f6faff, 0xf5eeeaf6, 0x3f2deb1e, 0x65f61b36, 0xc639e604, 0x2e22d7f4,
    // -8, -1, -11, -14, -19, 9, 10, -2, -1, -16, -7, -12, 6, 11, -2, -18, -9, 2, 4, 5, -33, -20, 6, 8, 0, 10, -9, 15, 7, 4, 3, -5
    0xf2f5fff8, 0xfe0a09ed, 0xf4f9f0ff, 0xeefe0b06, 0x50402f7, 0x806ecdf, 0xff70a00, 0xfb030407,
    // 5, 5, -12, -1, -36, 20, 15, 15, 11, 21, -2, 4, 41, 16, -35, 37, -2, -3, -3, 3, -10, -4, -9, 3, -4, 5, -2, 2, -5, -2, 0, 6
    0xfff40505, 0xf0f14dc, 0x4fe150b, 0x25dd1029, 0x3fdfdfe, 0x3f7fcf6, 0x2fe05fc, 0x600fefb,
    // 12, 0, 6, -16, 4, -3, -4, 11, 4, 9, 2, 1, -8, 0, 5, 0, -7, 17, 14, -30, -4, 11, -13, 1, 8, 19, 1, 13, -25, -4, 2, -10
    0xf006000c, 0xbfcfd04, 0x1020904, 0x500f8, 0xe20e11f9, 0x1f30bfc, 0xd011308, 0xf602fce7,
    // 1, 3, -6, 6, 19, 2, 3, 18, -3, -18, 5, -3, 8, 1, 0, -15, -1, 6, -23, -10, 33, 20, 9, -10, 2, -11, -6, -7, -4, 14, -17, 19
    0x6fa0301, 0x12030213, 0xfd05eefd, 0xf1000108, 0xf6e906ff, 0xf6091421, 0xf9faf502, 0x13ef0efc,
    // -32, 23, 0, 73, -39, -28, -15, -103, -30, -53, 0, -34, 18, 12, 79, -73, 0, -11, 17, 5, 12, -11, 11, -7, 5, -4, 4, 7, 5, -5, 11, 4
    0x490017e0, 0x99f1e4d9, 0xde00cbe2, 0xb74f0c12, 0x511f500, 0xf90bf50c, 0x704fc05, 0x40bfb05,
    // -4, -11, 21, 14, -11, -11, 3, -10, -3, -7, -8, 4, -9, -8, 17, -7, 1, 5, 2, -2, -42, 10, 17, 0, -5, 27, 1, 8, 25, 12, 11, 36
    0xe15f5fc, 0xf603f5f5, 0x4f8f9fd, 0xf911f8f7, 0xfe020501, 0x110ad6, 0x8011bfb, 0x240b0c19,
    // 1, 6, 4, -2, -36, 17, -4, 1, 6, 4, -9, 3, 9, 3, -24, 23, 1, 3, -1, -1, 1, 2, 5, -1, -5, -1, 2, 1, -6, -2, 0, -1
    0xfe040601, 0x1fc11dc, 0x3f70406, 0x17e80309, 0xffff0301, 0xff050201, 0x102fffb, 0xff00fefa,
    // -2, -4, -4, 6, 22, 5, 3, 8, 3, -9, 10, -5, -2, 5, -9, -10, 0, -3, 1, 0, -6, 8, 0, -2, 1, 2, 1, 7, -2, -1, -7, -8
    0x6fcfcfe, 0x8030516, 0xfb0af703, 0xf6f705fe, 0x1fd00, 0xfe0008fa, 0x7010201, 0xf8f9fffe,
    // -4, -6, 11, 0, 5, 5, 3, -13, 1, -1, 7, 3, -13, 4, 2, -10, -5, 0, -19, -40, 117, -43, -23, -38, -14, 11, -3, -36, 6, 10, -4, -30
    0xbfafc, 0xf3030505, 0x307ff01, 0xf60204f3, 0xd8ed00fb, 0xdae9d575, 0xdcfd0bf2, 0xe2fc0a06,
    // -1, -4, 17, 0, -2, 8, 17, -14, -4, -6, -4, 0, 20, 2, -1, 9, 0, 10, -2, 2, -21, 9, 2, 0, 1, 9, 9, 2, 5, -1, 12, 8
    0x11fcff, 0xf21108fe, 0xfcfafc, 0x9ff0214, 0x2fe0a00, 0x209eb, 0x2090901, 0x80cff05,
    // 4, 9, -7, -4, -16, 8, 12, 0, 1, 17, 10, -4, 14, 13, -9, 15, -2, 4, -1, 16, -7, 0, 10, 5, -4, 8, 8, 2, 5, -5, 15, 17
    0xfcf90904, 0xc08f0, 0xfc0a1101, 0xff70d0e, 0x10ff04fe, 0x50a00f9, 0x20808fc, 0x110ffb05,
    // -1, 2, -3, 3, 14, -20, 11, 10, -11, 0, -6, -1, -1, 2, -1, -19, 9, 11, 5, -12, -3, -22, 9, 1, -4, 19, -11, -2, -10, -13, 11, 21
    0x3fd02ff, 0xa0bec0e, 0xfffa00f5, 0xedff02ff, 0xf4050b09, 0x109eafd, 0xfef513fc, 0x150bf3f6,
    // 1, -1, -10, -7, -12, 19, 2, -4, 10, 3, 2, 2, 13, -6, 22, -5, 0, 23, -14, -9, 14, 12, -3, 15, -6, -15, 6, -20, 8, -5, 17, -5
    0xf9f6ff01, 0xfc0213f4, 0x202030a, 0xfb16fa0d, 0xf7f21700, 0xffd0c0e, 0xec06f1fa, 0xfb11fb08,
    // -28, -4, -121, 2, 13, 11, -25, -23, -13, 33, -11, 7, -28, -7, 63, 74, 7, -14, -17, -10, -6, -5, 1, 5, -5, -7, -4, -2, -14, 6, -15, -23
    0x287fce4, 0xe9e70b0d, 0x7f521f3, 0x4a3ff9e4, 0xf6eff207, 0x501fbfa, 0xfefcf9fb, 0xe9f106f2,
    // 3, -7, -4, -15, 2, 4, -4, -9, 9, -1, 4, 9, -3, -10, -6, -20, -3, -21, -15, 0, 4, -11, 0, -2, 8, 4, -9, -2, -5, 1, -10, -10
    0xf1fcf903, 0xf7fc0402, 0x904ff09, 0xecfaf6fd, 0xf1ebfd, 0xfe00f504, 0xfef70408, 0xf6f601fb,
    // -5, 5, -4, 1, 7, -15, 4, 7, -13, 8, -7, -8, -3, 1, -8, -6, 2, 1, -12, 14, -39, 20, 3, -3, -4, 6, 8, -12, -9, -2, 25, 38
    0x1fc05fb, 0x704f107, 0xf8f908f3, 0xfaf801fd, 0xef40102, 0xfd0314d9, 0xf40806fc, 0x2619fef7,
    // -3, -29, 9, 30, -48, -21, -6, -1, -6, 18, 1, -5, 1, -1, -44, 15, 1, 13, 16, -10, 20, -12, 6, -5, -3, 38, 3, 13, -6, 2, 18, 24
    0x1e09e3fd, 0xfffaebd0, 0xfb0112fa, 0xfd4ff01, 0xf6100d01, 0xfb06f414, 0xd0326fd, 0x181202fa,
    // -5, 9, -11, -15, 13, 15, 6, 13, 14, 5, 26, 15, 10, 12, -21, -28, 47, 51, 6, -32, 10, -13, -9, 41, -7, -20, 26, -46, 19, 12, 18, -33
    0xf1f509fb, 0xd060f0d, 0xf1a050e, 0xe4eb0c0a, 0xe006332f, 0x29f7f30a, 0xd21aecf9, 0xdf120c13,
    // 2, 15, 2, -2, -41, 44, 38, 5, 1, -44, -7, -1, 56, 9, 13, -36, 3, 5, 28, 5, -11, -24, -11, -11, 2, -6, -2, 6, -19, -8, 13, -39
    0xfe020f02, 0x5262cd7, 0xfff9d401, 0xdc0d0938, 0x51c0503, 0xf5f5e8f5, 0x6fefa02, 0xd90df8ed,
    // -12, -24, 39, 9, 22, -25, 12, -17, 12, 14, 26, 8, 11, -31, 82, 27, -14, -9, 6, -6, -5, 40, 14, -2, 13, -21, -10, 13, 11, -5, -20, 18
    0x927e8f4, 0xef0ce716, 0x81a0e0c, 0x1b52e10b, 0xfa06f7f2, 0xfe0e28fb, 0xdf6eb0d, 0x12ecfb0b,
    // -4, -4, -2, -40, 2, -22, -3, -3, -2, 3, -29, 20, 11, -4, 18, -11, -20, 44, -42, -39, -16, 22, 10, -4, 5, -8, -10, -3, -3, 7, 17, -12
    0xd8fefcfc, 0xfdfdea02, 0x14e303fe, 0xf512fc0b, 0xd9d62cec, 0xfc0a16f0, 0xfdf6f805, 0xf41107fd,
    // -9, -3, -6, -18, 2, -15, -6, -20, -12, 6, 2, 10, -5, 10, 14, -1, 4, -12, -3, -18, 35, -23, 8, 8, 7, -15, -53, 5, 21, -7, 3, 3
    0xeefafdf7, 0xecfaf102, 0xa0206f4, 0xff0e0afb, 0xeefdf404, 0x808e923, 0x5cbf107, 0x303f915,
    // -14, 17, -70, 81, 79, 30, -9, -51, -11, -13, -28, -50, 12, 22, -58, 33, 0, 10, -9, 7, -24, 15, -1, -22, -7, -27, -25, 0, -6, 15, -9, -14
    0x51ba11f2, 0xcdf71e4f, 0xcee4f3f5, 0x21c6160c, 0x7f70a00, 0xeaff0fe8, 0xe7e5f9, 0xf2f70ffa,
    // -10, 5, -8, -20, 6, -10, -10, -15, -18, 5, 7, 8, -9, 10, -14, -2, 1, -10, 5, 4, 3, -16, -9, -17, -2, 22, 1, 4, -9, -1, -7, 13
    0xecf805f6, 0xf1f6f606, 0x80705ee, 0xfef20af7, 0x405f601, 0xeff7f003, 0x40116fe, 0xdf9fff7,
    // -11, 7, 2, 14, -33, 16, -6, -9, 3, 3, -9, -9, 20, -2, -10, 8, 1, 2, -14, 9, -2, 26, -1, 2, 2, -20, -2, -1, 7, -9, -5, 17
    0xe0207f5, 0xf7fa10df, 0xf7f70303, 0x8f6fe14, 0x9f20201, 0x2ff1afe, 0xfffeec02, 0x11fbf707,
    // 7, -2, -12, 35, -23, -3, 5, -4, 2, -25, -11, -21, 13, 10, -25, -24, -7, 9, 8, 10, 8, -4, 4, -11, -6, 2, -4, 3, -5, 7, -12, 17
    0x23f4fe07, 0xfc05fde9, 0xebf5e702, 0xe8e70a0d, 0xa0809f9, 0xf504fc08, 0x3fc02fa, 0x11f407fb,
    // -2, 8, 8, -12, 10, 43, -2, 7, 0, -18, -12, 39, 3, -7, -46, -17, 20, -27, 62, -16, 73, -64, -20, -29, 7, 86, 91, 22, -15, -16, -23, 38
    0xf40808fe, 0x7fe2b0a, 0x27f4ee00, 0xefd2f903, 0xf03ee514, 0xe3ecc049, 0x165b5607, 0x26e9f0f1,
    // 1, -13, -3, 2, 5, -1, -8, -16, -10, 17, 17, 18, -6, 1, 41, 11, 0, -1, 9, 1, 23, -27, -1, 2, -8, -17, -11, -6, -8, -3, 7, -31
    0x2fdf301, 0xf0f8ff05, 0x121111f6, 0xb2901fa, 0x109ff00, 0x2ffe517, 0xfaf5eff8, 0xe107fdf8,
    // 3, 3, -10, -9, 64, -1, 11, -6, -8, 9, -4, -4, -20, 7, -25, 31, 1, -6, -11, -7, -25, 16, -7, 4, 6, -8, -14, -3, -6, 3, -30, -2
    0xf7f60303, 0xfa0bff40, 0xfcfc09f8, 0x1fe707ec, 0xf9f5fa01, 0x4f910e7, 0xfdf2f806, 0xfee203fa,
    // -1, 19, -10, -15, -7, 5, -9, -7, -5, -1, 9, -2, -6, 0, 21, -2, 20, -26, 12, 25, 17, -29, -16, 38, 10, 8, 12, -11, -20, -9, -29, -4
    0xf1f613ff, 0xf9f705f9, 0xfe09fffb, 0xfe1500fa, 0x190ce614, 0x26f0e311, 0xf50c080a, 0xfce3f7ec,
    // -7, 0, 9, 4, -13, 4, 1, -10, 0, 1, 0, 4, 16, -3, 2, 10, -7, -2, 12, -7, 5, 3, 19, 14, 7, -22, -33, 6, 8, -5, 29, -1
    0x40900f9, 0xf60104f3, 0x4000100, 0xa02fd10, 0xf90cfef9, 0xe130305, 0x6dfea07, 0xff1dfb08,
    // -11, 6, 27, 21, 52, 10, 41, -3, 21, -21, 51, 15, 0, -18, 114, 10, -3, 9, 9, -1, -45, 24, 15, -27, -9, -21, -26, 0, 21, 24, -1, -16
    0x151b06f5, 0xfd290a34, 0xf33eb15, 0xa72ee00, 0xff0909fd, 0xe50f18d3, 0xe6ebf7, 0xf0ff1815,
    // 7, 3, 0, -14, -1, 3, -3, -8, -7, -3, -12, 0, -13, 0, -23, -2, -6, -15, -18, 1, 31, -9, -10, -18, -10, -5, -7, -9, -14, 11, -37, -11
    0xf2000307, 0xf8fd03ff, 0xf4fdf9, 0xfee900f3, 0x1eef1fa, 0xeef6f71f, 0xf7f9fbf6, 0xf5db0bf2,
    // -2, 8, 3, 11, -6, -1, -5, -1, -1, 7, 6, -11, -3, -13, 24, 0, 4, 0, 19, -5, 8, -13, -2, 1, 0, 7, -15, 9, 2, 4, -20, -19
    0xb0308fe, 0xfffbfffa, 0xf50607ff, 0x18f3fd, 0xfb130004, 0x1fef308, 0x9f10700, 0xedec0402,
    // 3, 15, 4, 7, 13, 16, 2, 20, -5, -6, 3, -9, 6, -6, -10, 29, -8, 0, -13, 5, 5, 24, 14, -17, 1, -22, -3, 11, 8, -1, 21, 11
    0x7040f03, 0x1402100d, 0xf703fafb, 0x1df6fa06, 0x5f300f8, 0xef0e1805, 0xbfdea01, 0xb15ff08,
    // -7, 5, -11, -1, 29, -13, 8, -1, -6, -18, 8, 5, 5, -3, 6, -12, 45, -62, 99, 13, 15, 5, -7, 30, 34, 7, 35, 2, -45, -47, 12, -2
    0xfff505f9, 0xff08f31d, 0x508eefa, 0xf406fd05, 0xd63c22d, 0x1ef9050f, 0x2230722, 0xfe0cd1d3,
    // -1, -10, 3, 3, 2, -2, 20, 23, 10, -30, -26, 6, 9, 6, -42, -24, 2, -6, -4, -4, 13, 11, -8, -8, 1, -5, 9, 4, -13, -2, 0, 13
    0x303f6ff, 0x1714fe02, 0x6e6e20a, 0xe8d60609, 0xfcfcfa02, 0xf8f80b0d, 0x409fb01, 0xd00fef3,
    // -9, 4, 1, 2, 9, -13, -16, 6, 0, 8, 3, 1, -1, -6, 10, -1, -6, 10, 2, -5, -6, 1, -2, 6, -4, -7, -9, -4, 16, 8, -13, 4
    0x20104f7, 0x6f0f309, 0x1030800, 0xff0afaff, 0xfb020afa, 0x6fe01fa, 0xfcf7f9fc, 0x4f30810,
    // 4, 4, 10, 18, 15, -2, 0, 7, 4, -3, 3, -23, 11, 4, 6, 6, -2, 17, 17, -45, -3, 6, 2, -1, 1, 32, -9, 15, -11, -13, -4, 32
    0x120a0404, 0x700fe0f, 0xe903fd04, 0x606040b, 0xd31111fe, 0xff0206fd, 0xff72001, 0x20fcf3f5,
    // 6, -3, -8, 7, -12, -11, -5, 15, 1, 1, 1, -14, -6, -4, 5, 6, 17, 4, 35, 27, -17, 6, -8, -16, 4, -30, 0, -11, -25, -14, -5, -12
    0x7f8fd06, 0xffbf5f4, 0xf2010101, 0x605fcfa, 0x1b230411, 0xf0f806ef, 0xf500e204, 0xf4fbf2e7,
    // -6, 39, -28, -26, 90, -21, 29, 27, -17, 39, 35, -15, 108, 20, 2, 73, -3, -11, -8, 10, 14, 10, -18, -31, 0, 0, -6, 6, -19, 6, -37, 2
    0xe6e427fa, 0x1b1deb5a, 0xf12327ef, 0x4902146c, 0xaf8f5fd, 0xe1ee0a0e, 0x6fa0000, 0x2db06ed,
    // -9, -3, 2, 12, -6, 20, 10, 0, 4, -2, -4, 5, 4, 4, -5, 17, 8, -12, 25, -13, -9, -5, 2, -33, -8, 10, -1, 22, -21, 8, -23, 5
    0xc02fdf7, 0xa14fa, 0x5fcfe04, 0x11fb0404, 0xf319f408, 0xdf02fbf7, 0x16ff0af8, 0x5e908eb,
    // -7, -4, 16, -3, 15, -15, 1, -10, 2, 6, 6, -4, -3, -2, 17, 4, -1, -2, -6, -28, -26, -15, -8, 20, 3, 15, -9, 7, 1, -4, 18, -1
    0xfd10fcf9, 0xf601f10f, 0xfc060602, 0x411fefd, 0xe4fafeff, 0x14f8f1e6, 0x7f70f03, 0xff12fc01,
    // -1, 0, 0, -30, 2, -7, -7, -10, 2, 22, 2, 10, -26, -6, -2, -10, 5, -2, -3, 11, 12, -3, -1, 18, -7, -6, 2, -17, 4, 3, 1, -9
    0xe20000ff, 0xf6f9f902, 0xa021602, 0xf6fefae6, 0xbfdfe05, 0x12fffd0c, 0xef02faf9, 0xf7010304,
    // 3, 12, -18, -3, 14, 25, 0, 0, 4, -7, 1, -20, -8, 25, -27, 42, 14, -43, 5, -16, 26, 6, 28, 102, 33, -23, 1, 29, -16, -19, -65, 5
    0xfdee0c03, 0x190e, 0xec01f904, 0x2ae519f8, 0xf005d50e, 0x661c061a, 0x1d01e921, 0x5bfedf0,
    // 6, 6, 4, 15, -11, -34, -22, 1, -12, 28, 4, -10, -13, -9, 6, 22, -3, -2, 9, 10, -5, -7, 0, -15, -4, 4, -4, -6, 2, -1, 6, 0
    0xf040606, 0x1eadef5, 0xf6041cf4, 0x1606f7f3, 0xa09fefd, 0xf100f9fb, 0xfafc04fc, 0x6ff02,
    // -1, 0, -5, -5, 6, -11, 2, -2, -9, -2, 2, 3, 11, 2, 4, 9, 5, 2, -5, 5, -20, 18, -6, -3, 11, 5, -2, 0, 9, -5, -17, 7
    0xfbfb00ff, 0xfe02f506, 0x302fef7, 0x904020b, 0x5fb0205, 0xfdfa12ec, 0xfe050b, 0x7effb09,
};
static const uint embedded_decoder2_ResidualBlock_1_body_conv_dw_bias_dwords[8] = {
    // -0.0068, -0.0004027, -0.00714, 0.000399, 0.002893, -0.0306, 0.01293, -0.00527, 0.01207, -0.01909, 0.014046, -0.03723, -0.003231, -0.02136, -0.02747, -0.0114
    0x8e999ef7, 0xe8a9f50, 0xa7d519ed, 0x9d65229f, 0xa4e3222e, 0xa8c42331, 0xa5789a9e, 0xa1d6a708,
};
static const uint embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -49, -46, -27, -25, 0, -1, 29, -71, -54, 19, -32, 9, 79, 76, -109, -13, 92, 24, -47, 100, 112, 42, -14, 50, -5, 30, 42, -2, -82, -74, -16, -14
    0xe7e5d2cf, 0xb91dff00, 0x9e013ca, 0xf3934c4f, 0x64d1185c, 0x32f22a70, 0xfe2a1efb, 0xf2f0b6ae,
    // -54, -15, 111, 56, 45, 61, -26, 7, 14, 78, 82, 33, 67, 93, 109, -66, -25, -128, 10, 45, -17, -56, 15, -40, 50, 43, -42, 51, -41, -42, 84, -82
    0x386ff1ca, 0x7e63d2d, 0x21524e0e, 0xbe6d5d43, 0x2d0a80e7, 0xd80fc8ef, 0x33d62b32, 0xae54d6d7,
    // 90, -57, -18, 33, 9, -18, -2, -101, 48, -5, -3, -15, 15, 51, -53, 4, -37, -21, 39, -82, 5, 61, -12, 98, 100, 8, 2, -21, 81, -47, 42, 4
    0x21eec75a, 0x9bfeee09, 0xf1fdfb30, 0x4cb330f, 0xae27ebdb, 0x62f43d05, 0xeb020864, 0x42ad151,
    // -1, 5, 4, 4, -39, 39, 84, 8, -30, 43, 41, 48, -58, 21, -57, 95, 35, 31, 59, 45, 63, -39, 63, 21, 56, 31, -30, 64, 9, -12, -101, 28
    0x40405ff, 0x85427d9, 0x30292be2, 0x5fc715c6, 0x2d3b1f23, 0x153fd93f, 0x40e21f38, 0x1c9bf409,
    // -38, 39, -4, 3, 26, 61, -44, -92, 28, -29, 9, -34, -5, 28, -31, 102, -63, -29, -15, 43, 57, 32, 70, 21, 11, -70, 62, -1, -79, -5, -5, -10
    0x3fc27da, 0xa4d43d1a, 0xde09e31c, 0x66e11cfb, 0x2bf1e3c1, 0x15462039, 0xff3eba0b, 0xf6fbfbb1,
    // 6, -39, -22, -83, 79, 43, -103, -68, 4, -3, -27, 90, 7, 53, 11, 42, -22, 9, -53, 78, 13, 36, -45, -1, -33, 19, -65, 38, 77, 75, 103, 70
    0xadead906, 0xbc992b4f, 0x5ae5fd04, 0x2a0b3507, 0x4ecb09ea, 0xffd3240d, 0x26bf13df, 0x46674b4d,
    // 80, 60, 33, -73, -11, -1, -93, -53, 57, 41, 22, -22, -74, -80, 71, 100, -36, 29, -31, 29, -67, -95, -43, -31, 25, -5, -14, 13, -56, 11, -39, 47
    0xb7213c50, 0xcba3fff5, 0xea162939, 0x6447b0b6, 0x1de11ddc, 0xe1d5a1bd, 0xdf2fb19, 0x2fd90bc8,
    // -44, 87, 35, -14, -19, 55, 38, 40, -49, -17, -58, -2, -88, -4, -16, -50, 1, 0, 49, -44, 0, -10, -24, 99, -34, -66, -17, 40, -11, -5, 36, 31
    0xf22357d4, 0x282637ed, 0xfec6efcf, 0xcef0fca8, 0xd4310001, 0x63e8f600, 0x28efbede, 0x1f24fbf5,
    // 4, 37, 26, -56, 61, -61, -51, 0, -17, 28, 60, 9, 8, 45, 13, -66, 30, -12, 4, 20, -48, -29, 24, 116, 4, -4, 15, 16, 7, -26, 18, -28
    0xc81a2504, 0xcdc33d, 0x93c1cef, 0xbe0d2d08, 0x1404f41e, 0x7418e3d0, 0x100ffc04, 0xe412e607,
    // -13, 62, -35, -25, -35, 21, 88, 93, -4, 40, 21, -34, 83, -37, 74, -9, -36, 58, 38, 32, 8, -55, 52, -80, 44, 8, 21, -33, 75, -98, -1, -54
    0xe7dd3ef3, 0x5d5815dd, 0xde1528fc, 0xf74adb53, 0x20263adc, 0xb034c908, 0xdf15082c, 0xcaff9e4b,
    // -40, -59, -14, 96, -33, 39, 8, -27, -21, -40, -16, -9, 11, -44, 9, 64, 53, 4, 68, 90, 64, -78, -56, 60, 13, -81, -35, 2, 19, -23, 1, -8
    0x60f2c5d8, 0xe50827df, 0xf7f0d8eb, 0x4009d40b, 0x5a440435, 0x3cc8b240, 0x2ddaf0d, 0xf801e913,
    // 37, 6, 45, -90, -60, -26, -44, -24, -1, 46, -37, -4, -23, -20, -1, 55, -42, 64, -43, -3, 65, 52, -4, 26, -1, -17, 2, 23, 115, 34, 30, 65
    0xa62d0625, 0xe8d4e6c4, 0xfcdb2eff, 0x37ffece9, 0xfdd540d6, 0x1afc3441, 0x1702efff, 0x411e2273,
    // -35, -95, 1, -19, 85, -90, -10, -28, -17, 23, -30, -34, -53, -66, -15, 56, 91, 5, 31, -103, 22, -14, 17, -2, 7, -12, 67, -38, -84, -67, -34, 38
    0xed01a1dd, 0xe4f6a655, 0xdee217ef, 0x38f1becb, 0x991f055b, 0xfe11f216, 0xda43f407, 0x26debdac,
    // 77, -26, 1, 13, 59, 12, 1, 26, 80, 6, 4, 29, 85, 92, 21, 30, 42, 20, -8, 12, -9, 11, 67, -110, 26, -30, -38, -17, -8, -47, 49, -10
    0xd01e64d, 0x1a010c3b, 0x1d040650, 0x1e155c55, 0xcf8142a, 0x92430bf7, 0xefdae21a, 0xf631d1f8,
    // -29, -35, -18, -93, 5, 73, -10, -3, -51, 9, -16, 8, -53, 52, -38, 50, -37, -34, -29, 39, 52, 17, 55, -114, -16, -6, -22, -10, 23, 61, -58, -11
    0xa3eedde3, 0xfdf64905, 0x8f009cd, 0x32da34cb, 0x27e3dedb, 0x8e371134, 0xf6eafaf0, 0xf5c63d17,
    // -13, 15, 9, 73, -36, 43, -53, -82, -119, 38, -25, 44, 58, -75, -14, 1, -30, -44, -2, 68, -1, 104, 5, 39, 51, 26, 3, -9, 39, 2, -5, -40
    0x49090ff3, 0xaecb2bdc, 0x2ce72689, 0x1f2b53a, 0x44fed4e2, 0x270568ff, 0xf7031a33, 0xd8fb0227,
};
static const uint embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords[16] = {
    // -8.136e-05, -0.02805, 0.01358, -0.3008, -0.01099, 0.01901, 0.03842, -0.01415, -0.001715, -0.03372, 0.02112, 0.00932, 0.00913, 0.00679, 0.02942, 0.01685
    0xa72e8555, 0xb4d022f4, 0x24dea1a0, 0xa33f28eb, 0xa8519706, 0x20c62568, 0x1ef420ad, 0x24502788,
    // -0.01884, 0.01371, 0.01165, -0.00427, 0.0428, -0.02774, 0.03137, -0.04355, 0.1659, -0.00625, -0.01788, 0.002666, 0.01573, -0.000569, 0.04578, 0.04025
    0x2305a4d3, 0x9c5f21f7, 0xa71a297a, 0xa9932804, 0x9e66314f, 0x1976a494, 0x90a92407, 0x292729dc,
};
static const uint embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -10, 10, -7, 41, -11, 6, -6, 6, 41, 8, 21, -13, -8, 19, -10, 4, -16, 106, 6, 23, -11, -22, -18, 44, -6, 13, -24, 2, -56, 24, -9, -4
    0x29f90af6, 0x6fa06f5, 0xf3150829, 0x4f613f8, 0x17066af0, 0x2ceeeaf5, 0x2e80dfa, 0xfcf718c8,
    // 15, 32, -5, -47, 11, 18, -25, 26, 12, -33, 38, -41, -3, 8, 10, -62, 40, -100, 52, -84, -36, 52, 57, 32, -22, -34, 38, -73, 18, -6, -25, 27
    0xd1fb200f, 0x1ae7120b, 0xd726df0c, 0xc20a08fd, 0xac349c28, 0x203934dc, 0xb726deea, 0x1be7fa12,
    // 77, 32, -15, -118, -36, 100, -21, 34, 42, -41, -23, 29, 100, 79, -10, 31, -50, -46, -4, 96, 53, -25, -75, -44, 36, 0, -52, -109, -45, -72, -121, -12
    0x8af1204d, 0x22eb64dc, 0x1de9d72a, 0x1ff64f64, 0x60fcd2ce, 0xd4b5e735, 0x93cc0024, 0xf487b8d3,
    // -67, 33, -9, -28, -40, 29, -5, 54, -24, 14, 74, -18, 21, -6, 25, -35, -44, 32, 49, -93, 31, 57, 1, 21, -23, -67, -17, -48, -63, 92, -69, 99
    0xe4f721bd, 0x36fb1dd8, 0xee4a0ee8, 0xdd19fa15, 0xa33120d4, 0x1501391f, 0xd0efbde9, 0x63bb5cc1,
    // -110, -14, -19, -34, 73, 18, -4, -11, 32, 12, -38, 104, -74, 0, -32, 17, 14, -64, 8, 40, 24, -2, 90, -75, 14, 26, -92, -18, -5, 115, 30, -13
    0xdeedf292, 0xf5fc1249, 0x68da0c20, 0x11e000b6, 0x2808c00e, 0xb55afe18, 0xeea41a0e, 0xf31e73fb,
    // 2, -12, -11, 127, -8, -20, 1, 25, -15, 33, 33, 28, -6, -12, -34, 15, -11, 74, 23, -25, -19, -2, 5, 19, -6, 6, -41, -4, -40, 10, -14, 39
    0x7ff5f402, 0x1901ecf8, 0x1c2121f1, 0xfdef4fa, 0xe7174af5, 0x1305feed, 0xfcd706fa, 0x27f20ad8,
    // -76, 25, -11, -107, 86, -48, -86, 54, -103, -41, 104, -70, -24, 23, 37, 13, 11, 117, 40, -99, -42, -31, 24, 8, 36, 35, 48, -16, -74, 78, -4, 21
    0x95f519b4, 0x36aad056, 0xba68d799, 0xd2517e8, 0x9d28750b, 0x818e1d6, 0xf0302324, 0x15fc4eb6,
    // 12, 56, -4, 28, -25, 16, -45, 24, -59, 79, 12, -19, -95, 63, -9, 59, -33, 11, 41, -2, -41, -46, 24, 3, -4, 36, 16, 88, -34, 3, 20, -24
    0x1cfc380c, 0x18d310e7, 0xed0c4fc5, 0x3bf73fa1, 0xfe290bdf, 0x318d2d7, 0x581024fc, 0xe81403de,
    // 13, 7, -3, 19, 3, -3, -5, 1, -24, 2, -7, 16, 6, 12, -3, 1, -2, -21, 0, 9, -2, -3, -12, -10, -3, 13, -6, 16, 10, -11, 0, -1
    0x13fd070d, 0x1fbfd03, 0x10f902e8, 0x1fd0c06, 0x900ebfe, 0xf6f4fdfe, 0x10fa0dfd, 0xff00f50a,
    // 103, 10, -30, -50, -23, -59, -38, 2, -36, 28, -29, 35, 18, 0, 13, -55, 56, -97, 12, 36, -97, 17, 19, -24, -6, -26, 5, 30, 47, -78, -14, 95
    0xcee20a67, 0x2dac5e9, 0x23e31cdc, 0xc90d0012, 0x240c9f38, 0xe813119f, 0x1e05e6fa, 0x5ff2b22f,
    // 44, 112, 21, 27, 40, 8, -96, 102, 38, -3, -78, 50, -25, 23, 33, -100, -19, -87, 19, -1, -42, 68, -13, -115, -95, 50, 49, -84, 69, -74, -47, 104
    0x1b15702c, 0x66a00828, 0x32b2fd26, 0x9c2117e7, 0xff13a9ed, 0x8df344d6, 0xac3132a1, 0x68d1b645,
    // 17, 3, 4, 65, 11, 0, 13, -6, 11, 34, 32, 12, -29, 26, 30, -34, 41, 40, -11, -34, -9, 22, 4, -11, 44, 6, -4, 0, 15, 22, -3, -28
    0x41040311, 0xfa0d000b, 0xc20220b, 0xde1e1ae3, 0xdef52829, 0xf50416f7, 0xfc062c, 0xe4fd160f,
    // -1, 32, -112, 53, -96, -43, -83, 81, 92, 0, -1, -5, -7, 96, -89, -29, -59, -37, -3, -19, -30, 62, 31, 49, 67, -46, -57, -110, -15, 3, -76, -21
    0x359020ff, 0x51add5a0, 0xfbff005c, 0xe3a760f9, 0xedfddbc5, 0x311f3ee2, 0x92c7d243, 0xebb403f1,
    // 6, 15, 9, -21, -3, 35, 59, 8, -1, 43, 35, -10, -3, 14, 40, -88, 9, -30, 20, -24, 60, 90, 39, 32, 12, -38, -23, -46, -25, 28, -39, 17
    0xeb090f06, 0x83b23fd, 0xf6232bff, 0xa8280efd, 0xe814e209, 0x20275a3c, 0xd2e9da0c, 0x11d91ce7,
    // 65, -65, -14, -29, -15, -44, 45, -32, 37, -13, 33, 35, 18, -5, 1, 18, 65, -60, 94, -84, 13, 56, -52, -81, -13, 104, -28, -12, -60, -89, 49, -55
    0xe3f2bf41, 0xe02dd4f1, 0x2321f325, 0x1201fb12, 0xac5ec441, 0xafcc380d, 0xf4e468f3, 0xc931a7c4,
    // 57, 9, -29, -78, -101, 21, 42, -29, 25, 44, 31, -39, -49, 18, -47, 21, 30, 52, 44, -14, -86, -34, 52, -7, -32, -41, -20, 3, -93, -13, 0, -15
    0xb2e30939, 0xe32a159b, 0xd91f2c19, 0x15d112cf, 0xf22c341e, 0xf934deaa, 0x3ecd7e0, 0xf100f3a3,
};
static const uint embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords[8] = {
    // -0.0275, -0.0759, 0.09094, -0.0647, -0.01373, -0.02559, 0.02379, -0.09937, 0.05838, 0.1697, -0.02516, 0.08624, 0.08386, -0.03595, -0.004112, 0.178
    0xacdca70a, 0xac242dd2, 0xa68da308, 0xae5c2617, 0x316e2b79, 0x2d85a671, 0xa89a2d5e, 0x31b29c36,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass12(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 16), // threadGroupSliceSize
        uint3(1920, 1080, 16), // storageSize
        uint3(16, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        49766400, // threadGroupStorageByteOffset
        0.0217414740473032, storage_fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005488899536430836, storage_embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_1_body_conv_dw_bias = { embedded_decoder2_ResidualBlock_1_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_1_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_1_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005502822808921337, storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias = { embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005479142069816589, storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias = { embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias };
    
    // fused_quantized_NHWC_/decoder2/ResidualBlock_2/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_24 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_24 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 16);
    const uint3 groupSize_slice_24 = uint3(64, 1, 16);
    const uint3 storageSize_slice_24 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_24 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_24 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_24 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_24 = dot(groupStart_slice_24, tensorByteStrides_slice_24);
    const float quantizationScale_slice_24 = 0.028251888230443;
    const RWBufferStorage storage_slice_24 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_24 = { logicalSize_slice_24, groupStart_slice_24, groupSize_slice_24, storageSize_slice_24, tensorByteStrides_slice_24, paddingBegin_slice_24, paddingEnd_slice_24, threadGroupByteOffsetInTensor_slice_24 + 0, quantizationScale_slice_24, storage_slice_24 };
    // ConvNextBlock (16, 1080, 1920), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,) -> (16, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    ConvNextBlock(38.83810072916716, 0.025747912004590034, 31.722602394101983, 0.031523264944553375, fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_1_body_conv_dw_bias, embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias, embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias, slice_24, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_12
#ifdef MLSR_PASS_12_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass12_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/decoder2/ResidualBlock_2/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_25 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_25 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_25 = uint3(32, 1, 16);
    const uint3 storageSize_slice_25 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_25 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_25 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_25 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_25 = dot(groupStart_slice_25, tensorByteStrides_slice_25);
    const float quantizationScale_slice_25 = 0.028251888230443;
    const RWBufferStorage storage_slice_25 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_25 = { logicalSize_slice_25, groupStart_slice_25, groupSize_slice_25, storageSize_slice_25, tensorByteStrides_slice_25, paddingBegin_slice_25, paddingEnd_slice_25, threadGroupByteOffsetInTensor_slice_25 + 0, quantizationScale_slice_25, storage_slice_25 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_25, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_12_POST


#ifdef MLSR_PASS_13
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/float16_NHWC/Fused/CNB_CT2D.hlsli"

static const uint embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 2, -5, 11, -4, -7, 4, -2, -4, 12, 5, 3, 6, -3, -6, -9, -3, 20, -10, 19, -3, 6, 19, 8, -3, 3, 3, 26, 7, 8, -22, -11, 7
    0xfc0bfb02, 0xfcfe04f9, 0x603050c, 0xfdf7fafd, 0xfd13f614, 0xfd081306, 0x71a0303, 0x7f5ea08,
    // 7, -1, 3, 11, -4, 3, -7, 9, -7, 1, 4, -14, 6, 5, 5, 7, 6, -7, -3, 4, 13, 11, 11, 22, 14, 11, 13, 21, -3, 11, -8, 8
    0xb03ff07, 0x9f903fc, 0xf20401f9, 0x7050506, 0x4fdf906, 0x160b0b0d, 0x150d0b0e, 0x8f80bfd,
    // 34, 0, -26, -21, -38, -1, 31, 85, -19, -2, 21, -2, -6, 20, 11, 18, 7, 12, -14, 19, 1, 17, -16, 9, -1, -2, 7, 5, 9, -45, -5, 28
    0xebe60022, 0x551fffda, 0xfe15feed, 0x120b14fa, 0x13f20c07, 0x9f01101, 0x507feff, 0x1cfbd309,
    // -1, -11, 11, 3, -6, 3, 1, -4, 14, 0, 4, 9, -6, -3, 1, -6, 1, -10, 7, -11, 1, 7, -3, -14, -3, 2, 11, 9, -9, -7, 28, 9
    0x30bf5ff, 0xfc0103fa, 0x904000e, 0xfa01fdfa, 0xf507f601, 0xf2fd0701, 0x90b02fd, 0x91cf9f7,
    // 3, 0, 8, 2, -2, 8, -5, 5, 2, 6, 1, -2, 7, 2, -3, 9, 0, 7, -4, 3, 8, 6, 0, 4, -6, -2, -5, -9, 6, -8, 13, -1
    0x2080003, 0x5fb08fe, 0xfe010602, 0x9fd0207, 0x3fc0700, 0x4000608, 0xf7fbfefa, 0xff0df806,
    // 9, -8, 1, -4, 20, -11, 4, -11, -11, 2, -2, -10, 0, -1, -1, 13, -1, 3, 2, 3, 6, 3, 8, -6, -2, 7, 0, 11, -2, -6, 6, 2
    0xfc01f809, 0xf504f514, 0xf6fe02f5, 0xdffff00, 0x30203ff, 0xfa080306, 0xb0007fe, 0x206fafe,
    // -4, -4, -8, -2, -9, 3, 4, 15, 6, -6, -1, -17, -6, -15, 3, 5, 30, -40, 55, 4, 127, 34, 11, 22, 28, 2, 1, 40, -40, -18, 27, 73
    0xfef8fcfc, 0xf0403f7, 0xeffffa06, 0x503f1fa, 0x437d81e, 0x160b227f, 0x2801021c, 0x491beed8,
    // 7, -17, -3, -10, -6, 19, 19, 9, 4, 3, -3, -7, -3, 22, 7, -2, -1, 0, -6, -2, 2, 3, 0, -6, -2, -2, 3, -11, 0, -5, 1, 3
    0xf6fdef07, 0x91313fa, 0xf9fd0304, 0xfe0716fd, 0xfefa00ff, 0xfa000302, 0xf503fefe, 0x301fb00,
    // -8, -7, 8, 12, 26, 12, -3, -9, 1, -1, -3, -1, -7, -10, -4, 13, -8, -5, 2, 6, 4, 7, -1, -3, 0, -4, 7, 6, -1, -6, 2, 2
    0xc08f9f8, 0xf7fd0c1a, 0xfffdff01, 0xdfcf6f9, 0x602fbf8, 0xfdff0704, 0x607fc00, 0x202faff,
    // 2, -5, 5, -1, -1, 5, 2, -10, -3, -1, 5, 4, -2, -2, -4, 3, 21, -12, -5, -4, -10, -3, 1, -29, -10, -6, 3, 7, -10, -2, -8, 15
    0xff05fb02, 0xf60205ff, 0x405fffd, 0x3fcfefe, 0xfcfbf415, 0xe301fdf6, 0x703faf6, 0xff8fef6,
    // 4, -11, 3, -2, -1, 4, -1, -12, -6, -3, 5, 7, -12, 0, -4, 3, -13, -1, -14, -1, 16, 3, -17, -13, -10, -7, -9, 16, 17, -2, -11, -10
    0xfe03f504, 0xf4ff04ff, 0x705fdfa, 0x3fc00f4, 0xfff2fff3, 0xf3ef0310, 0x10f7f9f6, 0xf6f5fe11,
    // -19, 42, -83, 0, 121, -1, -21, -28, -42, 18, -20, -40, 33, 80, -83, -74, -3, 11, 0, 2, 12, 23, -15, -9, 5, 8, 1, 4, -8, 1, -10, -18
    0xad2aed, 0xe4ebff79, 0xd8ec12d6, 0xb6ad5021, 0x2000bfd, 0xf7f1170c, 0x4010805, 0xeef601f8,
    // -12, -4, 1, 0, 4, 10, 2, -16, -7, 1, 1, 1, -5, -1, -2, 9, -23, -2, 10, -2, 15, 7, 14, -23, 2, 20, 9, -12, -8, 3, -5, 32
    0x1fcf4, 0xf0020a04, 0x10101f9, 0x9fefffb, 0xfe0afee9, 0xe90e070f, 0xf4091402, 0x20fb03f8,
    // -3, -4, 8, 8, 7, 0, 3, -14, 1, 8, 0, 2, -10, -2, -2, 2, 2, -4, -2, 4, -6, -5, -8, 5, 5, 4, -2, -11, 4, 6, 1, 4
    0x808fcfd, 0xf2030007, 0x2000801, 0x2fefef6, 0x4fefc02, 0x5f8fbfa, 0xf5fe0405, 0x4010604,
    // 21, -8, 0, -9, 8, -18, -13, 0, -7, 20, 0, -16, 31, 0, 17, 0, 5, 11, -3, -7, 3, -10, 3, 9, 14, 0, -2, 9, 10, -5, 10, -11
    0xf700f815, 0xf3ee08, 0xf00014f9, 0x11001f, 0xf9fd0b05, 0x903f603, 0x9fe000e, 0xf50afb0a,
    // 9, 23, -18, 6, 22, 15, -11, 21, -7, 4, 17, -17, 14, 22, -3, 19, -32, 15, -4, -23, 24, 23, -88, 29, 33, 57, 47, 44, 60, -9, 21, 59
    0x6ee1709, 0x15f50f16, 0xef1104f9, 0x13fd160e, 0xe9fc0fe0, 0x1da81718, 0x2c2f3921, 0x3b15f73c,
    // 8, -11, -17, -25, 5, -4, 10, 16, -8, -9, 2, -25, 34, 71, 3, -11, 8, 6, 3, 3, 7, -3, -2, 1, -1, 4, 2, -6, 4, 9, -4, 7
    0xe7eff508, 0x100afc05, 0xe702f7f8, 0xf5034722, 0x3030608, 0x1fefd07, 0xfa0204ff, 0x7fc0904,
    // 19, 2, 12, 16, 9, -28, -18, -4, -1, 19, 6, -1, 10, -1, 23, 1, -3, 0, -2, 9, 5, -7, -5, -3, -8, 5, 3, -3, 6, 0, -2, 2
    0x100c0213, 0xfceee409, 0xff0613ff, 0x117ff0a, 0x9fe00fd, 0xfdfbf905, 0xfd0305f8, 0x2fe0006,
    // -1, -7, 0, 7, -1, 3, 3, 9, 14, -6, 4, -20, 3, -13, 1, -12, -21, -2, -18, -4, 3, -1, -10, 7, 15, -4, 2, -21, 10, -14, 8, -6
    0x700f9ff, 0x90303ff, 0xec04fa0e, 0xf401f303, 0xfceefeeb, 0x7f6ff03, 0xeb02fc0f, 0xfa08f20a,
    // -8, -14, -5, -7, -10, -4, -3, -4, 5, -2, -3, -5, -3, -4, 2, -5, -20, 6, 4, -1, -21, -6, -11, -2, 4, -33, 6, -7, 2, -22, 18, -3
    0xf9fbf2f8, 0xfcfdfcf6, 0xfbfdfe05, 0xfb02fcfd, 0xff0406ec, 0xfef5faeb, 0xf906df04, 0xfd12ea02,
    // -58, 5, -12, 1, 58, -94, 5, 35, -3, 6, 45, -14, -1, -17, 32, -18, -21, -17, -4, 2, -21, -6, 1, -6, 3, -12, 11, -1, 7, -11, 9, 2
    0x1f405c6, 0x2305a23a, 0xf22d06fd, 0xee20efff, 0x2fcefeb, 0xfa01faeb, 0xff0bf403, 0x209f507,
    // -5, -5, -5, 1, 4, 6, -4, -9, 9, -5, -3, -3, 1, -7, 0, -8, -8, -3, -4, -8, 2, -1, -4, -7, 6, -8, 12, -1, 11, -11, -11, -2
    0x1fbfbfb, 0xf7fc0604, 0xfdfdfb09, 0xf800f901, 0xf8fcfdf8, 0xf9fcff02, 0xff0cf806, 0xfef5f50b,
    // -9, -10, 3, -1, -11, 9, -1, -2, 3, 2, 4, -4, 4, -8, -3, -6, 16, -11, 18, -4, -8, 9, 13, 0, 6, 15, 20, 3, -8, 0, -8, 13
    0xff03f6f7, 0xfeff09f5, 0xfc040203, 0xfafdf804, 0xfc12f510, 0xd09f8, 0x3140f06, 0xdf800f8,
    // 0, 7, -4, 15, -6, 3, 5, 18, -14, 15, -10, 2, 17, -23, 9, 15, -4, 2, 15, -6, 2, 9, 9, 14, 18, -1, 4, 15, -10, -4, 1, -12
    0xffc0700, 0x120503fa, 0x2f60ff2, 0xf09e911, 0xfa0f02fc, 0xe090902, 0xf04ff12, 0xf401fcf6,
    // 47, -14, 31, -5, -22, 7, 1, -4, -11, 2, 33, 30, -4, 7, 22, 9, 56, 33, 6, 56, -50, 77, 42, 31, -10, -18, 8, -2, 73, -6, 9, 43
    0xfb1ff22f, 0xfc0107ea, 0x1e2102f5, 0x91607fc, 0x38062138, 0x1f2a4dce, 0xfe08eef6, 0x2b09fa49,
    // 0, -18, 31, -20, 10, 13, 0, 15, 15, 3, 22, 5, 2, 25, 1, -13, 16, -4, 17, -1, 0, 8, 2, 2, -4, 11, 10, 14, -8, 12, -10, 6
    0xec1fee00, 0xf000d0a, 0x516030f, 0xf3011902, 0xff11fc10, 0x2020800, 0xe0a0bfc, 0x6f60cf8,
    // -4, 16, 14, 27, -16, 7, -12, 25, -14, 4, -14, 5, 17, -5, -34, -11, -6, -9, 28, -4, 13, 18, 3, 1, 9, -5, 14, 5, -9, -6, -5, -12
    0x1b0e10fc, 0x19f407f0, 0x5f204f2, 0xf5defb11, 0xfc1cf7fa, 0x103120d, 0x50efb09, 0xf4fbfaf7,
    // -9, 8, 6, -1, -10, 4, -4, 16, 8, -5, 1, 7, 5, 1, -3, -11, -9, -1, 11, 21, 14, -8, 10, 15, 11, -11, -8, 4, 4, -6, 8, 3
    0xff0608f7, 0x10fc04f6, 0x701fb08, 0xf5fd0105, 0x150bfff7, 0xf0af80e, 0x4f8f50b, 0x308fa04,
    // 17, 9, -3, -3, 3, 16, -6, 17, 8, -9, 3, -11, 2, 7, 6, -26, -3, -4, 15, -11, -7, -16, -21, 40, 11, -1, 1, 33, 16, -20, 3, -24
    0xfdfd0911, 0x11fa1003, 0xf503f708, 0xe6060702, 0xf50ffcfd, 0x28ebf0f9, 0x2101ff0b, 0xe803ec10,
    // 14, -77, 16, -40, 38, -52, 6, 29, -21, 12, 22, -27, -1, -23, -67, -1, 39, 22, 7, -8, 23, 14, -24, 6, 9, 16, 8, 20, -10, -32, -1, -15
    0xd810b30e, 0x1d06cc26, 0xe5160ceb, 0xffbde9ff, 0xf8071627, 0x6e80e17, 0x14081009, 0xf1ffe0f6,
    // -10, 4, 2, 8, 1, -6, -5, 18, 6, -7, -8, 9, 5, -14, 2, -13, -26, 2, -5, -10, 23, -4, 30, 7, -17, -1, -11, -7, 8, 13, -9, 27
    0x80204f6, 0x12fbfa01, 0x9f8f906, 0xf302f205, 0xf6fb02e6, 0x71efc17, 0xf9f5ffef, 0x1bf70d08,
    // 16, 5, -7, -15, -3, 8, 9, 2, 8, -1, -2, -13, 6, 10, 0, -31, 3, -1, 1, 4, 1, 4, -1, 2, 0, 10, 0, 10, 7, 4, -3, 0
    0xf1f90510, 0x20908fd, 0xf3feff08, 0xe1000a06, 0x401ff03, 0x2ff0401, 0xa000a00, 0xfd0407,
    // 1, -10, 1, -13, -19, -5, -20, 20, 19, 29, -4, 12, -2, 4, -8, -15, 8, 1, 12, -5, 0, 0, 4, 3, 4, 5, -4, 15, -7, 1, -7, -2
    0xf301f601, 0x14ecfbed, 0xcfc1d13, 0xf1f804fe, 0xfb0c0108, 0x3040000, 0xffc0504, 0xfef901f9,
    // 17, -5, 8, 0, 14, 3, 29, -3, -21, 1, 10, 2, 1, 0, -5, 53, 6, -10, 2, 18, 2, 39, 28, 36, 2, 0, -29, 0, 2, -22, -111, 57
    0x8fb11, 0xfd1d030e, 0x20a01eb, 0x35fb0001, 0x1202f606, 0x241c2702, 0xe30002, 0x3991ea02,
    // 2, 3, 15, -2, 13, -21, 20, 26, -11, 17, -9, -9, -3, 13, 0, 15, 11, 3, 1, 3, 10, 0, 1, 15, -5, -3, 5, 3, 8, -1, 5, -3
    0xfe0f0302, 0x1a14eb0d, 0xf7f711f5, 0xf000dfd, 0x301030b, 0xf01000a, 0x305fdfb, 0xfd05ff08,
    // 39, 16, 15, 2, -22, 4, -19, 28, 1, -4, 6, 9, 12, -6, -12, -37, 0, -1, 9, -14, -11, 7, 3, 16, 2, -6, 3, -2, -1, -2, 11, -18
    0x20f1027, 0x1ced04ea, 0x906fc01, 0xdbf4fa0c, 0xf209ff00, 0x100307f5, 0xfe03fa02, 0xee0bfeff,
    // -2, 3, 6, -4, 4, 3, 3, 9, -1, 0, -11, 2, 5, -15, 5, 6, -29, 20, -4, -5, -22, 6, -13, 6, 17, -6, -6, -11, 5, -13, -11, -25
    0xfc0603fe, 0x9030304, 0x2f500ff, 0x605f105, 0xfbfc14e3, 0x6f306ea, 0xf5fafa11, 0xe7f5f305,
    // 8, -11, 6, 3, -19, 18, 4, 16, 6, -20, 5, -13, -10, 1, -1, -2, 4, -23, 3, -9, 10, -14, 15, 7, -7, -15, 11, 16, 11, -34, 3, 36
    0x306f508, 0x100412ed, 0xf305ec06, 0xfeff01f6, 0xf703e904, 0x70ff20a, 0x100bf1f9, 0x2403de0b,
    // 8, 9, 11, -27, -18, 25, 16, 75, 18, -11, 76, -6, -10, 17, 69, -64, -13, 1, 27, 26, 29, -29, 2, 28, 20, 14, 10, 19, -40, -50, 10, 12
    0xe50b0908, 0x4b1019ee, 0xfa4cf512, 0xc04511f6, 0x1a1b01f3, 0x1c02e31d, 0x130a0e14, 0xc0aced8,
    // 0, -1, -5, 1, 1, 1, -2, 15, -7, -2, -5, 8, 5, -5, 2, -2, 14, 12, 6, -13, -32, 12, 9, 11, 3, -7, -2, -8, 2, 9, -11, -19
    0x1fbff00, 0xffe0101, 0x8fbfef9, 0xfe02fb05, 0xf3060c0e, 0xb090ce0, 0xf8fef903, 0xedf50902,
    // 19, -1, 6, -7, -10, -7, 10, 8, 12, -7, 6, 8, -8, 1, 4, -7, 1, 16, 2, 0, 14, -7, -1, -1, -20, -3, 0, 11, 10, 5, 7, 0
    0xf906ff13, 0x80af9f6, 0x806f90c, 0xf90401f8, 0x21001, 0xfffff90e, 0xb00fdec, 0x7050a,
    // -5, 12, -2, -2, 0, 1, -12, 3, 6, -3, 3, -2, 1, 6, -19, 8, 5, 1, -2, 8, -3, 1, -5, -2, -21, -12, 10, -12, 4, 18, -6, 10
    0xfefe0cfb, 0x3f40100, 0xfe03fd06, 0x8ed0601, 0x8fe0105, 0xfefb01fd, 0xf40af4eb, 0xafa1204,
    // 13, 13, -3, 4, 5, -25, 3, 2, -1, 3, 0, 20, 17, 9, 19, -6, -50, -12, 11, 33, 24, -40, 40, 36, 23, 22, 6, -58, 12, 14, 42, -4
    0x4fd0d0d, 0x203e705, 0x140003ff, 0xfa130911, 0x210bf4ce, 0x2428d818, 0xc6061617, 0xfc2a0e0c,
    // -6, 31, 2, 32, 0, -28, -16, 2, 4, 18, 6, 20, -8, -31, -6, 15, 1, 2, -4, 8, 4, -19, -3, 6, -14, -5, 0, 23, 11, 1, 3, -3
    0x20021ffa, 0x2f0e400, 0x14061204, 0xffae1f8, 0x8fc0201, 0x6fded04, 0x1700fbf2, 0xfd03010b,
    // -10, -8, 7, -23, -1, -1, 12, 3, 3, 6, 10, -4, 10, 26, -13, 27, 11, -1, 4, -7, 7, -19, 7, -5, 4, -9, 8, 4, 4, 11, 4, 11
    0xe907f8f6, 0x30cffff, 0xfc0a0603, 0x1bf31a0a, 0xf904ff0b, 0xfb07ed07, 0x408f704, 0xb040b04,
    // 7, -5, -1, 0, -3, -8, 2, 2, 5, 6, -7, 3, -6, 2, 8, 4, 22, 0, -11, 6, 16, -22, -18, -11, -3, 19, -22, 16, 1, -5, 18, 8
    0xfffb07, 0x202f8fd, 0x3f90605, 0x40802fa, 0x6f50016, 0xf5eeea10, 0x10ea13fd, 0x812fb01,
    // 14, -8, -3, -9, 14, -12, -4, -2, 12, 13, -13, -9, -7, -6, 8, -11, 14, -4, -17, 9, 14, -37, -8, 15, -10, 6, -22, 0, 9, 0, 21, 0
    0xf7fdf80e, 0xfefcf40e, 0xf7f30d0c, 0xf508faf9, 0x9effc0e, 0xff8db0e, 0xea06f6, 0x150009,
    // -3, -17, -57, 49, 19, 38, 94, 6, -26, -65, -59, 5, -33, 30, 78, 65, 37, 9, -17, 1, -9, 5, 6, 14, 5, 10, -20, 1, -4, 6, 44, -19
    0x31c7effd, 0x65e2613, 0x5c5bfe6, 0x414e1edf, 0x1ef0925, 0xe0605f7, 0x1ec0a05, 0xed2c06fc,
    // 13, -9, -1, 1, -5, -19, -12, -3, 9, 6, -15, 5, -1, -6, 20, -1, 32, -15, -13, 1, 13, -11, -10, -2, 0, 4, -14, 5, 0, -1, 18, -12
    0x1fff70d, 0xfdf4edfb, 0x5f10609, 0xff14faff, 0x1f3f120, 0xfef6f50d, 0x5f20400, 0xf412ff00,
    // 21, -5, -2, -13, 0, -4, -3, 2, 3, 8, -7, -3, -2, 12, 5, -5, 6, 3, 9, 0, 7, -13, 7, -8, -9, -2, 7, -9, 2, -6, -9, -5
    0xf3fefb15, 0x2fdfc00, 0xfdf90803, 0xfb050cfe, 0x90306, 0xf807f307, 0xf707fef7, 0xfbf7fa02,
    // 31, 6, -10, 2, 3, -7, 10, -12, -14, -8, -5, 1, 3, 0, -14, -5, 2, 6, -2, -3, 5, -19, -2, -20, -12, -4, -1, 5, 1, -2, -4, 2
    0x2f6061f, 0xf40af903, 0x1fbf8f2, 0xfbf20003, 0xfdfe0602, 0xecfeed05, 0x5fffcf4, 0x2fcfe01,
    // 23, 1, 10, -4, -24, -28, 7, -25, -8, -12, -1, 2, 0, -16, -2, -23, 34, -9, 7, -20, -18, 59, -8, -4, 10, -12, 8, 7, 18, -2, -34, 0
    0xfc0a0117, 0xe707e4e8, 0x2fff4f8, 0xe9fef000, 0xec07f722, 0xfcf83bee, 0x708f40a, 0xdefe12,
    // 27, 1, 5, -15, -20, -14, 6, -12, -14, -13, 3, -7, 10, -3, -30, -19, 9, 2, -9, -7, -4, -9, 1, -2, 0, -2, 5, -7, 2, -4, -1, 2
    0xf105011b, 0xf406f2ec, 0xf903f3f2, 0xede2fd0a, 0xf9f70209, 0xfe01f7fc, 0xf905fe00, 0x2fffc02,
    // 35, 10, -10, 7, -16, -8, 0, 11, -10, -12, 7, -2, 11, -6, -7, -10, 5, 2, 5, -3, -9, -6, 0, 2, -3, -8, 6, -9, 8, -10, -6, -2
    0x7f60a23, 0xb00f8f0, 0xfe07f4f6, 0xf6f9fa0b, 0xfd050205, 0x200faf7, 0xf706f8fd, 0xfefaf608,
    // -14, 4, 9, -1, -6, 16, -13, 8, 13, -2, -4, 2, 4, -4, -21, -10, 11, -12, 35, 1, 38, 13, 14, -17, 7, 1, 40, 9, -2, 1, -16, 7
    0xff0904f2, 0x8f310fa, 0x2fcfe0d, 0xf6ebfc04, 0x123f40b, 0xef0e0d26, 0x9280107, 0x7f001fe,
    // 6, 16, 10, 8, -2, 15, 0, 12, -5, 6, 11, 20, 5, 3, -9, 4, -27, 23, 10, 26, 2, 3, 1, 32, 7, -13, 6, 7, 28, 3, 8, -28
    0x80a1006, 0xc000ffe, 0x140b06fb, 0x4f70305, 0x1a0a17e5, 0x20010302, 0x706f307, 0xe408031c,
    // 34, -15, 70, 20, 96, 55, 59, -104, -24, -98, 89, -12, 28, -34, -31, -41, 12, 27, -1, 8, 0, 38, -2, 2, -4, 4, 0, 10, 23, -1, -19, -3
    0x1446f122, 0x983b3760, 0xf4599ee8, 0xd7e1de1c, 0x8ff1b0c, 0x2fe2600, 0xa0004fc, 0xfdedff17,
    // -1, 9, 18, 15, 8, 6, 0, 32, 8, -8, 2, 16, 3, -1, -13, -10, 8, -4, 39, -9, 33, -1, 11, -26, -19, -6, 27, 14, -6, 2, 13, 7
    0xf1209ff, 0x20000608, 0x1002f808, 0xf6f3ff03, 0xf727fc08, 0xe60bff21, 0xe1bfaed, 0x70d02fa,
    // 9, 5, 15, -4, 8, 13, 4, 5, -2, 5, 11, 5, 8, 10, -2, 2, -6, -2, 3, -3, -2, 23, 6, -10, 2, -4, 8, 2, -6, 2, -13, 8
    0xfc0f0509, 0x5040d08, 0x50b05fe, 0x2fe0a08, 0xfd03fefa, 0xf60617fe, 0x208fc02, 0x8f302fa,
    // 3, 4, -8, 2, -7, 31, -12, -18, -2, 1, -4, 10, 2, -12, -3, 10, -2, -5, -3, -2, -4, 10, -5, -4, -2, -5, -3, -11, -4, 0, -2, -9
    0x2f80403, 0xeef41ff9, 0xafc01fe, 0xafdf402, 0xfefdfbfe, 0xfcfb0afc, 0xf5fdfbfe, 0xf7fe00fc,
    // -8, 7, -4, 12, 4, -10, -4, -6, -19, -8, -28, 16, 29, -12, 15, -30, 25, -58, 35, 4, -37, 0, -10, -11, -16, 22, -11, -20, -6, -7, 40, -78
    0xcfc07f8, 0xfafcf604, 0x10e4f8ed, 0xe20ff41d, 0x423c619, 0xf5f600db, 0xecf516f0, 0xb228f9fa,
    // 1, 36, 4, 17, -15, -1, -6, 1, -8, 0, -16, -4, 4, -13, -4, -26, -10, -6, 1, 9, 7, 4, 2, -3, 0, 10, -9, 13, 3, -2, -1, 2
    0x11042401, 0x1fafff1, 0xfcf000f8, 0xe6fcf304, 0x901faf6, 0xfd020407, 0xdf70a00, 0x2fffe03,
    // -10, -8, 26, -13, -4, 15, 6, -6, -6, 30, 2, 2, 1, 15, -5, 27, -1, -5, 3, -6, -1, 4, 8, -1, 6, 9, -6, -12, 2, 11, 1, -5
    0xf31af8f6, 0xfa060ffc, 0x2021efa, 0x1bfb0f01, 0xfa03fbff, 0xff0804ff, 0xf4fa0906, 0xfb010b02,
    // 7, 10, -5, -2, 11, 4, 2, 4, -15, 0, 0, 5, 1, 2, 19, 13, -6, 7, -18, -1, 9, -12, -23, -19, -15, 17, -5, -8, 15, -9, 27, 17
    0xfefb0a07, 0x402040b, 0x50000f1, 0xd130201, 0xffee07fa, 0xede9f409, 0xf8fb11f1, 0x111bf70f,
    // -1, -11, -12, -4, -4, -2, -12, 0, -9, 0, -2, -19, -2, 8, 9, 5, 14, -7, -26, -11, 17, -9, 6, -10, -23, -7, -7, 3, 4, -14, 10, 31
    0xfcf4f5ff, 0xf4fefc, 0xedfe00f7, 0x50908fe, 0xf5e6f90e, 0xf606f711, 0x3f9f9e9, 0x1f0af204,
    // 24, -37, -79, -63, 2, 44, -49, -103, -24, -6, 11, -11, 19, -39, 52, 56, -6, 8, -22, 14, 7, -5, -8, -6, -3, -1, 0, 13, -15, -26, 26, 18
    0xc1b1db18, 0x99cf2c02, 0xf50bfae8, 0x3834d913, 0xeea08fa, 0xfaf8fb07, 0xd00fffd, 0x121ae6f1,
    // -13, -4, -20, -7, 1, -4, -9, -7, -6, -4, -7, 6, 5, -12, 22, -5, 3, -4, -34, -33, -6, 39, -9, -15, -16, 1, -2, -20, 22, 3, 18, 20
    0xf9ecfcf3, 0xf9f7fc01, 0x6f9fcfa, 0xfb16f405, 0xdfdefc03, 0xf1f727fa, 0xecfe01f0, 0x14120316,
    // -3, 2, -12, -5, -6, 5, -7, 7, -3, 1, -6, 1, 2, 6, 0, 6, 6, -2, 4, -6, -5, -11, -4, 3, -13, -6, -4, 12, -15, 5, -8, -1
    0xfbf402fd, 0x7f905fa, 0x1fa01fd, 0x6000602, 0xfa04fe06, 0x3fcf5fb, 0xcfcfaf3, 0xfff805f1,
    // 4, 3, -6, -15, -8, -20, 1, -6, -24, -23, 2, 12, -24, 2, 0, -17, 3, 6, 8, -15, 11, -2, -2, -1, -6, -4, 2, 20, -15, 2, -11, -16
    0xf1fa0304, 0xfa01ecf8, 0xc02e9e8, 0xef0002e8, 0xf1080603, 0xfffefe0b, 0x1402fcfa, 0xf0f502f1,
    // -9, 1, -16, -31, -17, 2, -30, 8, -16, -12, 13, -18, -5, 0, 5, 7, 1, -10, -49, -30, -9, -17, -6, -45, -5, -13, 33, 53, -31, -18, 35, 27
    0xe1f001f7, 0x8e202ef, 0xee0df4f0, 0x70500fb, 0xe2cff601, 0xd3faeff7, 0x3521f3fb, 0x1b23eee1,
    // 2, -1, 4, -29, -5, -8, -10, -10, -34, -15, 22, 17, 1, 9, 29, 11, 10, 8, 16, -10, -13, 7, -3, -1, -7, -5, 7, 5, -15, 8, 5, 2
    0xe304ff02, 0xf6f6f8fb, 0x1116f1de, 0xb1d0901, 0xf610080a, 0xfffd07f3, 0x507fbf9, 0x20508f1,
    // -2, -2, 7, 5, 6, -41, -1, 17, -9, -20, 2, 13, -25, -14, -5, -43, 4, 4, 10, -9, 11, -8, 2, 1, -27, -4, 3, 20, -19, 6, 13, -5
    0x507fefe, 0x11ffd706, 0xd02ecf7, 0xd5fbf2e7, 0xf70a0404, 0x102f80b, 0x1403fce5, 0xfb0d06ed,
};
static const uint embedded_decoder2_ResidualBlock_2_body_conv_dw_bias_dwords[8] = {
    // -0.001156, 0.06134, -0.1086, -0.0901, -0.05936, -0.03815, -0.07886, -0.08563, -0.02234, 0.08856, -0.07135, 0.02678, -0.003723, 0.0715, -0.0887, -0.0958
    0x2bda94bc, 0xadc4aef3, 0xa8e2ab99, 0xad7bad0c, 0x2daba5b8, 0x26dbac91, 0x2c939ba0, 0xae22adad,
};
static const uint embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 37, -43, -10, -20, 46, 22, -6, -44, -40, 15, 15, 16, 15, -37, 10, 7, -10, 7, -5, 47, 1, -29, -10, -13, -29, 4, 26, -31, -19, 14, 71, -14
    0xecf6d525, 0xd4fa162e, 0x100f0fd8, 0x70adb0f, 0x2ffb07f6, 0xf3f6e301, 0xe11a04e3, 0xf2470eed,
    // -59, 12, -31, -19, -27, -58, -6, -36, -24, -2, -1, -14, -44, 13, 74, 33, 31, -128, -37, 43, 42, -30, -52, 34, 41, 13, -72, 10, -68, -1, 23, 5
    0xede10cc5, 0xdcfac6e5, 0xf2fffee8, 0x214a0dd4, 0x2bdb801f, 0x22cce22a, 0xab80d29, 0x517ffbc,
    // 10, 31, 19, 25, -15, 4, -24, 3, -26, 1, 10, 3, -4, 15, 7, -35, -10, 15, -48, 9, -24, 22, 17, 25, 12, 17, -68, 36, 44, 16, -26, -25
    0x19131f0a, 0x3e804f1, 0x30a01e6, 0xdd070ffc, 0x9d00ff6, 0x191116e8, 0x24bc110c, 0xe7e6102c,
    // 26, 40, -117, 51, 66, 25, 63, -72, 74, 29, 6, -4, -11, -14, 26, 25, 44, -41, 23, -53, -6, -19, 39, -11, 30, 58, 18, -12, 8, 60, 16, -25
    0x338b281a, 0xb83f1942, 0xfc061d4a, 0x191af2f5, 0xcb17d72c, 0xf527edfa, 0xf4123a1e, 0xe7103c08,
    // -9, 53, -22, 4, 55, -1, 7, 0, 10, 18, -16, -18, 9, 13, 7, 17, -3, -12, -11, -11, -9, 22, 0, 36, 7, -12, -15, 22, 47, -46, 103, 11
    0x4ea35f7, 0x7ff37, 0xeef0120a, 0x11070d09, 0xf5f5f4fd, 0x240016f7, 0x16f1f407, 0xb67d22f,
    // -9, -10, -8, 6, 18, -14, -1, 14, -14, 56, 16, -2, -5, -25, -17, 0, 31, -29, 35, -11, 95, -59, 3, -17, 62, 21, -29, -15, 2, -69, -31, 40
    0x6f8f6f7, 0xefff212, 0xfe1038f2, 0xefe7fb, 0xf523e31f, 0xef03c55f, 0xf1e3153e, 0x28e1bb02,
    // 17, 25, 23, 8, -12, -17, 8, -10, 9, 0, -19, 13, -14, -17, 25, -45, -50, -34, 41, -8, 38, 24, 43, 2, 24, -20, 18, 11, 11, -45, 33, -5
    0x8171911, 0xf608eff4, 0xded0009, 0xd319eff2, 0xf829dece, 0x22b1826, 0xb12ec18, 0xfb21d30b,
    // 47, 8, -29, 8, -27, -27, 28, -18, 2, -41, 3, -1, 10, 2, -2, 1, 10, 5, -10, -52, 21, -18, -3, -36, 28, -36, -18, 41, -13, -11, -28, 8
    0x8e3082f, 0xee1ce5e5, 0xff03d702, 0x1fe020a, 0xccf6050a, 0xdcfdee15, 0x29eedc1c, 0x8e4f5f3,
    // 14, -5, -29, 63, -3, 24, 4, 14, 0, 15, -21, 5, 37, 16, 4, -52, 10, 22, 3, -1, -13, -11, -16, -27, 3, 21, -23, -42, 2, -28, -12, -3
    0x3fe3fb0e, 0xe0418fd, 0x5eb0f00, 0xcc041025, 0xff03160a, 0xe5f0f5f3, 0xd6e91503, 0xfdf4e402,
    // 32, -47, -40, 7, 6, -2, -20, -14, 5, -1, -28, -5, -21, 7, 9, 8, 64, 0, -9, -5, -6, -6, -2, -44, -43, -7, 3, 37, 40, -5, 30, 20
    0x7d8d120, 0xf2ecfe06, 0xfbe4ff05, 0x80907eb, 0xfbf70040, 0xd4fefafa, 0x2503f9d5, 0x141efb28,
    // 23, -1, 37, 15, -22, 30, -11, -7, 31, -22, -16, 59, -2, 26, 42, 29, 7, -6, 18, 16, -43, 11, 2, -13, 2, -6, 13, 31, -3, 25, 1, 4
    0xf25ff17, 0xf9f51eea, 0x3bf0ea1f, 0x1d2a1afe, 0x1012fa07, 0xf3020bd5, 0x1f0dfa02, 0x40119fd,
    // -43, 38, -25, 52, 4, 9, -34, 10, -33, -56, -20, 15, -12, -60, -19, 25, 10, 17, -42, -10, -14, 18, 5, 54, 15, -10, 24, 60, 1, -9, 40, 8
    0x34e726d5, 0xade0904, 0xfecc8df, 0x19edc4f4, 0xf6d6110a, 0x360512f2, 0x3c18f60f, 0x828f701,
    // 3, 47, -1, -8, 0, -5, 2, -9, -36, 22, 14, 20, -3, 61, -26, 16, -36, 90, -6, 30, 88, -77, 26, -20, 27, -4, 5, 13, 103, -6, 14, 35
    0xf8ff2f03, 0xf702fb00, 0x140e16dc, 0x10e63dfd, 0x1efa5adc, 0xec1ab358, 0xd05fc1b, 0x230efa67,
    // -34, -67, 74, 51, 35, 26, -72, -106, 30, 37, 22, -12, 33, -17, 8, -9, 85, 48, 34, 53, 41, 3, 38, 31, 25, 32, -9, -9, -52, -79, 15, 5
    0x334abdde, 0x96b81a23, 0xf416251e, 0xf708ef21, 0x35223055, 0x1f260329, 0xf7f72019, 0x50fb1cc,
    // -26, -22, 35, 23, 12, -19, 28, -15, -33, -4, -48, -21, -1, 13, 7, 0, -11, -1, -44, 26, 7, 19, -1, -44, -9, 8, -3, 6, -3, 20, 33, -35
    0x1723eae6, 0xf11ced0c, 0xebd0fcdf, 0x70dff, 0x1ad4fff5, 0xd4ff1307, 0x6fd08f7, 0xdd2114fd,
    // -58, -67, 107, 85, 31, -28, 75, -63, -50, 16, -91, 4, -14, -21, 23, 0, -31, 10, -27, 6, 23, -34, 0, 3, -5, -32, -37, 45, 1, 28, 22, -22
    0x556bbdc6, 0xc14be41f, 0x4a510ce, 0x17ebf2, 0x6e50ae1, 0x300de17, 0x2ddbe0fb, 0xea161c01,
};
static const uint embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias_dwords[16] = {
    // 0.02602, -0.174, 0.262, -0.1976, 0.391, 0.2854, -0.1599, 0.02863, 0.0771, -0.1891, 0.11786, 0.1192, 0.1621, 0.321, 0.2047, 0.2583
    0xb19126a9, 0xb2533431, 0x34913642, 0x2754b11e, 0xb20d2cef, 0x2fa12f8b, 0x35233130, 0x3422328d,
    // -0.06647, 0.1301, 0.3777, -0.08813, -0.109, 0.2325, 0.00749, 0.10205, 0.1351, -0.2471, 0.1853, 0.073, 0.4666, 0.1416, -0.3584, 0.1857
    0x302aac41, 0xada4360b, 0x3371aefa, 0x2e881fab, 0xb3e83053, 0x2cac31ee, 0x30883777, 0x31f1b5bc,
};
static const uint embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 44, -4, -6, -40, 30, 18, -58, 19, -56, 103, 57, -22, -13, 43, -4, 8, 21, -42, -36, 36, 59, 39, -17, 60, 8, -97, 17, -13, -48, 16, -107, 25
    0xd8fafc2c, 0x13c6121e, 0xea3967c8, 0x8fc2bf3, 0x24dcd615, 0x3cef273b, 0xf3119f08, 0x199510d0,
    // 21, -6, -8, -16, 3, 31, -18, -2, -8, -12, -3, 9, -26, -2, 11, -29, 23, 26, -1, 3, 10, 18, 1, -9, 8, 6, 42, 4, 6, -25, 23, -27
    0xf0f8fa15, 0xfeee1f03, 0x9fdf4f8, 0xe30bfee6, 0x3ff1a17, 0xf701120a, 0x42a0608, 0xe517e706,
    // 7, -72, -74, -39, 25, 68, 76, 27, 17, -3, -37, -8, 30, -11, 46, 39, 32, -31, 16, -3, -18, -9, -19, 11, -40, 39, -42, -22, -11, 40, -43, 32
    0xd9b6b807, 0x1b4c4419, 0xf8dbfd11, 0x272ef51e, 0xfd10e120, 0xbedf7ee, 0xead627d8, 0x20d528f5,
    // 13, -2, -15, -46, -26, 22, 12, 4, -11, 6, -9, 2, -17, 0, 47, -14, 32, -14, 7, 19, 3, -1, -14, -5, -18, 39, 18, 7, -2, -9, -8, -10
    0xd2f1fe0d, 0x40c16e6, 0x2f706f5, 0xf22f00ef, 0x1307f220, 0xfbf2ff03, 0x71227ee, 0xf6f8f7fe,
    // -46, 23, 6, -128, -13, -5, 7, -9, 19, -9, -5, 5, 4, 43, 39, -6, 11, -12, -47, 66, -34, -13, 11, 5, 8, 104, -17, 54, -6, -11, -23, -1
    0x800617d2, 0xf707fbf3, 0x5fbf713, 0xfa272b04, 0x42d1f40b, 0x50bf3de, 0x36ef6808, 0xffe9f5fa,
    // -19, -23, -6, 29, -1, -6, 19, 6, 32, -54, -25, -7, -17, 1, -11, -3, -10, -4, 6, -22, -20, -21, -5, -15, 19, 35, -8, -53, 17, 29, 58, 23
    0x1dfae9ed, 0x613faff, 0xf9e7ca20, 0xfdf501ef, 0xea06fcf6, 0xf1fbebec, 0xcbf82313, 0x173a1d11,
    // 8, -46, -1, -42, -12, 30, 54, -59, -6, 27, 26, 17, -4, 31, 19, -15, -15, -1, -14, 15, -9, 22, 60, 4, -19, 18, -20, -9, -12, -7, -56, -10
    0xd6ffd208, 0xc5361ef4, 0x111a1bfa, 0xf1131ffc, 0xff2fff1, 0x43c16f7, 0xf7ec12ed, 0xf6c8f9f4,
    // 14, -8, -13, 102, -25, 51, 78, 6, -8, 18, -10, 31, -23, -12, -35, -19, 35, 22, 19, -45, -13, -27, -7, 5, -22, -54, 21, 48, -5, -44, -41, -28
    0x66f3f80e, 0x64e33e7, 0x1ff612f8, 0xedddf4e9, 0xd3131623, 0x5f9e5f3, 0x3015caea, 0xe4d7d4fb,
    // -4, -2, -7, 15, -4, -1, 9, -2, 4, -8, -11, 2, -3, -5, 0, 1, 2, 2, 6, -9, -6, -4, 3, -2, -1, 2, 0, -2, 5, -1, 6, -1
    0xff9fefc, 0xfe09fffc, 0x2f5f804, 0x100fbfd, 0xf7060202, 0xfe03fcfa, 0xfe0002ff, 0xff06ff05,
    // -29, 53, -27, 73, 35, -40, 41, -28, 15, 6, -18, -95, 45, -51, 27, -52, 62, -24, 19, -49, -5, -6, 36, 12, -36, -21, -36, 86, -4, 6, -10, 45
    0x49e535e3, 0xe429d823, 0xa1ee060f, 0xcc1bcd2d, 0xcf13e83e, 0xc24fafb, 0x56dcebdc, 0x2df606fc,
    // -43, -21, -51, -54, 9, 41, -30, -6, 39, -5, 19, -23, 9, -3, -26, -15, 49, -25, -28, 29, -9, -24, -2, 2, 61, 37, 64, -44, 7, 10, 7, 7
    0xcacdebd5, 0xfae22909, 0xe913fb27, 0xf1e6fd09, 0x1de4e731, 0x2fee8f7, 0xd440253d, 0x7070a07,
    // 11, 10, 1, 8, 5, 10, -4, 11, 7, 4, 25, -1, -1, 6, -11, 1, 13, 9, 6, 2, -3, 0, -3, 2, 9, -12, 22, -4, -1, 0, -6, -9
    0x8010a0b, 0xbfc0a05, 0xff190407, 0x1f506ff, 0x206090d, 0x2fd00fd, 0xfc16f409, 0xf7fa00ff,
    // -31, -18, -26, -42, -7, 18, -48, 19, -5, 1, 14, -23, -22, -5, -13, -23, 26, 39, -15, 41, 8, -14, -36, 3, 29, 21, 32, -22, -5, -1, 24, 5
    0xd6e6eee1, 0x13d012f9, 0xe90e01fb, 0xe9f3fbea, 0x29f1271a, 0x3dcf208, 0xea20151d, 0x518fffb,
    // 23, 44, -4, -24, 6, 19, -17, 16, -6, -7, 2, -12, -10, -12, 32, -26, 64, 27, 2, 15, -2, -5, -9, -6, -7, 24, 40, 51, 4, -21, 10, -24
    0xe8fc2c17, 0x10ef1306, 0xf402f9fa, 0xe620f4f6, 0xf021b40, 0xfaf7fbfe, 0x332818f9, 0xe80aeb04,
    // 4, 52, 33, -2, -2, -48, 118, -4, 35, 35, 0, -14, -24, -14, 9, -13, -14, -7, 9, -20, -30, -43, -1, 35, 0, 2, 106, -74, -36, 21, -107, -1
    0xfe213404, 0xfc76d0fe, 0xf2002323, 0xf309f2e8, 0xec09f9f2, 0x23ffd5e2, 0xb66a0200, 0xff9515dc,
    // -11, -13, 10, -4, -21, -7, 66, 49, 14, 13, 7, 11, -8, 3, 11, -19, -22, 5, -8, -19, -9, 8, -56, 2, -6, 13, -34, -1, 10, -11, -34, 0
    0xfc0af3f5, 0x3142f9eb, 0xb070d0e, 0xed0b03f8, 0xedf805ea, 0x2c808f7, 0xffde0dfa, 0xdef50a,
};
static const uint embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias_dwords[8] = {
    // -0.2725, -0.1385, 0.2905, -0.3787, -0.03296, 0.266, -0.1532, -0.03069, 0.0731, 0.2312, 0.2568, 0.269, -0.0679, 0.1176, 0.1382, 0.1523
    0xb06fb45c, 0xb60f34a6, 0x3442a838, 0xa7dbb0e7, 0x33662cae, 0x344e341c, 0x2f87ac58, 0x30e0306c,
};
static const uint embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 0, 11, 37, 15, -16, -9, 8, 14, 5, 3, 14, 0, 10, 7, -20, -10, -28, 26, -3, 24, -30, -55, 37, 10, -24, -44, -35, -2, -13, 12, -18, 12
    0xf250b00, 0xe08f7f0, 0xe0305, 0xf6ec070a, 0x18fd1ae4, 0xa25c9e2, 0xfeddd4e8, 0xcee0cf3,
    // -12, 27, -30, 12, 40, -61, 4, 49, -33, 34, -34, -5, 3, 55, -42, 29, -106, -29, 51, 10, 98, 90, 21, 40, 76, 9, 23, 19, -26, 8, 80, 70
    0xce21bf4, 0x3104c328, 0xfbde22df, 0x1dd63703, 0xa33e396, 0x28155a62, 0x1317094c, 0x465008e6,
    // -8, -7, -10, 10, -6, -10, -2, 2, -60, 10, 13, -7, 10, -6, 1, 13, -7, -16, -13, 35, -6, -20, -2, -6, 39, 6, 11, 26, 7, -22, -3, 14
    0xaf6f9f8, 0x2fef6fa, 0xf90d0ac4, 0xd01fa0a, 0x23f3f0f9, 0xfafeecfa, 0x1a0b0627, 0xefdea07,
    // 0, -15, -5, -17, -7, -6, 16, -7, 58, -2, 4, -6, 12, 23, -1, 10, 10, 44, 5, -2, 11, -3, -27, 2, 47, -2, -8, -38, -1, -20, 3, 15
    0xeffbf100, 0xf910faf9, 0xfa04fe3a, 0xaff170c, 0xfe052c0a, 0x2e5fd0b, 0xdaf8fe2f, 0xf03ecff,
    // 2, 17, 34, 20, -16, 0, 11, 14, 9, 0, 10, 3, 9, 10, -15, -8, 2, 9, -35, -15, 39, 4, 25, 58, -6, -49, 5, 2, -12, -18, -24, 5
    0x14221102, 0xe0b00f0, 0x30a0009, 0xf8f10a09, 0xf1dd0902, 0x3a190427, 0x205cffa, 0x5e8eef4,
    // 3, 21, -44, -5, 70, -30, -1, 71, -24, 30, -14, -4, 3, 39, -43, 25, -85, -29, 42, -19, -74, 71, -2, 109, 79, 44, -18, 20, -41, -5, 70, 43
    0xfbd41503, 0x47ffe246, 0xfcf21ee8, 0x19d52703, 0xed2ae3ab, 0x6dfe47b6, 0x14ee2c4f, 0x2b46fbd7,
    // -3, -23, 5, -10, -6, -3, -18, 6, -35, -14, 3, 17, 14, 16, -3, 33, 0, -23, -1, 13, 2, -8, -15, 3, 45, -11, -9, 40, 22, -5, -4, 21
    0xf605e9fd, 0x6eefdfa, 0x1103f2dd, 0x21fd100e, 0xdffe900, 0x3f1f802, 0x28f7f52d, 0x15fcfb16,
    // 3, -6, -3, -19, -7, -3, 10, -6, 60, -5, 1, -15, 12, 25, -1, 19, 1, 12, -11, 18, -6, -12, 11, -11, 52, 6, 17, -13, -21, -19, -1, -2
    0xedfdfa03, 0xfa0afdf9, 0xf101fb3c, 0x13ff190c, 0x12f50c01, 0xf50bf4fa, 0xf3110634, 0xfeffedeb,
    // 15, 2, 20, 0, 8, 24, 8, 38, 17, 0, 27, 5, 10, -4, -22, -12, -23, 29, -3, 30, -35, -42, 34, 10, -20, -52, -28, -2, -10, 13, 1, 0
    0x14020f, 0x26081808, 0x51b0011, 0xf4eafc0a, 0x1efd1de9, 0xa22d6dd, 0xfee4ccec, 0x10df6,
    // -3, 65, -32, 22, -20, 1, -2, 24, -19, -17, 13, 1, 30, 57, 61, -29, -128, 21, -12, -6, 56, 104, -38, -37, 48, -15, 26, -11, 21, 29, -42, -7
    0x16e041fd, 0x18fe01ec, 0x10defed, 0xe33d391e, 0xfaf41580, 0xdbda6838, 0xf51af130, 0xf9d61d15,
    // -4, -9, -20, 22, -15, 3, 7, -1, -38, 7, 23, -16, -3, -5, -4, 29, -7, 10, 0, -15, 0, -15, 16, -14, 45, 7, 1, 43, 6, -14, -1, 6
    0x16ecf7fc, 0xff0703f1, 0xf01707da, 0x1dfcfbfd, 0xf1000af9, 0xf210f100, 0x2b01072d, 0x6fff206,
    // -4, -30, 0, -11, -5, -14, 10, -1, 48, -7, -3, -19, 20, 16, 2, -3, 11, -11, -8, 22, -3, 1, -24, -4, 47, 2, 14, -12, -4, 5, -4, 38
    0xf500e2fc, 0xff0af2fb, 0xedfdf930, 0xfd021014, 0x16f8f50b, 0xfce801fd, 0xf40e022f, 0x26fc05fc,
    // 15, 1, 21, -4, 2, 22, 8, 38, 14, -1, 34, 4, 13, -8, -18, -11, 1, 15, -30, -5, 22, 6, 25, 50, -4, -57, 7, 1, -13, -13, -4, 1
    0xfc15010f, 0x26081602, 0x422ff0e, 0xf5eef80d, 0xfbe20f01, 0x32190616, 0x107c7fc, 0x1fcf3f3,
    // 4, 66, -40, 11, -4, 15, -5, 35, -16, -19, 25, 1, 29, 50, 64, -30, -93, 15, -40, -50, -92, 113, -61, 48, 62, 15, 0, -4, 5, 9, -59, -34
    0xbd84204, 0x23fb0ffc, 0x119edf0, 0xe240321d, 0xced80fa3, 0x30c371a4, 0xfc000f3e, 0xdec50905,
    // 1, -19, 4, 10, -2, -3, -27, 12, -47, -17, 4, -22, 0, 0, -3, 18, -4, 7, 5, -6, 9, -13, -3, 0, 45, 2, -18, 23, 28, -17, 5, -9
    0xa04ed01, 0xce5fdfe, 0xea04efd1, 0x12fd0000, 0xfa0507fc, 0xfdf309, 0x17ee022d, 0xf705ef1c,
    // 5, -20, -6, -1, -6, -2, -2, 2, 50, -8, 7, -38, 4, 19, 0, 10, -1, -12, -11, 10, -9, -12, 4, -8, 54, 3, 15, 8, 1, -4, -4, 23
    0xfffaec05, 0x2fefefa, 0xda07f832, 0xa001304, 0xaf5f4ff, 0xf804f4f7, 0x80f0336, 0x17fcfc01,
};
static const uint embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias_dwords[4] = {
    // -0.001672, -0.4663, -0.3425, 0.3562, 0.0462, -0.11865, -0.01051, 0.0376
    0xb77696d9, 0x35b3b57b, 0xaf9829ea, 0x28d0a162,
};

[numthreads(8, 8, 1)]
void fsr4_model_v07_i8_pass13(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(8, 8, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 16), // threadGroupSliceSize
        uint3(1920, 1080, 16), // storageSize
        uint3(16, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.028251888230443, storage_fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.008466461673378944, storage_embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_2_body_conv_dw_bias = { embedded_decoder2_ResidualBlock_2_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_2_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_2_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.008551371283829212, storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias = { embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.008510954678058624, storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias = { embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias };
    
    const ConstantBufferStorage<128> storage_embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_HWCN< ConstantBufferStorage<128> > embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 8, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 8, 16), // threadGroupSliceSize
        uint4(2, 2, 8, 16), // storageSize
        uint4(128, 256, 16, 1), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0077115874737501144, storage_embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<4> storage_embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias = { embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<4> > embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias = {
        8, // logicalSize
        0, // threadGroupSliceStart
        8, // threadGroupSliceSize
        8, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias };
    
    // fused_quantized_NHWC_output
    const uint3 logicalSize_fused_quantized_NHWC_output = uint3(3840, 2160, 8);
    const int3 groupStart_fused_quantized_NHWC_output = int3(0, 0, 0) + ml2c_groupId.xyz * int3(16, 16, 8);
    const uint3 groupSize_fused_quantized_NHWC_output = uint3(16, 16, 8);
    const uint3 storageSize_fused_quantized_NHWC_output = uint3(3840, 2160, 8);
    const uint3 tensorByteStrides_fused_quantized_NHWC_output = uint3(16, 61440, 2);
    const uint3 paddingBegin_fused_quantized_NHWC_output = uint3(0, 0, 0);
    const uint3 paddingEnd_fused_quantized_NHWC_output = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_fused_quantized_NHWC_output = dot(groupStart_fused_quantized_NHWC_output, tensorByteStrides_fused_quantized_NHWC_output);
    const RWBufferStorage storage_fused_quantized_NHWC_output = { buffer_fused_quantized_NHWC_output };
    const Tensor3h_NHWC<RWBufferStorage> fused_quantized_NHWC_output = { logicalSize_fused_quantized_NHWC_output, groupStart_fused_quantized_NHWC_output, groupSize_fused_quantized_NHWC_output, storageSize_fused_quantized_NHWC_output, tensorByteStrides_fused_quantized_NHWC_output, paddingBegin_fused_quantized_NHWC_output, paddingEnd_fused_quantized_NHWC_output, threadGroupByteOffsetInTensor_fused_quantized_NHWC_output + 0, storage_fused_quantized_NHWC_output };
    // FusedConvNextBlock_quantized_/decoder2/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose (16, 1080, 1920), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,), (16, 8, 2, 2), (8,) -> (8, 2160, 3840)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    CNB_CT2D<8>(21.111871059054625, 0.04736671596765518, 21.88017459116417, 0.045703474432229996, 0.10754666477441788, fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_2_body_conv_dw_bias, embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias, embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias, embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias, fused_quantized_NHWC_output, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_13


