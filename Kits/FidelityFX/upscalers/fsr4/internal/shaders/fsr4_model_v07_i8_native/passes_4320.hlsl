// Copyright(C) 2024-2025 Advanced Micro Devices, Inc. All rights reserved.
// Autogenerated 2025-02-26 12:46:05 using ML2Code from "models\2024\October\Release7\Native\fsr4_model_v07_i8.onnx". Do not edit.
// Compile with dxc.exe -no-warnings -O3 -enable-16bit-types -HV 2021 -T cs_6_6 -I . -I hlsl -E fsr4_model_v07_i8_pass0 "generated\hlsl\fsr4_model_v07_i8.hlsl"

// Scratch memory size needed: 331776000 (316.4MB)

// This file was generated for navi48 SKU
#define WMMA_ENABLED  0
#define FP8_ENABLED  1
#define DOT4_ENABLED  1


ByteAddressBuffer buffer_NHWC_inputs : register(t0);
RWByteAddressBuffer buffer_fused_quantized_NHWC_output : register(u0);
ByteAddressBuffer InitializerBuffer : register(t1);
RWByteAddressBuffer ScratchBuffer : register(u1);

#ifdef MLSR_PASS_0
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Conv2D_k2s2b.hlsli"

static const uint embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight_dwords[256] = {
    // -0.02858, 0.12384, 0.836, -0.03099, -0.2406, 0.04132, -0.04358, 0.0, -0.0103, 0.32, 0.3079, 0.09106, -0.03067, 0.1985, -0.1641, 0.0
    0x2feda751, 0xa7ef3ab0, 0x294ab3b3, 0xa994, 0x351fa146, 0x2dd434ed, 0x325aa7da, 0xb140,
    // -0.2228, 0.04587, 0.873, -0.00801, 0.00488, -0.4014, 0.1464, 0.0, -0.2788, 0.1927, 0.8574, -0.077, -0.1604, 0.02861, -0.0769, 0.0
    0x29dfb321, 0xa01a3afc, 0xb66c1cff, 0x30af, 0x322bb476, 0xacee3adc, 0x2753b122, 0xacec,
    // 0.07056, -0.2017, -0.11053, -0.3743, 0.03537, 0.195, -0.02898, 0.0, 0.1631, -0.2698, -0.1566, -0.5166, -0.003128, 0.197, 0.000514, 0.0
    0xb2742c84, 0xb5fdaf13, 0x323d2887, 0xa76b, 0xb4513138, 0xb822b103, 0x324e9a68, 0x1036,
    // 0.2317, -0.1798, -0.0406, -0.6167, 0.09625, 0.2688, 0.1832, 0.0, 0.3254, -0.2034, 0.11414, -0.4229, 0.182, 0.1682, -0.0443, 0.0
    0xb1c1336a, 0xb8efa932, 0x344d2e29, 0x31dd, 0xb2823535, 0xb6c42f4e, 0x316231d3, 0xa9ac,
    // 0.01095, 0.2457, -0.5786, -0.4363, 0.286, 0.0582, 0.0875, 0.0, -0.12, 0.3787, -0.3752, -0.4114, 0.4395, -0.2502, 0.1876, 0.0
    0x33dd219b, 0xb6fbb8a1, 0x2b733493, 0x2d9a, 0x360fafae, 0xb695b601, 0xb4013708, 0x3201,
    // -0.2118, 0.2388, -0.3772, -0.4084, 0.3877, 0.0563, -0.183, 0.0, -0.3042, 0.08685, -0.6494, -0.304, 0.04547, 0.0969, 0.09106, 0.0
    0x33a4b2c7, 0xb689b609, 0x2b353634, 0xb1db, 0x2d8fb4de, 0xb4ddb932, 0x2e3429d2, 0x2dd4,
    // -0.2408, 0.2074, 0.9937, -0.0925, 0.1947, -0.0446, -0.01215, 0.0, -0.2925, 0.03793, 0.928, -0.0746, 0.02773, 0.03952, -0.02176, 0.0
    0x32a3b3b5, 0xadec3bf3, 0xa9b5323b, 0xa239, 0x28dbb4ae, 0xacc63b6d, 0x290f2719, 0xa592,
    // 0.1892, 0.1975, 0.5303, 0.02046, -0.0438, -0.02711, 0.000343, 0.0, -0.01181, -0.05585, 0.8247, 0.04184, -0.06744, -0.01898, -0.02841, 0.0
    0x3252320e, 0x253d383e, 0xa6f1a99b, 0xd9f, 0xab26a20c, 0x295b3a99, 0xa4dcac51, 0xa746,
    // -0.2505, -0.03354, 0.1199, 0.006634, -0.01218, 0.002306, 0.001922, 0.0, 0.6094, -0.2717, -0.2449, 0.00798, -0.03278, -0.005608, 0.02238, 0.0
    0xa84bb402, 0x1ecb2fac, 0x18b9a23c, 0x17df, 0xb45938e0, 0x2016b3d6, 0x9dbea832, 0x25bb,
    // 0.1407, 0.1904, -0.1609, 0.00948, -0.009254, 0.0283, 0.012146, 0.0, -0.3882, 0.01103, 0.05496, 0.00702, 0.00538, 0.001417, 0.007904, 0.0
    0x32183081, 0x20dbb126, 0x273fa0bd, 0x2238, 0x21a6b636, 0x1f302b09, 0x15ce1d82, 0x200c,
    // 0.04004, -0.111, 1.005, 0.002779, -0.04166, -0.00429, -0.00829, 0.0, 0.0765, -0.06445, 0.9927, -0.03864, 0.1031, -0.1343, 0.03085, 0.0
    0xaf1b2920, 0x19b13c05, 0x9c65a955, 0xa03f, 0xac202ce5, 0xa8f23bf1, 0xb04c2e99, 0x27e6,
    // 0.04144, 0.0003097, 0.9272, 0.0307, 0.0702, 0.0473, -0.0991, 0.0, 0.08496, 0.04544, 1.007, 0.003164, 0.0764, -0.02371, -0.003326, 0.0
    0xd13294e, 0x27dc3b6b, 0x2a0e2c7e, 0xae58, 0x29d12d70, 0x1a7b3c07, 0xa6122ce4, 0x9ad0,
    // 0.10284, 0.0625, -0.1827, 0.02759, 0.167, -0.02275, -0.0375, 0.0, -0.05804, 0.1733, 0.2812, -0.2012, 0.0963, 0.1041, -0.0764, 0.0
    0x2c002e95, 0x2710b1d9, 0xa5d33158, 0xa8cd, 0x318cab6e, 0xb2703480, 0x2eaa2e2a, 0xace4,
    // -0.1394, 0.0765, -0.2228, -0.00676, -0.1815, 0.2336, 0.005753, 0.0, -0.3296, 0.1731, 0.2356, -0.01909, 0.2423, -0.05066, -0.03004, 0.0
    0x2ce5b076, 0x9eecb321, 0x337ab1cf, 0x1de4, 0x318ab546, 0xa4e3338a, 0xaa7c33c1, 0xa7b1,
    // -0.2179, 0.1542, -0.04465, -0.06616, 0.169, -0.05167, 0.02644, 0.0, 0.3894, -0.09174, 0.0494, -0.11145, 0.1512, 0.0698, -0.0365, 0.0
    0x30efb2f9, 0xac3ca9b7, 0xaa9d3168, 0x26c5, 0xaddf363b, 0xaf222a53, 0x2c7830d7, 0xa8ac,
    // -0.6064, 0.1758, 0.02998, 0.01717, -0.001664, -0.06, 0.0673, 0.0, 0.402, -0.1416, -0.0687, -0.00438, -0.007866, -0.04333, -0.01179, 0.0
    0x31a0b8da, 0x246527ad, 0xabae96d1, 0x2c4f, 0xb088366f, 0x9c7cac66, 0xa98ca007, 0xa209,
    // -0.2083, 0.084, 0.5225, 0.04782, -0.00921, 0.1077, -0.04108, 0.0, -0.1439, 0.08374, 0.2418, 0.04684, -0.01784, 0.07886, -0.1423, 0.0
    0x2d60b2aa, 0x2a1f382e, 0x2ee5a0b7, 0xa942, 0x2d5cb09b, 0x29ff33bd, 0x2d0ca491, 0xb08e,
    // -0.2974, 0.122, 0.4607, -0.07434, 0.0669, 0.22, -0.1919, 0.0, -0.1711, 0.1394, 0.2834, 0.0744, 0.0002137, 0.1197, -0.01536, 0.0
    0x2fcfb4c2, 0xacc2375f, 0x330a2c48, 0xb224, 0x3076b17a, 0x2cc33489, 0x2fa90b01, 0xa3dd,
    // 0.3376, -0.2013, 0.722, 0.007687, 0.06696, -0.004135, -0.01653, 0.0, 0.321, -0.2122, 0.6133, 0.0355, -0.03592, -0.0363, -0.005417, 0.0
    0xb2713567, 0x1fdf39c7, 0x9c3c2c49, 0xa43b, 0xb2ca3523, 0x288b38e8, 0xa8a5a899, 0x9d8c,
    // -0.0658, -0.2301, 0.384, 0.0847, -0.2035, 0.05753, -0.1302, 0.0, 0.1798, -0.12396, 0.601, 0.08673, -0.0538, 0.01636, 0.0425, 0.0
    0xb35dac36, 0x2d6c3625, 0x2b5db283, 0xb02b, 0xafef31c1, 0x2d8d38cf, 0x2430aae3, 0x2971,
    // -0.419, 0.0466, 0.2693, 0.001134, 0.0314, -0.0618, -0.0488, 0.0, -0.1853, 0.2023, -0.06155, 0.0145, -0.1455, -0.0573, 0.10596, 0.0
    0x29f7b6b4, 0x14a5344f, 0xabe92805, 0xaa3f, 0x3279b1ee, 0x236dabe1, 0xab56b0a8, 0x2ec8,
    // -0.2563, 0.2556, -0.01245, -0.1278, -0.00913, -0.003933, 0.02635, 0.0, 0.0681, 0.321, -0.05493, -0.06635, 0.2556, -0.0771, 0.001173, 0.0
    0x3417b41a, 0xb017a260, 0x9c07a0ad, 0x26bf, 0x35232c5c, 0xac3fab08, 0xacef3417, 0x14ce,
    // 0.415, -0.0938, -0.5044, -0.01712, -0.1175, 0.01666, 0.0348, 0.0, -0.126, -0.4224, -0.1693, -0.0576, 0.03238, 0.108, -0.02948, 0.0
    0xae0136a4, 0xa462b809, 0x2444af85, 0x2874, 0xb6c2b008, 0xab5fb16b, 0x2ee92825, 0xa78c,
    // -0.2603, 0.513, -0.001765, 0.04053, 0.004276, -0.12415, 0.09906, 0.0, -0.0849, 0.07623, -0.2057, -0.06946, 0.02473, -0.005543, 0.03748, 0.0
    0x381bb42a, 0x2930973b, 0xaff21c61, 0x2e57, 0x2ce1ad6f, 0xac72b295, 0x9dad2655, 0x28cc,
    // 0.223, -0.09924, -0.012054, 0.02768, 0.2803, -0.0734, -7.83e-05, 0.0, 0.182, -0.1329, -0.4355, 0.0336, 0.03128, 0.273, -0.1167, 0.0
    0xae5a3323, 0x2716a22c, 0xacb3347c, 0x8522, 0xb04131d3, 0x284db6f8, 0x345e2801, 0xaf78,
    // 0.2666, -0.1752, 0.003618, -0.1818, 0.146, -0.10913, 0.02501, 0.0, 0.1776, -0.0561, -0.4329, 0.03494, 0.2373, -0.0524, 0.01009, 0.0
    0xb19b3444, 0xb1d11b69, 0xaefc30ac, 0x2667, 0xab2e31af, 0x2879b6ed, 0xaab53398, 0x212b,
    // -0.02617, 0.02373, 0.0861, -0.0959, -0.12286, 0.08954, 0.3308, 0.0, 0.01692, 0.083, 0.11053, -0.1558, -0.2373, 0.1289, 0.3162, 0.0
    0x2613a6b3, 0xae232d83, 0x2dbbafdd, 0x354b, 0x2d502455, 0xb0fc2f13, 0x3020b398, 0x350f,
    // -0.01613, -0.02748, 0.2239, -0.1398, -0.135, 0.10645, 0.3804, 0.0, -0.01636, 0.02568, 0.138, -0.0169, -0.1431, 0.0837, 0.3215, 0.0
    0xa709a421, 0xb079332a, 0x2ed0b052, 0x3616, 0x2693a430, 0xa454306a, 0x2d5bb094, 0x3525,
    // -0.5396, -0.04337, -0.5947, 0.0657, -0.1399, 0.04236, 0.04477, 0.0, -0.08386, 0.0455, -0.3323, -0.1081, 0.3, 0.1694, -0.179, 0.0
    0xa98db851, 0x2c34b8c2, 0x296cb07a, 0x29bb, 0x29d3ad5e, 0xaeebb551, 0x316c34cd, 0xb1ba,
    // 0.2866, -0.10693, -0.597, 0.1787, -0.1366, -0.07416, -0.02122, 0.0, 0.276, 0.04126, -0.6055, -0.05798, 0.07904, 0.001187, 0.06137, 0.0
    0xaed83496, 0x31b8b8c7, 0xacbfb05f, 0xa56f, 0x2948346a, 0xab6cb8d8, 0x14dd2d0f, 0x2bdb,
    // -0.03952, 0.1901, -0.9087, 0.1802, -0.229, 0.143, -0.0726, 0.0, -0.0167, 0.06976, -0.724, 0.1818, -0.1866, 0.02629, -0.1517, 0.0
    0x3215a90f, 0x31c4bb45, 0x3093b354, 0xaca5, 0x2c77a446, 0x31d1b9cb, 0x26bbb1f9, 0xb0db,
    // 0.05292, 0.2722, -0.9, 0.1592, -0.1365, 0.2542, -0.117, 0.0, 0.2074, 0.0996, -0.864, 0.1527, -0.2435, 0.1395, -0.07745, 0.0
    0x345b2ac6, 0x3118bb33, 0x3411b05e, 0xaf7d, 0x2e6032a3, 0x30e3bae9, 0x3077b3cb, 0xacf5,
};
static const uint embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias_dwords[8] = {
    // 0.02982, -0.002262, 0.0786, -0.011116, 0.001898, 0.02011, 0.04916, 0.03384, -0.09906, -0.014786, 0.0001869, 0.01351, 0.1301, -0.00254, 0.02206, 0.2378
    0x98a227a2, 0xa1b12d08, 0x252617c6, 0x28552a4b, 0xa392ae57, 0x22eb0a20, 0x9934302a, 0x339c25a6,
};

[numthreads(8, 8, 1)]
void fsr4_model_v07_i8_pass0(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(8, 8, 1);
    
    const BufferStorage storage_NHWC_inputs = { buffer_NHWC_inputs };
    const Tensor3h_NHWC< BufferStorage > NHWC_inputs = {
        uint3(7680, 4320, 7), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(7680, 4320, 7), // threadGroupSliceSize
        uint3(7680, 4320, 8), // storageSize
        uint3(16, 122880, 2), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_NHWC_inputs };
    const ConstantBufferStorage<256> storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight = { embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight_dwords };
    const Tensor4h_NHWC< ConstantBufferStorage<256> > embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight = {
        uint4(2, 2, 7, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 7, 16), // threadGroupSliceSize
        uint4(2, 2, 8, 16), // storageSize
        uint4(16, 32, 2, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight };
    
    const ConstantBufferStorage<8> storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias = { embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias };
    
    // quantized_NHWC_/encoder2/ResidualBlock_0/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_0 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_0 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(8, 8, 16);
    const uint3 groupSize_slice_0 = uint3(8, 8, 16);
    const uint3 storageSize_slice_0 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_0 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_0 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_0 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_0 = dot(groupStart_slice_0, tensorByteStrides_slice_0);
    const float quantizationScale_slice_0 = 0.014608594588935375;
    const RWBufferStorage storage_slice_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_0 = { logicalSize_slice_0, groupStart_slice_0, groupSize_slice_0, storageSize_slice_0, tensorByteStrides_slice_0, paddingBegin_slice_0, paddingEnd_slice_0, threadGroupByteOffsetInTensor_slice_0 + 0, quantizationScale_slice_0, storage_slice_0 };
    // /encoder1/DownscaleStridedConv2x2/downscale_conv/Conv (7, 4320, 7680), (16, 7, 2, 2), (16,) -> (16, 2160, 3840)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    Conv2D_k2s2b(NHWC_inputs, embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight, embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias, slice_0, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_0
#ifdef MLSR_PASS_0_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass0_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // quantized_NHWC_/encoder2/ResidualBlock_0/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_1 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_1 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_1 = uint3(32, 1, 16);
    const uint3 storageSize_slice_1 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_1 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_1 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_1 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_1 = dot(groupStart_slice_1, tensorByteStrides_slice_1);
    const float quantizationScale_slice_1 = 0.014608594588935375;
    const RWBufferStorage storage_slice_1 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_1 = { logicalSize_slice_1, groupStart_slice_1, groupSize_slice_1, storageSize_slice_1, tensorByteStrides_slice_1, paddingBegin_slice_1, paddingEnd_slice_1, threadGroupByteOffsetInTensor_slice_1 + 0, quantizationScale_slice_1, storage_slice_1 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_1, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_0_POST


#ifdef MLSR_PASS_1
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/ConvNextBlock.hlsli"

static const uint embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 0, 0, 0, 1, 0, -6, 3, 0, 1, -2, -3, 3, -3, 2, 2, -1, 7, 1, -1, 18, 19, -14, -1, -9, -5, -1, 0, -3, 5, -3, 4, -5
    0x1000000, 0x3fa00, 0x3fdfe01, 0xff0202fd, 0x12ff0107, 0xf7fff213, 0xfd00fffb, 0xfb04fd05,
    // -3, -3, -3, 7, 6, 1, 6, 1, -13, -7, 0, 5, -3, -2, 6, 0, 9, 5, 3, 1, 2, 1, 4, 12, -1, -3, 0, -28, 7, 7, -3, 13
    0x7fdfdfd, 0x1060106, 0x500f9f3, 0x6fefd, 0x1030509, 0xc040102, 0xe400fdff, 0xdfd0707,
    // 22, -15, 1, -8, 65, 28, -26, -44, -25, -5, -7, -123, 4, -8, 22, -16, -1, 5, -6, 14, 12, -12, -10, -4, -2, -5, 2, -7, -4, 0, 7, -8
    0xf801f116, 0xd4e61c41, 0x85f9fbe7, 0xf016f804, 0xefa05ff, 0xfcf6f40c, 0xf902fbfe, 0xf80700fc,
    // 9, 0, 0, 4, -9, -2, 9, 3, 26, -11, -14, 7, 16, -1, 12, 4, 10, 1, 2, -2, 4, 3, 9, 1, 10, -2, 1, -18, 6, 5, 0, 2
    0x4000009, 0x309fef7, 0x7f2f51a, 0x40cff10, 0xfe02010a, 0x1090304, 0xee01fe0a, 0x2000506,
    // 3, 2, -1, 0, 3, -2, 4, 2, 2, -6, -5, -1, 0, 2, 3, -1, 1, 1, -1, 7, -17, -1, -10, 5, -6, 5, 3, 2, 4, 0, 6, 10
    0xff0203, 0x204fe03, 0xfffbfa02, 0xff030200, 0x7ff0101, 0x5f6ffef, 0x20305fa, 0xa060004,
    // 0, 6, -2, 16, -44, 34, -9, 21, -28, 1, 26, 0, 24, 8, 14, 28, 4, -2, -1, 11, -7, 2, -6, 0, -21, 3, 2, 15, 7, -1, 7, 9
    0x10fe0600, 0x15f722d4, 0x1a01e4, 0x1c0e0818, 0xbfffe04, 0xfa02f9, 0xf0203eb, 0x907ff07,
    // 1, 2, 1, 1, -21, -3, -5, 18, 8, -6, -3, -25, 6, 9, -6, 6, -33, -9, -35, 46, -128, -58, -17, -8, 92, -15, -14, 78, -64, -25, -7, -70
    0x1010201, 0x12fbfdeb, 0xe7fdfa08, 0x6fa0906, 0x2eddf7df, 0xf8efc680, 0x4ef2f15c, 0xbaf9e7c0,
    // 2, -4, 6, 20, -29, 18, 9, 0, -25, 5, -14, 21, 18, 3, -18, 13, 10, -2, 0, 9, -8, -3, 7, 1, 7, -7, -6, 2, 10, 1, 5, 8
    0x1406fc02, 0x912e3, 0x15f205e7, 0xdee0312, 0x900fe0a, 0x107fdf8, 0x2faf907, 0x805010a,
    // 6, -1, 0, -3, -18, 7, 11, 5, 7, -6, -4, -11, 4, 3, 0, 0, 7, -2, 3, -7, -9, 0, 1, -6, -7, 7, -7, 0, 7, 5, -1, 3
    0xfd00ff06, 0x50b07ee, 0xf5fcfa07, 0x304, 0xf903fe07, 0xfa0100f7, 0xf907f9, 0x3ff0507,
    // 1, 1, 7, -8, 3, 4, -4, -2, -3, -1, -5, 3, 6, 1, 3, 4, -3, -1, 9, 23, 10, 32, -9, 0, -27, 4, 0, 2, 21, 10, 10, 34
    0xf8070101, 0xfefc0403, 0x3fbfffd, 0x4030106, 0x1709fffd, 0xf7200a, 0x20004e5, 0x220a0a15,
    // -4, 4, 1, -3, 3, -4, -2, 0, -2, 2, 1, -8, 6, 4, 1, 3, -12, -2, 0, 11, 12, -12, -12, -9, 11, 8, 8, 22, 3, 0, 4, -5
    0xfd0104fc, 0xfefc03, 0xf80102fe, 0x3010406, 0xb00fef4, 0xf7f4f40c, 0x1608080b, 0xfb040003,
    // -62, 23, -31, 127, 88, 27, -94, -14, -10, -40, 34, 3, 3, -8, 35, 16, -7, 2, 2, 17, 19, 16, -11, 5, -4, -2, 8, 9, 0, 0, 10, 11
    0x7fe117c2, 0xf2a21b58, 0x322d8f6, 0x1023f803, 0x110202f9, 0x5f51013, 0x908fefc, 0xb0a0000,
    // -6, 3, -2, -1, -10, -2, -6, -7, 3, -6, 4, 10, -4, -3, 5, -6, -14, -1, -11, 9, -1, -18, -16, -7, 25, -9, 15, 7, -10, 4, 11, -23
    0xfffe03fa, 0xf9fafef6, 0xa04fa03, 0xfa05fdfc, 0x9f5fff2, 0xf9f0eeff, 0x70ff719, 0xe90b04f6,
    // -2, 3, 2, -1, 10, -1, -10, 4, 1, 0, 4, -2, -4, 0, 10, -3, 0, -1, 3, 0, 11, -2, 1, -4, -8, 3, -2, 3, 2, 3, -3, -1
    0xff0203fe, 0x4f6ff0a, 0xfe040001, 0xfd0a00fc, 0x3ff00, 0xfc01fe0b, 0x3fe03f8, 0xfffd0302,
    // 5, -6, -2, -5, 11, -9, 4, 0, 6, 4, -17, -7, -7, 1, -11, -13, -1, -1, -1, -5, 6, 0, -3, 1, -9, 5, 2, -2, 0, -2, 2, -4
    0xfbfefa05, 0x4f70b, 0xf9ef0406, 0xf3f501f9, 0xfbffffff, 0x1fd0006, 0xfe0205f7, 0xfc02fe00,
    // 3, -1, -3, 11, 14, -4, 3, -9, -2, 5, 0, 9, 6, 1, 0, -2, 52, -17, 10, -6, 108, 9, 52, 11, 47, -10, 24, 43, -14, -6, -32, -9
    0xbfdff03, 0xf703fc0e, 0x90005fe, 0xfe000106, 0xfa0aef34, 0xb34096c, 0x2b18f62f, 0xf7e0faf2,
    // -2, -1, -7, 3, 5, 7, -6, 11, -7, 5, 9, -3, -4, 0, 12, -3, 1, 1, -1, 0, 1, 5, 2, 2, -6, -4, -5, 6, 6, 1, 3, 3
    0x3f9fffe, 0xbfa0705, 0xfd0905f9, 0xfd0c00fc, 0xff0101, 0x2020501, 0x6fbfcfa, 0x3030106,
    // 0, 2, -5, 12, 6, 6, -13, 9, -8, -1, 0, -4, 5, 2, -2, 6, 2, 2, 0, -4, 3, 7, -2, 4, -12, -5, 0, 3, -2, 1, 0, 1
    0xcfb0200, 0x9f30606, 0xfc00fff8, 0x6fe0205, 0xfc000202, 0x4fe0703, 0x300fbf4, 0x10001fe,
    // -4, -2, 3, -6, -3, 2, 8, -5, 9, -1, -9, 0, 1, 5, -2, -1, 6, -5, 13, 11, 10, -3, -6, 9, 19, 21, -7, 8, -1, 6, 6, 3
    0xfa03fefc, 0xfb0802fd, 0xf7ff09, 0xfffe0501, 0xb0dfb06, 0x9fafd0a, 0x8f91513, 0x30606ff,
    // -8, 3, 2, -1, 0, -1, 11, 7, 5, 5, 6, 2, 4, 6, -3, 8, -3, 0, 7, 23, -5, -16, -2, -16, 5, 4, -1, -12, -12, 0, 0, -3
    0xff0203f8, 0x70bff00, 0x2060505, 0x8fd0604, 0x170700fd, 0xf0fef0fb, 0xf4ff0405, 0xfd0000f4,
    // 47, -35, 27, 11, -77, 15, 46, -80, 12, -27, 50, -1, -33, 30, -4, 1, 0, 5, 3, -4, 7, 1, -11, 15, 6, 7, 6, -3, -11, -3, 16, 5
    0xb1bdd2f, 0xb02e0fb3, 0xff32e50c, 0x1fc1edf, 0xfc030500, 0xff50107, 0xfd060706, 0x510fdf5,
    // 0, -3, 7, 6, -11, 0, 0, -9, -2, 5, 6, -8, -1, 4, 1, 1, 3, 6, 4, 4, -19, 11, -11, -4, 3, 3, 8, 3, -9, 5, -1, 7
    0x607fd00, 0xf70000f5, 0xf80605fe, 0x10104ff, 0x4040603, 0xfcf50bed, 0x3080303, 0x7ff05f7,
    // 0, 2, 4, 1, -2, 1, 2, 7, 2, 4, -1, -8, 2, 2, 3, 2, -3, -2, -2, 3, -1, 7, -1, 0, -3, 13, 5, -2, 1, 15, -1, -6
    0x1040200, 0x70201fe, 0xf8ff0402, 0x2030202, 0x3fefefd, 0xff07ff, 0xfe050dfd, 0xfaff0f01,
    // 4, 2, 2, 2, 3, -5, -10, -3, -28, 7, 10, 7, 3, 6, 9, 7, 8, -4, -1, 1, -11, -3, -15, -3, -7, 10, -3, -2, 0, 2, -1, -9
    0x2020204, 0xfdf6fb03, 0x70a07e4, 0x7090603, 0x1fffc08, 0xfdf1fdf5, 0xfefd0af9, 0xf7ff0200,
    // 11, 2, 5, 0, -11, 13, 4, 13, -17, 10, 1, -3, 15, 0, 16, 19, 13, 37, -3, 22, 22, -73, -22, 72, 25, -21, 27, -48, 4, -12, 74, 24
    0x5020b, 0xd040df5, 0xfd010aef, 0x1310000f, 0x16fd250d, 0x48eab716, 0xd01beb19, 0x184af404,
    // 2, -1, 0, -4, 10, -24, -10, 1, -1, 3, 9, -7, -12, 5, 10, -14, 4, 2, 1, 19, -13, -7, 5, -2, 4, 11, -1, -2, 1, 6, 7, -4
    0xfc00ff02, 0x1f6e80a, 0xf90903ff, 0xf20a05f4, 0x13010204, 0xfe05f9f3, 0xfeff0b04, 0xfc070601,
    // 19, 10, 1, 3, -11, -31, -6, 0, -2, 0, 7, 0, -4, -5, 9, -2, 9, 1, -2, 4, -1, 1, -1, 3, -8, 4, 2, -7, -5, 4, 1, -5
    0x3010a13, 0xfae1f5, 0x700fe, 0xfe09fbfc, 0x4fe0109, 0x3ff01ff, 0xf90204f8, 0xfb0104fb,
    // -7, -3, 1, 1, -7, 5, 3, 12, -5, -8, 5, -5, 9, 2, 2, 15, -3, 0, -4, 0, -9, 1, -5, -7, -10, 3, -1, -18, 10, -2, -3, -7
    0x101fdf9, 0xc0305f9, 0xfb05f8fb, 0xf020209, 0xfc00fd, 0xf9fb01f7, 0xeeff03f6, 0xf9fdfe0a,
    // -1, -6, 6, 3, -16, 10, 3, -6, -12, 2, -6, 0, 8, 7, 7, 6, -8, -13, -7, -19, 28, 16, 9, -1, -23, 3, 13, 13, -4, 3, 0, 3
    0x306faff, 0xfa030af0, 0xfa02f4, 0x6070708, 0xedf9f3f8, 0xff09101c, 0xd0d03e9, 0x30003fc,
    // 18, 61, 6, 9, 60, -23, -25, -38, 13, -24, -25, -24, -15, 21, -12, -76, -5, -1, -4, -7, 8, -4, -2, -16, -8, -6, 17, -13, 9, -3, 8, -6
    0x9063d12, 0xdae7e93c, 0xe8e7e80d, 0xb4f415f1, 0xf9fcfffb, 0xf0fefc08, 0xf311faf8, 0xfa08fd09,
    // -2, -2, -8, -10, 23, 5, 17, 7, -16, 6, 6, -5, -1, 0, -3, 13, -11, -11, -4, 4, 20, 1, 3, 16, -12, 18, 1, -4, 2, 8, 1, -1
    0xf6f8fefe, 0x7110517, 0xfb0606f0, 0xdfd00ff, 0x4fcf5f5, 0x10030114, 0xfc0112f4, 0xff010802,
    // -3, -7, 0, -3, -14, 4, 16, 3, -6, 2, -6, 3, 4, 4, -3, 8, 3, 1, -6, 1, -8, 3, 3, 1, 0, 2, 4, -9, -7, -6, -2, 2
    0xfd00f9fd, 0x31004f2, 0x3fa02fa, 0x8fd0404, 0x1fa0103, 0x10303f8, 0xf7040200, 0x2fefaf9,
    // -9, 3, -1, -4, 10, 8, 0, -12, -10, 1, 3, 0, 8, -8, -3, 7, 4, 3, -2, 10, -6, 12, 3, -4, -4, -3, -4, 4, -6, -6, -7, 2
    0xfcff03f7, 0xf400080a, 0x301f6, 0x7fdf808, 0xafe0304, 0xfc030cfa, 0x4fcfdfc, 0x2f9fafa,
    // -3, 2, 4, 1, 4, -13, -13, 7, 4, 12, -3, -20, 4, 4, -8, 2, 5, -22, 16, 43, 44, -9, 20, 3, 15, -76, 48, 12, -7, 7, 30, 17
    0x10402fd, 0x7f3f304, 0xecfd0c04, 0x2f80404, 0x2b10ea05, 0x314f72c, 0xc30b40f, 0x111e07f9,
    // -7, 0, -4, 1, 6, -8, -6, 6, 7, -7, -5, -24, -3, -1, -2, -5, 4, 2, -7, 2, 2, -8, 2, -4, 4, 2, 7, -9, -2, -2, -13, -1
    0x1fc00f9, 0x6faf806, 0xe8fbf907, 0xfbfefffd, 0x2f90204, 0xfc02f802, 0xf7070204, 0xfff3fefe,
    // -8, -1, -5, -12, -4, -12, -4, -4, 10, -9, -5, 2, -6, -8, 1, -6, 3, -1, -3, 0, 2, 1, 3, -8, 5, -3, 1, -7, -1, -3, -5, 0
    0xf4fbfff8, 0xfcfcf4fc, 0x2fbf70a, 0xfa01f8fa, 0xfdff03, 0xf8030102, 0xf901fd05, 0xfbfdff,
    // 0, -3, 1, -3, 13, 7, -1, -4, 7, 2, 5, 2, 7, 5, 5, -7, 4, 6, -12, -54, 4, -3, 14, -3, -27, -13, 9, 20, -23, -2, -19, -13
    0xfd01fd00, 0xfcff070d, 0x2050207, 0xf9050507, 0xcaf40604, 0xfd0efd04, 0x1409f3e5, 0xf3edfee9,
    // -2, -2, -6, 0, -4, 7, 5, -8, -14, -4, 4, -4, 9, 4, -11, 4, -7, 5, -9, -21, 13, -16, 7, -26, 16, 2, -10, 35, -11, -7, 12, -27
    0xfafefe, 0xf80507fc, 0xfc04fcf2, 0x4f50409, 0xebf705f9, 0xe607f00d, 0x23f60210, 0xe50cf9f5,
    // -8, -6, 26, 72, -5, -92, 0, -66, -24, -29, -60, 34, -31, -69, -48, -22, 10, 3, 15, 16, 36, 17, -11, -31, -47, 12, 6, 21, 19, 4, 1, 31
    0x481afaf8, 0xbe00a4fb, 0x22c4e3e8, 0xead0bbe1, 0x100f030a, 0xe1f51124, 0x15060cd1, 0x1f010413,
    // -7, 2, 1, 7, -8, 0, 2, -1, 16, 1, -11, 9, 7, -1, 7, -1, -2, 13, 0, 0, 16, -15, 8, -10, -31, 8, 2, 1, -11, -6, -3, 3
    0x70102f9, 0xff0200f8, 0x9f50110, 0xff07ff07, 0xdfe, 0xf608f110, 0x10208e1, 0x3fdfaf5,
    // -3, -2, 6, 19, 9, -16, 3, -4, -10, 14, 5, -2, 1, -3, -1, 9, -5, -4, 0, 11, -7, -22, -15, 5, 17, -5, -4, -5, -7, -1, 6, -9
    0x1306fefd, 0xfc03f009, 0xfe050ef6, 0x9fffd01, 0xb00fcfb, 0x5f1eaf9, 0xfbfcfb11, 0xf706fff9,
    // -4, -2, -3, 21, -1, -22, 1, 16, 10, -17, 8, 8, -8, -5, 1, -13, -1, -5, 2, 13, 5, -3, -9, -8, -7, -1, -2, 11, -1, -4, 18, -3
    0x15fdfefc, 0x1001eaff, 0x808ef0a, 0xf301fbf8, 0xd02fbff, 0xf8f7fd05, 0xbfefff9, 0xfd12fcff,
    // 0, -7, -2, -7, 19, -58, -2, -19, 55, -8, 1, -10, -18, 3, -4, -40, 24, 11, 12, -1, 84, 52, 66, -86, -72, 12, -57, 81, 66, 5, -30, 59
    0xf9fef900, 0xedfec613, 0xf601f837, 0xd8fc03ee, 0xff0c0b18, 0xaa423454, 0x51c70cb8, 0x3be20542,
    // 3, -7, 8, 23, -24, 5, 10, -14, -17, 1, -4, 10, 18, -2, -8, 11, -1, -2, -10, 4, -6, -18, -1, 3, 18, -18, 8, 6, -8, -3, 4, -13
    0x1708f903, 0xf20a05e8, 0xafc01ef, 0xbf8fe12, 0x4f6feff, 0x3ffeefa, 0x608ee12, 0xf304fdf8,
    // 9, 0, -2, -14, 7, -8, 8, 8, 14, 0, 5, 9, 0, -3, -9, -4, 5, -6, 4, -6, -7, 1, 2, -4, -3, 2, -10, 1, -2, 2, 4, -3
    0xf2fe0009, 0x808f807, 0x905000e, 0xfcf7fd00, 0xfa04fa05, 0xfc0201f9, 0x1f602fd, 0xfd0402fe,
    // -5, 2, 1, 3, 0, -8, -7, 5, -3, -5, 1, 4, 1, 0, 4, 0, -13, -7, 0, -26, -17, -26, 1, 5, 4, 0, 1, 7, 0, 4, 3, -9
    0x30102fb, 0x5f9f800, 0x401fbfd, 0x40001, 0xe600f9f3, 0x501e6ef, 0x7010004, 0xf7030400,
    // -3, 1, 0, 0, -5, -7, -4, 3, -3, 1, -5, 3, -4, 0, 4, -1, -7, -4, 2, -18, -9, -2, 3, -2, -5, -9, 3, 14, 2, 2, 7, 2
    0x1fd, 0x3fcf9fb, 0x3fb01fd, 0xff0400fc, 0xee02fcf9, 0xfe03fef7, 0xe03f7fb, 0x2070202,
    // 5, -22, 27, -23, -94, -33, 17, 28, -1, -25, 25, -43, 3, 25, 4, 22, -6, -1, -1, -15, -14, -17, -1, 0, 4, -2, 6, 3, -1, -2, -4, -7
    0xe91bea05, 0x1c11dfa2, 0xd519e7ff, 0x16041903, 0xf1fffffa, 0xffeff2, 0x306fe04, 0xf9fcfeff,
    // -1, -1, 2, 4, 0, -7, -4, -1, -1, -1, 0, 5, -3, -1, 9, 0, -12, -7, 4, 2, -5, -22, -1, 4, -6, -9, 6, 5, -2, 5, 10, -3
    0x402ffff, 0xfffcf900, 0x500ffff, 0x9fffd, 0x204f9f4, 0x4ffeafb, 0x506f7fa, 0xfd0a05fe,
    // -1, 2, 0, -1, 1, -6, 0, 3, -7, 0, 0, 5, -4, -3, 2, 0, -6, -2, -4, -2, -7, -5, -2, 6, -4, -13, -1, -2, 0, -3, 2, -5
    0xff0002ff, 0x300fa01, 0x50000f9, 0x2fdfc, 0xfefcfefa, 0x6fefbf9, 0xfefff3fc, 0xfb02fd00,
    // 4, 3, -5, 9, -12, 11, -4, -10, -3, 4, 8, -7, 1, -2, -3, -2, -5, -6, 1, 1, 2, -3, -3, -5, -3, -5, -1, 8, 2, 2, 3, -2
    0x9fb0304, 0xf6fc0bf4, 0xf90804fd, 0xfefdfe01, 0x101fafb, 0xfbfdfd02, 0x8fffbfd, 0xfe030202,
    // 3, 0, -6, 6, 2, 5, -4, 8, -6, 3, 4, -5, -7, -4, -8, -2, 43, 7, 8, 74, -108, 53, 13, -6, -7, -13, 32, -44, 0, 11, 9, 17
    0x6fa0003, 0x8fc0502, 0xfb0403fa, 0xfef8fcf9, 0x4a08072b, 0xfa0d3594, 0xd420f3f9, 0x11090b00,
    // 1, -2, -5, 7, -7, -2, 6, -5, -4, 10, -1, 7, -2, -7, -8, -5, -7, -4, -3, -9, 2, -4, -1, 0, -13, -5, 10, -3, -8, 2, -4, -6
    0x7fbfe01, 0xfb06fef9, 0x7ff0afc, 0xfbf8f9fe, 0xf7fdfcf9, 0xfffc02, 0xfd0afbf3, 0xfafc02f8,
    // 9, 2, -8, -8, -9, 12, 4, -10, 2, -1, 3, -13, -9, -5, -9, -9, -5, -4, -2, -8, -2, -4, 2, -9, -5, -3, 0, 7, -4, 0, 1, -8
    0xf8f80209, 0xf6040cf7, 0xf303ff02, 0xf7f7fbf7, 0xf8fefcfb, 0xf702fcfe, 0x700fdfb, 0xf80100fc,
    // 7, -3, 2, -2, -1, 2, 8, -5, -8, -5, -8, -5, -1, -9, -6, 4, -5, -7, 9, -4, 12, -8, 10, 0, -2, 9, -4, 2, 4, -4, -2, 10
    0xfe02fd07, 0xfb0802ff, 0xfbf8fbf8, 0x4faf7ff, 0xfc09f9fb, 0xaf80c, 0x2fc09fe, 0xafefc04,
    // 2, 1, 2, -11, -6, 5, 1, 6, 4, 0, 1, -4, 4, -3, 1, 3, 1, -3, -3, 17, -13, 3, 1, -2, -27, -14, -6, -7, -3, -5, -5, 10
    0xf5020102, 0x60105fa, 0xfc010004, 0x301fd04, 0x11fdfd01, 0xfe0103f3, 0xf9faf2e5, 0xafbfbfd,
    // -3, 13, -17, -12, 32, -90, 17, -82, 6, -17, -49, -73, -7, 0, 39, -33, -3, 0, -3, 11, 5, 5, -7, 5, -5, 2, 12, -20, 6, -7, 16, 10
    0xf4ef0dfd, 0xae11a620, 0xb7cfef06, 0xdf2700f9, 0xbfd00fd, 0x5f90505, 0xec0c02fb, 0xa10f906,
    // -8, -4, 4, 8, 0, 4, -7, -11, -28, -1, 12, -1, -23, -3, -5, -4, -7, -1, 1, 10, 5, 2, -10, 5, -15, -8, 7, -1, -11, -11, 6, 9
    0x804fcf8, 0xf5f90400, 0xff0cffe4, 0xfcfbfde9, 0xa01fff9, 0x5f60205, 0xff07f8f1, 0x906f5f5,
    // -3, -1, 2, -3, 2, 6, -5, 3, -5, 1, 7, -6, -4, -5, 4, -1, 5, -4, 3, 1, 5, 2, 8, -2, 0, -4, 1, 12, -4, 0, -2, 3
    0xfd02fffd, 0x3fb0602, 0xfa0701fb, 0xff04fbfc, 0x103fc05, 0xfe080205, 0xc01fc00, 0x3fe00fc,
    // 11, -10, 11, 12, 14, -11, 18, 2, 3, -6, 2, 18, -5, -2, -1, 6, 2, -9, 5, -3, 9, -5, 11, 14, 7, 3, 14, 13, -2, -4, 1, 5
    0xc0bf60b, 0x212f50e, 0x1202fa03, 0x6fffefb, 0xfd05f702, 0xe0bfb09, 0xd0e0307, 0x501fcfe,
    // 1, -8, 1, -2, 1, -2, 8, -12, 3, -2, 4, 14, 2, 0, 6, 2, 20, -24, 19, 43, -25, -53, 19, 11, 55, -84, 57, -10, -26, 12, -4, 18
    0xfe01f801, 0xf408fe01, 0xe04fe03, 0x2060002, 0x2b13e814, 0xb13cbe7, 0xf639ac37, 0x12fc0ce6,
    // 4, -2, 4, 6, 6, -6, -6, 14, 9, -10, 13, -4, -5, 4, 8, 2, 2, -4, 1, -9, 3, 2, 7, 4, 10, -7, -5, 10, 5, -1, 8, 2
    0x604fe04, 0xefafa06, 0xfc0df609, 0x20804fb, 0xf701fc02, 0x4070203, 0xafbf90a, 0x208ff05,
    // -2, -3, -1, 6, 19, -8, 6, 8, 8, 0, 1, 6, 4, -1, 7, 1, -1, -4, 0, 3, 1, 2, 2, 11, 11, 1, 5, 7, -1, 2, 8, 1
    0x6fffdfe, 0x806f813, 0x6010008, 0x107ff04, 0x300fcff, 0xb020201, 0x705010b, 0x10802ff,
    // -3, -2, -3, 0, -4, -8, 0, 4, 4, -7, -1, -4, 1, -4, 6, -4, -1, 6, -3, 5, 0, 2, 1, -8, 0, -12, 18, -4, 0, 3, 9, 0
    0xfdfefd, 0x400f8fc, 0xfcfff904, 0xfc06fc01, 0x5fd06ff, 0xf8010200, 0xfc12f400, 0x90300,
    // -4, 0, 0, 7, 3, -1, -4, -9, 3, -10, -6, -2, 4, 4, 6, 2, 3, -1, 6, -18, 12, 13, -2, 15, -7, 6, 2, -15, -5, 1, -2, 4
    0x70000fc, 0xf7fcff03, 0xfefaf603, 0x2060404, 0xee06ff03, 0xffe0d0c, 0xf10206f9, 0x4fe01fb,
    // 14, -5, 6, 3, 113, 1, -1, 68, 9, 9, 0, -4, -33, 4, -9, 1, -2, 0, 3, 15, 0, -4, 6, -21, -1, -3, -2, 9, 8, -3, -9, 3
    0x306fb0e, 0x44ff0171, 0xfc000909, 0x1f704df, 0xf0300fe, 0xeb06fc00, 0x9fefdff, 0x3f7fd08,
    // -9, -5, 1, -2, -7, -2, -6, 2, -8, -3, 7, -3, -11, 2, -5, -4, 4, 2, 4, -6, 14, 8, 7, 9, -10, 6, 5, -10, -8, -2, -1, 3
    0xfe01fbf7, 0x2fafef9, 0xfd07fdf8, 0xfcfb02f5, 0xfa040204, 0x907080e, 0xf60506f6, 0x3fffef8,
    // -4, -4, 3, 0, -3, -11, 0, -6, 3, 6, 0, 2, 2, 0, -2, 0, -1, 4, -3, 5, 11, -5, -4, -2, -6, 7, 1, -4, 0, 0, 4, -7
    0x3fcfc, 0xfa00f5fd, 0x2000603, 0xfe0002, 0x5fd04ff, 0xfefcfb0b, 0xfc0107fa, 0xf9040000,
    // 2, 4, -3, -13, -2, 13, 2, -26, 2, -2, 12, -10, 6, 10, 12, -1, 7, 5, 0, 10, 8, 2, -10, -12, -7, -8, -11, -9, 0, 6, 0, 5
    0xf3fd0402, 0xe6020dfe, 0xf60cfe02, 0xff0c0a06, 0xa000507, 0xf4f60208, 0xf7f5f8f9, 0x5000600,
    // 2, -2, 5, -14, 9, 2, 8, -9, 16, -8, -9, 6, -2, -5, 6, -16, 27, -32, 24, 76, 17, -54, 100, -102, 14, -56, -38, -67, 15, 31, 29, -2
    0xf205fe02, 0xf7080209, 0x6f7f810, 0xf006fbfe, 0x4c18e01b, 0x9a64ca11, 0xbddac80e, 0xfe1d1f0f,
    // -5, -4, 10, 27, 15, 0, 6, -24, -8, -5, -15, -3, 19, 9, -1, 7, -1, 5, 0, -2, 5, -6, -7, 1, -5, 14, 8, -3, -2, 3, -5, -8
    0x1b0afcfb, 0xe806000f, 0xfdf1fbf8, 0x7ff0913, 0xfe0005ff, 0x1f9fa05, 0xfd080efb, 0xf8fb03fe,
    // 14, -6, 6, -11, 12, 4, 9, -4, -4, -2, -8, -10, 13, 7, 5, 0, -2, 2, -3, 4, 2, -6, -8, -7, -3, 3, 2, -1, 2, 4, -4, -1
    0xf506fa0e, 0xfc09040c, 0xf6f8fefc, 0x5070d, 0x4fd02fe, 0xf9f8fa02, 0xff0203fd, 0xfffc0402,
};
static const uint embedded_encoder2_ResidualBlock_0_body_conv_dw_bias_dwords[8] = {
    // -0.01213, -0.001341, -0.00618, -0.002726, 0.0017185, 0.01346, -0.0294, 0.006416, -0.00767, 0.02338, -0.01382, -0.01342, 0.006916, -0.0007896, -0.02252, 0.04138
    0x957ea236, 0x99959e54, 0x22e4170a, 0x1e92a787, 0x25fc9fdb, 0xa2dfa313, 0x92781f15, 0x294ca5c4,
};
static const uint embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 93, -12, 90, 12, -21, 53, -8, 76, -36, -61, 16, 42, 38, 38, 84, 7, 3, 3, -12, -13, -78, -4, 31, -25, 52, -32, -41, 49, 51, -42, -34, -52
    0xc5af45d, 0x4cf835eb, 0x2a10c3dc, 0x7542626, 0xf3f40303, 0xe71ffcb2, 0x31d7e034, 0xccded633,
    // -93, 62, -111, 36, -39, -8, -20, -46, -24, -85, 38, -2, -21, 6, 62, -46, -17, -35, 23, -30, -30, 19, 0, -67, 36, 4, 58, -7, 7, 31, 14, 20
    0x24913ea3, 0xd2ecf8d9, 0xfe26abe8, 0xd23e06eb, 0xe217ddef, 0xbd0013e2, 0xf93a0424, 0x140e1f07,
    // -62, -38, 45, -104, -12, 45, -55, -4, -63, -10, 72, 104, -72, -4, -111, -101, 12, -64, -65, 63, 25, -18, -33, 11, -1, 30, 36, 13, 3, 0, -52, 41
    0x982ddac2, 0xfcc92df4, 0x6848f6c1, 0x9b91fcb8, 0x3fbfc00c, 0xbdfee19, 0xd241eff, 0x29cc0003,
    // 60, -28, -68, -7, 33, -3, -1, 7, -90, -9, 51, 3, 13, -11, -42, 29, -32, 54, -27, -69, 54, -16, -1, 11, 15, -23, 48, 107, 19, 42, -87, 57
    0xf9bce43c, 0x7fffd21, 0x333f7a6, 0x1dd6f50d, 0xbbe536e0, 0xbfff036, 0x6b30e90f, 0x39a92a13,
    // -4, 14, 12, 8, -2, -4, 76, 9, 19, -40, 66, 3, -20, -1, 4, 27, 33, 59, -14, 48, -1, -33, 24, 14, 39, -5, -28, -48, 52, -6, 69, 50
    0x80c0efc, 0x94cfcfe, 0x342d813, 0x1b04ffec, 0x30f23b21, 0xe18dfff, 0xd0e4fb27, 0x3245fa34,
    // 106, 1, -33, -42, 8, -18, 29, 0, 11, 32, 79, -6, 90, -10, -36, 39, -89, 15, -81, -20, 3, -55, -15, -51, 22, 50, 12, -8, -26, -19, -103, -21
    0xd6df016a, 0x1dee08, 0xfa4f200b, 0x27dcf65a, 0xecaf0fa7, 0xcdf1c903, 0xf80c3216, 0xeb99ede6,
    // -64, -34, 15, -17, 13, -33, 41, 9, -23, 6, 10, 1, 7, 18, 45, 3, -44, 62, -1, -2, -6, 56, 11, 31, 4, -19, -28, -20, 24, -5, 35, 48
    0xef0fdec0, 0x929df0d, 0x10a06e9, 0x32d1207, 0xfeff3ed4, 0x1f0b38fa, 0xece4ed04, 0x3023fb18,
    // -3, -12, -57, 80, 17, -32, -5, -29, 7, 40, 4, -30, 30, -15, -1, 8, 1, 44, 57, -72, -49, 24, 15, -9, -18, -46, -16, 8, 7, -11, 15, -38
    0x50c7f4fd, 0xe3fbe011, 0xe2042807, 0x8fff11e, 0xb8392c01, 0xf70f18cf, 0x8f0d2ee, 0xda0ff507,
    // 121, 27, -19, 41, -31, 24, 28, -25, 13, 10, 33, -42, -76, 34, -82, -10, -33, -16, -3, 31, -40, -2, -16, 42, -2, 5, 62, -93, 4, 18, 22, -17
    0x29ed1b79, 0xe71c18e1, 0xd6210a0d, 0xf6ae22b4, 0x1ffdf0df, 0x2af0fed8, 0xa33e05fe, 0xef161204,
    // 12, -6, 26, -74, -58, 7, -10, 43, 10, -14, 92, -54, 47, 16, -21, 11, 46, -14, 24, -42, 49, -74, -8, 4, 18, -42, 25, -45, -23, -2, 40, -27
    0xb61afa0c, 0x2bf607c6, 0xca5cf20a, 0xbeb102f, 0xd618f22e, 0x4f8b631, 0xd319d612, 0xe528fee9,
    // -34, -5, -30, -47, 11, 23, -32, 66, 16, 0, 59, -34, -12, 3, -48, 22, -81, 32, 103, 25, -30, -45, -17, 43, -15, 25, -26, -76, -78, 48, -15, 17
    0xd1e2fbde, 0x42e0170b, 0xde3b0010, 0x16d003f4, 0x196720af, 0x2befd3e2, 0xb4e619f1, 0x11f130b2,
    // 76, -77, 127, -11, 0, -7, -3, 45, 24, 85, -44, 33, 54, 3, -52, 61, -102, 34, 18, 106, 8, -4, -16, 53, -1, 5, 23, -11, -69, 57, 92, -56
    0xf57fb34c, 0x2dfdf900, 0x21d45518, 0x3dcc0336, 0x6a12229a, 0x35f0fc08, 0xf51705ff, 0xc85c39bb,
    // 6, 20, -13, -84, -56, -12, 9, -27, -11, 8, -45, -72, 23, -20, -8, -27, 106, -126, -38, 98, -36, 20, 12, -8, -25, -4, -23, -53, 22, -4, 92, -8
    0xacf31406, 0xe509f4c8, 0xb8d308f5, 0xe5f8ec17, 0x62da826a, 0xf80c14dc, 0xcbe9fce7, 0xf85cfc16,
    // 51, 7, -7, 29, -2, -32, -10, -21, -18, -8, -13, 71, -6, -16, -27, 16, -15, 24, 19, 46, 10, -3, 16, 10, 1, -40, -18, -27, 43, 21, -79, -11
    0x1df90733, 0xebf6e0fe, 0x47f3f8ee, 0x10e5f0fa, 0x2e1318f1, 0xa10fd0a, 0xe5eed801, 0xf5b1152b,
    // 23, -35, -44, -30, -41, -12, -21, 22, -5, 43, 13, 40, -42, -18, 75, 6, 38, 22, -52, -28, 69, -6, -16, 55, 12, -23, 75, 80, 25, 78, -46, 68
    0xe2d4dd17, 0x16ebf4d7, 0x280d2bfb, 0x64beed6, 0xe4cc1626, 0x37f0fa45, 0x504be90c, 0x44d24e19,
    // -9, 14, 12, -35, -34, -26, -34, -6, -35, 13, 25, -83, 11, -14, -31, 33, 36, 1, -32, 14, 28, -14, -10, 42, 17, -9, 67, 35, 24, 83, 13, 28
    0xdd0c0ef7, 0xfadee6de, 0xad190ddd, 0x21e1f20b, 0xee00124, 0x2af6f21c, 0x2343f711, 0x1c0d5318,
};
static const uint embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias_dwords[16] = {
    // 0.05405, -0.4307, 0.0602, 0.0793, 0.06494, 0.02887, 0.07214, 0.0329, 0.0457, 0.03214, 0.0471, 0.05167, -0.001617, 0.03406, 0.02084, 0.04245
    0xb6e42aeb, 0x2d132bb5, 0x27642c28, 0x28362c9e, 0x281d29d9, 0x2a9d2a07, 0x285c96a0, 0x296f2556,
    // -0.0661, 0.02629, 0.03027, 0.04883, 0.04648, 0.11285, 0.04648, 0.06647, -0.097, 0.04868, -0.1759, 0.02496, 0.04562, -0.114, 0.015205, 0.01148
    0x26bbac3b, 0x2a4027c0, 0x2f3929f3, 0x2c4129f3, 0x2a3bae35, 0x2664b1a1, 0xaf4c29d7, 0x21e123c9,
};
static const uint embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 5, 8, 1, 9, -25, 24, 36, -6, 10, -6, 29, -11, -14, -28, 41, -23, -26, 8, -40, -9, -7, -23, -16, 17, 84, 19, -10, -35, 24, -6, -24, 25
    0x9010805, 0xfa2418e7, 0xf51dfa0a, 0xe929e4f2, 0xf7d808e6, 0x11f0e9f9, 0xddf61354, 0x19e8fa18,
    // -20, -78, -12, 26, 37, -37, -11, -20, 48, -34, -20, 32, 42, 14, -41, 63, -32, -35, 14, -41, -8, -3, 19, -13, -11, 18, 21, 8, -23, 26, 44, -31
    0x1af4b2ec, 0xecf5db25, 0x20ecde30, 0x3fd70e2a, 0xd70edde0, 0xf313fdf8, 0x81512f5, 0xe12c1ae9,
    // -23, 13, 2, 41, 13, 25, -5, 10, 76, 18, 34, 59, 55, -15, 14, -6, 83, 54, 30, -59, 37, -15, 29, 35, 28, 51, 50, -49, 41, -45, -40, 39
    0x29020de9, 0xafb190d, 0x3b22124c, 0xfa0ef137, 0xc51e3653, 0x231df125, 0xcf32331c, 0x27d8d329,
    // 16, -5, -29, 44, -47, -26, -53, 30, 12, 29, -3, -20, -16, 7, -10, 39, -15, -46, 23, 7, -12, 29, 36, -11, 32, -26, -67, -21, 19, -36, 7, 39
    0x2ce3fb10, 0x1ecbe6d1, 0xecfd1d0c, 0x27f607f0, 0x717d2f1, 0xf5241df4, 0xebbde620, 0x2707dc13,
    // 62, -14, -50, 16, -48, 5, -30, -106, -9, 36, -6, -92, 12, -12, 17, 10, -14, 85, -10, 3, -50, 38, 49, 48, 4, 126, 19, -39, 30, 81, -2, -39
    0x10cef23e, 0x96e205d0, 0xa4fa24f7, 0xa11f40c, 0x3f655f2, 0x303126ce, 0xd9137e04, 0xd9fe511e,
    // -8, 0, -8, -48, 10, -5, 29, -9, 13, -26, -29, -14, 3, -16, -11, -6, 13, -33, -24, -16, -26, 1, -4, -13, 2, 5, -72, -38, 24, 10, 15, -5
    0xd0f800f8, 0xf71dfb0a, 0xf2e3e60d, 0xfaf5f003, 0xf0e8df0d, 0xf3fc01e6, 0xdab80502, 0xfb0f0a18,
    // -17, 18, 6, -29, -16, 64, 33, 2, 1, 32, 8, 18, -30, 19, 54, -71, -120, 0, -42, -8, 34, 0, -8, -12, 30, 29, -6, -8, -3, -26, -12, 21
    0xe30612ef, 0x22140f0, 0x12082001, 0xb93613e2, 0xf8d60088, 0xf4f80022, 0xf8fa1d1e, 0x15f4e6fd,
    // 3, 18, 85, 10, -18, -38, -24, -38, 5, -6, -105, -34, -6, 9, -31, -2, -86, 92, -4, -18, 31, 38, -128, 39, 3, 15, 4, -79, 27, 38, -39, -43
    0xa551203, 0xdae8daee, 0xde97fa05, 0xfee109fa, 0xeefc5caa, 0x2780261f, 0xb1040f03, 0xd5d9261b,
    // 9, 23, 14, -1, -13, -11, -8, -23, -11, 11, -26, -32, -5, 15, 0, 1, 33, 16, -17, 66, -11, 22, -17, 19, 0, 19, -48, 34, -31, 8, 1, 7
    0xff0e1709, 0xe9f8f5f3, 0xe0e60bf5, 0x1000ffb, 0x42ef1021, 0x13ef16f5, 0x22d01300, 0x70108e1,
    // 14, -57, 111, 27, 21, -23, -39, -14, -13, 47, 7, 49, -63, 34, 56, 68, -83, -5, -33, 28, -41, -23, -63, 8, -36, 44, -44, -27, 53, 55, 82, -31
    0x1b6fc70e, 0xf2d9e915, 0x31072ff3, 0x443822c1, 0x1cdffbad, 0x8c1e9d7, 0xe5d42cdc, 0xe1523735,
    // 72, 19, 10, -34, 111, 4, 33, 56, 15, -53, -6, -51, 23, 4, -79, 9, 17, 9, 7, -74, 22, 41, -12, 105, 43, -19, 8, 46, -35, -81, -36, 84
    0xde0a1348, 0x3821046f, 0xcdfacb0f, 0x9b10417, 0xb6070911, 0x69f42916, 0x2e08ed2b, 0x54dcafdd,
    // -52, -4, -40, -66, -9, -23, -89, -17, -9, 40, -30, 67, 38, -9, 38, -7, 86, 34, -92, -11, -29, 102, 47, 55, -15, -17, 34, 10, -1, 42, -13, -38
    0xbed8fccc, 0xefa7e9f7, 0x43e228f7, 0xf926f726, 0xf5a42256, 0x372f66e3, 0xa22eff1, 0xdaf32aff,
    // -22, -22, -6, -11, 66, 10, 5, -51, 47, -37, -27, 30, -12, -7, -38, 15, 53, 21, 28, 20, 6, 10, 36, -33, -71, 59, -24, -45, 49, 34, 33, -26
    0xf5faeaea, 0xcd050a42, 0x1ee5db2f, 0xfdaf9f4, 0x141c1535, 0xdf240a06, 0xd3e83bb9, 0xe6212231,
    // 5, 26, 3, -18, -1, 13, 36, 11, 23, -10, 2, 3, 46, 17, 1, 1, 40, 4, -2, 22, -5, -5, 3, 0, -42, 12, -19, -7, 11, -9, 4, -3
    0xee031a05, 0xb240dff, 0x302f617, 0x101112e, 0x16fe0428, 0x3fbfb, 0xf9ed0cd6, 0xfd04f70b,
    // 92, -12, 0, -67, 13, -47, 15, 0, -36, 69, 43, -102, -14, 62, -64, 66, -70, -29, 59, 36, -3, -17, 5, -57, -18, 53, 36, 7, -14, -7, 0, -1
    0xbd00f45c, 0xfd10d, 0x9a2b45dc, 0x42c03ef2, 0x243be3ba, 0xc705effd, 0x72435ee, 0xff00f9f2,
    // 3, 17, -14, -10, 39, 35, 0, -1, -25, -46, 16, 12, -40, 13, -13, -10, -36, 50, 24, 60, 66, 28, 10, 7, 12, -20, 54, -78, 74, -1, -31, -3
    0xf6f21103, 0xff002327, 0xc10d2e7, 0xf6f30dd8, 0x3c1832dc, 0x70a1c42, 0xb236ec0c, 0xfde1ff4a,
};
static const uint embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias_dwords[8] = {
    // -0.01151, -0.0253, -0.0888, 0.003254, -0.00731, 0.066, 0.003714, 0.1131, -0.02647, -0.12427, -0.0781, 0.02792, 0.02101, -0.02206, -0.0295, -0.01918
    0xa67aa1e5, 0x1aaaadaf, 0x2c399f7c, 0x2f3d1b9b, 0xaff4a6c7, 0x2726ad00, 0xa5a62561, 0xa4e9a78d,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass1(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(3840, 2160, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(3840, 2160, 16), // threadGroupSliceSize
        uint3(3840, 2160, 16), // storageSize
        uint3(16, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.014608594588935375, storage_quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.006728010717779398, storage_embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_0_body_conv_dw_bias = { embedded_encoder2_ResidualBlock_0_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_0_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_0_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.006839262321591377, storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias = { embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0068810670636594296, storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias = { embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias };
    
    // fused_quantized_NHWC_/encoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_2 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_2 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 16);
    const uint3 groupSize_slice_2 = uint3(64, 1, 16);
    const uint3 storageSize_slice_2 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_2 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_2 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_2 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_2 = dot(groupStart_slice_2, tensorByteStrides_slice_2);
    const float quantizationScale_slice_2 = 0.027550771832466125;
    const RWBufferStorage storage_slice_2 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_2 = { logicalSize_slice_2, groupStart_slice_2, groupSize_slice_2, storageSize_slice_2, tensorByteStrides_slice_2, paddingBegin_slice_2, paddingEnd_slice_2, threadGroupByteOffsetInTensor_slice_2 + 132710400, quantizationScale_slice_2, storage_slice_2 };
    // ConvNextBlock (16, 2160, 3840), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,) -> (16, 2160, 3840)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    ConvNextBlock(30.251555794070015, 0.03305615112185478, 31.02819042735687, 0.032228756695985794, quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_0_body_conv_dw_bias, embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias, embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias, slice_2, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_1
#ifdef MLSR_PASS_1_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass1_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/encoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_3 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_3 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_3 = uint3(32, 1, 16);
    const uint3 storageSize_slice_3 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_3 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_3 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_3 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_3 = dot(groupStart_slice_3, tensorByteStrides_slice_3);
    const float quantizationScale_slice_3 = 0.027550771832466125;
    const RWBufferStorage storage_slice_3 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_3 = { logicalSize_slice_3, groupStart_slice_3, groupSize_slice_3, storageSize_slice_3, tensorByteStrides_slice_3, paddingBegin_slice_3, paddingEnd_slice_3, threadGroupByteOffsetInTensor_slice_3 + 132710400, quantizationScale_slice_3, storage_slice_3 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_3, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_1_POST


#ifdef MLSR_PASS_2
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/ConvNextBlock.hlsli"

static const uint embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // -6, -4, 3, 6, -4, 2, -8, 0, 3, 2, -5, 5, -2, 5, 3, -12, 30, -8, 14, -21, -10, -28, -26, 2, -1, 5, -1, 22, -4, 4, 14, -3
    0x603fcfa, 0xf802fc, 0x5fb0203, 0xf40305fe, 0xeb0ef81e, 0x2e6e4f6, 0x16ff05ff, 0xfd0e04fc,
    // -7, -7, 4, -9, 3, 5, -14, 4, -10, -2, 4, 5, -7, 6, 1, -14, 22, -1, -1, -10, 2, -7, 2, -10, 4, 3, 6, 7, 3, 1, 5, 2
    0xf704f9f9, 0x4f20503, 0x504fef6, 0xf20106f9, 0xf6ffff16, 0xf602f902, 0x7060304, 0x2050103,
    // 10, 15, -27, -27, -8, -21, -91, -30, -49, 25, -22, -5, 54, 54, 25, 19, 26, -6, 12, -30, -7, 6, -20, -11, -28, 6, 2, 41, -9, -7, 31, -8
    0xe5e50f0a, 0xe2a5ebf8, 0xfbea19cf, 0x13193636, 0xe20cfa1a, 0xf5ec06f9, 0x290206e4, 0xf81ff9f7,
    // -8, -1, 0, 7, 1, -4, -7, 3, -2, 5, -1, 7, -2, 9, 4, -8, 21, -1, 5, 3, 2, -23, -13, 4, 3, 13, -8, 12, 8, 0, 16, 3
    0x700fff8, 0x3f9fc01, 0x7ff05fe, 0xf80409fe, 0x305ff15, 0x4f3e902, 0xcf80d03, 0x3100008,
    // -6, -4, 1, 1, -1, -8, -9, -2, -3, 8, 5, 6, -2, 5, 8, -6, 2, -13, 18, -8, -8, 7, -19, -11, 29, 1, -4, 16, 15, 17, 22, 3
    0x101fcfa, 0xfef7f8ff, 0x60508fd, 0xfa0805fe, 0xf812f302, 0xf5ed07f8, 0x10fc011d, 0x316110f,
    // 12, -2, 28, 8, -22, 25, -30, -3, 24, -1, -15, 19, 6, -23, 34, -1, 15, -2, 25, -13, 2, 14, -45, -21, 28, -4, -5, 22, 0, 5, 12, 7
    0x81cfe0c, 0xfde219ea, 0x13f1ff18, 0xff22e906, 0xf319fe0f, 0xebd30e02, 0x16fbfc1c, 0x70c0500,
    // 19, -1, 26, 0, -11, 3, -24, 10, 22, 8, -23, 26, 9, -12, 36, 19, -5, -3, -25, 10, -79, -76, 40, -14, 39, -57, -12, -31, -37, 27, 10, -18
    0x1aff13, 0xae803f5, 0x1ae90816, 0x1324f409, 0xae7fdfb, 0xf228b4b1, 0xe1f4c727, 0xee0a1bdb,
    // 15, -6, 30, -3, -19, 24, -25, -10, 12, 1, -16, 33, -2, -16, 28, 17, 6, -5, 1, -15, -10, 8, -7, -2, 13, 4, -1, 14, 17, 13, 14, 5
    0xfd1efa0f, 0xf6e718ed, 0x21f0010c, 0x111cf0fe, 0xf101fb06, 0xfef908f6, 0xeff040d, 0x50e0d11,
    // 37, 1, 24, -13, -16, 35, -7, 7, 16, -6, -31, 20, 9, -20, 24, 26, 9, -4, 9, -8, -8, 8, -19, -7, 20, -7, -8, 16, 8, 9, 11, 3
    0xf3180125, 0x7f923f0, 0x14e1fa10, 0x1a18ec09, 0xf809fc09, 0xf9ed08f8, 0x10f8f914, 0x30b0908,
    // 6, 4, 0, -2, 1, 4, -10, 8, 17, -25, -4, -13, 6, -7, -8, -1, 20, -7, -8, -28, -16, -11, 5, 12, 18, -25, -10, -34, 5, -22, -19, -19
    0xfe000406, 0x8f60401, 0xf3fce711, 0xfff8f906, 0xe4f8f914, 0xc05f5f0, 0xdef6e712, 0xededea05,
    // 3, 2, 1, -6, -5, 25, -7, 8, 4, -20, -5, 4, 2, -1, 2, 4, 8, 1, -2, -35, 1, 0, -5, 13, 35, -31, -17, -23, -11, 1, -4, -12
    0xfa010203, 0x8f919fb, 0x4fbec04, 0x402ff02, 0xddfe0108, 0xdfb0001, 0xe9efe123, 0xf4fc01f5,
    // 8, 29, -55, 64, 27, 38, -48, 70, -24, -85, 76, 45, 40, -38, 90, 5, 13, -20, 0, -7, -24, -9, -3, 29, 2, -19, -13, -23, 23, -6, -23, -8
    0x40c91d08, 0x46d0261b, 0x2d4cabe8, 0x55ada28, 0xf900ec0d, 0x1dfdf7e8, 0xe9f3ed02, 0xf8e9fa17,
    // 1, -3, 2, 6, -4, -4, -15, 14, 6, -10, -9, 6, 7, 7, -1, 5, 15, -5, -1, 28, -15, 21, -20, 32, 11, -15, -26, -2, -9, -3, 25, 19
    0x602fd01, 0xef1fcfc, 0x6f7f606, 0x5ff0707, 0x1cfffb0f, 0x20ec15f1, 0xfee6f10b, 0x1319fdf7,
    // 2, -6, 3, 1, -7, 15, -13, 6, 6, -9, -6, -10, -1, 4, -6, 8, 8, 4, -1, -6, 7, 1, 14, -9, 4, 0, 9, 5, 4, -9, 4, -5
    0x103fa02, 0x6f30ff9, 0xf6faf706, 0x8fa04ff, 0xfaff0408, 0xf70e0107, 0x5090004, 0xfb04f704,
    // 0, 3, -25, 38, 6, -45, 35, -8, -6, 3, 11, 2, 46, 1, 3, -17, 2, 17, -1, 17, 16, -1, 7, -12, -6, 0, 8, -8, -2, -5, -15, 9
    0x26e70300, 0xf823d306, 0x20b03fa, 0xef03012e, 0x11ff1102, 0xf407ff10, 0xf80800fa, 0x9f1fbfe,
    // 3, 7, -17, 17, 1, -45, 38, -2, -2, 16, 8, 10, 35, 2, 9, -11, 21, -17, -20, 15, -90, -26, -2, -9, -47, -12, 21, 22, 46, 60, 48, -50
    0x11ef0703, 0xfe26d301, 0xa0810fe, 0xf5090223, 0xfecef15, 0xf7fee6a6, 0x1615f4d1, 0xce303c2e,
    // -4, -3, -24, 32, 4, -47, 39, -2, 2, 10, 10, -9, 41, 0, -6, -12, 14, 14, -14, 10, -1, -13, 19, -3, 7, 6, 9, 2, 12, -9, -4, 12
    0x20e8fdfc, 0xfe27d104, 0xf70a0a02, 0xf4fa0029, 0xaf20e0e, 0xfd13f3ff, 0x2090607, 0xcfcf70c,
    // 5, 3, -18, 28, -16, -55, 40, 5, -5, -2, 2, 8, 38, 4, 1, -3, 0, 6, 0, 21, -1, -16, 4, 0, 6, 9, 2, 3, 11, -2, -11, 5
    0x1cee0305, 0x528c9f0, 0x802fefb, 0xfd010426, 0x15000600, 0x4f0ff, 0x3020906, 0x5f5fe0b,
    // -8, -6, -1, 4, 7, 2, 12, 0, -17, 8, 3, -5, -6, -1, -3, -8, 13, 16, -9, -14, 15, 8, -24, 4, -25, -26, 1, -23, -3, -3, -17, -7
    0x4fffaf8, 0xc0207, 0xfb0308ef, 0xf8fdfffa, 0xf2f7100d, 0x4e8080f, 0xe901e6e7, 0xf9effdfd,
    // -13, -1, -8, 6, 4, 6, 10, -4, -26, -2, -4, -7, -2, -8, 1, -9, 6, -1, 4, 10, -2, 1, -12, 8, -2, -2, -13, 0, 6, 2, 1, -6
    0x6f8fff3, 0xfc0a0604, 0xf9fcfee6, 0xf701f8fe, 0xa04ff06, 0x8f401fe, 0xf3fefe, 0xfa010206,
    // 9, -45, -22, -4, -100, -4, -3, -9, -22, -66, 11, 39, -43, 30, -48, 53, 4, 8, -7, -3, 22, 2, -9, -9, -15, -25, 6, -10, -4, -7, -6, -5
    0xfcead309, 0xf7fdfc9c, 0x270bbeea, 0x35d01ed5, 0xfdf90804, 0xf7f70216, 0xf606e7f1, 0xfbfaf9fc,
    // -9, -5, 1, 13, -1, 2, -6, 1, -4, 7, -1, 6, -8, 4, 3, -7, -4, 2, -4, 11, 10, -21, -17, 11, -12, -6, 0, -15, -6, 0, 4, -16
    0xd01fbf7, 0x1fa02ff, 0x6ff07fc, 0xf90304f8, 0xbfc02fc, 0xbefeb0a, 0xf100faf4, 0xf00400fa,
    // -10, -1, -5, 6, 9, 2, 7, 5, -11, 0, 4, -1, -4, -7, 6, -8, -10, -5, -1, -6, 15, -4, -4, 1, -23, -1, 5, 2, -6, 1, 2, -18
    0x6fbfff6, 0x5070209, 0xff0400f5, 0xf806f9fc, 0xfafffbf6, 0x1fcfc0f, 0x205ffe9, 0xee0201fa,
    // -32, -8, 4, -9, 5, -20, 8, -1, -9, -6, 2, -5, -8, 8, 2, -7, -3, -8, 1, -7, 6, -1, -8, -1, -16, -5, 0, 7, -4, 0, 3, -11
    0xf704f8e0, 0xff08ec05, 0xfb02faf7, 0xf90208f8, 0xf901f8fd, 0xfff8ff06, 0x700fbf0, 0xf50300fc,
    // -11, -1, 1, -19, 16, -3, 1, 12, -20, 5, 0, -11, 12, 0, -4, -1, -93, 8, -56, -34, 17, -3, -21, 6, 37, 2, -28, 16, -8, 10, 13, 22
    0xed01fff5, 0xc01fd10, 0xf50005ec, 0xfffc000c, 0xdec808a3, 0x6ebfd11, 0x10e40225, 0x160d0af8,
    // -19, 0, -3, -11, -3, -13, 31, 7, -11, -3, 1, 1, -10, 4, -8, 2, -6, 1, 2, -16, 12, 19, -1, 8, -36, 8, 5, 5, -8, -4, -3, 2
    0xf5fd00ed, 0x71ff3fd, 0x101fdf5, 0x2f804f6, 0xf00201fa, 0x8ff130c, 0x50508dc, 0x2fdfcf8,
    // -11, -14, 3, -27, 3, 0, 20, 4, -41, -7, 2, -5, -2, 7, -16, 8, -9, -1, -1, 6, -2, 1, -4, 5, -30, 6, -2, 7, -5, 0, -11, -3
    0xe503f2f5, 0x4140003, 0xfb02f9d7, 0x8f007fe, 0x6fffff7, 0x5fc01fe, 0x7fe06e2, 0xfdf500fb,
    // -3, 1, 1, 4, 2, 6, 7, 1, -2, 6, 0, -2, -6, 7, 0, -3, -16, 4, 2, -5, 20, 28, 22, -25, -14, 3, 13, 3, -14, 8, -5, 10
    0x40101fd, 0x1070602, 0xfe0006fe, 0xfd0007fa, 0xfb0204f0, 0xe7161c14, 0x30d03f2, 0xafb08f2,
    // 4, 4, -1, 9, -1, 8, 5, -1, 2, -3, -4, 6, 4, -2, 8, 5, -16, -10, 14, -6, 8, 24, 3, -20, 10, 21, 3, -10, -20, 26, -9, 7
    0x9ff0404, 0xff0508ff, 0x6fcfd02, 0x508fe04, 0xfa0ef6f0, 0xec031808, 0xf603150a, 0x7f71aec,
    // -87, 33, 31, 42, -74, 33, -51, -61, -25, 18, -2, -20, -11, -39, 69, -1, -13, -6, 11, 12, 13, -1, 6, -13, 2, 14, 11, -9, 6, 24, -21, 10
    0x2a1f21a9, 0xc3cd21b6, 0xecfe12e7, 0xff45d9f5, 0xc0bfaf3, 0xf306ff0d, 0xf70b0e02, 0xaeb1806,
    // -2, 2, -1, 12, -1, -9, 3, 4, -2, 0, 2, 7, -1, 2, 5, -2, -27, -3, 5, -1, -2, 19, -2, -12, -6, 20, -2, 13, -22, 7, 9, 7
    0xcff02fe, 0x403f7ff, 0x70200fe, 0xfe0502ff, 0xff05fde5, 0xf4fe13fe, 0xdfe14fa, 0x70907ea,
    // 1, 5, 0, -5, 2, 4, 2, -5, 6, 8, 3, 3, -5, 0, -1, 2, 0, -2, 2, -1, -4, 0, 5, -6, -18, 7, 6, 7, -4, -4, 7, 2
    0xfb000501, 0xfb020402, 0x3030806, 0x2ff00fb, 0xff02fe00, 0xfa0500fc, 0x70607ee, 0x207fcfc,
    // -14, 1, 1, -11, -2, 8, -3, 3, -20, -5, 3, -1, 0, -1, 4, 10, 2, 2, -1, 3, 1, 3, 4, -2, -25, 5, 4, 9, -2, -6, 8, 8
    0xf50101f2, 0x3fd08fe, 0xff03fbec, 0xa04ff00, 0x3ff0202, 0xfe040301, 0x90405e7, 0x808fafe,
    // -19, -8, 4, 28, -11, -39, -12, -8, 2, -8, -9, 12, -14, 1, 11, -8, -46, 29, -14, -78, 27, 93, -22, 37, -27, 7, -40, 54, 34, 15, -6, 5
    0x1c04f8ed, 0xf8f4d9f5, 0xcf7f802, 0xf80b01f2, 0xb2f21dd2, 0x25ea5d1b, 0x36d807e5, 0x5fa0f22,
    // -15, -7, 7, 4, 8, -14, -13, -7, -26, -17, -7, 2, 4, -1, 9, 6, 0, 1, 1, 0, -9, -9, 5, -4, -1, 0, 5, 14, -11, -7, 12, -12
    0x407f9f1, 0xf9f3f208, 0x2f9efe6, 0x609ff04, 0x10100, 0xfc05f7f7, 0xe0500ff, 0xf40cf9f5,
    // -19, -1, -3, -6, 6, -19, -13, -2, 5, -10, 2, 6, -20, -7, 29, -8, -5, 2, -1, -16, 5, -8, -1, -2, -12, -2, 5, 5, -11, -7, 14, -5
    0xfafdffed, 0xfef3ed06, 0x602f605, 0xf81df9ec, 0xf0ff02fb, 0xfefff805, 0x505fef4, 0xfb0ef9f5,
    // -7, 1, 0, -5, 2, 11, 1, -7, 6, 2, 3, -7, 6, 3, 0, -5, -9, 2, 4, 6, 15, 11, -6, 0, -4, 2, 7, 8, -13, -3, -13, 3
    0xfb0001f9, 0xf9010b02, 0xf9030206, 0xfb000306, 0x60402f7, 0xfa0b0f, 0x80702fc, 0x3f3fdf3,
    // -10, 4, -2, 18, 4, 8, 9, -6, 6, 6, -2, -12, 6, -2, -1, 2, 1, 12, 3, -8, 11, -14, -32, -6, 11, -10, 11, -7, 7, 1, -11, 0
    0x12fe04f6, 0xfa090804, 0xf4fe0606, 0x2fffe06, 0xf8030c01, 0xfae0f20b, 0xf90bf60b, 0xf50107,
    // 23, 13, -38, -91, -51, 37, -14, 13, -1, 61, 3, -48, -6, -30, 25, -19, -7, -4, 8, 43, 15, -22, -29, 4, -11, -8, 10, -14, -3, 10, -6, 19
    0xa5da0d17, 0xdf225cd, 0xd0033dff, 0xed19e2fa, 0x2b08fcf9, 0x4e3ea0f, 0xf20af8f5, 0x13fa0afd,
    // -2, 8, -13, -15, 5, 8, 13, 2, -1, -4, 9, -11, 10, -5, -10, -5, 17, -1, 4, -2, 9, -10, 9, 5, -18, -1, -10, 8, -4, -2, -12, 11
    0xf1f308fe, 0x20d0805, 0xf509fcff, 0xfbf6fb0a, 0xfe04ff11, 0x509f609, 0x8f6ffee, 0xbf4fefc,
    // -4, 1, -2, 9, 11, 5, -3, -3, 3, 1, 0, -7, 3, 5, 9, -1, -2, 6, 0, -14, -13, 19, -19, -5, -5, -2, 13, -3, 7, 4, -6, 1
    0x9fe01fc, 0xfdfd050b, 0xf9000103, 0xff090503, 0xf20006fe, 0xfbed13f3, 0xfd0dfefb, 0x1fa0407,
    // -6, -2, -4, -1, -21, 15, 4, 14, 4, 15, 9, 2, 13, 14, -10, 3, 3, 2, 0, -4, -9, 1, -8, 6, 0, 5, 8, -2, 2, 2, -2, 2
    0xfffcfefa, 0xe040feb, 0x2090f04, 0x3f60e0d, 0xfc000203, 0x6f801f7, 0xfe080500, 0x2fe0202,
    // -17, 3, 2, 12, -1, -27, -26, -1, 13, -2, 5, 7, 3, 8, -1, -2, 19, -51, 12, 16, 30, -80, 100, 1, 22, -7, -10, 16, -21, 18, 39, -7
    0xc0203ef, 0xffe6e5ff, 0x705fe0d, 0xfeff0803, 0x100ccd13, 0x164b01e, 0x10f6f916, 0xf92712eb,
    // -4, 3, 4, 15, -4, -1, -21, -14, -21, -1, 12, 5, 14, 11, -18, 16, -1, 4, 0, -13, 2, -2, -5, -1, 1, 7, 3, 2, -1, 0, 0, -6
    0xf0403fc, 0xf2ebfffc, 0x50cffeb, 0x10ee0b0e, 0xf30004ff, 0xfffbfe02, 0x2030701, 0xfa0000ff,
    // 7, 5, -2, -11, 34, 29, 16, -2, 15, 16, 1, 1, 18, 5, 10, -6, 0, 1, 2, 11, 7, 4, -4, -1, 0, -2, 4, 1, -8, 5, 12, -5
    0xf5fe0507, 0xfe101d22, 0x101100f, 0xfa0a0512, 0xb020100, 0xfffc0407, 0x104fe00, 0xfb0c05f8,
    // -1, -2, 7, 4, 4, -2, -2, 5, -1, -3, -5, -7, -6, 0, -1, -5, -2, -8, 3, 8, 8, 12, 22, -10, -5, -6, -5, 20, -1, -3, 14, -2
    0x407feff, 0x5fefe04, 0xf9fbfdff, 0xfbff00fa, 0x803f8fe, 0xf6160c08, 0x14fbfafb, 0xfe0efdff,
    // -2, 3, 5, 3, 5, 6, 1, -2, -22, 0, -1, 7, -14, 5, 4, 5, 4, 3, -6, -2, -4, 7, -12, -1, 16, -9, -5, -1, 2, -1, -12, 9
    0x30503fe, 0xfe010605, 0x7ff00ea, 0x50405f2, 0xfefa0304, 0xfff407fc, 0xfffbf710, 0x9f4ff02,
    // 8, -18, 5, 44, -35, -83, -27, 105, 23, 12, -14, 9, -13, 6, 20, 7, -5, -2, -6, -2, 4, -10, 18, -5, 1, 4, -1, -4, 12, 2, 2, -6
    0x2c05ee08, 0x69e5addd, 0x9f20c17, 0x71406f3, 0xfefafefb, 0xfb12f604, 0xfcff0401, 0xfa02020c,
    // -1, 0, -4, -7, 5, 2, 4, 2, -16, -5, 4, -8, 2, -1, -2, -8, 3, 6, -7, -55, -12, 12, 5, -21, 12, -2, -6, 37, 14, -3, -9, -8
    0xf9fc00ff, 0x2040205, 0xf804fbf0, 0xf8feff02, 0xc9f90603, 0xeb050cf4, 0x25fafe0c, 0xf8f7fd0e,
    // 0, 1, 6, 3, 3, 8, 3, -3, -19, 2, -2, -1, -5, 4, -10, 4, -5, 3, -4, 5, -1, 9, -6, 3, -8, 15, 5, -5, 0, 3, -3, 7
    0x3060100, 0xfd030803, 0xfffe02ed, 0x4f604fb, 0x5fc03fb, 0x3fa09ff, 0xfb050ff8, 0x7fd0300,
    // 14, 5, 4, 5, 21, 8, -13, -18, -22, -34, 11, 2, 7, -5, -14, 19, -14, 4, -4, 1, 0, -9, 10, 1, -8, 8, -1, -6, -9, -7, -11, -1
    0x504050e, 0xeef30815, 0x20bdeea, 0x13f2fb07, 0x1fc04f2, 0x10af700, 0xfaff08f8, 0xfff5f9f7,
    // 19, -5, 8, 6, -12, 6, -1, 2, 0, -2, -3, -9, 8, 1, -6, 10, -9, 9, -46, 24, 47, -67, -46, -31, -15, 24, -72, 23, -12, 5, 51, -76
    0x608fb13, 0x2ff06f4, 0xf7fdfe00, 0xafa0108, 0x18d209f7, 0xe1d2bd2f, 0x17b818f1, 0xb43305f4,
    // 20, -9, 9, 3, 3, -8, 10, 16, -7, -17, 1, -13, 3, -3, -39, 12, 4, -9, -1, 9, 5, 5, 9, 0, -5, 7, 0, -8, 7, 9, -3, 2
    0x309f714, 0x100af803, 0xf301eff9, 0xcd9fd03, 0x9fff704, 0x90505, 0xf80007fb, 0x2fd0907,
    // 25, 5, 2, -9, -24, -19, -5, -13, 4, -20, 17, 6, 10, -10, -4, 3, 2, 5, -7, -4, 1, -1, 16, -6, 3, 11, -2, 0, 5, -2, -17, -2
    0xf7020519, 0xf3fbede8, 0x611ec04, 0x3fcf60a, 0xfcf90502, 0xfa10ff01, 0xfe0b03, 0xfeeffe05,
    // 3, -6, 5, 3, 0, -6, 10, 5, 14, 1, -13, 2, -8, 4, 3, -5, 4, -8, 4, -10, 12, 9, 6, -5, 12, -9, 4, 2, 9, 4, 8, 16
    0x305fa03, 0x50afa00, 0x2f3010e, 0xfb0304f8, 0xf604f804, 0xfb06090c, 0x204f70c, 0x10080409,
    // 8, 2, 4, -1, -4, 1, -3, 7, 15, -18, -15, -1, -9, 5, 2, 4, 7, -8, 17, 8, -8, 15, -5, 0, 11, 19, -4, 2, 7, 8, 10, 18
    0xff040208, 0x7fd01fc, 0xfff1ee0f, 0x40205f7, 0x811f807, 0xfb0ff8, 0x2fc130b, 0x120a0807,
    // 16, 10, 21, -48, -11, -75, 7, 37, 7, 75, 22, 95, 27, -12, -24, -4, 0, -12, 8, 11, 11, -12, -4, 10, 24, -3, 7, -10, 8, 1, 4, -2
    0xd0150a10, 0x2507b5f5, 0x5f164b07, 0xfce8f41b, 0xb08f400, 0xafcf40b, 0xf607fd18, 0xfe040108,
    // 1, -3, -2, 1, -1, 0, -6, -7, 16, -5, 3, 0, -3, 9, -6, -8, 20, -4, 0, -9, -22, -3, 11, -15, 27, -3, 7, -5, 5, 3, -4, 11
    0x1fefd01, 0xf9fa00ff, 0x3fb10, 0xf8fa09fd, 0xf700fc14, 0xf10bfdea, 0xfb07fd1b, 0xbfc0305,
    // 3, 3, 0, -8, -2, 23, 0, 4, 16, -7, -4, -7, -4, 1, 2, -8, 2, 2, 3, 5, 2, 12, 3, -4, 9, 4, 0, -3, 3, 6, 3, -3
    0xf8000303, 0x40017fe, 0xf9fcf910, 0xf80201fc, 0x5030202, 0xfc030c02, 0xfd000409, 0xfd030603,
    // -11, 10, 14, 6, 13, -8, 1, -28, 0, 7, -3, 7, -6, -3, 6, -9, 0, 1, 3, 2, 3, 6, 0, -6, 3, 6, 1, 6, 1, 0, 1, 1
    0x60e0af5, 0xe401f80d, 0x7fd0700, 0xf706fdfa, 0x2030100, 0xfa000603, 0x6010603, 0x1010001,
    // 8, 3, 10, 15, -7, -14, 0, -22, 25, 20, -6, 11, -2, 1, 7, -6, 43, -23, 28, 3, 65, -3, -23, 6, 32, 9, 127, 33, -26, 22, 35, 60
    0xf0a0308, 0xea00f2f9, 0xbfa1419, 0xfa0701fe, 0x31ce92b, 0x6e9fd41, 0x217f0920, 0x3c2316e6,
    // 0, 3, 7, 1, -1, -11, 13, -4, 12, 25, 0, -3, 0, 3, 2, -2, 6, 1, 1, 18, -4, 18, 16, -2, -6, 9, 2, 5, 0, 5, 8, 0
    0x1070300, 0xfc0df5ff, 0xfd00190c, 0xfe020300, 0x12010106, 0xfe1012fc, 0x50209fa, 0x80500,
    // -10, 7, 3, 8, -27, -13, -20, -17, 12, -1, 8, 20, -16, -4, 13, 0, -5, 3, 6, -4, -5, -11, 0, -7, -2, 13, -2, 3, 6, -3, -11, 0
    0x80307f6, 0xefecf3e5, 0x1408ff0c, 0xdfcf0, 0xfc0603fb, 0xf900f5fb, 0x3fe0dfe, 0xf5fd06,
    // -5, -6, 2, -1, 2, -9, 10, -3, 4, 9, 0, 5, -6, 2, -4, -4, -18, -8, 1, -22, 2, -3, 17, 0, 18, 12, -6, -11, -17, 3, -1, -14
    0xff02fafb, 0xfd0af702, 0x5000904, 0xfcfc02fa, 0xea01f8ee, 0x11fd02, 0xf5fa0c12, 0xf2ff03ef,
    // -5, 8, 1, 2, 5, -6, 2, 2, 7, 11, 2, -11, -7, 0, -12, -5, -10, -1, 13, 18, -9, -25, -42, 8, 9, 15, -26, 16, -11, 10, 14, 6
    0x20108fb, 0x202fa05, 0xf5020b07, 0xfbf400f9, 0x120dfff6, 0x8d6e7f7, 0x10e60f09, 0x60e0af5,
    // 28, 4, 18, 49, 2, 53, 40, -16, -121, -35, -42, 42, 53, -24, 25, 47, -16, -4, -8, 0, 5, -29, 6, 5, 15, 15, 6, -28, -6, 0, -2, -18
    0x3112041c, 0xf0283502, 0x2ad6dd87, 0x2f19e835, 0xf8fcf0, 0x506e305, 0xe4060f0f, 0xeefe00fa,
    // -4, -1, -5, 0, 7, -24, 7, -1, -23, 3, 2, 2, -2, 2, -3, -9, -7, 8, -10, -33, -9, 3, -25, -1, 16, -7, -4, 29, -26, -1, 29, -10
    0xfbfffc, 0xff07e807, 0x20203e9, 0xf7fd02fe, 0xdff608f9, 0xffe703f7, 0x1dfcf910, 0xf61dffe6,
    // -3, 1, -1, -3, 1, -10, -4, 1, -4, 7, 7, -7, -1, 3, -11, -3, 3, 5, -5, 6, 1, 2, 3, -3, -6, -6, 3, -3, 2, -5, 0, 4
    0xfdff01fd, 0x1fcf601, 0xf90707fc, 0xfdf503ff, 0x6fb0503, 0xfd030201, 0xfd03fafa, 0x400fb02,
    // -6, 2, -2, -20, -18, -1, 7, 5, 26, 21, 17, -10, 0, -7, -9, -8, 1, 6, 0, 7, 3, 7, 0, -4, 5, 3, 3, 4, 1, 2, 5, 4
    0xecfe02fa, 0x507ffee, 0xf611151a, 0xf8f7f900, 0x7000601, 0xfc000703, 0x4030305, 0x4050201,
    // 1, -4, 13, 20, -1, -5, -5, 1, 6, 4, -6, -9, -7, -1, 9, 4, -6, 17, 11, 30, 5, -40, -26, -4, -11, 17, 7, 104, -32, -21, 18, -25
    0x140dfc01, 0x1fbfbff, 0xf7fa0406, 0x409fff9, 0x1e0b11fa, 0xfce6d805, 0x680711f5, 0xe712ebe0,
    // -8, 3, 1, 8, -6, -33, -9, -17, -5, 4, 5, -9, 9, 1, -16, 6, 7, -1, -4, -1, -7, 13, 1, 5, -7, -4, 1, -4, 3, 3, -4, 9
    0x80103f8, 0xeff7dffa, 0xf70504fb, 0x6f00109, 0xfffcff07, 0x5010df9, 0xfc01fcf9, 0x9fc0303,
    // 20, -4, 13, -2, 28, 23, -1, 0, 7, 12, -8, -24, 13, 7, -2, 9, -1, 4, -5, 11, 1, 7, 3, 3, -1, -7, 0, -1, -5, -5, 5, 6
    0xfe0dfc14, 0xff171c, 0xe8f80c07, 0x9fe070d, 0xbfb04ff, 0x3030701, 0xff00f9ff, 0x605fbfb,
};
static const uint embedded_encoder2_ResidualBlock_1_body_conv_dw_bias_dwords[8] = {
    // 0.02165, -0.02791, -0.02553, 0.01057, -0.00861, 0.00856, 0.03278, 0.00855, 0.02838, 0.00707, 0.01064, 0.01613, -0.04446, 0.05356, 0.02457, 0.010506
    0xa725258b, 0x2169a689, 0x2062a069, 0x20612832, 0x1f3d2744, 0x24212173, 0x2adba9b1, 0x2161264a,
};
static const uint embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -2, 6, 15, 10, 10, 4, 4, 48, -80, 22, 3, -36, 1, 5, -4, -21, -40, -3, 87, -17, 38, -5, -31, 43, 75, -41, 97, -55, -66, -27, -29, -76
    0xa0f06fe, 0x3004040a, 0xdc0316b0, 0xebfc0501, 0xef57fdd8, 0x2be1fb26, 0xc961d74b, 0xb4e3e5be,
    // 20, 8, -33, 10, -50, -24, -20, -27, -17, -66, -79, -26, -80, -99, -121, -103, -13, -14, 38, -27, -52, 1, -22, 5, -73, 46, -61, 63, -87, 26, 32, -42
    0xadf0814, 0xe5ece8ce, 0xe6b1beef, 0x99879db0, 0xe526f2f3, 0x5ea01cc, 0x3fc32eb7, 0xd6201aa9,
    // -49, 42, -7, -1, -9, 34, -27, -51, 43, 24, 74, 62, -27, -26, -84, 22, -74, 37, 33, -11, 79, 29, -86, -15, -60, 46, 76, -72, -69, 18, 19, -78
    0xfff92acf, 0xcde522f7, 0x3e4a182b, 0x16ace6e5, 0xf52125b6, 0xf1aa1d4f, 0xb84c2ec4, 0xb21312bb,
    // 32, -34, 13, -13, 15, -22, -20, 47, -48, -54, -53, -63, -10, -12, 93, -44, -31, 19, -17, -6, 47, -8, -1, -10, -51, 67, -68, 40, -34, -55, 51, 65
    0xf30dde20, 0x2fecea0f, 0xc1cbcad0, 0xd45df4f6, 0xfaef13e1, 0xf6fff82f, 0x28bc43cd, 0x4133c9de,
    // -91, 19, -13, -37, -33, 64, 81, 37, -27, 16, -19, -53, 0, -5, -9, -29, -18, -25, -5, -32, -48, -27, -68, 68, 76, 36, 67, -2, 21, -16, -41, -92
    0xdbf313a5, 0x255140df, 0xcbed10e5, 0xe3f7fb00, 0xe0fbe7ee, 0x44bce5d0, 0xfe43244c, 0xa4d7f015,
    // 21, 20, -22, 9, -9, 5, 29, 47, 31, -36, -6, 42, -94, -58, 38, -27, 10, -10, 20, 11, 9, 11, 31, -16, 0, -98, 59, 3, -1, 25, -10, -73
    0x9ea1415, 0x2f1d05f7, 0x2afadc1f, 0xe526c6a2, 0xb14f60a, 0xf01f0b09, 0x33b9e00, 0xb7f619ff,
    // 5, -22, 0, -16, -35, 56, -53, 91, 17, -36, -39, 37, 53, -16, -8, 48, 71, -12, -21, -7, 40, 93, -13, 21, -31, 39, -8, -16, -6, 9, -21, -57
    0xf000ea05, 0x5bcb38dd, 0x25d9dc11, 0x30f8f035, 0xf9ebf447, 0x15f35d28, 0xf0f827e1, 0xc7eb09fa,
    // -35, 50, 53, 30, 96, 52, 48, 87, -12, -44, 69, 21, -37, -128, 34, -38, 13, 73, 22, -38, -5, -44, -36, 45, -51, -44, 7, -1, 22, 39, -6, 40
    0x1e3532dd, 0x57303460, 0x1545d4f4, 0xda2280db, 0xda16490d, 0x2ddcd4fb, 0xff07d4cd, 0x28fa2716,
    // 74, 57, 49, 89, -12, -66, -68, 2, -14, 36, 19, 32, 57, -9, 35, -14, 16, -20, 6, -5, -25, -9, -37, -4, -49, -45, -2, -77, 3, -19, 89, -7
    0x5931394a, 0x2bcbef4, 0x201324f2, 0xf223f739, 0xfb06ec10, 0xfcdbf7e7, 0xb3fed3cf, 0xf959ed03,
    // 4, -38, 11, 90, -4, -12, -27, -3, -18, 14, 2, 5, 2, -14, -8, 2, -34, 4, -16, -20, 11, 31, -24, -69, -91, -10, 49, 74, 41, -71, -3, 26
    0x5a0bda04, 0xfde5f4fc, 0x5020eee, 0x2f8f202, 0xecf004de, 0xbbe81f0b, 0x4a31f6a5, 0x1afdb929,
    // -66, -79, -18, 31, 3, 43, 36, -1, -7, 26, -6, -26, -29, -7, -19, -4, -66, 32, -6, -16, 39, 37, -82, 49, -65, 38, 91, -23, -13, -85, 30, -59
    0x1feeb1be, 0xff242b03, 0xe6fa1af9, 0xfcedf9e3, 0xf0fa20be, 0x31ae2527, 0xe95b26bf, 0xc51eabf3,
    // -51, -15, 6, -27, 49, -62, -58, -66, 18, -34, 38, -17, -61, 39, 27, 23, 9, 3, 25, -5, -33, 63, -17, 80, 7, -46, 0, 33, -1, -96, 6, -16
    0xe506f1cd, 0xbec6c231, 0xef26de12, 0x171b27c3, 0xfb190309, 0x50ef3fdf, 0x2100d207, 0xf006a0ff,
    // -17, 9, -24, 7, 96, -9, -12, 39, 58, -22, 30, -55, 52, -67, -21, 30, 9, -24, 34, -16, -11, 23, -5, 75, -40, -7, 105, 12, -2, 8, -12, 53
    0x7e809ef, 0x27f4f760, 0xc91eea3a, 0x1eebbd34, 0xf022e809, 0x4bfb17f5, 0xc69f9d8, 0x35f408fe,
    // -55, 27, 13, 7, 23, -5, -48, -19, 31, 6, -98, -2, 5, 18, -1, -49, 18, 1, 94, 9, 11, 61, 26, -17, 51, -28, -45, -36, -54, 21, -57, 70
    0x70d1bc9, 0xedd0fb17, 0xfe9e061f, 0xcfff1205, 0x95e0112, 0xef1a3d0b, 0xdcd3e433, 0x46c715ca,
    // -21, 1, 60, 5, 100, -16, 35, -9, -51, -26, -17, 23, -64, -23, 0, -24, 29, 16, -1, 12, -11, -9, 47, -24, 28, -24, -45, 36, -60, -89, 32, -45
    0x53c01eb, 0xf723f064, 0x17efe6cd, 0xe800e9c0, 0xcff101d, 0xe82ff7f5, 0x24d3e81c, 0xd320a7c4,
    // -14, -19, 44, 1, -4, -4, 26, 44, -12, 22, 64, 25, 48, 10, 31, 70, 26, 32, 20, 3, -31, 46, 6, -39, 28, 56, 48, -26, 3, -63, 55, -92
    0x12cedf2, 0x2c1afcfc, 0x194016f4, 0x461f0a30, 0x314201a, 0xd9062ee1, 0xe630381c, 0xa437c103,
};
static const uint embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords[16] = {
    // 0.05246, 0.01355, -0.074, -0.02338, 0.04578, -0.04907, 0.0771, 0.02121, -0.117, -0.01258, 0.0608, -0.01764, 0.003502, 0.03293, 0.03308, -0.1014
    0x22f02ab7, 0xa5fcacbc, 0xaa4829dc, 0x256e2cef, 0xa271af7d, 0xa4842bc8, 0x28371b2c, 0xae7d283c,
    // -0.12, -0.05182, -0.06604, 0.02142, -0.02663, 0.02762, -0.4185, 0.01224, 0.01874, 0.04678, -0.1176, -0.03482, 0.0537, -0.01336, -0.0632, 0.04306
    0xaaa2afae, 0x257cac3a, 0x2712a6d1, 0x2244b6b2, 0x29fd24cc, 0xa875af87, 0xa2d72ae0, 0x2983ac0b,
};
static const uint embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -7, -25, 49, 4, -8, 22, 1, 22, -58, -20, 7, 53, 63, 30, -37, -17, -89, -58, -46, -33, -17, 23, -25, -10, 17, -5, -69, -33, -31, 66, -4, -10
    0x431e7f9, 0x160116f8, 0x3507ecc6, 0xefdb1e3f, 0xdfd2c6a7, 0xf6e717ef, 0xdfbbfb11, 0xf6fc42e1,
    // -18, 2, -39, -17, -19, -42, 13, 2, 0, -12, 74, 0, 29, -63, 27, -14, 11, 10, -25, 20, -27, -49, 27, 59, 1, 8, 88, 5, 3, -29, 31, 17
    0xefd902ee, 0x20dd6ed, 0x4af400, 0xf21bc11d, 0x14e70a0b, 0x3b1bcfe5, 0x5580801, 0x111fe303,
    // 49, -31, -55, 43, -7, 11, 69, 40, 91, 67, -58, 52, -4, -93, -40, 1, 49, -2, 90, 25, 79, 54, -53, -96, 52, -25, -50, 43, -26, -5, -60, -16
    0x2bc9e131, 0x28450bf9, 0x34c6435b, 0x1d8a3fc, 0x195afe31, 0xa0cb364f, 0x2bcee734, 0xf0c4fbe6,
    // 27, -30, 15, 26, -11, 20, -1, 29, -15, -39, -14, 12, 23, 13, 11, -17, -12, -12, -45, 7, -30, -22, -36, -5, -12, 9, 98, 4, 49, 16, 43, 27
    0x1a0fe21b, 0x1dff14f5, 0xcf2d9f1, 0xef0b0d17, 0x7d3f4f4, 0xfbdceae2, 0x46209f4, 0x1b2b1031,
    // 80, -16, 54, -8, 13, 23, -12, -60, -39, -14, -39, -98, 28, 39, -128, -41, 3, 2, -18, 33, -24, -5, -14, 39, -96, 105, 38, 9, -46, 7, -52, -46
    0xf836f050, 0xc4f4170d, 0x9ed9f2d9, 0xd780271c, 0x21ee0203, 0x27f2fbe8, 0x92669a0, 0xd2cc07d2,
    // 12, 8, 7, -7, -17, 5, 9, -2, 35, -12, -5, -6, -6, -21, -5, 8, 34, -27, 47, -17, 29, -18, -8, 10, -7, -4, 8, -9, 7, 9, 20, -8
    0xf907080c, 0xfe0905ef, 0xfafbf423, 0x8fbebfa, 0xef2fe522, 0xaf8ee1d, 0xf708fcf9, 0xf8140907,
    // -40, -22, 29, -11, -6, 20, -20, 11, 42, 10, -11, -22, 5, -49, -22, 26, 48, 29, -32, 28, -28, 47, 5, -16, 17, -23, -60, -11, -59, 12, 70, 40
    0xf51dead8, 0xbec14fa, 0xeaf50a2a, 0x1aeacf05, 0x1ce01d30, 0xf0052fe4, 0xf5c4e911, 0x28460cc5,
    // -40, 74, -10, -8, -22, -44, -32, -27, 14, 5, -69, 33, -56, -34, -47, -3, 14, -2, -25, -91, -9, 20, -17, 6, -14, 47, 13, -60, -100, -25, -66, 10
    0xf8f64ad8, 0xe5e0d4ea, 0x21bb050e, 0xfdd1dec8, 0xa5e7fe0e, 0x6ef14f7, 0xc40d2ff2, 0xabee79c,
    // -9, 2, -72, 34, 7, 2, -44, 44, 18, -20, -12, 88, 92, 9, -7, 7, 35, -32, 46, -53, 31, -2, 21, 8, 32, 48, -23, -19, -5, 52, -54, -2
    0x22b802f7, 0x2cd40207, 0x58f4ec12, 0x7f9095c, 0xcb2ee023, 0x815fe1f, 0xede93020, 0xfeca34fb,
    // -54, 28, 60, 10, 32, 22, -4, -18, 2, 92, 27, 36, 37, 5, -17, 19, 21, 90, 10, 14, 7, 14, 0, 97, 50, 52, 81, 29, -88, 76, -4, 38
    0xa3c1cca, 0xeefc1620, 0x241b5c02, 0x13ef0525, 0xe0a5a15, 0x61000e07, 0x1d513432, 0x26fc4ca8,
    // 73, 97, 101, 6, 6, 86, 5, -27, -48, 44, -94, 27, 41, -51, -22, -47, -26, 20, -82, -17, -74, -83, -61, -63, 28, 46, -59, 45, 40, 59, 29, -93
    0x6656149, 0xe5055606, 0x1ba22cd0, 0xd1eacd29, 0xefae14e6, 0xc1c3adb6, 0x2dc52e1c, 0xa31d3b28,
    // 26, -46, -6, 51, 40, -51, 39, 68, -61, 84, -53, 47, -47, 16, 36, -73, -42, 27, -65, 65, -44, 56, 19, 25, 62, -11, -25, 39, -5, -57, -60, -93
    0x33fad21a, 0x4427cd28, 0x2fcb54c3, 0xb72410d1, 0x41bf1bd6, 0x191338d4, 0x27e7f53e, 0xa3c4c7fb,
    // 0, -5, 43, 23, -85, -35, 93, 39, 7, -5, 55, 58, 46, 0, 14, -15, -40, -83, -73, -52, -38, -14, 66, 83, 27, 19, -45, -10, 19, -8, -20, 22
    0x172bfb00, 0x275dddab, 0x3a37fb07, 0xf10e002e, 0xccb7add8, 0x5342f2da, 0xf6d3131b, 0x16ecf813,
    // 1, 3, -121, 7, 7, -15, -8, 16, -4, 0, 16, 19, -10, 40, -5, 17, 1, -26, 9, -10, -1, 6, 12, -26, 11, -5, -23, -5, -7, -11, -66, 22
    0x7870301, 0x10f8f107, 0x131000fc, 0x11fb28f6, 0xf609e601, 0xe60c06ff, 0xfbe9fb0b, 0x16bef5f9,
    // -65, 36, -28, 88, 33, -58, 8, 17, 26, 64, 62, 54, -92, -2, -50, 24, 3, 55, 12, 33, 25, -92, 19, -12, -9, -66, -70, 93, 13, -88, -35, 55
    0x58e424bf, 0x1108c621, 0x363e401a, 0x18cefea4, 0x210c3703, 0xf413a419, 0x5dbabef7, 0x37dda80d,
    // 9, 11, -83, -14, -40, -13, 49, 0, 0, -12, 9, -1, 30, 11, 17, 9, 39, -17, 47, 6, 26, -17, 12, 20, 12, -15, -19, -4, 12, 21, -28, 4
    0xf2ad0b09, 0x31f3d8, 0xff09f400, 0x9110b1e, 0x62fef27, 0x140cef1a, 0xfcedf10c, 0x4e4150c,
};
static const uint embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords[8] = {
    // 0.02301, -0.0711, -0.1621, -0.003483, 0.08746, -0.03702, 0.01634, 0.158, -0.06274, -0.1376, 0.0139, 0.02533, 0.01065, 0.004097, -0.05127, -0.0624
    0xac8d25e4, 0x9b22b130, 0xa8bd2d99, 0x310e242f, 0xb067ac04, 0x267c231e, 0x1c322174, 0xabfdaa90,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass2(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(3840, 2160, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(3840, 2160, 16), // threadGroupSliceSize
        uint3(3840, 2160, 16), // storageSize
        uint3(16, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        132710400, // threadGroupStorageByteOffset
        0.027550771832466125, storage_fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005887479055672884, storage_embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_1_body_conv_dw_bias = { embedded_encoder2_ResidualBlock_1_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_1_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_1_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005944373551756144, storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias = { embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005935767199844122, storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias = { embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias };
    
    // fused_quantized_NHWC_/encoder2/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_4 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_4 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 16);
    const uint3 groupSize_slice_4 = uint3(64, 1, 16);
    const uint3 storageSize_slice_4 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_4 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_4 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_4 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_4 = dot(groupStart_slice_4, tensorByteStrides_slice_4);
    const float quantizationScale_slice_4 = 0.030525196343660355;
    const RWBufferStorage storage_slice_4 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_4 = { logicalSize_slice_4, groupStart_slice_4, groupSize_slice_4, storageSize_slice_4, tensorByteStrides_slice_4, paddingBegin_slice_4, paddingEnd_slice_4, threadGroupByteOffsetInTensor_slice_4 + 0, quantizationScale_slice_4, storage_slice_4 };
    // ConvNextBlock (16, 2160, 3840), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,) -> (16, 2160, 3840)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    ConvNextBlock(29.826718543190584, 0.033526986837387085, 52.48575011421084, 0.019052790477871895, fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_1_body_conv_dw_bias, embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias, embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias, slice_4, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_2
#ifdef MLSR_PASS_2_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass2_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/encoder2/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_5 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_5 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_5 = uint3(32, 1, 16);
    const uint3 storageSize_slice_5 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_5 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_5 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_5 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_5 = dot(groupStart_slice_5, tensorByteStrides_slice_5);
    const float quantizationScale_slice_5 = 0.030525196343660355;
    const RWBufferStorage storage_slice_5 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_5 = { logicalSize_slice_5, groupStart_slice_5, groupSize_slice_5, storageSize_slice_5, tensorByteStrides_slice_5, paddingBegin_slice_5, paddingEnd_slice_5, threadGroupByteOffsetInTensor_slice_5 + 0, quantizationScale_slice_5, storage_slice_5 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_5, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_2_POST


#ifdef MLSR_PASS_3
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FusedConv2D_k2s2b_QuantizedOutput.hlsli"

static const uint embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 0, -11, 17, 3, -15, 19, 20, 1, 47, -4, -2, -4, -9, -39, 12, -16, 20, -5, 34, 12, -3, 24, 1, 1, 3, 11, 17, 7, 1, 17, 12, 33
    0x311f500, 0x11413f1, 0xfcfefc2f, 0xf00cd9f7, 0xc22fb14, 0x10118fd, 0x7110b03, 0x210c1101,
    // -25, 0, 7, -5, -10, 5, -4, -11, 39, 7, -1, -4, 3, 32, -2, -31, 18, -10, 17, 15, -12, 8, 16, 8, 1, 14, 7, 16, 30, -31, 27, 21
    0xfb0700e7, 0xf5fc05f6, 0xfcff0727, 0xe1fe2003, 0xf11f612, 0x81008f4, 0x10070e01, 0x151be11e,
    // 10, 12, -1, 1, -1, 30, -13, 9, 4, 14, 2, -5, -11, -17, 17, 17, -12, 10, 39, 9, 5, 88, -25, 2, 13, 11, -5, 5, -12, 6, 14, 59
    0x1ff0c0a, 0x9f31eff, 0xfb020e04, 0x1111eff5, 0x9270af4, 0x2e75805, 0x5fb0b0d, 0x3b0e06f4,
    // -3, -4, -42, -17, 2, -58, 14, 13, -6, -5, 4, -18, 6, -2, 8, -49, -12, -8, -7, -23, 0, -44, 7, 16, -15, -5, -6, -9, 4, 6, 9, -3
    0xefd6fcfd, 0xd0ec602, 0xee04fbfa, 0xcf08fe06, 0xe9f9f8f4, 0x1007d400, 0xf7fafbf1, 0xfd090604,
    // 11, -6, 36, 5, -5, 23, -2, 13, -1, 7, -17, -8, 19, -11, 7, 23, 3, 3, 22, -4, -16, -37, -12, 15, 23, 17, -29, -4, 18, -21, 13, -4
    0x524fa0b, 0xdfe17fb, 0xf8ef07ff, 0x1707f513, 0xfc160303, 0xff4dbf0, 0xfce31117, 0xfc0deb12,
    // -1, 6, 5, -24, -2, -19, -22, 10, 16, -21, -2, 5, 14, -4, 1, 6, -16, 9, -7, -31, -2, -64, -40, -2, 39, -13, -5, 3, 11, 21, 1, -14
    0xe80506ff, 0xaeaedfe, 0x5feeb10, 0x601fc0e, 0xe1f909f0, 0xfed8c0fe, 0x3fbf327, 0xf201150b,
    // 35, 8, -13, 45, 1, -4, 40, -2, -33, 0, 43, 21, 23, 1, -1, -29, -23, 19, 6, -16, 9, -2, -5, 9, 3, -24, -3, -22, 2, 6, -18, -4
    0x2df30823, 0xfe28fc01, 0x152b00df, 0xe3ff0117, 0xf00613e9, 0x9fbfe09, 0xeafde803, 0xfcee0602,
    // 31, 6, 6, 43, -11, -7, 43, -4, -8, 11, 29, 5, 21, -16, 3, -38, -35, 7, 22, -18, 1, 11, 2, 2, 26, -6, -15, -35, 5, 6, -12, -14
    0x2b06061f, 0xfc2bf9f5, 0x51d0bf8, 0xda03f015, 0xee1607dd, 0x2020b01, 0xddf1fa1a, 0xf2f40605,
    // 18, -16, 17, 1, 5, 8, -1, 4, -29, -9, 14, 15, -24, 19, 15, 51, 3, -19, 6, -12, 3, -14, -1, 4, 2, -15, 3, 7, -28, -16, 11, 37
    0x111f012, 0x4ff0805, 0xf0ef7e3, 0x330f13e8, 0xf406ed03, 0x4fff203, 0x703f102, 0x250bf0e4,
    // 27, -21, 14, 5, 0, -3, 12, 3, -26, -6, 16, 9, -18, 5, 20, 51, -6, -14, 5, -17, 6, -16, -11, -2, -2, -12, 3, 2, -29, 34, 5, 27
    0x50eeb1b, 0x30cfd00, 0x910fae6, 0x331405ee, 0xef05f2fa, 0xfef5f006, 0x203f4fe, 0x1b0522e3,
    // 29, -24, -8, 18, -2, -12, 12, -3, -9, 3, 23, 19, -10, 14, 11, 33, 28, 9, -3, 28, -6, 4, 25, 3, -26, 14, 29, 13, 32, -20, 14, -24
    0x12f8e81d, 0xfd0cf4fe, 0x131703f7, 0x210b0ef6, 0x1cfd091c, 0x31904fa, 0xd1d0ee6, 0xe80eec20,
    // -12, -13, -5, -25, 1, -12, -20, 8, 20, -26, -14, -9, -15, 15, -4, 18, -23, 19, 7, -13, -2, 12, -5, 16, 2, -8, -16, -18, 26, -4, -8, -54
    0xe7fbf3f4, 0x8ecf401, 0xf7f2e614, 0x12fc0ff1, 0xf30713e9, 0x10fb0cfe, 0xeef0f802, 0xcaf8fc1a,
    // 16, -11, -10, 40, 3, 18, 47, 9, -27, 20, 13, -20, 18, 2, -5, -8, 13, -9, 3, 39, -3, 20, 26, -10, -6, 32, 8, -9, 15, -3, -11, -24
    0x28f6f510, 0x92f1203, 0xec0d14e5, 0xf8fb0212, 0x2703f70d, 0xf61a14fd, 0xf70820fa, 0xe8f5fd0f,
    // 9, 1, -19, 20, 3, -6, 15, -13, 6, 12, 33, -4, -6, 7, -1, -17, 6, 8, -9, 14, 3, -1, -5, -32, 22, 17, 29, 5, -12, 22, -9, -24
    0x14ed0109, 0xf30ffa03, 0xfc210c06, 0xefff07fa, 0xef70806, 0xe0fbff03, 0x51d1116, 0xe8f716f4,
    // -5, 14, -49, 8, 1, -34, 29, 4, -8, 3, 19, -1, 13, -16, 2, -63, 3, 13, -27, 3, 4, -55, 5, 14, -29, -16, 8, -3, 13, -17, 2, -29
    0x8cf0efb, 0x41dde01, 0xff1303f8, 0xc102f00d, 0x3e50d03, 0xe05c904, 0xfd08f0e3, 0xe302ef0d,
    // -7, 7, 26, -5, -1, 29, -17, -4, -2, 19, 4, 11, -5, 9, 31, 40, -26, 1, 48, -15, 7, 8, -28, -4, -10, 2, -3, 11, -7, 37, 13, 62
    0xfb1a07f9, 0xfcef1dff, 0xb0413fe, 0x281f09fb, 0xf13001e6, 0xfce40807, 0xbfd02f6, 0x3e0d25f9,
    // 18, 7, -5, 44, 8, 57, 6, 8, -49, 22, 3, 0, 29, 2, -10, 31, 14, 8, -1, 51, 10, 86, 11, 12, -58, 25, 1, -10, 32, 12, -14, 42
    0x2cfb0712, 0x8063908, 0x316cf, 0x1ff6021d, 0x33ff080e, 0xc0b560a, 0xf60119c6, 0x2af20c20,
    // 16, 6, 0, 28, 6, 41, 3, 1, -33, 19, 4, 2, 9, 4, -8, 21, 17, 3, -1, 35, 8, 76, 19, 5, -43, 24, 3, -8, 17, -6, -7, 37
    0x1c000610, 0x1032906, 0x20413df, 0x15f80409, 0x23ff0311, 0x5134c08, 0xf80318d5, 0x25f9fa11,
    // -18, -9, -4, -9, 7, 17, 15, 14, -31, 0, -9, -10, 1, 6, 13, 43, 4, -15, -26, 8, 10, -15, 27, 23, -63, -26, 4, -15, -1, 2, -8, 12
    0xf7fcf7ee, 0xe0f1107, 0xf6f700e1, 0x2b0d0601, 0x8e6f104, 0x171bf10a, 0xf104e6c1, 0xcf802ff,
    // -28, 16, 13, -17, -3, 20, -11, -19, 30, 30, -5, 5, -10, 18, 17, -10, -6, 4, -14, 0, -3, -29, 3, -4, -7, 2, 7, -3, 0, -14, 1, -45
    0xef0d10e4, 0xedf514fd, 0x5fb1e1e, 0xf61112f6, 0xf204fa, 0xfc03e3fd, 0xfd0702f9, 0xd301f200,
    // -16, 26, 32, 10, 13, 53, -23, -2, -21, -13, 10, 0, 9, 17, -12, 14, 1, 13, -23, 17, -1, -21, 14, -6, 13, 13, 23, 8, 13, -4, 6, -43
    0xa201af0, 0xfee9350d, 0xaf3eb, 0xef41109, 0x11e90d01, 0xfa0eebff, 0x8170d0d, 0xd506fc0d,
    // -9, 1, 41, 25, 1, 34, 10, 19, -29, 2, -16, -16, 4, -2, -6, 11, -2, -5, -17, 11, -5, -38, 15, -6, 9, 28, 10, -7, -4, 8, 9, -35
    0x192901f7, 0x130a2201, 0xf0f002e3, 0xbfafe04, 0xbeffbfe, 0xfa0fdafb, 0xf90a1c09, 0xdd0908fc,
    // -21, -15, 3, -28, 0, -20, 8, -5, 40, -11, -5, -14, -19, -8, 13, 17, -42, -7, -7, -50, -8, -44, 0, -15, 61, 0, -5, -17, -26, 15, 13, -24
    0xe403f1eb, 0xfb08ec00, 0xf2fbf528, 0x110df8ed, 0xcef9f9d6, 0xf100d4f8, 0xeffb003d, 0xe80d0fe6,
    // 31, 9, -11, 46, 13, 51, 19, 7, -59, 6, 29, -7, 28, 13, -8, 32, 23, 20, -16, 41, 2, 15, 10, 6, -31, 8, 18, -5, 28, -26, 1, -9
    0x2ef5091f, 0x713330d, 0xf91d06c5, 0x20f80d1c, 0x29f01417, 0x60a0f02, 0xfb1208e1, 0xf701e61c,
    // -18, -11, 0, -11, 4, 59, 0, 0, 21, -9, -7, -13, -27, -33, -8, 0, -16, 14, -29, -1, 5, 26, 11, 16, -12, 5, -9, -21, 12, -15, -6, -13
    0xf500f5ee, 0x3b04, 0xf3f9f715, 0xf8dfe5, 0xffe30ef0, 0x100b1a05, 0xebf705f4, 0xf3faf10c,
    // -16, -24, 6, -11, 1, 7, -11, -17, 14, -1, 16, 3, -37, 27, 3, 3, 2, -9, -18, -3, 3, -21, 11, 0, -8, 8, 14, -5, 9, -14, 13, -4
    0xf506e8f0, 0xeff50701, 0x310ff0e, 0x3031bdb, 0xfdeef702, 0xbeb03, 0xfb0e08f8, 0xfc0df209,
    // 27, -9, -24, 43, -4, -34, 36, 16, -42, -9, 23, 1, 38, -23, -7, -43, 37, -29, -6, 25, -12, -36, 20, 3, 1, 19, 19, 15, -4, -27, 21, 18
    0x2be8f71b, 0x1024defc, 0x117f7d6, 0xd5f9e926, 0x19fae325, 0x314dcf4, 0xf131301, 0x1215e5fc,
    // -21, -4, -8, 3, 0, 3, -10, 20, -1, -16, -18, -17, 13, 14, -19, -20, -32, -23, 0, -31, -2, 45, -20, -10, 57, 6, -17, 1, -32, 29, 13, 52
    0x3f8fceb, 0x14f60300, 0xefeef0ff, 0xeced0e0d, 0xe100e9e0, 0xf6ec2dfe, 0x1ef0639, 0x340d1de0,
    // -32, 5, 8, -31, -14, -47, -8, -26, 49, 31, -2, 19, 0, 17, 27, -37, 32, -17, -11, 34, -1, -11, 3, 5, -37, 4, 12, 7, 19, -11, -5, -3
    0xe10805e0, 0xe6f8d1f2, 0x13fe1f31, 0xdb1b1100, 0x22f5ef20, 0x503f5ff, 0x70c04db, 0xfdfbf513,
    // -19, 7, 4, -20, -5, 1, -15, 1, 32, 3, -11, 2, -16, -11, 16, -1, 25, -14, -9, 24, 11, 61, -3, 15, -44, -20, 1, -17, -2, 21, -28, 28
    0xec0407ed, 0x1f101fb, 0x2f50320, 0xff10f5f0, 0x18f7f219, 0xffd3d0b, 0xef01ecd4, 0x1ce415fe,
    // -7, 19, 23, 5, 3, 40, 29, 6, 4, -18, 4, -38, -3, -12, -23, -26, 26, 12, 20, 38, 5, 10, 34, 7, -13, -20, 26, -18, 8, -11, -27, -28
    0x51713f9, 0x61d2803, 0xda04ee04, 0xe6e9f4fd, 0x26140c1a, 0x7220a05, 0xee1aecf3, 0xe4e5f508,
    // -18, 9, 13, 8, 1, 44, 9, 14, -5, -20, -4, -35, 7, -19, -21, -19, 13, 3, 9, 41, 4, 6, 21, 11, -30, -22, 24, -13, 15, -5, -29, -22
    0x80d09ee, 0xe092c01, 0xddfcecfb, 0xedebed07, 0x2909030d, 0xb150604, 0xf318eae2, 0xeae3fb0f,
    // 3, 25, 7, 39, 8, 4, -17, -37, -15, 74, -8, 16, 9, -9, 1, 11, -23, -20, 3, -30, 7, -11, 22, -13, -16, 10, 19, -23, -37, 2, 5, -6
    0x27071903, 0xdbef0408, 0x10f84af1, 0xb01f709, 0xe203ece9, 0xf316f507, 0xe9130af0, 0xfa0502db,
    // -36, 26, -11, 0, 20, 2, -7, -31, -41, 22, 7, 19, -6, 17, -15, 6, -41, -31, -9, -33, 15, -29, 18, 8, -16, -43, 25, -31, -43, -18, 9, -3
    0xf51adc, 0xe1f90214, 0x130716d7, 0x6f111fa, 0xdff7e1d7, 0x812e30f, 0xe119d5f0, 0xfd09eed5,
    // 19, 21, -21, -2, 4, -20, 5, 18, -27, -5, -1, 11, 31, 29, 4, 17, 9, 0, -25, -1, -2, -90, 6, 23, -17, -26, -1, 19, 26, 26, 2, -2
    0xfeeb1513, 0x1205ec04, 0xbfffbe5, 0x11041d1f, 0xffe70009, 0x1706a6fe, 0x13ffe6ef, 0xfe021a1a,
    // 14, 9, -24, -31, 5, -67, 15, 28, -21, -31, -9, 5, 35, 5, 7, 15, 8, -5, -31, -21, 3, -128, 3, 26, -24, -46, 0, 11, 26, 42, -4, -1
    0xe1e8090e, 0x1c0fbd05, 0x5f7e1eb, 0xf070523, 0xebe1fb08, 0x1a038003, 0xb00d2e8, 0xfffc2a1a,
    // -5, 22, -28, -9, -6, -80, -14, 18, 67, -10, -38, -15, 37, -10, -13, -5, 29, -1, 18, 18, -16, 45, 35, 13, 49, 2, 9, -8, 34, -20, 10, 30
    0xf7e416fb, 0x12f2b0fa, 0xf1daf643, 0xfbf3f625, 0x1212ff1d, 0xd232df0, 0xf8090231, 0x1e0aec22,
    // 10, 2, -23, -3, -9, -69, -2, 1, 63, -14, -3, -3, 29, -2, -16, -22, 43, -19, 34, 44, -14, 44, 34, 6, 32, 11, 30, -10, 18, 13, 9, 18
    0xfde9020a, 0x1febbf7, 0xfdfdf23f, 0xeaf0fe1d, 0x2c22ed2b, 0x6222cf2, 0xf61e0b20, 0x12090d12,
    // 15, -31, -25, 29, -2, 66, -2, 12, -26, 10, -7, 16, 0, -22, 5, 24, 9, -30, -11, 12, 1, 57, 3, 1, -21, -4, 11, 25, -4, 1, 5, 11
    0x1de7e10f, 0xcfe42fe, 0x10f90ae6, 0x1805ea00, 0xcf5e209, 0x1033901, 0x190bfceb, 0xb0501fc,
    // 21, -36, -9, 22, -2, 101, -14, 1, -35, 9, 1, 20, -14, 33, 1, 12, 17, -41, 1, 25, -8, 71, 4, -1, -18, 8, 11, 22, -8, -16, 14, 1
    0x16f7dc15, 0x1f265fe, 0x140109dd, 0xc0121f2, 0x1901d711, 0xff0447f8, 0x160b08ee, 0x10ef0f8,
    // -41, -11, -27, -42, 19, -33, -10, 1, -22, -20, -21, -42, -13, -40, -25, 8, -36, -7, -32, -34, 15, -16, 10, 9, -10, -28, -21, -36, -12, -63, -16, 17
    0xd6e5f5d7, 0x1f6df13, 0xd6ebecea, 0x8e7d8f3, 0xdee0f9dc, 0x90af00f, 0xdcebe4f6, 0x11f0c1f4,
    // -28, -21, -18, -38, 15, -27, -26, -2, -26, -14, -20, -32, -15, -33, -20, 2, -22, -13, -23, -36, 15, -6, -12, 0, -16, -14, -19, -33, -17, -49, -16, 8
    0xdaeeebe4, 0xfee6e50f, 0xe0ecf2e6, 0x2ecdff1, 0xdce9f3ea, 0xf4fa0f, 0xdfedf2f0, 0x8f0cfef,
    // -37, 3, -24, -7, 5, 114, 12, 20, -3, -7, -21, -18, 11, 11, -14, -3, -33, -3, -17, -8, 1, 57, 0, 8, 11, -17, -19, -1, 7, 18, -17, -24
    0xf9e803db, 0x140c7205, 0xeeebf9fd, 0xfdf20b0b, 0xf8effddf, 0x8003901, 0xffedef0b, 0xe8ef1207,
    // -35, 4, -33, -8, 10, 93, 14, 31, -21, -19, -25, -22, 13, 14, -17, -11, -33, -1, -27, -7, 3, 40, 4, 19, -5, -26, -22, -2, 6, 24, -19, -21
    0xf8df04dd, 0x1f0e5d0a, 0xeae7edeb, 0xf5ef0e0d, 0xf9e5ffdf, 0x13042803, 0xfeeae6fb, 0xebed1806,
    // -10, 25, -31, -8, 12, 10, -9, 23, -55, -13, -28, -1, -2, 20, -4, 7, -1, 14, 9, -14, 0, 19, -15, 1, -35, 2, -9, 24, -24, 36, 17, -11
    0xf8e119f6, 0x17f70a0c, 0xffe4f3c9, 0x7fc14fe, 0xf2090eff, 0x1f11300, 0x18f702dd, 0xf51124e8,
    // -12, 27, -25, -21, 10, -4, 2, 17, -38, -31, -13, 5, -11, 8, -1, -6, 5, 26, 15, -7, -3, -1, -7, 4, -21, -13, 5, 27, -33, 2, 23, -5
    0xebe71bf4, 0x1102fc0a, 0x5f3e1da, 0xfaff08f5, 0xf90f1a05, 0x4f9fffd, 0x1b05f3eb, 0xfb1702df,
    // -9, 1, 26, -19, 13, -97, -45, 8, -39, -27, 0, -22, -17, 16, -20, -17, -10, 6, 40, -15, 13, -8, -35, 5, -39, -14, 2, -30, -3, 19, -20, -5
    0xed1a01f7, 0x8d39f0d, 0xea00e5d9, 0xefec10ef, 0xf12806f6, 0x5ddf80d, 0xe202f2d9, 0xfbec13fd,
    // -21, 10, 30, -13, 11, -67, -26, 13, -15, -35, -2, -31, -11, -2, -24, -13, -7, 14, 51, 10, 16, 40, -21, 12, -37, -12, 2, -34, -12, 37, -28, 11
    0xf31e0aeb, 0xde6bd0b, 0xe1feddf1, 0xf3e8fef5, 0xa330ef9, 0xceb2810, 0xde02f4db, 0xbe425f4,
    // 31, 15, -9, 16, 9, -6, -13, -7, -15, 19, 6, -27, -5, -17, -24, -2, 47, 2, -15, 22, -4, -4, 18, -11, 2, 18, 11, -15, 8, -69, -5, -12
    0x10f70f1f, 0xf9f3fa09, 0xe50613f1, 0xfee8effb, 0x16f1022f, 0xf512fcfc, 0xf10b1202, 0xf4fbbb08,
    // 23, 8, -27, 23, 10, 12, 18, 2, -17, 7, 7, -34, 16, -50, -23, -1, 19, 12, -19, 19, 15, 28, 5, -20, -18, 16, 18, -29, 4, 22, -40, -13
    0x17e50817, 0x2120c0a, 0xde0707ef, 0xffe9ce10, 0x13ed0c13, 0xec051c0f, 0xe31210ee, 0xf3d81604,
    // -10, -20, 8, -11, -3, -66, -1, 12, -57, -15, 7, 24, 25, -33, 23, -19, -21, -22, 10, -11, -8, -56, -8, 12, -37, -13, -4, 27, 15, -33, 23, -24
    0xf508ecf6, 0xcffbefd, 0x1807f1c7, 0xed17df19, 0xf50aeaeb, 0xcf8c8f8, 0x1bfcf3db, 0xe817df0f,
    // -23, -32, 10, -16, -6, -70, 4, 9, -56, -11, 6, 21, 26, -25, 26, -26, -18, -23, 15, -17, -6, -60, -14, 3, -38, -5, -1, 20, 7, -24, 18, -26
    0xf00ae0e9, 0x904bafa, 0x1506f5c8, 0xe61ae71a, 0xef0fe9ee, 0x3f2c4fa, 0x14fffbda, 0xe612e807,
    // -28, 5, 7, -12, -2, 23, 3, -4, -37, 1, -11, 48, -21, 27, 23, -26, -33, 4, -7, -18, -7, 92, 31, 11, -29, 14, -18, 34, 1, -16, 41, 9
    0xf40705e4, 0xfc0317fe, 0x30f501db, 0xe6171beb, 0xeef904df, 0xb1f5cf9, 0x22ee0ee3, 0x929f001,
    // -31, 14, -10, -11, -11, 20, 6, 2, -31, -2, -11, 58, -2, -24, 37, -11, -37, 23, -11, -25, 7, 104, 5, -2, -39, 15, -10, 44, 0, 31, 33, 19
    0xf5f60ee1, 0x20614f5, 0x3af5fee1, 0xf525e8fe, 0xe7f517db, 0xfe056807, 0x2cf60fd9, 0x13211f00,
    // 4, -7, 6, 10, -1, 20, 67, 14, 29, -44, 22, -1, -22, 19, 2, 29, 5, -1, 3, 11, -2, 19, 50, 17, 32, -24, 14, 1, -13, 16, 7, 33
    0xa06f904, 0xe4314ff, 0xff16d41d, 0x1d0213ea, 0xb03ff05, 0x113213fe, 0x10ee820, 0x210710f3,
    // 9, -7, -3, -5, -10, -9, 54, 20, 42, -56, 11, -1, -23, -29, 14, 35, 20, 5, -7, -3, -3, -5, 47, 18, 34, -40, 13, 5, -17, -21, 16, 39
    0xfbfdf909, 0x1436f7f6, 0xff0bc82a, 0x230ee3e9, 0xfdf90514, 0x122ffbfd, 0x50dd822, 0x2710ebef,
    // -5, 37, 9, -2, 0, 34, 6, -8, -4, 23, -3, 2, 3, -56, 20, 28, -15, 41, 19, 2, 11, -17, -7, -16, -23, -4, 0, 3, 1, -4, -7, 7
    0xfe0925fb, 0xf8062200, 0x2fd17fc, 0x1c14c803, 0x21329f1, 0xf0f9ef0b, 0x300fce9, 0x7f9fc01,
    // -21, 26, 17, -9, 15, 25, 6, 1, -25, 16, -11, -11, 0, -24, 3, 23, -21, 16, 21, 8, 5, -26, 11, 12, -28, -17, -17, -10, 4, -46, -9, 15
    0xf7111aeb, 0x106190f, 0xf5f510e7, 0x1703e800, 0x81510eb, 0xc0be605, 0xf6efefe4, 0xff7d204,
    // -3, 16, -4, -10, -8, 72, -6, 5, 16, 14, -8, 8, 6, -22, 18, 18, 0, -11, 14, 10, -8, -16, 5, -8, 20, -23, 14, 45, -16, -13, 11, -19
    0xf6fc10fd, 0x5fa48f8, 0x8f80e10, 0x1212ea06, 0xa0ef500, 0xf805f0f8, 0x2d0ee914, 0xed0bf3f0,
    // -1, -11, 18, -7, -6, 88, 27, 10, 13, 6, -9, -9, 3, -30, 21, -3, 1, -25, 34, 26, -14, -14, -2, -5, 9, -16, 16, 20, -20, 23, -8, -38
    0xf912f5ff, 0xa1b58fa, 0xf7f7060d, 0xfd15e203, 0x1a22e701, 0xfbfef2f2, 0x1410f009, 0xdaf817ec,
    // 3, -16, -7, 0, 0, 1, 20, 6, -31, -24, 18, -3, -29, -27, -4, -53, 3, -3, 2, 15, 5, 14, 4, 3, -57, 4, 17, 11, 1, 4, 1, -21
    0xf9f003, 0x6140100, 0xfd12e8e1, 0xcbfce5e3, 0xf02fd03, 0x3040e05, 0xb1104c7, 0xeb010401,
    // -11, 2, -21, -15, 8, -2, -14, 14, -46, -34, 6, 0, -31, -6, -12, -47, -10, -1, -16, 10, 8, 25, 10, 12, -59, -8, 5, 9, 7, -18, 2, -12
    0xf1eb02f5, 0xef2fe08, 0x6ded2, 0xd1f4fae1, 0xaf0fff6, 0xc0a1908, 0x905f8c5, 0xf402ee07,
    // -63, 6, -13, -41, 16, -45, 2, -30, -8, 15, -5, -18, -31, 21, -6, -3, -28, 6, 15, 6, 15, -36, 10, -46, -36, 39, 21, 30, -2, 12, 16, 35
    0xd7f306c1, 0xe202d310, 0xeefb0ff8, 0xfdfa15e1, 0x60f06e4, 0xd20adc0f, 0x1e1527dc, 0x23100cfe,
    // -54, -7, -11, -43, 12, -69, 2, -23, -12, 8, -8, -21, -20, -9, 5, 9, -29, 4, 13, 0, 10, -54, 12, -43, -43, 44, 12, 21, 5, 15, 11, 36
    0xd5f5f9ca, 0xe902bb0c, 0xebf808f4, 0x905f7ec, 0xd04e3, 0xd50cca0a, 0x150c2cd5, 0x240b0f05,
};
static const uint embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias_dwords[16] = {
    // 0.01976, -0.014275, -0.03296, 0.0377, -0.01733, 0.00898, 0.05667, 0.005222, 0.02666, -0.002693, 0.02693, 0.00719, -0.01721, -0.007244, -0.012665, 0.01816
    0xa34f250f, 0x28d3a838, 0x2099a470, 0x1d592b41, 0x998426d3, 0x1f5d26e5, 0x9f6ba468, 0x24a6a27c,
    // 0.01947, 0.05936, -0.002516, 0.0599, -0.03577, -0.1436, 0.01138, 0.00443, -0.0535, 0.01573, 0.02188, -0.006638, -0.01012, 0.01558, -0.07666, 0.004787
    0x2b9924fc, 0x2bab9927, 0xb098a894, 0x1c8921d4, 0x2407aad9, 0x9ecc259a, 0x23faa12e, 0x1ce7ace8,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass3(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(3840, 2160, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(3840, 2160, 16), // threadGroupSliceSize
        uint3(3840, 2160, 16), // storageSize
        uint3(16, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.030525196343660355, storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<512> storage_embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 16, 32), // threadGroupSliceSize
        uint4(2, 2, 16, 32), // storageSize
        uint4(16, 32, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0038311320822685957, storage_embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias = { embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias };
    
    // Fusedquantized_/encoder2/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_6 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_6 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_6 = uint3(64, 1, 32);
    const uint3 storageSize_slice_6 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_6 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_6 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_6 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_6 = dot(groupStart_slice_6, tensorByteStrides_slice_6);
    const RWBufferStorage storage_slice_6 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_6 = { logicalSize_slice_6, groupStart_slice_6, groupSize_slice_6, storageSize_slice_6, tensorByteStrides_slice_6, paddingBegin_slice_6, paddingEnd_slice_6, threadGroupByteOffsetInTensor_slice_6 + 132710400, storage_slice_6 };
    // Fusedquantized_/encoder2/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs (16, 2160, 3840), (32, 16, 2, 2), (32,) -> (32, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FusedConv2D_k2s2b_QuantizedOutput(0.016891753301024437, 0.02134803496301174, fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias, slice_6, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_3
#ifdef MLSR_PASS_3_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass3_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // Fusedquantized_/encoder2/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_7 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_7 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_7 = uint3(32, 1, 32);
    const uint3 storageSize_slice_7 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_7 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_7 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_7 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_7 = dot(groupStart_slice_7, tensorByteStrides_slice_7);
    const RWBufferStorage storage_slice_7 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_7 = { logicalSize_slice_7, groupStart_slice_7, groupSize_slice_7, storageSize_slice_7, tensorByteStrides_slice_7, paddingBegin_slice_7, paddingEnd_slice_7, threadGroupByteOffsetInTensor_slice_7 + 132710400, storage_slice_7 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_7, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_3_POST


#ifdef MLSR_PASS_4
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 3, 4, -2, -3, 14, -11, -7, 6, 5, -1, -7, -1, 9, 16, 12, -4, -16, -17, 16, -4, 4, 15, 1, 18, 11, -3, -11, 5, -1, 16, 17, -6
    0xfdfe0403, 0x6f9f50e, 0xfff9ff05, 0xfc0c1009, 0xfc10eff0, 0x12010f04, 0x5f5fd0b, 0xfa1110ff,
    // 7, 8, -20, -9, 2, -5, 10, -8, -14, 2, -1, -9, 19, 8, 5, -4, -3, -2, -5, 13, -6, 33, -25, 2, 43, 20, -14, 27, -2, -4, -17, 8
    0xf7ec0807, 0xf80afb02, 0xf7ff02f2, 0xfc050813, 0xdfbfefd, 0x2e721fa, 0x1bf2142b, 0x8effcfe,
    // 2, -88, 10, 52, -9, -13, 52, 69, -30, 18, 52, -82, -49, 59, -1, -3, 3, 5, -2, -54, -2, 11, -19, -13, -34, 20, -30, 18, 38, -14, -15, 0
    0x340aa802, 0x4534f3f7, 0xae3412e2, 0xfdff3bcf, 0xcafe0503, 0xf3ed0bfe, 0x12e214de, 0xf1f226,
    // 3, -6, 3, -6, 0, 0, -7, 17, 21, 6, -7, -15, 15, 15, -1, 0, -3, -7, 20, -16, -8, -39, -20, -11, 24, 18, -17, -19, 8, -8, -16, 21
    0xfa03fa03, 0x11f90000, 0xf1f90615, 0xff0f0f, 0xf014f9fd, 0xf5ecd9f8, 0xedef1218, 0x15f0f808,
    // 0, 7, -11, -3, -7, -15, 4, 13, -8, -7, 2, -1, 5, -6, 5, -1, -7, 3, -14, -3, 5, -9, 21, -8, -5, 4, 9, 3, 11, -3, 6, -3
    0xfdf50700, 0xd04f1f9, 0xff02f9f8, 0xff05fa05, 0xfdf203f9, 0xf815f705, 0x30904fb, 0xfd06fd0b,
    // -9, 1, -14, 19, 12, -45, 4, -7, 7, -11, -7, -12, 1, 9, 10, 0, 3, 5, -15, -4, 15, -18, 16, -4, 1, -6, -4, 4, 11, -2, 16, -4
    0x13f201f7, 0xf904d30c, 0xf4f9f507, 0xa0901, 0xfcf10503, 0xfc10ee0f, 0x4fcfa01, 0xfc10fe0b,
    // -15, -7, -6, 14, -32, 54, 19, -8, -25, 21, 16, 12, -6, -5, -10, 14, 64, 26, 14, -13, -28, -77, -80, 20, -14, 6, -54, 1, -16, 13, 94, 20
    0xefaf9f1, 0xf81336e0, 0xc1015e7, 0xef6fbfa, 0xf30e1a40, 0x14b0b3e4, 0x1ca06f2, 0x145e0df0,
    // -8, -5, -11, 15, 38, 31, 12, -7, 22, 11, -17, 20, 0, 26, -15, -7, 1, 5, 6, -6, 0, 2, 6, 6, 0, -17, 7, 3, 6, -8, 11, 0
    0xff5fbf8, 0xf90c1f26, 0x14ef0b16, 0xf9f11a00, 0xfa060501, 0x6060200, 0x307ef00, 0xbf806,
    // -9, -6, -3, 37, -3, -30, 11, 5, 17, -6, 0, -20, -5, 13, 11, -1, 4, 3, 1, 5, 6, -12, 9, -5, 2, -3, -3, -6, -8, -1, 15, -3
    0x25fdfaf7, 0x50be2fd, 0xec00fa11, 0xff0b0dfb, 0x5010304, 0xfb09f406, 0xfafdfd02, 0xfd0ffff8,
    // 6, -1, -1, 6, 11, 8, 4, -4, 20, -6, 6, 15, -4, -11, 18, -5, -5, 9, -5, 21, -12, 20, 18, -14, -11, -3, -6, 12, -9, 7, 1, 5
    0x6ffff06, 0xfc04080b, 0xf06fa14, 0xfb12f5fc, 0x15fb09fb, 0xf21214f4, 0xcfafdf5, 0x50107f7,
    // 6, 3, -14, 11, -9, 3, 16, -12, -10, 0, -2, 0, 3, 1, -6, -6, -19, 8, -1, 37, 25, -41, -9, -22, 29, 8, 0, 11, 43, 33, 72, 7
    0xbf20306, 0xf41003f7, 0xfe00f6, 0xfafa0103, 0x25ff08ed, 0xeaf7d719, 0xb00081d, 0x748212b,
    // -65, -10, 35, 33, 6, 51, -47, 41, 8, -32, -40, 44, -42, 14, -41, -13, 29, 12, -24, 3, -46, -21, 16, -17, -50, -6, 15, -10, 20, -16, 15, 12
    0x2123f6bf, 0x29d13306, 0x2cd8e008, 0xf3d70ed6, 0x3e80c1d, 0xef10ebd2, 0xf60fface, 0xc0ff014,
    // 15, -8, -10, 2, 18, -4, -6, -4, 20, 3, 5, -1, 9, 2, 9, -1, 15, -9, -3, 16, 11, -5, 6, -9, 10, 13, -18, -13, -7, -15, -18, -3
    0x2f6f80f, 0xfcfafc12, 0xff050314, 0xff090209, 0x10fdf70f, 0xf706fb0b, 0xf3ee0d0a, 0xfdeef1f9,
    // 13, -9, -11, 9, 6, -2, 7, -1, -9, -19, 8, 1, -5, 2, 5, -10, -3, 3, 5, 21, -4, 12, -6, -2, -15, 7, -4, -10, 0, -2, -4, 4
    0x9f5f70d, 0xff07fe06, 0x108edf7, 0xf60502fb, 0x150503fd, 0xfefa0cfc, 0xf6fc07f1, 0x4fcfe00,
    // -11, -8, -6, 17, -10, -4, -2, -10, 3, 26, -8, -2, 2, -3, 0, -7, 4, 2, 4, 10, 0, 4, 0, 4, -8, 6, -1, -2, -4, -5, 0, 4
    0x11faf8f5, 0xf6fefcf6, 0xfef81a03, 0xf900fd02, 0xa040204, 0x4000400, 0xfeff06f8, 0x400fbfc,
    // -44, 10, 5, -13, 8, -41, -8, -8, -26, 4, -4, -5, -7, 18, 3, 3, -7, -19, -31, 24, 12, 42, 33, 55, 41, 46, -34, -45, 48, -66, 104, -27
    0xf3050ad4, 0xf8f8d708, 0xfbfc04e6, 0x30312f9, 0x18e1edf9, 0x37212a0c, 0xd3de2e29, 0xe568be30,
    // 11, -3, 14, 11, -5, -35, -20, -17, 5, 4, 8, -7, 11, -10, 27, -4, -5, -3, -6, 11, 2, 1, -12, -1, -5, 7, -6, 0, 1, 3, -1, 3
    0xb0efd0b, 0xefecddfb, 0xf9080405, 0xfc1bf60b, 0xbfafdfb, 0xfff40102, 0xfa07fb, 0x3ff0301,
    // -5, 5, -5, 1, 6, 2, -13, -13, 5, 10, -10, 12, -13, 9, 14, -7, 5, -5, 8, 6, 7, 2, 1, -4, -6, -2, 3, -1, 1, -13, 15, -3
    0x1fb05fb, 0xf3f30206, 0xcf60a05, 0xf90e09f3, 0x608fb05, 0xfc010207, 0xff03fefa, 0xfd0ff301,
    // 10, -2, -2, 11, -3, 12, 10, -1, -14, 15, 4, -4, -7, 2, -15, -1, -10, -4, -3, -25, -22, 17, 7, -1, 12, 4, 2, 19, 2, 14, 13, 8
    0xbfefe0a, 0xff0a0cfd, 0xfc040ff2, 0xfff102f9, 0xe7fdfcf6, 0xff0711ea, 0x1302040c, 0x80d0e02,
    // 3, 10, 3, 11, -2, 4, -7, 0, 2, 9, -8, 8, 3, 12, -3, 8, 32, 11, -8, -15, -12, -18, 23, -33, -11, 0, 11, 13, -28, -38, -16, -21
    0xb030a03, 0xf904fe, 0x8f80902, 0x8fd0c03, 0xf1f80b20, 0xdf17eef4, 0xd0b00f5, 0xebf0dae4,
    // -18, -67, -41, 6, 13, 40, -11, 23, 0, 26, -16, 39, -85, 82, 104, 14, -1, 30, -5, -14, -12, -30, -17, -42, 20, 7, 2, 24, -22, -37, -10, -4
    0x6d7bdee, 0x17f5280d, 0x27f01a00, 0xe6852ab, 0xf2fb1eff, 0xd6efe2f4, 0x18020714, 0xfcf6dbea,
    // 2, 0, -9, -6, -6, 9, 9, 3, -10, 3, 7, 6, 2, 22, 4, 4, 26, 4, 9, -40, -6, -11, -14, -18, 6, 14, 7, 6, 2, -24, 0, 10
    0xfaf70002, 0x30909fa, 0x60703f6, 0x4041602, 0xd809041a, 0xeef2f5fa, 0x6070e06, 0xa00e802,
    // -9, 6, -2, 2, -4, -8, -10, -6, -3, 8, -10, 4, 8, 14, -2, 17, 21, 1, -11, -1, 0, 0, 12, 10, -10, 5, 5, -8, -15, -1, -13, -13
    0x2fe06f7, 0xfaf6f8fc, 0x4f608fd, 0x11fe0e08, 0xfff50115, 0xa0c0000, 0xf80505f6, 0xf3f3fff1,
    // 12, -2, 1, -34, 0, -1, 11, 29, 14, 6, 3, 6, -9, -16, -2, -12, 11, -4, -4, 5, 6, 8, 10, 18, 3, 3, 8, -2, -9, -5, -11, -13
    0xde01fe0c, 0x1d0bff00, 0x603060e, 0xf4fef0f7, 0x5fcfc0b, 0x120a0806, 0xfe080303, 0xf3f5fbf7,
    // 0, -8, -30, -22, -8, -12, 32, 2, -10, 13, 18, 2, -8, 14, 8, -13, -46, 41, 35, 74, -14, -41, 10, 21, -8, 40, -56, -71, 21, 30, -107, 19
    0xeae2f800, 0x220f4f8, 0x2120df6, 0xf3080ef8, 0x4a2329d2, 0x150ad7f2, 0xb9c828f8, 0x13951e15,
    // 33, -17, 18, -14, 22, -24, -17, -12, 11, -6, 27, -3, 0, -33, 19, -15, 11, -6, -13, -2, 1, 10, 18, 9, -16, -3, 12, 1, -25, 4, -4, -15
    0xf212ef21, 0xf4efe816, 0xfd1bfa0b, 0xf113df00, 0xfef3fa0b, 0x9120a01, 0x10cfdf0, 0xf1fc04e7,
    // 28, 13, -3, -20, 5, 22, 13, 2, 2, 7, 17, 12, -30, -17, 14, -19, 14, -8, 6, 5, 9, 8, 7, -2, 5, 0, 5, -1, -11, -2, 8, -12
    0xecfd0d1c, 0x20d1605, 0xc110702, 0xed0eefe2, 0x506f80e, 0xfe070809, 0xff050005, 0xf408fef5,
    // 12, -4, -2, -2, -5, -13, -1, 2, 6, 4, 3, 1, 9, -1, 0, -12, 26, -15, 30, -14, 4, 19, -33, 31, -1, 5, -2, -14, 5, 12, 12, 1
    0xfefefc0c, 0x2fff3fb, 0x1030406, 0xf400ff09, 0xf21ef11a, 0x1fdf1304, 0xf2fe05ff, 0x10c0c05,
    // 16, -5, -13, -18, 2, -15, 2, -10, 10, -3, 8, 2, 6, -2, 2, -9, 19, -11, 6, 2, -11, 30, 26, 27, -15, -20, 27, -13, 3, 12, -8, -12
    0xeef3fb10, 0xf602f102, 0x208fd0a, 0xf702fe06, 0x206f513, 0x1b1a1ef5, 0xf31becf1, 0xf4f80c03,
    // -27, 78, 3, 87, 51, -20, 1, -54, 33, -21, -52, 33, -40, -19, 33, -17, 9, -10, 12, -48, -9, 19, -26, 11, -15, 12, 4, -18, 8, 4, -21, 13
    0x57034ee5, 0xca01ec33, 0x21cceb21, 0xef21edd8, 0xd00cf609, 0xbe613f7, 0xee040cf1, 0xdeb0408,
    // 1, -5, 11, 7, -9, -3, 7, 5, -7, -14, 6, -4, 9, 3, 4, -5, -3, -3, -4, 7, -24, -4, 1, 17, -13, -8, -2, -16, 34, 1, 5, 0
    0x70bfb01, 0x507fdf7, 0xfc06f2f9, 0xfb040309, 0x7fcfdfd, 0x1101fce8, 0xf0fef8f3, 0x50122,
    // 9, 1, -3, -13, -7, -15, -2, -5, 5, -3, -4, 3, 10, 3, -9, -1, -8, 7, -2, 13, 1, 5, 2, 0, 2, 1, 0, -4, -9, -4, 9, -4
    0xf3fd0109, 0xfbfef1f9, 0x3fcfd05, 0xfff7030a, 0xdfe07f8, 0x20501, 0xfc000102, 0xfc09fcf7,
    // 18, 12, -1, 3, 8, 12, 21, 24, 9, -15, -24, 20, -4, 10, -8, -6, -6, -4, -3, -10, 11, 1, 6, 1, 13, -18, 8, -1, -9, -15, -8, -6
    0x3ff0c12, 0x18150c08, 0x14e8f109, 0xfaf80afc, 0xf6fdfcfa, 0x106010b, 0xff08ee0d, 0xfaf8f1f7,
    // -46, 8, 11, 43, -6, -7, -26, -22, -38, 4, -11, 10, 17, -10, 9, -3, 5, -44, 5, -44, -18, 96, -31, 37, 1, 87, 36, -79, 1, 92, 82, 9
    0x2b0b08d2, 0xeae6f9fa, 0xaf504da, 0xfd09f611, 0xd405d405, 0x25e160ee, 0xb1245701, 0x9525c01,
    // -2, -2, -22, -14, 20, 11, 20, 1, 11, -28, 10, 12, -13, -21, -41, -12, -5, -12, -10, 12, -15, -2, -8, 7, -5, 15, 6, -3, 11, -11, 5, 7
    0xf2eafefe, 0x1140b14, 0xc0ae40b, 0xf4d7ebf3, 0xcf6f4fb, 0x7f8fef1, 0xfd060ffb, 0x705f50b,
    // 27, 28, 0, -14, -1, -35, -37, 3, -13, 11, -16, 0, 27, -38, -8, 9, 0, -14, 2, -5, 3, 19, 8, 6, 18, -1, 9, -15, -11, -4, -16, -7
    0xf2001c1b, 0x3dbddff, 0xf00bf3, 0x9f8da1b, 0xfb02f200, 0x6081303, 0xf109ff12, 0xf9f0fcf5,
    // -10, -3, 12, -4, 0, -9, -9, 3, -11, -15, -12, -7, 4, 2, -5, 5, -15, 16, -21, -10, -1, -3, 10, -36, -16, -21, 6, -5, 20, 5, -1, 6
    0xfc0cfdf6, 0x3f7f700, 0xf9f4f1f5, 0x5fb0204, 0xf6eb10f1, 0xdc0afdff, 0xfb06ebf0, 0x6ff0514,
    // -17, -1, 13, -4, 2, 5, -2, 5, -3, -14, -5, -5, 8, -3, 0, 9, 31, -21, -15, -9, -13, 34, 31, 30, 6, -18, 30, -20, -16, -24, -18, -2
    0xfc0dffef, 0x5fe0502, 0xfbfbf2fd, 0x900fd08, 0xf7f1eb1f, 0x1e1f22f3, 0xec1eee06, 0xfeeee8f0,
    // -40, 0, -60, 74, -2, -85, -34, 127, 10, -4, -57, -64, -2, 56, -37, -21, -4, -3, -2, -34, 20, 21, -6, 19, 2, -12, 3, -11, 17, -11, -19, -10
    0x4ac400d8, 0x7fdeabfe, 0xc0c7fc0a, 0xebdb38fe, 0xdefefdfc, 0x13fa1514, 0xf503f402, 0xf6edf511,
    // -11, 1, 13, 0, -9, 9, -5, 8, 2, -2, 2, -10, -1, -5, 0, -1, 7, 3, -9, -13, 3, -7, -1, -8, -3, -12, 2, 11, -4, -1, -6, -3
    0xd01f5, 0x8fb09f7, 0xf602fe02, 0xff00fbff, 0xf3f70307, 0xf8fff903, 0xb02f4fd, 0xfdfafffc,
    // -14, 4, 5, -2, -3, 6, -2, 9, -1, -1, 2, -1, 1, -12, -4, 0, -4, 7, -9, 0, -2, -6, 3, -12, -7, 3, -2, -4, 3, -2, -16, -2
    0xfe0504f2, 0x9fe06fd, 0xff02ffff, 0xfcf401, 0xf707fc, 0xf403fafe, 0xfcfe03f9, 0xfef0fe03,
    // -12, 1, -9, 2, -4, -17, 16, 9, 24, -19, 0, 16, -8, 1, -4, 9, -6, 5, -2, 2, 5, 3, -6, 2, 9, 3, -5, 8, -4, 8, -11, 3
    0x2f701f4, 0x910effc, 0x1000ed18, 0x9fc01f8, 0x2fe05fa, 0x2fa0305, 0x8fb0309, 0x3f508fc,
    // -39, 10, -19, -2, -15, -43, 19, -22, -28, 4, 9, 5, 24, 11, 14, 14, 34, 22, 33, 43, 38, 6, 27, 70, 54, -39, -23, -73, -30, 84, -71, -21
    0xfeed0ad9, 0xea13d5f1, 0x50904e4, 0xe0e0b18, 0x2b211622, 0x461b0626, 0xb7e9d936, 0xebb954e2,
    // 4, 13, 8, -11, 0, -20, -19, -20, 9, -6, 17, 11, 1, -28, -2, 26, -15, 9, -20, -7, -12, -14, 2, -11, -29, 0, 0, 17, 13, 5, 3, 1
    0xf5080d04, 0xecedec00, 0xb11fa09, 0x1afee401, 0xf9ec09f1, 0xf502f2f4, 0x110000e3, 0x103050d,
    // -23, 18, 15, -4, -19, -23, -1, -12, -37, -22, 6, 11, 11, -23, 5, 7, -8, 4, -4, -5, -3, -4, 2, -12, -2, 7, -9, 0, 4, 7, -2, 2
    0xfc0f12e9, 0xf4ffe9ed, 0xb06eadb, 0x705e90b, 0xfbfc04f8, 0xf402fcfd, 0xf707fe, 0x2fe0704,
    // -16, 5, -4, -10, 0, -1, 3, -3, -13, -5, -8, -9, -9, -3, -4, 4, -16, 5, 14, -34, 0, 5, -6, 23, 6, -18, -9, -8, -13, -20, -21, 5
    0xf6fc05f0, 0xfd03ff00, 0xf7f8fbf3, 0x4fcfdf7, 0xde0e05f0, 0x17fa0500, 0xf8f7ee06, 0x5ebecf3,
    // -25, 2, 4, -14, -5, 24, 1, 13, -5, 0, -1, -9, -4, 2, -8, 5, -35, -15, -10, -1, -11, -5, -7, 10, 9, 7, -3, -29, -1, 32, 15, -5
    0xf20402e7, 0xd0118fb, 0xf7ff00fb, 0x5f802fc, 0xfff6f1dd, 0xaf9fbf5, 0xe3fd0709, 0xfb0f20ff,
    // 77, 40, 6, -30, 25, 7, -22, -21, -18, -107, -8, 68, -45, -47, -36, 22, -18, -19, 5, -6, -22, 36, 3, 21, -2, -12, 12, -34, 9, 17, -2, -16
    0xe206284d, 0xebea0719, 0x44f895ee, 0x16dcd1d3, 0xfa05edee, 0x150324ea, 0xde0cf4fe, 0xf0fe1109,
    // -14, 0, -8, 2, -3, 2, -14, -1, -10, 11, -2, 0, -5, -4, 1, -3, -11, 2, -3, 1, -9, 10, 22, -9, 22, 42, -13, 13, -20, 11, -5, -8
    0x2f800f2, 0xfff202fd, 0xfe0bf6, 0xfd01fcfb, 0x1fd02f5, 0xf7160af7, 0xdf32a16, 0xf8fb0bec,
    // -22, 5, -6, -5, -4, 16, -6, 1, -6, 6, 1, 4, -5, -6, -6, -4, -2, 3, -1, 1, 17, 8, -11, 4, 19, 3, 0, 0, -12, -1, 6, 7
    0xfbfa05ea, 0x1fa10fc, 0x40106fa, 0xfcfafafb, 0x1ff03fe, 0x4f50811, 0x313, 0x706fff4,
    // 5, -16, -11, -32, 9, -14, 12, -6, 8, 8, 9, 5, -21, -24, -5, 3, -7, 8, 0, 13, -1, -5, 2, -6, -8, -4, 7, -15, 6, -9, 9, 5
    0xe0f5f005, 0xfa0cf209, 0x5090808, 0x3fbe8eb, 0xd0008f9, 0xfa02fbff, 0xf107fcf8, 0x509f706,
    // -12, -11, -9, 4, -22, 48, -3, -8, 34, 23, 12, 29, -7, -12, 26, 9, -12, 35, -10, 36, 36, -54, 27, -87, 10, 54, -29, 6, -51, 24, -23, -24
    0x4f7f5f4, 0xf8fd30ea, 0x1d0c1722, 0x91af4f9, 0x24f623f4, 0xa91bca24, 0x6e3360a, 0xe8e918cd,
    // 0, 29, 2, 4, -26, -2, -11, -13, -40, 2, -14, 17, 10, -14, 29, -8, -4, -5, 16, 11, 1, 13, -9, 16, 8, 11, -4, -19, -17, -15, -4, 7
    0x4021d00, 0xf3f5fee6, 0x11f202d8, 0xf81df20a, 0xb10fbfc, 0x10f70d01, 0xedfc0b08, 0x7fcf1ef,
    // -11, -22, -26, 1, -22, 7, -3, 14, -17, 17, 15, 1, -8, 4, -9, 0, -3, 17, -3, 4, -12, -17, -3, 4, -16, -7, 6, 2, 7, -21, 14, 7
    0x1e6eaf5, 0xefd07ea, 0x10f11ef, 0xf704f8, 0x4fd11fd, 0x4fdeff4, 0x206f9f0, 0x70eeb07,
    // -5, 0, 3, 17, -4, 5, -2, -8, -12, 5, -4, -5, 3, 12, 13, 4, 12, 0, -1, -33, -3, 23, -16, -7, -11, 18, 2, -7, 20, 3, 16, 12
    0x110300fb, 0xf8fe05fc, 0xfbfc05f4, 0x40d0c03, 0xdfff000c, 0xf9f017fd, 0xf90212f5, 0xc100314,
    // -12, -4, 2, -1, 6, 3, 1, 2, 9, -5, -1, 4, -6, 2, -5, 9, -48, -24, -19, 27, -10, 8, 28, -13, -29, 29, 2, 1, 12, 10, 28, 9
    0xff02fcf4, 0x2010306, 0x4fffb09, 0x9fb02fa, 0x1bede8d0, 0xf31c08f6, 0x1021de3, 0x91c0a0c,
    // 8, 86, -9, 44, -38, -107, 7, -60, -26, -45, -26, 63, -37, -28, -3, -67, 0, -20, 7, -22, 49, 2, -15, -4, 38, -9, 14, 5, -12, -19, -23, 10
    0x2cf75608, 0xc40795da, 0x3fe6d3e6, 0xbdfde4db, 0xea07ec00, 0xfcf10231, 0x50ef726, 0xae9edf4,
    // 0, -2, -10, 18, 2, -7, -12, 3, -5, 11, -12, 2, 2, 11, -10, 6, 6, 0, -37, -21, 6, 30, 13, 13, 20, 18, -6, -4, 7, 17, -6, 16
    0x12f6fe00, 0x3f4f902, 0x2f40bfb, 0x6f60b02, 0xebdb0006, 0xd0d1e06, 0xfcfa1214, 0x10fa1107,
    // 3, 0, 7, -5, 21, -2, -5, -17, 20, 5, -8, 3, -6, -12, -22, 11, -7, -2, -1, -11, 11, -4, -5, 8, -3, -10, -12, -8, -12, -3, -18, 6
    0xfb070003, 0xeffbfe15, 0x3f80514, 0xbeaf4fa, 0xf5fffef9, 0x8fbfc0b, 0xf8f4f6fd, 0x6eefdf4,
    // 4, -21, -9, -14, 14, -12, 16, 18, -15, 14, 10, -28, 13, -14, -20, -7, -7, -4, -12, -1, 2, 0, 8, -2, -2, -6, -3, -5, 4, -6, -5, -6
    0xf2f7eb04, 0x1210f40e, 0xe40a0ef1, 0xf9ecf20d, 0xfff4fcf9, 0xfe080002, 0xfbfdfafe, 0xfafbfa04,
    // 13, 8, -16, -32, 10, 12, 7, -1, 11, -25, -4, -2, 0, -2, -29, 9, -29, 9, 35, -8, -31, 72, 24, 21, 1, -73, -14, 14, -69, 91, -4, -39
    0xe0f0080d, 0xff070c0a, 0xfefce70b, 0x9e3fe00, 0xf82309e3, 0x151848e1, 0xef2b701, 0xd9fc5bbb,
    // 14, 23, 1, 2, 18, -19, -13, -22, -27, 16, -5, 0, 29, -22, 42, 4, 4, 12, 4, -13, 9, 0, 0, -12, 8, 2, -5, -7, -18, -12, -5, 6
    0x201170e, 0xeaf3ed12, 0xfb10e5, 0x42aea1d, 0xf3040c04, 0xf4000009, 0xf9fb0208, 0x6fbf4ee,
    // 4, 12, 12, -24, 24, -8, -27, -29, -15, -6, 14, 16, 2, -5, 26, 3, 2, 17, -4, -2, 2, 4, -4, -8, -5, 9, 1, 13, 4, -16, 2, -1
    0xe80c0c04, 0xe3e5f818, 0x100efaf1, 0x31afb02, 0xfefc1102, 0xf8fc0402, 0xd0109fb, 0xff02f004,
    // 1, -6, -13, -18, 15, -4, 2, 3, 3, 1, -6, -6, 8, 8, -9, 11, -4, -7, 0, -39, 17, -3, -4, 22, -3, -11, 2, -16, 5, -4, -3, 11
    0xeef3fa01, 0x302fc0f, 0xfafa0103, 0xbf70808, 0xd900f9fc, 0x16fcfd11, 0xf002f5fd, 0xbfdfc05,
    // -11, 1, -11, -8, 2, 6, 5, 1, -7, -2, -9, -10, 5, 3, -11, 3, 26, 6, -17, -6, 18, -12, -1, 10, 13, -18, 4, -3, -4, 3, -16, -3
    0xf8f501f5, 0x1050602, 0xf6f7fef9, 0x3f50305, 0xfaef061a, 0xafff412, 0xfd04ee0d, 0xfdf003fc,
    // -19, -8, 42, -78, 13, -12, -51, -21, 35, 99, 48, -18, -17, -99, -6, -8, -19, 8, -46, 2, -19, 12, 27, 10, -24, -8, -13, -3, 18, 26, -5, -1
    0xb22af8ed, 0xebcdf40d, 0xee306323, 0xf8fa9def, 0x2d208ed, 0xa1b0ced, 0xfdf3f8e8, 0xfffb1a12,
    // -8, 2, -15, -8, -2, -1, 12, -9, -10, 7, -5, 1, -4, 4, -7, 10, -16, -9, -37, -12, -17, 9, 28, -5, -22, 13, -2, 13, 9, 13, 2, 11
    0xf8f102f8, 0xf70cfffe, 0x1fb07f6, 0xaf904fc, 0xf4dbf7f0, 0xfb1c09ef, 0xdfe0dea, 0xb020d09,
    // -22, 14, -26, -2, -9, 10, 5, 11, -19, -4, -11, 2, 13, 4, -15, 14, -2, -1, -3, -12, 3, -6, 2, -1, 3, -8, 1, -2, 3, -16, -15, 3
    0xfee60eea, 0xb050af7, 0x2f5fced, 0xef1040d, 0xf4fdfffe, 0xff02fa03, 0xfe01f803, 0x3f1f003,
    // -14, 6, -2, 7, -4, 12, 4, -6, 17, -12, -8, 22, -6, 7, -12, 13, -4, 2, -3, 2, -1, 9, -5, -5, 9, -3, -9, 7, -14, -5, -18, 1
    0x7fe06f2, 0xfa040cfc, 0x16f8f411, 0xdf407fa, 0x2fd02fc, 0xfbfb09ff, 0x7f7fd09, 0x1eefbf2,
    // 26, -2, -6, -26, 33, -26, 23, 15, 15, -52, 9, -22, -1, -16, 10, -7, -5, 29, 23, 26, -32, 75, 39, 27, -62, 3, -34, -43, 22, -48, 4, -39
    0xe6fafe1a, 0xf17e621, 0xea09cc0f, 0xf90af0ff, 0x1a171dfb, 0x1b274be0, 0xd5de03c2, 0xd904d016,
    // -10, 13, 0, -10, -13, -33, -18, -9, 20, -24, 10, -6, 6, 22, -12, 34, -10, 0, 0, -8, 11, -14, 2, -16, 4, -7, -1, 0, -3, -13, 4, 5
    0xf6000df6, 0xf7eedff3, 0xfa0ae814, 0x22f41606, 0xf80000f6, 0xf002f20b, 0xfff904, 0x504f3fd,
    // -21, 10, -2, -6, 11, -20, -16, -2, 13, -2, -12, 3, 22, -20, -27, 6, -13, -4, -7, -10, -1, 8, 1, -3, 0, 5, -9, -4, 11, 9, -13, 6
    0xfafe0aeb, 0xfef0ec0b, 0x3f4fe0d, 0x6e5ec16, 0xf6f9fcf3, 0xfd0108ff, 0xfcf70500, 0x6f3090b,
};
static const uint embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // -0.000355, -1.95e-05, -5.92e-05, -0.000115, -8.6e-05, 0.0005116, 0.000407, -3.695e-05, -0.0003479, -0.0001148, -0.0004447, -0.000426, -0.000288, 0.0002044, -0.0001851, 1.264e-05
    0x81478dd1, 0x878983e1, 0x103185a3, 0x826c0eab, 0x87868db3, 0x8efb8f49, 0xab38cb8, 0xd48a11,
};
static const uint embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -10, 13, 1, 7, 33, -73, -15, -37, 54, 14, 39, -9, -16, -36, -16, 1, -38, 30, 20, 9, 100, 42, 6, 44, 35, -39, 10, 29, -20, -13, 34, -22
    0x7010df6, 0xdbf1b721, 0xf7270e36, 0x1f0dcf0, 0x9141eda, 0x2c062a64, 0x1d0ad923, 0xea22f3ec,
    // 3, -62, -17, 8, 11, -61, -11, 28, 62, -1, 28, 4, 57, -10, 34, -10, -30, 5, 61, 11, 13, 9, -12, 41, 9, 17, 3, -19, 7, 21, 4, 8
    0x8efc203, 0x1cf5c30b, 0x41cff3e, 0xf622f639, 0xb3d05e2, 0x29f4090d, 0xed031109, 0x8041507,
    // 75, 65, -47, -49, 39, -37, -9, 41, 31, -20, -19, 42, -2, 24, 9, -64, 20, 22, 15, -21, 4, 5, -14, 8, -4, -15, 2, -10, 20, 21, -5, -50
    0xcfd1414b, 0x29f7db27, 0x2aedec1f, 0xc00918fe, 0xeb0f1614, 0x8f20504, 0xf602f1fc, 0xcefb1514,
    // -4, -1, -16, 52, -33, -47, 23, 23, -73, 20, 12, 24, 25, 38, 8, 13, 76, 42, -12, 2, -21, 14, -11, -14, -26, 16, -26, -5, 35, 19, -2, -62
    0x34f0fffc, 0x1717d1df, 0x180c14b7, 0xd082619, 0x2f42a4c, 0xf2f50eeb, 0xfbe610e6, 0xc2fe1323,
    // 65, 1, 33, -42, 21, 22, 54, -42, 55, 14, -23, 55, 30, 16, -30, -12, 41, 20, 3, 16, 7, 11, 3, 13, -31, 6, 2, 6, 3, 6, 7, -13
    0xd6210141, 0xd6361615, 0x37e90e37, 0xf4e2101e, 0x10031429, 0xd030b07, 0x60206e1, 0xf3070603,
    // 21, -13, -18, 9, -24, -5, 25, 10, -14, -6, -19, -21, -6, 15, -16, 22, -16, 37, -5, -36, 109, 38, 54, -14, 11, 45, 36, -33, 45, -38, 7, -15
    0x9eef315, 0xa19fbe8, 0xebedfaf2, 0x16f00ffa, 0xdcfb25f0, 0xf236266d, 0xdf242d0b, 0xf107da2d,
    // -4, 1, 0, -30, -28, -6, -8, -1, -4, 26, -1, -12, -1, 10, -17, -7, -118, -6, -122, -37, -5, -4, -92, -15, -9, -12, 37, 17, -10, -94, 33, -1
    0xe20001fc, 0xfff8fae4, 0xf4ff1afc, 0xf9ef0aff, 0xdb86fa8a, 0xf1a4fcfb, 0x1125f4f7, 0xff21a2f6,
    // -57, -63, 44, 65, -37, 16, 28, -27, -54, 41, 26, -39, 9, -8, -38, 67, -55, 5, 33, 38, 35, 10, -15, -12, -24, -16, -17, 23, -5, -9, 47, 11
    0x412cc1c7, 0xe51c10db, 0xd91a29ca, 0x43daf809, 0x262105c9, 0xf4f10a23, 0x17eff0e8, 0xb2ff7fb,
    // 2, 7, 15, 28, -23, -33, -27, 5, 10, 16, -12, 9, 68, 36, 55, 24, 13, 19, -51, -7, -5, 27, 45, 34, 2, -7, -4, -67, -25, -56, -39, 54
    0x1c0f0702, 0x5e5dfe9, 0x9f4100a, 0x18372444, 0xf9cd130d, 0x222d1bfb, 0xbdfcf902, 0x36d9c8e7,
    // -54, 29, -22, -22, -58, -16, 40, -94, -39, -52, 56, 39, 85, -66, 43, -29, 10, 54, 15, -2, 5, 3, -15, -2, -5, 15, 15, 3, 3, -1, 28, 5
    0xeaea1dca, 0xa228f0c6, 0x2738ccd9, 0xe32bbe55, 0xfe0f360a, 0xfef10305, 0x30f0ffb, 0x51cff03,
    // 9, 0, -9, 3, 7, 10, 16, 13, -4, -8, 55, -16, -17, 8, 4, -18, -17, 45, -7, -24, -26, 0, -6, -25, -74, 77, 48, -42, 2, 33, -19, 4
    0x3f70009, 0xd100a07, 0xf037f8fc, 0xee0408ef, 0xe8f92def, 0xe7fa00e6, 0xd6304db6, 0x4ed2102,
    // -18, 52, -60, 6, 9, 4, -20, 54, 8, 14, -3, -38, 74, -12, -29, -18, -8, -6, 42, -12, -4, 15, 17, 11, 14, 10, 17, 3, -20, -4, 14, 7
    0x6c434ee, 0x36ec0409, 0xdafd0e08, 0xeee3f44a, 0xf42afaf8, 0xb110ffc, 0x3110a0e, 0x70efcec,
    // 0, -7, -14, 8, -12, -27, 2, -12, -3, 19, -4, 11, 2, -9, -19, 20, -4, -54, 1, -7, 35, 39, -20, -3, 37, -40, 64, 69, -13, 33, -65, 10
    0x8f2f900, 0xf402e5f4, 0xbfc13fd, 0x14edf702, 0xf901cafc, 0xfdec2723, 0x4540d825, 0xabf21f3,
    // 5, 2, 15, -10, -2, 5, 8, 5, -6, 9, -7, -3, 14, -10, 20, 11, 29, 38, -15, -34, 98, 17, 12, 45, -2, 44, 7, 18, 43, -21, 23, 34
    0xf60f0205, 0x50805fe, 0xfdf909fa, 0xb14f60e, 0xdef1261d, 0x2d0c1162, 0x12072cfe, 0x2217eb2b,
    // 39, 5, -23, -15, -4, -17, -19, 14, -28, 5, -6, 19, 36, -4, -15, 40, 5, 31, 19, -25, 50, 44, 30, 1, 8, -24, -16, 13, -25, -42, 65, -45
    0xf1e90527, 0xeedeffc, 0x13fa05e4, 0x28f1fc24, 0xe7131f05, 0x11e2c32, 0xdf0e808, 0xd341d6e7,
    // 20, -16, 8, -32, -28, -47, -2, -11, -18, 20, -16, -3, -4, -46, -8, 0, 2, -3, -77, 5, -14, 29, -28, 19, 35, -1, -28, 46, -26, -23, 41, -40
    0xe008f014, 0xf5fed1e4, 0xfdf014ee, 0xf8d2fc, 0x5b3fd02, 0x13e41df2, 0x2ee4ff23, 0xd829e9e6,
    // 7, 1, 0, 18, 3, -42, 52, 26, -31, 70, 39, 87, -18, -37, 26, -8, -18, 36, 13, 29, 82, 79, -5, 28, 38, -14, -24, 60, 24, -31, 40, -43
    0x12000107, 0x1a34d603, 0x572746e1, 0xf81adbee, 0x1d0d24ee, 0x1cfb4f52, 0x3ce8f226, 0xd528e118,
    // 15, 42, 9, -23, 7, 9, -28, -48, -32, 25, -23, 7, 14, -34, -17, 18, 4, -37, 30, -15, -8, 7, -68, -14, 44, 59, 18, 13, 10, 6, 31, -32
    0xe9092a0f, 0xd0e40907, 0x7e919e0, 0x12efde0e, 0xf11edb04, 0xf2bc07f8, 0xd123b2c, 0xe01f060a,
    // 4, 30, 8, -13, -100, 10, -15, -25, 72, 54, 54, -46, -34, -14, -47, 19, 48, 2, -15, 23, -6, 4, -53, -56, 117, -57, -22, -16, 55, 31, 102, -45
    0xf3081e04, 0xe7f10a9c, 0xd2363648, 0x13d1f2de, 0x17f10230, 0xc8cb04fa, 0xf0eac775, 0xd3661f37,
    // -41, 54, -69, 4, 13, 8, -14, 24, 18, 28, -22, -19, 87, -13, -44, 24, 5, -10, 14, -6, 3, -11, 5, 13, 12, -14, 14, -2, -13, -12, 0, -13
    0x4bb36d7, 0x18f2080d, 0xedea1c12, 0x18d4f357, 0xfa0ef605, 0xd05f503, 0xfe0ef20c, 0xf300f4f3,
    // 4, 25, 49, 25, -21, -16, -6, -11, -38, 38, -1, 12, 20, 32, 31, 13, -59, -34, 44, -33, 18, 11, -67, 17, 75, -34, -11, 58, 11, 37, -57, -17
    0x19311904, 0xf5faf0eb, 0xcff26da, 0xd1f2014, 0xdf2cdec5, 0x11bd0b12, 0x3af5de4b, 0xefc7250b,
    // 28, -5, -18, 27, 0, -3, -4, -6, 3, -3, 35, -6, -1, -1, -10, 6, 25, 76, 3, -3, -8, 20, -40, 86, -58, 3, -13, -49, -77, 9, -15, 14
    0x1beefb1c, 0xfafcfd00, 0xfa23fd03, 0x6f6ffff, 0xfd034c19, 0x56d814f8, 0xcff303c6, 0xef109b3,
    // 13, -1, -5, -24, 18, 20, 5, -5, 11, -15, -7, -8, 2, -33, -7, 12, -16, 47, 16, 55, -12, -25, -10, 6, -28, -41, -5, 6, 51, -37, -37, -15
    0xe8fbff0d, 0xfb051412, 0xf8f9f10b, 0xcf9df02, 0x37102ff0, 0x6f6e7f4, 0x6fbd7e4, 0xf1dbdb33,
    // -73, 29, 40, 19, 3, -26, 53, 16, 28, 1, -14, 9, -45, 15, 29, -63, -55, 52, -8, 16, 80, 42, -58, 11, 36, 9, 35, -21, 71, -66, 19, -59
    0x13281db7, 0x1035e603, 0x9f2011c, 0xc11d0fd3, 0x10f834c9, 0xbc62a50, 0xeb230924, 0xc513be47,
    // 43, -11, 5, 27, -18, 5, -70, -48, 18, -58, 5, -67, 53, -5, -29, 8, 24, -4, -18, -25, 17, -6, 21, -8, -19, 43, 51, -23, -23, -4, -9, -20
    0x1b05f52b, 0xd0ba05ee, 0xbd05c612, 0x8e3fb35, 0xe7eefc18, 0xf815fa11, 0xe9332bed, 0xecf7fce9,
    // -13, -35, -12, 3, 21, 17, 0, -2, 30, -5, -40, 34, 29, -24, 31, -16, -92, -1, 18, 12, 44, 31, 32, -1, 19, 8, -55, -1, 6, 42, -17, 12
    0x3f4ddf3, 0xfe001115, 0x22d8fb1e, 0xf01fe81d, 0xc12ffa4, 0xff201f2c, 0xffc90813, 0xcef2a06,
    // 18, -29, -42, 33, 4, -23, 1, 15, 10, 18, 42, 22, -7, -29, -37, 9, 26, -8, -74, -7, -29, 2, 50, 64, -17, 11, -45, 53, -29, 4, -8, 9
    0x21d6e312, 0xf01e904, 0x162a120a, 0x9dbe3f9, 0xf9b6f81a, 0x403202e3, 0x35d30bef, 0x9f804e3,
    // -72, 38, 43, 70, 4, 19, 5, 12, 26, -21, -4, 13, -41, 50, 14, -69, -32, 9, -5, 14, -3, 6, -79, 9, -3, -27, 11, -8, 55, -30, 42, -17
    0x462b26b8, 0xc051304, 0xdfceb1a, 0xbb0e32d7, 0xefb09e0, 0x9b106fd, 0xf80be5fd, 0xef2ae237,
    // 0, -53, -24, 11, 70, -12, -11, 14, -29, -42, -21, 29, 40, -3, 71, -9, -26, -71, 40, 8, 10, -44, 15, -9, 107, -24, -23, -1, 20, -31, 71, -66
    0xbe8cb00, 0xef5f446, 0x1debd6e3, 0xf747fd28, 0x828b9e6, 0xf70fd40a, 0xffe9e86b, 0xbe47e114,
    // 22, -50, -41, 40, 23, -25, -12, -4, -20, 1, 38, 9, 18, -18, 5, 8, 2, -3, -40, 21, 35, -8, 3, 50, -44, 71, -9, 50, 20, -21, 29, -13
    0x28d7ce16, 0xfcf4e717, 0x92601ec, 0x805ee12, 0x15d8fd02, 0x3203f823, 0x32f747d4, 0xf31deb14,
    // -10, 32, -28, -6, -6, -7, -31, 4, -27, 49, 14, -12, 24, 15, -26, -10, -84, -34, 80, 29, 12, 1, 63, 13, 10, 2, 2, -2, -20, 1, 53, 77
    0xfae420f6, 0x4e1f9fa, 0xf40e31e5, 0xf6e60f18, 0x1d50deac, 0xd3f010c, 0xfe02020a, 0x4d3501ec,
    // 82, -60, 29, 41, 105, 14, -58, 73, 49, 73, -85, -36, -58, 45, -45, 24, 0, 20, 1, 8, 17, -9, 13, -4, -12, -17, -16, 3, 21, -22, 41, -6
    0x291dc452, 0x49c60e69, 0xdcab4931, 0x18d32dc6, 0x8011400, 0xfc0df711, 0x3f0eff4, 0xfa29ea15,
    // 39, -10, -52, 65, -74, 28, -19, -22, 51, 34, -79, 15, -24, -78, 40, 31, -57, -12, 38, 19, 23, -32, 5, 1, -36, 19, -7, 1, -13, -31, -31, -25
    0x41ccf627, 0xeaed1cb6, 0xfb12233, 0x1f28b2e8, 0x1326f4c7, 0x105e017, 0x1f913dc, 0xe7e1e1f3,
    // 7, 10, -16, 17, -7, -24, -20, 0, 7, 6, 12, 13, 20, 3, 6, 22, -15, -10, -16, 19, -21, 11, 45, -17, 4, -18, 42, -13, -22, 15, 17, -69
    0x11f00a07, 0xece8f9, 0xd0c0607, 0x16060314, 0x13f0f6f1, 0xef2d0beb, 0xf32aee04, 0xbb110fea,
    // 22, 34, -46, 70, -19, 6, -3, 22, -14, -18, -5, -1, 18, -32, -23, 69, -1, -13, -1, -19, -18, -24, -34, 4, -29, 4, 48, -2, -13, -15, 36, 17
    0x46d22216, 0x16fd06ed, 0xfffbeef2, 0x45e9e012, 0xedfff3ff, 0x4dee8ee, 0xfe3004e3, 0x1124f1f3,
    // -26, 12, 46, 2, -3, -5, -22, 29, 13, 12, -5, -10, 24, 15, 65, -12, -11, 6, -21, 46, 25, 31, 16, 45, -43, -32, -2, 81, -11, 21, 42, -45
    0x22e0ce6, 0x1deafbfd, 0xf6fb0c0d, 0xf4410f18, 0x2eeb06f5, 0x2d101f19, 0x51fee0d5, 0xd32a15f5,
    // 27, -16, 4, 43, -10, -69, 45, -1, 5, 57, -1, -7, -4, 4, 18, -25, -8, -24, -5, -40, 1, 2, 26, -37, -13, -9, -4, -26, -58, 44, 28, -29
    0x2b04f01b, 0xff2dbbf6, 0xf9ff3905, 0xe71204fc, 0xd8fbe8f8, 0xdb1a0201, 0xe6fcf7f3, 0xe31c2cc6,
    // 10, -57, -33, 38, 12, -2, 41, -17, -43, -47, -38, 4, 31, 14, -15, -47, 13, -3, 18, 26, 29, -32, -61, -50, 75, -16, -45, -59, -29, -3, 75, 14
    0x26dfc70a, 0xef29fe0c, 0x4dad1d5, 0xd1f10e1f, 0x1a12fd0d, 0xcec3e01d, 0xc5d3f04b, 0xe4bfde3,
    // -42, 12, -37, -4, 35, 16, 47, 5, -7, 84, 13, -4, -22, -31, 41, -46, -25, 15, -3, 17, 13, -13, -8, 18, 5, 14, 8, -2, -8, -3, -30, -19
    0xfcdb0cd6, 0x52f1023, 0xfc0d54f9, 0xd229e1ea, 0x11fd0fe7, 0x12f8f30d, 0xfe080e05, 0xede2fdf8,
    // -5, 16, 22, -9, -20, 26, -45, 7, 9, -33, -9, -15, 27, -29, -32, -2, -20, 15, 1, 6, 82, 43, 35, 2, 4, -7, -37, -1, 7, -7, 31, -15
    0xf71610fb, 0x7d31aec, 0xf1f7df09, 0xfee0e31b, 0x6010fec, 0x2232b52, 0xffdbf904, 0xf11ff907,
    // 5, -23, -58, -1, -22, 33, 38, 31, -52, 12, -22, 49, -15, 2, 20, 18, 10, 1, 8, -18, -12, -6, -9, -1, -20, 66, 33, -19, -20, 34, -22, 11
    0xffc6e905, 0x1f2621ea, 0x31ea0ccc, 0x121402f1, 0xee08010a, 0xfff7faf4, 0xed2142ec, 0xbea22ec,
    // 15, 44, 25, -16, 70, -52, 0, -16, -15, -42, 66, -32, 14, 10, -49, 33, 20, 0, -64, -36, -7, -21, -59, 5, -7, -10, 35, 5, -14, -11, 24, 9
    0xf0192c0f, 0xf000cc46, 0xe042d6f1, 0x21cf0a0e, 0xdcc00014, 0x5c5ebf9, 0x523f6f9, 0x918f5f2,
    // -9, 5, -24, -56, 39, 16, 27, -56, 49, -57, -42, 14, -34, 36, 8, 97, -31, 5, 47, 11, 35, 38, 31, 6, 8, 7, -10, 8, -22, -2, 56, 18
    0xc8e805f7, 0xc81b1027, 0xed6c731, 0x610824de, 0xb2f05e1, 0x61f2623, 0x8f60708, 0x1238feea,
    // 9, 21, -3, -26, 6, 13, -31, -5, -14, 10, 29, 25, -18, -40, -27, -6, -14, 8, 54, 22, 12, 83, 18, -24, 24, -37, -2, -21, 26, -27, 14, -7
    0xe6fd1509, 0xfbe10d06, 0x191d0af2, 0xfae5d8ee, 0x163608f2, 0xe812530c, 0xebfedb18, 0xf90ee51a,
    // 20, -24, -10, 1, 8, 6, 1, -7, -23, 6, 8, 2, 5, -8, -13, -21, 4, -29, 9, -13, 8, 68, -56, 59, -63, 48, 33, -7, 6, 36, -27, 29
    0x1f6e814, 0xf9010608, 0x20806e9, 0xebf3f805, 0xf309e304, 0x3bc84408, 0xf92130c1, 0x1de52406,
    // 22, 25, 36, 3, 2, -62, 8, 8, -2, 10, -20, -15, 56, 20, 40, 2, -48, 47, 30, 13, 87, 127, 39, 18, 29, -1, 2, 7, 11, -33, 35, -84
    0x3241916, 0x808c202, 0xf1ec0afe, 0x2281438, 0xd1e2fd0, 0x12277f57, 0x702ff1d, 0xac23df0b,
    // -35, -25, -27, 25, 15, -12, 8, -22, 13, 15, -20, -1, -12, 41, 2, -82, -8, -28, -28, -9, 15, -22, 51, -25, -16, 56, 26, 21, 34, -26, -44, 43
    0x19e5e7dd, 0xea08f40f, 0xffec0f0d, 0xae0229f4, 0xf7e4e4f8, 0xe733ea0f, 0x151a38f0, 0x2bd4e622,
    // -4, 49, 34, -24, -8, 8, -39, 10, 12, -8, -27, -25, 22, 36, 60, 6, 21, -21, 13, 29, 16, -37, -63, -15, 33, -33, -24, 71, -29, 42, 34, -33
    0xe82231fc, 0xad908f8, 0xe7e5f80c, 0x63c2416, 0x1d0deb15, 0xf1c1db10, 0x47e8df21, 0xdf222ae3,
    // 70, -84, 87, -31, -32, -33, -56, -71, -30, -32, 22, 72, -92, 36, 47, 7, -2, 16, -12, 12, 5, 4, 7, -17, -14, 8, -21, -1, 10, 49, -47, -16
    0xe157ac46, 0xb9c8dfe0, 0x4816e0e2, 0x72f24a4, 0xcf410fe, 0xef070405, 0xffeb08f2, 0xf0d1310a,
    // -32, -49, -36, 0, 17, -19, 13, 4, 4, -34, -26, 24, -27, -23, -60, -36, 39, 14, 28, 34, 23, -5, -32, -11, 16, -35, -28, 36, -54, 11, 29, 16
    0xdccfe0, 0x40ded11, 0x18e6de04, 0xdcc4e9e5, 0x221c0e27, 0xf5e0fb17, 0x24e4dd10, 0x101d0bca,
    // -9, 8, 28, 23, 0, 8, -6, 11, 18, 0, 12, 13, 3, 2, 20, 3, 4, -10, -7, -33, 15, 46, -12, -17, 31, -71, -12, -10, -28, 17, 77, -2
    0x171c08f7, 0xbfa0800, 0xd0c0012, 0x3140203, 0xdff9f604, 0xeff42e0f, 0xf6f4b91f, 0xfe4d11e4,
    // -34, 23, -45, 14, -26, -45, -101, 54, -69, -59, -6, -55, -83, -68, 63, -10, 17, 55, 9, -13, -6, 6, -45, -22, -28, -12, 31, 26, 9, 28, 15, 34
    0xed317de, 0x369bd3e6, 0xc9fac5bb, 0xf63fbcad, 0xf3093711, 0xead306fa, 0x1a1ff4e4, 0x220f1c09,
    // -1, -12, 7, -43, -40, 25, -25, -21, 3, 28, 7, -21, -13, 17, -19, -43, -36, 1, 34, 24, 18, 5, 81, -27, -23, -12, -42, 5, -3, 8, 35, 21
    0xd507f4ff, 0xebe719d8, 0xeb071c03, 0xd5ed11f3, 0x182201dc, 0xe5510512, 0x5d6f4e9, 0x152308fd,
    // 29, -18, -7, -35, 0, -59, -85, -27, 14, -30, 56, -30, 32, 32, -32, 18, 48, 35, -5, -15, 72, 40, 41, -2, 30, 3, -4, 10, 19, -24, 16, -66
    0xddf9ee1d, 0xe5abc500, 0xe238e20e, 0x12e02020, 0xf1fb2330, 0xfe292848, 0xafc031e, 0xbe10e813,
    // -1, 2, 15, -28, 17, 13, -1, 26, -11, -18, -11, -3, -1, -30, 1, 14, -15, 7, -1, 13, 54, 94, 47, -40, 6, -45, 35, -5, -13, 18, 62, -55
    0xe40f02ff, 0x1aff0d11, 0xfdf5eef5, 0xe01e2ff, 0xdff07f1, 0xd82f5e36, 0xfb23d306, 0xc93e12f3,
    // -23, 7, -17, -13, -22, 50, -6, 11, -15, -46, 21, 24, -15, 4, -39, 20, 43, 10, 0, -70, 64, 14, 11, -19, -8, -39, -23, -12, -17, -26, 74, -2
    0xf3ef07e9, 0xbfa32ea, 0x1815d2f1, 0x14d904f1, 0xba000a2b, 0xed0b0e40, 0xf4e9d9f8, 0xfe4ae6ef,
    // 16, 38, 69, -8, 11, -6, 13, 11, -16, 13, -26, -25, 4, -26, 69, -14, 14, 36, 24, -18, -37, 54, -2, 13, -21, 32, -12, 9, 8, -46, -18, 25
    0xf8452610, 0xb0dfa0b, 0xe7e60df0, 0xf245e604, 0xee18240e, 0xdfe36db, 0x9f420eb, 0x19eed208,
    // -6, -6, -28, -4, -4, -6, -1, 15, 11, -18, 0, 8, -2, 12, 7, -14, 6, 48, -27, 26, 48, -6, -5, 61, -60, 54, 63, 11, -40, 39, 38, 9
    0xfce4fafa, 0xffffafc, 0x800ee0b, 0xf2070cfe, 0x1ae53006, 0x3dfbfa30, 0xb3f36c4, 0x92627d8,
    // 29, -13, -15, -6, -5, 6, 3, -20, -10, -31, -20, -21, 24, 3, -15, 1, -53, 6, -10, -7, 35, 37, 23, 69, -22, 52, -29, 82, -31, 34, 43, -46
    0xfaf1f31d, 0xec0306fb, 0xebece1f6, 0x1f10318, 0xf9f606cb, 0x45172523, 0x52e334ea, 0xd22b22e1,
    // -18, -9, -10, 7, -31, 17, 6, 28, 53, -14, 6, -7, -28, 45, -19, 4, 33, -10, -14, -13, 17, -52, -3, -4, 60, 86, 35, 16, 17, 77, 43, -19
    0x7f6f7ee, 0x1c0611e1, 0xf906f235, 0x4ed2de4, 0xf3f2f621, 0xfcfdcc11, 0x1023563c, 0xed2b4d11,
    // 30, 41, -9, 17, 38, -71, -18, -41, -30, -3, 27, -32, 36, 19, -44, 41, 8, 24, -7, -29, 27, 10, -31, -8, -4, -7, 27, 18, -15, -41, 13, -51
    0x11f7291e, 0xd7eeb926, 0xe01bfde2, 0x29d41324, 0xe3f91808, 0xf8e10a1b, 0x121bf9fc, 0xcd0dd7f1,
    // 7, -17, -9, -20, -28, -13, -23, 3, -28, 11, -4, -9, 3, 36, -25, 3, -74, -6, 25, 31, -26, -3, 33, 2, 5, -3, 17, -7, 19, -1, 1, 76
    0xecf7ef07, 0x3e9f3e4, 0xf7fc0be4, 0x3e72403, 0x1f19fab6, 0x221fde6, 0xf911fd05, 0x4c01ff13,
    // 26, -30, -12, 30, -17, -14, 24, 17, -20, -38, -25, 12, 16, -3, -37, -9, -37, 28, 26, 32, 0, 82, -22, -50, -3, -34, 53, -9, -16, 4, 41, -44
    0x1ef4e21a, 0x1118f2ef, 0xce7daec, 0xf7dbfd10, 0x201a1cdb, 0xceea5200, 0xf735defd, 0xd42904f0,
    // 5, -4, 58, -10, 0, 39, 57, -44, 47, 73, 13, 58, 84, 40, -59, 1, 1, 14, 6, 7, 16, 12, 8, 9, -17, 26, 33, 9, -3, 2, 20, 4
    0xf63afc05, 0xd4392700, 0x3a0d492f, 0x1c52854, 0x7060e01, 0x9080c10, 0x9211aef, 0x41402fd,
};
static const uint embedded_encoder3_ResidualBlock_0_body_pw_expand_bias_dwords[32] = {
    // -0.04657, 0.01496, -0.05466, -0.03534, -0.0764, -0.08374, 0.02649, -0.06616, -0.1284, -0.05908, -0.1126, -0.01082, -0.08044, -0.03876, 0.01041, -0.06174
    0x23a9a9f6, 0xa886aaff, 0xad5cace4, 0xac3c26c8, 0xab90b01c, 0xa18aaf35, 0xa8f6ad26, 0xabe72154,
    // -0.02364, -0.03165, -0.2454, 0.0771, -0.1516, -0.2216, -0.2225, -0.04065, -0.0881, -0.06058, -0.0876, 0.01064, -0.1549, -0.10315, 0.01723, -0.06067
    0xa80da60d, 0x2cefb3da, 0xb317b0da, 0xa934b31f, 0xabc1ada3, 0x2173ad9b, 0xae9ab0f5, 0xabc42469,
    // -0.0523, -0.001092, -0.0895, -0.03604, 0.07855, -0.1333, -0.04236, 0.004963, -0.256, -0.03452, 0.00094, -0.01271, -0.116, -0.09607, -0.1426, -0.1671
    0x9479aab2, 0xa89dadba, 0xb0442d07, 0x1d15a96c, 0xa86bb419, 0xa28213b3, 0xae26af6d, 0xb159b090,
    // -0.05362, -0.0763, -0.03503, -0.05618, -0.02869, -0.02023, 0.0024, -0.1197, -0.0654, -0.132, -0.0683, -0.2532, -0.01237, -0.0953, 0.01875, -0.06146
    0xace2aadd, 0xab31a87c, 0xa52ea758, 0xafa918ea, 0xb039ac30, 0xb40dac5f, 0xae19a255, 0xabde24cd,
};
static const uint embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -31, 24, -42, 15, 10, -72, -25, -36, 19, -10, -28, 13, -2, -97, -48, -4, 26, 1, -4, 0, -10, -4, -29, 3, 27, 10, -1, -8, 15, 39, 18, 23
    0xfd618e1, 0xdce7b80a, 0xde4f613, 0xfcd09ffe, 0xfc011a, 0x3e3fcf6, 0xf8ff0a1b, 0x1712270f,
    // 23, 60, -41, 35, 10, 6, 7, -29, -23, -20, -23, 26, -30, -53, -4, -21, 31, -43, -5, 11, 16, -18, -5, 70, -20, -27, -16, -7, 21, -56, 82, 38
    0x23d73c17, 0xe307060a, 0x1ae9ece9, 0xebfccbe2, 0xbfbd51f, 0x46fbee10, 0xf9f0e5ec, 0x2652c815,
    // -44, 45, 41, 14, 20, 31, 19, 37, -44, 23, 1, -5, -70, 11, 35, 16, 49, -22, -27, -56, 6, 14, 17, 1, 22, 15, 16, 20, 22, 21, -27, 37
    0xe292dd4, 0x25131f14, 0xfb0117d4, 0x10230bba, 0xc8e5ea31, 0x1110e06, 0x14100f16, 0x25e51516,
    // 24, -9, -6, 9, 9, 21, -30, 9, -29, 11, -1, 17, -8, -6, 10, 18, -13, 30, 8, 26, 23, -27, 11, -24, 18, 39, -24, 0, -56, -12, 9, -13
    0x9faf718, 0x9e21509, 0x11ff0be3, 0x120afaf8, 0x1a081ef3, 0xe80be517, 0xe82712, 0xf309f4c8,
    // -100, -19, -22, 18, -8, 54, -52, -23, -44, -13, 7, 52, -3, -15, 33, 7, 19, 8, 17, -17, 21, 29, 23, -33, 59, -35, 21, 22, 37, 10, -13, -10
    0x12eaed9c, 0xe9cc36f8, 0x3407f3d4, 0x721f1fd, 0xef110813, 0xdf171d15, 0x1615dd3b, 0xf6f30a25,
    // 12, 11, 27, 15, 9, -23, 65, -10, -35, 22, -2, 7, -3, 14, 7, 57, 33, -34, 7, -22, -10, 1, 0, 16, -43, 21, -29, -18, 11, 18, -25, -5
    0xf1b0b0c, 0xf641e909, 0x7fe16dd, 0x39070efd, 0xea07de21, 0x100001f6, 0xeee315d5, 0xfbe7120b,
    // -6, 11, -4, -12, -32, 25, -20, -27, 1, -59, -7, 73, -13, -16, 38, -2, 25, -28, -23, -31, -28, 12, 46, -10, -14, -41, -12, -26, 42, 1, -13, -63
    0xf4fc0bfa, 0xe5ec19e0, 0x49f9c501, 0xfe26f0f3, 0xe1e9e419, 0xf62e0ce4, 0xe6f4d7f2, 0xc1f3012a,
    // -42, -2, 14, 22, 10, -35, 50, -69, -27, -38, 57, 3, -13, -44, -6, -1, 46, -33, -17, -24, -13, 4, 34, 20, 15, 43, 38, -8, 1, 56, -38, -26
    0x160efed6, 0xbb32dd0a, 0x339dae5, 0xfffad4f3, 0xe8efdf2e, 0x142204f3, 0xf8262b0f, 0xe6da3801,
    // 39, -1, 33, 61, -16, -108, 7, 11, 49, 5, -6, 25, 41, 29, -35, -25, 28, 1, 37, -60, -46, -16, -23, -54, 17, 17, -58, -13, 50, 45, 20, 11
    0x3d21ff27, 0xb0794f0, 0x19fa0531, 0xe7dd1d29, 0xc425011c, 0xcae9f0d2, 0xf3c61111, 0xb142d32,
    // 4, 30, -16, 4, 49, 10, 25, -56, -42, -16, 8, 1, -9, -128, -21, -52, -12, -21, -29, 6, -14, -37, -8, 20, 69, 31, 82, 20, -15, 4, -14, -4
    0x4f01e04, 0xc8190a31, 0x108f0d6, 0xcceb80f7, 0x6e3ebf4, 0x14f8dbf2, 0x14521f45, 0xfcf204f1,
    // 7, -62, -38, -24, 9, -22, -20, -28, -6, 3, -8, -66, 63, 24, 6, -64, 21, 37, 16, 86, 37, 24, -13, 43, -13, 1, -22, 21, 4, -67, 29, -13
    0xe8dac207, 0xe4ecea09, 0xbef803fa, 0xc006183f, 0x56102515, 0x2bf31825, 0x15ea01f3, 0xf31dbd04,
    // 38, -1, 12, -10, -2, 8, 59, -54, -35, 10, -6, 25, 52, -12, 14, -15, -22, -31, 18, -16, 53, -85, -48, -66, 33, -33, 17, -18, 32, -46, -2, 5
    0xf60cff26, 0xca3b08fe, 0x19fa0add, 0xf10ef434, 0xf012e1ea, 0xbed0ab35, 0xee11df21, 0x5fed220,
    // -23, 3, 33, 5, -3, -19, 48, 21, 28, 10, -66, -56, 19, -42, 13, -48, -31, -34, -28, 47, -45, -1, -26, -39, -60, 1, -22, 21, -31, -10, -23, -5
    0x52103e9, 0x1530edfd, 0xc8be0a1c, 0xd00dd613, 0x2fe4dee1, 0xd9e6ffd3, 0x15ea01c4, 0xfbe9f6e1,
    // -5, 49, -37, -10, 18, -15, -46, -56, -45, 1, -12, -28, 11, -54, -16, -31, -25, 60, -51, 33, -22, -6, 4, -10, 44, -49, 30, 5, 24, -1, 49, -15
    0xf6db31fb, 0xc8d2f112, 0xe4f401d3, 0xe1f0ca0b, 0x21cd3ce7, 0xf604faea, 0x51ecf2c, 0xf131ff18,
    // 46, 13, 27, 23, -5, -16, -36, 34, 6, 65, -24, 10, 4, -21, -40, 52, -35, -1, -7, 6, 25, 33, -7, -8, -33, 6, -5, -24, 31, -20, 55, 1
    0x171b0d2e, 0x22dcf0fb, 0xae84106, 0x34d8eb04, 0x6f9ffdd, 0xf8f92119, 0xe8fb06df, 0x137ec1f,
    // -68, -12, -36, 0, 16, 26, -29, 20, 65, -37, 30, 25, 26, 23, -32, -16, 9, 30, -4, 14, -56, -10, 20, 34, 9, 6, 19, -46, 14, -21, -39, 22
    0xdcf4bc, 0x14e31a10, 0x191edb41, 0xf0e0171a, 0xefc1e09, 0x2214f6c8, 0xd2130609, 0x16d9eb0e,
    // 2, 43, -17, -32, -11, 26, 11, -2, -49, -35, -8, 12, -4, 32, -36, 2, 47, -5, -29, -19, 39, 30, 44, 48, 4, 5, 45, -36, -30, -34, 16, -40
    0xe0ef2b02, 0xfe0b1af5, 0xcf8ddcf, 0x2dc20fc, 0xede3fb2f, 0x302c1e27, 0xdc2d0504, 0xd810dee2,
    // -37, -38, -2, 3, 68, -27, -13, 15, 5, 17, 6, -9, 0, 85, -10, -34, 18, 14, -9, -19, -14, -38, 28, -26, 4, -39, -59, -2, -71, -13, 35, -18
    0x3fedadb, 0xff3e544, 0xf7061105, 0xdef65500, 0xedf70e12, 0xe61cdaf2, 0xfec5d904, 0xee23f3b9,
    // -1, -36, -36, -31, -12, 51, 29, 10, 26, -47, 33, -8, 31, 13, 61, 22, -3, -4, 56, 45, 14, -21, 9, 5, 13, 46, -2, -22, -16, -57, 41, -36
    0xe1dcdcff, 0xa1d33f4, 0xf821d11a, 0x163d0d1f, 0x2d38fcfd, 0x509eb0e, 0xeafe2e0d, 0xdc29c7f0,
    // -24, 0, -35, -52, -25, -15, -24, 61, -29, 13, 41, -54, 10, 10, 8, -36, -4, 6, -29, -49, 4, 23, 13, -40, 15, 13, -16, 1, -10, 14, -23, -29
    0xccdd00e8, 0x3de8f1e7, 0xca290de3, 0xdc080a0a, 0xcfe306fc, 0xd80d1704, 0x1f00d0f, 0xe3e90ef6,
    // -66, 54, 0, -25, -2, 13, -4, -9, -2, -32, -76, 4, 9, -28, -8, -11, -68, -4, 3, 41, -3, -11, -40, -18, 35, 33, -4, 27, -23, 38, -40, -12
    0xe70036be, 0xf7fc0dfe, 0x4b4e0fe, 0xf5f8e409, 0x2903fcbc, 0xeed8f5fd, 0x1bfc2123, 0xf4d826e9,
    // -15, -3, 11, 8, 6, -10, -15, 4, 2, 5, -37, -29, -21, -2, 10, -3, -12, 8, -25, 5, -47, 28, 21, 12, -26, 0, 16, -8, 1, 25, 19, -6
    0x80bfdf1, 0x4f1f606, 0xe3db0502, 0xfd0afeeb, 0x5e708f4, 0xc151cd1, 0xf81000e6, 0xfa131901,
    // 38, -15, -24, -53, -16, -35, 51, -47, -11, -73, -15, 2, 4, -1, -37, -41, -15, -8, 24, -36, -20, 24, 20, 41, -35, 14, 7, 20, -15, -14, -63, -28
    0xcbe8f126, 0xd133ddf0, 0x2f1b7f5, 0xd7dbff04, 0xdc18f8f1, 0x291418ec, 0x14070edd, 0xe4c1f2f1,
    // 71, 12, 54, -15, 22, -42, 20, 4, 21, -4, -21, -24, 11, 5, -4, 17, 1, -7, 3, -45, 80, 43, -13, -72, 16, 6, -46, 29, 53, 26, 12, -36
    0xf1360c47, 0x414d616, 0xe8ebfc15, 0x11fc050b, 0xd303f901, 0xb8f32b50, 0x1dd20610, 0xdc0c1a35,
    // 29, -18, -11, -16, -32, -33, -65, -13, 25, -4, 31, -2, -19, 21, 48, -2, 44, 0, 7, 27, -25, 12, -36, -30, -12, 21, -39, -4, 5, 36, -4, 29
    0xf0f5ee1d, 0xf3bfdfe0, 0xfe1ffc19, 0xfe3015ed, 0x1b07002c, 0xe2dc0ce7, 0xfcd915f4, 0x1dfc2405,
    // -38, -20, -17, 36, -45, 27, 9, 82, 25, 12, -36, 58, 26, -22, 19, 26, 23, -31, 72, -27, 5, -1, 17, -2, -11, 6, 48, 30, -7, -10, -14, 79
    0x24efecda, 0x52091bd3, 0x3adc0c19, 0x1a13ea1a, 0xe548e117, 0xfe11ff05, 0x1e3006f5, 0x4ff2f6f9,
    // 39, -5, -34, -11, -20, -29, -5, -12, 32, -19, 22, -5, 54, 46, 52, 17, 87, 14, 17, 6, 33, 26, 4, -27, -7, 30, -45, 13, 73, -41, 2, -65
    0xf5defb27, 0xf4fbe3ec, 0xfb16ed20, 0x11342e36, 0x6110e57, 0xe5041a21, 0xdd31ef9, 0xbf02d749,
    // -43, -38, 19, -29, -16, -30, -51, 5, -19, -29, -16, -15, 44, -4, -16, -61, 26, -9, 9, 18, -50, 8, -4, -49, 10, -19, 10, -33, -34, -11, -63, -36
    0xe313dad5, 0x5cde2f0, 0xf1f0e3ed, 0xc3f0fc2c, 0x1209f71a, 0xcffc08ce, 0xdf0aed0a, 0xdcc1f5de,
    // 10, 51, -50, -15, -24, -19, 7, -40, -10, -74, -7, 0, 7, 11, 7, -16, -38, 7, 42, 65, 14, -6, 10, -21, 28, 0, -10, -47, -7, 52, 26, -68
    0xf1ce330a, 0xd807ede8, 0xf9b6f6, 0xf0070b07, 0x412a07da, 0xeb0afa0e, 0xd1f6001c, 0xbc1a34f9,
    // -3, -5, -61, 4, -10, -27, 6, 47, 12, -62, 63, -76, 10, -9, 11, -31, 8, -57, 19, -16, 54, 0, -13, 1, -9, 10, -2, 11, -3, 26, 14, -48
    0x4c3fbfd, 0x2f06e5f6, 0xb43fc20c, 0xe10bf70a, 0xf013c708, 0x1f30036, 0xbfe0af7, 0xd00e1afd,
    // 10, 9, 3, -39, -10, 18, -21, 0, 18, 5, -24, 9, -25, 37, 39, -40, 35, -4, -5, -7, -6, 7, 6, 11, 25, 10, -40, 13, -23, 48, -19, -4
    0xd903090a, 0xeb12f6, 0x9e80512, 0xd82725e7, 0xf9fbfc23, 0xb0607fa, 0xdd80a19, 0xfced30e9,
    // 7, -54, 12, 19, -28, 7, -39, 53, 48, 17, -15, 25, -34, -8, 31, -45, -22, -58, 47, -7, 4, -4, 26, -47, -23, 56, 37, 14, -6, -19, -43, -1
    0x130cca07, 0x35d907e4, 0x19f11130, 0xd31ff8de, 0xf92fc6ea, 0xd11afc04, 0xe2538e9, 0xffd5edfa,
    // 10, -6, -38, 9, -45, -17, 69, -8, 37, -51, 17, 22, 15, -4, 26, 72, -35, -11, -55, -61, -12, -20, 23, -29, -40, 91, 18, 23, -3, 8, -16, -31
    0x9dafa0a, 0xf845efd3, 0x1611cd25, 0x481afc0f, 0xc3c9f5dd, 0xe317ecf4, 0x17125bd8, 0xe1f008fd,
    // 64, 31, 16, -19, -10, -19, -28, 47, -4, 26, 48, -9, -11, -13, 17, -34, -27, -19, 0, -70, 59, 30, 27, 36, -23, -17, -32, -41, 0, 32, -8, -19
    0xed101f40, 0x2fe4edf6, 0xf7301afc, 0xde11f3f5, 0xba00ede5, 0x241b1e3b, 0xd7e0efe9, 0xedf82000,
    // -36, -15, -47, -26, -42, -13, -6, -43, -14, -57, 31, 12, 31, -28, -10, 70, 13, 4, 13, -31, 2, -47, -27, -25, 20, 19, 10, 6, 39, -29, -28, -56
    0xe6d1f1dc, 0xd5faf3d6, 0xc1fc7f2, 0x46f6e41f, 0xe10d040d, 0xe7e5d102, 0x60a1314, 0xc8e4e327,
    // -17, 18, 29, -8, 15, -26, -25, 19, 7, 10, -7, -12, -8, -12, 0, -23, -1, -55, 0, -73, -18, -10, -37, -18, -3, -46, 4, -25, -45, 8, -5, -35
    0xf81d12ef, 0x13e7e60f, 0xf4f90a07, 0xe900f4f8, 0xb700c9ff, 0xeedbf6ee, 0xe704d2fd, 0xddfb08d3,
    // 9, 16, -8, -75, 7, -5, 122, -15, -20, -29, 0, -24, 0, -26, -5, 17, -6, 22, 24, 34, -53, 30, -9, -4, -1, -80, 21, -2, 13, 11, -63, -27
    0xb5f81009, 0xf17afb07, 0xe800e3ec, 0x11fbe600, 0x221816fa, 0xfcf71ecb, 0xfe15b0ff, 0xe5c10b0d,
    // -5, 20, -1, -26, 3, -12, 41, -13, 17, 36, -78, -47, -11, -28, 22, -9, 14, -30, 8, -7, -45, -10, -41, -32, 24, 9, -13, 39, 37, -75, -2, -48
    0xe6ff14fb, 0xf329f403, 0xd1b22411, 0xf716e4f5, 0xf908e20e, 0xe0d7f6d3, 0x27f30918, 0xd0feb525,
    // 24, -18, -31, -52, 14, -43, 23, -2, 19, -24, 2, 31, 0, -25, 39, -51, 14, 5, -9, 0, -20, 11, 15, -13, -2, -70, -35, 32, -9, -70, -37, -38
    0xcce1ee18, 0xfe17d50e, 0x1f02e813, 0xcd27e700, 0xf7050e, 0xf30f0bec, 0x20ddbafe, 0xdadbbaf7,
    // -16, -32, 7, 14, 36, -32, 41, 33, 14, 31, 17, -32, -35, 13, 0, 42, 3, -3, -50, -28, -55, 8, 19, -43, -11, -28, -2, -1, 18, -75, 40, -45
    0xe07e0f0, 0x2129e024, 0xe0111f0e, 0x2a000ddd, 0xe4cefd03, 0xd51308c9, 0xfffee4f5, 0xd328b512,
    // -42, 4, 19, -29, -14, -42, -1, 20, 44, -35, 50, -18, 13, 23, -46, 30, -10, 1, 25, -9, -9, 4, -25, 4, -51, 6, -14, -20, -1, 13, -26, -37
    0xe31304d6, 0x14ffd6f2, 0xee32dd2c, 0x1ed2170d, 0xf71901f6, 0x4e704f7, 0xecf206cd, 0xdbe60dff,
    // -5, 23, 5, 16, -20, -12, 6, 5, 6, 7, -21, 28, -14, -40, -7, 10, -12, 27, 12, -46, -27, 2, 30, -70, -19, -51, -17, -25, -8, -39, 36, -20
    0x100517fb, 0x506f4ec, 0x1ceb0706, 0xaf9d8f2, 0xd20c1bf4, 0xba1e02e5, 0xe7efcded, 0xec24d9f8,
    // -26, -12, 1, -36, 17, 35, -2, 10, -27, 27, 37, 41, -59, 58, -20, -30, 1, -44, 8, 17, 19, -21, 51, 18, 43, 8, -4, 27, 38, -6, -40, 54
    0xdc01f4e6, 0xafe2311, 0x29251be5, 0xe2ec3ac5, 0x1108d401, 0x1233eb13, 0x1bfc082b, 0x36d8fa26,
    // 11, -4, 69, -46, 17, 41, 84, -22, 49, 59, 3, -42, 27, -11, 30, -22, 72, -17, -5, 56, -5, 15, -25, 13, 22, 20, -28, 1, -25, 18, 20, 44
    0xd245fc0b, 0xea542911, 0xd6033b31, 0xea1ef51b, 0x38fbef48, 0xde70ffb, 0x1e41416, 0x2c1412e7,
    // 1, 24, 20, -66, -9, 42, 18, -4, -48, 50, 20, -46, 24, 72, 16, 17, -12, 61, 36, 19, 58, 21, -6, 20, -31, 20, -42, 41, 29, 41, -83, 42
    0xbe141801, 0xfc122af7, 0xd21432d0, 0x11104818, 0x13243df4, 0x14fa153a, 0x29d614e1, 0x2aad291d,
    // 37, -36, 49, -10, 10, 66, -2, -47, -7, 70, -83, 31, 64, 2, -60, 18, -14, 2, 63, 30, -27, 7, -28, 16, 7, 62, -25, 27, 19, -67, 14, 52
    0xf631dc25, 0xd1fe420a, 0x1fad46f9, 0x12c40240, 0x1e3f02f2, 0x10e407e5, 0x1be73e07, 0x340ebd13,
    // -18, 1, 17, -24, 4, 8, 24, 12, 25, 10, 38, -32, 29, -38, 57, 62, -4, -67, -3, 21, 23, -85, 49, -32, 23, -19, -12, -33, -26, 23, 2, 20
    0xe81101ee, 0xc180804, 0xe0260a19, 0x3e39da1d, 0x15fdbdfc, 0xe031ab17, 0xdff4ed17, 0x140217e6,
    // -8, 21, -22, 22, 36, -12, -45, -20, -7, -27, -30, 41, -26, -4, -81, -61, -13, 35, 42, -4, 28, -41, 56, 41, 26, 20, 23, -86, 11, -9, -22, -9
    0x16ea15f8, 0xecd3f424, 0x29e2e5f9, 0xc3affce6, 0xfc2a23f3, 0x2938d71c, 0xaa17141a, 0xf7eaf70b,
    // 8, 2, 74, -6, 64, -28, -2, 66, -24, 73, 6, -33, 45, -63, 44, 18, 15, -14, -116, 5, 28, -22, 51, -3, -17, 18, 1, 16, -106, -13, -26, 73
    0xfa4a0208, 0x42fee440, 0xdf0649e8, 0x122cc12d, 0x58cf20f, 0xfd33ea1c, 0x100112ef, 0x49e6f396,
    // 43, -2, 33, 80, 7, 3, -12, 34, 19, 34, -4, 81, -55, 57, -5, 25, -2, 50, 64, 59, 64, -40, 93, -12, -27, -14, 21, -28, 3, 15, 29, 25
    0x5021fe2b, 0x22f40307, 0x51fc2213, 0x19fb39c9, 0x3b4032fe, 0xf45dd840, 0xe415f2e5, 0x191d0f03,
    // -6, -13, 30, 16, 26, -5, -50, 46, -3, 93, 23, -34, -7, 9, -43, -18, -18, -28, 65, 5, 12, -23, 33, 11, -29, 2, -16, 35, 59, -4, 3, 102
    0x101ef3fa, 0x2ecefb1a, 0xde175dfd, 0xeed509f9, 0x541e4ee, 0xb21e90c, 0x23f002e3, 0x6603fc3b,
    // 20, 0, 20, 5, -7, 63, 4, -26, -25, 26, 10, 44, -67, -17, -69, 53, 1, 41, 48, 101, 46, 24, -35, 40, -13, 20, -40, -78, -4, -1, 25, 83
    0x5140014, 0xe6043ff9, 0x2c0a1ae7, 0x35bbefbd, 0x65302901, 0x28dd182e, 0xb2d814f3, 0x5319fffc,
    // 29, 7, -2, 22, 26, 12, -67, -5, -11, -14, 0, -39, 1, 25, 23, 10, -24, -31, 6, -2, 49, -38, 2, -15, -18, -15, -11, -24, -12, -21, 37, -15
    0x16fe071d, 0xfbbd0c1a, 0xd900f2f5, 0xa171901, 0xfe06e1e8, 0xf102da31, 0xe8f5f1ee, 0xf125ebf4,
    // -7, -1, -31, -20, 12, -20, -71, 5, 9, -41, 0, -52, -45, 0, -21, 44, -47, -11, -76, -19, 2, 15, -30, -7, -32, -26, -15, -59, 10, 4, 24, -46
    0xece1fff9, 0x5b9ec0c, 0xcc00d709, 0x2ceb00d3, 0xedb4f5d1, 0xf9e20f02, 0xc5f1e6e0, 0xd218040a,
    // 9, -19, 5, -44, -19, -30, -37, -6, 35, 29, 18, 44, -34, 28, 44, -76, 19, 5, 19, 37, -74, 24, 33, -27, 0, -68, -73, 27, 5, -3, -1, 15
    0xd405ed09, 0xfadbe2ed, 0x2c121d23, 0xb42c1cde, 0x25130513, 0xe52118b6, 0x1bb7bc00, 0xffffd05,
    // -11, 6, -8, -19, -11, 29, 19, 70, 29, 0, 5, -54, 15, 22, 38, -70, 32, -18, -44, 32, 9, 4, -11, -50, 6, 7, 56, -16, -13, -31, -6, 51
    0xedf806f5, 0x46131df5, 0xca05001d, 0xba26160f, 0x20d4ee20, 0xcef50409, 0xf0380706, 0x33fae1f3,
    // -6, 19, -35, 26, 4, 20, 64, -8, 18, -18, -4, 14, -15, -53, 14, 68, -25, -4, -45, 0, 16, 28, 18, 1, 24, 13, 54, -24, -4, -26, 17, 7
    0x1add13fa, 0xf8401404, 0xefcee12, 0x440ecbf1, 0xd3fce7, 0x1121c10, 0xe8360d18, 0x711e6fc,
    // -10, -37, 5, -7, 4, 12, -28, -5, 26, -11, 16, -30, 18, -4, 4, 18, 9, 5, -1, 2, 13, -12, -29, 51, -18, 10, -28, -14, -17, 17, -9, 18
    0xf905dbf6, 0xfbe40c04, 0xe210f51a, 0x1204fc12, 0x2ff0509, 0x33e3f40d, 0xf2e40aee, 0x12f711ef,
    // -8, -23, -12, -35, -57, -42, 44, -17, 22, -64, -31, -33, 19, -21, -66, -10, 47, -11, -32, -22, 0, -10, -7, 8, -36, 37, 1, 35, 3, 6, -49, -40
    0xddf4e9f8, 0xef2cd6c7, 0xdfe1c016, 0xf6beeb13, 0xeae0f52f, 0x8f9f600, 0x230125dc, 0xd8cf0603,
    // 22, -4, 47, 9, 32, -15, -34, -15, -11, 33, -49, 50, -54, -10, -11, -30, -22, -55, 27, -70, 21, -5, -4, -6, 18, -41, 6, -33, -3, -40, -14, -36
    0x92ffc16, 0xf1def120, 0x32cf21f5, 0xe2f5f6ca, 0xba1bc9ea, 0xfafcfb15, 0xdf06d712, 0xdcf2d8fd,
    // -3, 12, -23, -10, -45, 10, -38, -34, 68, -88, 25, 67, 37, -5, -55, -42, -24, -6, -16, 39, 34, 27, 55, 14, 70, 54, 52, 18, -28, -6, 26, -104
    0xf6e90cfd, 0xdeda0ad3, 0x4319a844, 0xd6c9fb25, 0x27f0fae8, 0xe371b22, 0x12343646, 0x981afae4,
    // 39, -2, -7, 0, -24, -51, 75, -23, 32, 10, -23, -3, -41, -43, 21, -21, 92, -38, 0, -74, -1, -17, -30, 72, -9, -16, 18, -6, 32, -1, -22, -77
    0xf9fe27, 0xe94bcde8, 0xfde90a20, 0xeb15d5d7, 0xb600da5c, 0x48e2efff, 0xfa12f0f7, 0xb3eaff20,
    // 0, 22, 9, -21, -14, -22, -57, 14, -26, -61, 26, -16, -23, -32, -27, -27, 4, 11, 35, 38, 1, -13, -16, 79, -11, 54, 17, 78, 39, -3, -51, -59
    0xeb091600, 0xec7eaf2, 0xf01ac3e6, 0xe5e5e0e9, 0x26230b04, 0x4ff0f301, 0x4e1136f5, 0xc5cdfd27,
    // 78, 69, 12, 19, 9, -75, 33, -30, 50, 59, -96, 2, 32, 0, -2, -24, 15, -22, -21, -61, 4, 13, -1, 29, 2, 26, -14, -3, 65, -71, 5, -63
    0x130c454e, 0xe221b509, 0x2a03b32, 0xe8fe0020, 0xc3ebea0f, 0x1dff0d04, 0xfdf21a02, 0xc105b941,
};
static const uint embedded_encoder3_ResidualBlock_0_body_pw_contract_bias_dwords[16] = {
    // 8.85e-05, -3.46e-06, -6.62e-05, -0.0001395, -0.0001062, -3.39e-05, 5.907e-05, 6.89e-05, -1.8e-05, -1.31e-05, 0.0001261, -1.377e-05, 0.0001137, 0.0001045, -4.9e-05, 8.65e-05
    0x803a05cd, 0x88928457, 0x823986f6, 0x48403df, 0x80dc812e, 0x80e70822, 0x6d90774, 0x5ab8336,
    // -0.000144, -2.915e-05, -3.064e-05, 3.95e-05, -2.59e-05, 0.0001021, 4.065e-05, -4.5e-06, 6.47e-05, 4.11e-05, -1.22e-05, 4.57e-05, 8.8e-05, -3.65e-05, 6.57e-05, -0.0001692
    0x81e988b8, 0x2978202, 0x6b181b3, 0x804b02aa, 0x2b2043d, 0x2ff80cd, 0x826405c4, 0x898b044e,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass4(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = {
        uint3(1920, 1080, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 32), // threadGroupSliceSize
        uint3(1920, 1080, 32), // storageSize
        uint3(32, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        132710400, // threadGroupStorageByteOffset
        storage_Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped };
    
    const ConstantBufferStorage<576> storage_embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.006512838881462812, storage_embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = { embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004491162020713091, storage_embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_encoder3_ResidualBlock_0_body_pw_expand_bias = { embedded_encoder3_ResidualBlock_0_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_encoder3_ResidualBlock_0_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_0_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004521757364273071, storage_embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder3_ResidualBlock_0_body_pw_contract_bias = { embedded_encoder3_ResidualBlock_0_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder3_ResidualBlock_0_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_0_body_pw_contract_bias };
    
    // /encoder3/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_8 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_8 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_8 = uint3(64, 1, 32);
    const uint3 storageSize_slice_8 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_8 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_8 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_8 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_8 = dot(groupStart_slice_8, tensorByteStrides_slice_8);
    const RWBufferStorage storage_slice_8 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_8 = { logicalSize_slice_8, groupStart_slice_8, groupSize_slice_8, storageSize_slice_8, tensorByteStrides_slice_8, paddingBegin_slice_8, paddingEnd_slice_8, threadGroupByteOffsetInTensor_slice_8 + 199065600, storage_slice_8 };
    // Fusedquantized_/encoder3/ResidualBlock_0/residual_func/Concat_quantized_/encoder3/ResidualBlock_0/body/spatial_mixing/partial_conv/Conv_quantized_/encoder3/ResidualBlock_0/body/spatial_mixing/Concat_quantized_/encoder3/ResidualBlock_0/body/pw_expand/Conv_/encoder3/ResidualBlock_0/body/pw_expand_act/Relu_quantized_/encoder3/ResidualBlock_0/body/pw_contract/Conv_/encoder3/ResidualBlock_0/Add (32, 1080, 1920), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,) -> (32, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<32, 1>(0.016891753301024437, 0.02134803496301174, 0.02016993798315525, 0.014793277718126774, 0.020871102809906006, Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped, embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias, embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_0_body_pw_expand_bias, embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_0_body_pw_contract_bias, slice_8, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_4
#ifdef MLSR_PASS_4_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass4_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /encoder3/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_9 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_9 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_9 = uint3(32, 1, 32);
    const uint3 storageSize_slice_9 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_9 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_9 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_9 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_9 = dot(groupStart_slice_9, tensorByteStrides_slice_9);
    const RWBufferStorage storage_slice_9 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_9 = { logicalSize_slice_9, groupStart_slice_9, groupSize_slice_9, storageSize_slice_9, tensorByteStrides_slice_9, paddingBegin_slice_9, paddingEnd_slice_9, threadGroupByteOffsetInTensor_slice_9 + 199065600, storage_slice_9 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_9, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_4_POST


#ifdef MLSR_PASS_5
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 6, -13, -9, 7, 33, -29, 4, 6, 2, 11, 0, 2, -10, -5, 9, 13, 27, -8, -11, 6, 13, -11, 1, -21, -6, 17, 10, -43, -8, -25, 17, 21
    0x7f7f306, 0x604e321, 0x2000b02, 0xd09fbf6, 0x6f5f81b, 0xeb01f50d, 0xd50a11fa, 0x1511e7f8,
    // 19, -5, -1, -3, 4, 6, 16, 17, -9, 23, 16, -2, -25, -28, 23, -1, 22, 12, 22, 29, 20, 23, 1, -30, 10, 40, -28, -26, -24, 6, -5, 15
    0xfdfffb13, 0x11100604, 0xfe1017f7, 0xff17e4e7, 0x1d160c16, 0xe2011714, 0xe6e4280a, 0xffb06e8,
    // -38, 6, -20, -28, 45, 30, 11, -55, 16, 38, -17, 39, 34, 69, -37, 35, 38, 39, 38, 22, -13, -4, 17, -15, 13, 38, -1, -23, -76, -10, -22, -30
    0xe4ec06da, 0xc90b1e2d, 0x27ef2610, 0x23db4522, 0x16262726, 0xf111fcf3, 0xe9ff260d, 0xe2eaf6b4,
    // -16, -14, -5, -1, -23, -9, 6, 6, -18, 8, 14, 8, 20, 6, 14, 13, -24, 19, 11, -20, -41, -28, -17, 16, 6, -41, 15, 5, -9, -17, 24, -5
    0xfffbf2f0, 0x606f7e9, 0x80e08ee, 0xd0e0614, 0xec0b13e8, 0x10efe4d7, 0x50fd706, 0xfb18eff7,
    // -13, 37, -10, 7, -45, -33, 11, 30, -14, -8, -13, 13, 4, 8, 31, -28, -7, -14, -2, -9, -20, -19, 6, -2, 5, 2, 5, 1, -15, -18, -9, -4
    0x7f625f3, 0x1e0bdfd3, 0xdf3f8f2, 0xe41f0804, 0xf7fef2f9, 0xfe06edec, 0x1050205, 0xfcf7eef1,
    // 22, -3, -27, -2, -43, -2, 14, -27, -25, 61, 29, -50, -12, -45, -5, -38, -3, 13, -4, -11, -28, 2, 12, 16, -3, 18, 3, 10, 8, -8, 13, -21
    0xfee5fd16, 0xe50efed5, 0xce1d3de7, 0xdafbd3f4, 0xf5fc0dfd, 0x100c02e4, 0xa0312fd, 0xeb0df808,
    // -17, -16, 27, -23, -31, -4, 30, -7, -13, 18, -3, -32, -16, -13, -6, 2, 26, -65, 37, 30, 92, -47, -17, 64, 27, -106, -6, -8, -24, -10, 37, 42
    0xe91bf0ef, 0xf91efce1, 0xe0fd12f3, 0x2faf3f0, 0x1e25bf1a, 0x40efd15c, 0xf8fa961b, 0x2a25f6e8,
    // -20, 54, 46, -17, 4, -6, 12, 9, 6, 7, -6, 4, 22, 18, 12, 13, -13, -15, -6, -22, 0, 3, -4, 7, 13, 17, 0, -3, 11, -2, -3, -15
    0xef2e36ec, 0x90cfa04, 0x4fa0706, 0xd0c1216, 0xeafaf1f3, 0x7fc0300, 0xfd00110d, 0xf1fdfe0b,
    // -4, 3, -28, -1, 6, 14, -11, 3, -1, 4, -18, 6, 25, 4, -3, -5, -6, 26, -15, 13, 23, 0, -3, 8, -6, 5, 5, 27, 49, 15, -2, 13
    0xffe403fc, 0x3f50e06, 0x6ee04ff, 0xfbfd0419, 0xdf11afa, 0x8fd0017, 0x1b0505fa, 0xdfe0f31,
    // 15, -8, -11, 9, 3, 3, 0, -21, -7, 16, 10, -22, -10, -10, 7, -2, 42, -47, -4, 30, 21, 11, 14, 1, -3, 2, -7, -3, -27, -48, 14, -17
    0x9f5f80f, 0xeb000303, 0xea0a10f9, 0xfe07f6f6, 0x1efcd12a, 0x10e0b15, 0xfdf902fd, 0xef0ed0e5,
    // 6, 9, 6, 15, 3, 0, 2, -25, -12, 14, 13, 0, 1, -11, 12, 0, -16, -39, 1, 9, 3, -10, 2, -16, -16, 27, 1, -6, -1, 13, 10, 9
    0xf060906, 0xe7020003, 0xd0ef4, 0xcf501, 0x901d9f0, 0xf002f603, 0xfa011bf0, 0x90a0dff,
    // -65, -80, -35, 33, -42, -10, 43, 9, -15, -39, -45, 75, 20, -57, 19, 58, -14, 54, 4, -25, -27, -15, -18, 28, 11, 47, -35, 20, 48, 59, 12, 20
    0x21ddb0bf, 0x92bf6d6, 0x4bd3d9f1, 0x3a13c714, 0xe70436f2, 0x1ceef1e5, 0x14dd2f0b, 0x140c3b30,
    // 24, -1, -9, -13, 2, 6, -11, 7, 4, 0, 16, 0, -16, -3, 14, -3, 22, 6, 39, -7, 18, 10, 12, -25, 45, -6, -19, -22, -31, 0, 14, -26
    0xf3f7ff18, 0x7f50602, 0x100004, 0xfd0efdf0, 0xf9270616, 0xe70c0a12, 0xeaedfa2d, 0xe60e00e1,
    // -7, 20, 10, -13, 4, -15, -21, 2, 14, 3, 13, 22, 4, -9, 12, -17, 6, 19, 20, 17, 7, -20, 8, 26, 7, -32, 0, 29, 3, 0, -1, 1
    0xf30a14f9, 0x2ebf104, 0x160d030e, 0xef0cf704, 0x11141306, 0x1a08ec07, 0x1d00e007, 0x1ff0003,
    // 21, 30, 17, 31, 12, 5, 25, 7, -12, 44, 30, 3, 9, -18, -16, -21, 11, -36, -12, -6, 11, 14, 14, 10, 2, -21, -7, -2, 6, -8, 13, 3
    0x1f111e15, 0x719050c, 0x31e2cf4, 0xebf0ee09, 0xfaf4dc0b, 0xa0e0e0b, 0xfef9eb02, 0x30df806,
    // 34, 20, 2, 5, -4, 21, 17, -14, 20, 29, 5, -12, 37, 8, -3, 7, -52, -7, -17, 51, -38, -38, -102, 79, -25, -5, 92, 76, 36, 4, -28, -32
    0x5021422, 0xf21115fc, 0xf4051d14, 0x7fd0825, 0x33eff9cc, 0x4f9adada, 0x4c5cfbe7, 0xe0e40424,
    // -13, -60, 2, 0, 15, 0, -7, -86, 27, 5, 0, -37, 6, 7, -44, -25, 19, -4, 1, 1, 20, -16, 13, -12, 14, 10, -11, -7, 7, 0, -9, 3
    0x2c4f3, 0xaaf9000f, 0xdb00051b, 0xe7d40706, 0x101fc13, 0xf40df014, 0xf9f50a0e, 0x3f70007,
    // -27, -14, 12, -8, 2, 2, 17, 24, -13, -16, 1, 16, -3, 16, 22, -42, 1, -45, -6, -9, 3, 0, -6, -39, 13, 2, -23, -20, 0, -6, 1, -11
    0xf80cf2e5, 0x18110202, 0x1001f0f3, 0xd61610fd, 0xf7fad301, 0xd9fa0003, 0xece9020d, 0xf501fa00,
    // -6, 16, 9, 2, -16, 1, -7, -24, -5, 14, 3, 18, 18, 5, 10, -22, -10, 22, 14, -2, -21, 14, -20, -15, 0, 39, -1, 14, -11, 32, 30, -25
    0x20910fa, 0xe8f901f0, 0x12030efb, 0xea0a0512, 0xfe0e16f6, 0xf1ec0eeb, 0xeff2700, 0xe71e20f5,
    // -1, 6, 11, -13, -21, -13, -11, -18, 1, 28, -6, 9, 4, 8, 18, -26, -19, -1, -15, -16, -17, 6, -16, -23, 16, 13, 10, 37, 20, 9, 33, -26
    0xf30b06ff, 0xeef5f3eb, 0x9fa1c01, 0xe6120804, 0xf0f1ffed, 0xe9f006ef, 0x250a0d10, 0xe6210914,
    // 19, -56, -84, -1, 73, -14, -2, 56, -26, -21, 25, 22, 28, 7, -6, -14, 1, -36, -11, 54, -10, 10, -6, -21, 7, -16, 38, 11, -23, -53, 6, -6
    0xffacc813, 0x38fef249, 0x1619ebe6, 0xf2fa071c, 0x36f5dc01, 0xebfa0af6, 0xb26f007, 0xfa06cbe9,
    // -4, 19, 12, -9, -21, -5, -11, -5, 18, 4, -5, 3, 2, -3, 12, -2, 8, 12, 23, 28, -12, -9, -3, 1, 1, 16, 13, -8, -52, 6, 23, 42
    0xf70c13fc, 0xfbf5fbeb, 0x3fb0412, 0xfe0cfd02, 0x1c170c08, 0x1fdf7f4, 0xf80d1001, 0x2a1706cc,
    // 21, 0, 10, 27, 8, -17, -2, -14, 0, -14, 8, -3, -19, -10, 13, 25, -15, 0, 0, 14, -9, 1, -17, -2, -12, 3, -7, -25, -6, 3, -14, 18
    0x1b0a0015, 0xf2feef08, 0xfd08f200, 0x190df6ed, 0xe0000f1, 0xfeef01f7, 0xe7f903f4, 0x12f203fa,
    // -56, -4, -27, 1, -47, 25, -39, -55, -28, 0, -8, -35, 5, 42, -15, 41, 16, 23, 0, 4, -13, -5, 3, 16, -13, 20, -4, 1, -12, 9, -2, 16
    0x1e5fcc8, 0xc9d919d1, 0xddf800e4, 0x29f12a05, 0x4001710, 0x1003fbf3, 0x1fc14f3, 0x10fe09f4,
    // 31, -6, 4, -2, 8, -12, -15, 4, 19, 0, -25, -29, -13, -18, -7, 32, 35, -55, -128, -9, 18, -38, -10, 50, 17, -69, 16, 23, 14, -35, 47, 11
    0xfe04fa1f, 0x4f1f408, 0xe3e70013, 0x20f9eef3, 0xf780c923, 0x32f6da12, 0x1710bb11, 0xb2fdd0e,
    // 22, 39, 20, -11, -1, -21, 33, 33, -14, 21, -25, -1, -4, -6, 16, -43, 8, 14, 6, 22, 24, -8, -3, -13, 2, 0, -13, 5, -18, 1, -8, 0
    0xf5142716, 0x2121ebff, 0xffe715f2, 0xd510fafc, 0x16060e08, 0xf3fdf818, 0x5f30002, 0xf801ee,
    // -4, -11, -16, -26, -5, 30, -32, -4, 3, 3, 3, 3, 16, -12, -24, -40, 6, 25, 8, -6, 22, 9, 13, 12, -1, 15, 12, 6, -15, -3, 17, -22
    0xe6f0f5fc, 0xfce01efb, 0x3030303, 0xd8e8f410, 0xfa081906, 0xc0d0916, 0x60c0fff, 0xea11fdf1,
    // 8, 8, 16, 3, -16, 11, 6, 16, -29, 3, 17, 0, -2, 1, -5, -1, 34, 10, 9, 30, -11, -6, 33, 2, -42, 31, 49, 6, -14, -21, -1, -22
    0x3100808, 0x10060bf0, 0x1103e3, 0xfffb01fe, 0x1e090a22, 0x221faf5, 0x6311fd6, 0xeaffebf2,
    // 16, -26, -2, 14, -16, 10, 5, -11, -18, -11, 1, -9, -18, -15, -6, 4, -10, -2, 12, 13, 1, 6, 10, 24, -31, -14, 30, 16, 0, -13, 14, -8
    0xefee610, 0xf5050af0, 0xf701f5ee, 0x4faf1ee, 0xd0cfef6, 0x180a0601, 0x101ef2e1, 0xf80ef300,
    // -80, 96, -56, -77, 0, 45, -47, 36, 78, -53, 9, 29, 19, 89, 73, -23, 15, -17, -24, 15, -4, -11, 4, 2, -22, -28, -22, -5, -8, -7, -5, 3
    0xb3c860b0, 0x24d12d00, 0x1d09cb4e, 0xe9495913, 0xfe8ef0f, 0x204f5fc, 0xfbeae4ea, 0x3fbf9f8,
    // 21, -11, 11, 6, 3, 1, -6, -4, 13, 24, -3, -19, -6, 3, -10, 22, 20, -8, -2, 12, 26, -13, 3, -19, 10, 32, -8, 6, 21, 18, -33, 15
    0x60bf515, 0xfcfa0103, 0xedfd180d, 0x16f603fa, 0xcfef814, 0xed03f31a, 0x6f8200a, 0xfdf1215,
    // 15, -38, 7, -10, 5, -17, -10, -14, 25, 0, -22, -33, -14, 12, -27, 17, 10, -14, -14, -12, 3, -7, -11, -29, 7, 6, 0, -14, 12, -12, 15, 12
    0xf607da0f, 0xf2f6ef05, 0xdfea0019, 0x11e50cf2, 0xf4f2f20a, 0xe3f5f903, 0xf2000607, 0xc0ff40c,
    // 8, -23, -21, 11, -2, 11, -20, -15, -8, -14, -4, -14, -3, 8, 1, -2, 8, 22, -1, 6, 24, -15, 5, -14, -1, 16, 5, 10, 17, 1, 11, 2
    0xbebe908, 0xf1ec0bfe, 0xf2fcf2f8, 0xfe0108fd, 0x6ff1608, 0xf205f118, 0xa0510ff, 0x20b0111,
    // -37, -50, -8, -18, -1, -9, 13, -15, -23, 7, -9, 14, 25, 11, 22, 21, 33, 63, 27, 7, -36, -14, -29, -15, 76, -30, 48, -45, -62, 27, -66, 35
    0xeef8cedb, 0xf10df7ff, 0xef707e9, 0x15160b19, 0x71b3f21, 0xf1e3f2dc, 0xd330e24c, 0x23be1bc2,
    // 22, 34, 24, 18, 21, -6, 15, 21, -14, 7, -10, 51, -15, -9, 45, -28, -1, 2, -8, 4, 5, -12, -17, -16, -10, -7, -10, 18, 23, 3, 14, 3
    0x12182216, 0x150ffa15, 0x33f607f2, 0xe42df7f1, 0x4f802ff, 0xf0eff405, 0x12f6f9f6, 0x30e0317,
    // -16, -1, -16, 2, -19, 31, -25, 18, -22, -31, 13, 4, 24, 15, 30, -60, 1, 34, 7, -1, 4, 13, 4, 9, -3, 6, 8, 29, -2, 1, 35, -30
    0x2f0fff0, 0x12e71fed, 0x40de1ea, 0xc41e0f18, 0xff072201, 0x9040d04, 0x1d0806fd, 0xe22301fe,
    // -16, -20, -11, -13, 14, -19, 3, -8, -13, -10, -15, -2, 6, 11, 1, 0, -8, -7, -12, -21, 15, -12, -6, -35, -29, 5, 1, -35, 18, 19, 3, 3
    0xf3f5ecf0, 0xf803ed0e, 0xfef1f6f3, 0x10b06, 0xebf4f9f8, 0xddfaf40f, 0xdd0105e3, 0x3031312,
    // -1, 18, 0, -22, 19, 8, 6, 16, -15, 14, 9, 7, 15, 9, 26, 5, -4, -31, -1, -9, 21, -2, 19, -22, 1, 17, -46, -7, -4, 12, 11, -7
    0xea0012ff, 0x10060813, 0x7090ef1, 0x51a090f, 0xf7ffe1fc, 0xea13fe15, 0xf9d21101, 0xf90b0cfc,
    // -29, -72, 50, -61, -75, 10, 39, 63, 12, -35, -66, 72, -6, -55, 14, -9, 27, -15, 27, 42, 21, -1, 28, -1, -23, 0, 15, 8, -31, -29, -13, -3
    0xc332b8e3, 0x3f270ab5, 0x48bedd0c, 0xf70ec9fa, 0x2a1bf11b, 0xff1cff15, 0x80f00e9, 0xfdf3e3e1,
    // -16, 0, -7, -10, 5, 12, -11, 7, 18, 21, 4, -6, 22, -6, 8, 19, -1, -1, 35, 4, 20, -43, -4, -15, 26, 36, -3, -22, 4, -14, -9, 46
    0xf6f900f0, 0x7f50c05, 0xfa041512, 0x1308fa16, 0x423ffff, 0xf1fcd514, 0xeafd241a, 0x2ef7f204,
    // 2, 34, 12, 8, -6, 2, -4, 36, 16, 17, 29, 5, -2, -5, 2, 21, -3, 1, 8, 1, 10, -7, 7, 8, 9, 11, -4, 5, -16, 10, 6, -13
    0x80c2202, 0x24fc02fa, 0x51d1110, 0x1502fbfe, 0x10801fd, 0x807f90a, 0x5fc0b09, 0xf3060af0,
    // -32, 25, -9, -19, -1, -15, -21, -26, 6, 18, -12, 5, 17, 40, 8, -4, -4, -12, 3, -10, 5, 6, -4, 1, 13, 2, -7, 1, -6, 5, -1, -5
    0xedf719e0, 0xe6ebf1ff, 0x5f41206, 0xfc082811, 0xf603f4fc, 0x1fc0605, 0x1f9020d, 0xfbff05fa,
    // -29, -14, 9, -21, 6, 10, 27, -10, -15, 47, 10, -22, -4, -1, 17, -18, -27, 15, -39, 29, -37, -14, -42, 11, 79, 57, 13, 42, -23, -112, 5, 20
    0xeb09f2e3, 0xf61b0a06, 0xea0a2ff1, 0xee11fffc, 0x1dd90fe5, 0xbd6f2db, 0x2a0d394f, 0x140590e9,
    // 13, 7, -14, 24, 3, -21, 28, -17, -19, 4, -20, -15, 27, 0, -10, 15, -6, -4, 6, 4, -4, 11, 19, 2, -11, -6, -5, -4, -25, 9, -5, -17
    0x18f2070d, 0xef1ceb03, 0xf1ec04ed, 0xff6001b, 0x406fcfa, 0x2130bfc, 0xfcfbfaf5, 0xeffb09e7,
    // -12, -8, -26, 18, 6, 0, 14, 2, -44, -27, 8, 6, -9, -2, 1, 14, -2, -16, 6, 8, 2, 27, 10, 9, -16, -4, 2, -17, -9, 1, -23, 15
    0x12e6f8f4, 0x20e0006, 0x608e5d4, 0xe01fef7, 0x806f0fe, 0x90a1b02, 0xef02fcf0, 0xfe901f7,
    // -5, -19, -21, -4, -4, -2, 7, -31, 4, -6, -2, -5, 0, -9, -8, -5, 53, -40, -46, 15, 1, -5, 16, -27, -12, 14, 14, -36, -3, -24, -29, -11
    0xfcebedfb, 0xe107fefc, 0xfbfefa04, 0xfbf8f700, 0xfd2d835, 0xe510fb01, 0xdc0e0ef4, 0xf5e3e8fd,
    // 10, 19, -3, -2, 10, -9, 10, 12, 1, 17, 23, 3, 2, -4, 11, 4, 13, -14, -8, 16, 12, -4, 2, -13, 18, -24, -28, -4, 9, -16, -19, 24
    0xfefd130a, 0xc0af70a, 0x3171101, 0x40bfc02, 0x10f8f20d, 0xf302fc0c, 0xfce4e812, 0x18edf009,
    // -15, -30, -29, -35, 12, 93, -103, 43, 3, 48, -99, -61, 8, 0, 6, -83, -9, 44, 7, 37, -11, -4, 16, 25, -17, 31, -5, 28, 7, -12, 6, 28
    0xdde3e2f1, 0x2b995d0c, 0xc39d3003, 0xad060008, 0x25072cf7, 0x1910fcf5, 0x1cfb1fef, 0x1c06f407,
    // -2, 1, -7, 0, -10, -16, 12, 3, 10, -17, 18, 7, 16, -13, 1, 2, 5, -8, -15, 35, -13, 17, 13, 27, -10, -57, 41, -9, -11, -4, 16, 9
    0xf901fe, 0x30cf0f6, 0x712ef0a, 0x201f310, 0x23f1f805, 0x1b0d11f3, 0xf729c7f6, 0x910fcf5,
    // 0, 52, 3, -1, -17, -10, 4, 29, 8, 8, 25, 19, 7, -13, 17, 3, -1, 5, 10, 5, 6, 12, -12, 11, 10, -8, -11, 0, -6, -11, -2, 21
    0xff033400, 0x1d04f6ef, 0x13190808, 0x311f307, 0x50a05ff, 0xbf40c06, 0xf5f80a, 0x15fef5fa,
    // -1, 5, 9, 28, 8, 9, -14, 20, 0, -9, 3, 15, -3, 26, -10, 35, 6, -15, 3, 9, 3, 14, -21, 4, 5, -9, -2, -6, -4, 13, -19, 31
    0x1c0905ff, 0x14f20908, 0xf03f700, 0x23f61afd, 0x903f106, 0x4eb0e03, 0xfafef705, 0x1fed0dfc,
    // -5, -11, 31, 1, -5, -23, 31, -11, -32, 26, 16, -2, 15, -24, 16, 16, 41, -55, 50, -74, 51, -85, 74, 28, 20, 44, 9, 55, -11, -8, -58, -84
    0x11ff5fb, 0xf51fe9fb, 0xfe101ae0, 0x1010e80f, 0xb632c929, 0x1c4aab33, 0x37092c14, 0xacc6f8f5,
    // 10, 14, 12, -10, -2, -9, 6, -3, -19, 54, -27, -2, 13, 13, 0, 31, 0, -4, 2, 10, 5, 2, -5, -4, 9, 9, -2, -6, 3, -21, -9, 23
    0xf60c0e0a, 0xfd06f7fe, 0xfee536ed, 0x1f000d0d, 0xa02fc00, 0xfcfb0205, 0xfafe0909, 0x17f7eb03,
    // 7, -17, 9, 26, 1, 17, 5, -1, -14, 8, 10, 4, 17, 4, -9, 0, -10, -17, 7, -12, -4, 8, -10, -10, 3, 11, -3, -7, 1, -1, -14, 1
    0x1a09ef07, 0xff051101, 0x40a08f2, 0xf70411, 0xf407eff6, 0xf6f608fc, 0xf9fd0b03, 0x1f2ff01,
    // 13, -24, -7, -18, 25, 1, -6, 11, 19, -15, -18, -4, -4, 14, 0, 4, -5, -37, -1, -7, 8, -15, -6, -25, 1, -24, 25, -16, 19, -2, -22, -31
    0xeef9e80d, 0xbfa0119, 0xfceef113, 0x4000efc, 0xf9ffdbfb, 0xe7faf108, 0xf019e801, 0xe1eafe13,
    // -3, -3, 16, -21, 21, 9, -3, 15, 22, -7, 10, 16, -6, 2, 1, 0, -14, -65, 17, -40, -8, -14, 25, 7, -18, 25, -36, -5, 4, -23, 14, -1
    0xeb10fdfd, 0xffd0915, 0x100af916, 0x102fa, 0xd811bff2, 0x719f2f8, 0xfbdc19ee, 0xff0ee904,
    // -17, -1, -11, 38, 43, 73, 9, -66, -20, 8, -20, 20, 40, 22, -18, 55, -9, -21, 48, -27, -37, -23, 21, 43, -10, 3, 2, 21, 7, -17, -38, -4
    0x26f5ffef, 0xbe09492b, 0x14ec08ec, 0x37ee1628, 0xe530ebf7, 0x2b15e9db, 0x150203f6, 0xfcdaef07,
    // 8, 16, 17, 2, -1, -14, 2, -12, 22, 10, -20, -10, -15, -4, -17, 4, -33, -7, 8, 25, -46, -22, -13, 16, -31, -1, 48, 11, 15, -21, -16, -28
    0x2111008, 0xf402f2ff, 0xf6ec0a16, 0x4effcf1, 0x1908f9df, 0x10f3ead2, 0xb30ffe1, 0xe4f0eb0f,
    // 12, 14, 22, -4, 6, 28, 13, 20, 18, 20, 24, -4, -5, -2, -14, 19, 8, -6, -15, -10, -20, -11, -14, -23, 20, 28, -3, -20, -25, -9, 4, -2
    0xfc160e0c, 0x140d1c06, 0xfc181412, 0x13f2fefb, 0xf6f1fa08, 0xe9f2f5ec, 0xecfd1c14, 0xfe04f7e7,
    // 13, -43, -17, -4, -18, 2, -28, 0, 15, -10, -24, -6, -27, -23, -8, 8, 12, 35, 3, 22, -21, -1, 14, 2, -10, 26, 5, 9, -14, -12, -2, -20
    0xfcefd50d, 0xe402ee, 0xfae8f60f, 0x8f8e9e5, 0x1603230c, 0x20effeb, 0x9051af6, 0xecfef4f2,
    // 16, -25, 3, -17, 0, -21, -9, 0, 35, -20, -9, -6, 2, -19, 13, -2, -117, -84, 73, -31, -48, -62, -30, -44, -9, -19, 30, 0, 47, 60, -30, -17
    0xef03e710, 0xf7eb00, 0xfaf7ec23, 0xfe0ded02, 0xe149ac8b, 0xd4e2c2d0, 0x1eedf7, 0xefe23c2f,
    // 25, 6, 22, 10, 60, 24, 45, 40, 3, -26, 33, 24, 40, -4, 2, 23, 15, 11, -8, -9, 4, -1, -8, -5, 13, -9, 4, -3, -19, 5, 9, -10
    0xa160619, 0x282d183c, 0x1821e603, 0x1702fc28, 0xf7f80b0f, 0xfbf8ff04, 0xfd04f70d, 0xf60905ed,
    // 47, -4, -37, 6, 36, 33, 3, -4, -31, -22, 3, 0, 14, 11, -14, 29, 7, 49, -3, 15, 22, 22, 27, 34, -35, 5, 27, 28, 5, 5, 10, -9
    0x6dbfc2f, 0xfc032124, 0x3eae1, 0x1df20b0e, 0xffd3107, 0x221b1616, 0x1c1b05dd, 0xf70a0505,
    // 23, 9, 14, 3, -21, -1, -24, 6, 36, -11, -5, 12, -3, -3, -1, 1, 18, -29, 51, 2, 9, -2, 2, 34, 28, 20, 21, 28, -40, -46, -8, -25
    0x30e0917, 0x6e8ffeb, 0xcfbf524, 0x1fffdfd, 0x233e312, 0x2202fe09, 0x1c15141c, 0xe7f8d2d8,
    // 4, -13, 14, 11, 8, 11, -12, 14, 30, 1, 8, 17, -21, -5, -2, -5, -13, 18, 30, 23, -23, -2, -6, -11, 10, 18, -15, -20, 9, -11, -14, 3
    0xb0ef304, 0xef40b08, 0x1108011e, 0xfbfefbeb, 0x171e12f3, 0xf5fafee9, 0xecf1120a, 0x3f2f509,
    // -20, 16, 0, -53, -28, -13, 32, -11, 0, 12, -95, -59, 3, -29, 78, 60, 8, -16, 3, 30, 14, 9, 42, -56, -37, -12, -42, -22, 39, 5, 21, -30
    0xcb0010ec, 0xf520f3e4, 0xc5a10c00, 0x3c4ee303, 0x1e03f008, 0xc82a090e, 0xead6f4db, 0xe2150527,
    // -3, -2, -10, -11, -7, -9, -20, -12, -6, 9, -16, 14, 11, 12, -11, -6, 24, -42, -9, -5, 43, 42, 7, -15, -35, 30, 1, 14, 4, 11, -1, 9
    0xf5f6fefd, 0xf4ecf7f9, 0xef009fa, 0xfaf50c0b, 0xfbf7d618, 0xf1072a2b, 0xe011edd, 0x9ff0b04,
    // 11, -14, -27, 12, 34, -4, 2, -23, -22, 0, -4, 22, 27, 10, 12, 12, 3, 4, -10, 1, 0, 4, 7, -7, 2, 9, 2, -2, 7, -8, 5, 0
    0xce5f20b, 0xe902fc22, 0x16fc00ea, 0xc0c0a1b, 0x1f60403, 0xf9070400, 0xfe020902, 0x5f807,
    // 1, -18, 5, -6, 5, 13, 4, 43, 24, -41, -11, 36, 11, 4, -22, 16, 2, 4, -11, 19, 4, -23, 17, -12, 10, -6, -12, 3, -1, -4, -22, -21
    0xfa05ee01, 0x2b040d05, 0x24f5d718, 0x10ea040b, 0x13f50402, 0xf411e904, 0x3f4fa0a, 0xebeafcff,
    // -42, -13, -9, 8, -15, -11, 13, 2, -22, 10, 31, -2, 13, -17, -21, -1, -13, 8, 94, -55, 14, -64, -24, 92, -27, 72, -67, 58, 55, 3, 24, 94
    0x8f7f3d6, 0x20df5f1, 0xfe1f0aea, 0xffebef0d, 0xc95e08f3, 0x5ce8c00e, 0x3abd48e5, 0x5e180337,
    // 16, -1, -28, -9, -26, 10, 31, 19, -14, 14, 1, -22, -24, -48, 27, -40, 7, -4, -14, -16, 0, 9, 8, 12, 4, -14, 11, -5, -5, 1, 6, -6
    0xf7e4ff10, 0x131f0ae6, 0xea010ef2, 0xd81bd0e8, 0xf0f2fc07, 0xc080900, 0xfb0bf204, 0xfa0601fb,
    // 20, -13, 26, -27, 10, 16, 37, -8, 42, -2, -2, -31, -4, 7, -15, -9, -5, -2, 3, 3, -1, -14, 14, 0, 0, -39, -4, -3, -20, -4, 0, -26
    0xe51af314, 0xf825100a, 0xe1fefe2a, 0xf7f107fc, 0x303fefb, 0xef2ff, 0xfdfcd900, 0xe600fcec,
};
static const uint embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // 9.876e-05, 8.225e-05, 0.0002297, 9.817e-05, 2.15e-06, 0.0002956, -7.427e-05, -0.0002145, 0.0001071, -6.58e-05, -0.0001407, -8.786e-05, 0.0001445, -0.0001693, -0.0001774, 0.0001864
    0x5640679, 0x66f0b87, 0xcd80024, 0x8b0784de, 0x84500705, 0x85c2889c, 0x898c08bc, 0xa1c89d0,
};
static const uint embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -14, -28, 22, -30, -11, 57, 15, -18, 8, 11, 59, -52, -24, -73, 66, 2, 19, -30, 102, 14, 12, -24, -4, 48, -6, 1, 59, -4, -10, -54, 17, 24
    0xe216e4f2, 0xee0f39f5, 0xcc3b0b08, 0x242b7e8, 0xe66e213, 0x30fce80c, 0xfc3b01fa, 0x1811caf6,
    // 6, -18, 30, -6, 14, -11, 40, 1, 1, -13, -6, 11, -24, 23, 22, -29, 46, 19, -9, 53, 35, 9, -73, 24, -18, -16, -18, 67, -39, 0, 58, -9
    0xfa1eee06, 0x128f50e, 0xbfaf301, 0xe31617e8, 0x35f7132e, 0x18b70923, 0x43eef0ee, 0xf73a00d9,
    // -1, -4, 10, -6, -13, 9, -1, -20, 14, 17, 0, 0, -6, -12, -4, -6, -16, 40, 72, -25, 80, 12, -25, 39, -12, -24, -31, 0, -14, -3, -43, -88
    0xfa0afcff, 0xecff09f3, 0x110e, 0xfafcf4fa, 0xe74828f0, 0x27e70c50, 0xe1e8f4, 0xa8d5fdf2,
    // -1, 18, -2, 2, -4, -6, 11, -2, 2, 12, 36, 13, -4, -15, -5, 7, 100, 6, 18, 35, -36, 10, 12, -16, -5, -12, -8, -5, 29, 9, -17, 14
    0x2fe12ff, 0xfe0bfafc, 0xd240c02, 0x7fbf1fc, 0x23120664, 0xf00c0adc, 0xfbf8f4fb, 0xeef091d,
    // 55, -67, 29, -45, 76, -24, 11, -32, 68, 13, 47, -18, 44, -75, -37, -27, -25, -11, 4, 20, 34, -17, -27, 9, -7, -31, 27, 17, -16, -7, 0, -40
    0xd31dbd37, 0xe00be84c, 0xee2f0d44, 0xe5dbb52c, 0x1404f5e7, 0x9e5ef22, 0x111be1f9, 0xd800f9f0,
    // 7, 6, -7, 52, -20, -45, -3, -26, -31, -5, 66, -24, 40, 38, -5, 85, -75, 15, 0, 2, 63, -30, 49, 23, -61, 34, 35, 8, -16, 3, -17, 15
    0x34f90607, 0xe6fdd3ec, 0xe842fbe1, 0x55fb2628, 0x2000fb5, 0x1731e23f, 0x82322c3, 0xfef03f0,
    // -41, -36, 18, 32, -23, -25, -24, 50, 52, 18, -8, -16, -39, -4, 2, -19, 18, 6, -2, -32, -4, 47, -2, -10, -10, 11, 73, -26, 32, -23, 25, -18
    0x2012dcd7, 0x32e8e7e9, 0xf0f81234, 0xed02fcd9, 0xe0fe0612, 0xf6fe2ffc, 0xe6490bf6, 0xee19e920,
    // 11, -1, 1, -2, -19, 2, -12, -22, -17, 9, 11, -3, 26, 20, -4, 6, 29, 0, -16, 23, 44, -31, -98, 72, -35, 51, -13, 86, -71, 53, 44, -3
    0xfe01ff0b, 0xeaf402ed, 0xfd0b09ef, 0x6fc141a, 0x17f0001d, 0x489ee12c, 0x56f333dd, 0xfd2c35b9,
    // 12, -26, 53, -40, -45, 40, 43, -32, -16, 58, -57, -54, 20, 22, -5, -21, 35, -40, -30, 30, 79, 4, -28, 39, 20, 3, 2, 0, 5, -33, -34, -97
    0xd835e60c, 0xe02b28d3, 0xcac73af0, 0xebfb1614, 0x1ee2d823, 0x27e4044f, 0x20314, 0x9fdedf05,
    // -15, -7, 15, 6, 16, 0, -6, 40, 6, -14, -3, 24, -8, -18, 16, -19, -25, 49, -22, -20, 16, -2, -72, 12, -45, 53, 83, -31, -18, 28, 17, -33
    0x60ff9f1, 0x28fa0010, 0x18fdf206, 0xed10eef8, 0xecea31e7, 0xcb8fe10, 0xe15335d3, 0xdf111cee,
    // -2, -14, -9, -4, -4, -11, -7, 5, 15, -19, -23, 6, -8, 4, 2, -4, -28, 41, 2, 127, -18, -4, -14, 47, 4, 5, 11, 30, 102, -48, -33, 11
    0xfcf7f2fe, 0x5f9f5fc, 0x6e9ed0f, 0xfc0204f8, 0x7f0229e4, 0x2ff2fcee, 0x1e0b0504, 0xbdfd066,
    // -37, -67, -13, -5, -48, -27, 56, 32, 62, 55, 51, 43, -83, 60, 28, -49, 35, 55, 27, 4, 28, 13, 29, -15, 11, -5, 33, -40, 8, 12, -36, -5
    0xfbf3bddb, 0x2038e5d0, 0x2b33373e, 0xcf1c3cad, 0x41b3723, 0xf11d0d1c, 0xd821fb0b, 0xfbdc0c08,
    // 19, -20, -5, -32, 14, 4, 9, 23, -15, 29, -9, 42, -8, 6, 3, -6, -39, 30, 6, 88, 49, 44, -3, 22, 2, -12, 15, 34, 44, -38, -18, -29
    0xe0fbec13, 0x1709040e, 0x2af71df1, 0xfa0306f8, 0x58061ed9, 0x16fd2c31, 0x220ff402, 0xe3eeda2c,
    // -9, 20, -36, 20, -65, 12, 40, 9, 7, 28, 48, -1, 0, -5, -18, 36, -38, 53, -23, -44, 50, -3, -37, -75, 25, 2, 57, 79, -21, 38, -39, 55
    0x14dc14f7, 0x9280cbf, 0xff301c07, 0x24eefb00, 0xd4e935da, 0xb5dbfd32, 0x4f390219, 0x37d926eb,
    // 32, -6, 15, -11, 32, 34, 10, -12, -4, -15, 4, 17, 10, 1, 10, -22, 37, 20, -37, 53, 29, -14, -23, -72, 21, -38, 12, 77, -63, -19, -16, 6
    0xf50ffa20, 0xf40a2220, 0x1104f1fc, 0xea0a010a, 0x35db1425, 0xb8e9f21d, 0x4d0cda15, 0x6f0edc1,
    // 13, -10, -35, -28, 31, -42, -38, 17, 1, -65, -73, 52, -67, 34, -50, 8, 39, 2, 14, 8, 5, -12, 11, 8, 36, 6, 23, -6, -42, -2, 36, 9
    0xe4ddf60d, 0x11dad61f, 0x34b7bf01, 0x8ce22bd, 0x80e0227, 0x80bf405, 0xfa170624, 0x924fed6,
    // -15, -35, -22, 78, 19, -15, -14, -1, -22, -42, -3, -9, 31, 52, -29, -58, 78, -33, 96, -5, 12, -35, 19, 40, 9, 4, 71, 6, -37, -110, 10, -38
    0x4eeaddf1, 0xfff2f113, 0xf7fdd6ea, 0xc6e3341f, 0xfb60df4e, 0x2813dd0c, 0x6470409, 0xda0a92db,
    // 30, -75, -29, -9, -27, -20, -90, 1, -41, 41, 4, 45, 24, 7, 48, -19, -37, 9, 9, -10, 3, -28, -3, 1, -8, -5, 1, -12, -26, 22, -18, -14
    0xf7e3b51e, 0x1a6ece5, 0x2d0429d7, 0xed300718, 0xf60909db, 0x1fde403, 0xf401fbf8, 0xf2ee16e6,
    // 20, -24, 87, 58, 3, -52, 30, -4, -22, -42, 33, -43, 24, 35, 72, 25, -52, 28, 14, -13, 71, -18, -1, 21, -33, 23, -10, -7, -31, 12, -46, -35
    0x3a57e814, 0xfc1ecc03, 0xd521d6ea, 0x19482318, 0xf30e1ccc, 0x15ffee47, 0xf9f617df, 0xddd20ce1,
    // 4, -23, 25, -14, 30, 20, -24, 4, 16, -2, -24, 38, -21, -19, 20, -48, 50, -8, 18, -30, -13, 12, -73, 4, 3, -46, -17, -16, 0, 0, -1, 23
    0xf219e904, 0x4e8141e, 0x26e8fe10, 0xd014edeb, 0xe212f832, 0x4b70cf3, 0xf0efd203, 0x17ff0000,
    // 1, 3, -9, -20, 11, 11, -4, 12, 8, 13, 0, 35, -19, -19, 2, -22, -15, 9, -19, 4, 1, 21, -33, -44, 13, -39, 92, -21, -30, -10, -29, -2
    0xecf70301, 0xcfc0b0b, 0x23000d08, 0xea02eded, 0x4ed09f1, 0xd4df1501, 0xeb5cd90d, 0xfee3f6e2,
    // -8, -4, 21, 3, 27, 11, 0, -3, 4, -24, -15, 12, 4, -1, 2, -22, -43, 70, 87, 0, 0, 18, -80, -9, -2, -18, -36, -11, -16, 4, 11, -36
    0x315fcf8, 0xfd000b1b, 0xcf1e804, 0xea02ff04, 0x5746d5, 0xf7b01200, 0xf5dceefe, 0xdc0b04f0,
    // -20, -20, 1, 18, 7, 21, -51, -12, 4, -56, -10, -1, 6, -4, 28, -40, 39, -45, -92, -69, -19, 39, -60, -58, 23, 31, -32, -7, -44, -45, 93, 24
    0x1201ecec, 0xf4cd1507, 0xfff6c804, 0xd81cfc06, 0xbba4d327, 0xc6c427ed, 0xf9e01f17, 0x185dd3d4,
    // 71, -4, 15, -53, 5, -13, -49, -9, -33, 7, 34, -63, -106, -5, 10, -33, -60, 24, -3, 13, 29, 38, -11, -3, 8, 9, -45, 6, 19, 61, -2, 3
    0xcb0ffc47, 0xf7cff305, 0xc12207df, 0xdf0afb96, 0xdfd18c4, 0xfdf5261d, 0x6d30908, 0x3fe3d13,
    // 1, 1, -8, 2, 10, -5, 17, 30, 10, 24, 5, 24, -13, -16, -1, -8, -3, 67, 0, 40, 32, 66, -85, -54, 6, -26, 46, -37, -38, -33, -38, 53
    0x2f80101, 0x1e11fb0a, 0x1805180a, 0xf8fff0f3, 0x280043fd, 0xcaab4220, 0xdb2ee606, 0x35dadfda,
    // 31, 66, -50, -29, 76, 27, 0, -53, -65, -66, 22, 72, 34, -25, -34, 3, 44, 35, 62, 6, 22, 2, 3, 22, -39, 16, 2, 57, -63, -23, 16, 20
    0xe3ce421f, 0xcb001b4c, 0x4816bebf, 0x3dee722, 0x63e232c, 0x16030216, 0x390210d9, 0x1410e9c1,
    // -25, 43, 12, -60, 14, -40, 46, 99, -54, 58, -7, 54, 28, -54, -2, 44, -41, 21, -28, 35, 13, -13, -2, 6, -23, -2, -4, -13, 8, 70, -28, 9
    0xc40c2be7, 0x632ed80e, 0x36f93aca, 0x2cfeca1c, 0x23e415d7, 0x6fef30d, 0xf3fcfee9, 0x9e44608,
    // -20, -19, 17, 31, -38, -39, -31, 43, 40, 63, -47, -49, -32, 9, 7, 9, -25, -17, 46, -46, -25, 44, -47, 9, 12, -15, 100, 4, 38, 30, 18, -32
    0x1f11edec, 0x2be1d9da, 0xcfd13f28, 0x90709e0, 0xd22eefe7, 0x9d12ce7, 0x464f10c, 0xe0121e26,
    // 20, 87, 29, -7, 43, 29, 92, 22, 32, 31, -14, 28, -79, -47, -31, 20, -37, 23, 32, 20, 33, -24, -18, 6, -6, -9, -28, 23, -5, 21, -23, -41
    0xf91d5714, 0x165c1d2b, 0x1cf21f20, 0x14e1d1b1, 0x142017db, 0x6eee821, 0x17e4f7fa, 0xd7e915fb,
    // -12, -15, 31, 0, 30, 4, 24, 8, 30, -24, 24, 41, -40, -8, 20, -43, 14, 8, 28, -3, -12, -11, 8, -31, 0, -63, 22, 22, 14, 57, 37, -90
    0x1ff1f4, 0x818041e, 0x2918e81e, 0xd514f8d8, 0xfd1c080e, 0xe108f5f4, 0x1616c100, 0xa625390e,
    // 54, 3, 29, -44, 80, 20, -20, -50, -58, -33, -17, 35, 11, 3, 7, -6, 57, -4, 37, 18, 76, 3, -65, -32, 34, -21, 2, 38, -23, 23, 2, -90
    0xd41d0336, 0xceec1450, 0x23efdfc6, 0xfa07030b, 0x1225fc39, 0xe0bf034c, 0x2602eb22, 0xa60217e9,
    // 28, 23, 2, -1, -14, -5, 29, 52, -38, 19, 0, 54, -10, -4, -30, 23, 29, -14, 86, -8, 6, -6, 18, 10, -4, 9, 51, 8, -21, -47, 27, -38
    0xff02171c, 0x341dfbf2, 0x360013da, 0x17e2fcf6, 0xf856f21d, 0xa12fa06, 0x83309fc, 0xda1bd1eb,
    // 73, -46, -69, 2, 40, 37, 60, 55, 48, -2, -17, -45, -5, 47, 30, 73, -21, 9, 35, -3, 38, -2, -3, 21, -14, 1, 13, 11, -12, -25, 9, -47
    0x2bbd249, 0x373c2528, 0xd3effe30, 0x491e2ffb, 0xfd2309eb, 0x15fdfe26, 0xb0d01f2, 0xd109e7f4,
    // -43, 65, -16, 2, -3, 34, 25, 44, -53, 8, -49, 18, -54, 53, 79, -5, 22, 41, 14, 11, 23, 9, 11, 12, -13, 1, 41, -9, 5, 34, 17, -44
    0x2f041d5, 0x2c1922fd, 0x12cf08cb, 0xfb4f35ca, 0xb0e2916, 0xc0b0917, 0xf72901f3, 0xd4112205,
    // 25, 48, 57, 15, -14, -37, 93, 0, 34, -25, -5, -43, 12, 0, 2, -36, -15, 20, -33, 4, 40, 5, 1, -7, -2, 1, -10, 11, 8, -10, -27, -35
    0xf393019, 0x5ddbf2, 0xd5fbe722, 0xdc02000c, 0x4df14f1, 0xf9010528, 0xbf601fe, 0xdde5f608,
    // -9, 24, 6, -9, 12, 15, 10, 13, -1, 20, -6, 9, -15, -33, 6, 10, 24, 5, 84, 23, -11, -7, 30, 31, 17, -7, -10, 20, -7, 49, -22, -17
    0xf70618f7, 0xd0a0f0c, 0x9fa14ff, 0xa06dff1, 0x17540518, 0x1f1ef9f5, 0x14f6f911, 0xefea31f9,
    // -5, -4, -2, 5, 22, -8, -8, -5, 1, -38, 21, 11, -15, -2, 12, -3, -7, 2, 28, -67, -35, -60, -74, 22, -44, 21, -13, -14, -23, 25, -24, -23
    0x5fefcfb, 0xfbf8f816, 0xb15da01, 0xfd0cfef1, 0xbd1c02f9, 0x16b6c4dd, 0xf2f315d4, 0xe9e819e9,
    // -32, 33, -39, -11, -39, 21, -7, -13, -2, 10, 21, -23, 7, -3, -23, 31, -58, -68, -13, 2, 32, -7, 73, -77, 66, 83, -5, 30, 8, -17, -73, -26
    0xf5d921e0, 0xf3f915d9, 0xe9150afe, 0x1fe9fd07, 0x2f3bcc6, 0xb349f920, 0x1efb5342, 0xe6b7ef08,
    // 7, 40, -49, 75, 43, 73, 53, 66, -63, 72, 51, -51, 2, -9, -61, -101, -68, 16, -15, 25, 9, -19, -21, 7, -23, 6, -62, -16, 40, 85, -32, 34
    0x4bcf2807, 0x4235492b, 0xcd3348c1, 0x9bc3f702, 0x19f110bc, 0x7ebed09, 0xf0c206e9, 0x22e05528,
    // 7, 57, 22, -16, 42, 24, -37, -11, -55, -52, -1, -43, 48, -78, 12, 30, 97, 42, 22, 36, 44, 3, 49, 35, -2, 20, 6, 25, -13, 76, -33, -41
    0xf0163907, 0xf5db182a, 0xd5ffccc9, 0x1e0cb230, 0x24162a61, 0x2331032c, 0x190614fe, 0xd7df4cf3,
    // -15, -8, -16, 4, -14, -1, -11, -19, -6, -30, 17, 12, 5, 10, 3, -2, 23, -82, -11, -29, 28, 65, -59, 23, -54, 6, 54, 35, 35, 32, -45, 47
    0x4f0f8f1, 0xedf5fff2, 0xc11e2fa, 0xfe030a05, 0xe3f5ae17, 0x17c5411c, 0x233606ca, 0x2fd32023,
    // 12, 5, 1, 10, 8, 2, -1, -6, -28, 8, -2, -22, 14, 9, -2, 23, 7, -2, -77, 0, 13, -8, 43, -18, -4, 39, 98, -12, 14, -1, 34, 25
    0xa01050c, 0xfaff0208, 0xeafe08e4, 0x17fe090e, 0xb3fe07, 0xee2bf80d, 0xf46227fc, 0x1922ff0e,
    // -42, -35, 0, 6, 52, 51, -73, -9, 1, 60, 3, 58, -11, -2, -44, 33, -82, -26, 52, 17, 24, -25, -18, 20, -15, 8, 11, -23, -33, 24, -24, -10
    0x600ddd6, 0xf7b73334, 0x3a033c01, 0x21d4fef5, 0x1134e6ae, 0x14eee718, 0xe90b08f1, 0xf6e818df,
    // -62, 40, 87, -26, -31, -37, -18, -44, -42, 44, 16, 30, -20, -56, -26, -72, -5, -28, 40, 30, 21, -27, -12, 5, -32, 3, 41, -10, -22, -65, -6, -35
    0xe65728c2, 0xd4eedbe1, 0x1e102cd6, 0xb8e6c8ec, 0x1e28e4fb, 0x5f4e515, 0xf62903e0, 0xddfabfea,
    // -30, 39, -78, -78, -14, 56, -26, 3, 48, -14, -38, 75, -75, -59, -25, -68, -1, 29, -55, 4, 4, -19, -51, 33, -4, -12, 61, -47, 8, 45, 33, -11
    0xb2b227e2, 0x3e638f2, 0x4bdaf230, 0xbce7c5b5, 0x4c91dff, 0x21cded04, 0xd13df4fc, 0xf5212d08,
    // 10, 71, 63, -72, -14, 50, -69, 64, 50, -9, 63, -25, 47, 74, -6, -21, -18, -4, 58, 9, 36, 10, 10, -30, 4, 5, 28, 5, -31, -22, 2, -9
    0xb83f470a, 0x40bb32f2, 0xe73ff732, 0xebfa4a2f, 0x93afcee, 0xe20a0a24, 0x51c0504, 0xf702eae1,
    // 20, 6, 17, -15, 37, -11, -24, 1, -27, -4, -1, 2, 5, -6, 3, 15, -22, 40, -6, -14, 12, 44, 14, 35, -2, -48, 91, -21, 53, -28, 0, -39
    0xf1110614, 0x1e8f525, 0x2fffce5, 0xf03fa05, 0xf2fa28ea, 0x230e2c0c, 0xeb5bd0fe, 0xd900e435,
    // -82, -32, 77, 2, 25, 45, 50, -58, 77, -50, -24, 17, -5, 28, -9, 62, -2, 8, 9, 4, 10, -10, 20, 8, -7, 5, 4, -10, -5, -1, -13, 1
    0x24de0ae, 0xc6322d19, 0x11e8ce4d, 0x3ef71cfb, 0x40908fe, 0x814f60a, 0xf60405f9, 0x1f3fffb,
    // 3, 3, 31, -5, -8, -25, -26, -3, 15, 4, -25, -50, -5, -5, 3, 10, -53, -19, 35, 1, -3, 9, 6, -14, 91, 7, 23, -84, 16, 79, 8, -43
    0xfb1f0303, 0xfde6e7f8, 0xcee7040f, 0xa03fbfb, 0x123edcb, 0xf20609fd, 0xac17075b, 0xd5084f10,
    // 6, -12, 25, 2, -2, 6, -14, 9, 1, 20, -15, -46, 22, 20, 10, 12, -46, -14, -4, -19, -6, -78, 29, -73, 21, 58, 27, 14, 28, 12, 22, -52
    0x219f406, 0x9f206fe, 0xd2f11401, 0xc0a1416, 0xedfcf2d2, 0xb71db2fa, 0xe1b3a15, 0xcc160c1c,
    // -50, 28, -27, -43, 70, -29, -26, -51, 22, 53, -24, -33, -2, 55, 58, -26, 21, 19, -10, 16, 13, 8, 26, 37, 8, 10, 14, 38, -3, 56, -1, -25
    0xd5e51cce, 0xcde6e346, 0xdfe83516, 0xe63a37fe, 0x10f61315, 0x251a080d, 0x260e0a08, 0xe7ff38fd,
    // 1, 16, -13, -1, 2, -7, -7, -13, -7, -8, 1, 17, 0, 20, -3, 12, -3, -38, -65, 29, -64, -55, -18, 19, 22, -35, -12, -14, 86, -41, -4, 41
    0xfff31001, 0xf3f9f902, 0x1101f8f9, 0xcfd1400, 0x1dbfdafd, 0x13eec9c0, 0xf2f4dd16, 0x29fcd756,
    // 12, -16, 8, -11, 10, 19, 11, -1, -5, 22, 0, -2, 3, 0, 6, -11, -3, 1, -38, 57, -41, 70, -5, -17, -14, -13, 124, 18, -38, 39, 35, -61
    0xf508f00c, 0xff0b130a, 0xfe0016fb, 0xf5060003, 0x39da01fd, 0xeffb46d7, 0x127cf3f2, 0xc32327da,
    // 0, -53, 17, -50, -2, -47, -62, -44, -7, -75, -29, -38, -87, 54, -40, 26, 30, 10, -32, -16, 20, -8, -9, -3, -12, -4, 8, 4, -13, -45, -6, -37
    0xce11cb00, 0xd4c2d1fe, 0xdae3b5f9, 0x1ad836a9, 0xf0e00a1e, 0xfdf7f814, 0x408fcf4, 0xdbfad3f3,
    // -22, -22, 48, -12, -47, 18, -2, 64, 41, 84, -69, -22, -29, -16, 13, -30, 4, -21, 25, -26, 15, 55, -16, 2, 61, 14, -12, -4, 45, 37, 17, -40
    0xf430eaea, 0x40fe12d1, 0xeabb5429, 0xe20df0e3, 0xe619eb04, 0x2f0370f, 0xfcf40e3d, 0xd811252d,
    // 60, -69, 63, 17, -51, 25, 0, 48, 8, -48, -16, 29, 2, -62, -60, -2, -36, 18, -22, 0, 20, -11, -15, -3, -11, -3, 52, -15, -27, -6, 1, 11
    0x113fbb3c, 0x300019cd, 0x1df0d008, 0xfec4c202, 0xea12dc, 0xfdf1f514, 0xf134fdf5, 0xb01fae5,
    // -22, -44, -31, 44, 21, -43, 28, -60, -37, 9, -53, 6, -53, -66, 8, 6, -44, -3, -23, 13, 20, 22, -12, -36, 3, 7, -1, -1, 8, 42, 10, -19
    0x2ce1d4ea, 0xc41cd515, 0x6cb09db, 0x608becb, 0xde9fdd4, 0xdcf41614, 0xffff0703, 0xed0a2a08,
    // 13, 17, 26, -8, 2, 15, 1, -5, 18, -2, -42, -8, 17, -5, 9, -16, 1, -2, 64, -7, 4, -39, 13, 32, 56, -58, -93, -32, -43, -13, -22, -54
    0xf81a110d, 0xfb010f02, 0xf8d6fe12, 0xf009fb11, 0xf940fe01, 0x200dd904, 0xe0a3c638, 0xcaeaf3d5,
    // 7, 3, 20, -16, 37, 2, -6, 44, 22, -4, -43, 7, -10, -21, 24, -35, 6, 35, -28, 38, -9, 42, -15, 36, -95, 4, 19, -26, -14, -8, 67, 11
    0xf0140307, 0x2cfa0225, 0x7d5fc16, 0xdd18ebf6, 0x26e42306, 0x24f12af7, 0xe61304a1, 0xb43f8f2,
    // 23, 43, -15, -22, -45, -50, -22, -27, 86, 10, -75, 86, 61, -29, 50, 23, 23, 0, -22, -14, 12, 27, 22, -16, 3, 12, 42, 12, -16, -18, 31, -26
    0xeaf12b17, 0xe5eaced3, 0x56b50a56, 0x1732e33d, 0xf2ea0017, 0xf0161b0c, 0xc2a0c03, 0xe61feef0,
    // -9, 34, 33, 17, -4, -11, -42, -7, -10, -5, -8, 28, -8, -1, -23, -33, 42, 32, -55, -2, 36, -5, -11, -12, -18, -12, 4, -16, 8, 15, -31, -76
    0x112122f7, 0xf9d6f5fc, 0x1cf8fbf6, 0xdfe9fff8, 0xfec9202a, 0xf4f5fb24, 0xf004f4ee, 0xb4e10f08,
    // 60, 31, 33, 68, 35, 23, -24, -43, 41, 54, 12, 49, -55, -6, 8, 18, -29, -20, 53, 17, 10, -15, 14, 7, -20, 25, 4, -2, -34, 11, -10, -4
    0x44211f3c, 0xd5e81723, 0x310c3629, 0x1208fac9, 0x1135ece3, 0x70ef10a, 0xfe0419ec, 0xfcf60bde,
    // 13, 18, 39, -20, 42, 21, -36, -8, -22, -23, -77, -8, 27, -37, 1, -22, 14, 25, 25, -19, -7, 1, -9, 76, 16, -24, -7, 55, 10, 37, 41, -16
    0xec27120d, 0xf8dc152a, 0xf8b3e9ea, 0xea01db1b, 0xed19190e, 0x4cf701f9, 0x37f9e810, 0xf029250a,
    // 16, -50, -53, -69, -51, -83, -29, 37, -72, -18, -12, -13, 53, -9, 38, -35, 1, 14, -28, 5, 0, 2, 18, -8, 1, -15, -23, 9, 3, 2, -4, -2
    0xbbcbce10, 0x25e3adcd, 0xf3f4eeb8, 0xdd26f735, 0x5e40e01, 0xf8120200, 0x9e9f101, 0xfefc0203,
};
static const uint embedded_encoder3_ResidualBlock_1_body_pw_expand_bias_dwords[32] = {
    // -0.03717, -0.05954, 0.02905, -0.10724, -0.0718, -0.08014, -0.00694, -0.1531, -0.0661, 0.00496, -0.1853, -0.04886, -0.05606, -0.0921, -0.11426, -0.06726
    0xab9fa8c2, 0xaedd2770, 0xad21ac98, 0xb0e69f1b, 0x1d14ac3b, 0xaa41b1ee, 0xade5ab2d, 0xac4eaf50,
    // -0.01114, -0.0204, -0.06854, -0.02034, -0.04797, 0.02048, -0.1564, -0.0693, -0.0715, -0.0743, -0.03876, -0.0719, -0.06274, 0.0165, -0.06586, -0.01955
    0xa539a1b4, 0xa535ac63, 0x253eaa24, 0xac6fb101, 0xacc1ac93, 0xac9aa8f6, 0x2439ac04, 0xa501ac37,
    // -0.04294, -0.02739, -0.0568, -0.0491, -0.1279, -0.3306, -0.04764, -0.0708, -0.08673, -0.05023, -0.04797, -0.06525, 0.003101, -0.03717, -0.003786, -0.01429
    0xa703a97f, 0xaa49ab45, 0xb54ab018, 0xac88aa19, 0xaa6ead8d, 0xac2daa24, 0xa8c21a5a, 0xa3519bc1,
    // -0.1104, -0.152, -0.05466, -0.336, -0.005753, -0.01257, -0.0769, -0.0462, -0.0091, -0.2151, -0.0545, -0.015305, -0.02077, -0.05615, -0.02263, -0.01324
    0xb0ddaf11, 0xb560aaff, 0xa2709de4, 0xa9eaacec, 0xb2e2a0a9, 0xa3d6aafa, 0xab30a551, 0xa2c7a5cb,
};
static const uint embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -17, -30, 12, -37, -36, -26, -59, 4, 26, -27, 51, -9, 15, -35, -23, -51, -21, 41, 23, -72, 13, 68, -4, 19, 16, -40, -21, -50, -12, -34, -66, -6
    0xdb0ce2ef, 0x4c5e6dc, 0xf733e51a, 0xcde9dd0f, 0xb81729eb, 0x13fc440d, 0xceebd810, 0xfabedef4,
    // 19, -55, -12, 54, -16, -17, 12, -17, 21, -13, -6, -1, -22, 21, 3, 17, 21, -14, -6, -10, 59, -10, -13, -27, 38, -24, -79, -1, 0, -26, 20, 8
    0x36f4c913, 0xef0ceff0, 0xfffaf315, 0x110315ea, 0xf6faf215, 0xe5f3f63b, 0xffb1e826, 0x814e600,
    // -43, 45, 23, 0, 9, 53, 66, 27, 49, -46, -4, 13, -27, -50, 20, -73, -10, 35, 37, 29, 12, 31, 20, 29, -39, 44, -98, 35, -39, 5, -15, 71
    0x172dd5, 0x1b423509, 0xdfcd231, 0xb714cee5, 0x1d2523f6, 0x1d141f0c, 0x239e2cd9, 0x47f105d9,
    // 34, 50, 18, -13, 13, -48, -27, 7, 20, 36, 82, -1, 14, 21, 14, -14, -1, 13, 24, 56, 33, -86, 5, 33, 20, 16, -27, 51, -41, -61, -8, -39
    0xf3123222, 0x7e5d00d, 0xff522414, 0xf20e150e, 0x38180dff, 0x2105aa21, 0x33e51014, 0xd9f8c3d7,
    // 33, 48, -22, -41, 3, -66, -2, 97, -41, -13, 13, -38, -4, -3, 2, -30, 9, 89, -15, 9, -56, 87, -48, 7, -30, 16, 29, -5, 91, -4, 8, -85
    0xd7ea3021, 0x61febe03, 0xda0df3d7, 0xe202fdfc, 0x9f15909, 0x7d057c8, 0xfb1d10e2, 0xab08fc5b,
    // -46, 14, 6, -1, 40, 44, 57, -26, 70, -8, -9, -24, -31, -41, 33, 25, -13, 0, -40, -45, 7, 20, -24, -27, -38, -37, -62, -53, -20, -12, -51, 30
    0xff060ed2, 0xe6392c28, 0xe8f7f846, 0x1921d7e1, 0xd3d800f3, 0xe5e81407, 0xcbc2dbda, 0x1ecdf4ec,
    // -26, 32, -29, 47, -27, -25, 49, 12, -79, 13, 40, 18, -16, 3, 4, 3, 9, 68, -6, 6, 87, 20, -2, 59, 44, -27, 0, -11, 22, -15, -30, 39
    0x2fe320e6, 0xc31e7e5, 0x12280db1, 0x30403f0, 0x6fa4409, 0x3bfe1457, 0xf500e52c, 0x27e2f116,
    // -64, -1, -30, -28, -33, 31, -30, 16, -13, 38, -53, -47, -16, 37, 12, 8, -5, -24, 49, 36, -89, -81, -84, 62, 64, -6, -39, 36, -57, -67, 12, -21
    0xe4e2ffc0, 0x10e21fdf, 0xd1cb26f3, 0x80c25f0, 0x2431e8fb, 0x3eacafa7, 0x24d9fa40, 0xeb0cbdc7,
    // 45, 25, -18, -60, -3, 2, 12, -36, -30, 14, 40, -8, -47, -6, 18, 9, 29, -9, 12, 31, -77, -2, 18, -7, -12, -11, 12, 49, -4, -56, 5, 23
    0xc4ee192d, 0xdc0c02fd, 0xf8280ee2, 0x912fad1, 0x1f0cf71d, 0xf912feb3, 0x310cf5f4, 0x1705c8fc,
    // -38, 12, -70, -20, -42, -11, 21, 22, -37, -8, 31, -3, 6, 5, 13, 11, 48, 40, -14, -13, -6, 6, 4, -25, -11, 0, 20, 24, 9, -9, -14, 35
    0xecba0cda, 0x1615f5d6, 0xfd1ff8db, 0xb0d0506, 0xf3f22830, 0xe70406fa, 0x181400f5, 0x23f2f709,
    // -42, -46, 7, -29, -6, 25, -26, -39, 58, 82, -30, -58, 1, 3, -45, 47, -47, 52, 71, 27, 20, -4, 8, -57, -40, -18, -14, 24, -52, 14, -21, -3
    0xe307d2d6, 0xd9e619fa, 0xc6e2523a, 0x2fd30301, 0x1b4734d1, 0xc708fc14, 0x18f2eed8, 0xfdeb0ecc,
    // 51, -31, 51, -28, 25, 23, -17, -17, -12, -22, 58, 34, 35, 1, -14, -23, -28, -25, -54, 24, -2, 11, 35, -45, -9, 17, 52, -11, -60, 49, -17, -3
    0xe433e133, 0xefef1719, 0x223aeaf4, 0xe9f20123, 0x18cae7e4, 0xd3230bfe, 0xf53411f7, 0xfdef31c4,
    // 84, 31, 8, -30, 14, 22, 35, 3, -96, -62, -34, 31, 11, -12, -45, -12, 41, -20, -87, 12, -61, 0, -45, 53, -49, 18, 27, 2, 3, -36, 26, 1
    0xe2081f54, 0x323160e, 0x1fdec2a0, 0xf4d3f40b, 0xca9ec29, 0x35d300c3, 0x21b12cf, 0x11adc03,
    // -47, 17, -20, -52, -39, -23, 57, 33, 8, -16, -33, -15, -31, 0, -38, 14, -17, 10, -9, -84, 33, -9, 46, -26, 13, -42, -44, -14, 16, -23, -43, 40
    0xccec11d1, 0x2139e9d9, 0xf1dff008, 0xeda00e1, 0xacf70aef, 0xe62ef721, 0xf2d4d60d, 0x28d5e910,
    // 8, 33, 17, -26, 58, -18, 1, -30, -68, 15, 4, -78, -33, -8, 43, -36, 43, 3, 42, 44, 15, 49, 29, -5, -32, -28, 39, 34, 6, 24, 73, -32
    0xe6112108, 0xe201ee3a, 0xb2040fbc, 0xdc2bf8df, 0x2c2a032b, 0xfb1d310f, 0x2227e4e0, 0xe0491806,
    // -18, 13, -87, -27, -50, 5, 6, -24, 12, -23, -16, -13, -6, -29, 22, 33, 22, 4, -49, -75, -58, 5, 9, -34, -26, 9, 29, -3, 29, -7, -32, 9
    0xe5a90dee, 0xe80605ce, 0xf3f0e90c, 0x2116e3fa, 0xb5cf0416, 0xde0905c6, 0xfd1d09e6, 0x9e0f91d,
    // 12, -39, 22, 9, 4, -30, -20, -32, -7, 83, -12, -11, -73, 18, -36, -48, -2, -34, -25, 10, 1, -27, 21, 25, -8, -19, 33, -30, 3, -16, -4, -33
    0x916d90c, 0xe0ece204, 0xf5f453f9, 0xd0dc12b7, 0xae7defe, 0x1915e501, 0xe221edf8, 0xdffcf003,
    // -8, -22, -24, 27, 39, 45, -1, -34, 18, 30, -29, -24, -8, 0, -6, 12, -9, -31, -10, 27, -2, 38, -8, -16, 19, -9, 3, 5, 3, 49, 35, -2
    0x1be8eaf8, 0xdeff2d27, 0xe8e31e12, 0xcfa00f8, 0x1bf6e1f7, 0xf0f826fe, 0x503f713, 0xfe233103,
    // 54, -59, -19, 11, -32, 6, 39, 18, -18, 54, 41, 41, -20, -12, -8, -21, 51, -12, -51, -6, -75, -61, -4, -19, 25, -24, 56, -23, -51, -39, 36, -73
    0xbedc536, 0x122706e0, 0x292936ee, 0xebf8f4ec, 0xfacdf433, 0xedfcc3b5, 0xe938e819, 0xb724d9cd,
    // -3, 0, -72, 22, -3, 25, 21, 60, 1, 8, -59, -85, -77, -28, -32, -20, -47, -14, 15, 42, -16, 72, -11, 29, -39, 23, -37, -6, 15, 24, 25, 45
    0x16b800fd, 0x3c1519fd, 0xabc50801, 0xece0e4b3, 0x2a0ff2d1, 0x1df548f0, 0xfadb17d9, 0x2d19180f,
    // 3, -30, 55, -10, -6, 12, -26, -45, 37, -45, -4, -23, 0, 18, 41, -66, -5, 51, 6, -17, 39, 23, 53, 26, -14, -28, -17, 40, -4, 8, 7, 33
    0xf637e203, 0xd3e60cfa, 0xe9fcd325, 0xbe291200, 0xef0633fb, 0x1a351727, 0x28efe4f2, 0x210708fc,
    // 36, -34, 4, 12, -31, 60, -52, -27, -50, 35, 32, -9, 19, 47, -37, 35, 7, -15, 3, -47, -40, -31, -38, -9, 37, 7, 51, 86, -39, -53, 24, -54
    0xc04de24, 0xe5cc3ce1, 0xf72023ce, 0x23db2f13, 0xd103f107, 0xf7dae1d8, 0x56330725, 0xca18cbd9,
    // 36, -36, -13, -30, -37, -15, 6, 42, 39, -2, -9, 46, 20, -9, -27, -30, 19, -28, -47, 20, -40, 15, 6, 36, -12, -4, 0, -87, 8, 11, -57, 23
    0xe2f3dc24, 0x2a06f1db, 0x2ef7fe27, 0xe2e5f714, 0x14d1e413, 0x24060fd8, 0xa900fcf4, 0x17c70b08,
    // -40, -42, 49, -9, 45, 28, 6, 38, 21, 10, 14, -21, -24, 33, 5, 17, 9, 1, 30, 1, 89, -10, -35, 48, 28, 36, -42, 26, -64, -16, 24, -40
    0xf731d6d8, 0x26061c2d, 0xeb0e0a15, 0x110521e8, 0x11e0109, 0x30ddf659, 0x1ad6241c, 0xd818f0c0,
    // 29, 3, 28, 7, -13, -84, -57, 23, 86, 5, 34, -29, 22, 68, 52, -2, 0, 33, -73, -16, -17, -28, 58, 18, -5, -76, 48, -24, -6, -72, 13, -10
    0x71c031d, 0x17c7acf3, 0xe3220556, 0xfe344416, 0xf0b72100, 0x123ae4ef, 0xe830b4fb, 0xf60db8fa,
    // -72, -18, -29, -26, 46, -5, 20, -51, -6, 12, -51, -20, -5, -9, 84, 11, 19, 15, 13, 5, 75, -1, -17, 10, -19, 23, 36, 10, -35, 0, -12, 15
    0xe6e3eeb8, 0xcd14fb2e, 0xeccd0cfa, 0xb54f7fb, 0x50d0f13, 0xaefff4b, 0xa2417ed, 0xff400dd,
    // 49, -26, -48, 36, -38, 27, -53, -11, -42, -1, -52, -25, -61, 47, -11, -71, -3, 65, 67, 56, 42, -24, -37, 105, 36, -17, -13, 15, -19, -23, -55, 74
    0x24d0e631, 0xf5cb1bda, 0xe7ccffd6, 0xb9f52fc3, 0x384341fd, 0x69dbe82a, 0xff3ef24, 0x4ac9e9ed,
    // 34, -35, -73, 83, -1, 25, -7, -12, 2, 17, 49, -17, 71, 74, -56, 0, 46, -5, 24, 15, -104, -37, -31, -12, 55, 22, 14, 15, -11, -10, 50, 10
    0x53b7dd22, 0xf4f919ff, 0xef311102, 0xc84a47, 0xf18fb2e, 0xf4e1db98, 0xf0e1637, 0xa32f6f5,
    // 14, 0, 22, -8, -42, -9, -11, 13, -13, 1, 91, 23, 24, -50, -75, -20, 48, 1, 47, 24, 54, 33, -6, 24, 40, -4, -20, -52, 51, 11, -76, 51
    0xf816000e, 0xdf5f7d6, 0x175b01f3, 0xecb5ce18, 0x182f0130, 0x18fa2136, 0xccecfc28, 0x33b40b33,
    // 7, -59, -20, -2, -12, 48, -31, -1, 4, 10, 36, 64, -15, 19, -37, 1, -6, -2, 34, 60, -45, -9, -80, 18, 65, 8, -79, 10, 8, -22, 42, -17
    0xfeecc507, 0xffe130f4, 0x40240a04, 0x1db13f1, 0x3c22fefa, 0x12b0f7d3, 0xab10841, 0xef2aea08,
    // 24, 72, 29, 30, 16, 38, 18, 31, 13, -72, -50, 20, -57, -47, -36, -10, 5, -26, 22, 41, -65, 31, -9, -43, -38, -11, -7, 26, -1, 1, 23, -61
    0x1e1d4818, 0x1f122610, 0x14ceb80d, 0xf6dcd1c7, 0x2916e605, 0xd5f71fbf, 0x1af9f5da, 0xc31701ff,
    // 22, 17, -10, -3, 74, -8, 42, -2, 37, -10, 30, 5, 7, -42, -25, 22, -31, -12, -40, 18, 93, 73, 47, -17, -31, -25, -94, -22, 31, 54, -77, 38
    0xfdf61116, 0xfe2af84a, 0x51ef625, 0x16e7d607, 0x12d8f4e1, 0xef2f495d, 0xeaa2e7e1, 0x26b3361f,
    // -101, -32, 2, -99, -26, 36, -39, -50, 2, 5, 20, 8, 40, -23, -31, -17, -89, 30, 77, 31, 18, 16, 20, 0, 25, -24, -24, -46, -30, -26, -2, -10
    0x9d02e09b, 0xced924e6, 0x8140502, 0xefe1e928, 0x1f4d1ea7, 0x141012, 0xd2e8e819, 0xf6fee6e2,
    // 7, -37, 92, -38, 17, 5, 55, -8, 32, -36, 73, -19, 34, 21, -29, 13, 0, 6, 5, 21, 33, 24, -17, -8, 53, 28, -11, 1, -35, 22, 55, 31
    0xda5cdb07, 0xf8370511, 0xed49dc20, 0xde31522, 0x15050600, 0xf8ef1821, 0x1f51c35, 0x1f3716dd,
    // 54, -25, 6, -3, -41, -8, -73, -3, 15, 56, -10, -29, 4, 6, -52, -2, 57, 1, 29, 2, 25, -11, 10, 3, 54, 1, 13, -33, 8, 50, -70, 30
    0xfd06e736, 0xfdb7f8d7, 0xe3f6380f, 0xfecc0604, 0x21d0139, 0x30af519, 0xdf0d0136, 0x1eba3208,
    // 54, -46, 1, 0, 40, 50, -19, -36, -48, -19, -8, 32, 9, 7, -15, -17, -14, 31, 3, -4, 92, 6, -35, -16, 31, 43, 8, -7, 18, 1, 45, -8
    0x1d236, 0xdced3228, 0x20f8edd0, 0xeff10709, 0xfc031ff2, 0xf0dd065c, 0xf9082b1f, 0xf82d0112,
    // -82, -54, -14, 0, -15, -9, -8, 35, -34, -14, 53, 82, 35, 41, -38, 21, -109, 49, -10, 23, 43, 36, 92, -16, 30, -5, -32, -35, 6, 18, 19, -63
    0xf2caae, 0x23f8f7f1, 0x5235f2de, 0x15da2923, 0x17f63193, 0xf05c242b, 0xdde0fb1e, 0xc1131206,
    // -71, 8, 1, -43, -57, 38, 25, 97, 18, 96, -40, -23, -19, -29, -22, 17, 10, 12, 57, -4, -3, -33, -54, 62, 0, -67, 40, -19, -66, -63, 48, 2
    0xd50108b9, 0x611926c7, 0xe9d86012, 0x11eae3ed, 0xfc390c0a, 0x3ecadffd, 0xed28bd00, 0x230c1be,
    // -36, 12, 49, -81, 1, -20, 40, 36, -43, -39, -128, 0, -41, -78, -8, 35, -17, 24, 20, -66, 14, 26, 0, -36, 74, 15, -30, -21, 29, 9, 10, -6
    0xaf310cdc, 0x2428ec01, 0x80d9d5, 0x23f8b2d7, 0xbe1418ef, 0xdc001a0e, 0xebe20f4a, 0xfa0a091d,
    // 0, 25, -9, -82, -37, 30, -27, -2, 32, 30, -39, -2, -19, -1, 23, -15, -33, 47, 29, -57, 52, -30, 23, 54, -3, -24, -7, -21, -16, -63, -16, -15
    0xaef71900, 0xfee51edb, 0xfed91e20, 0xf117ffed, 0xc71d2fdf, 0x3617e234, 0xebf9e8fd, 0xf1f0c1f0,
    // -6, 11, -57, -18, 4, 14, 21, -24, -31, 28, -24, -22, 12, -10, -21, 28, 14, -8, -10, 22, -60, -22, -9, 36, -48, 9, 17, 16, 28, 7, 22, 22
    0xeec70bfa, 0xe8150e04, 0xeae81ce1, 0x1cebf60c, 0x16f6f80e, 0x24f7eac4, 0x101109d0, 0x1616071c,
    // -29, -4, -6, 12, 43, 3, 36, -10, -25, 31, -28, -24, -6, 7, -7, 27, 1, -60, -39, -10, 0, -15, 31, -29, -12, 30, 38, 47, -17, -4, -7, 11
    0xcfafce3, 0xf624032b, 0xe8e41fe7, 0x1bf907fa, 0xf6d9c401, 0xe31ff100, 0x2f261ef4, 0xbf9fcef,
    // 78, -29, -17, 35, -2, 37, 1, 5, -21, -39, 3, -11, 22, -22, 10, 27, 106, 62, 11, 12, 12, 2, -14, 1, 10, 27, 81, -31, 46, 29, -35, -28
    0x23efe34e, 0x50125fe, 0xf503d9eb, 0x1b0aea16, 0xc0b3e6a, 0x1f2020c, 0xe1511b0a, 0xe4dd1d2e,
    // 68, 0, 49, -13, 19, 20, 36, -23, 63, 7, -16, 38, 5, -1, -22, 31, -33, 30, -9, 46, 36, 51, 26, 13, -17, 52, -12, 19, 75, 34, -24, 26
    0xf3310044, 0xe9241413, 0x26f0073f, 0x1feaff05, 0x2ef71edf, 0xd1a3324, 0x13f434ef, 0x1ae8224b,
    // -23, -1, -10, -43, 23, -29, -13, -39, -31, -36, 26, -2, 43, 41, 62, 23, -38, 25, -37, -17, -22, -1, 12, 11, -26, 13, -35, 45, -16, 15, -5, -8
    0xd5f6ffe9, 0xd9f3e317, 0xfe1adce1, 0x173e292b, 0xefdb19da, 0xb0cffea, 0x2ddd0de6, 0xf8fb0ff0,
    // -24, 6, 23, -66, 46, 0, 14, -26, 16, -30, -17, 7, -28, -16, 51, -18, 7, -15, -37, 32, 68, -25, 17, -48, -8, 8, 42, 1, -45, -51, -62, -16
    0xbe1706e8, 0xe60e002e, 0x7efe210, 0xee33f0e4, 0x20dbf107, 0xd011e744, 0x12a08f8, 0xf0c2cdd3,
    // -55, 34, -18, 0, 4, 17, -11, -37, 0, 25, 7, 49, -13, -3, 62, -4, -66, -5, 1, 56, -23, -20, 45, -13, 85, 42, -50, -31, -18, -9, -3, -2
    0xee22c9, 0xdbf51104, 0x31071900, 0xfc3efdf3, 0x3801fbbe, 0xf32dece9, 0xe1ce2a55, 0xfefdf7ee,
    // -11, 7, 16, 20, -20, 13, 10, 9, -10, -34, 8, -14, 29, -13, 7, 21, 13, 1, 40, -14, -37, -9, -4, 46, -6, -6, -25, 11, -65, 2, 15, 12
    0x141007f5, 0x90a0dec, 0xf208def6, 0x1507f31d, 0xf228010d, 0x2efcf7db, 0xbe7fafa, 0xc0f02bf,
    // -8, 19, 37, 34, 75, 35, 59, 21, 45, -45, 77, -6, 38, -22, 68, 31, 2, -5, 23, -21, -28, -57, 30, -36, -70, 42, 14, 74, -14, -40, 89, -47
    0x222513f8, 0x153b234b, 0xfa4dd32d, 0x1f44ea26, 0xeb17fb02, 0xdc1ec7e4, 0x4a0e2aba, 0xd159d8f2,
    // 24, 78, 42, 11, 22, -81, 22, 8, -74, -44, 45, 25, -13, -44, 91, 22, 4, -70, -17, 14, 46, -2, 65, -6, -42, -26, -19, -12, 2, 14, -59, 6
    0xb2a4e18, 0x816af16, 0x192dd4b6, 0x165bd4f3, 0xeefba04, 0xfa41fe2e, 0xf4ede6d6, 0x6c50e02,
    // 5, 28, -87, -38, 50, 23, 19, -38, 22, 23, 22, -26, -4, 16, 61, 5, 17, 1, -21, -8, -92, -60, 19, -25, -29, 8, 18, 37, -14, -88, 28, -29
    0xdaa91c05, 0xda131732, 0xe6161716, 0x53d10fc, 0xf8eb0111, 0xe713c4a4, 0x251208e3, 0xe31ca8f2,
    // -9, 51, 7, -74, 0, -38, -1, -38, -56, -71, -4, 31, -10, -26, 8, 11, 90, -77, -40, 6, -57, 8, 61, -13, -8, 21, 2, 4, -22, 1, -50, -1
    0xb60733f7, 0xdaffda00, 0x1ffcb9c8, 0xb08e6f6, 0x6d8b35a, 0xf33d08c7, 0x40215f8, 0xffce01ea,
    // -27, 59, 5, -3, 38, 13, 4, 39, -63, 25, 32, -58, 3, 18, 14, -58, -72, -10, 43, -28, 0, -32, -21, -2, -2, -21, -35, 28, -9, -9, -2, -26
    0xfd053be5, 0x27040d26, 0xc62019c1, 0xc60e1203, 0xe42bf6b8, 0xfeebe000, 0x1cddebfe, 0xe6fef7f7,
    // -61, 13, -38, -46, -40, 22, 100, -55, 5, -15, 54, -60, 52, 5, 21, 73, -23, -15, -30, -1, -2, 55, -12, -16, 4, 93, 4, 29, 4, 32, -20, 82
    0xd2da0dc3, 0xc96416d8, 0xc436f105, 0x49150534, 0xffe2f1e9, 0xf0f437fe, 0x1d045d04, 0x52ec2004,
    // 5, -10, -20, 15, 6, -12, -42, -95, 29, -21, -42, -27, -16, 10, 31, -24, -6, 40, 37, 18, -11, 65, -15, 3, -39, -10, 16, 34, 19, -12, -7, 14
    0xfecf605, 0xa1d6f406, 0xe5d6eb1d, 0xe81f0af0, 0x122528fa, 0x3f141f5, 0x2210f6d9, 0xef9f413,
    // 52, -6, 42, 43, 13, 0, 7, -30, 60, -28, -2, 14, 17, 7, -30, 15, 40, -22, -26, 13, -70, -1, -16, -51, 5, -41, 8, -3, -8, -20, -18, 2
    0x2b2afa34, 0xe207000d, 0xefee43c, 0xfe20711, 0xde6ea28, 0xcdf0ffba, 0xfd08d705, 0x2eeecf8,
    // 43, -13, -15, -52, -30, 70, -14, 11, 37, -29, -87, 50, -32, -2, -33, -17, 77, -18, 7, -1, 38, -63, -6, 25, 50, 31, 6, -99, -22, -44, -1, 61
    0xccf1f32b, 0xbf246e2, 0x32a9e325, 0xefdffee0, 0xff07ee4d, 0x19fac126, 0x9d061f32, 0x3dffd4ea,
    // 32, -17, 9, -12, 19, -13, -37, -1, 21, -2, 20, 45, 24, 31, -27, -18, 22, -6, 69, -53, -9, 5, -3, 68, 48, 8, -24, 41, 22, 9, 46, -22
    0xf409ef20, 0xffdbf313, 0x2d14fe15, 0xeee51f18, 0xcb45fa16, 0x44fd05f7, 0x29e80830, 0xea2e0916,
    // 85, 17, 25, -43, 7, -33, 5, 14, -20, 72, 105, 16, 87, -8, 24, 60, 92, -67, -29, 38, 19, 4, 55, -50, 2, 31, 3, -1, -31, -15, 14, 60
    0xd5191155, 0xe05df07, 0x106948ec, 0x3c18f857, 0x26e3bd5c, 0xce370413, 0xff031f02, 0x3c0ef1e1,
    // 69, 15, 25, -69, -16, 36, -80, -12, 8, 13, -39, 80, -15, 2, 46, -81, 9, -14, -7, -11, 122, -9, 28, -13, -12, 28, 16, -21, 49, 3, -15, -53
    0xbb190f45, 0xf4b024f0, 0x50d90d08, 0xaf2e02f1, 0xf5f9f209, 0xf31cf77a, 0xeb101cf4, 0xcbf10331,
    // 45, -38, -31, 40, -43, 17, -36, -26, -23, -28, 45, 21, -10, -8, -38, -28, 34, 54, 16, 6, 43, -26, -22, 17, 78, -29, 51, -51, 58, 15, -38, 5
    0x28e1da2d, 0xe6dc11d5, 0x152de4e9, 0xe4daf8f6, 0x6103622, 0x11eae62b, 0xcd33e34e, 0x5da0f3a,
    // 46, -32, 67, 64, 27, 82, 56, 0, -81, -2, 7, 2, 22, 28, -9, 52, -17, -12, 61, 18, -13, 46, -46, 34, 10, 76, -18, 21, 50, 37, 56, 35
    0x4043e02e, 0x38521b, 0x207feaf, 0x34f71c16, 0x123df4ef, 0x22d22ef3, 0x15ee4c0a, 0x23382532,
    // 21, 35, -41, -58, 28, -51, 19, 19, -36, -12, -36, -64, 13, -7, 27, 48, 19, 8, -14, -43, -48, -26, -2, 14, -42, 40, -22, 55, -2, 12, -11, 65
    0xc6d72315, 0x1313cd1c, 0xc0dcf4dc, 0x301bf90d, 0xd5f20813, 0xefee6d0, 0x37ea28d6, 0x41f50cfe,
    // 10, 19, 41, -21, 48, 21, -26, -43, -52, -38, -12, 42, -17, 34, 57, -39, -9, 19, -21, -67, 73, -49, 37, -61, 39, -29, -32, 27, -40, -56, -47, -55
    0xeb29130a, 0xd5e61530, 0x2af4dacc, 0xd93922ef, 0xbdeb13f7, 0xc325cf49, 0x1be0e327, 0xc9d1c8d8,
};
static const uint embedded_encoder3_ResidualBlock_1_body_pw_contract_bias_dwords[16] = {
    // -1.91e-05, 5.704e-05, -7.69e-05, -3.89e-05, -3.23e-05, 3.165e-05, 7.105e-05, 5.69e-05, -1.746e-05, -7.85e-05, -2.074e-05, -4.333e-05, -8.905e-05, -8e-07, 4.53e-05, -0.0001031
    0x3bd8140, 0x828d850a, 0x213821e, 0x3bb04a8, 0x85258125, 0x82d7815c, 0x800d85d6, 0x86c202f8,
    // -0.0001214, -8.7e-06, -1.204e-05, 3.37e-05, 2.4e-07, 7e-07, -7.1e-05, -6.85e-05, 9.64e-05, 0.0002079, 1.496e-05, 4.6e-06, -8.196e-05, -6.694e-05, -1.645e-05, -2.83e-05
    0x809287f5, 0x23580ca, 0xc0004, 0x847d84a7, 0xad00651, 0x4d00fb, 0x8463855f, 0x81db8114,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass5(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage__encoder3_ResidualBlock_1_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _encoder3_ResidualBlock_1_residual_func_Split_output_grouped = {
        uint3(1920, 1080, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 32), // threadGroupSliceSize
        uint3(1920, 1080, 32), // storageSize
        uint3(32, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        199065600, // threadGroupStorageByteOffset
        storage__encoder3_ResidualBlock_1_residual_func_Split_output_grouped };
    
    const ConstantBufferStorage<576> storage_embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005670120008289814, storage_embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = { embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004288163967430592, storage_embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_encoder3_ResidualBlock_1_body_pw_expand_bias = { embedded_encoder3_ResidualBlock_1_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_encoder3_ResidualBlock_1_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_1_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.00432144058868289, storage_embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder3_ResidualBlock_1_body_pw_contract_bias = { embedded_encoder3_ResidualBlock_1_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder3_ResidualBlock_1_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_1_body_pw_contract_bias };
    
    // fused_quantized_NHWC_/encoder3/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_10 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_10 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_10 = uint3(64, 1, 32);
    const uint3 storageSize_slice_10 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_10 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_10 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_10 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_10 = dot(groupStart_slice_10, tensorByteStrides_slice_10);
    const float quantizationScale_slice_10 = 0.017603807151317596;
    const RWBufferStorage storage_slice_10 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_10 = { logicalSize_slice_10, groupStart_slice_10, groupSize_slice_10, storageSize_slice_10, tensorByteStrides_slice_10, paddingBegin_slice_10, paddingEnd_slice_10, threadGroupByteOffsetInTensor_slice_10 + 132710400, quantizationScale_slice_10, storage_slice_10 };
    // Fusedquantized_/encoder3/ResidualBlock_1/residual_func/Concat_quantized_/encoder3/ResidualBlock_1/body/spatial_mixing/partial_conv/Conv_quantized_/encoder3/ResidualBlock_1/body/spatial_mixing/Concat_quantized_/encoder3/ResidualBlock_1/body/pw_expand/Conv_/encoder3/ResidualBlock_1/body/pw_expand_act/Relu_quantized_/encoder3/ResidualBlock_1/body/pw_contract/Conv_/encoder3/ResidualBlock_1/Add (32, 1080, 1920), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,) -> (32, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<32, 1>(0.014793277718126774, 0.020871102809906006, 0.0166486743837595, _encoder3_ResidualBlock_1_residual_func_Split_output_grouped, embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias, embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_1_body_pw_expand_bias, embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_1_body_pw_contract_bias, slice_10, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_5
#ifdef MLSR_PASS_5_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass5_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/encoder3/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_11 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_11 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_11 = uint3(32, 1, 32);
    const uint3 storageSize_slice_11 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_11 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_11 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_11 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_11 = dot(groupStart_slice_11, tensorByteStrides_slice_11);
    const float quantizationScale_slice_11 = 0.017603807151317596;
    const RWBufferStorage storage_slice_11 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_11 = { logicalSize_slice_11, groupStart_slice_11, groupSize_slice_11, storageSize_slice_11, tensorByteStrides_slice_11, paddingBegin_slice_11, paddingEnd_slice_11, threadGroupByteOffsetInTensor_slice_11 + 132710400, quantizationScale_slice_11, storage_slice_11 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_11, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_5_POST


#ifdef MLSR_PASS_6
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FusedConv2D_k2s2b_QuantizedOutput.hlsli"

static const uint embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias_dwords[32] = {
    // -0.0287, 0.01633, -0.10535, -0.1393, -0.057, 0.04178, 0.003952, 0.03314, 0.01778, -0.2189, -0.02428, 0.0409, -0.09625, -0.00943, 0.07794, -0.00103
    0x242ea759, 0xb075aebe, 0x2959ab4c, 0x283e1c0c, 0xb301248d, 0x293ca637, 0xa0d4ae29, 0x94382cfd,
    // -0.07074, 0.04108, 0.01036, -0.03345, -0.1855, -0.02304, 0.006836, 0.00932, 0.05685, -0.01704, -0.02283, 0.02246, 0.05594, 0.05753, -0.10706, -0.1823
    0x2942ac87, 0xa848214e, 0xa5e6b1f0, 0x20c61f00, 0xa45d2b47, 0x25c0a5d8, 0x2b5d2b29, 0xb1d5aeda,
    // -0.0845, 0.07477, 0.1097, 0.1954, -0.01538, -0.0791, -0.04663, -0.0003774, 0.02698, 0.357, -0.009476, 0.2708, -0.00244, 0.0535, 0.00638, 0.1079
    0x2cc9ad68, 0x32412f05, 0xad10a3e0, 0x8e2fa9f8, 0x35b626e8, 0x3455a0da, 0x2ad998ff, 0x2ee81e88,
    // -0.1481, -0.2264, 0.1741, 0.08575, 0.06046, -0.05133, 0.206, 0.02411, 0.0119, -0.05368, -0.07886, 0.0314, -0.0118, -0.04645, -0.1646, -0.0863
    0xb33fb0bd, 0x2d7d3192, 0xaa922bbd, 0x262c3298, 0xaadf2218, 0x2805ad0c, 0xa9f2a20b, 0xad86b144,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass6(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 32), // threadGroupSliceSize
        uint3(1920, 1080, 32), // storageSize
        uint3(32, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        132710400, // threadGroupStorageByteOffset
        0.017603807151317596, storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const BufferStorage storage__encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 32, 64), // threadGroupSliceSize
        uint4(2, 2, 32, 64), // storageSize
        uint4(32, 64, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        9856, // threadGroupStorageByteOffset
        0.0029236592818051577, storage__encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias = { embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias };
    
    // Fusedquantized_/encoder3/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_12 = uint3(960, 540, 64);
    const int3 groupStart_slice_12 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 64);
    const uint3 groupSize_slice_12 = uint3(64, 1, 64);
    const uint3 storageSize_slice_12 = uint3(960, 540, 64);
    const uint3 tensorByteStrides_slice_12 = uint3(64, 61440, 1);
    const uint3 paddingBegin_slice_12 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_12 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_12 = dot(groupStart_slice_12, tensorByteStrides_slice_12);
    const RWBufferStorage storage_slice_12 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_12 = { logicalSize_slice_12, groupStart_slice_12, groupSize_slice_12, storageSize_slice_12, tensorByteStrides_slice_12, paddingBegin_slice_12, paddingEnd_slice_12, threadGroupByteOffsetInTensor_slice_12 + 199065600, storage_slice_12 };
    // Fusedquantized_/encoder3/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs (32, 1080, 1920), (64, 32, 2, 2), (64,) -> (64, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FusedConv2D_k2s2b_QuantizedOutput(0.017320655286312103, 0.02951941266655922, fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, _encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias, slice_12, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_6
#ifdef MLSR_PASS_6_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass6_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // Fusedquantized_/encoder3/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_13 = uint3(960, 540, 64);
    const int3 groupStart_slice_13 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 64);
    const uint3 groupSize_slice_13 = uint3(32, 1, 64);
    const uint3 storageSize_slice_13 = uint3(960, 540, 64);
    const uint3 tensorByteStrides_slice_13 = uint3(64, 61440, 1);
    const uint3 paddingBegin_slice_13 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_13 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_13 = dot(groupStart_slice_13, tensorByteStrides_slice_13);
    const RWBufferStorage storage_slice_13 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_13 = { logicalSize_slice_13, groupStart_slice_13, groupSize_slice_13, storageSize_slice_13, tensorByteStrides_slice_13, paddingBegin_slice_13, paddingEnd_slice_13, threadGroupByteOffsetInTensor_slice_13 + 199065600, storage_slice_13 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_13, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_6_POST


#ifdef MLSR_PASS_7
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords[16] = {
    // -0.0006557, 3.87e-05, 0.0002456, 5.6e-05, -0.0002307, -1.276e-05, 8.63e-05, 1.28e-05, 0.0001506, -0.0001258, -6.08e-05, 0.000114, 0.0003808, 0.0001068, -8.76e-05, -4.3e-05
    0x289915f, 0x3ac0c06, 0x80d68b8f, 0xd705a8, 0x881f08ef, 0x77983fc, 0x7000e3d, 0x82d185be,
    // 0.0002801, 0.0002885, -7.1e-05, 4.995e-05, 0.000365, 0.0001556, -1.05e-05, 4.596e-05, 0.0001098, 0.0003655, 0.000611, -0.0005884, 0.0002124, 0.0001919, -0.000294, -0.0001404
    0xcba0c97, 0x34684a7, 0x9190dfb, 0x30380b0, 0xdfd0732, 0x90d21101, 0xa4a0af6, 0x889a8cd1,
};
static const uint embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias_dwords[64] = {
    // -0.0499, -0.2527, -0.1272, -0.05167, -0.021, 0.01701, -0.1278, 0.02464, -0.02588, -0.3022, -0.0755, -0.323, -0.0601, -0.1791, -0.05096, -0.1016
    0xb40baa63, 0xaa9db012, 0x245ba560, 0x264fb017, 0xb4d6a6a0, 0xb52bacd5, 0xb1bbabb1, 0xae81aa86,
    // -0.02777, -0.1709, -0.2281, -0.00764, -0.2043, -0.1117, -0.03625, -0.0136, -0.03708, 0.004143, -0.1716, -0.156, -0.1975, 0.04514, -0.1378, -0.0996
    0xb178a71c, 0x9fd3b34d, 0xaf26b28a, 0xa2f7a8a4, 0x1c3ea8bf, 0xb0feb17e, 0x29c7b252, 0xae60b069,
    // 0.0826, -0.2107, -0.1351, -0.0704, -0.1484, -0.05658, -0.0901, 0.0791, -0.1799, -0.0849, -0.0937, -0.003439, -0.0786, -0.3005, -0.1718, 0.00793
    0xb2be2d49, 0xac81b053, 0xab3eb0c0, 0x2d10adc4, 0xad6fb1c2, 0x9b0badff, 0xb4cfad08, 0x200fb17f,
    // 0.0002109, -0.11633, 0.0035, -0.0667, -0.1033, -0.002708, -0.03647, -0.1377, -0.3076, -0.02847, -0.1217, -0.1635, -0.1263, -0.0442, -0.2437, -0.4534
    0xaf720ae9, 0xac451b2b, 0x998cae9c, 0xb068a8ab, 0xa74ab4ec, 0xb13bafca, 0xa9a8b00b, 0xb741b3cc,
    // -0.1799, -0.1691, -0.0163, -0.1804, -0.1371, -0.0496, -0.139, -0.0742, -0.112, -0.08093, -0.03806, -0.245, -0.0684, -0.0244, -0.057, 0.002691
    0xb169b1c2, 0xb1c6a42c, 0xaa59b063, 0xacc0b073, 0xad2eaf2b, 0xb3d7a8df, 0xa63fac61, 0x1983ab4c,
    // -0.03244, -0.1733, 0.00996, -0.03452, -0.1573, 0.03702, -0.01686, -0.1561, -0.0958, 0.11005, -0.0708, -0.022, 0.002552, -0.1796, 0.0896, -0.1406
    0xb18ca827, 0xa86b2119, 0x28bdb109, 0xb0ffa451, 0x2f0bae22, 0xa5a2ac88, 0xb1bf193a, 0xb0802dbc,
    // -0.003286, -0.2095, -0.1493, -0.1189, -0.1008, -0.07166, -0.197, 0.06805, -0.1431, -0.02101, 0.00959, -0.1001, 0.00482, -0.10645, 0.0302, -0.1814
    0xb2b49abb, 0xaf9cb0c7, 0xac96ae74, 0x2c5bb24e, 0xa561b094, 0xae6820e9, 0xaed01cf0, 0xb1ce27bb,
    // 0.02138, -0.08325, -0.00579, -0.03041, -0.1277, -0.10394, -0.065, -0.01054, -0.02527, -0.1315, -0.11053, -0.005707, 0.0299, -0.1034, -0.007435, -0.1436
    0xad542579, 0xa7c99dee, 0xaea7b016, 0xa165ac29, 0xb035a678, 0x9dd8af13, 0xae9e27a8, 0xb0989f9d,
};
static const uint embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias_dwords[32] = {
    // -0.0003822, 0.000196, -0.0002187, 0.0003362, 4.685e-05, -0.0005503, 1.09e-05, -0.0003736, 7.2e-05, 0.0003562, 0.0003104, 4.41e-05, 0.00031, -0.0002086, 5.907e-05, 8.87e-05
    0xa6c8e43, 0xd828b2b, 0x90820312, 0x8e1f00b7, 0xdd604b8, 0x2e40d16, 0x8ad60d14, 0x5d003df,
    // 0.0001111, -1.895e-05, -4.66e-05, 3.076e-05, -0.0002, 7.504e-05, 0.0002428, -2.533e-05, 1.95e-05, -1.98e-05, 5.865e-05, -0.0001597, 5.47e-05, -1.997e-05, -2.253e-05, -7.904e-05
    0x813e0748, 0x204830e, 0x4eb8a8e, 0x81a90bf5, 0x814c0147, 0x893c03d8, 0x814f0396, 0x852e817a,
    // -0.0001789, -0.0001787, -0.0001984, -0.00012034, 0.0003738, -0.0001915, 8.29e-05, -0.0002773, 3.31e-05, -9.08e-05, 7.91e-05, -9.274e-05, -7.4e-06, 0.0001493, 3.65e-05, 0.0001496
    0x89db89dd, 0x87e38a80, 0x8a460e20, 0x8c8b056f, 0x85f3022b, 0x8614052f, 0x8e4807c, 0x8e70264,
    // 2.26e-06, 0.0001509, -2.5e-05, 1.16e-05, -1.025e-05, 2.45e-05, 0.0001117, -0.000335, -9.465e-05, 0.000226, 0.000223, -1.73e-05, -0.00010836, 3.78e-05, 0.0001267, 8.005e-05
    0x8f20026, 0xc381a3, 0x19b80ac, 0x8d7d0752, 0xb688634, 0x81220b4f, 0x27a871a, 0x53f0827,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass7(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = {
        uint3(960, 540, 64), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 64), // threadGroupSliceSize
        uint3(960, 540, 64), // storageSize
        uint3(64, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        199065600, // threadGroupStorageByteOffset
        storage_Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped };
    
    const BufferStorage storage__bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 32), // threadGroupSliceSize
        uint4(3, 3, 16, 32), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        18048, // threadGroupStorageByteOffset
        0.003944522235542536, storage__bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = { embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 128), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 128), // threadGroupSliceSize
        uint4(1, 1, 64, 128), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        22656, // threadGroupStorageByteOffset
        0.0048736766912043095, storage__bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<64> storage_embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias = { embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<64> > embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias = {
        128, // logicalSize
        0, // threadGroupSliceStart
        128, // threadGroupSliceSize
        128, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 128, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 128, 64), // threadGroupSliceSize
        uint4(1, 1, 128, 64), // storageSize
        uint4(128, 128, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        30848, // threadGroupStorageByteOffset
        0.00487366272136569, storage__bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias = { embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias };
    
    // /bottleneck/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_14 = uint3(960, 540, 64);
    const int3 groupStart_slice_14 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 64);
    const uint3 groupSize_slice_14 = uint3(64, 1, 64);
    const uint3 storageSize_slice_14 = uint3(960, 540, 64);
    const uint3 tensorByteStrides_slice_14 = uint3(64, 61440, 1);
    const uint3 paddingBegin_slice_14 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_14 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_14 = dot(groupStart_slice_14, tensorByteStrides_slice_14);
    const RWBufferStorage storage_slice_14 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_14 = { logicalSize_slice_14, groupStart_slice_14, groupSize_slice_14, storageSize_slice_14, tensorByteStrides_slice_14, paddingBegin_slice_14, paddingEnd_slice_14, threadGroupByteOffsetInTensor_slice_14 + 232243200, storage_slice_14 };
    // Fusedquantized_/bottleneck/ResidualBlock_0/residual_func/Concat_quantized_/bottleneck/ResidualBlock_0/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_0/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_0/body/pw_expand/Conv_/bottleneck/ResidualBlock_0/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_0/body/pw_contract/Conv_/bottleneck/ResidualBlock_0/Add (64, 540, 960), (32, 16, 3, 3), (32,), (128, 64, 1, 1), (128,), (64, 128, 1, 1), (64,) -> (64, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<64, 2>(0.017320655286312103, 0.02951941266655922, 0.020330490544438362, 0.015502181835472584, 0.035003241151571274, Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped, _bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias, _bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias, _bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias, slice_14, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_7
#ifdef MLSR_PASS_7_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass7_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /bottleneck/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_15 = uint3(960, 540, 64);
    const int3 groupStart_slice_15 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 64);
    const uint3 groupSize_slice_15 = uint3(32, 1, 64);
    const uint3 storageSize_slice_15 = uint3(960, 540, 64);
    const uint3 tensorByteStrides_slice_15 = uint3(64, 61440, 1);
    const uint3 paddingBegin_slice_15 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_15 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_15 = dot(groupStart_slice_15, tensorByteStrides_slice_15);
    const RWBufferStorage storage_slice_15 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_15 = { logicalSize_slice_15, groupStart_slice_15, groupSize_slice_15, storageSize_slice_15, tensorByteStrides_slice_15, paddingBegin_slice_15, paddingEnd_slice_15, threadGroupByteOffsetInTensor_slice_15 + 232243200, storage_slice_15 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_15, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_7_POST


#ifdef MLSR_PASS_8
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords[16] = {
    // 8.62e-05, 0.0001836, 6.104e-05, 0.0001589, 5.61e-05, -2.366e-05, -5.72e-05, 0.000367, 8.38e-05, 0.0001366, -6.753e-05, -3.225e-05, -1.395e-05, 0.0001866, -0.0001857, -0.00010055
    0xa0405a6, 0x9350400, 0x818d03ad, 0xe0383c0, 0x87a057e, 0x821d846d, 0xa1d80ea, 0x86978a16,
    // 0.0002666, 9.716e-05, 3.16e-05, 0.0002123, -0.0004234, 2.2e-06, -0.0002298, 0.0001535, 7.087e-05, -5.674e-05, 0.0002201, 0.0001367, -0.000135, 0.0001485, 9.87e-05, -8.726e-05
    0x65e0c5e, 0xaf50212, 0x258ef0, 0x9088b88, 0x83b804a5, 0x87b0b36, 0x8de886c, 0x85b80678,
};
static const uint embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias_dwords[64] = {
    // -0.09326, -0.0846, -0.132, -0.1343, -0.06464, 0.05627, 0.02155, -0.02298, -0.004253, -0.1885, -0.02556, -0.05707, -0.1161, -0.1613, -0.1237, 0.01045
    0xad6aadf8, 0xb04cb039, 0x2b34ac23, 0xa5e22584, 0xb2089c5b, 0xab4ea68b, 0xb129af6e, 0x215aafeb,
    // -0.2727, -0.1835, -0.03105, -0.10095, -0.02515, -0.2396, -0.1237, -0.1128, -0.0494, -0.0799, -0.01964, -0.04007, -0.13, -0.1989, 0.03293, -0.0764
    0xb1dfb45d, 0xae76a7f3, 0xb3aba670, 0xaf38afeb, 0xad1daa53, 0xa921a507, 0xb25db029, 0xace42837,
    // -0.2097, -0.1671, -0.03467, -0.07745, -0.429, -0.02559, -0.01926, -0.03427, -0.12225, 0.02367, -0.159, -0.1014, -0.1835, 0.09607, -0.02885, -0.09705
    0xb159b2b6, 0xacf5a870, 0xa68db6dd, 0xa863a4ee, 0x260fafd3, 0xae7db117, 0x2e26b1df, 0xae36a763,
    // 0.01034, 0.0852, -0.264, -0.1807, -0.1219, 0.03314, -0.01178, 0.0003538, -0.2145, 0.1417, -0.11066, -0.2054, -0.0765, -0.06964, 0.0343, -0.04895
    0x2d74214b, 0xb1c8b439, 0x283eafcd, 0xdcca208, 0x3089b2dd, 0xb293af15, 0xac75ace5, 0xaa442864,
    // -0.3105, -0.04727, -0.08606, -0.10547, -0.1638, -0.0499, -0.1317, -0.1371, -0.0914, -0.1608, -0.01688, -0.1483, -0.0673, -0.05948, 0.11255, -0.2229
    0xaa0db4f8, 0xaec0ad82, 0xaa63b13e, 0xb063b037, 0xb125add9, 0xb0bfa452, 0xab9dac4f, 0xb3222f34,
    // -0.0184, -0.1694, -0.196, -0.1193, -0.1393, 0.1688, -0.03967, 0.05048, 0.05493, -0.09985, -0.02795, 0.04333, -0.10144, 0.02705, -0.0883, 0.0431
    0xb16ca4b6, 0xafa3b246, 0x3167b075, 0x2a76a914, 0xae642b08, 0x298ca728, 0x26edae7e, 0x2984ada7,
    // -0.0615, -0.08966, -0.04315, -0.2103, -0.0825, 0.05832, -0.1396, -0.1788, 0.006668, -0.0734, -0.1847, -0.188, 0.1181, 0.0796, -0.04172, -0.06995
    0xadbdabdf, 0xb2bba986, 0x2b77ad48, 0xb1b9b078, 0xacb31ed4, 0xb204b1e9, 0x2d182f8f, 0xac7aa957,
    // 0.0779, 0.074, -0.01595, 0.03436, 0.02696, -0.06012, -0.1396, -0.1285, -0.04816, 0.06207, 0.0714, -0.08905, -0.02333, 0.05658, -0.1641, 0.0652
    0x2cbc2cfc, 0x2866a415, 0xabb226e7, 0xb01db078, 0x2bf2aa2a, 0xadb32c92, 0x2b3ea5f9, 0x2c2cb140,
};
static const uint embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias_dwords[32] = {
    // 0.0001185, 7.6e-05, 1.04e-05, -0.0002043, -0.000127, 0.0001512, 0.0002, -0.0001923, 2.5e-06, 0.000144, -7.427e-05, 0.0001589, 1.98e-05, -5.394e-05, 0.00028, 2.295e-05
    0x4fb07c4, 0x8ab200ae, 0x8f48829, 0x8a4d0a8e, 0x8b8002a, 0x93584de, 0x8389014c, 0x1810c96,
    // -0.0001715, -0.0003633, -3.9e-06, -9.74e-05, -0.0002737, -0.0002248, -0.0003934, -0.0001453, -0.00012076, -0.0001636, 0.0001293, 0.0002109, 0.0001327, 0.0002863, -0.0001414, 3.624e-05
    0x8df4899f, 0x86628041, 0x8b5e8c7c, 0x88c38e72, 0x895c87ea, 0xae9083d, 0xcb10859, 0x26088a2,
    // -0.000147, 0.0003247, 0.0004203, -0.0004175, 0.0001738, 0.0001738, 8.863e-05, 0.00011253, -0.000222, -0.0001749, 0.0001438, 0.0001589, -9.793e-05, 0.0002964, 7.35e-05, 0.0001929
    0xd5288d1, 0x8ed70ee3, 0x9b209b2, 0x76005cf, 0x89bb8b46, 0x93508b6, 0xcdb866b, 0xa5204d1,
    // 9.38e-05, -0.0003066, -6.14e-06, -0.000143, -0.0003633, 0.0001622, -2.164e-05, -0.0003035, -0.0001743, -0.0001503, 0.0003178, -0.0001782, 0.0003622, 0.00011545, -0.000357, -9.954e-05
    0x8d060626, 0x88b08067, 0x9518df4, 0x8cf9816b, 0x88ed89b6, 0x89d70d35, 0x7910def, 0x86868dd9,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass8(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage__bottleneck_ResidualBlock_1_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _bottleneck_ResidualBlock_1_residual_func_Split_output_grouped = {
        uint3(960, 540, 64), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 64), // threadGroupSliceSize
        uint3(960, 540, 64), // storageSize
        uint3(64, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        232243200, // threadGroupStorageByteOffset
        storage__bottleneck_ResidualBlock_1_residual_func_Split_output_grouped };
    
    const BufferStorage storage__bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 32), // threadGroupSliceSize
        uint4(3, 3, 16, 32), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        39040, // threadGroupStorageByteOffset
        0.0034824071917682886, storage__bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = { embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 128), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 128), // threadGroupSliceSize
        uint4(1, 1, 64, 128), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        43648, // threadGroupStorageByteOffset
        0.004544553346931934, storage__bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<64> storage_embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias = { embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<64> > embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias = {
        128, // logicalSize
        0, // threadGroupSliceStart
        128, // threadGroupSliceSize
        128, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 128, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 128, 64), // threadGroupSliceSize
        uint4(1, 1, 128, 64), // storageSize
        uint4(128, 128, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        51840, // threadGroupStorageByteOffset
        0.004550436977297068, storage__bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias = { embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias };
    
    // /bottleneck/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_16 = uint3(960, 540, 64);
    const int3 groupStart_slice_16 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 64);
    const uint3 groupSize_slice_16 = uint3(64, 1, 64);
    const uint3 storageSize_slice_16 = uint3(960, 540, 64);
    const uint3 tensorByteStrides_slice_16 = uint3(64, 61440, 1);
    const uint3 paddingBegin_slice_16 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_16 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_16 = dot(groupStart_slice_16, tensorByteStrides_slice_16);
    const RWBufferStorage storage_slice_16 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_16 = { logicalSize_slice_16, groupStart_slice_16, groupSize_slice_16, storageSize_slice_16, tensorByteStrides_slice_16, paddingBegin_slice_16, paddingEnd_slice_16, threadGroupByteOffsetInTensor_slice_16 + 199065600, storage_slice_16 };
    // Fusedquantized_/bottleneck/ResidualBlock_1/residual_func/Concat_quantized_/bottleneck/ResidualBlock_1/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_1/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_1/body/pw_expand/Conv_/bottleneck/ResidualBlock_1/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_1/body/pw_contract/Conv_/bottleneck/ResidualBlock_1/Add (64, 540, 960), (32, 16, 3, 3), (32,), (128, 64, 1, 1), (128,), (64, 128, 1, 1), (64,) -> (64, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<64, 2>(0.015502181835472584, 0.035003241151571274, 0.017967987805604935, 0.0190073624253273, 0.038449302315711975, _bottleneck_ResidualBlock_1_residual_func_Split_output_grouped, _bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias, _bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias, _bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias, slice_16, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_8
#ifdef MLSR_PASS_8_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass8_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /bottleneck/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_17 = uint3(960, 540, 64);
    const int3 groupStart_slice_17 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 64);
    const uint3 groupSize_slice_17 = uint3(32, 1, 64);
    const uint3 storageSize_slice_17 = uint3(960, 540, 64);
    const uint3 tensorByteStrides_slice_17 = uint3(64, 61440, 1);
    const uint3 paddingBegin_slice_17 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_17 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_17 = dot(groupStart_slice_17, tensorByteStrides_slice_17);
    const RWBufferStorage storage_slice_17 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_17 = { logicalSize_slice_17, groupStart_slice_17, groupSize_slice_17, storageSize_slice_17, tensorByteStrides_slice_17, paddingBegin_slice_17, paddingEnd_slice_17, threadGroupByteOffsetInTensor_slice_17 + 199065600, storage_slice_17 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_17, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_8_POST


#ifdef MLSR_PASS_9
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FNB_CT2D_ADD.hlsli"

static const uint embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords[16] = {
    // 0.000284, 8.786e-05, 6.23e-05, -0.0001008, 0.0001129, -0.0001302, 0.0001346, 0.0001265, 9.19e-05, -0.0003443, -0.000174, -4.59e-05, 0.0001307, -0.0001595, -0.0001912, 0.000275
    0x5c20ca7, 0x869b0415, 0x88440766, 0x8250869, 0x8da40606, 0x830289b4, 0x893a0848, 0xc818a44,
    // -0.00022, 0.0002441, 1.5e-06, 0.000311, -7.94e-05, 0.0001373, -1.425e-05, -0.000183, -0.0002052, -0.000212, -0.0004876, -1.484e-05, -0.00010663, -0.000268, -7.59e-05, -0.000259
    0xc008b35, 0xd180019, 0x8808534, 0x89ff80ef, 0x8af28ab9, 0x80f98ffd, 0x8c6486fd, 0x8c3e84f9,
};
static const uint embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias_dwords[64] = {
    // -0.172, 0.1062, -0.0881, -0.1375, 0.1245, -0.0452, -0.05936, -0.0789, -0.06183, -0.0045, -0.1334, -0.03452, -0.1636, -0.2761, 0.06866, -0.0752
    0x2eccb181, 0xb066ada3, 0xa9c92ff8, 0xad0dab99, 0x9c9cabea, 0xa86bb045, 0xb46bb13c, 0xacd02c65,
    // -0.1886, -0.0766, 0.0687, -0.2576, -0.1775, 0.006054, -0.2014, -0.1964, -0.0875, -0.0293, -0.149, -0.03029, 0.001229, -0.1538, -0.1879, -0.2236
    0xace7b209, 0xb41f2c66, 0x1e33b1ae, 0xb249b272, 0xa780ad9a, 0xa7c1b0c5, 0xb0ec1509, 0xb328b203,
    // -0.04083, -0.1489, -0.2312, 0.04404, -0.2703, -0.0684, -0.1348, -0.02443, 0.0708, -0.126, -0.1293, -0.1812, -0.0646, -0.01188, -0.134, -0.09894
    0xb0c4a93a, 0x29a3b366, 0xac61b453, 0xa641b050, 0xb0082c88, 0xb1ccb023, 0xa215ac22, 0xae55b04a,
    // -0.2368, -0.02855, 0.000493, 0.01168, -0.04926, -0.1908, -0.2212, -0.375, -0.2084, -0.1035, -0.0579, -0.02054, -0.1001, -0.005386, -0.01828, -0.3315
    0xa74fb394, 0x21fb100a, 0xb21baa4e, 0xb600b314, 0xaea0b2ab, 0xa542ab69, 0x9d84ae68, 0xb54ea4ae,
    // -0.06076, 0.1187, -0.1392, -0.1624, -0.2751, -0.01855, -0.1542, -0.1008, 0.1508, 0.053, 0.007362, -0.05396, -0.49, 0.0328, -0.02225, -0.0477
    0x2f99abc7, 0xb132b074, 0xa4c0b467, 0xae74b0ef, 0x2ac930d3, 0xaae81f8a, 0x2833b7d7, 0xaa1ba5b2,
    // 0.04596, -0.1377, -0.0534, -0.02495, -0.0562, 0.07495, -0.368, 0.1533, -0.01785, -0.2058, -0.2006, -0.03041, -0.0644, -0.03738, -0.05984, -0.2705
    0xb06829e2, 0xa663aad6, 0x2cccab32, 0x30e8b5e3, 0xb296a492, 0xa7c9b26b, 0xa8c9ac1f, 0xb454aba9,
    // -0.03983, -0.2019, -0.0929, -0.04468, 0.014626, -0.2068, -0.2307, 0.1536, 0.07806, -0.0845, -0.078, -0.2969, 0.05197, -0.05377, 0.00856, -0.4146
    0xb276a919, 0xa9b8adf2, 0xb29e237d, 0x30eab362, 0xad682cff, 0xb4c0acfe, 0xaae22aa7, 0xb6a22062,
    // -0.0264, -0.02974, -0.1418, -0.0356, -0.0917, -0.2185, -0.131, -0.1456, -0.162, -0.06335, -0.03696, -0.0488, -0.04337, -0.0947, 0.03732, 0.04733
    0xa79da6c2, 0xa88fb08a, 0xb2feadde, 0xb0a9b031, 0xac0eb12f, 0xaa3fa8bb, 0xae10a98d, 0x2a0f28c7,
};
static const uint embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias_dwords[32] = {
    // -8.667e-05, -0.0002425, 0.0001069, -0.0001754, 0.0005693, 0.0004823, 0.0004756, 0.000295, 0.0003211, -0.000571, 0.000344, -0.0008388, 0.002306, 0.0001975, -5.86e-05, -0.0007415
    0x8bf285ae, 0x89bf0701, 0xfe710aa, 0xcd50fcb, 0x90ad0d43, 0x92df0da3, 0xa7918b9, 0x921383d7,
    // 0.000783, -0.00103, -0.0004265, 4.506e-05, -4.35e-06, 0.000399, -0.001436, -0.0001817, 0.000113, -4.87e-05, -5.04e-05, -3.9e-05, -3e-06, 0.0006104, -0.000954, 0.0008645
    0x9438126a, 0x2f48efd, 0xe8a8049, 0x89f495e2, 0x83310768, 0x828e834e, 0x11008032, 0x131593d1,
    // 0.002186, -0.0003614, 0.0003378, -0.001271, 0.001256, -0.0001372, 0.001528, -0.002266, -7.33e-06, -0.003374, 0.0004206, -0.002192, -0.0007296, -8.744e-05, -0.001395, -0.00235
    0x8dec187a, 0x95350d89, 0x887f1525, 0x98a41642, 0x9ae9807b, 0x987d0ee4, 0x85bb91fa, 0x98d095b7,
    // 0.00525, 0.000898, -0.0006695, 4.39e-05, -0.000394, 0.000834, -0.001159, -0.0003405, -0.001995, -0.0003822, 0.0006833, -0.000395, 0.0002615, 0.001451, 0.0002007, -0.0003111
    0x135b1d60, 0x2e1917c, 0x12d58e75, 0x8d9494bf, 0x8e439816, 0x8e791199, 0x15f10c49, 0x8d190a94,
};
static const uint embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias_dwords[16] = {
    // 0.0385, -0.0132, -0.05975, 0.01312, -0.0294, -0.008606, 0.0212, -0.02315, 0.0698, -0.012405, 0.03656, -0.04294, -0.0665, -0.00966, -0.04092, 0.02284
    0xa2c228ee, 0x22b8aba6, 0xa068a787, 0xa5ed256d, 0xa25a2c78, 0xa97f28ae, 0xa0f2ac42, 0x25d9a93d,
    // -0.0802, 0.07294, -0.00028, 0.05548, 0.08295, 0.00178, -0.0755, 0.06854, 0.01277, -0.1305, 0.0451, 0.002777, -0.1204, 0.0372, -0.04248, -0.06647
    0x2cabad22, 0x2b1a8c96, 0x174a2d4f, 0x2c63acd5, 0xb02d228a, 0x19b029c6, 0x28c3afb5, 0xac41a970,
};

[numthreads(8, 8, 1)]
void fsr4_model_v07_i8_pass9(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(8, 8, 1);
    
    const RWBufferStorage storage__bottleneck_ResidualBlock_2_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _bottleneck_ResidualBlock_2_residual_func_Split_output_grouped = {
        uint3(960, 540, 64), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 64), // threadGroupSliceSize
        uint3(960, 540, 64), // storageSize
        uint3(64, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        199065600, // threadGroupStorageByteOffset
        storage__bottleneck_ResidualBlock_2_residual_func_Split_output_grouped };
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 32), // threadGroupSliceSize
        uint3(1920, 1080, 32), // storageSize
        uint3(32, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        132710400, // threadGroupStorageByteOffset
        0.017603807151317596, storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const BufferStorage storage__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 32), // threadGroupSliceSize
        uint4(3, 3, 16, 32), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        60032, // threadGroupStorageByteOffset
        0.0033065404277294874, storage__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = { embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 128), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 128), // threadGroupSliceSize
        uint4(1, 1, 64, 128), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        64640, // threadGroupStorageByteOffset
        0.005712011829018593, storage__bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<64> storage_embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias = { embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<64> > embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias = {
        128, // logicalSize
        0, // threadGroupSliceStart
        128, // threadGroupSliceSize
        128, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 128, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 128, 64), // threadGroupSliceSize
        uint4(1, 1, 128, 64), // storageSize
        uint4(128, 128, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        72832, // threadGroupStorageByteOffset
        0.005690492689609528, storage__bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias = { embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias };
    
    const BufferStorage storage_hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_HWCN< BufferStorage > hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 32, 64), // threadGroupSliceSize
        uint4(2, 2, 32, 64), // storageSize
        uint4(2048, 4096, 64, 1), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        81024, // threadGroupStorageByteOffset
        0.002408185275271535, storage_hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias = { embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias };
    
    // FusedFusedquantized_/bottleneck/ResidualBlock_2/residual_func/Concat_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_2/body/pw_expand/Conv_/bottleneck/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_2/body/pw_contract/Conv_/bottleneck/ResidualBlock_2/Add_Fusedquantized_/bottleneck/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_Fusedquantized_/decoder3/skip_pop_0/Add_QuantizedOutput_output_grouped
    const uint3 logicalSize_slice_18 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_18 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(16, 16, 32);
    const uint3 groupSize_slice_18 = uint3(16, 16, 32);
    const uint3 storageSize_slice_18 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_18 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_18 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_18 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_18 = dot(groupStart_slice_18, tensorByteStrides_slice_18);
    const RWBufferStorage storage_slice_18 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_18 = { logicalSize_slice_18, groupStart_slice_18, groupSize_slice_18, storageSize_slice_18, tensorByteStrides_slice_18, paddingBegin_slice_18, paddingEnd_slice_18, threadGroupByteOffsetInTensor_slice_18 + 265420800, storage_slice_18 };
    // FusedFusedquantized_/bottleneck/ResidualBlock_2/residual_func/Concat_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_2/body/pw_expand/Conv_/bottleneck/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_2/body/pw_contract/Conv_/bottleneck/ResidualBlock_2/Add_Fusedquantized_/bottleneck/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_Fusedquantized_/decoder3/skip_pop_0/Add_QuantizedOutput (64, 540, 960), (32, 1080, 1920), (32, 16, 3, 3), (32,), (128, 64, 1, 1), (128,), (64, 128, 1, 1), (64,), (64, 32, 2, 2), (32,) -> (32, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FNB_CT2D_ADD<64, 2>(0.0190073624253273, 0.038449302315711975, 0.024075137451291084, 0.025132231414318085, 0.017398089170455933, 0.02467365749180317, _bottleneck_ResidualBlock_2_residual_func_Split_output_grouped, fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, _bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias, _bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias, _bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias, hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias, slice_18, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_9
#ifdef MLSR_PASS_9_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass9_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // FusedFusedquantized_/bottleneck/ResidualBlock_2/residual_func/Concat_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_2/body/pw_expand/Conv_/bottleneck/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_2/body/pw_contract/Conv_/bottleneck/ResidualBlock_2/Add_Fusedquantized_/bottleneck/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_Fusedquantized_/decoder3/skip_pop_0/Add_QuantizedOutput_output_grouped
    const uint3 logicalSize_slice_19 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_19 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_19 = uint3(32, 1, 32);
    const uint3 storageSize_slice_19 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_19 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_19 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_19 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_19 = dot(groupStart_slice_19, tensorByteStrides_slice_19);
    const RWBufferStorage storage_slice_19 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_19 = { logicalSize_slice_19, groupStart_slice_19, groupSize_slice_19, storageSize_slice_19, tensorByteStrides_slice_19, paddingBegin_slice_19, paddingEnd_slice_19, threadGroupByteOffsetInTensor_slice_19 + 265420800, storage_slice_19 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_19, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_9_POST


#ifdef MLSR_PASS_10
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // -3, 2, 3, 7, -9, 2, -3, -14, -15, 4, 8, 9, -2, -3, 18, 6, -3, 6, -9, -10, -12, -9, -6, -20, -11, -2, -3, 5, 21, 13, 7, 30
    0x70302fd, 0xf2fd02f7, 0x90804f1, 0x612fdfe, 0xf6f706fd, 0xecfaf7f4, 0x5fdfef5, 0x1e070d15,
    // -12, 3, -4, 1, -8, -11, -6, -7, 0, -3, -10, 6, 6, 2, -2, 5, 18, 8, -1, 8, 15, 2, -21, -10, -22, 16, 1, 11, 9, 3, 28, 21
    0x1fc03f4, 0xf9faf5f8, 0x6f6fd00, 0x5fe0206, 0x8ff0812, 0xf6eb020f, 0xb0110ea, 0x151c0309,
    // 4, 41, -34, -22, 95, -84, -30, -25, 7, -10, -48, -22, 29, 41, 15, 50, -12, 20, -20, 6, 15, 6, -13, -5, 3, -4, -15, 18, 36, 18, -8, 15
    0xeade2904, 0xe7e2ac5f, 0xead0f607, 0x320f291d, 0x6ec14f4, 0xfbf3060f, 0x12f1fc03, 0xff81224,
    // 3, 8, 3, 10, 11, 0, 1, -15, -23, 1, -11, 13, 0, 7, -3, 3, 9, 3, -25, 1, 15, 15, -19, -12, -45, 11, -10, 18, 19, 12, 0, 14
    0xa030803, 0xf101000b, 0xdf501e9, 0x3fd0700, 0x1e70309, 0xf4ed0f0f, 0x12f60bd3, 0xe000c13,
    // -11, 7, -3, 5, 6, 16, -2, -7, -9, 1, -15, 14, 22, 3, -2, 5, 16, -4, -14, 15, -2, 11, 9, -12, -14, 12, 11, 3, 1, -14, 1, 9
    0x5fd07f5, 0xf9fe1006, 0xef101f7, 0x5fe0316, 0xff2fc10, 0xf4090bfe, 0x30b0cf2, 0x901f201,
    // -1, -5, 5, 10, -3, 18, 6, -4, -17, 5, 20, 2, 11, 11, 17, 28, -5, -8, -6, 26, 3, 12, 7, 4, -12, 11, 6, 9, 0, 5, 5, 16
    0xa05fbff, 0xfc0612fd, 0x21405ef, 0x1c110b0b, 0x1afaf8fb, 0x4070c03, 0x9060bf4, 0x10050500,
    // 0, 3, -18, -10, -3, 17, 15, -8, -46, 12, 28, -18, 1, -26, 1, -7, 17, 17, 13, -19, 107, 51, -44, -22, 72, -59, -60, -4, -44, -35, -61, 25
    0xf6ee0300, 0xf80f11fd, 0xee1c0cd2, 0xf901e601, 0xed0d1111, 0xead4336b, 0xfcc4c548, 0x19c3ddd4,
    // -39, -7, -5, 5, -1, 12, 13, -7, 4, -17, 28, -5, 5, 0, -3, 17, 2, 8, -15, -5, -1, 17, -8, 6, -11, 12, 9, 10, -13, -15, 0, -18
    0x5fbf9d9, 0xf90d0cff, 0xfb1cef04, 0x11fd0005, 0xfbf10802, 0x6f811ff, 0xa090cf5, 0xee00f1f3,
    // -12, 5, 2, -14, -4, 19, 8, -4, 11, -5, 8, -5, -16, 7, 6, -4, -25, -7, 2, 5, -6, 23, 3, 6, 4, -13, 6, -8, -16, 6, 8, -4
    0xf20205f4, 0xfc0813fc, 0xfb08fb0b, 0xfc0607f0, 0x502f9e7, 0x60317fa, 0xf806f304, 0xfc0806f0,
    // -2, -2, -3, 9, -3, 14, -19, -10, 6, 3, 1, -11, 26, 20, -8, -3, -27, 5, 0, 10, -12, 10, -25, 20, -2, 5, 6, -4, 18, 6, -8, -11
    0x9fdfefe, 0xf6ed0efd, 0xf5010306, 0xfdf8141a, 0xa0005e5, 0x14e70af4, 0xfc0605fe, 0xf5f80612,
    // -6, -5, -3, -12, -5, 10, -18, 5, 0, -3, 4, -1, 8, -5, -7, -7, -13, -20, -13, 24, -47, 22, -15, -9, -83, 5, 32, -14, 36, 6, -22, -3
    0xf4fdfbfa, 0x5ee0afb, 0xff04fd00, 0xf9f9fb08, 0x18f3ecf3, 0xf7f116d1, 0xf22005ad, 0xfdea0624,
    // -2, 49, 30, 1, 14, 35, -36, 39, -15, 42, -52, -7, 10, -17, 61, 23, 4, 4, 3, -33, -8, 5, -38, -5, 45, 4, 24, -15, -28, -19, -4, -21
    0x11e31fe, 0x27dc230e, 0xf9cc2af1, 0x173def0a, 0xdf030404, 0xfbda05f8, 0xf118042d, 0xebfcede4,
    // 23, -6, -20, 0, -16, 3, -32, 1, -26, 5, 8, 3, 12, -1, -7, 1, 27, 18, -18, 6, -13, -1, -18, 4, 16, 10, -1, -10, -3, -5, -5, -9
    0xecfa17, 0x1e003f0, 0x30805e6, 0x1f9ff0c, 0x6ee121b, 0x4eefff3, 0xf6ff0a10, 0xf7fbfbfd,
    // 29, 7, -17, -8, -7, -5, -25, 4, 1, 12, -7, -15, -7, 0, -9, -15, 5, -8, 4, -6, 2, 16, 15, 12, -7, 11, 8, 4, 0, 18, -7, -4
    0xf8ef071d, 0x4e7fbf9, 0xf1f90c01, 0xf1f700f9, 0xfa04f805, 0xc0f1002, 0x4080bf9, 0xfcf91200,
    // -2, -11, 14, -21, 1, 13, -7, 3, -1, 10, 6, 14, -16, 23, -19, 10, 4, 1, -6, -16, 6, 5, 1, -2, -6, 10, 0, 5, -10, 5, -10, -8
    0xeb0ef5fe, 0x3f90d01, 0xe060aff, 0xaed17f0, 0xf0fa0104, 0xfe010506, 0x5000afa, 0xf8f605f6,
    // -4, -24, 4, 10, 13, 39, 7, 11, -43, 19, -1, 6, 11, 27, 9, -8, -7, 12, 33, -6, -12, -52, 43, 6, 127, 35, 118, 13, -68, 9, -23, 30
    0xa04e8fc, 0xb07270d, 0x6ff13d5, 0xf8091b0b, 0xfa210cf9, 0x62bccf4, 0xd76237f, 0x1ee909bc,
    // 25, 11, 2, -12, 4, -7, -14, 2, -5, -5, -16, 5, -3, 12, -27, -4, 24, -8, -10, 2, 12, 2, 0, -4, -22, 5, 0, 4, 6, 18, -11, 17
    0xf4020b19, 0x2f2f904, 0x5f0fbfb, 0xfce50cfd, 0x2f6f818, 0xfc00020c, 0x40005ea, 0x11f51206,
    // 15, -6, 4, -5, 2, 7, -11, -16, -19, -3, -4, -11, 5, 21, -22, 17, 21, 6, -15, 0, 1, -9, -8, -2, -15, 7, -16, -4, 3, 11, -22, -2
    0xfb04fa0f, 0xf0f50702, 0xf5fcfded, 0x11ea1505, 0xf10615, 0xfef8f701, 0xfcf007f1, 0xfeea0b03,
    // 28, 14, 0, -16, -3, -5, 8, -9, 10, 1, 6, 1, -9, -12, 5, -22, 33, -1, -4, -23, -7, 4, -4, -14, -11, 15, 20, -5, 10, -20, 0, -22
    0xf0000e1c, 0xf708fbfd, 0x106010a, 0xea05f4f7, 0xe9fcff21, 0xf2fc04f9, 0xfb140ff5, 0xea00ec0a,
    // 21, 3, 1, -12, 8, -11, 1, -9, 18, -3, 14, 8, 6, -29, 0, 10, -16, -20, 28, -6, -73, 9, 29, 12, -70, 15, 21, 2, -8, 14, 6, -88
    0xf4010315, 0xf701f508, 0x80efd12, 0xa00e306, 0xfa1cecf0, 0xc1d09b7, 0x2150fba, 0xa8060ef8,
    // 19, -32, -4, -10, 38, -4, -87, -3, 41, -3, 2, -15, -21, 45, -21, -30, 4, 0, 3, 26, 21, -7, -5, 9, 31, -4, -3, 2, 13, -18, -1, 6
    0xf6fce013, 0xfda9fc26, 0xf102fd29, 0xe2eb2deb, 0x1a030004, 0x9fbf915, 0x2fdfc1f, 0x6ffee0d,
    // -24, 2, 11, 8, -6, 0, 19, -2, -1, -20, -2, 19, -2, -4, 15, -14, -28, -8, 15, -1, 9, 16, 7, 4, -27, -3, 7, 12, 19, 12, 2, -8
    0x80b02e8, 0xfe1300fa, 0x13feecff, 0xf20ffcfe, 0xff0ff8e4, 0x4071009, 0xc07fde5, 0xf8020c13,
    // -28, -4, 15, 8, 9, 12, 13, -4, 24, -17, 7, 10, 33, -6, -6, 13, 15, -3, 0, -26, -2, -2, -8, 6, -8, 14, -5, -2, -3, -14, -11, -12
    0x80ffce4, 0xfc0d0c09, 0xa07ef18, 0xdfafa21, 0xe600fd0f, 0x6f8fefe, 0xfefb0ef8, 0xf4f5f2fd,
    // 36, 7, 1, -12, -8, 15, -17, -21, -14, 12, 3, -18, -4, -22, 6, 15, 43, 1, -15, -1, -16, -4, -14, -5, -18, 20, -10, -16, 5, -6, 3, 6
    0xf4010724, 0xebef0ff8, 0xee030cf2, 0xf06eafc, 0xfff1012b, 0xfbf2fcf0, 0xf0f614ee, 0x603fa05,
    // -21, 21, 14, -10, 6, 17, -36, 27, 69, 1, -23, -7, 6, 0, -19, -12, -34, -47, 22, -17, 20, 30, -30, -4, -30, -31, 54, -56, -17, 48, -30, -35
    0xf60e15eb, 0x1bdc1106, 0xf9e90145, 0xf4ed0006, 0xef16d1de, 0xfce21e14, 0xc836e1e2, 0xdde230ef,
    // 20, 2, -22, 20, -23, 1, -15, 1, -52, 23, -8, -18, 23, -9, 11, 23, -24, 1, 1, 0, 0, 16, -18, -1, -6, 2, -8, -8, 12, 11, -11, 10
    0x14ea0214, 0x1f101e9, 0xeef817cc, 0x170bf717, 0x101e8, 0xffee1000, 0xf8f802fa, 0xaf50b0c,
    // -30, -18, -5, 11, -16, 35, -26, 9, -56, 2, 8, 13, 21, -1, -6, 29, 0, -3, -15, 15, -17, 1, -1, 0, -17, -2, -5, 2, 29, -9, 0, 19
    0xbfbeee2, 0x9e623f0, 0xd0802c8, 0x1dfaff15, 0xff1fd00, 0xff01ef, 0x2fbfeef, 0x1300f71d,
    // 8, -1, -2, -8, 9, 5, 0, 16, 10, 20, -18, -1, -5, -9, -6, -2, 8, -16, -8, 16, 47, -11, -4, 15, 13, 14, -18, 2, -11, -27, -2, -8
    0xf8feff08, 0x10000509, 0xffee140a, 0xfefaf7fb, 0x10f8f008, 0xffcf52f, 0x2ee0e0d, 0xf8fee5f5,
    // 30, 1, 2, -17, 16, 6, -3, 4, 6, 21, 4, -4, -11, -9, -11, 5, -11, -7, -4, -17, 19, 4, 17, 2, -9, 25, -6, -5, 19, -6, -14, 26
    0xef02011e, 0x4fd0610, 0xfc041506, 0x5f5f7f5, 0xeffcf9f5, 0x2110413, 0xfbfa19f7, 0x1af2fa13,
    // -21, -2, 5, 11, 39, -34, 25, 38, -11, -2, -70, -6, 17, -14, 25, -46, 24, -10, -9, -6, 62, 2, -5, -7, -5, 20, 5, -1, -11, -16, 1, 8
    0xb05feeb, 0x2619de27, 0xfabafef5, 0xd219f211, 0xfaf7f618, 0xf9fb023e, 0xff0514fb, 0x801f0f5,
    // 2, -10, 3, -8, -4, -1, 1, 2, 9, 22, -2, 2, 4, 0, -6, 15, 3, -25, -25, 17, 38, -1, -3, 6, 2, 26, -14, -13, -9, -14, 2, 6
    0xf803f602, 0x201fffc, 0x2fe1609, 0xffa0004, 0x11e7e703, 0x6fdff26, 0xf3f21a02, 0x602f2f7,
    // 27, -4, -5, -6, 14, -4, -3, -1, 2, 20, 1, -12, -8, 1, -16, 12, -25, -4, 11, -2, -2, 10, 17, -4, 3, -8, 4, 1, -12, 0, 11, -8
    0xfafbfc1b, 0xfffdfc0e, 0xf4011402, 0xcf001f8, 0xfe0bfce7, 0xfc110afe, 0x104f803, 0xf80b00f4,
    // -7, 0, 10, 7, -1, -11, 6, -7, -17, -18, -2, 8, -17, -31, -2, -6, 2, -4, 9, -14, -5, -4, 3, -13, 6, -8, 4, -4, -28, -10, -1, -9
    0x70a00f9, 0xf906f5ff, 0x8feeeef, 0xfafee1ef, 0xf209fc02, 0xf303fcfb, 0xfc04f806, 0xf7fff6e4,
    // -20, -13, -15, 30, 1, 24, 35, 17, -16, -23, -14, 7, 3, -6, 16, 15, -18, 36, 65, 62, 7, -1, -118, -35, 65, 19, 22, 40, 49, 0, -14, 9
    0x1ef1f3ec, 0x11231801, 0x7f2e9f0, 0xf10fa03, 0x3e4124ee, 0xdd8aff07, 0x28161341, 0x9f20031,
    // 29, 6, -2, 6, 28, -26, -17, -13, 2, -13, -6, 4, -24, 0, -2, 22, -10, -9, 2, 22, 0, 14, 17, 3, -10, -3, -7, -7, -6, 3, 4, 12
    0x6fe061d, 0xf3efe61c, 0x4faf302, 0x16fe00e8, 0x1602f7f6, 0x3110e00, 0xf9f9fdf6, 0xc0403fa,
    // 7, 3, 5, 39, 9, 0, 10, -5, -37, -16, -18, 7, 19, -22, -5, 5, 22, 4, 4, 9, 8, 0, 4, -6, 3, 6, -5, -9, -10, 5, -9, -2
    0x27050307, 0xfb0a0009, 0x7eef0db, 0x5fbea13, 0x9040416, 0xfa040008, 0xf7fb0603, 0xfef705f6,
    // 12, 14, -4, 2, 16, -2, -7, -6, -17, 16, -7, -11, -5, -14, -4, 7, 31, 10, -10, -10, -2, -30, 1, 1, 18, 12, 7, 7, -30, -28, 29, 6
    0x2fc0e0c, 0xfaf9fe10, 0xf5f910ef, 0x7fcf2fb, 0xf6f60a1f, 0x101e2fe, 0x7070c12, 0x61de4e2,
    // 13, 4, 6, 1, -2, -10, -13, 0, -8, 16, -4, -6, -2, -11, 21, 13, -20, 15, 4, 10, 37, -19, -5, 8, -58, 15, -15, -4, 1, 11, 2, -17
    0x106040d, 0xf3f6fe, 0xfafc10f8, 0xd15f5fe, 0xa040fec, 0x8fbed25, 0xfcf10fc6, 0xef020b01,
    // -15, 15, -44, -55, -90, 61, 14, -19, 54, -32, 85, 0, 28, 11, -1, -25, 5, 17, -17, 10, 16, -23, -1, 7, -9, 7, -15, 4, 17, 11, -12, 36
    0xc9d40ff1, 0xed0e3da6, 0x55e036, 0xe7ff0b1c, 0xaef1105, 0x7ffe910, 0x4f107f7, 0x24f40b11,
    // -24, 12, 2, -4, 11, 12, -10, 0, -12, 12, 1, 16, -6, 1, 3, -2, -27, 10, 6, -9, 0, -15, 10, 8, 29, 18, 26, -9, 0, -10, 34, 3
    0xfc020ce8, 0xf60c0b, 0x10010cf4, 0xfe0301fa, 0xf7060ae5, 0x80af100, 0xf71a121d, 0x322f600,
    // -25, -1, 18, 0, -7, -1, -2, 0, 10, 15, 3, -9, -1, -8, 23, 11, -2, 2, 14, 15, 1, 0, 3, -1, -25, 15, -17, 3, 3, -12, -7, 8
    0x12ffe7, 0xfefff9, 0xf7030f0a, 0xb17f8ff, 0xf0e02fe, 0xff030001, 0x3ef0fe7, 0x8f9f403,
    // -16, 6, 33, 8, -14, -7, 0, 0, -30, 8, -32, 3, -4, -11, -16, 11, -13, 12, 22, -2, -1, -11, 2, -5, -31, 6, -13, 6, 12, 10, -6, 8
    0x82106f0, 0xf9f2, 0x3e008e2, 0xbf0f5fc, 0xfe160cf3, 0xfb02f5ff, 0x6f306e1, 0x8fa0a0c,
    // -11, -6, 27, 5, -39, -10, 18, 9, -67, 22, -4, -3, -5, -26, -2, -2, 5, -44, 35, -30, 7, -50, 75, 41, -40, 12, -13, 32, 8, -10, -38, -19
    0x51bfaf5, 0x912f6d9, 0xfdfc16bd, 0xfefee6fb, 0xe223d405, 0x294bce07, 0x20f30cd8, 0xeddaf608,
    // -11, 28, 37, -13, -12, 3, 8, 6, -28, 3, -30, 17, 18, 0, 0, -2, -3, 9, 17, -1, -5, -1, -2, -4, -20, 25, -6, 10, 5, -38, 4, 5
    0xf3251cf5, 0x60803f4, 0x11e203e4, 0xfe000012, 0xff1109fd, 0xfcfefffb, 0xafa19ec, 0x504da05,
    // 7, 19, 39, -5, -8, -10, 9, 2, -4, 7, -24, 4, -18, -38, -11, 4, -3, 20, 30, -8, 6, -10, 5, 0, -17, 6, -8, 11, -6, -14, -3, 1
    0xfb271307, 0x209f6f8, 0x4e807fc, 0x4f5daee, 0xf81e14fd, 0x5f606, 0xbf806ef, 0x1fdf2fa,
    // -10, -3, -11, -9, -10, -5, 28, -1, -15, -6, -1, 4, 25, 11, 3, -7, 24, 7, 5, -1, 1, 31, -2, -8, 24, -3, -17, -2, -15, 9, -10, 8
    0xf7f5fdf6, 0xff1cfbf6, 0x4fffaf1, 0xf9030b19, 0xff050718, 0xf8fe1f01, 0xfeeffd18, 0x8f609f1,
    // 24, -3, -12, 1, 5, -19, 9, 2, 1, 12, 2, 5, -14, 10, 2, -9, -31, -30, -1, 5, 5, -10, 41, -8, -42, -20, 22, 10, 3, 34, -6, -15
    0x1f4fd18, 0x209ed05, 0x5020c01, 0xf7020af2, 0x5ffe2e1, 0xf829f605, 0xa16ecd6, 0xf1fa2203,
    // -30, 26, 15, 3, 13, -15, -8, -30, -87, 7, 0, 9, 12, 44, 36, -11, 23, -19, -13, -10, 24, -10, 20, -29, 14, 7, 43, 3, -12, 26, 28, 18
    0x30f1ae2, 0xe2f8f10d, 0x90007a9, 0xf5242c0c, 0xf6f3ed17, 0xe314f618, 0x32b070e, 0x121c1af4,
    // -23, -17, -14, -6, -3, -5, 18, 15, 8, -17, 15, 17, 21, 20, 12, 10, 3, 5, 7, 4, 6, 7, -18, -21, 47, -15, 0, 3, 0, 18, -7, 27
    0xfaf2efe9, 0xf12fbfd, 0x110fef08, 0xa0c1415, 0x4070503, 0xebee0706, 0x300f12f, 0x1bf91200,
    // 8, 2, -3, 5, -5, -28, -4, -3, 11, 2, 14, 9, -5, 4, 1, 10, 20, 2, -7, -20, -3, -4, 2, -12, -11, 1, 3, -3, -5, -19, 1, -3
    0x5fd0208, 0xfdfce4fb, 0x90e020b, 0xa0104fb, 0xecf90214, 0xf402fcfd, 0xfd0301f5, 0xfd01edfb,
    // 36, -10, -6, 8, -7, 7, 10, -6, -11, 2, -3, 11, -15, 11, -4, 1, 15, -5, 4, 10, 12, -3, -7, -9, -12, 1, 7, 1, 7, -1, 8, 14
    0x8faf624, 0xfa0a07f9, 0xbfd02f5, 0x1fc0bf1, 0xa04fb0f, 0xf7f9fd0c, 0x10701f4, 0xe08ff07,
    // -8, 6, -4, -50, -27, 7, 25, -21, -7, -2, 26, 10, 11, -19, -2, -19, 17, 4, -49, 58, -91, -56, -83, 40, 38, 29, -58, -61, -42, 7, 36, 70
    0xcefc06f8, 0xeb1907e5, 0xa1afef9, 0xedfeed0b, 0x3acf0411, 0x28adc8a5, 0xc3c61d26, 0x462407d6,
    // -10, 0, -1, 21, 31, 2, -4, -16, -12, 0, 10, 21, 17, 29, -15, 28, -13, 5, 9, -25, -12, 10, 5, 10, 8, -3, 5, 10, 7, -3, 6, -21
    0x15ff00f6, 0xf0fc021f, 0x150a00f4, 0x1cf11d11, 0xe70905f3, 0xa050af4, 0xa05fd08, 0xeb06fd07,
    // -5, -5, 18, 2, -1, 11, 23, -12, 25, 4, -3, -9, 14, 18, -12, -14, -14, -3, 19, 5, 7, 13, -6, -5, 9, -3, 4, 8, 0, 8, -6, 8
    0x212fbfb, 0xf4170bff, 0xf7fd0419, 0xf2f4120e, 0x513fdf2, 0xfbfa0d07, 0x804fd09, 0x8fa0800,
    // 4, 28, -8, -7, 6, -11, -3, -7, -12, -1, 5, -10, -34, -5, 0, 13, 24, 22, -16, -5, -8, -28, 21, -14, -39, 1, 9, -2, -35, -7, -2, -6
    0xf9f81c04, 0xf9fdf506, 0xf605fff4, 0xd00fbde, 0xfbf01618, 0xf215e4f8, 0xfe0901d9, 0xfafef9dd,
    // 6, 25, 6, -7, 5, 2, -11, 0, 3, 2, 0, -10, -50, -8, 4, 3, 17, 38, -31, -31, 7, -15, 30, -10, -12, -7, 47, 3, -40, -38, 6, 1
    0xf9061906, 0xf50205, 0xf6000203, 0x304f8ce, 0xe1e12611, 0xf61ef107, 0x32ff9f4, 0x106dad8,
    // -3, 24, -54, -10, 23, -41, 38, -10, -29, -43, 38, 12, 10, -8, -69, 15, 13, 42, -9, 9, 9, -20, -8, 4, -24, 10, -4, 1, -11, -20, -16, -10
    0xf6ca18fd, 0xf626d717, 0xc26d5e3, 0xfbbf80a, 0x9f72a0d, 0x4f8ec09, 0x1fc0ae8, 0xf6f0ecf5,
    // 8, 31, -14, -5, 7, 7, -7, -1, 2, 5, -1, -10, -38, -19, 6, 4, 17, 27, -14, -3, 16, -8, 18, 0, -33, 0, 3, 11, -33, 0, 2, -7
    0xfbf21f08, 0xfff90707, 0xf6ff0502, 0x406edda, 0xfdf21b11, 0x12f810, 0xb0300df, 0xf90200df,
    // 10, 25, 0, 2, 13, 6, -5, 12, 4, 6, -16, -9, -41, -8, 6, 1, 18, 1, -8, 18, -1, 7, -9, -3, -1, 22, 13, -3, 1, 3, -13, -7
    0x200190a, 0xcfb060d, 0xf7f00604, 0x106f8d7, 0x12f80112, 0xfdf707ff, 0xfd0d16ff, 0xf9f30301,
    // -7, -8, -4, 40, 12, -25, -6, 14, -2, 11, 17, 14, -3, -3, -10, -11, -20, 1, 2, 16, 4, 19, 3, -10, -13, 3, 7, -7, 17, 7, -3, -1
    0x28fcf8f9, 0xefae70c, 0xe110bfe, 0xf5f6fdfd, 0x100201ec, 0xf6031304, 0xf90703f3, 0xfffd0711,
    // 22, 9, -6, 38, 23, -6, -8, 15, 1, 30, -5, 4, -8, 13, -7, -16, -58, -12, 22, 52, 14, -35, -60, 9, -50, 42, 47, -4, -1, 3, 13, -15
    0x26fa0916, 0xff8fa17, 0x4fb1e01, 0xf0f90df8, 0x3416f4c6, 0x9c4dd0e, 0xfc2f2ace, 0xf10d03ff,
    // -19, -4, -19, 15, 2, 28, 15, 26, -6, -10, -1, -4, 27, 16, 13, -2, 12, 13, -7, 15, 7, 4, -10, -2, 13, 21, 11, -3, -5, 0, -6, -25
    0xfedfced, 0x1a0f1c02, 0xfcfff6fa, 0xfe0d101b, 0xff90d0c, 0xfef60407, 0xfd0b150d, 0xe7fa00fb,
    // -3, -1, 4, 23, 13, -26, 7, 8, 30, 16, 35, 10, -27, -7, -10, -34, -26, 2, -5, 3, 0, 13, -9, 11, 5, 2, 12, 2, 4, 4, 4, -9
    0x1704fffd, 0x807e60d, 0xa23101e, 0xdef6f9e5, 0x3fb02e6, 0xbf70d00, 0x20c0205, 0xf7040404,
    // 3, 13, 11, -1, 2, 3, -12, 2, 3, 5, -13, 22, 4, -1, 1, -1, 7, 18, 0, -15, 19, 3, -19, 21, 17, 16, -6, 30, 1, 17, -15, -6
    0xff0b0d03, 0x2f40302, 0x16f30503, 0xff01ff04, 0xf1001207, 0x15ed0313, 0x1efa1011, 0xfaf11101,
    // 14, 16, 14, -2, 10, -3, -5, -7, 6, -1, -12, 15, 5, -14, -6, -6, 3, 56, 13, -5, 29, 11, -16, -4, 51, -25, -6, 29, 20, 5, -19, 12
    0xfe0e100e, 0xf9fbfd0a, 0xff4ff06, 0xfafaf205, 0xfb0d3803, 0xfcf00b1d, 0x1dfae733, 0xced0514,
    // -23, 19, 49, -5, 23, 0, -55, -14, 28, 24, -29, 18, -17, 42, -3, -19, 2, 25, 17, 4, 4, 6, -5, -28, -45, -5, 5, 24, 15, -25, -14, -24
    0xfb3113e9, 0xf2c90017, 0x12e3181c, 0xedfd2aef, 0x4111902, 0xe4fb0604, 0x1805fbd3, 0xe8f2e70f,
    // 10, 31, 16, 5, -4, -3, -10, -22, 16, 0, -16, 16, 4, -5, -4, 7, 3, 25, -7, 3, 1, -9, -3, -12, 16, 4, -4, 9, 0, 16, -3, -7
    0x5101f0a, 0xeaf6fdfc, 0x10f00010, 0x7fcfb04, 0x3f91903, 0xf4fdf701, 0x9fc0410, 0xf9fd1000,
    // 19, 13, 3, 4, -6, -13, -5, -5, -6, 1, -15, 18, -9, -14, -1, 2, -35, 7, 16, 9, 2, 1, 6, 3, 0, -11, 5, 9, -3, 8, 2, -13
    0x4030d13, 0xfbfbf3fa, 0x12f101fa, 0x2fff2f7, 0x91007dd, 0x3060102, 0x905f500, 0xf30208fd,
    // -28, 17, 2, 16, 5, -19, 20, 15, 1, -9, 15, 7, -24, 10, -4, -15, 11, 13, 3, -19, 4, 2, 0, -4, 4, 6, 9, 3, -11, -11, 5, -5
    0x100211e4, 0xf14ed05, 0x70ff701, 0xf1fc0ae8, 0xed030d0b, 0xfc000204, 0x3090604, 0xfb05f5f5,
    // -71, 25, 9, 12, -30, 18, 9, -6, 13, -9, 30, 6, 10, 9, 9, 3, 36, 22, -25, 53, 52, -43, 62, 48, 62, -4, -52, 27, -22, 90, -10, -55
    0xc0919b9, 0xfa0912e2, 0x61ef70d, 0x309090a, 0x35e71624, 0x303ed534, 0x1bccfc3e, 0xc9f65aea,
    // 27, 22, -8, -2, 9, -18, 2, 5, 2, 14, -2, -1, -20, -24, 20, -7, -30, -7, -10, 25, -10, 4, 0, -1, -22, -6, 16, 1, 9, -1, 7, 20
    0xfef8161b, 0x502ee09, 0xfffe0e02, 0xf914e8ec, 0x19f6f9e2, 0xff0004f6, 0x110faea, 0x1407ff09,
    // 1, -2, -34, 32, -3, -2, 18, 17, -45, 14, -3, -3, 8, 11, 4, 10, 23, 7, -23, 16, -2, -12, 1, -3, -17, 17, -5, -5, 7, -12, 7, 6
    0x20defe01, 0x1112fefd, 0xfdfd0ed3, 0xa040b08, 0x10e90717, 0xfd01f4fe, 0xfbfb11ef, 0x607f407,
};
static const uint embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // 0.0003502, -2.205e-05, -0.000281, 0.0002968, 0.0004542, 0.0001404, 0.0002084, -1.31e-05, -0.0001191, -0.0001922, 3.844e-05, 0.0001392, -0.0001624, -0.0001554, 0.0003726, -0.000153
    0x81720dbd, 0xcdd8c9b, 0x89a0f71, 0x80dc0ad4, 0x8a4c87ce, 0x8900285, 0x89188952, 0x89030e1b,
};
static const uint embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -41, -21, 7, 24, 28, 3, -21, 12, 4, 2, -2, -2, -31, 9, 40, -19, -23, 9, 33, -58, -18, 74, -40, 38, -32, -4, -13, 45, -32, -45, -34, -22
    0x1807ebd7, 0xceb031c, 0xfefe0204, 0xed2809e1, 0xc62109e9, 0x26d84aee, 0x2df3fce0, 0xeaded3e0,
    // -26, -71, 4, -12, -28, 11, 36, -47, 19, 57, 46, -10, -27, 7, -3, -64, 36, -13, 8, -38, 15, -20, 44, 3, -5, -15, -7, 45, -35, -10, 41, 7
    0xf404b9e6, 0xd1240be4, 0xf62e3913, 0xc0fd07e5, 0xda08f324, 0x32cec0f, 0x2df9f1fb, 0x729f6dd,
    // 0, -3, -111, 23, -55, 48, -61, 6, -21, -17, 28, -39, 43, 53, 36, -2, 30, 16, -3, 7, -4, -37, 11, -2, 0, -9, 21, -26, -12, -3, -56, -35
    0x1791fd00, 0x6c330c9, 0xd91cefeb, 0xfe24352b, 0x7fd101e, 0xfe0bdbfc, 0xe615f700, 0xddc8fdf4,
    // -34, 3, -5, -4, 17, -13, -26, -11, -12, -15, 6, 0, -7, -6, 18, 5, 1, 20, 38, 38, 36, -20, 5, -24, -5, 84, 6, -1, 18, 2, 15, 13
    0xfcfb03de, 0xf5e6f311, 0x6f1f4, 0x512faf9, 0x26261401, 0xe805ec24, 0xff0654fb, 0xd0f0212,
    // -8, 0, 24, -33, -16, 23, 30, 39, 5, 14, 13, -5, -1, 18, -1, -27, 9, -70, -29, -72, -38, -54, -4, -66, -4, 13, -2, -61, 74, 0, 71, -36
    0xdf1800f8, 0x271e17f0, 0xfb0d0e05, 0xe5ff12ff, 0xb8e3ba09, 0xbefccada, 0xc3fe0dfc, 0xdc47004a,
    // 3, -23, -8, -6, -14, -35, 16, 22, 13, -5, 20, 24, 0, 55, -10, 28, -41, 13, -82, -23, 9, 103, -5, -51, 2, 22, -76, 45, 69, 57, 16, 39
    0xfaf8e903, 0x1610ddf2, 0x1814fb0d, 0x1cf63700, 0xe9ae0dd7, 0xcdfb6709, 0x2db41602, 0x27103945,
    // -35, 13, 32, -95, -1, 0, 48, 40, -60, 37, 38, 72, 16, -5, -4, 23, 22, 54, 3, -6, 26, 18, 15, -20, 18, 7, -2, 41, 56, -22, -37, 18
    0xa1200ddd, 0x283000ff, 0x482625c4, 0x17fcfb10, 0xfa033616, 0xec0f121a, 0x29fe0712, 0x12dbea38,
    // 5, -59, -62, -57, -103, 11, -80, -49, -21, -46, 44, 5, 54, 13, 52, 28, 12, -1, 4, -5, 48, -19, 15, -3, 19, -30, 2, -4, 0, -26, -14, -2
    0xc7c2c505, 0xcfb00b99, 0x52cd2eb, 0x1c340d36, 0xfb04ff0c, 0xfd0fed30, 0xfc02e213, 0xfef2e600,
    // -38, -3, -19, 29, 13, -13, 21, -43, 5, 29, 5, -6, -4, 12, 22, 2, -45, 16, 2, -20, -39, -63, -32, -21, -9, -43, 47, 13, -13, 24, -25, -43
    0x1dedfdda, 0xd515f30d, 0xfa051d05, 0x2160cfc, 0xec0210d3, 0xebe0c1d9, 0xd2fd5f7, 0xd5e718f3,
    // -1, -41, 63, 44, -82, -68, 24, 51, -65, 16, 6, -82, -17, -10, 9, 83, -24, -8, -11, -9, -10, -9, 21, -16, -11, -5, -1, 4, -23, 10, -1, -7
    0x2c3fd7ff, 0x3318bcae, 0xae0610bf, 0x5309f6ef, 0xf7f5f8e8, 0xf015f7f6, 0x4fffbf5, 0xf9ff0ae9,
    // 16, 1, 39, -19, 1, -24, 13, 43, 9, -86, -28, 36, -17, 25, 37, -10, 12, -55, -45, -17, -89, 27, 0, -18, 18, 3, -15, 1, -30, -38, 4, -45
    0xed270110, 0x2b0de801, 0x24e4aa09, 0xf62519ef, 0xefd3c90c, 0xee001ba7, 0x1f10312, 0xd304dae2,
    // -16, -17, 30, 11, 14, 21, -8, -3, -15, -10, 5, 11, 18, 16, 12, -9, 0, 60, 36, -33, 10, -10, 24, 30, -79, 52, 30, 12, 62, -1, 17, -18
    0xb1eeff0, 0xfdf8150e, 0xb05f6f1, 0xf70c1012, 0xdf243c00, 0x1e18f60a, 0xc1e34b1, 0xee11ff3e,
    // -18, 28, 4, 16, -4, 47, 4, -36, -23, 53, -17, -15, 20, 3, -60, 29, -31, 1, 8, 71, -1, 1, 3, 12, -26, -28, 51, -17, 10, 24, -33, 20
    0x10041cee, 0xdc042ffc, 0xf1ef35e9, 0x1dc40314, 0x470801e1, 0xc0301ff, 0xef33e4e6, 0x14df180a,
    // -23, -4, -19, -13, 19, -34, -32, 7, -4, -10, -2, -4, -26, -7, 30, 1, 10, -91, 15, -15, 9, 9, -19, -50, 56, -90, -31, -14, -18, 38, -31, 14
    0xf3edfce9, 0x7e0de13, 0xfcfef6fc, 0x11ef9e6, 0xf10fa50a, 0xceed0909, 0xf2e1a638, 0xee126ee,
    // -26, 14, -12, 50, -29, -6, -5, 34, 94, 27, 0, -78, -2, -47, -38, -58, -48, -15, -2, -17, -7, 4, -12, -1, -14, -7, -19, 21, 41, 1, 44, -13
    0x32f40ee6, 0x22fbfae3, 0xb2001b5e, 0xc6dad1fe, 0xeffef1d0, 0xfff404f9, 0x15edf9f2, 0xf32c0129,
    // -6, 55, -31, 10, -6, -6, -39, 23, -13, -24, -3, -1, -64, 3, -27, 22, -55, 24, 12, 0, -21, -37, 33, 22, -40, 1, 28, 36, -21, 39, -56, -22
    0xae137fa, 0x17d9fafa, 0xfffde8f3, 0x16e503c0, 0xc18c9, 0x1621dbeb, 0x241c01d8, 0xeac827eb,
    // 30, -8, -2, 1, 11, 2, 16, -26, -22, -2, 6, 3, -4, 3, -9, -6, -10, 53, -2, -16, 4, -12, -23, 4, -36, 96, 15, 8, -1, -37, -6, 28
    0x1fef81e, 0xe610020b, 0x306feea, 0xfaf703fc, 0xf0fe35f6, 0x4e9f404, 0x80f60dc, 0x1cfadbff,
    // 34, -38, 69, -38, -29, 40, -5, -19, 23, -20, 0, 21, 1, 23, -25, 9, 35, -33, -68, -21, -20, -60, -53, 8, 6, -2, -17, -9, 15, -36, -41, 5
    0xda45da22, 0xedfb28e3, 0x1500ec17, 0x9e71701, 0xebbcdf23, 0x8cbc4ec, 0xf7effe06, 0x5d7dc0f,
    // -23, 44, 17, 19, -4, 22, -43, 38, 9, -2, -7, 10, 33, -5, -12, 1, -33, 12, 13, -7, -9, -51, 66, -23, 15, 23, 20, 5, 33, -18, 9, -4
    0x13112ce9, 0x26d516fc, 0xaf9fe09, 0x1f4fb21, 0xf90d0cdf, 0xe942cdf7, 0x514170f, 0xfc09ee21,
    // -3, 37, -23, 4, 29, -2, 46, 23, -10, 71, -6, -28, -25, -5, 85, -30, 0, -110, 82, -91, 53, 43, -17, 45, -71, -66, 4, 58, 91, 28, -49, -13
    0x4e925fd, 0x172efe1d, 0xe4fa47f6, 0xe255fbe7, 0xa5529200, 0x2def2b35, 0x3a04beb9, 0xf3cf1c5b,
    // 42, 50, 9, 27, 4, 12, -49, 56, -7, -18, 32, -5, 5, -56, -3, -30, 9, 32, -24, 64, 26, -4, 31, 49, -14, 53, -64, -23, 58, 43, -12, 46
    0x1b09322a, 0x38cf0c04, 0xfb20eef9, 0xe2fdc805, 0x40e82009, 0x311ffc1a, 0xe9c035f2, 0x2ef42b3a,
    // -44, -3, -46, 39, -6, -36, 28, 14, 23, -44, -30, 19, -12, -15, -17, 2, -29, 6, 9, 105, 57, 81, 28, -12, 8, -1, 31, -47, -19, 19, 3, 15
    0x27d2fdd4, 0xe1cdcfa, 0x13e2d417, 0x2eff1f4, 0x690906e3, 0xf41c5139, 0xd11fff08, 0xf0313ed,
    // 1, -13, -32, 10, 10, -18, 9, -1, -19, 28, -15, 69, -7, -10, 5, 34, -13, 1, 18, 26, -23, -4, 20, -84, 33, 22, 8, -23, 52, 13, -35, 0
    0xae0f301, 0xff09ee0a, 0x45f11ced, 0x2205f6f9, 0x1a1201f3, 0xac14fce9, 0xe9081621, 0xdd0d34,
    // 38, 2, 9, 25, -16, 8, -4, 55, 0, 2, -1, 41, -33, 16, 27, -28, -58, 89, 9, -23, 59, 22, 53, 8, -54, 46, 26, -59, 27, -42, -48, 24
    0x19090226, 0x37fc08f0, 0x29ff0200, 0xe41b10df, 0xe90959c6, 0x835163b, 0xc51a2eca, 0x18d0d61b,
    // -25, -74, 9, -74, -19, -20, -20, -33, 0, 3, 33, -57, 16, -72, 16, -48, -9, 1, -9, 22, -5, -23, -26, -37, 14, -3, -54, 66, 28, 9, 0, 8
    0xb609b6e7, 0xdfececed, 0xc7210300, 0xd010b810, 0x16f701f7, 0xdbe6e9fb, 0x42cafd0e, 0x800091c,
    // 14, -9, 15, -60, 6, 9, 3, -31, -13, -35, 32, -31, 3, 26, -17, 1, -10, 26, -8, 13, 59, -58, 10, 52, 36, 3, -54, 22, -38, 27, 13, 13
    0xc40ff70e, 0xe1030906, 0xe120ddf3, 0x1ef1a03, 0xdf81af6, 0x340ac63b, 0x16ca0324, 0xd0d1bda,
    // -9, -8, 16, -2, 2, 4, -36, 35, 4, 19, -26, 35, -14, -14, 10, -1, -34, 54, 50, 48, 8, -60, 12, 75, 12, -32, -58, 12, -53, -16, -53, -29
    0xfe10f8f7, 0x23dc0402, 0x23e61304, 0xff0af2f2, 0x303236de, 0x4b0cc408, 0xcc6e00c, 0xe3cbf0cb,
    // 22, 8, 11, -8, -39, 14, 62, -4, 51, 2, -7, -9, 55, 7, -32, 10, 37, -32, -59, 22, -5, -2, -6, -28, 39, -39, -46, 11, -37, 40, 65, -21
    0xf80b0816, 0xfc3e0ed9, 0xf7f90233, 0xae00737, 0x16c5e025, 0xe4fafefb, 0xbd2d927, 0xeb4128db,
    // 17, 2, -66, -1, -1, 6, 18, 28, -62, 41, 28, -19, 8, 0, -27, -35, 21, 58, -28, 38, -56, -54, 27, 48, 17, 6, -35, 50, -10, -7, -29, 54
    0xffbe0211, 0x1c1206ff, 0xed1c29c2, 0xdde50008, 0x26e43a15, 0x301bcac8, 0x32dd0611, 0x36e3f9f6,
    // -35, -32, 1, 16, -13, -15, 31, -42, 3, -16, -14, 0, 27, -7, -12, -9, 27, -4, 11, -11, -29, 80, 29, -15, -38, 41, -11, -32, -11, -61, -35, 46
    0x1001e0dd, 0xd61ff1f3, 0xf2f003, 0xf7f4f91b, 0xf50bfc1b, 0xf11d50e3, 0xe0f529da, 0x2eddc3f5,
    // 0, 27, -14, -18, 28, -51, 7, 25, -9, -45, 6, 1, -8, -14, 31, -3, 31, 0, -16, -100, -41, -36, -29, 8, 31, 24, -20, 20, 28, -7, 30, -32
    0xeef21b00, 0x1907cd1c, 0x106d3f7, 0xfd1ff2f8, 0x9cf0001f, 0x8e3dcd7, 0x14ec181f, 0xe01ef91c,
    // 10, 6, -15, -43, 16, 18, -12, -2, -24, 33, 12, -25, 14, -8, -15, 12, -11, -12, 34, 11, -31, -65, 35, -35, 2, 50, -14, 85, 60, -30, 4, -31
    0xd5f1060a, 0xfef41210, 0xe70c21e8, 0xcf1f80e, 0xb22f4f5, 0xdd23bfe1, 0x55f23202, 0xe104e23c,
    // 5, 88, 33, -50, -82, -108, -16, -89, -41, 37, -19, -9, 10, 50, -33, -98, -12, -3, -4, 10, 11, -19, -5, 13, -13, -13, 1, -5, 8, 24, -3, 14
    0xce215805, 0xa7f094ae, 0xf7ed25d7, 0x9edf320a, 0xafcfdf4, 0xdfbed0b, 0xfb01f3f3, 0xefd1808,
    // -2, 45, -67, -35, 79, 60, -16, -52, 69, -23, -6, 87, 12, 15, -23, -73, 28, -7, -5, 2, 18, 2, -27, 21, 6, -21, -1, -8, 5, 19, -13, 23
    0xddbd2dfe, 0xccf03c4f, 0x57fae945, 0xb7e90f0c, 0x2fbf91c, 0x15e50212, 0xf8ffeb06, 0x17f31305,
    // -18, 18, -31, -30, 15, -23, 8, 13, -7, 22, 7, -17, 0, -11, 7, 16, 56, -38, 23, -48, 64, 65, -19, 20, -37, -29, 39, 85, 69, 50, -33, 57
    0xe2e112ee, 0xd08e90f, 0xef0716f9, 0x1007f500, 0xd017da38, 0x14ed4140, 0x5527e3db, 0x39df3245,
    // 0, -4, -6, -22, -10, -24, -33, 34, 29, 24, -23, -5, -3, -8, 13, 9, -19, -34, -59, 39, 1, 2, 34, -72, 28, 90, 20, 38, 21, -41, -20, 40
    0xeafafc00, 0x22dfe8f6, 0xfbe9181d, 0x90df8fd, 0x27c5deed, 0xb8220201, 0x26145a1c, 0x28ecd715,
    // -46, -44, -3, 0, -4, -25, -53, 23, 39, 23, -7, 24, -50, -11, 6, -22, -34, 1, 42, -60, -44, 14, 56, -51, 8, 1, 64, -80, 65, -20, -38, -13
    0xfdd4d2, 0x17cbe7fc, 0x18f91727, 0xea06f5ce, 0xc42a01de, 0xcd380ed4, 0xb0400108, 0xf3daec41,
    // -6, -42, -83, -79, -64, 45, 0, -47, -42, 17, -69, 25, 28, -4, 15, 36, 48, 36, 11, -26, -1, 17, 25, -8, 20, -14, -54, 12, 12, 40, 6, -25
    0xb1add6fa, 0xd1002dc0, 0x19bb11d6, 0x240ffc1c, 0xe60b2430, 0xf81911ff, 0xccaf214, 0xe706280c,
    // 14, -45, -15, 18, -12, -39, -28, 28, 1, 13, 8, 53, 76, -39, -47, -33, -15, -1, 32, -14, 48, -12, 31, -14, 71, -43, 22, 21, 7, -1, -36, 16
    0x12f1d30e, 0x1ce4d9f4, 0x35080d01, 0xdfd1d94c, 0xf220fff1, 0xf21ff430, 0x1516d547, 0x10dcff07,
    // -16, -3, 6, -1, -18, 2, -18, 14, -1, -2, 4, 8, 3, -30, -17, -18, -32, 8, -12, 89, -2, 29, 1, -25, -13, 61, 38, -7, -16, 13, -20, -11
    0xff06fdf0, 0xeee02ee, 0x804feff, 0xeeefe203, 0x59f408e0, 0xe7011dfe, 0xf9263df3, 0xf5ec0df0,
    // -13, -55, -47, 47, 55, 111, 38, 78, 24, -43, 14, 17, -14, -20, 13, 119, -2, -11, -36, -20, 3, 9, 18, -8, 7, -33, -13, -9, -10, 7, -16, 3
    0x2fd1c9f3, 0x4e266f37, 0x110ed518, 0x770decf2, 0xecdcf5fe, 0xf8120903, 0xf7f3df07, 0x3f007f6,
    // -3, -22, 3, 20, 8, 5, -4, -29, -10, -6, -1, 8, 16, 0, -3, -12, 12, 47, -31, 42, 15, -20, -32, -51, 67, 5, 22, -29, -27, -12, 57, 13
    0x1403eafd, 0xe3fc0508, 0x8fffaf6, 0xf4fd0010, 0x2ae12f0c, 0xcde0ec0f, 0xe3160543, 0xd39f4e5,
    // -13, 2, 9, -22, 31, 8, 17, -47, -31, -13, 18, -42, 14, -42, -46, 21, 11, 3, -49, -23, -8, -7, -5, -40, 11, -1, 19, -55, 61, 51, 22, 15
    0xea0902f3, 0xd111081f, 0xd612f3e1, 0x15d2d60e, 0xe9cf030b, 0xd8fbf9f8, 0xc913ff0b, 0xf16333d,
    // 11, -22, 2, -10, -2, -3, 4, 23, -13, 2, -12, 27, -21, 18, -9, 6, -47, 33, 7, 11, 123, 77, 40, -9, 17, 26, -15, 42, -4, -86, 31, -29
    0xf602ea0b, 0x1704fdfe, 0x1bf402f3, 0x6f712eb, 0xb0721d1, 0xf7284d7b, 0x2af11a11, 0xe31faafc,
    // 19, 21, 11, -24, -7, 18, -2, 16, -8, 4, 20, 2, -2, 16, 27, 0, 60, 13, 34, -2, 31, 32, 2, 47, -38, 39, 83, 13, -49, -42, -1, 53
    0xe80b1513, 0x10fe12f9, 0x21404f8, 0x1b10fe, 0xfe220d3c, 0x2f02201f, 0xd5327da, 0x35ffd6cf,
    // 29, -2, 20, 1, 8, 6, -1, -7, 6, 26, -7, 3, 30, -2, 18, 29, 12, 25, 13, 1, 31, 13, -58, 29, -73, 20, 17, 29, 17, 9, -2, 15
    0x114fe1d, 0xf9ff0608, 0x3f91a06, 0x1d12fe1e, 0x10d190c, 0x1dc60d1f, 0x1d1114b7, 0xffe0911,
    // 21, -31, -20, -38, 24, -10, -24, -47, 24, 5, -10, -46, -27, -4, -17, 22, 67, -39, -6, 74, -22, -18, -15, -10, 39, 60, -32, 26, 37, -8, 10, -32
    0xdaece115, 0xd1e8f618, 0xd2f60518, 0x16effce5, 0x4afad943, 0xf6f1eeea, 0x1ae03c27, 0xe00af825,
    // 49, -32, 11, -29, -68, 1, -53, -78, 63, -12, -22, 73, -12, -94, 27, 39, -128, 22, 46, -22, 23, 5, 33, 60, 6, 13, -55, 52, 21, 21, 38, 70
    0xe30be031, 0xb2cb01bc, 0x49eaf43f, 0x271ba2f4, 0xea2e1680, 0x3c210517, 0x34c90d06, 0x46261515,
    // 68, 36, -1, -9, -23, 14, 8, 28, -8, 16, 3, 4, -2, -6, 11, 13, 9, 3, -21, 78, 47, -13, -47, 24, 9, -65, -13, 94, -31, 33, -31, -17
    0xf7ff2444, 0x1c080ee9, 0x40310f8, 0xd0bfafe, 0x4eeb0309, 0x18d1f32f, 0x5ef3bf09, 0xefe121e1,
    // -3, 11, 22, 28, -11, 11, 50, -27, -24, -4, 26, 4, 12, -6, -7, -30, -14, -14, -21, -17, 0, 10, -64, 22, -27, -16, 7, -12, 12, -13, 9, -10
    0x1c160bfd, 0xe5320bf5, 0x41afce8, 0xe2f9fa0c, 0xefebf2f2, 0x16c00a00, 0xf407f0e5, 0xf609f30c,
    // -14, -3, 19, 23, 5, 8, 5, -4, -1, 19, -3, -1, -8, 10, 28, -5, 23, -50, 8, -62, -76, -25, -10, -31, -27, 12, 15, 52, -6, 31, -12, 2
    0x1713fdf2, 0xfc050805, 0xfffd13ff, 0xfb1c0af8, 0xc208ce17, 0xe1f6e7b4, 0x340f0ce5, 0x2f41ffa,
    // 20, 5, -20, -1, 10, -44, -6, 3, 5, -23, 45, -1, 15, 27, 0, 24, 89, -22, 40, -28, 36, 21, 28, 11, 10, 34, 84, 3, -22, -53, 22, 40
    0xffec0514, 0x3fad40a, 0xff2de905, 0x18001b0f, 0xe428ea59, 0xb1c1524, 0x354220a, 0x2816cbea,
    // -30, 0, 28, -38, -2, 35, 5, -3, -11, -13, -45, -2, 24, -31, 8, -24, 62, -62, 40, 21, -21, -53, 1, 22, 2, -25, 73, -7, -16, -32, -2, 5
    0xda1c00e2, 0xfd0523fe, 0xfed3f3f5, 0xe808e118, 0x1528c23e, 0x1601cbeb, 0xf949e702, 0x5fee0f0,
    // 61, 16, -9, -34, 41, -23, 20, 37, 8, 10, 7, -46, -13, -25, 47, -8, -37, -8, 15, 37, 25, -65, 40, -12, 4, -37, -57, -17, -4, 37, 65, -69
    0xdef7103d, 0x2514e929, 0xd2070a08, 0xf82fe7f3, 0x250ff8db, 0xf428bf19, 0xefc7db04, 0xbb4125fc,
    // -3, -30, 25, -59, 22, 18, -6, 14, -12, 3, 16, -34, -14, -2, 16, -55, 20, 12, 22, 34, 2, 53, 37, -8, 28, 63, 2, 0, 52, -24, 37, 49
    0xc519e2fd, 0xefa1216, 0xde1003f4, 0xc910fef2, 0x22160c14, 0xf8253502, 0x23f1c, 0x3125e834,
    // 7, 56, 5, -59, -30, 20, 22, 25, 59, -25, 12, -87, -21, 10, 28, -12, -28, 24, -16, -8, 37, -5, -46, 34, -61, 43, 0, -42, 2, -30, 43, -31
    0xc5053807, 0x191614e2, 0xa90ce73b, 0xf41c0aeb, 0xf8f018e4, 0x22d2fb25, 0xd6002bc3, 0xe12be202,
    // 29, -23, 20, 48, 8, 37, -25, -8, 6, 6, -24, 18, -11, 0, 4, 4, -7, 35, 9, 15, -12, -17, -2, -41, 4, 26, 37, -7, 74, -61, -40, 24
    0x3014e91d, 0xf8e72508, 0x12e80606, 0x40400f5, 0xf0923f9, 0xd7feeff4, 0xf9251a04, 0x18d8c34a,
    // 40, 79, 92, 81, 106, -102, -29, -5, 65, 25, 102, 49, 41, -46, -42, 72, 1, -23, 52, 36, 5, -64, 35, 45, 28, -44, 57, 2, 17, -34, -36, 41
    0x515c4f28, 0xfbe39a6a, 0x31661941, 0x48d6d229, 0x2434e901, 0x2d23c005, 0x239d41c, 0x29dcde11,
    // 38, -49, 66, -53, -10, 67, -59, 1, -8, 41, 40, 2, 17, 32, -74, 10, 35, -37, 54, -85, 8, 4, 1, -40, 22, 14, -17, -24, -6, 47, 34, 75
    0xcb42cf26, 0x1c543f6, 0x22829f8, 0xab62011, 0xab36db23, 0xd8010408, 0xe8ef0e16, 0x4b222ffa,
    // -26, -27, -20, -37, 5, -16, -45, -13, 7, 11, 21, -3, -39, 14, -11, 27, -63, 48, 12, 64, 84, 37, -15, 7, -20, 1, 42, -5, -15, -31, -40, -44
    0xdbece5e6, 0xf3d3f005, 0xfd150b07, 0x1bf50ed9, 0x400c30c1, 0x7f12554, 0xfb2a01ec, 0xd4d8e1f1,
    // -36, 34, 19, -56, -70, 6, -25, -16, 13, -7, 84, 31, 10, -61, 44, 30, 11, -39, 56, 3, 17, -45, 3, 51, 19, -37, 30, 10, -34, -42, 32, 0
    0xc81322dc, 0xf0e706ba, 0x1f54f90d, 0x1e2cc30a, 0x338d90b, 0x3303d311, 0xa1edb13, 0x20d6de,
    // -24, 3, -51, 18, -42, -43, -1, -41, 51, 52, -12, -1, 38, -45, -23, 46, 33, 24, 15, 21, -63, 3, -38, -35, 72, 39, -7, 12, 7, -38, -16, -3
    0x12cd03e8, 0xd7ffd5d6, 0xfff43433, 0x2ee9d326, 0x150f1821, 0xddda03c1, 0xcf92748, 0xfdf0da07,
    // -14, 8, 25, 7, 26, -10, -8, 49, 18, -31, -50, -12, 59, 27, 20, 15, -31, -17, -9, 70, 0, 62, 35, 12, 10, -14, -24, -16, 28, -38, 9, 50
    0x71908f2, 0x31f8f61a, 0xf4cee112, 0xf141b3b, 0x46f7efe1, 0xc233e00, 0xf0e8f20a, 0x3209da1c,
    // 42, 35, -8, 26, 25, 18, -7, 29, -46, -9, -82, 6, -32, -66, 21, 11, 30, -21, 28, -9, -25, 1, -35, 2, -9, 32, 32, -26, -24, -32, 4, -17
    0x1af8232a, 0x1df91219, 0x6aef7d2, 0xb15bee0, 0xf71ceb1e, 0x2dd01e7, 0xe62020f7, 0xef04e0e8,
};
static const uint embedded_decoder3_ResidualBlock_1_body_pw_expand_bias_dwords[32] = {
    // -0.0658, 0.000814, -0.1389, 0.01646, -0.3577, -0.2218, -0.0601, -0.1515, -0.134, 0.0518, -0.672, -0.07294, -0.1915, -0.1874, -0.0591, 0.04858
    0x12abac36, 0x2437b072, 0xb319b5b9, 0xb0d9abb1, 0x2aa1b04a, 0xacabb960, 0xb1ffb221, 0x2a38ab91,
    // -0.03406, -0.3503, -0.1023, -0.459, -0.05472, 0.0764, -0.1649, -0.0731, -0.0966, -0.08746, -0.1395, -0.2043, -0.11237, -0.1493, -0.3518, -0.1527
    0xb59ba85c, 0xb758ae8c, 0x2ce4ab01, 0xacaeb147, 0xad99ae2f, 0xb28ab077, 0xb0c7af31, 0xb0e3b5a1,
    // 0.04327, 0.01859, -0.02083, -0.1848, -0.2029, -0.1683, -0.03043, -0.07635, 0.0651, -0.06183, -0.0372, -0.2157, -0.1584, 0.0383, -0.3525, -0.3506
    0x24c2298a, 0xb1eaa555, 0xb163b27e, 0xace3a7ca, 0xabea2c2b, 0xb2e7a8c3, 0x28e7b112, 0xb59cb5a4,
    // -0.241, -0.06537, -0.1726, -0.1233, -0.2644, -0.2039, -0.2666, -0.0428, -0.01371, -0.201, -0.559, -0.05212, -0.1794, -0.1771, -0.3586, 0.04
    0xac2fb3b6, 0xafe4b186, 0xb286b43b, 0xa97ab444, 0xb26fa305, 0xaaacb879, 0xb1abb1be, 0x291fb5bd,
};
static const uint embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 4, 30, 1, -12, 8, 18, -38, -8, 2, 0, -16, -51, -2, 0, 19, 53, -97, -7, 46, -22, 11, -16, 67, 28, -24, -32, -8, -51, -45, -81, 16, 5
    0xf4011e04, 0xf8da1208, 0xcdf00002, 0x351300fe, 0xea2ef99f, 0x1c43f00b, 0xcdf8e0e8, 0x510afd3,
    // -24, 8, 3, 91, 20, -6, -19, -26, 31, 27, 0, -30, 7, -74, 56, -60, -13, 20, -50, 21, -23, -15, 56, 19, -25, -12, 10, 17, 31, 47, -35, -28
    0x5b0308e8, 0xe6edfa14, 0xe2001b1f, 0xc438b607, 0x15ce14f3, 0x1338f1e9, 0x110af4e7, 0xe4dd2f1f,
    // 3, 41, 18, -12, -57, 17, -41, 9, -4, -48, -2, -9, 3, 17, 0, 15, -7, -23, 49, 23, -17, -3, -40, 14, -12, -2, 45, -27, -3, -25, 0, 41
    0xf4122903, 0x9d711c7, 0xf7fed0fc, 0xf001103, 0x1731e9f9, 0xed8fdef, 0xe52dfef4, 0x2900e7fd,
    // -3, 53, 11, -31, -22, -24, 43, 4, 0, 36, -30, 30, -28, -6, 32, -25, -21, -38, -10, 29, -39, 8, -63, -4, 2, -36, -9, -5, 48, -51, -65, -2
    0xe10b35fd, 0x42be8ea, 0x1ee22400, 0xe720fae4, 0x1df6daeb, 0xfcc108d9, 0xfbf7dc02, 0xfebfcd30,
    // -61, -11, 22, 15, 32, 1, 58, 22, -6, -70, -32, 64, -17, 33, -18, -42, -27, -34, 1, -49, 19, 8, 60, -19, -23, -33, 14, 40, -12, -4, 13, -1
    0xf16f5c3, 0x163a0120, 0x40e0bafa, 0xd6ee21ef, 0xcf01dee5, 0xed3c0813, 0x280edfe9, 0xff0dfcf4,
    // -4, 53, 23, -44, 4, 33, 9, -27, 9, -15, 29, 40, -25, 67, -53, -57, -44, 46, 5, 12, 28, -9, -21, 22, -26, -19, 5, 16, -40, 17, 14, 12
    0xd41735fc, 0xe5092104, 0x281df109, 0xc7cb43e7, 0xc052ed4, 0x16ebf71c, 0x1005ede6, 0xc0e11d8,
    // 11, -34, 112, -4, 28, 15, 38, 52, 14, -24, -8, -33, -72, -16, 74, 23, 35, -42, 13, 32, 27, -1, 42, -33, 39, 27, -1, 8, -27, 13, -6, -43
    0xfc70de0b, 0x34260f1c, 0xdff8e80e, 0x174af0b8, 0x200dd623, 0xdf2aff1b, 0x8ff1b27, 0xd5fa0de5,
    // 64, 22, -16, 13, -32, 1, -55, -48, -73, 9, 1, -53, 22, -1, -3, 54, -12, 2, -6, 3, 4, 44, 26, -13, -18, -48, 4, -11, -85, 20, -39, 28
    0xdf01640, 0xd0c901e0, 0xcb0109b7, 0x36fdff16, 0x3fa02f4, 0xf31a2c04, 0xf504d0ee, 0x1cd914ab,
    // 20, 9, 36, -34, 12, -1, -41, -30, -19, -29, -44, 0, 29, -9, 31, 3, 27, 28, 58, -26, -24, 3, 15, -14, -16, -16, -25, -14, -15, -19, 30, -11
    0xde240914, 0xe2d7ff0c, 0xd4e3ed, 0x31ff71d, 0xe63a1c1b, 0xf20f03e8, 0xf2e7f0f0, 0xf51eedf1,
    // 2, 35, 0, -10, 66, -51, 5, 25, -4, 30, -9, 40, 11, 18, 45, 8, 7, -9, 49, -4, -11, -20, 6, -35, 28, -9, -24, 31, -9, 7, 1, -29
    0xf6002302, 0x1905cd42, 0x28f71efc, 0x82d120b, 0xfc31f707, 0xdd06ecf5, 0x1fe8f71c, 0xe30107f7,
    // 0, 7, -38, -62, 12, -3, 87, -17, -24, 7, 4, -4, 15, 27, -42, -14, 9, -21, 27, -24, -28, 2, 84, 3, -28, 6, -22, 13, 54, 8, -15, 30
    0xc2da0700, 0xef57fd0c, 0xfc0407e8, 0xf2d61b0f, 0xe81beb09, 0x35402e4, 0xdea06e4, 0x1ef10836,
    // -18, -8, -40, -18, -2, 30, 42, 8, 8, -7, 30, -7, 7, -27, -9, 127, 40, 30, -4, 17, -43, 14, -10, -20, -15, 39, 13, 26, -20, 5, 17, -48
    0xeed8f8ee, 0x82a1efe, 0xf91ef908, 0x7ff7e507, 0x11fc1e28, 0xecf60ed5, 0x1a0d27f1, 0xd01105ec,
    // 20, -38, -6, 20, 0, 41, -8, -23, -4, -77, 89, 25, 12, -2, 15, -3, -42, 12, -67, 13, -3, -17, -14, 6, 2, -4, -23, 18, 3, 8, 2, -9
    0x14fada14, 0xe9f82900, 0x1959b3fc, 0xfd0ffe0c, 0xdbd0cd6, 0x6f2effd, 0x12e9fc02, 0xf7020803,
    // -26, 88, -11, -9, 33, -28, -15, 12, 21, -5, 1, 6, 40, -52, -1, -65, -1, -20, 6, -10, 0, 22, 40, -36, 32, 14, -40, -26, 38, -10, 33, 18
    0xf7f558e6, 0xcf1e421, 0x601fb15, 0xbfffcc28, 0xf606ecff, 0xdc281600, 0xe6d80e20, 0x1221f626,
    // -47, -3, 17, 29, -68, -2, 42, 4, 30, -45, 16, 41, 29, 22, -4, 8, 0, -25, -15, 6, -23, 22, -23, 27, 58, -24, -2, 6, 0, 9, -6, 5
    0x1d11fdd1, 0x42afebc, 0x2910d31e, 0x8fc161d, 0x6f1e700, 0x1be916e9, 0x6fee83a, 0x5fa0900,
    // 6, 40, 6, -32, 23, -33, 1, -10, -10, 12, 38, 49, 20, 0, -42, 53, -5, 1, 22, 4, -2, -8, -23, -20, -39, -1, 23, -48, -58, -12, -6, 3
    0xe0062806, 0xf601df17, 0x31260cf6, 0x35d60014, 0x41601fb, 0xece9f8fe, 0xd017ffd9, 0x3faf4c6,
    // -6, 40, -51, -34, 75, -9, 60, -104, -25, -21, -63, -47, 22, 22, -35, -59, 20, 28, 41, 28, 65, -52, -24, -18, -12, 26, 46, 36, 8, -13, -41, -5
    0xdecd28fa, 0x983cf74b, 0xd1c1ebe7, 0xc5dd1616, 0x1c291c14, 0xeee8cc41, 0x242e1af4, 0xfbd7f308,
    // 43, 27, 21, 4, 11, 12, 33, 59, -47, 9, 17, -26, -2, 48, 5, 46, -14, -40, -2, -12, -34, 22, -28, -17, -30, 108, -17, 18, -78, -22, -7, 0
    0x4151b2b, 0x3b210c0b, 0xe61109d1, 0x2e0530fe, 0xf4fed8f2, 0xefe416de, 0x12ef6ce2, 0xf9eab2,
    // -11, 18, 12, 31, -41, -34, -9, 40, -27, -57, -10, -22, -22, -20, 5, 37, 16, 42, -18, 52, 31, 9, -58, -3, 3, 14, -63, 36, 8, 28, 4, 57
    0x1f0c12f5, 0x28f7ded7, 0xeaf6c7e5, 0x2505ecea, 0x34ee2a10, 0xfdc6091f, 0x24c10e03, 0x39041c08,
    // -5, 53, 11, 10, -23, 7, -26, -1, -2, -20, -21, -50, -16, 0, 61, -16, -16, -19, -11, -16, 43, -12, 16, 30, -5, -20, 1, 29, -4, 15, 48, -5
    0xa0b35fb, 0xffe607e9, 0xceebecfe, 0xf03d00f0, 0xf0f5edf0, 0x1e10f42b, 0x1d01ecfb, 0xfb300ffc,
    // -3, -5, -100, 13, -2, 22, 69, -56, 16, 18, 5, -24, -5, 20, -95, 23, -4, -5, -16, 32, -18, -1, 52, -20, -22, 23, -18, -18, -7, -6, 13, 25
    0xd9cfbfd, 0xc84516fe, 0xe8051210, 0x17a114fb, 0x20f0fbfc, 0xec34ffee, 0xeeee17ea, 0x190dfaf9,
    // 53, -16, 6, -13, -18, 84, -26, -43, -64, 20, -3, -14, -21, -34, 41, -50, 9, 30, 36, 9, -9, -18, 18, 88, -21, 63, -14, -17, 8, 15, 10, 38
    0xf306f035, 0xd5e654ee, 0xf2fd14c0, 0xce29deeb, 0x9241e09, 0x5812eef7, 0xeff23feb, 0x260a0f08,
    // 13, -21, -3, -4, 50, 11, 41, 8, 6, -84, 20, -42, -16, 15, -22, -22, 5, 22, 6, -16, 16, -15, 13, -16, -39, 24, 15, -8, 14, 8, -7, -36
    0xfcfdeb0d, 0x8290b32, 0xd614ac06, 0xeaea0ff0, 0xf0061605, 0xf00df110, 0xf80f18d9, 0xdcf9080e,
    // 0, 87, -15, -7, -12, -2, 77, 44, 5, 1, -37, -58, -10, -26, 13, -60, 18, 19, -12, -7, 17, -13, -5, -7, 16, 2, 27, 10, -7, -16, -3, 58
    0xf9f15700, 0x2c4dfef4, 0xc6db0105, 0xc40de6f6, 0xf9f41312, 0xf9fbf311, 0xa1b0210, 0x3afdf0f9,
    // -9, -14, -17, 40, 3, -21, 23, 27, 63, -30, -21, -7, -20, -10, -12, 14, 50, -64, 46, -28, -4, -7, 10, 0, 15, 30, 20, -39, 15, 37, 29, -51
    0x28eff2f7, 0x1b17eb03, 0xf9ebe23f, 0xef4f6ec, 0xe42ec032, 0xaf9fc, 0xd9141e0f, 0xcd1d250f,
    // 0, 21, -3, -19, -1, -8, 42, -34, -6, 10, 13, -10, -16, 18, -38, 16, 86, 20, -11, -28, 22, -39, 28, -6, -40, -20, 63, -51, -1, 16, 8, 14
    0xedfd1500, 0xde2af8ff, 0xf60d0afa, 0x10da12f0, 0xe4f51456, 0xfa1cd916, 0xcd3fecd8, 0xe0810ff,
    // -19, -26, -43, -24, 6, 7, 33, -6, 11, -1, 36, 21, -12, 14, -17, -23, -76, 12, 2, -12, -30, 19, -34, 22, 14, -8, 14, 8, 46, 12, -4, 11
    0xe8d5e6ed, 0xfa210706, 0x1524ff0b, 0xe9ef0ef4, 0xf4020cb4, 0x16de13e2, 0x80ef80e, 0xbfc0c2e,
    // 109, -5, 2, 4, 21, -2, 54, 11, -120, -19, -50, 38, -52, -17, -23, -15, 14, 13, -56, 18, 4, 2, 19, -16, -10, 26, -3, -14, -70, -13, 6, 83
    0x402fb6d, 0xb36fe15, 0x26ceed88, 0xf1e9efcc, 0x12c80d0e, 0xf0130204, 0xf2fd1af6, 0x5306f3ba,
    // 12, -39, -37, 33, 26, -11, 12, -47, 43, -42, -19, -8, -46, -52, -1, 0, -15, -1, 39, 15, -38, 8, -63, 9, 75, 28, 25, 17, 19, 16, -22, -11
    0x21dbd90c, 0xd10cf51a, 0xf8edd62b, 0xffccd2, 0xf27fff1, 0x9c108da, 0x11191c4b, 0xf5ea1013,
    // 2, 51, 5, 41, -53, 21, -47, -23, 10, 20, -15, 24, -5, 29, 17, 7, -13, -13, -26, 7, 7, 46, -10, 3, -31, 24, 60, 25, 13, 18, 1, 38
    0x29053302, 0xe9d115cb, 0x18f1140a, 0x7111dfb, 0x7e6f3f3, 0x3f62e07, 0x193c18e1, 0x2601120d,
    // -20, 72, -48, 60, -5, 29, -55, -51, -23, 13, 39, -14, -36, 13, 19, -10, -30, 6, -39, 24, 19, 2, -14, -19, -16, 29, 11, 14, -9, 14, -24, 11
    0x3cd048ec, 0xcdc91dfb, 0xf2270de9, 0xf6130ddc, 0x18d906e2, 0xedf20213, 0xe0b1df0, 0xbe80ef7,
    // -31, -8, 26, 34, 35, 10, -12, -89, 38, 4, -1, -20, -15, 36, -74, -31, 21, -1, -62, 23, -25, 23, 28, -41, 6, 41, -32, -10, 27, -15, 42, -56
    0x221af8e1, 0xa7f40a23, 0xecff0426, 0xe1b624f1, 0x17c2ff15, 0xd71c17e7, 0xf6e02906, 0xc82af11b,
    // -7, -13, 1, 68, -12, 105, 26, -34, 23, 1, 8, 22, -20, -1, -18, 47, 28, 58, 17, -3, 16, 13, -23, 48, 40, 7, -1, -40, 8, 16, -61, 19
    0x4401f3f9, 0xde1a69f4, 0x16080117, 0x2feeffec, 0xfd113a1c, 0x30e90d10, 0xd8ff0728, 0x13c31008,
    // -2, 8, -36, -9, -34, -15, 31, 76, 3, -33, -8, -47, -14, -46, 19, -6, 12, 3, 25, -54, -43, -4, -11, 4, -31, 38, 85, 5, -30, -7, 31, 3
    0xf7dc08fe, 0x4c1ff1de, 0xd1f8df03, 0xfa13d2f2, 0xca19030c, 0x4f5fcd5, 0x55526e1, 0x31ff9e2,
    // -10, -13, -1, 26, 2, -27, 41, 9, -1, 11, -16, -77, -51, 72, -1, 3, 34, -27, -40, 39, 8, 14, -31, -65, -11, 32, -54, -3, -9, -1, -11, -2
    0x1afff3f6, 0x929e502, 0xb3f00bff, 0x3ff48cd, 0x27d8e522, 0xbfe10e08, 0xfdca20f5, 0xfef5fff7,
    // 0, -7, -37, 25, -30, -4, -37, 50, 11, -51, -46, -123, 5, -9, -23, -18, 6, -12, 24, 46, 28, -17, -64, -25, -25, 2, 41, -4, -22, -73, -26, 16
    0x19dbf900, 0x32dbfce2, 0x85d2cd0b, 0xeee9f705, 0x2e18f406, 0xe7c0ef1c, 0xfc2902e7, 0x10e6b7ea,
    // -20, -16, -16, -56, 20, 58, 11, 20, 21, -7, -1, -74, -44, -29, 24, -62, -32, 31, -16, 0, 20, -10, 1, -40, -15, 19, 20, -8, -6, -23, 7, -86
    0xc8f0f0ec, 0x140b3a14, 0xb6fff915, 0xc218e3d4, 0xf01fe0, 0xd801f614, 0xf81413f1, 0xaa07e9fa,
    // 6, 8, 27, 48, 16, -9, 6, -42, -2, 50, 38, -60, -58, -26, -75, -3, -70, 37, -46, -41, -14, -27, 48, -23, 23, -18, 41, -11, 22, -42, -13, 24
    0x301b0806, 0xd606f710, 0xc42632fe, 0xfdb5e6c6, 0xd7d225ba, 0xe930e5f2, 0xf529ee17, 0x18f3d616,
    // 9, 42, -26, -12, 11, 31, -64, -2, -35, 4, 15, 36, 29, 20, -13, 10, 63, -69, 35, 10, 26, -106, -12, 90, 7, 3, 34, -50, 13, 9, 101, 25
    0xf4e62a09, 0xfec01f0b, 0x240f04dd, 0xaf3141d, 0xa23bb3f, 0x5af4961a, 0xce220307, 0x1965090d,
    // -4, -8, 34, -10, 47, 1, -30, -88, -6, -26, 23, 76, 23, 27, 15, -16, 55, -33, -45, 35, -39, 3, -44, 27, 30, -2, 36, -60, 6, 8, -6, -7
    0xf622f8fc, 0xa8e2012f, 0x4c17e6fa, 0xf00f1b17, 0x23d3df37, 0x1bd403d9, 0xc424fe1e, 0xf9fa0806,
    // 20, -6, 16, -51, -25, 20, -20, -27, -6, -13, 48, 4, -13, 50, -9, 34, 29, -43, 10, -111, 6, -11, -18, -7, -33, -14, -65, 65, -4, 27, 26, 37
    0xcd10fa14, 0xe5ec14e7, 0x430f3fa, 0x22f732f3, 0x910ad51d, 0xf9eef506, 0x41bff2df, 0x251a1bfc,
    // 1, 15, -86, 1, -12, 13, 18, 36, 0, -31, -13, -90, 30, 7, 7, -26, 51, 62, 70, -39, 7, -16, 34, -1, -23, -3, -26, 5, -4, 1, 71, 0
    0x1aa0f01, 0x24120df4, 0xa6f3e100, 0xe607071e, 0xd9463e33, 0xff22f007, 0x5e6fde9, 0x4701fc,
    // -16, 9, 24, 43, 19, -58, -96, 10, 46, -4, -40, 5, 4, -1, 20, 2, -24, 66, 18, -46, 65, -36, 13, 4, 2, -57, 35, -57, -2, -30, -5, -17
    0x2b1809f0, 0xaa0c613, 0x5d8fc2e, 0x214ff04, 0xd21242e8, 0x40ddc41, 0xc723c702, 0xeffbe2fe,
    // -2, -3, 36, -4, 16, -12, -29, -75, -6, 3, -21, -59, 4, -1, 6, -10, -61, 27, 11, -37, 27, 29, -5, -29, 56, 15, -11, -12, 11, 2, -25, 47
    0xfc24fdfe, 0xb5e3f410, 0xc5eb03fa, 0xf606ff04, 0xdb0b1bc3, 0xe3fb1d1b, 0xf4f50f38, 0x2fe7020b,
    // 50, -38, 17, 25, 28, 19, 10, 44, 41, 6, -67, -11, -60, 10, 5, -55, 46, 46, -18, 57, 47, 15, 25, -85, -17, 58, 16, -5, -51, -27, -33, -33
    0x1911da32, 0x2c0a131c, 0xf5bd0629, 0xc9050ac4, 0x39ee2e2e, 0xab190f2f, 0xfb103aef, 0xdfdfe5cd,
    // -2, -9, -18, -20, 3, -10, -18, 33, -2, 31, -16, 14, -15, 36, 53, -2, 48, 47, 13, -22, -1, 58, -55, 33, -2, -17, -52, 85, 11, 18, -30, 36
    0xeceef7fe, 0x21eef603, 0xef01ffe, 0xfe3524f1, 0xea0d2f30, 0x21c93aff, 0x55cceffe, 0x24e2120b,
    // -25, 14, -7, 35, -66, 84, 39, 2, 2, -3, 29, -8, 20, -18, -24, 43, 5, -46, 64, -21, -20, -36, 40, -30, -21, -1, -44, 33, -25, 6, 23, -49
    0x23f90ee7, 0x22754be, 0xf81dfd02, 0x2be8ee14, 0xeb40d205, 0xe228dcec, 0x21d4ffeb, 0xcf1706e7,
    // 4, -5, -33, 0, 62, 1, -28, -2, -3, 13, 2, -64, 15, 30, -64, 20, 24, 0, 13, -6, -35, -61, 1, 17, 39, -12, 29, -56, 1, -21, 29, 12
    0xdffb04, 0xfee4013e, 0xc0020dfd, 0x14c01e0f, 0xfa0d0018, 0x1101c3dd, 0xc81df427, 0xc1deb01,
    // -8, -13, 2, -6, 31, -24, -20, -5, 18, 4, 14, 81, -28, 44, 10, 36, 68, 9, -50, -45, 10, 12, -6, 25, -14, 10, -9, -28, -9, 10, -26, -51
    0xfa02f3f8, 0xfbece81f, 0x510e0412, 0x240a2ce4, 0xd3ce0944, 0x19fa0c0a, 0xe4f70af2, 0xcde60af7,
    // 1, -3, -2, -54, 11, 4, -11, -29, 1, -32, -10, -31, 0, 6, -51, -3, 58, -34, 18, -32, 24, 8, -59, 7, -34, -1, 61, 13, 11, 37, 23, 7
    0xcafefd01, 0xe3f5040b, 0xe1f6e001, 0xfdcd0600, 0xe012de3a, 0x7c50818, 0xd3dffde, 0x717250b,
    // -6, 16, -2, -84, -6, -1, 41, -19, 21, 7, 3, 32, -40, -10, -6, 8, -36, 30, 21, 8, 13, -2, 7, 25, -15, -21, -31, 36, -17, -27, -28, -35
    0xacfe10fa, 0xed29fffa, 0x20030715, 0x8faf6d8, 0x8151edc, 0x1907fe0d, 0x24e1ebf1, 0xdde4e5ef,
    // -2, -17, 7, -25, -44, 12, -1, -22, -3, 23, -32, -26, 5, 70, 49, 21, -34, 38, 14, 23, 32, 57, -19, -12, -47, -7, 41, 16, 4, 28, 51, -7
    0xe707effe, 0xeaff0cd4, 0xe6e017fd, 0x15314605, 0x170e26de, 0xf4ed3920, 0x1029f9d1, 0xf9331c04,
    // 21, 18, 7, -19, 48, 63, -39, 10, -59, -12, -5, 9, 27, 9, 14, -2, -11, -10, -45, 54, 2, 22, 4, 18, 33, -23, -1, 8, 67, 34, 55, 29
    0xed071215, 0xad93f30, 0x9fbf4c5, 0xfe0e091b, 0x36d3f6f5, 0x12041602, 0x8ffe921, 0x1d372243,
    // 0, 6, 23, -5, -81, 3, -28, -49, -8, -39, 11, 18, -54, -27, 42, 7, -26, -27, -11, -90, -74, 70, -28, 0, -39, -11, 8, -29, 2, -18, 8, -5
    0xfb170600, 0xcfe403af, 0x120bd9f8, 0x72ae5ca, 0xa6f5e5e6, 0xe446b6, 0xe308f5d9, 0xfb08ee02,
    // -52, 5, 12, -6, 10, -73, -24, 27, 11, -2, 9, -34, -9, -23, -23, 26, 44, 38, -3, 10, 9, 12, 68, 11, -3, 60, 39, 23, -47, -54, -21, -85
    0xfa0c05cc, 0x1be8b70a, 0xde09fe0b, 0x1ae9e9f7, 0xafd262c, 0xb440c09, 0x17273cfd, 0xabebcad1,
    // 5, 5, 34, 11, 36, 1, 8, 27, 1, -25, 36, -42, 11, 0, -33, -2, -94, 65, -44, -53, 18, 7, 20, 40, 35, 22, -24, 2, -20, 2, 18, 9
    0xb220505, 0x1b080124, 0xd624e701, 0xfedf000b, 0xcbd441a2, 0x28140712, 0x2e81623, 0x91202ec,
    // -17, 3, -2, -35, -1, 36, -44, 24, 13, -5, 26, -18, -7, 34, -17, -40, 44, 4, 38, -64, -57, 25, 43, -15, 29, 8, -50, -17, -44, -18, -11, -53
    0xddfe03ef, 0x18d424ff, 0xee1afb0d, 0xd8ef22f9, 0xc026042c, 0xf12b19c7, 0xefce081d, 0xcbf5eed4,
    // -10, -1, -54, 14, -45, 31, 54, -23, 6, 49, -5, -5, 84, 6, 31, 15, 75, 13, 50, 85, 44, 23, 52, 13, -74, 10, 78, -43, 38, -10, 68, -8
    0xecafff6, 0xe9361fd3, 0xfbfb3106, 0xf1f0654, 0x55320d4b, 0xd34172c, 0xd54e0ab6, 0xf844f626,
    // 75, 2, -16, -55, 23, -87, -56, -15, -7, -6, 15, 46, 47, -26, -13, 3, 58, 13, 60, -17, 3, -6, -14, 7, -30, -29, 36, -17, 3, 76, 41, 34
    0xc9f0024b, 0xf1c8a917, 0x2e0ffaf9, 0x3f3e62f, 0xef3c0d3a, 0x7f2fa03, 0xef24e3e2, 0x22294c03,
    // -9, 3, -13, 44, -22, -12, -4, 11, -10, 1, -35, 34, 27, 7, 44, -13, 75, 0, 61, 54, 5, 42, 33, -7, 55, 11, 38, -24, -18, -24, 56, 9
    0x2cf303f7, 0xbfcf4ea, 0x22dd01f6, 0xf32c071b, 0x363d004b, 0xf9212a05, 0xe8260b37, 0x938e8ee,
    // -45, -10, -9, 62, -12, 3, -26, 11, 57, -1, -8, 13, -5, 92, -23, 65, 77, 52, -11, 13, -17, 16, 50, 34, -3, 7, -77, -45, 18, 19, -84, 20
    0x3ef7f6d3, 0xbe603f4, 0xdf8ff39, 0x41e95cfb, 0xdf5344d, 0x223210ef, 0xd3b307fd, 0x14ac1312,
    // -4, -3, -49, 65, 45, -16, -20, 34, -1, -68, -8, -99, -41, -32, -6, 12, 53, 44, 77, -37, 21, 6, 31, -7, 18, 12, -3, 5, 34, -5, 31, -2
    0x41cffdfc, 0x22ecf02d, 0x9df8bcff, 0xcfae0d7, 0xdb4d2c35, 0xf91f0615, 0x5fd0c12, 0xfe1ffb22,
    // 33, -29, -50, 59, 55, 50, -77, -3, 28, -12, -65, 53, -21, -26, 5, -9, 72, 5, -15, -16, 35, -23, -48, -41, -19, 13, 22, 2, -46, -12, 3, 63
    0x3bcee321, 0xfdb33237, 0x35bff41c, 0xf705e6eb, 0xf0f10548, 0xd7d0e923, 0x2160ded, 0x3f03f4d2,
    // -2, 6, -51, -25, -3, 4, 47, 58, -4, -48, -62, 2, 59, 31, 54, -29, 35, 0, 76, -5, 25, -16, -8, 28, -36, -18, -56, 45, 18, 37, -26, 70
    0xe7cd06fe, 0x3a2f04fd, 0x2c2d0fc, 0xe3361f3b, 0xfb4c0023, 0x1cf8f019, 0x2dc8eedc, 0x46e62512,
};
static const uint embedded_decoder3_ResidualBlock_1_body_pw_contract_bias_dwords[16] = {
    // 0.0004869, 0.000198, 0.0001513, -0.0001799, -0.0003421, -0.000737, -0.0007224, 0.0001342, -0.000608, 0.0002923, 0.0001855, -0.000698, 0.0002143, -0.000252, 0.000809, -9.83e-06
    0xa7d0ffa, 0x89e508f5, 0x920a8d9b, 0x86691eb, 0xcca90fb, 0x91b80a14, 0x8c210b06, 0x80a512a1,
    // -0.0001506, 0.0001805, -0.0004663, 0.000885, 4.67e-05, -0.0009165, 0.0017, -0.000417, -0.0003211, -0.0002047, 0.0003073, 0.000605, -5.317e-05, -0.0001361, -0.0002787, -9.04e-05
    0x9ea88ef, 0x13408fa4, 0x9382030f, 0x8ed516f7, 0x8ab58d43, 0x10f50d09, 0x8876837c, 0x85ed8c91,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass10(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped = {
        uint3(1920, 1080, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 32), // threadGroupSliceSize
        uint3(1920, 1080, 32), // storageSize
        uint3(32, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        265420800, // threadGroupStorageByteOffset
        storage_FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped };
    
    const ConstantBufferStorage<576> storage_embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0054748039692640305, storage_embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = { embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004476775880903006, storage_embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_decoder3_ResidualBlock_1_body_pw_expand_bias = { embedded_decoder3_ResidualBlock_1_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_decoder3_ResidualBlock_1_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_1_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004429912194609642, storage_embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder3_ResidualBlock_1_body_pw_contract_bias = { embedded_decoder3_ResidualBlock_1_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder3_ResidualBlock_1_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_1_body_pw_contract_bias };
    
    // /decoder3/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_20 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_20 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_20 = uint3(64, 1, 32);
    const uint3 storageSize_slice_20 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_20 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_20 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_20 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_20 = dot(groupStart_slice_20, tensorByteStrides_slice_20);
    const RWBufferStorage storage_slice_20 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_20 = { logicalSize_slice_20, groupStart_slice_20, groupSize_slice_20, storageSize_slice_20, tensorByteStrides_slice_20, paddingBegin_slice_20, paddingEnd_slice_20, threadGroupByteOffsetInTensor_slice_20 + 132710400, storage_slice_20 };
    // Fusedquantized_/decoder3/ResidualBlock_1/residual_func/Concat_quantized_/decoder3/ResidualBlock_1/body/spatial_mixing/partial_conv/Conv_quantized_/decoder3/ResidualBlock_1/body/spatial_mixing/Concat_quantized_/decoder3/ResidualBlock_1/body/pw_expand/Conv_/decoder3/ResidualBlock_1/body/pw_expand_act/Relu_quantized_/decoder3/ResidualBlock_1/body/pw_contract/Conv_/decoder3/ResidualBlock_1/Add (32, 1080, 1920), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,) -> (32, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<32, 1>(0.017398089170455933, 0.02467365749180317, 0.018399113789200783, 0.017359809949994087, 0.02316836453974247, FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped, embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias, embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_1_body_pw_expand_bias, embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_1_body_pw_contract_bias, slice_20, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_10
#ifdef MLSR_PASS_10_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass10_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /decoder3/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_21 = uint3(1920, 1080, 32);
    const int3 groupStart_slice_21 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_21 = uint3(32, 1, 32);
    const uint3 storageSize_slice_21 = uint3(1920, 1080, 32);
    const uint3 tensorByteStrides_slice_21 = uint3(32, 61440, 1);
    const uint3 paddingBegin_slice_21 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_21 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_21 = dot(groupStart_slice_21, tensorByteStrides_slice_21);
    const RWBufferStorage storage_slice_21 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_21 = { logicalSize_slice_21, groupStart_slice_21, groupSize_slice_21, storageSize_slice_21, tensorByteStrides_slice_21, paddingBegin_slice_21, paddingEnd_slice_21, threadGroupByteOffsetInTensor_slice_21 + 132710400, storage_slice_21 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_21, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_10_POST


#ifdef MLSR_PASS_11
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FNB_CT2D_ADD.hlsli"

static const uint embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // -10, -6, -7, -4, 2, 0, 8, 9, -2, -11, 1, -2, 7, -12, 4, -12, -11, 0, 1, -1, 18, -10, -15, -11, 10, -30, 3, -1, 4, -28, -20, -9
    0xfcf9faf6, 0x9080002, 0xfe01f5fe, 0xf404f407, 0xff0100f5, 0xf5f1f612, 0xff03e20a, 0xf7ece404,
    // -11, 3, -4, 1, 7, 9, 6, -14, -1, -12, 12, -3, 6, 4, -10, -9, 3, -12, 15, 20, 0, 2, 0, -4, 55, 1, -29, -24, -6, -16, -10, 1
    0x1fc03f5, 0xf2060907, 0xfd0cf4ff, 0xf7f60406, 0x140ff403, 0xfc000200, 0xe8e30137, 0x1f6f0fa,
    // -13, 20, -27, -13, -24, 16, 59, -53, 98, -9, -30, -25, 82, -10, 40, -56, -26, 6, -15, 28, -25, 12, -14, 3, -33, 14, -43, -23, 34, 23, -9, -31
    0xf3e514f3, 0xcb3b10e8, 0xe7e2f762, 0xc828f652, 0x1cf106e6, 0x3f20ce7, 0xe9d50edf, 0xe1f71722,
    // 2, -16, -12, 1, 2, 7, 27, 7, -1, -1, 14, -8, 3, -14, 3, 5, -6, -8, 9, 7, 8, -6, 24, -18, -3, -2, 16, 0, -8, -5, -5, -6
    0x1f4f002, 0x71b0702, 0xf80effff, 0x503f203, 0x709f8fa, 0xee18fa08, 0x10fefd, 0xfafbfbf8,
    // 5, 4, -9, 8, 11, -22, 13, 6, -10, -8, -12, 9, 17, 11, 6, -9, -1, -1, -3, -11, 3, -11, 10, 26, 2, 12, 6, -4, -3, -20, 0, 0
    0x8f70405, 0x60dea0b, 0x9f4f8f6, 0xf7060b11, 0xf5fdffff, 0x1a0af503, 0xfc060c02, 0xecfd,
    // 25, -21, 18, -11, 20, -17, 11, 15, 2, -3, 0, -29, -20, -30, -7, -12, 2, -8, -6, -17, -1, -9, 3, 0, -12, -6, 7, -8, -6, -6, -3, -2
    0xf512eb19, 0xf0bef14, 0xe300fd02, 0xf4f9e2ec, 0xeffaf802, 0x3f7ff, 0xf807faf4, 0xfefdfafa,
    // 15, 12, 41, 30, 23, -21, 0, 39, 37, 25, -31, -27, -9, -4, 3, -24, -46, 8, -60, 17, -53, 48, -70, 72, -34, 21, 5, 60, 66, 5, 30, 47
    0x1e290c0f, 0x2700eb17, 0xe5e11925, 0xe803fcf7, 0x11c408d2, 0x48ba30cb, 0x3c0515de, 0x2f1e0542,
    // 11, 2, -2, 2, -3, -2, -16, 33, -1, 9, -23, -61, 8, 12, 11, -10, 7, -8, -10, 0, 4, -12, 10, 18, 3, 16, 7, -13, -2, 10, 1, -3
    0x2fe020b, 0x21f0fefd, 0xc3e909ff, 0xf60b0c08, 0xf6f807, 0x120af404, 0xf3071003, 0xfd010afe,
    // 25, -21, 8, 4, 16, -13, -10, 16, -10, 9, 17, -20, -33, 10, -13, 6, -5, 3, -2, 5, -6, -19, 2, 5, -7, 4, 6, -1, 8, 5, -8, 5
    0x408eb19, 0x10f6f310, 0xec1109f6, 0x6f30adf, 0x5fe03fb, 0x502edfa, 0xff0604f9, 0x5f80508,
    // 2, 12, -4, 6, 25, 8, 8, 12, 9, 3, 3, 14, 5, 0, -3, -5, 8, 12, -19, -8, 8, -3, 43, 19, -7, -6, 20, 19, 6, -5, 15, -34
    0x6fc0c02, 0xc080819, 0xe030309, 0xfbfd0005, 0xf8ed0c08, 0x132bfd08, 0x1314faf9, 0xde0ffb06,
    // 7, 16, -9, -5, 5, 6, 9, -14, -11, -7, -20, 0, 7, -26, 4, -9, 24, 10, -25, 26, 21, -9, 19, 21, 16, -17, 11, 24, -12, 14, 4, -35
    0xfbf71007, 0xf2090605, 0xecf9f5, 0xf704e607, 0x1ae70a18, 0x1513f715, 0x180bef10, 0xdd040ef4,
    // 60, 1, -66, -19, 56, 39, -37, 57, -17, -25, 9, 100, -21, -20, -34, 20, 7, 5, -40, -16, -27, 6, 1, 3, -32, -27, 18, 0, -11, -9, 4, -43
    0xedbe013c, 0x39db2738, 0x6409e7ef, 0x14deeceb, 0xf0d80507, 0x30106e5, 0x12e5e0, 0xd504f7f5,
    // -2, 7, -24, 14, 4, -2, -12, -2, 5, -9, 12, -9, 0, 14, -9, -28, 9, 13, -34, 11, 1, -4, -7, 0, -10, -1, 19, 5, -3, 1, 2, -44
    0xee807fe, 0xfef4fe04, 0xf70cf705, 0xe4f70e00, 0xbde0d09, 0xf9fc01, 0x513fff6, 0xd40201fd,
    // -7, -3, -27, -8, 9, 7, -9, -11, -10, -25, 15, -6, 2, 0, 4, -15, 17, 15, 6, -2, 3, 3, -11, 3, 8, 41, 12, 7, 6, 2, -1, -11
    0xf8e5fdf9, 0xf5f70709, 0xfa0fe7f6, 0xf1040002, 0xfe060f11, 0x3f50303, 0x70c2908, 0xf5ff0206,
    // 7, -13, -4, 25, 9, 17, 0, 12, -8, 22, 14, -1, -9, -7, 6, -8, -8, 16, 9, -9, 3, 1, -13, 6, -6, 2, 1, 5, 14, -15, 8, -4
    0x19fcf307, 0xc001109, 0xff0e16f8, 0xf806f9f7, 0xf70910f8, 0x6f30103, 0x50102fa, 0xfc08f10e,
    // -2, -3, -20, 30, -12, 2, -27, 27, 0, 8, 16, 14, -15, 2, -27, -27, 14, 21, -6, 6, -48, 36, 127, -7, -31, 29, 48, -126, 7, -55, -16, -56
    0x1eecfdfe, 0x1be502f4, 0xe100800, 0xe5e502f1, 0x6fa150e, 0xf97f24d0, 0x82301de1, 0xc8f0c907,
    // -5, 0, -5, -12, -17, 14, -9, 22, 40, -31, 39, 14, 7, -26, -12, -14, -6, 7, 0, 3, 4, -3, -25, 2, 7, 21, -1, 3, 16, -9, -5, -9
    0xf4fb00fb, 0x16f70eef, 0xe27e128, 0xf2f4e607, 0x30007fa, 0x2e7fd04, 0x3ff1507, 0xf7fbf710,
    // -5, -11, -10, 25, -16, -1, 0, 19, 9, -4, 7, -10, -1, 3, -9, -15, -19, 2, 10, -7, -8, 11, -13, 2, 0, 3, 2, -6, 21, -13, -9, -4
    0x19f6f5fb, 0x1300fff0, 0xf607fc09, 0xf1f703ff, 0xf90a02ed, 0x2f30bf8, 0xfa020300, 0xfcf7f315,
    // 12, -11, -4, 4, -1, 8, 6, -7, -2, -7, 3, -5, -2, 16, -2, 8, 2, -3, -10, 3, 12, 3, 2, 24, -7, 5, -3, -18, 20, 16, 12, -1
    0x4fcf50c, 0xf90608ff, 0xfb03f9fe, 0x8fe10fe, 0x3f6fd02, 0x1802030c, 0xeefd05f9, 0xff0c1014,
    // 9, -7, 1, 3, 5, 10, -2, 12, 0, -3, 10, 0, -12, -2, 5, 6, 5, -9, -5, -18, -6, -1, -7, -2, -21, -4, 23, -18, 12, -6, -17, 14
    0x301f909, 0xcfe0a05, 0xafd00, 0x605fef4, 0xeefbf705, 0xfef9fffa, 0xee17fceb, 0xeeffa0c,
    // -16, -1, 3, -116, -20, 6, -45, 37, -16, 28, -43, -11, 1, 33, 97, -122, -5, 1, 22, -10, 16, 13, 1, -8, 25, 8, 55, 2, -2, -19, 6, 0
    0x8c03fff0, 0x25d306ec, 0xf5d51cf0, 0x86612101, 0xf61601fb, 0xf8010d10, 0x2370819, 0x6edfe,
    // 0, -4, 11, -13, 5, 6, 24, -1, -1, -11, -3, 6, 13, 2, -3, 13, 3, -11, -19, -16, 14, 9, 3, 15, -5, 3, -1, 2, 23, 14, 11, 14
    0xf30bfc00, 0xff180605, 0x6fdf5ff, 0xdfd020d, 0xf0edf503, 0xf03090e, 0x2ff03fb, 0xe0b0e17,
    // 10, 1, 6, 0, -6, 12, 21, 13, 2, 5, 6, 2, 11, -3, 7, 3, 5, -24, -2, 5, -13, 1, 18, 2, 11, 16, 21, 14, 15, 28, 12, -19
    0x6010a, 0xd150cfa, 0x2060502, 0x307fd0b, 0x5fee805, 0x21201f3, 0xe15100b, 0xed0c1c0f,
    // -2, -46, -10, 12, -10, -31, 27, 9, -6, 25, 23, 16, 49, 24, 43, 1, 0, -15, 2, 29, -5, -18, 18, 14, -17, 31, -26, 17, 32, 9, 19, -20
    0xcf6d2fe, 0x91be1f6, 0x101719fa, 0x12b1831, 0x1d02f100, 0xe12eefb, 0x11e61fef, 0xec130920,
    // 14, -46, -32, -6, -5, 9, -23, -15, 5, 15, 24, -10, 36, 16, 7, 9, -13, -4, -10, -1, 63, 4, -18, -24, 41, 13, -2, 18, 10, -17, -56, 63
    0xfae0d20e, 0xf1e909fb, 0xf6180f05, 0x9071024, 0xfff6fcf3, 0xe8ee043f, 0x12fe0d29, 0x3fc8ef0a,
    // 21, -35, -11, 34, 12, -35, -3, -10, -52, 26, -54, 14, 15, -67, 22, -2, -3, -28, -6, -10, -15, -5, -4, -12, -1, 11, 12, -10, 17, 2, 1, -19
    0x22f5dd15, 0xf6fddd0c, 0xeca1acc, 0xfe16bd0f, 0xf6fae4fd, 0xf4fcfbf1, 0xf60c0bff, 0xed010211,
    // -3, -47, -35, -1, -24, 3, -4, -19, -32, 6, 12, -1, 24, -18, 23, -6, 4, -24, -11, 5, -17, -9, 5, -6, 3, 11, -9, -18, 5, -15, 8, -14
    0xffddd1fd, 0xedfc03e8, 0xff0c06e0, 0xfa17ee18, 0x5f5e804, 0xfa05f7ef, 0xeef70b03, 0xf208f105,
    // -8, -9, 3, -4, -3, -10, 3, -3, -11, 8, 15, -5, 12, -7, 14, -4, -12, -1, 13, -18, 2, -9, -14, -21, 4, -18, 5, 9, -3, -9, -25, 24
    0xfc03f7f8, 0xfd03f6fd, 0xfb0f08f5, 0xfc0ef90c, 0xee0dfff4, 0xebf2f702, 0x905ee04, 0x18e7f7fd,
    // -10, -13, -9, 18, -11, -8, 2, 4, 1, 0, -3, -4, 7, 3, 1, -3, 1, -6, 17, 30, 0, -11, -20, 5, 16, -28, -58, 31, -35, -23, -19, 0
    0x12f7f3f6, 0x402f8f5, 0xfcfd0001, 0xfd010307, 0x1e11fa01, 0x5ecf500, 0x1fc6e410, 0xede9dd,
    // 8, -26, -108, -6, -47, 25, 14, 27, -26, 21, -37, 59, 8, 17, 46, 29, -13, -42, 20, 5, -7, 0, -25, -4, 65, -17, 31, 28, -30, -25, -25, 9
    0xfa94e608, 0x1b0e19d1, 0x3bdb15e6, 0x1d2e1108, 0x514d6f3, 0xfce700f9, 0x1c1fef41, 0x9e7e7e2,
    // 0, 6, 3, 6, 5, -6, 7, 2, -3, 5, -2, -1, 10, -16, 15, -11, 3, 14, 31, -17, 3, -7, -4, -12, 10, -1, -3, 16, 1, 12, -37, 4
    0x6030600, 0x207fa05, 0xfffe05fd, 0xf50ff00a, 0xef1f0e03, 0xf4fcf903, 0x10fdff0a, 0x4db0c01,
    // -14, -10, 11, 8, -14, 4, 4, 7, 4, 1, 15, -3, 17, -17, 6, -16, -19, -15, -25, -35, -9, -2, -18, -21, -11, -19, -24, -29, 3, -19, -11, 0
    0x80bf6f2, 0x70404f2, 0xfd0f0104, 0xf006ef11, 0xdde7f1ed, 0xebeefef7, 0xe3e8edf5, 0xf5ed03,
    // -58, -15, -28, -15, -15, -4, -27, -17, 4, -33, -15, -26, 2, 3, -37, -15, -11, -1, -16, -6, 6, -14, -25, -9, 2, -10, 15, -20, -14, 42, -20, -7
    0xf1e4f1c6, 0xefe5fcf1, 0xe6f1df04, 0xf1db0302, 0xfaf0fff5, 0xf7e7f206, 0xec0ff602, 0xf9ec2af2,
    // -48, 5, 5, -76, 7, -15, 23, -3, -29, 17, -30, 10, 15, -40, -18, 1, -23, -35, -37, 42, -28, -41, 14, 20, -46, 9, 49, -3, 12, -35, 1, 2
    0xb40505d0, 0xfd17f107, 0xae211e3, 0x1eed80f, 0x2adbdde9, 0x140ed7e4, 0xfd3109d2, 0x201dd0c,
    // -61, 15, 24, -18, 32, 18, -6, 19, 32, 26, 15, 31, 27, 81, -31, -16, -5, 4, 10, -18, 10, 17, 17, 12, 0, 24, -11, 21, -6, -36, 23, 3
    0xee180fc3, 0x13fa1220, 0x1f0f1a20, 0xf0e1511b, 0xee0a04fb, 0xc11110a, 0x15f51800, 0x317dcfa,
    // -45, 3, 18, 0, 7, 18, 15, 18, 24, 27, -20, 23, 12, -26, 8, -9, -6, 21, 21, -5, 19, 16, 9, 12, 6, 36, 12, 25, 16, 20, 14, -15
    0x1203d3, 0x120f1207, 0x17ec1b18, 0xf708e60c, 0xfb1515fa, 0xc091013, 0x190c2406, 0xf10e1410,
    // -15, 2, -4, -11, -31, -19, -11, 7, 2, -21, 8, -15, -2, 19, -2, 4, -36, 5, -15, 24, -40, -35, 20, 6, -25, -13, 33, 3, 45, 74, -7, 4
    0xf5fc02f1, 0x7f5ede1, 0xf108eb02, 0x4fe13fe, 0x18f105dc, 0x614ddd8, 0x321f3e7, 0x4f94a2d,
    // -4, 20, 9, 40, -2, -28, -1, 37, 7, 7, -15, 6, -3, 27, -1, -2, -30, 6, -22, -18, -23, -2, 6, -23, -4, -45, 15, -13, 29, -8, -11, 46
    0x280914fc, 0x25ffe4fe, 0x6f10707, 0xfeff1bfd, 0xeeea06e2, 0xe906fee9, 0xf30fd3fc, 0x2ef5f81d,
    // 38, 15, -47, -42, 26, 16, -4, 25, 40, -24, 6, -53, 19, -40, 27, 57, -23, 28, 15, 49, 0, -24, 18, 25, -57, 22, -48, 27, 34, -13, -22, -2
    0xd6d10f26, 0x19fc101a, 0xcb06e828, 0x391bd813, 0x310f1ce9, 0x1912e800, 0x1bd016c7, 0xfeeaf322,
    // -4, 17, 11, -17, -27, 0, -1, 4, -12, -7, -5, -3, -10, -26, 1, 15, -24, 9, -3, -4, -37, -6, 34, 10, -39, 0, 2, 21, 29, -1, 3, 11
    0xef0b11fc, 0x4ff00e5, 0xfdfbf9f4, 0xf01e6f6, 0xfcfd09e8, 0xa22fadb, 0x150200d9, 0xb03ff1d,
    // 6, 19, 7, 6, -12, -9, 15, 16, 12, -1, -29, -3, -10, -16, 5, -3, -3, 6, 9, 0, 7, -7, 8, 11, 8, 13, 14, 13, 10, -14, 23, -8
    0x6071306, 0x100ff7f4, 0xfde3ff0c, 0xfd05f0f6, 0x906fd, 0xb08f907, 0xd0e0d08, 0xf817f20a,
    // 16, 30, 19, -37, 11, -19, -16, -2, 10, -3, -8, 11, 11, -31, 38, -2, 2, 1, -6, -20, -16, -6, 0, -8, 5, -5, -7, -6, 11, -29, 13, -15
    0xdb131e10, 0xfef0ed0b, 0xbf8fd0a, 0xfe26e10b, 0xecfa0102, 0xf800faf0, 0xfaf9fb05, 0xf10de30b,
    // 32, 11, 8, 9, 2, -22, -6, 19, 28, 16, 8, 9, -6, 13, 35, -23, 15, 86, -18, -27, 18, 34, 34, -35, -14, 2, 5, -28, 54, 49, -1, 58
    0x9080b20, 0x13faea02, 0x908101c, 0xe9230dfa, 0xe5ee560f, 0xdd222212, 0xe40502f2, 0x3aff3136,
    // 18, 1, -6, -29, -31, -20, -35, -15, 13, -22, 16, -9, -11, -22, 14, -25, -3, 7, -4, 1, -13, -23, -13, -1, 17, 5, 14, -11, 8, 17, 11, -15
    0xe3fa0112, 0xf1ddece1, 0xf710ea0d, 0xe70eeaf5, 0x1fc07fd, 0xfff3e9f3, 0xf50e0511, 0xf10b1108,
    // 24, 19, -19, -18, 0, -37, -42, -5, 4, 5, -5, -8, -2, 22, 15, -25, -4, -3, -7, -5, -11, -17, -21, -5, 4, -7, -2, -18, 3, -3, 9, -9
    0xeeed1318, 0xfbd6db00, 0xf8fb0504, 0xe70f16fe, 0xfbf9fdfc, 0xfbebeff5, 0xeefef904, 0xf709fd03,
    // -12, 7, 0, 9, 2, -6, -7, -3, -12, -8, -2, 12, 10, 0, -3, -1, 1, 32, -5, 13, 19, 6, -13, -4, 6, 10, -32, -21, 20, 20, 1, -9
    0x90007f4, 0xfdf9fa02, 0xcfef8f4, 0xfffd000a, 0xdfb2001, 0xfcf30613, 0xebe00a06, 0xf7011414,
    // -7, -15, -10, -13, 4, 2, -9, 6, -3, 1, 19, 4, 0, -27, 15, -3, 3, 36, 19, 10, 0, -22, 17, -44, 10, 3, -1, -34, 29, 7, -4, -15
    0xf3f6f1f9, 0x6f70204, 0x41301fd, 0xfd0fe500, 0xa132403, 0xd411ea00, 0xdeff030a, 0xf1fc071d,
    // 11, -12, -32, 22, -59, 0, 63, 68, -46, -27, 17, 49, -28, -25, -57, -2, -3, 6, 41, -2, 17, 0, 15, -53, 74, 12, 55, -41, -9, -22, 15, -12
    0x16e0f40b, 0x443f00c5, 0x3111e5d2, 0xfec7e7e4, 0xfe2906fd, 0xcb0f0011, 0xd7370c4a, 0xf40feaf7,
    // -3, -5, -9, -3, 0, -4, -6, -7, -8, -2, 5, 7, 8, -6, -1, -2, 5, 7, -14, -8, 1, 10, -9, -16, 7, 9, -29, -34, 9, 29, 4, 3
    0xfdf7fbfd, 0xf9fafc00, 0x705fef8, 0xfefffa08, 0xf8f20705, 0xf0f70a01, 0xdee30907, 0x3041d09,
    // -1, -1, -15, 17, 8, -9, -10, -3, -24, -2, -14, 4, -3, -34, 13, 6, -7, 16, 8, -5, -15, -18, 11, 16, 8, 0, 5, 10, 34, 9, 6, 5
    0x11f1ffff, 0xfdf6f708, 0x4f2fee8, 0x60ddefd, 0xfb0810f9, 0x100beef1, 0xa050008, 0x5060922,
    // 8, 13, 3, -14, -2, -11, -14, 26, 15, 3, 15, -5, 17, -28, 2, 3, 10, 24, 8, -8, -11, -9, -9, 6, -13, 8, -20, 2, 32, -3, 6, 7
    0xf2030d08, 0x1af2f5fe, 0xfb0f030f, 0x302e411, 0xf808180a, 0x6f7f7f5, 0x2ec08f3, 0x706fd20,
    // -4, 5, -21, -22, -16, 2, -24, 21, 21, 10, 9, -7, 12, 5, 15, 26, 42, -10, 25, 40, -8, -7, 0, 46, 107, -42, -18, 53, -31, -8, -56, -72
    0xeaeb05fc, 0x15e802f0, 0xf9090a15, 0x1a0f050c, 0x2819f62a, 0x2e00f9f8, 0x35eed66b, 0xb8c8f8e1,
    // 24, 2, -16, -11, -19, 2, -41, 8, -4, 6, 2, -11, -16, -27, 42, 16, 1, 5, -1, -2, -19, -15, -9, 14, -3, 2, 3, -4, 22, 19, -3, -4
    0xf5f00218, 0x8d702ed, 0xf50206fc, 0x102ae5f0, 0xfeff0501, 0xef7f1ed, 0xfc0302fd, 0xfcfd1316,
    // 15, 6, -13, 1, -4, -5, -36, 6, 7, -5, 6, -15, -13, -24, 2, 7, 16, 10, -8, 0, -12, -23, -26, 4, -9, 2, -13, -11, 3, -1, -1, 3
    0x1f3060f, 0x6dcfbfc, 0xf106fb07, 0x702e8f3, 0xf80a10, 0x4e6e9f4, 0xf5f302f7, 0x3ffff03,
    // 17, -8, -7, 2, -14, -1, -1, 13, 6, 31, 32, 2, 18, 28, -15, 1, 25, 20, 4, 0, 23, -5, -28, 7, 14, 37, -2, 13, 21, 2, -13, 34
    0x2f9f811, 0xdfffff2, 0x2201f06, 0x1f11c12, 0x41419, 0x7e4fb17, 0xdfe250e, 0x22f30215,
    // -6, 27, 0, -3, -7, -18, -6, 11, -15, 18, -13, 9, 24, 17, -16, 5, 22, 5, -1, 33, -11, -16, -22, 5, -5, 17, -9, 2, -13, 25, -35, 20
    0xfd001bfa, 0xbfaeef9, 0x9f312f1, 0x5f01118, 0x21ff0516, 0x5eaf0f5, 0x2f711fb, 0x14dd19f3,
    // -31, -11, 27, -46, 3, -24, -42, -53, -56, -4, 33, 32, 69, -31, -14, -62, 9, 22, -6, -14, -22, 15, 16, 7, 11, 1, 15, 16, 30, 23, -19, 19
    0xd21bf5e1, 0xcbd6e803, 0x2021fcc8, 0xc2f2e145, 0xf2fa1609, 0x7100fea, 0x100f010b, 0x13ed171e,
    // -8, 0, -17, -5, -12, 1, -11, 0, -5, 11, 21, 5, 16, -6, -5, 11, 23, 12, -3, 2, 5, 5, -18, -9, 17, 13, -9, 5, 16, 8, -35, 40
    0xfbef00f8, 0xf501f4, 0x5150bfb, 0xbfbfa10, 0x2fd0c17, 0xf7ee0505, 0x5f70d11, 0x28dd0810,
    // -13, 10, 3, -2, -23, -12, -6, 9, -26, -3, -16, 18, 32, -14, -9, 13, -7, 5, 2, 5, 11, -12, -18, -2, -2, -14, 21, -15, 9, -6, 16, -1
    0xfe030af3, 0x9faf4e9, 0x12f0fde6, 0xdf7f220, 0x50205f9, 0xfeeef40b, 0xf115f2fe, 0xff10fa09,
    // 2, -10, 23, 19, 29, -5, -13, -2, -11, -24, 24, -8, 26, 1, 7, 13, -21, 20, 8, 30, 20, -20, -8, -3, -2, -21, 0, 0, 22, -5, 15, 6
    0x1317f602, 0xfef3fb1d, 0xf818e8f5, 0xd07011a, 0x1e0814eb, 0xfdf8ec14, 0xebfe, 0x60ffb16,
    // -7, -6, 27, 25, 22, -8, -41, -6, -9, -39, -21, -6, 19, -11, -1, 8, 24, -60, 75, 19, 3, 13, -5, 60, -69, -28, 15, -29, -37, 22, 28, -7
    0x191bfaf9, 0xfad7f816, 0xfaebd9f7, 0x8fff513, 0x134bc418, 0x3cfb0d03, 0xe30fe4bb, 0xf91c16db,
    // -14, -2, 11, 19, 35, -2, 0, 18, -13, -22, -9, -5, 48, 1, 17, 11, -17, 12, 11, 15, 24, -1, -18, -5, -10, -12, 6, -4, 15, -28, 23, 13
    0x130bfef2, 0x1200fe23, 0xfbf7eaf3, 0xb110130, 0xf0b0cef, 0xfbeeff18, 0xfc06f4f6, 0xd17e40f,
    // -10, -3, 30, 3, 26, -2, -4, -13, -10, -25, 11, 10, 30, -16, 25, 18, -16, 15, 22, 12, 11, 2, -2, -1, -1, -17, 6, 7, 18, -22, 24, 6
    0x31efdf6, 0xf3fcfe1a, 0xa0be7f6, 0x1219f01e, 0xc160ff0, 0xfffe020b, 0x706efff, 0x618ea12,
    // 5, -6, 15, 18, -9, 16, -25, -2, 13, 20, 5, 3, -36, 6, 9, -2, -14, 3, 14, 47, -17, 18, -8, -5, -11, 38, 3, 7, -1, 34, 41, -2
    0x120ffa05, 0xfee710f7, 0x305140d, 0xfe0906dc, 0x2f0e03f2, 0xfbf812ef, 0x70326f5, 0xfe2922ff,
    // -1, 0, 21, 6, 21, 3, -10, 3, 24, -3, 2, 7, -19, 2, 2, 2, -6, -21, -3, 12, -35, 40, -12, -31, 9, 22, 44, -20, 7, 19, -2, 8
    0x61500ff, 0x3f60315, 0x702fd18, 0x20202ed, 0xcfdebfa, 0xe1f428dd, 0xec2c1609, 0x8fe1307,
    // 13, -56, -24, -71, 4, -18, -14, 50, 2, 14, 36, 54, -96, -49, 60, 2, -12, 42, -4, 23, -22, 1, 9, -5, -41, 13, -60, 6, 58, 10, -15, -9
    0xb9e8c80d, 0x32f2ee04, 0x36240e02, 0x23ccfa0, 0x17fc2af4, 0xfb0901ea, 0x6c40dd7, 0xf7f10a3a,
    // 5, -3, 6, -4, -12, 9, -24, -15, 17, 6, 2, 3, -8, -17, -4, 18, -19, 1, 16, 19, -33, -1, 3, -22, 11, 4, -5, -4, 11, -14, 29, 15
    0xfc06fd05, 0xf1e809f4, 0x3020611, 0x12fceff8, 0x131001ed, 0xea03ffdf, 0xfcfb040b, 0xf1df20b,
    // 5, 5, 8, -15, 3, 3, -5, 1, 20, -4, -16, 9, -1, 12, -8, 5, 0, -7, -6, -19, -8, -19, 10, 4, -2, -13, 10, -12, -7, -22, 7, 1
    0xf1080505, 0x1fb0303, 0x9f0fc14, 0x5f80cff, 0xedfaf900, 0x40aedf8, 0xf40af3fe, 0x107eaf9,
    // -12, 14, -14, -23, 1, 0, 16, -3, 12, -58, -26, -14, 20, -44, 3, 4, -5, -2, -5, -16, -30, -16, -4, 7, 9, -37, 18, -14, -2, 4, -17, -19
    0xe9f20ef4, 0xfd100001, 0xf2e6c60c, 0x403d414, 0xf0fbfefb, 0x7fcf0e2, 0xf212db09, 0xedef04fe,
    // -8, 6, 0, -19, -28, 22, 52, 23, 17, 13, -5, -8, 15, -38, 7, 1, -46, -46, -2, 53, 127, -68, -43, -34, 10, -41, 61, 10, 29, -24, 7, 38
    0xed0006f8, 0x173416e4, 0xf8fb0d11, 0x107da0f, 0x35fed2d2, 0xded5bc7f, 0xa3dd70a, 0x2607e81d,
    // -13, 13, 22, 10, -52, 13, 6, -3, 37, -34, 37, 3, 35, 17, -52, -30, 6, 14, 13, 0, -13, -17, 30, 21, 18, 4, 11, 4, -3, -7, 5, -7
    0xa160df3, 0xfd060dcc, 0x325de25, 0xe2cc1123, 0xd0e06, 0x151eeff3, 0x40b0412, 0xf905f9fd,
    // -2, 7, 1, -2, -4, 17, 36, 17, -5, -15, -10, -2, 3, 6, -9, -7, -3, 9, 23, 1, -29, -13, 22, 23, -2, -5, 7, 4, 16, 21, -11, -17
    0xfe0107fe, 0x112411fc, 0xfef6f1fb, 0xf9f70603, 0x11709fd, 0x1716f3e3, 0x407fbfe, 0xeff51510,
};
static const uint embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // -0.0001494, 5.54e-06, 0.0001274, 0.0002335, -0.00034, 0.001533, -0.0005813, -2.855e-05, -0.000959, 0.001417, -0.0003965, 0.0001959, -0.0004456, 0.0001633, 0.001025, -0.000606
    0x5d88e5, 0xba7082d, 0x16478d92, 0x81df90c3, 0x15ce93db, 0xa6b8e7f, 0x95a8f4d, 0x90f71433,
};
static const uint embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -5, 13, 15, -4, 6, -36, -7, -20, -18, 22, -10, 9, -8, 20, 3, 11, -5, 0, 26, -35, -22, 3, 19, -5, -31, 2, 3, 16, -27, 16, -31, -3
    0xfc0f0dfb, 0xecf9dc06, 0x9f616ee, 0xb0314f8, 0xdd1a00fb, 0xfb1303ea, 0x100302e1, 0xfde110e5,
    // -19, 35, 12, 33, -45, -12, -29, 2, 67, 12, 55, 1, -8, 11, -10, 33, 13, 81, 127, -3, 52, 33, -51, -73, -28, 57, 38, 29, 0, -32, -50, 75
    0x210c23ed, 0x2e3f4d3, 0x1370c43, 0x21f60bf8, 0xfd7f510d, 0xb7cd2134, 0x1d2639e4, 0x4bcee000,
    // 10, 1, 11, 0, -6, 5, -3, -3, -8, -11, 5, -2, 3, -10, -2, 6, -5, 42, 21, 10, 0, -13, 7, 16, -38, 28, 19, 33, -16, 24, -12, 31
    0xb010a, 0xfdfd05fa, 0xfe05f5f8, 0x6fef603, 0xa152afb, 0x1007f300, 0x21131cda, 0x1ff418f0,
    // -39, -57, 24, -17, -29, -18, -27, -8, 11, 11, 4, 12, 13, 4, -16, 22, 46, 3, 6, 18, 3, -33, -4, -7, 1, -19, 9, -30, -2, -2, -49, -24
    0xef18c7d9, 0xf8e5eee3, 0xc040b0b, 0x16f0040d, 0x1206032e, 0xf9fcdf03, 0xe209ed01, 0xe8cffefe,
    // 7, -1, 5, 2, 1, 0, 4, 1, -11, -3, 5, -3, -3, -5, 1, 9, 9, 6, 1, -29, 2, -2, 2, -13, 8, 8, -9, 11, 5, -3, 7, 12
    0x205ff07, 0x1040001, 0xfd05fdf5, 0x901fbfd, 0xe3010609, 0xf302fe02, 0xbf70808, 0xc07fd05,
    // -14, -10, 29, 9, -4, -34, 17, -1, 5, 15, 35, -32, 28, 0, -24, -16, -14, 8, 7, 14, 6, -24, 14, -2, 2, -10, 31, -4, 6, -7, -11, 11
    0x91df6f2, 0xff11defc, 0xe0230f05, 0xf0e8001c, 0xe0708f2, 0xfe0ee806, 0xfc1ff602, 0xbf5f906,
    // 3, -2, 7, -5, -11, 4, 6, -31, 10, 3, 1, 6, 6, 4, -2, 12, 1, 6, 27, 9, -10, -15, -12, 4, -6, -18, -21, 6, 2, 0, -8, -18
    0xfb07fe03, 0xe10604f5, 0x601030a, 0xcfe0406, 0x91b0601, 0x4f4f1f6, 0x6ebeefa, 0xeef80002,
    // -4, 12, -6, -3, -5, -7, 5, -10, 4, -3, -2, 9, 4, -18, 5, 2, -18, 22, 24, -7, 30, 9, 9, 9, -27, 8, 14, 10, -1, 0, 2, -28
    0xfdfa0cfc, 0xf605f9fb, 0x9fefd04, 0x205ee04, 0xf91816ee, 0x909091e, 0xa0e08e5, 0xe40200ff,
    // -2, -2, -4, -5, 6, -8, -4, -5, -8, -4, -3, -1, -4, 12, 2, -7, 5, -13, -14, 12, -5, 30, 3, 9, -4, 42, -8, 0, -11, 3, -7, 8
    0xfbfcfefe, 0xfbfcf806, 0xfffdfcf8, 0xf9020cfc, 0xcf2f305, 0x9031efb, 0xf82afc, 0x8f903f5,
    // 4, 0, -5, -9, -16, 1, 15, -12, 3, 4, -1, -2, -2, -1, -13, 16, -12, 1, 4, -1, 7, -20, 10, 15, 0, 6, -7, 39, -15, -13, -4, 2
    0xf7fb0004, 0xf40f01f0, 0xfeff0403, 0x10f3fffe, 0xff0401f4, 0xf0aec07, 0x27f90600, 0x2fcf3f1,
    // 8, -11, 6, -8, 12, 1, 1, -12, 0, 9, -8, 8, 1, -9, 0, -12, 2, 22, 9, -6, 18, 3, -5, -35, 8, -14, 10, -16, -3, -20, -17, -2
    0xf806f508, 0xf401010c, 0x8f80900, 0xf400f701, 0xfa091602, 0xddfb0312, 0xf00af208, 0xfeefecfd,
    // 13, -7, 11, 0, 14, 12, 3, -4, -18, -16, -8, -25, 4, -18, -2, 3, -9, 16, 13, 22, -1, 7, 1, 7, -6, 10, 11, 5, 11, 1, 12, -17
    0xbf90d, 0xfc030c0e, 0xe7f8f0ee, 0x3feee04, 0x160d10f7, 0x70107ff, 0x50b0afa, 0xef0c010b,
    // -6, 5, -8, 2, 2, -10, 3, 6, -1, 40, 7, 21, 5, 15, 20, -9, 7, -9, 2, 2, 15, -6, 1, 10, -3, -8, -6, -8, -12, -2, -12, -11
    0x2f805fa, 0x603f602, 0x150728ff, 0xf7140f05, 0x202f707, 0xa01fa0f, 0xf8faf8fd, 0xf5f4fef4,
    // 7, -19, 5, 2, -15, 12, -1, 11, -12, -11, 3, 10, 15, -3, 11, 1, 16, 5, 20, -33, -23, 16, 13, 25, -8, 16, -26, 17, 29, -17, -7, 44
    0x205ed07, 0xbff0cf1, 0xa03f5f4, 0x10bfd0f, 0xdf140510, 0x190d10e9, 0x11e610f8, 0x2cf9ef1d,
    // 5, -5, 4, 11, -21, -17, 9, -19, 7, -9, 6, 12, 4, -24, 12, 1, 1, 14, 21, 0, 21, -31, -9, 19, -5, -5, -10, 21, 1, 1, -3, 1
    0xb04fb05, 0xed09efeb, 0xc06f707, 0x10ce804, 0x150e01, 0x13f7e115, 0x15f6fbfb, 0x1fd0101,
    // -8, -19, 4, -12, -13, 2, -13, -7, 35, -6, -8, -9, -24, -12, 5, 10, -7, 7, -2, 6, -1, -3, 10, 10, -6, 3, -8, 8, 16, -2, -5, -25
    0xf404edf8, 0xf9f302f3, 0xf7f8fa23, 0xa05f4e8, 0x6fe07f9, 0xa0afdff, 0x8f803fa, 0xe7fbfe10,
    // -12, 7, -11, -13, -17, 19, -21, 8, -18, -5, -6, 8, 9, 12, 8, 20, 22, 11, -10, -20, 1, 44, -10, -22, -6, 10, 5, 7, -13, 6, 8, -22
    0xf3f507f4, 0x8eb13ef, 0x8fafbee, 0x14080c09, 0xecf60b16, 0xeaf62c01, 0x7050afa, 0xea0806f3,
    // 9, 7, -3, -6, -3, -6, 15, 6, 22, 12, -8, -3, 19, -10, 7, -15, -5, 2, 18, 18, 10, 7, -4, 1, -5, -5, -5, 24, -4, -4, -29, -28
    0xfafd0709, 0x60ffafd, 0xfdf80c16, 0xf107f613, 0x121202fb, 0x1fc070a, 0x18fbfbfb, 0xe4e3fcfc,
    // 7, -16, -4, 5, 20, -15, 1, -3, -26, 0, 2, 14, 4, 17, -4, 3, -22, 5, 13, 12, 6, 2, 2, -9, 4, 8, -3, -36, 12, -16, 10, -7
    0x5fcf007, 0xfd01f114, 0xe0200e6, 0x3fc1104, 0xc0d05ea, 0xf7020206, 0xdcfd0804, 0xf90af00c,
    // -1, -11, -20, -19, -14, -10, 17, 1, 1, 3, 9, 22, -6, -6, -2, -8, -1, 10, 29, -1, 9, 30, 7, -7, 2, 18, 9, -12, 9, 1, 1, 15
    0xedecf5ff, 0x111f6f2, 0x16090301, 0xf8fefafa, 0xff1d0aff, 0xf9071e09, 0xf4091202, 0xf010109,
    // -10, 22, -7, 9, 17, -1, -1, -7, 3, 2, -7, -5, 14, 7, -3, -5, 5, 8, 23, -12, 17, -1, 27, -14, -15, 5, 10, -39, 17, 7, 4, 4
    0x9f916f6, 0xf9ffff11, 0xfbf90203, 0xfbfd070e, 0xf4170805, 0xf21bff11, 0xd90a05f1, 0x4040711,
    // 0, -9, 2, -20, 1, 5, 2, -5, -4, 7, -7, -15, 10, 0, -11, 10, 1, -1, 7, -7, 11, 2, 5, 3, 3, 2, -4, 26, 6, 8, 0, 14
    0xec02f700, 0xfb020501, 0xf1f907fc, 0xaf5000a, 0xf907ff01, 0x305020b, 0x1afc0203, 0xe000806,
    // 8, 9, 1, 1, 2, -1, 6, 7, 8, 7, -1, 0, -17, -10, -1, 26, 3, 13, -5, 27, 21, -15, 11, 6, 1, 3, 7, 2, -13, 20, -5, -1
    0x1010908, 0x706ff02, 0xff0708, 0x1afff6ef, 0x1bfb0d03, 0x60bf115, 0x2070301, 0xfffb14f3,
    // 14, -9, 25, 19, -26, 8, -13, 25, -5, -11, -21, 20, 45, 5, 45, 59, 31, 22, 5, 3, 13, 23, -16, -19, -25, 14, -28, 9, 19, 0, -52, -29
    0x1319f70e, 0x19f308e6, 0x14ebf5fb, 0x3b2d052d, 0x305161f, 0xedf0170d, 0x9e40ee7, 0xe3cc0013,
    // -18, -25, -4, 25, 18, 1, -9, 7, -3, 4, 14, 1, -6, 2, 26, 25, 41, -1, 27, 1, 4, -23, -1, 10, -5, 2, 8, -18, 8, -4, 7, 7
    0x19fce7ee, 0x7f70112, 0x10e04fd, 0x191a02fa, 0x11bff29, 0xaffe904, 0xee0802fb, 0x707fc08,
    // 16, 3, -2, -5, 7, -3, 26, 25, 18, -5, 4, -7, -2, -7, -19, -3, -10, 11, 5, 1, -4, -15, 17, 9, 25, -15, -13, -12, 9, -2, -22, -17
    0xfbfe0310, 0x191afd07, 0xf904fb12, 0xfdedf9fe, 0x1050bf6, 0x911f1fc, 0xf4f3f119, 0xefeafe09,
    // -45, -7, -19, 21, 35, 8, 47, -23, 18, 18, 41, -26, -25, -8, -14, 14, -3, 30, -8, 11, 18, 15, -10, -31, 9, -2, -15, 16, 2, 2, -33, -17
    0x15edf9d3, 0xe92f0823, 0xe6291212, 0xef2f8e7, 0xbf81efd, 0xe1f60f12, 0x10f1fe09, 0xefdf0202,
    // -24, 8, -25, -25, -52, 1, 2, 2, -3, -18, -15, 13, -1, 15, 0, -3, 41, 29, -3, -7, 16, 33, 12, -44, -5, 24, -48, 1, 10, 0, -43, -30
    0xe7e708e8, 0x20201cc, 0xdf1eefd, 0xfd000fff, 0xf9fd1d29, 0xd40c2110, 0x1d018fb, 0xe2d5000a,
    // -15, 6, -3, 1, -11, -14, -6, -11, -7, -4, -5, 0, 8, -5, -5, -4, 2, -24, -3, -26, -24, 9, 12, -9, -29, 0, 11, -1, 18, 0, 1, 0
    0x1fd06f1, 0xf5faf2f5, 0xfbfcf9, 0xfcfbfb08, 0xe6fde802, 0xf70c09e8, 0xff0b00e3, 0x10012,
    // 20, -17, 33, -19, -3, -51, 4, -24, 47, 36, 13, -23, 12, -2, 10, -18, -29, -10, 28, 18, -18, -26, -9, 23, 1, -14, 22, -16, 17, -3, -8, 26
    0xed21ef14, 0xe804cdfd, 0xe90d242f, 0xee0afe0c, 0x121cf6e3, 0x17f7e6ee, 0xf016f201, 0x1af8fd11,
    // 0, 6, -9, 7, 13, -4, -3, -12, 22, 11, 5, 23, -3, 10, 13, -18, -16, -8, 10, 39, 8, 14, -36, -7, -26, -13, 37, 2, -10, 0, -33, -32
    0x7f70600, 0xf4fdfc0d, 0x17050b16, 0xee0d0afd, 0x270af8f0, 0xf9dc0e08, 0x225f3e6, 0xe0df00f6,
    // 5, -3, -6, -6, -3, -1, 9, -6, 0, -2, -3, 12, 13, 0, -4, 10, 2, -9, -6, 16, -4, -2, 5, -19, 7, 28, -9, 23, 9, -11, 8, 15
    0xfafafd05, 0xfa09fffd, 0xcfdfe00, 0xafc000d, 0x10faf702, 0xed05fefc, 0x17f71c07, 0xf08f509,
    // -15, 2, 11, -2, 8, 5, -17, 1, -8, 4, 14, 1, 16, 6, -12, 9, 11, -10, -21, -2, 11, 0, 1, -10, 2, 3, 26, -7, -6, -5, 5, 1
    0xfe0b02f1, 0x1ef0508, 0x10e04f8, 0x9f40610, 0xfeebf60b, 0xf601000b, 0xf91a0302, 0x105fbfa,
    // -3, 9, -11, -9, -2, -1, -1, -7, 12, -5, -15, -11, 21, 9, 9, -8, -17, 1, -2, 12, 11, 10, -1, 2, -11, -1, -8, 14, 1, -29, -5, -35
    0xf7f509fd, 0xf9fffffe, 0xf5f1fb0c, 0xf8090915, 0xcfe01ef, 0x2ff0a0b, 0xef8fff5, 0xddfbe301,
    // 0, 1, -5, -3, -10, 5, 5, -5, -21, -3, 10, -2, -5, 9, 3, -22, 14, 5, 1, -19, -6, 21, -7, 11, 1, -16, -6, 4, -22, -1, -2, 9
    0xfdfb0100, 0xfb0505f6, 0xfe0afdeb, 0xea0309fb, 0xed01050e, 0xbf915fa, 0x4faf001, 0x9feffea,
    // 9, 7, 18, 7, -18, 5, 2, 17, 31, 18, 0, -19, 11, 5, 12, 9, 27, -9, 21, -10, -22, -4, -19, -19, 13, 1, 0, -4, 9, 10, -17, -8
    0x7120709, 0x110205ee, 0xed00121f, 0x90c050b, 0xf615f71b, 0xededfcea, 0xfc00010d, 0xf8ef0a09,
    // -1, 7, 5, 15, -8, 7, -1, 8, -1, 1, 1, -5, -4, -8, 3, 4, -6, 13, -21, 33, 14, -14, -26, 4, 12, 14, 11, -5, -10, -9, 12, 6
    0xf0507ff, 0x8ff07f8, 0xfb0101ff, 0x403f8fc, 0x21eb0dfa, 0x4e6f20e, 0xfb0b0e0c, 0x60cf7f6,
    // 2, -8, -4, -8, -11, -6, -2, 14, 9, -9, -4, -11, -1, 12, -2, 19, -19, 3, 5, -9, -3, 10, -10, -2, 29, -7, -7, -6, -6, -19, 1, -3
    0xf8fcf802, 0xefefaf5, 0xf5fcf709, 0x13fe0cff, 0xf70503ed, 0xfef60afd, 0xfaf9f91d, 0xfd01edfa,
    // -12, -6, 2, 11, 14, -22, 33, -6, -19, -14, -5, -22, 13, -6, 40, 7, -44, -4, 5, 6, -22, -2, -9, -1, 20, 9, 6, 11, -6, -51, -18, 22
    0xb02faf4, 0xfa21ea0e, 0xeafbf2ed, 0x728fa0d, 0x605fcd4, 0xfff7feea, 0xb060914, 0x16eecdfa,
    // 9, -24, 2, -4, -7, 6, 2, -15, 5, -7, 0, -14, -11, 21, 0, 16, -12, -9, 10, 5, -9, -30, -7, -34, 4, 2, 20, -4, 7, 20, 5, -7
    0xfc02e809, 0xf10206f9, 0xf200f905, 0x100015f5, 0x50af7f4, 0xdef9e2f7, 0xfc140204, 0xf9051407,
    // 0, -6, -4, -12, -10, 2, -3, -17, 42, 11, -1, 5, 17, 6, 7, 3, -14, 9, -8, 25, 5, -5, -31, 7, -12, -14, 21, 4, 1, 8, -11, -25
    0xf4fcfa00, 0xeffd02f6, 0x5ff0b2a, 0x3070611, 0x19f809f2, 0x7e1fb05, 0x415f2f4, 0xe7f50801,
    // 10, -13, -4, 15, 14, 6, -22, 17, 3, 41, -24, -21, 11, -3, -26, -12, 23, 13, 11, -17, -6, 35, -22, 18, -26, 9, -9, 28, 7, 0, 0, -4
    0xffcf30a, 0x11ea060e, 0xebe82903, 0xf4e6fd0b, 0xef0b0d17, 0x12ea23fa, 0x1cf709e6, 0xfc000007,
    // -4, 9, 3, 16, -13, -1, 0, -8, 13, -1, 3, 7, 0, -7, -4, 4, -1, 2, 0, 2, 17, -23, 21, -15, 3, -2, -1, -31, 16, -9, 9, -4
    0x100309fc, 0xf800fff3, 0x703ff0d, 0x4fcf900, 0x20002ff, 0xf115e911, 0xe1fffe03, 0xfc09f710,
    // -14, 3, -3, 10, 2, 1, -11, -4, 22, -7, 7, 1, -4, 24, -7, 11, 0, 8, -3, -12, 5, 6, -5, 14, -7, 15, 8, -14, 6, -8, 6, 11
    0xafd03f2, 0xfcf50102, 0x107f916, 0xbf918fc, 0xf4fd0800, 0xefb0605, 0xf2080ff9, 0xb06f806,
    // 21, -24, -45, 0, -5, -8, -28, -9, 5, 39, -4, -23, 10, -5, -24, -9, 36, 4, 11, -13, -3, 21, 6, -3, -1, 13, -8, 5, -3, -10, 16, -15
    0xd3e815, 0xf7e4f8fb, 0xe9fc2705, 0xf7e8fb0a, 0xf30b0424, 0xfd0615fd, 0x5f80dff, 0xf110f6fd,
    // -5, -36, 31, 23, -8, -13, -11, -2, 29, 8, -43, 4, -21, -1, -12, -20, -1, 5, 10, 19, 18, -12, -10, 10, 0, -8, -2, -19, 47, -5, -6, -5
    0x171fdcfb, 0xfef5f3f8, 0x4d5081d, 0xecf4ffeb, 0x130a05ff, 0xaf6f412, 0xedfef800, 0xfbfafb2f,
    // -17, 9, -6, -6, -2, -8, 8, 3, -6, 6, -4, -18, -10, -11, 7, -4, -15, 10, -9, 32, 20, -2, 22, -6, -1, -1, 1, 13, 4, -12, 6, -16
    0xfafa09ef, 0x308f8fe, 0xeefc06fa, 0xfc07f5f6, 0x20f70af1, 0xfa16fe14, 0xd01ffff, 0xf006f404,
    // 3, 1, -5, 12, 16, 4, 6, 3, -7, -3, 3, 7, -3, 0, 13, -19, -1, 30, 6, -12, 6, 6, 8, 10, -11, 14, -15, -12, 17, 1, -1, 2
    0xcfb0103, 0x3060410, 0x703fdf9, 0xed0d00fd, 0xf4061eff, 0xa080606, 0xf4f10ef5, 0x2ff0111,
    // -1, 11, 0, -6, -1, -6, 0, -9, -5, 9, -3, -10, -9, -2, 4, -2, -9, 15, 12, 16, 0, -19, -2, -1, 3, 6, -15, 4, -34, -8, -15, -5
    0xfa000bff, 0xf700faff, 0xf6fd09fb, 0xfe04fef7, 0x100c0ff7, 0xfffeed00, 0x4f10603, 0xfbf1f8de,
    // 6, -3, -10, -7, 10, -13, 7, -1, 15, -5, -9, 6, 2, 3, 2, -6, -12, -36, -8, 35, 31, 24, -1, -17, 23, -22, 9, -10, 4, 3, -7, -10
    0xf9f6fd06, 0xff07f30a, 0x6f7fb0f, 0xfa020302, 0x23f8dcf4, 0xefff181f, 0xf609ea17, 0xf6f90304,
    // -9, -15, 25, 3, 0, 4, 2, 31, 46, -5, 44, 38, -10, -13, -28, -13, 7, 13, 15, 4, -19, -11, -30, -10, 4, 27, 6, 16, 18, -43, -11, -3
    0x319f1f7, 0x1f020400, 0x262cfb2e, 0xf3e4f3f6, 0x40f0d07, 0xf6e2f5ed, 0x10061b04, 0xfdf5d512,
    // -7, -13, 3, -7, -10, -9, 4, -11, 5, 7, 9, -5, 7, -11, 5, -2, 25, 15, 39, 6, 19, -23, 9, 32, -19, 8, 36, -21, -24, -33, -5, 1
    0xf903f3f9, 0xf504f7f6, 0xfb090705, 0xfe05f507, 0x6270f19, 0x2009e913, 0xeb2408ed, 0x1fbdfe8,
    // 2, 3, -1, 12, -4, 7, -3, 5, 0, 0, 8, 4, 9, -13, 3, -14, -8, 5, -5, -1, -10, -2, -19, -3, 3, -21, 12, -34, 1, -1, 1, 9
    0xcff0302, 0x5fd07fc, 0x4080000, 0xf203f309, 0xfffb05f8, 0xfdedfef6, 0xde0ceb03, 0x901ff01,
    // -1, 7, 15, 6, 10, 3, -17, 0, 9, 9, 0, 4, 2, 6, -11, 12, -11, -15, -9, 25, -8, 9, 6, -24, 10, -3, -24, 21, 8, 3, 2, 3
    0x60f07ff, 0xef030a, 0x4000909, 0xcf50602, 0x19f7f1f5, 0xe80609f8, 0x15e8fd0a, 0x3020308,
    // -9, 7, 3, 2, 9, -9, -13, -6, 0, -3, -3, -2, 9, 8, -8, 3, 7, 16, 0, -5, 13, -10, -6, 18, -28, 30, -2, -6, 10, 12, 16, 4
    0x20307f7, 0xfaf3f709, 0xfefdfd00, 0x3f80809, 0xfb001007, 0x12faf60d, 0xfafe1ee4, 0x4100c0a,
    // -6, -7, 3, 16, 6, 3, 2, -22, -3, 12, -8, -7, 22, -6, -7, -1, -15, -11, 27, -27, 16, -28, -2, -11, 5, -20, -29, 21, 22, -25, -7, -33
    0x1003f9fa, 0xea020306, 0xf9f80cfd, 0xfff9fa16, 0xe51bf5f1, 0xf5fee410, 0x15e3ec05, 0xdff9e716,
    // -1, 7, -3, 11, -5, -21, 2, 4, 5, -2, 4, 16, 0, -6, -3, 7, -8, -29, -3, -3, -22, 13, 22, -20, 13, -28, 9, 4, -5, 16, 0, -8
    0xbfd07ff, 0x402ebfb, 0x1004fe05, 0x7fdfa00, 0xfdfde3f8, 0xec160dea, 0x409e40d, 0xf80010fb,
    // -35, 15, 23, -48, 11, 4, 27, 11, 1, 1, 3, 11, 13, 4, 25, 0, -4, -12, 12, -6, -1, 18, 2, -9, 7, 16, 3, -14, -14, -23, 15, 9
    0xd0170fdd, 0xb1b040b, 0xb030101, 0x19040d, 0xfa0cf4fc, 0xf70212ff, 0xf2031007, 0x90fe9f2,
    // 18, 16, -7, -2, 11, 7, 2, 0, -7, 5, -3, 16, -12, 0, -2, -12, -2, -14, 9, -25, 6, 30, -12, -3, 0, 11, 25, 34, -15, 2, 37, 6
    0xfef91012, 0x2070b, 0x10fd05f9, 0xf4fe00f4, 0xe709f2fe, 0xfdf41e06, 0x22190b00, 0x62502f1,
    // -2, -4, -4, 14, -5, -25, 9, 3, -9, -16, 10, -2, -8, -1, -3, -7, -1, 1, 10, -27, -10, 22, -20, -12, 13, -11, 21, -8, -1, -28, -26, -15
    0xefcfcfe, 0x309e7fb, 0xfe0af0f7, 0xf9fdfff8, 0xe50a01ff, 0xf4ec16f6, 0xf815f50d, 0xf1e6e4ff,
    // 4, -4, 34, -15, 2, -18, -32, -5, 13, -14, 44, 3, -6, -7, 28, 12, 2, 1, 1, 18, 16, -13, -4, 12, -4, -9, -3, -16, 35, -5, -8, -10
    0xf122fc04, 0xfbe0ee02, 0x32cf20d, 0xc1cf9fa, 0x12010102, 0xcfcf310, 0xf0fdf7fc, 0xf6f8fb23,
    // -12, 2, 5, 3, -10, 9, 1, 7, -1, 13, 2, -3, -1, -2, 1, 9, 6, 5, 14, -5, 0, -10, -5, 29, -7, 9, -22, 15, -3, -12, 8, -2
    0x30502f4, 0x70109f6, 0xfd020dff, 0x901feff, 0xfb0e0506, 0x1dfbf600, 0xfea09f9, 0xfe08f4fd,
    // 5, -7, 1, -16, -1, 11, 2, 4, -11, 6, 4, -5, -2, -14, -7, -6, 9, -30, 7, -9, -21, -6, -21, -1, -32, 11, -10, 14, -12, 8, -13, 2
    0xf001f905, 0x4020bff, 0xfb0406f5, 0xfaf9f2fe, 0xf707e209, 0xffebfaeb, 0xef60be0, 0x2f308f4,
    // 9, 16, 12, -3, 4, -15, 2, -8, -1, 14, 3, 3, -16, 0, -18, 7, 5, 9, 2, -26, 6, 20, 1, -1, 0, -14, 6, -14, -21, 2, 0, -24
    0xfd0c1009, 0xf802f104, 0x3030eff, 0x7ee00f0, 0xe6020905, 0xff011406, 0xf206f200, 0xe80002eb,
};
static const uint embedded_decoder3_ResidualBlock_2_body_pw_expand_bias_dwords[32] = {
    // -0.2817, -0.6113, 0.02414, -0.2296, -0.12494, -0.1943, 0.09937, 0.01743, -0.0878, -0.03503, -0.0659, -0.00594, 0.1603, -0.1256, -0.155, 0.02443
    0xb8e4b482, 0xb359262e, 0xb238afff, 0x24762e5c, 0xa87cad9f, 0x9e15ac38, 0xb0053121, 0x2641b0f6,
    // -0.1636, -0.07056, -0.2727, -0.11383, -0.02003, 0.05786, -0.04208, -0.2612, -0.007015, -0.176, -0.1627, -0.1594, -0.2812, -0.2139, -0.11224, -0.289
    0xac84b13c, 0xaf49b45d, 0x2b68a521, 0xb42ea963, 0xb1a29f2f, 0xb11ab135, 0xb2d8b480, 0xb4a0af2f,
    // -0.0594, 0.0829, 0.03546, -0.1377, -0.0641, -0.03326, -0.1464, -0.2076, -0.2053, -0.2428, -0.00856, 0.003094, -0.0391, -0.1764, -0.07385, -0.0772
    0x2d4eab9a, 0xb068288a, 0xa842ac1a, 0xb2a5b0af, 0xb3c5b292, 0x1a56a062, 0xb1a5a901, 0xacf1acba,
    // -0.00325, -0.1212, -0.1858, -0.008484, -0.03275, -0.1985, 0.005444, -0.3857, -0.02525, -0.02211, -0.2593, 0.1139, -0.1531, -0.0839, -0.3538, -0.0785
    0xafc29aa8, 0xa058b1f2, 0xb25aa831, 0xb62c1d93, 0xa5a9a677, 0x2f4ab426, 0xad5fb0e6, 0xad06b5a9,
};
static const uint embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -10, 6, -18, -1, 6, -17, -22, -2, -10, 0, -28, -2, 9, 0, -12, 6, 5, 17, 9, -17, 2, -2, 19, 15, 10, 26, 10, -4, 8, -8, 0, -23
    0xffee06f6, 0xfeeaef06, 0xfee400f6, 0x6f40009, 0xef091105, 0xf13fe02, 0xfc0a1a0a, 0xe900f808,
    // -1, -6, -5, 16, 17, 25, 0, 8, -7, -8, -16, -6, 10, 2, 12, 8, -14, 5, 9, -6, -21, -6, 20, -21, 0, -17, 8, -4, 5, -28, -4, -17
    0x10fbfaff, 0x8001911, 0xfaf0f8f9, 0x80c020a, 0xfa0905f2, 0xeb14faeb, 0xfc08ef00, 0xeffce405,
    // 4, 7, 6, 2, 19, -14, -1, -3, 2, -6, 6, 22, -13, -6, 5, -3, 16, -28, 8, -12, -2, -9, -1, 58, 26, -18, -9, 15, 7, -11, 9, 5
    0x2060704, 0xfdfff213, 0x1606fa02, 0xfd05faf3, 0xf408e410, 0x3afff7fe, 0xff7ee1a, 0x509f507,
    // -9, -13, 15, 5, 33, 1, 29, 27, 19, -2, 7, 16, -20, 22, -16, 0, -9, 6, -46, 3, -5, -10, -13, 13, -14, 17, 17, -8, -17, 0, 26, 3
    0x50ff3f7, 0x1b1d0121, 0x1007fe13, 0xf016ec, 0x3d206f7, 0xdf3f6fb, 0xf81111f2, 0x31a00ef,
    // -8, -44, 5, 14, 12, 8, -3, -8, -4, 4, -4, 23, 2, -9, 30, 11, -43, 10, 1, -19, -11, -6, 17, 2, 0, -2, 18, 17, -13, -4, 4, 15
    0xe05d4f8, 0xf8fd080c, 0x17fc04fc, 0xb1ef702, 0xed010ad5, 0x211faf5, 0x1112fe00, 0xf04fcf3,
    // -20, -6, -11, 8, 17, -10, -22, -16, 1, -5, 2, -2, -15, 21, 4, -3, -4, -11, 15, 1, 30, 4, 2, 15, -4, 12, 18, 2, -30, -4, 7, 9
    0x8f5faec, 0xf0eaf611, 0xfe02fb01, 0xfd0415f1, 0x10ff5fc, 0xf02041e, 0x2120cfc, 0x907fce2,
    // 5, 37, 16, 44, -1, 5, -27, 18, 3, -19, -3, -5, 2, -2, -8, -5, -25, 5, -8, 6, 8, 9, 17, -10, 24, 19, -11, -24, 20, -37, -22, 5
    0x2c102505, 0x12e505ff, 0xfbfded03, 0xfbf8fe02, 0x6f805e7, 0xf6110908, 0xe8f51318, 0x5eadb14,
    // 9, 1, -6, -16, -12, 15, 5, -17, 4, 7, -12, -16, 2, -20, 0, 2, -4, 14, 6, -15, -7, 7, -1, -7, 4, 16, 11, 15, 10, -14, 6, 10
    0xf0fa0109, 0xef050ff4, 0xf0f40704, 0x200ec02, 0xf1060efc, 0xf9ff07f9, 0xf0b1004, 0xa06f20a,
    // 3, 2, -16, 27, -18, -3, 10, 0, -16, 1, -15, -7, 20, -14, -28, -16, -9, 5, 24, 16, 3, -13, 0, 10, 12, -3, 0, -1, -4, -25, 16, -10
    0x1bf00203, 0xafdee, 0xf9f101f0, 0xf0e4f214, 0x101805f7, 0xa00f303, 0xff00fd0c, 0xf610e7fc,
    // -22, -2, -8, 5, 1, 6, -17, -33, 8, -6, 2, -6, -4, -12, 14, 16, -7, -6, 16, 12, 17, 4, -2, -7, 12, 8, 24, -18, 25, 3, 14, 3
    0x5f8feea, 0xdfef0601, 0xfa02fa08, 0x100ef4fc, 0xc10faf9, 0xf9fe0411, 0xee18080c, 0x30e0319,
    // 6, 22, 1, -16, -21, -3, -1, 7, -1, -12, 4, 9, -1, 13, -7, 2, 30, -13, -1, 16, 7, 13, 5, -7, 12, -3, -46, -6, 14, 7, -8, 12
    0xf0011606, 0x7fffdeb, 0x904f4ff, 0x2f90dff, 0x10fff31e, 0xf9050d07, 0xfad2fd0c, 0xcf8070e,
    // 9, 2, -3, -6, 1, -8, -51, 15, 11, -29, -8, -16, 16, -1, -15, -18, -13, 3, 26, 7, -33, -16, -9, 9, -9, -2, -17, 25, -7, 25, 6, 7
    0xfafd0209, 0xfcdf801, 0xf0f8e30b, 0xeef1ff10, 0x71a03f3, 0x9f7f0df, 0x19effef7, 0x70619f9,
    // -7, -15, 33, -14, -8, 8, -2, 28, -1, 10, -15, 1, -8, 5, 8, 2, 6, -7, -9, -6, 15, -5, 3, 3, -7, 9, 3, 6, 8, 15, -24, -5
    0xf221f1f9, 0x1cfe08f8, 0x1f10aff, 0x20805f8, 0xfaf7f906, 0x303fb0f, 0x60309f9, 0xfbe80f08,
    // 6, -1, -6, 6, -3, 1, -2, -22, -3, -2, 9, -15, -31, 20, 3, -6, 26, -3, 1, 10, 6, 6, -4, 0, 3, 27, -9, -7, -44, -29, -7, -3
    0x6faff06, 0xeafe01fd, 0xf109fefd, 0xfa0314e1, 0xa01fd1a, 0xfc0606, 0xf9f71b03, 0xfdf9e3d4,
    // -10, -85, 12, -4, -5, 6, 10, -2, 0, 17, 13, 23, -14, 1, 6, 5, 18, -2, 13, 4, -1, 17, -6, -20, 8, -2, -7, -12, 5, 8, -9, 14
    0xfc0cabf6, 0xfe0a06fb, 0x170d1100, 0x50601f2, 0x40dfe12, 0xecfa11ff, 0xf4f9fe08, 0xef70805,
    // 9, -5, 3, -17, 1, -13, 2, 5, 2, 11, 0, -19, 40, -25, 10, 2, 8, -4, 9, 19, 7, -2, -14, 6, 1, -46, -34, -17, 24, -24, 8, -4
    0xef03fb09, 0x502f301, 0xed000b02, 0x20ae728, 0x1309fc08, 0x6f2fe07, 0xefded201, 0xfc08e818,
    // -2, 30, -8, -10, 1, 9, -14, -7, -3, -14, -13, -8, -10, -28, -23, 7, 20, 15, 4, -24, 21, 16, -13, -22, 21, 11, -16, -6, -9, 23, 16, -14
    0xf6f81efe, 0xf9f20901, 0xf8f3f2fd, 0x7e9e4f6, 0xe8040f14, 0xeaf31015, 0xfaf00b15, 0xf21017f7,
    // 11, 25, -2, 24, 8, 4, 21, -1, -7, 26, -10, 3, -15, 15, -14, -14, 19, -5, 18, -7, -2, 11, 23, -10, -17, 19, -37, -9, -14, -6, 7, -6
    0x18fe190b, 0xff150408, 0x3f61af9, 0xf2f20ff1, 0xf912fb13, 0xf6170bfe, 0xf7db13ef, 0xfa07faf2,
    // 14, 0, -6, 10, 9, -8, -4, -6, -6, 6, 0, -25, -5, 3, -28, 22, 9, 3, 9, -11, -8, 11, -9, -6, -7, 9, 38, 6, -11, -1, 10, -27
    0xafa000e, 0xfafcf809, 0xe70006fa, 0x16e403fb, 0xf5090309, 0xfaf70bf8, 0x62609f9, 0xe50afff5,
    // 12, -6, 2, -8, -19, -2, -3, 16, -4, -41, 10, 7, 46, 36, -12, -7, -10, 11, 1, -16, -11, 10, 6, 5, -6, -17, -7, 10, -27, 15, -5, 4
    0xf802fa0c, 0x10fdfeed, 0x70ad7fc, 0xf9f4242e, 0xf0010bf6, 0x5060af5, 0xaf9effa, 0x4fb0fe5,
    // 7, -58, 11, -56, -24, 18, 2, 7, -3, -12, -11, -7, -6, 8, -6, -1, 5, -19, -5, 8, 17, 1, -7, -19, -40, 20, 21, 51, 12, 51, -6, -6
    0xc80bc607, 0x70212e8, 0xf9f5f4fd, 0xfffa08fa, 0x8fbed05, 0xedf90111, 0x331514d8, 0xfafa330c,
    // -22, -3, 2, -16, 6, 4, -16, 2, 9, 4, 3, -12, 7, 29, 14, 0, 19, 3, 17, -4, 2, -17, -10, -8, -10, 3, 5, 10, -29, 0, 13, -1
    0xf002fdea, 0x2f00406, 0xf4030409, 0xe1d07, 0xfc110313, 0xf8f6ef02, 0xa0503f6, 0xff0d00e3,
    // 7, 53, -3, -13, 5, 2, -2, 8, -3, -1, 4, -6, -2, -6, 0, 2, -18, -9, 5, -6, 20, -20, 13, 18, 2, -8, 3, 21, 0, 0, -8, 3
    0xf3fd3507, 0x8fe0205, 0xfa04fffd, 0x200fafe, 0xfa05f7ee, 0x120dec14, 0x1503f802, 0x3f80000,
    // -8, -14, -4, 11, 23, -2, 0, 4, 5, 1, 1, 25, 43, -48, -18, -16, 4, -3, -12, -8, 1, 6, -2, 3, -4, -48, 25, 2, 41, -1, 11, 1
    0xbfcf2f8, 0x400fe17, 0x19010105, 0xf0eed02b, 0xf8f4fd04, 0x3fe0601, 0x219d0fc, 0x10bff29,
    // 25, -31, -42, 1, 6, 1, 19, -30, -1, -9, 20, -13, 3, 17, -5, 6, 8, 13, 8, 30, 11, -9, -2, -15, -2, 3, -2, 6, 8, -7, 3, 13
    0x1d6e119, 0xe2130106, 0xf314f7ff, 0x6fb1103, 0x1e080d08, 0xf1fef70b, 0x6fe03fe, 0xd03f908,
    // -7, -7, 7, -31, 9, -10, 3, 34, -4, 7, -7, 13, -31, 2, 2, 4, -15, -7, -5, 2, -34, -13, -4, 24, -6, 11, 6, -6, -12, 21, 8, -1
    0xe107f9f9, 0x2203f609, 0xdf907fc, 0x40202e1, 0x2fbf9f1, 0x18fcf3de, 0xfa060bfa, 0xff0815f4,
    // -4, -128, 2, -5, 4, 0, 17, 2, 3, 22, 6, 7, 2, -1, 10, -5, 9, -4, 12, 0, 3, -26, 7, 38, -12, -15, 1, -4, -3, -8, -5, 6
    0xfb0280fc, 0x2110004, 0x7061603, 0xfb0aff02, 0xcfc09, 0x2607e603, 0xfc01f1f4, 0x6fbf8fd,
    // -9, -26, 3, 8, 1, -9, 1, 4, -14, -13, 7, 7, -11, 0, -27, 6, 2, -12, -12, 7, 20, 6, 4, 2, 11, 5, -2, -5, 8, 10, -7, -2
    0x803e6f7, 0x401f701, 0x707f3f2, 0x6e500f5, 0x7f4f402, 0x2040614, 0xfbfe050b, 0xfef90a08,
    // 9, -49, 1, -9, 7, 14, -15, 10, -20, -8, -27, -7, -9, 9, -1, -16, 15, -4, 5, 10, -7, 3, -4, 0, -16, 20, -8, 2, 1, 19, -2, -4
    0xf701cf09, 0xaf10e07, 0xf9e5f8ec, 0xf0ff09f7, 0xa05fc0f, 0xfc03f9, 0x2f814f0, 0xfcfe1301,
    // 10, 5, 5, 2, 6, 20, 10, -18, 5, 2, 5, 0, -4, -10, -1, -18, -1, 6, -1, -15, -7, -12, 14, -16, 4, 3, -10, 11, -1, 10, 7, -3
    0x205050a, 0xee0a1406, 0x50205, 0xeefff6fc, 0xf1ff06ff, 0xf00ef4f9, 0xbf60304, 0xfd070aff,
    // 26, 37, 24, 12, 10, 2, 1, -18, 3, -2, 18, 4, 3, 13, -6, -18, -17, -16, 4, -5, 20, 8, -10, 24, 9, -4, 17, -14, 11, -14, -12, -6
    0xc18251a, 0xee01020a, 0x412fe03, 0xeefa0d03, 0xfb04f0ef, 0x18f60814, 0xf211fc09, 0xfaf4f20b,
    // 3, -4, 1, -10, -8, -3, 17, -1, 7, -5, 6, -18, 0, -6, -13, 19, 10, -2, 4, 7, -15, 5, -9, 9, -4, -7, 15, -10, 36, -1, 2, 12
    0xf601fc03, 0xff11fdf8, 0xee06fb07, 0x13f3fa00, 0x704fe0a, 0x9f705f1, 0xf60ff9fc, 0xc02ff24,
    // -15, 20, -8, 9, -15, 0, 0, 9, -3, -1, 10, 8, -17, -22, 11, 12, -7, 3, 25, 6, 7, -2, 5, -26, -10, 6, 18, -1, 16, -4, -14, -7
    0x9f814f1, 0x90000f1, 0x80afffd, 0xc0beaef, 0x61903f9, 0xe605fe07, 0xff1206f6, 0xf9f2fc10,
    // -13, -9, -12, -19, 3, 14, -3, 1, -3, -6, -12, 10, -18, 2, 9, -14, 8, -2, 29, 40, 5, 7, -4, 8, 6, 12, -5, 14, -14, -3, 6, -2
    0xedf4f7f3, 0x1fd0e03, 0xaf4fafd, 0xf20902ee, 0x281dfe08, 0x8fc0705, 0xefb0c06, 0xfe06fdf2,
    // 2, 2, -6, -3, -17, 13, -6, 7, 10, -6, 0, -8, -3, 8, -27, -15, -2, -15, 18, 9, -2, -14, 10, 5, 4, -19, 2, 1, 14, 3, -16, 15
    0xfdfa0202, 0x7fa0def, 0xf800fa0a, 0xf1e508fd, 0x912f1fe, 0x50af2fe, 0x102ed04, 0xff0030e,
    // 8, -2, -3, -1, 11, -13, 3, 11, 42, 4, 6, 3, 1, 15, -2, 10, -22, 36, 3, -25, 7, 22, -3, 23, 29, 3, 1, -7, -5, 26, 33, 18
    0xfffdfe08, 0xb03f30b, 0x306042a, 0xafe0f01, 0xe70324ea, 0x17fd1607, 0xf901031d, 0x12211afb,
    // 1, 22, 0, -11, 4, 10, 4, 1, 6, 9, 23, 6, 2, 2, -22, 0, 13, -3, -3, -1, 7, 22, 4, 13, -6, -19, 7, 7, -6, -3, -15, 11
    0xf5001601, 0x1040a04, 0x6170906, 0xea0202, 0xfffdfd0d, 0xd041607, 0x707edfa, 0xbf1fdfa,
    // 26, -5, 8, 2, 17, -29, 5, -1, -32, 2, 13, 4, 4, 1, 13, -10, 18, 2, 3, 9, 22, 18, -5, -4, -13, 2, 2, -5, -11, -2, -9, 4
    0x208fb1a, 0xff05e311, 0x40d02e0, 0xf60d0104, 0x9030212, 0xfcfb1216, 0xfb0202f3, 0x4f7fef5,
    // 11, -20, -14, 2, 28, -23, 2, -29, 0, -1, -26, -16, 11, 11, -15, 15, 2, 20, -6, 11, 24, 9, -18, 1, -3, 8, 6, -3, 2, 3, 39, -15
    0x2f2ec0b, 0xe302e91c, 0xf0e6ff00, 0xff10b0b, 0xbfa1402, 0x1ee0918, 0xfd0608fd, 0xf1270302,
    // -2, 11, 1, 29, -8, 16, 0, 19, 39, -4, 3, 17, -5, 4, -31, 13, -11, -14, 5, -7, -18, -25, 12, -12, -3, -5, 4, -8, -6, -17, 10, -10
    0x1d010bfe, 0x130010f8, 0x1103fc27, 0xde104fb, 0xf905f2f5, 0xf40ce7ee, 0xf804fbfd, 0xf60aeffa,
    // 4, -26, 6, 1, -20, 0, -15, -8, 2, -39, -30, 13, 0, 44, -3, -9, 1, -3, -21, 15, -12, -15, -14, 8, 11, 3, -8, 1, 21, 6, -15, 22
    0x106e604, 0xf8f100ec, 0xde2d902, 0xf7fd2c00, 0xfebfd01, 0x8f2f1f4, 0x1f8030b, 0x16f10615,
    // -11, 2, 9, -11, -14, 1, 15, 14, 6, 13, -21, -11, -4, -3, -2, -3, -34, 20, 2, 18, -6, -4, 0, -5, 25, 0, 3, 3, -4, 9, -10, 11
    0xf50902f5, 0xe0f01f2, 0xf5eb0d06, 0xfdfefdfc, 0x120214de, 0xfb00fcfa, 0x3030019, 0xbf609fc,
    // 1, -86, 13, 23, 6, 11, 14, -3, -24, 17, -9, -6, -25, -2, 17, 15, -30, -3, 2, 5, 14, 18, 6, -9, 1, 2, 4, -17, -6, -14, -5, -11
    0x170daa01, 0xfd0e0b06, 0xfaf711e8, 0xf11fee7, 0x502fde2, 0xf706120e, 0xef040201, 0xf5fbf2fa,
    // 2, -15, -12, 21, 23, -3, 0, 6, -3, -2, 31, -10, 3, -11, -6, -13, 31, -4, 10, 2, 9, -24, -2, -3, 2, 0, -20, -8, -6, 12, 14, -17
    0x15f4f102, 0x600fd17, 0xf61ffefd, 0xf3faf503, 0x20afc1f, 0xfdfee809, 0xf8ec0002, 0xef0e0cfa,
    // 32, 1, -3, -2, -10, 35, -19, 2, -9, -21, -21, -8, 6, 0, -14, -35, -1, -22, 23, 21, -6, -11, 27, -3, 4, 3, -9, 5, 19, 7, -23, 4
    0xfefd0120, 0x2ed23f6, 0xf8ebebf7, 0xddf20006, 0x1517eaff, 0xfd1bf5fa, 0x5f70304, 0x4e90713,
    // -4, -34, -1, -9, 25, 0, 13, 2, -23, 7, -13, -10, -1, -13, -32, -30, 2, -2, -5, 16, -11, -7, 5, -4, -4, 2, -5, 22, -18, 14, 11, 16
    0xf7ffdefc, 0x20d0019, 0xf6f307e9, 0xe2e0f3ff, 0x10fbfe02, 0xfc05f9f5, 0x16fb02fc, 0x100b0eee,
    // 2, 55, 1, -14, 18, -3, -1, -14, -15, 3, 1, -4, 11, -5, -22, -9, 8, -14, 15, -3, 20, 9, -21, 3, 11, -16, 9, 10, -7, 11, 11, -5
    0xf2013702, 0xf2fffd12, 0xfc0103f1, 0xf7eafb0b, 0xfd0ff208, 0x3eb0914, 0xa09f00b, 0xfb0b0bf9,
    // -5, 5, -11, 12, -7, 4, -15, -17, 38, -5, 16, -23, 7, 15, 7, -9, -10, 3, 26, 16, 7, 15, -30, 1, 21, 3, -10, -28, -9, -26, 10, 14
    0xcf505fb, 0xeff104f9, 0xe910fb26, 0xf7070f07, 0x101a03f6, 0x1e20f07, 0xe4f60315, 0xe0ae6f7,
    // -3, -22, 4, 0, -11, -5, -31, 9, -10, -19, -35, 0, -2, 5, -3, 5, 1, 12, 3, 0, 8, -7, 13, 3, 6, 24, -1, -5, 21, -2, -14, -21
    0x4eafd, 0x9e1fbf5, 0xddedf6, 0x5fd05fe, 0x30c01, 0x30df908, 0xfbff1806, 0xebf2fe15,
    // -6, -1, -11, 6, 0, 26, 1, 0, 7, -1, -22, 10, 0, -1, -4, 5, -19, 8, 4, -6, -19, -12, 26, -11, 7, 0, 0, 11, 7, -12, 7, -16
    0x6f5fffa, 0x11a00, 0xaeaff07, 0x5fcff00, 0xfa0408ed, 0xf51af4ed, 0xb000007, 0xf007f407,
    // -2, 20, 11, -2, 0, -4, -23, 24, -42, -11, -33, -13, -6, 2, -22, -3, -7, -8, -4, -1, 3, 2, -6, 1, -3, 14, 7, 5, -7, 1, 1, -21
    0xfe0b14fe, 0x18e9fc00, 0xf3dff5d6, 0xfdea02fa, 0xfffcf8f9, 0x1fa0203, 0x5070efd, 0xeb0101f9,
    // -16, -3, 5, 13, 3, 18, 2, -23, -9, 6, -5, -19, -2, -7, 12, -9, 3, 7, 22, 1, 20, 0, -11, -33, -4, -2, -2, -5, -1, -28, 1, 1
    0xd05fdf0, 0xe9021203, 0xedfb06f7, 0xf70cf9fe, 0x1160703, 0xdff50014, 0xfbfefefc, 0x101e4ff,
    // -18, -11, -7, 17, 2, -18, 0, 1, 5, 9, 16, -13, 7, 9, 6, 17, -16, 21, -22, -19, -12, -1, -22, 1, 6, -5, 9, 0, -19, 4, 33, 2
    0x11f9f5ee, 0x100ee02, 0xf3100905, 0x11060907, 0xedea15f0, 0x1eafff4, 0x9fb06, 0x22104ed,
    // -12, 17, 19, 8, -11, -18, 6, 19, 11, -1, 5, 6, 6, 0, 13, -1, 7, -4, -8, 36, -2, 3, -2, -8, -13, -3, -5, -7, 16, 18, -9, -26
    0x81311f4, 0x1306eef5, 0x605ff0b, 0xff0d0006, 0x24f8fc07, 0xf8fe03fe, 0xf9fbfdf3, 0xe6f71210,
    // 0, 29, -11, -8, -11, -1, 5, 16, -8, -9, 2, 12, -10, -8, -29, -1, 3, 11, 36, 6, 38, 6, 5, 14, -8, 4, 2, 8, 6, -13, -15, -26
    0xf8f51d00, 0x1005fff5, 0xc02f7f8, 0xffe3f8f6, 0x6240b03, 0xe050626, 0x80204f8, 0xe6f1f306,
    // 3, -15, -20, 27, -6, 2, -7, 0, -23, -4, -6, 11, 3, 13, 2, 0, 7, -6, 10, -17, 34, 1, 21, 1, -6, 10, -3, -10, 2, -28, -5, -4
    0x1becf103, 0xf902fa, 0xbfafce9, 0x20d03, 0xef0afa07, 0x1150122, 0xf6fd0afa, 0xfcfbe402,
    // 23, -42, -10, -1, -2, 11, 3, 4, 14, -1, 18, -19, 39, -11, -10, -29, 5, 1, -1, 6, -17, -7, 6, -16, -12, -12, -4, -14, 5, 1, 8, -11
    0xfff6d617, 0x4030bfe, 0xed12ff0e, 0xe3f6f527, 0x6ff0105, 0xf006f9ef, 0xf2fcf4f4, 0xf5080105,
    // 13, -4, 23, 1, 7, -11, -11, 5, -10, -10, -4, -22, -5, -14, -13, 14, 35, -6, 3, -6, 5, -7, 7, 6, -6, 4, 10, 8, -23, 18, 12, 8
    0x117fc0d, 0x5f5f507, 0xeafcf6f6, 0xef3f2fb, 0xfa03fa23, 0x607f905, 0x80a04fa, 0x80c12e9,
    // -31, 74, -19, 1, 0, -19, -3, -4, -11, 9, 6, -6, 1, 9, -12, 11, -12, 2, -10, -12, -10, -9, -23, -11, -15, -13, 36, 1, -29, -6, 20, 11
    0x1ed4ae1, 0xfcfded00, 0xfa0609f5, 0xbf40901, 0xf4f602f4, 0xf5e9f7f6, 0x124f3f1, 0xb14fae3,
    // 1, 14, 2, -14, -23, -13, 12, 7, -8, -9, 9, 4, -3, 13, 26, 13, 4, 4, 25, -33, 7, -13, -20, -10, -3, 15, -23, 4, 0, 16, -16, -13
    0xf2020e01, 0x70cf3e9, 0x409f7f8, 0xd1a0dfd, 0xdf190404, 0xf6ecf307, 0x4e90ffd, 0xf3f01000,
    // -36, -22, 5, -11, -28, -10, -9, 24, -7, 9, 14, -5, -23, -6, -13, 0, -8, -5, -7, -19, -8, -3, 18, 4, -2, -4, -2, 1, 0, -14, -29, -20
    0xf505eadc, 0x18f7f6e4, 0xfb0e09f9, 0xf3fae9, 0xedf9fbf8, 0x412fdf8, 0x1fefcfe, 0xece3f200,
    // -5, 0, -7, 4, -11, 1, 2, -8, 11, -8, -19, -6, -3, 8, -1, 3, -16, 21, -13, -5, 13, 7, -15, 6, 18, -5, -20, -2, 10, 10, 18, -1
    0x4f900fb, 0xf80201f5, 0xfaedf80b, 0x3ff08fd, 0xfbf315f0, 0x6f1070d, 0xfeecfb12, 0xff120a0a,
    // 16, 60, -24, -16, -22, 19, 8, -8, 0, -4, 16, 9, 0, -30, 31, 1, 13, 8, 15, -1, -7, -20, 18, 10, -24, 12, 17, 7, 10, 17, -15, -1
    0xf0e83c10, 0xf80813ea, 0x910fc00, 0x11fe200, 0xff0f080d, 0xa12ecf9, 0x7110ce8, 0xfff1110a,
    // 2, -11, -17, -4, 0, 18, -8, -1, -2, 1, 4, -16, 7, -3, -3, -18, -11, 6, -14, 12, -16, -11, 0, 28, 12, -11, -10, 20, -13, 27, 5, 21
    0xfceff502, 0xfff81200, 0xf00401fe, 0xeefdfd07, 0xcf206f5, 0x1c00f5f0, 0x14f6f50c, 0x15051bf3,
};
static const uint embedded_decoder3_ResidualBlock_2_body_pw_contract_bias_dwords[16] = {
    // 0.000645, -0.0002341, 4.566e-05, -0.0002234, 9.495e-05, -0.0002315, -7.78e-05, 0.0003047, 0.0002158, 0.0001031, -0.0002468, 0.0006657, 0.0001152, 0.000462, 0.0002925, -0.0003228
    0x8bac1149, 0x8b5202fe, 0x8b960639, 0xcfe8519, 0x6c20b12, 0x11748c0b, 0xf92078d, 0x8d4a0ccb,
    // 0.0005774, -0.0001531, -0.0002632, -0.000637, -7.15e-06, -0.000433, 0.0003366, 2.8e-06, 0.001049, 0.0007515, 5.56e-05, -0.0001643, -0.0005856, -3.034e-05, -0.001153, 3.28e-05
    0x890410bb, 0x91388c50, 0x8f188078, 0x2f0d84, 0x1228144c, 0x896203a5, 0x81fd90cc, 0x22694b9,
};
static const uint embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -7, -17, -3, -1, -21, 30, 10, -1, -22, -3, 13, 46, 6, 9, -35, -7, 62, 33, -5, 23, 0, 31, 27, 22, 48, -40, 8, 19, -27, -37, 57, 25
    0xfffdeff9, 0xff0a1eeb, 0x2e0dfdea, 0xf9dd0906, 0x17fb213e, 0x161b1f00, 0x1308d830, 0x1939dbe5,
    // -23, 17, -25, -4, -47, -2, -17, 17, 4, 8, 18, 9, -12, -16, 34, 20, -22, 32, -15, -27, 7, -42, 27, -74, 37, -25, 7, -37, 14, 18, 17, 39
    0xfce711e9, 0x11effed1, 0x9120804, 0x1422f0f4, 0xe5f120ea, 0xb61bd607, 0xdb07e725, 0x2711120e,
    // -14, -33, -55, -43, -52, -5, 1, 42, -7, -2, 50, 93, -9, 4, 29, 24, -36, -15, 79, -43, 5, 4, 124, -22, -32, 26, -1, -3, -15, -25, -3, 43
    0xd5c9dff2, 0x2a01fbcc, 0x5d32fef9, 0x181d04f7, 0xd54ff1dc, 0xea7c0405, 0xfdff1ae0, 0x2bfde7f1,
    // 3, -3, 15, -4, 6, 1, -20, -2, -6, -1, -15, 0, -10, -3, -3, -15, 12, -29, -5, 5, 20, 5, -6, 20, -2, -18, 10, -5, -5, 4, -6, 26
    0xfc0ffd03, 0xfeec0106, 0xf1fffa, 0xf1fdfdf6, 0x5fbe30c, 0x14fa0514, 0xfb0aeefe, 0x1afa04fb,
    // 10, -4, 16, 4, -4, 8, 5, -8, 9, 0, -13, -12, 14, 0, -13, -29, -9, -19, -10, -12, -14, 7, -48, -34, 11, 6, -43, 36, 11, 35, -10, -15
    0x410fc0a, 0xf80508fc, 0xf4f30009, 0xe3f3000e, 0xf4f6edf7, 0xded007f2, 0x24d5060b, 0xf1f6230b,
    // 1, -1, 18, -10, -4, 3, -17, -2, -8, -8, -4, 23, 7, -2, -6, -6, -5, -14, -15, 41, -9, 11, 6, 12, -21, -13, -17, -17, 2, 13, -41, 31
    0xf612ff01, 0xfeef03fc, 0x17fcf8f8, 0xfafafe07, 0x29f1f2fb, 0xc060bf7, 0xefeff3eb, 0x1fd70d02,
    // -6, 3, 21, 5, 1, -16, 0, 6, -5, -7, -18, -21, -21, 1, 3, -7, 8, -16, -25, -34, 19, -27, -27, -3, 4, -11, 1, -36, -11, -4, 12, 4
    0x51503fa, 0x600f001, 0xebeef9fb, 0xf90301eb, 0xdee7f008, 0xfde5e513, 0xdc01f504, 0x40cfcf5,
    // -21, 1, -7, -7, 0, -16, -17, 8, -12, 7, 1, 21, -22, 1, 12, 4, -17, 52, -24, -3, 12, 8, 12, 29, -24, 10, -14, -57, 4, 1, 21, 14
    0xf9f901eb, 0x8eff000, 0x150107f4, 0x40c01ea, 0xfde834ef, 0x1d0c080c, 0xc7f20ae8, 0xe150104,
    // -6, -5, -16, 8, 12, -30, -3, 5, 17, 1, 15, -14, -22, -19, 15, 32, 25, -35, 9, 14, -50, -14, 44, 12, -10, -31, 64, -14, 4, -43, -20, 17
    0x8f0fbfa, 0x5fde20c, 0xf20f0111, 0x200fedea, 0xe09dd19, 0xc2cf2ce, 0xf240e1f6, 0x11ecd504,
    // 18, -12, 9, 2, 13, 5, -14, -21, 3, -3, -11, -16, 33, -4, -16, 1, 24, -78, -3, 32, 41, -8, -20, -17, 21, -53, 41, 0, -8, 2, -30, 14
    0x209f412, 0xebf2050d, 0xf0f5fd03, 0x1f0fc21, 0x20fdb218, 0xefecf829, 0x29cb15, 0xee202f8,
    // 20, -11, 34, 1, 10, 6, -8, 18, -9, -9, 1, -15, -31, -7, -13, -32, 28, -28, -3, -37, 58, -29, -16, 15, 28, -6, -11, -2, 6, -4, 2, 23
    0x122f514, 0x12f8060a, 0xf101f7f7, 0xe0f3f9e1, 0xdbfde41c, 0xff0e33a, 0xfef5fa1c, 0x1702fc06,
    // -3, -21, 2, -11, 0, 10, -21, 16, -28, -9, 38, 29, -5, -15, 4, 40, -33, -20, -15, 13, 73, -31, 41, 81, -17, -53, -11, -25, -18, -33, -28, 55
    0xf502ebfd, 0x10eb0a00, 0x1d26f7e4, 0x2804f1fb, 0xdf1ecdf, 0x5129e149, 0xe7f5cbef, 0x37e4dfee,
    // 5, 26, 34, -6, -21, 2, -15, -6, -9, -6, -34, -1, -4, 10, -6, -26, 38, -8, 40, -3, 62, 29, -9, 9, -29, 54, 77, -54, -27, 33, 13, -18
    0xfa221a05, 0xfaf102eb, 0xffdefaf7, 0xe6fa0afc, 0xfd28f826, 0x9f71d3e, 0xca4d36e3, 0xee0d21e5,
    // -22, 7, -3, -5, -6, -12, 10, -8, -1, 0, -17, -9, -4, 9, -21, 5, 3, 2, 14, -10, -12, 9, -19, 4, -41, -45, 4, -3, 0, -3, 7, 7
    0xfbfd07ea, 0xf80af4fa, 0xf7ef00ff, 0x5eb09fc, 0xf60e0203, 0x4ed09f4, 0xfd04d3d7, 0x707fd00,
    // -13, -10, -30, 2, 7, -1, -4, 15, -9, -1, 33, 18, 14, -18, 0, 46, -24, 21, -6, 1, 29, -36, 24, 36, -8, -31, -13, -16, -9, -38, -8, 20
    0x2e2f6f3, 0xffcff07, 0x1221fff7, 0x2e00ee0e, 0x1fa15e8, 0x2418dc1d, 0xf0f3e1f8, 0x14f8daf7,
    // -17, 1, -3, 23, -77, 33, 67, 13, -34, -23, 18, 45, -29, 5, -49, 16, 14, -25, -8, -29, -25, 45, -17, -15, 4, 1, -64, -9, -75, -10, 37, 7
    0x17fd01ef, 0xd4321b3, 0x2d12e9de, 0x10cf05e3, 0xe3f8e70e, 0xf1ef2de7, 0xf7c00104, 0x725f6b5,
    // 5, -1, -34, 6, -15, 32, 17, 10, -12, 2, -38, 27, 8, 18, -19, -1, 61, 37, -5, 22, -4, 40, 27, 19, 43, -37, 8, 14, -26, -38, 58, 20
    0x6deff05, 0xa1120f1, 0x1bda02f4, 0xffed1208, 0x16fb253d, 0x131b28fc, 0xe08db2b, 0x143adae6,
    // -20, 12, -3, 27, -16, -4, -34, 5, -13, -4, 16, 28, 1, -23, 0, 25, -11, 35, -36, -33, -2, -23, 25, -93, 32, -23, 8, -41, 11, 18, 10, 12
    0x1bfd0cec, 0x5defcf0, 0x1c10fcf3, 0x1900e901, 0xdfdc23f5, 0xa319e9fe, 0xd708e920, 0xc0a120b,
    // -35, -32, -63, 44, 16, 13, -49, 52, -23, -10, -26, 93, 6, -10, 10, 40, 12, -23, 54, -59, 2, 51, 110, -69, -40, 26, -10, -15, -15, -30, -23, -21
    0x2cc1e0dd, 0x34cf0d10, 0x5de6f6e9, 0x280af606, 0xc536e90c, 0xbb6e3302, 0xf1f61ad8, 0xebe9e2f1,
    // 5, -1, 12, -11, -5, 0, -21, -1, 3, 1, -16, -6, -14, 1, 5, -11, 11, -28, -1, 6, 22, 2, -6, 22, -2, -17, 10, -7, -5, 5, -4, 28
    0xf50cff05, 0xffeb00fb, 0xfaf00103, 0xf50501f2, 0x6ffe40b, 0x16fa0216, 0xf90aeffe, 0x1cfc05fb,
    // 14, -6, 23, -21, -17, -3, 19, -12, -7, 2, 1, -16, 7, 15, 2, -21, -25, -16, 11, -6, -12, 0, -43, -20, 23, 5, -32, 45, 2, 44, -10, 20
    0xeb17fa0e, 0xf413fdef, 0xf00102f9, 0xeb020f07, 0xfa0bf0e7, 0xecd500f4, 0x2de00517, 0x14f62c02,
    // 3, 5, 6, -7, -15, 14, -19, 3, 6, -11, -25, 15, 2, 1, 4, -8, -16, -14, -13, 41, -12, 10, 5, 12, -23, -12, -19, -17, 6, 6, -39, 26
    0xf9060503, 0x3ed0ef1, 0xfe7f506, 0xf8040102, 0x29f3f2f0, 0xc050af4, 0xefedf4e9, 0x1ad90606,
    // -1, -2, 35, -1, -4, -18, -1, -2, 1, -8, 7, -15, -19, -1, -7, -4, 5, -19, -28, -33, 14, -29, -25, 2, 4, -9, 0, -40, -11, -1, 15, 6
    0xff23feff, 0xfeffeefc, 0xf107f801, 0xfcf9ffed, 0xdfe4ed05, 0x2e7e30e, 0xd800f704, 0x60ffff5,
    // -17, 10, 6, 6, 14, -3, -30, 4, 8, 1, -9, 14, -16, -6, 12, 0, -10, 49, -37, -8, 4, 15, 9, 28, -38, 15, -17, -58, 2, -5, 24, -17
    0x6060aef, 0x4e2fd0e, 0xef70108, 0xcfaf0, 0xf8db31f6, 0x1c090f04, 0xc6ef0fda, 0xef18fb02,
    // -18, 18, -10, 12, 18, -27, -9, -6, 20, -3, 21, 6, -23, -25, -3, 13, 26, -39, -3, 17, -48, -21, 46, 6, -20, -32, 58, -2, 3, -54, -17, -16
    0xcf612ee, 0xfaf7e512, 0x615fd14, 0xdfde7e9, 0x11fdd91a, 0x62eebd0, 0xfe3ae0ec, 0xf0efca03,
    // 18, 0, -3, -20, -11, 8, -1, -28, 7, 0, -4, -14, 22, 7, -5, 0, 7, -82, 8, 36, 39, -16, -15, -1, 27, -54, 46, 10, -7, -6, -27, 29
    0xecfd0012, 0xe4ff08f5, 0xf2fc0007, 0xfb0716, 0x2408ae07, 0xfff1f027, 0xa2eca1b, 0x1de5faf9,
    // 26, -13, 21, 4, 13, 6, -9, 19, -9, -10, -9, -21, -40, 2, -15, -18, 20, -33, -3, -37, 55, -20, -22, 16, 38, -8, -12, -5, 7, -3, 3, 35
    0x415f31a, 0x13f7060d, 0xebf7f6f7, 0xeef102d8, 0xdbfddf14, 0x10eaec37, 0xfbf4f826, 0x2303fd07,
    // -12, -29, -10, 43, 30, 20, -55, 30, -14, 1, -10, 12, 1, -21, 7, 60, 7, -28, -17, -1, 75, -2, 25, 55, -15, -55, -28, -47, -10, -24, -39, 28
    0x2bf6e3f4, 0x1ec9141e, 0xcf601f2, 0x3c07eb01, 0xffefe407, 0x3719fe4b, 0xd1e4c9f1, 0x1cd9e8f6,
    // -7, 22, 15, -20, -43, 42, 0, 1, 12, -15, -17, -13, -13, -13, -3, -60, 22, -13, 33, 3, 64, 13, -14, 26, -31, 54, 70, -49, -10, 10, 21, -17
    0xec0f16f9, 0x1002ad5, 0xf3eff10c, 0xc4fdf3f3, 0x321f316, 0x1af20d40, 0xcf4636e1, 0xef150af6,
    // -19, -4, 0, -14, -20, -5, 11, -10, 11, -1, -3, 10, 15, 3, -24, -10, 4, 8, 5, -7, -22, -5, -5, 6, -59, -36, 9, -7, -1, -5, 9, -11
    0xf200fced, 0xf60bfbec, 0xafdff0b, 0xf6e8030f, 0xf9050804, 0x6fbfbea, 0xf909dcc5, 0xf509fbff,
    // -14, -14, -32, 35, 39, 4, -24, 12, -9, 4, 7, 18, 26, -20, -5, 60, 6, 16, -14, -11, 25, -15, 18, 22, -12, -30, -17, -27, -9, -32, -14, -6
    0x23e0f2f2, 0xce80427, 0x120704f7, 0x3cfbec1a, 0xf5f21006, 0x1612f119, 0xe5efe2f4, 0xfaf2e0f7,
    // -19, 3, -24, 39, -73, 39, 62, 32, -16, -15, -11, 26, -16, 5, -34, 16, 30, -27, -2, -35, -27, 56, -20, -21, 2, -4, -70, -19, -75, 1, 32, 3
    0x27e803ed, 0x203e27b7, 0x1af5f1f0, 0x10de05f0, 0xddfee51e, 0xebec38e5, 0xedbafc02, 0x32001b5,
    // -12, 14, 12, 5, -20, 7, 25, -11, 2, -42, 19, 20, 23, -12, -42, 0, 71, 32, 1, 23, -1, 23, 30, 13, 38, -22, 0, 19, -29, -20, 60, 17
    0x50c0ef4, 0xf51907ec, 0x1413d602, 0xd6f417, 0x17012047, 0xd1e17ff, 0x1300ea26, 0x113cece3,
    // -15, 31, -9, 2, -49, 16, 11, -21, -4, 36, 8, -35, 4, 2, 29, 2, -17, 44, -19, -25, 2, -35, 36, -65, 29, -32, 13, -26, 20, 22, 19, 37
    0x2f71ff1, 0xeb0b10cf, 0xdd0824fc, 0x21d0204, 0xe7ed2cef, 0xbf24dd02, 0xe60de01d, 0x25131614,
    // -11, 37, 13, -26, -44, 20, 85, -66, 3, 11, 33, -64, 33, 30, 23, 3, 10, -1, 79, -47, 3, 6, 127, -16, -36, 26, -10, 7, 4, -1, -7, 25
    0xe60d25f5, 0xbe5514d4, 0xc0210b03, 0x3171e21, 0xd14fff0a, 0xf07f0603, 0x7f61adc, 0x19f9ff04,
    // -4, -9, 11, -9, 4, -5, -11, 3, -6, -11, -14, 0, -7, 5, 4, -16, 10, -26, -11, 12, 25, 3, -3, 19, -3, -19, 11, -6, -7, 4, -10, 24
    0xf70bf7fc, 0x3f5fb04, 0xf2f5fa, 0xf00405f9, 0xcf5e60a, 0x13fd0319, 0xfa0bedfd, 0x18f604f9,
    // 12, -18, 1, -1, -4, 5, -23, 13, 6, 3, -10, 12, 0, -3, -12, -19, -15, -26, -15, -17, -6, 13, -54, -36, 19, -1, -42, 32, 10, 24, -10, -12
    0xff01ee0c, 0xde905fc, 0xcf60306, 0xedf4fd00, 0xeff1e6f1, 0xdcca0dfa, 0x20d6ff13, 0xf4f6180a,
    // 2, 6, 24, -12, 1, 2, 1, -7, -7, -18, -2, 0, 20, 10, -3, -10, 0, -12, -16, 46, -3, 17, 9, 6, -25, -8, -16, -20, 9, 15, -43, 25
    0xf4180602, 0xf9010201, 0xfeeef9, 0xf6fd0a14, 0x2ef0f400, 0x60911fd, 0xecf0f8e7, 0x19d50f09,
    // -3, -14, 6, 0, -3, -16, -11, 21, -13, 1, -14, -1, -24, 1, 8, -10, 5, -10, -18, -33, 17, -33, -26, 1, 4, -13, 3, -38, -13, -4, 14, 17
    0x6f2fd, 0x15f5f0fd, 0xfff201f3, 0xf60801e8, 0xdfeef605, 0x1e6df11, 0xda03f304, 0x110efcf3,
    // -21, 16, 9, -1, 6, -20, 5, -2, -6, -11, 0, -4, -13, -3, 11, -1, -2, 56, -12, 6, 9, -2, 14, 20, -33, 25, -18, -61, 5, 22, 21, 19
    0xff0910eb, 0xfe05ec06, 0xfc00f5fa, 0xff0bfdf3, 0x6f438fe, 0x140efe09, 0xc3ee19df, 0x13151605,
    // 2, 1, -6, -2, 17, -8, 15, -3, 0, 19, 12, -30, -25, 1, 24, 28, 26, -34, 17, 23, -48, -6, 46, 17, -12, -24, 65, -14, 13, -41, -22, 21
    0xfefa0102, 0xfd0ff811, 0xe20c1300, 0x1c1801e7, 0x1711de1a, 0x112efad0, 0xf241e8f4, 0x15ead70d,
    // 20, -21, -1, -5, 8, -6, -33, 5, 3, -7, 0, 3, 37, -9, -12, 5, 17, -79, -10, 33, 49, -10, -17, -19, 21, -55, 40, -7, -15, -12, -30, 12
    0xfbffeb14, 0x5dffa08, 0x300f903, 0x5f4f725, 0x21f6b111, 0xedeff631, 0xf928c915, 0xce2f4f1,
    // 5, -21, 26, 3, -4, -8, 2, 4, 5, -9, -4, -12, -23, -3, -16, -34, 22, -22, -18, -39, 59, -35, -12, 19, 27, -19, -14, 6, -1, -18, -1, 13
    0x31aeb05, 0x402f8fc, 0xf4fcf705, 0xdef0fde9, 0xd9eeea16, 0x13f4dd3b, 0x6f2ed1b, 0xdffeeff,
    // -11, 7, 38, -1, 3, 11, 38, -32, -22, -8, 28, -49, 20, 8, 5, 25, -17, -9, -27, 22, 76, -35, 47, 80, -15, -58, -15, -29, -13, -27, -35, 34
    0xff2607f5, 0xe0260b03, 0xcf1cf8ea, 0x19050814, 0x16e5f7ef, 0x502fdd4c, 0xe3f1c6f1, 0x22dde5f3,
    // -4, 1, 7, -13, -18, 3, -23, -6, -9, -12, -33, 34, -17, 12, 0, -21, 41, -7, 45, -5, 57, 22, -11, 14, -26, 52, 73, -46, -31, 34, 10, -5
    0xf30701fc, 0xfae903ee, 0x22dff4f7, 0xeb000cef, 0xfb2df929, 0xef51639, 0xd24934e6, 0xfb0a22e1,
    // 0, 7, 3, -10, 15, 1, -5, 19, -19, -12, -7, 1, 5, 10, -14, 7, 9, 1, 22, -4, -23, 13, -14, 0, -54, -20, 14, -13, 0, 14, 10, 10
    0xf6030700, 0x13fb010f, 0x1f9f4ed, 0x7f20a05, 0xfc160109, 0xf20de9, 0xf30eecca, 0xa0a0e00,
    // -10, 9, -1, 8, 9, 9, 32, -13, -13, 9, 29, -34, 32, 2, 4, 33, -18, 30, -10, 7, 24, -37, 30, 39, -11, -30, -11, -17, -7, -31, -11, 5
    0x8ff09f6, 0xf3200909, 0xde1d09f3, 0x21040220, 0x7f61eee, 0x271edb18, 0xeff5e2f5, 0x5f5e1f9,
    // -16, 12, 11, 24, -62, 39, 87, -6, -39, -40, 17, 9, -21, 26, -44, 22, 26, -24, -12, -31, -22, 49, -18, -16, 4, 9, -63, -12, -66, -1, 35, 0
    0x180b0cf0, 0xfa5727c2, 0x911d8d9, 0x16d41aeb, 0xe1f4e81a, 0xf0ee31ea, 0xf4c10904, 0x23ffbe,
    // -13, 24, -23, 18, -10, 17, 29, 8, 11, -35, -28, 2, 17, -5, -22, 6, 74, 31, 5, 17, 5, 37, 19, 11, 46, -33, -7, 18, -28, -25, 58, 21
    0x12e918f3, 0x81d11f6, 0x2e4dd0b, 0x6eafb11, 0x11051f4a, 0xb132505, 0x12f9df2e, 0x153ae7e4,
    // -23, 23, 10, 37, -10, 14, -8, -37, -23, 26, 4, -10, 7, -4, -2, 11, -5, 43, -39, -33, -5, -16, 29, -84, 31, -36, 6, -29, 16, 16, 10, 6
    0x250a17e9, 0xdbf80ef6, 0xf6041ae9, 0xbfefc07, 0xdfd92bfb, 0xac1df0fb, 0xe306dc1f, 0x60a1010,
    // -37, 35, 10, 63, 27, 46, 43, -48, -16, 1, -47, -68, 49, 12, 9, 14, 60, -5, 57, -60, -2, 51, 114, -67, -41, 24, -19, -5, 2, -5, -34, -41
    0x3f0a23db, 0xd02b2e1b, 0xbcd101f0, 0xe090c31, 0xc439fb3c, 0xbd7233fe, 0xfbed18d7, 0xd7defb02,
    // -4, -8, 9, -12, -3, -6, -20, 7, -1, -11, -15, 4, -10, 8, 11, -9, 8, -26, -10, 10, 26, 2, -3, 18, -4, -17, 13, -6, -9, 2, -9, 25
    0xf409f8fc, 0x7ecfafd, 0x4f1f5ff, 0xf70b08f6, 0xaf6e608, 0x12fd021a, 0xfa0deffc, 0x19f702f7,
    // 23, -15, 4, -29, -27, -9, -1, 2, -3, 5, 3, 2, 6, 14, -3, -17, -33, -19, 2, -11, -10, 3, -40, -17, 19, 5, -26, 40, 5, 34, -6, 17
    0xe304f117, 0x2fff7e5, 0x20305fd, 0xeffd0e06, 0xf502eddf, 0xefd803f6, 0x28e60513, 0x11fa2205,
    // -2, 11, 9, -9, -6, 12, -7, 1, 6, -20, -21, -4, 12, 11, 5, -8, -11, -16, -16, 42, -2, 17, 4, 6, -23, -11, -20, -19, 11, 6, -41, 22
    0xf7090bfe, 0x1f90cfa, 0xfcebec06, 0xf8050b0c, 0x2af0f0f5, 0x60411fe, 0xedecf5e9, 0x16d7060b,
    // -2, -22, 15, -2, -2, -17, -16, 12, -10, -3, 7, 11, -27, -2, -3, -4, 3, -13, -27, -32, 14, -32, -27, 1, 6, -14, 1, -41, -14, -6, 13, 14
    0xfe0feafe, 0xcf0effe, 0xb07fdf6, 0xfcfdfee5, 0xe0e5f303, 0x1e5e00e, 0xd701f206, 0xe0dfaf2,
    // -26, 12, 10, 9, 19, 3, -25, 7, 5, -14, -8, 11, -20, -13, 18, 2, 2, 48, -25, -4, 8, 14, 3, 19, -33, 20, -20, -54, 0, 10, 19, 0
    0x90a0ce6, 0x7e70313, 0xbf8f205, 0x212f3ec, 0xfce73002, 0x13030e08, 0xcaec14df, 0x130a00,
    // -19, 19, -1, 9, 35, -1, -4, -4, -4, 17, 14, 5, -31, -13, 9, 7, 26, -42, 4, 19, -46, -8, 44, 1, -15, -28, 58, -7, 14, -52, -17, -14
    0x9ff13ed, 0xfcfcff23, 0x50e11fc, 0x709f3e1, 0x1304d61a, 0x12cf8d2, 0xf93ae4f1, 0xf2efcc0e,
    // 20, -8, -11, -22, -9, -4, -18, -1, 4, -8, -1, 2, 23, 0, -4, -3, 4, -82, 1, 41, 47, -27, -13, -6, 24, -54, 46, -4, -11, -16, -24, 20
    0xeaf5f814, 0xffeefcf7, 0x2fff804, 0xfdfc0017, 0x2901ae04, 0xfaf3e52f, 0xfc2eca18, 0x14e8f0f5,
    // 21, -20, 21, 6, -3, -14, 5, 3, 0, -15, -19, -19, -23, 12, -19, -17, 14, -22, -19, -38, 53, -31, -9, 21, 27, -13, -8, 0, 0, -13, 2, 23
    0x615ec15, 0x305f2fd, 0xededf100, 0xefed0ce9, 0xdaedea0e, 0x15f7e135, 0xf8f31b, 0x1702f300,
    // -12, 2, 31, 50, 33, 23, 4, -8, -13, -5, -23, -67, 30, 2, 11, 48, 21, -13, -29, 15, 75, -4, 33, 52, -19, -55, -25, -49, -11, -17, -48, 6
    0x321f02f4, 0xf8041721, 0xbde9fbf3, 0x300b021e, 0xfe3f315, 0x3421fc4b, 0xcfe7c9ed, 0x6d0eff5,
    // -12, -8, -14, -22, -39, 39, -17, 7, 11, -26, -18, 38, -19, -8, 2, -49, 20, -11, 32, 2, 56, 3, -11, 23, -36, 61, 72, -47, -13, 12, 21, -9
    0xeaf2f8f4, 0x7ef27d9, 0x26eee60b, 0xcf02f8ed, 0x220f514, 0x17f50338, 0xd1483ddc, 0xf7150cf3,
    // -20, -1, 4, -14, 7, 11, -2, 12, -5, -6, 16, 3, -8, -2, -11, -9, 15, -3, 23, -7, -12, 7, -28, 3, -39, -41, -1, -7, -1, 3, 3, 9
    0xf204ffec, 0xcfe0b07, 0x310fafb, 0xf7f5fef8, 0xf917fd0f, 0x3e407f4, 0xf9ffd7d9, 0x90303ff,
    // -12, 5, 3, 42, 41, 14, 11, -5, -17, 11, 0, -38, 36, -2, 2, 45, 13, 26, -14, 1, 24, -16, 18, 21, -8, -33, -16, -25, -12, -29, -23, -16
    0x2a0305f4, 0xfb0b0e29, 0xda000bef, 0x2d02fe24, 0x1f21a0d, 0x1512f018, 0xe7f0dff8, 0xf0e9e3f4,
    // -22, 13, -11, 40, -53, 46, 85, 12, -28, -30, -12, -13, -14, 24, -24, 21, 44, -24, -3, -37, -24, 63, -23, -27, 8, 0, -70, -21, -68, 12, 26, -1
    0x28f50dea, 0xc552ecb, 0xf3f4e2e4, 0x15e818f2, 0xdbfde82c, 0xe5e93fe8, 0xebba0008, 0xff1a0cbc,
};
static const uint embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias_dwords[8] = {
    // -0.01396, 0.0361, -0.02063, -0.01578, 0.05222, 0.02519, 0.007286, -0.0161, 0.0572, 0.01163, -0.0392, -0.04065, 0.02972, 0.0261, -0.03897, 0.0431
    0x289fa326, 0xa40aa548, 0x26732aaf, 0xa41f1f76, 0x21f42b52, 0xa934a905, 0x26ae279c, 0x2984a8fd,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass11(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage__decoder3_ResidualBlock_2_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _decoder3_ResidualBlock_2_residual_func_Split_output_grouped = {
        uint3(1920, 1080, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 32), // threadGroupSliceSize
        uint3(1920, 1080, 32), // storageSize
        uint3(32, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        132710400, // threadGroupStorageByteOffset
        storage__decoder3_ResidualBlock_2_residual_func_Split_output_grouped };
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(3840, 2160, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(3840, 2160, 16), // threadGroupSliceSize
        uint3(3840, 2160, 16), // storageSize
        uint3(16, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.030525196343660355, storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0049517774023115635, storage_embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = { embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.010985923931002617, storage_embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_decoder3_ResidualBlock_2_body_pw_expand_bias = { embedded_decoder3_ResidualBlock_2_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_decoder3_ResidualBlock_2_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_2_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.011069098487496376, storage_embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder3_ResidualBlock_2_body_pw_contract_bias = { embedded_decoder3_ResidualBlock_2_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder3_ResidualBlock_2_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_2_body_pw_contract_bias };
    
    const ConstantBufferStorage<512> storage_embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_HWCN< ConstantBufferStorage<512> > embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 16, 32), // threadGroupSliceSize
        uint4(2, 2, 16, 32), // storageSize
        uint4(512, 1024, 32, 1), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.003836918855085969, storage_embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias = { embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias };
    
    // fused_fused_quantized_NHWC_/decoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_22 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_22 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(128, 2, 16);
    const uint3 groupSize_slice_22 = uint3(128, 2, 16);
    const uint3 storageSize_slice_22 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_22 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_22 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_22 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_22 = dot(groupStart_slice_22, tensorByteStrides_slice_22);
    const float quantizationScale_slice_22 = 0.032144080847501755;
    const RWBufferStorage storage_slice_22 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_22 = { logicalSize_slice_22, groupStart_slice_22, groupSize_slice_22, storageSize_slice_22, tensorByteStrides_slice_22, paddingBegin_slice_22, paddingEnd_slice_22, threadGroupByteOffsetInTensor_slice_22 + 199065600, quantizationScale_slice_22, storage_slice_22 };
    // FusedFusedquantized_/decoder3/ResidualBlock_2/residual_func/Concat_quantized_/decoder3/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/decoder3/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/decoder3/ResidualBlock_2/body/pw_expand/Conv_/decoder3/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/decoder3/ResidualBlock_2/body/pw_contract/Conv_/decoder3/ResidualBlock_2/Add_Fusedquantized_/decoder3/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_quantized_/decoder2/skip_pop_0/Add (32, 1080, 1920), (16, 2160, 3840), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,), (32, 16, 2, 2), (16,) -> (16, 2160, 3840)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FNB_CT2D_ADD<32, 1>(0.017359809949994087, 0.02316836453974247, 0.021319996565580368, 0.030991269275546074, _decoder3_ResidualBlock_2_residual_func_Split_output_grouped, fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias, embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_2_body_pw_expand_bias, embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_2_body_pw_contract_bias, embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias, slice_22, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_11
#ifdef MLSR_PASS_11_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass11_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_fused_quantized_NHWC_/decoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_23 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_23 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_23 = uint3(32, 1, 16);
    const uint3 storageSize_slice_23 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_23 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_23 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_23 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_23 = dot(groupStart_slice_23, tensorByteStrides_slice_23);
    const float quantizationScale_slice_23 = 0.032144080847501755;
    const RWBufferStorage storage_slice_23 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_23 = { logicalSize_slice_23, groupStart_slice_23, groupSize_slice_23, storageSize_slice_23, tensorByteStrides_slice_23, paddingBegin_slice_23, paddingEnd_slice_23, threadGroupByteOffsetInTensor_slice_23 + 199065600, quantizationScale_slice_23, storage_slice_23 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_23, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_11_POST


#ifdef MLSR_PASS_12
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/ConvNextBlock.hlsli"

static const uint embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 10, -8, 1, 3, 1, -5, -9, -6, -8, -1, 5, 5, 0, 1, -5, -10, -8, 1, 5, -4, -4, -24, -7, 0, 2, 4, -1, -6, 5, 10, 1, -15
    0x301f80a, 0xfaf7fb01, 0x505fff8, 0xf6fb0100, 0xfc0501f8, 0xf9e8fc, 0xfaff0402, 0xf1010a05,
    // -1, -3, 4, -3, 2, -6, -11, -6, 0, 6, -5, -3, -3, 8, 3, -12, -10, -1, -2, -6, 9, -14, 4, 1, -6, 1, -2, -2, 6, 5, -3, -13
    0xfd04fdff, 0xfaf5fa02, 0xfdfb0600, 0xf40308fd, 0xfafefff6, 0x104f209, 0xfefe01fa, 0xf3fd0506,
    // -19, 8, -33, -68, -5, -47, 1, 23, 27, 17, -26, 10, 6, -7, 20, 40, -13, -1, 13, 26, -4, -12, -22, 2, -19, -7, -9, 3, 12, 12, -13, -2
    0xbcdf08ed, 0x1701d1fb, 0xae6111b, 0x2814f906, 0x1a0dfff3, 0x2eaf4fc, 0x3f7f9ed, 0xfef30c0c,
    // 12, -3, 3, 5, 7, -8, -9, 0, -14, 2, 2, -1, 3, 11, -4, -8, -22, 7, -11, -2, -1, -33, -24, -8, 13, 1, 11, 6, 4, 6, -5, -16
    0x503fd0c, 0xf7f807, 0xff0202f2, 0xf8fc0b03, 0xfef507ea, 0xf8e8dfff, 0x60b010d, 0xf0fb0604,
    // 6, -4, -2, -7, 5, -13, -12, -2, 0, -3, 4, 2, 3, 4, 3, -5, 3, 3, -1, 7, 3, -6, 8, -4, 4, 4, 5, -4, -1, 1, 0, -10
    0xf9fefc06, 0xfef4f305, 0x204fd00, 0xfb030403, 0x7ff0303, 0xfc08fa03, 0xfc050404, 0xf60001ff,
    // -12, 3, 0, 30, -4, -3, 15, -11, -14, 8, 10, -12, 5, 6, -4, 5, -3, 7, 1, -5, 6, 9, -7, -8, -8, -2, 0, -3, 1, -1, 2, 3
    0x1e0003f4, 0xf50ffdfc, 0xf40a08f2, 0x5fc0605, 0xfb0107fd, 0xf8f90906, 0xfd00fef8, 0x302ff01,
    // -2, 3, 2, 4, -5, -11, -9, -4, -39, 4, 24, 5, 16, 24, -7, -11, 5, -12, -3, 127, -35, -63, -18, -126, 37, -41, 35, -98, -57, 20, 23, -12
    0x40203fe, 0xfcf7f5fb, 0x51804d9, 0xf5f91810, 0x7ffdf405, 0x82eec1dd, 0x9e23d725, 0xf41714c7,
    // -8, -3, 7, -3, -6, -11, 10, -10, -17, 5, -16, 0, 2, 13, -16, 2, -12, 9, -5, -7, -2, -5, -4, -7, 0, -2, -1, 0, -17, -13, -8, -5
    0xfd07fdf8, 0xf60af5fa, 0xf005ef, 0x2f00d02, 0xf9fb09f4, 0xf9fcfbfe, 0xfffe00, 0xfbf8f3ef,
    // -17, 4, 0, 7, 9, -15, 7, -2, -1, 13, -3, -11, -13, 1, 18, 7, 2, 0, 3, 1, -5, 9, 10, 2, -5, 3, -4, 1, 4, 5, -6, 0
    0x70004ef, 0xfe07f109, 0xf5fd0dff, 0x71201f3, 0x1030002, 0x20a09fb, 0x1fc03fb, 0xfa0504,
    // -2, -1, -4, -5, 1, 20, 17, -3, 17, -9, -3, 0, -4, -10, 1, 1, -2, -3, -4, -1, -11, 31, 9, 7, 12, 1, -3, -8, 6, -5, 5, 20
    0xfbfcfffe, 0xfd111401, 0xfdf711, 0x101f6fc, 0xfffcfdfe, 0x7091ff5, 0xf8fd010c, 0x1405fb06,
    // -15, 1, -2, 0, 1, 21, 1, 1, 9, -9, -12, -2, -3, -4, -1, 11, -6, 6, 5, -7, -7, 20, -10, 7, 3, 0, -2, -3, 4, -8, -8, 2
    0xfe01f1, 0x1011501, 0xfef4f709, 0xbfffcfd, 0xf90506fa, 0x7f614f9, 0xfdfe0003, 0x2f8f804,
    // 30, 55, 11, -31, -2, 64, -18, -31, 25, -3, -6, -11, 29, -19, 12, 2, -11, -7, 27, 43, -6, 31, -11, 12, -15, -8, -26, 2, 15, 8, -29, 40
    0xe10b371e, 0xe1ee40fe, 0xf5fafd19, 0x20ced1d, 0x2b1bf9f5, 0xcf51ffa, 0x2e6f8f1, 0x28e3080f,
    // -5, -9, 4, 6, -2, 18, 8, 4, -2, -4, -9, -7, -10, -13, -4, 0, -20, -5, -5, 7, -2, 24, 12, 1, 12, -6, 2, -11, -16, -2, 14, 13
    0x604f7fb, 0x40812fe, 0xf9f7fcfe, 0xfcf3f6, 0x7fbfbec, 0x10c18fe, 0xf502fa0c, 0xd0efef0,
    // -1, -5, 2, -1, -7, 30, 5, 7, 6, -3, -13, 1, 1, -6, 3, 3, -5, -3, 4, 5, 1, 8, 6, 5, 8, 3, -12, -4, -6, -5, 2, -5
    0xff02fbff, 0x7051ef9, 0x1f3fd06, 0x303fa01, 0x504fdfb, 0x5060801, 0xfcf40308, 0xfb02fbfa,
    // -9, 4, 1, -11, -9, 38, -17, 4, -3, 4, 9, -16, 8, 1, -7, 14, 1, 1, 2, 15, 7, 22, -6, 1, -3, -10, 2, -2, 2, 3, -6, 5
    0xf50104f7, 0x4ef26f7, 0xf00904fd, 0xef90108, 0xf020101, 0x1fa1607, 0xfe02f6fd, 0x5fa0302,
    // 0, -6, 2, -28, 2, 58, -11, 8, 5, 5, 11, -9, 22, -4, 9, 31, -17, 31, -27, 21, -4, -76, -46, -3, 43, 17, -38, 4, 3, -28, 21, 47
    0xe402fa00, 0x8f53a02, 0xf70b0505, 0x1f09fc16, 0x15e51fef, 0xfdd2b4fc, 0x4da112b, 0x2f15e403,
    // -8, -2, -4, -32, -10, 6, 32, -5, 19, 17, -2, -17, -14, -6, 8, -14, 5, -8, -1, 4, 8, 28, -7, 12, 2, 4, -7, -3, 7, 0, 3, 5
    0xe0fcfef8, 0xfb2006f6, 0xeffe1113, 0xf208faf2, 0x4fff805, 0xcf91c08, 0xfdf90402, 0x5030007,
    // -15, 3, 7, -27, 0, 10, 4, -7, 9, -1, -11, 8, 7, -2, -16, 3, -1, 1, -1, 3, 0, -17, 5, 0, 4, -2, 9, -3, 2, 0, 5, -8
    0xe50703f1, 0xf9040a00, 0x8f5ff09, 0x3f0fe07, 0x3ff01ff, 0x5ef00, 0xfd09fe04, 0xf8050002,
    // 6, 6, 3, -19, 6, -14, 26, -13, 15, -11, 2, 11, 3, -6, 6, -1, -8, 11, -2, -43, -7, 46, -17, -2, -5, 7, 5, -26, -1, 11, 5, 2
    0xed030606, 0xf31af206, 0xb02f50f, 0xff06fa03, 0xd5fe0bf8, 0xfeef2ef9, 0xe60507fb, 0x2050bff,
    // -5, -1, 6, 38, 6, 18, -17, -7, -11, 4, -10, -3, 3, -2, -7, -3, -43, 14, -17, -36, -16, -30, -5, -35, 60, -11, -5, 13, -41, -19, 0, -28
    0x2606fffb, 0xf9ef1206, 0xfdf604f5, 0xfdf9fe03, 0xdcef0ed5, 0xddfbe2f0, 0xdfbf53c, 0xe400edd7,
    // 32, -35, 4, 14, -79, 9, 56, -71, -3, -13, 46, -10, -60, 22, -97, 3, 15, -11, 3, 31, -20, 24, 40, -3, -31, 11, -4, -7, 19, 1, -13, 30
    0xe04dd20, 0xb93809b1, 0xf62ef3fd, 0x39f16c4, 0x1f03f50f, 0xfd2818ec, 0xf9fc0be1, 0x1ef30113,
    // 17, -20, 19, 34, 10, 37, 13, 19, -17, 27, -13, -31, 4, -6, 17, 26, -7, -3, 17, 30, -22, -15, -15, 12, -28, 14, -12, 20, 14, 13, -48, 8
    0x2213ec11, 0x130d250a, 0xe1f31bef, 0x1a11fa04, 0x1e11fdf9, 0xcf1f1ea, 0x14f40ee4, 0x8d00d0e,
    // -17, 19, -18, -55, 14, 13, 0, -27, 40, -14, 12, -3, -17, -18, 20, -9, -8, 10, 0, 6, -7, 6, -13, 7, -4, 2, 1, -1, 4, -2, -3, -2
    0xc9ee13ef, 0xe5000d0e, 0xfd0cf228, 0xf714eeef, 0x6000af8, 0x7f306f9, 0xff0102fc, 0xfefdfe04,
    // 7, -2, -5, 0, 1, 23, -10, -6, -12, -4, 13, -3, 19, -4, -5, 10, 7, 5, -8, 4, -7, 3, 14, 3, 1, -4, 4, -1, 5, -10, 1, -7
    0xfbfe07, 0xfaf61701, 0xfd0dfcf4, 0xafbfc13, 0x4f80507, 0x30e03f9, 0xff04fc01, 0xf901f605,
    // 15, -6, 2, -35, 8, 35, 33, 2, 2, 0, 1, -14, 16, -4, 13, 8, -24, -31, -46, -17, -2, -86, -33, 27, 38, -47, 52, 6, -69, 32, 23, -88
    0xdd02fa0f, 0x2212308, 0xf2010002, 0x80dfc10, 0xefd2e1e8, 0x1bdfaafe, 0x634d126, 0xa81720bb,
    // 6, -4, 5, 35, 6, 16, -4, -9, -19, -4, 0, 10, 20, 2, -11, 13, -1, -4, 6, 16, -4, 17, 7, 8, 10, 0, -8, -2, -1, -9, 8, 4
    0x2305fc06, 0xf7fc1006, 0xa00fced, 0xdf50214, 0x1006fcff, 0x80711fc, 0xfef8000a, 0x408f7ff,
    // -4, -17, 10, 27, -7, -22, -3, 16, -9, 4, -11, -14, 1, 3, 2, 0, -5, 3, -2, -6, -3, 14, 3, 2, 8, -3, -5, 0, -4, -13, -1, -2
    0x1b0aeffc, 0x10fdeaf9, 0xf2f504f7, 0x20301, 0xfafe03fb, 0x2030efd, 0xfbfd08, 0xfefff3fc,
    // 4, -3, -2, 1, -4, -2, 8, 4, -7, 5, 0, -3, 1, 3, 6, 4, -7, 11, 9, 13, 3, -14, -37, -11, -20, -6, 0, 8, 10, 15, -3, 2
    0x1fefd04, 0x408fefc, 0xfd0005f9, 0x4060301, 0xd090bf9, 0xf5dbf203, 0x800faec, 0x2fd0f0a,
    // -8, 1, 6, 9, 1, 0, 1, -4, -12, -3, 4, -1, 2, 8, -5, 4, -3, -7, 15, 9, -2, 5, 0, 11, -14, 9, -6, -7, 2, -12, 11, 8
    0x90601f8, 0xfc010001, 0xff04fdf4, 0x4fb0802, 0x90ff9fd, 0xb0005fe, 0xf9fa09f2, 0x80bf402,
    // 25, 29, -56, -44, 10, -90, 48, -15, 47, 48, -35, 78, -33, -9, -72, -22, -12, 0, 11, -6, 9, -8, -10, -19, 3, -7, -5, 4, 3, 3, -18, 11
    0xd4c81d19, 0xf130a60a, 0x4edd302f, 0xeab8f7df, 0xfa0b00f4, 0xedf6f809, 0x4fbf903, 0xbee0303,
    // -17, 10, -8, -13, -1, -23, 0, -12, 9, -8, 8, 5, -6, 6, -8, -12, 13, -20, 22, 1, 13, 20, 22, 10, -18, 14, -14, -28, 7, 6, 15, 11
    0xf3f80aef, 0xf400e9ff, 0x508f809, 0xf4f806fa, 0x116ec0d, 0xa16140d, 0xe4f20eee, 0xb0f0607,
    // 8, -3, 1, 9, -8, 16, 8, 8, -11, 4, -6, 2, 5, 3, -8, -1, 13, -3, -1, -1, -1, -8, 12, 5, 5, -9, 3, 2, 6, 1, 3, -12
    0x901fd08, 0x80810f8, 0x2fa04f5, 0xfff80305, 0xfffffd0d, 0x50cf8ff, 0x203f705, 0xf4030106,
    // 3, 6, -11, -10, -2, 5, 6, 5, -4, -18, 13, 5, 16, 1, 0, -7, 2, -4, 3, 15, 5, -4, -17, 8, -14, -9, -3, 8, 4, 6, -5, 1
    0xf6f50603, 0x50605fe, 0x50deefc, 0xf9000110, 0xf03fc02, 0x8effc05, 0x8fdf7f2, 0x1fb0604,
    // 2, -6, -6, 19, -13, -42, 4, -4, 1, -11, 2, 15, -2, 6, -2, -26, -25, 17, -29, 29, -50, -11, -6, -37, -35, -53, -94, 23, 22, 0, 21, -45
    0x13fafa02, 0xfc04d6f3, 0xf02f501, 0xe6fe06fe, 0x1de311e7, 0xdbfaf5ce, 0x17a2cbdd, 0xd3150016,
    // 10, -9, -9, 1, -12, -21, 26, 15, -12, 3, 3, 4, 10, 0, -6, -10, 0, -5, -6, -4, -5, -14, -9, 1, -4, -10, 6, 4, -4, 4, -4, -2
    0x1f7f70a, 0xf1aebf4, 0x40303f4, 0xf6fa000a, 0xfcfafb00, 0x1f7f2fb, 0x406f6fc, 0xfefc04fc,
    // 13, -3, 7, 18, -5, -7, 8, 14, -21, -1, -2, 5, 17, 4, -2, -6, 7, 0, -4, -4, -3, 0, 11, 2, 7, -9, 8, 5, 5, 1, 6, -9
    0x1207fd0d, 0xe08f9fb, 0x5feffeb, 0xfafe0411, 0xfcfc0007, 0x20b00fd, 0x508f707, 0xf7060105,
    // -8, 5, 2, -2, 12, -15, 4, -10, 7, 1, -13, -7, -15, -11, 3, 1, 8, 0, 5, 29, 0, 27, -21, -11, -31, 7, 6, 6, 24, 6, 8, 14
    0xfe0205f8, 0xf604f10c, 0xf9f30107, 0x103f5f1, 0x1d050008, 0xf5eb1b00, 0x60607e1, 0xe080618,
    // 7, 5, -7, -7, -2, 37, 22, -8, -6, -7, 9, -4, 7, -10, 4, -2, -15, -2, -13, 7, -39, 4, 6, -18, 3, -11, 3, 4, -24, -10, -6, -8
    0xf9f90507, 0xf81625fe, 0xfc09f9fa, 0xfe04f607, 0x7f3fef1, 0xee0604d9, 0x403f503, 0xf8faf6e8,
    // -24, 2, -6, -18, -42, -29, -58, 13, -66, -10, 12, 79, 20, 48, -66, 39, 6, 3, -5, -30, 10, 29, 7, -20, 6, 5, -9, -2, -9, -8, 8, -11
    0xeefa02e8, 0xdc6e3d6, 0x4f0cf6be, 0x27be3014, 0xe2fb0306, 0xec071d0a, 0xfef70506, 0xf508f8f7,
    // 13, -5, 3, -11, -5, 31, 27, -11, 6, -1, 6, -6, -1, -7, 10, 8, -12, 1, -13, -2, -7, -28, -16, -15, 41, -9, 10, -23, -34, -16, 22, -24
    0xf503fb0d, 0xf51b1ffb, 0xfa06ff06, 0x80af9ff, 0xfef301f4, 0xf1f0e4f9, 0xe90af729, 0xe816f0de,
    // 0, -5, 11, 17, -5, -17, -13, 1, -12, 7, -2, 3, 5, 1, -12, 6, 5, -6, 1, -4, -4, 14, 7, -4, 14, 4, -6, -3, -2, -12, 3, -3
    0x110bfb00, 0x1f3effb, 0x3fe07f4, 0x6f40105, 0xfc01fa05, 0xfc070efc, 0xfdfa040e, 0xfd03f4fe,
    // 0, -1, -11, -24, -6, -33, 40, -4, 20, 5, -10, -12, -7, -7, 6, -28, 0, -2, 5, -4, 7, -2, -17, -6, 3, 3, -1, 0, -2, -1, -2, 0
    0xe8f5ff00, 0xfc28dffa, 0xf4f60514, 0xe406f9f9, 0xfc05fe00, 0xfaeffe07, 0xff0303, 0xfefffe,
    // 7, 0, 1, -7, 5, 50, 5, 18, -11, 0, 0, -11, 25, -9, 8, 36, 6, -34, 20, 61, 5, -14, 30, -20, 2, -65, -1, 20, -14, 32, -74, -27
    0xf9010007, 0x12053205, 0xf50000f5, 0x2408f719, 0x3d14de06, 0xec1ef205, 0x14ffbf02, 0xe5b620f2,
    // -4, 8, -9, -21, -8, -3, 16, -2, 15, -7, -3, -17, -1, -11, 1, -20, -7, -5, 5, 5, -2, 13, -22, 2, -2, 3, -16, -6, -10, -6, -6, 7
    0xebf708fc, 0xfe10fdf8, 0xeffdf90f, 0xec01f5ff, 0x505fbf9, 0x2ea0dfe, 0xfaf003fe, 0x7fafaf6,
    // -2, 2, -21, 5, -7, -3, 2, 0, 2, -11, 11, 0, -3, -2, -1, 3, 3, 0, 3, -6, 0, 6, 0, -5, -1, 5, -1, -3, -2, -6, -3, -1
    0x5eb02fe, 0x2fdf9, 0xbf502, 0x3fffefd, 0xfa030003, 0xfb000600, 0xfdff05ff, 0xfffdfafe,
    // -11, -5, 2, 26, -6, 21, -24, 20, -11, 6, -10, -4, -3, 3, -3, 13, 11, 1, 7, 20, 12, 35, -28, -2, -4, -13, -1, 19, 12, 16, 1, 31
    0x1a02fbf5, 0x14e815fa, 0xfcf606f5, 0xdfd03fd, 0x1407010b, 0xfee4230c, 0x13fff3fc, 0x1f01100c,
    // -15, 5, -9, -21, -13, -15, 26, 5, 8, 8, -1, -10, -8, -10, 7, -13, 6, -19, 16, -26, 14, 65, 42, -1, 21, 10, -30, -12, -17, -21, 27, 29
    0xebf705f1, 0x51af1f3, 0xf6ff0808, 0xf307f6f8, 0xe610ed06, 0xff2a410e, 0xf4e20a15, 0x1d1bebef,
    // -1, -8, 53, 43, -45, -43, 52, -59, -59, 11, -68, -21, -14, -3, 7, -21, -5, 3, -1, -11, 13, 53, 3, -31, 16, -20, 7, 12, 9, -7, 9, 18
    0x2b35f8ff, 0xc534d5d3, 0xebbc0bc5, 0xeb07fdf2, 0xf5ff03fb, 0xe103350d, 0xc07ec10, 0x1209f909,
    // 1, 1, 1, -9, -1, -25, -1, -2, 9, -10, 9, 7, 15, 6, 3, -22, -8, 21, -16, -58, 6, -1, -12, -31, 30, -18, 30, 12, 0, 16, 1, -21
    0xf7010101, 0xfeffe7ff, 0x709f609, 0xea03060f, 0xc6f015f8, 0xe1f4ff06, 0xc1eee1e, 0xeb011000,
    // 5, -7, 2, 33, -5, -14, -10, 12, -19, 8, -4, 5, 3, 1, -13, 1, 7, 1, -4, 8, -2, -9, 9, 6, 1, 1, 0, 3, 2, 0, 3, -6
    0x2102f905, 0xcf6f2fb, 0x5fc08ed, 0x1f30103, 0x8fc0107, 0x609f7fe, 0x3000101, 0xfa030002,
    // 11, -4, -1, 8, 8, -21, 3, 1, 1, -6, -3, 11, -6, 4, -3, -10, 0, -4, -3, 0, 2, 2, 10, 0, 3, -3, 6, 3, 4, -2, 2, 3
    0x8fffc0b, 0x103eb08, 0xbfdfa01, 0xf6fd04fa, 0xfdfc00, 0xa0202, 0x306fd03, 0x302fe04,
    // 8, 4, 6, -6, 19, 31, -6, 16, -7, -1, 7, 0, 20, 10, 5, 13, -36, -8, -17, -19, -128, 14, -11, 16, -40, 44, 21, -45, -39, -10, -35, -6
    0xfa060408, 0x10fa1f13, 0x7fff9, 0xd050a14, 0xedeff8dc, 0x10f50e80, 0xd3152cd8, 0xfaddf6d9,
    // 1, 7, -1, 1, 7, -10, -11, 4, 5, -13, 6, 5, -4, 10, 1, -4, 2, 7, -3, -9, 5, -11, 6, -3, -6, -5, 8, 6, 6, 4, -7, -11
    0x1ff0701, 0x4f5f607, 0x506f305, 0xfc010afc, 0xf7fd0702, 0xfd06f505, 0x608fbfa, 0xf5f90406,
    // 3, -3, 9, -6, 12, 15, 5, 1, 5, 2, -1, -3, 2, 2, 5, 4, 5, -1, -6, 3, -1, 0, 15, 7, 3, -4, 3, 3, 3, 1, 5, 1
    0xfa09fd03, 0x1050f0c, 0xfdff0205, 0x4050202, 0x3faff05, 0x70f00ff, 0x303fc03, 0x1050103,
    // -16, 8, 5, -2, 10, -31, -8, -6, 3, 2, -9, 2, -12, 2, -2, -3, 23, -14, -6, 7, -4, 1, 29, 10, -22, 8, 7, 15, 6, 3, 9, 15
    0xfe0508f0, 0xfaf8e10a, 0x2f70203, 0xfdfe02f4, 0x7faf217, 0xa1d01fc, 0xf0708ea, 0xf090306,
    // 9, -2, -7, -13, -5, 8, -5, 7, 6, 0, -3, 1, -4, -1, 2, 5, -7, 23, -25, -16, -15, -10, -25, 7, -12, -13, 33, 23, 18, 11, -16, -7
    0xf3f9fe09, 0x7fb08fb, 0x1fd0006, 0x502fffc, 0xf0e717f9, 0x7e7f6f1, 0x1721f3f4, 0xf9f00b12,
    // 9, -58, 43, -34, 39, 34, 96, 11, 0, 35, -72, -28, -36, -21, 25, -33, 1, -12, 7, 33, 7, -17, 10, 27, -16, 9, 2, 2, -1, -5, -3, 11
    0xde2bc609, 0xb602227, 0xe4b82300, 0xdf19ebdc, 0x2107f401, 0x1b0aef07, 0x20209f0, 0xbfdfbff,
    // 12, 0, 3, -3, 9, 30, 20, 3, 0, 5, 0, -5, 8, -2, 11, 9, 1, 12, -17, -22, -1, -54, 0, -10, 3, -13, 12, 8, -1, 12, -19, -25
    0xfd03000c, 0x3141e09, 0xfb000500, 0x90bfe08, 0xeaef0c01, 0xf600caff, 0x80cf303, 0xe7ed0cff,
    // -2, 7, -1, -26, 1, -2, -5, -14, -4, -4, 7, 6, 2, 7, -6, -10, -4, 1, 6, 4, 3, -24, -21, 5, 5, 2, -13, 1, -7, 3, 0, -11
    0xe6ff07fe, 0xf2fbfe01, 0x607fcfc, 0xf6fa0702, 0x40601fc, 0x5ebe803, 0x1f30205, 0xf50003f9,
    // -1, -3, 0, -11, 0, 18, -17, 6, 5, -23, 10, 21, 14, 0, 2, 32, -15, -5, 8, 15, 7, -9, -30, 8, 4, -3, -14, 8, -3, 13, -1, 3
    0xf500fdff, 0x6ef1200, 0x150ae905, 0x2002000e, 0xf08fbf1, 0x8e2f707, 0x8f2fd04, 0x3ff0dfd,
    // 21, -5, 2, -15, -4, 24, 11, -7, -26, -5, 12, 10, -2, 3, 11, 11, -4, -19, 64, -23, 13, 29, 23, 32, -12, -25, 43, 15, -24, 8, -30, -76
    0xf102fb15, 0xf90b18fc, 0xa0cfbe6, 0xb0b03fe, 0xe940edfc, 0x20171d0d, 0xf2be7f4, 0xb4e208e8,
    // -18, -4, 8, 21, -12, -39, 4, 25, 5, 8, -13, -3, -12, -1, 4, 8, 5, -1, 3, 9, -1, -10, -17, 4, -1, 4, -1, 2, -2, 2, 3, -5
    0x1508fcee, 0x1904d9f4, 0xfdf30805, 0x804fff4, 0x903ff05, 0x4eff6ff, 0x2ff04ff, 0xfb0302fe,
    // 13, -1, 14, 33, 0, -12, -15, 7, -21, 16, 7, 6, 3, 4, 3, -9, -3, 0, 5, 1, 0, -28, -5, -1, 11, -5, 7, 7, 10, 8, 6, -14
    0x210eff0d, 0x7f1f400, 0x60710eb, 0xf7030403, 0x10500fd, 0xfffbe400, 0x707fb0b, 0xf206080a,
    // -2, 4, 0, 1, 0, -20, -3, 1, -2, -4, -1, 5, -1, 4, -1, 4, 0, 3, -3, 8, -6, 3, 2, 10, -18, 2, 7, -3, 4, 4, 4, 12
    0x10004fe, 0x1fdec00, 0x5fffcfe, 0x4ff04ff, 0x8fd0300, 0xa0203fa, 0xfd0702ee, 0xc040404,
    // 1, 4, -3, -5, 5, -9, -4, -5, -7, -3, 5, 2, -1, 8, 0, 0, 5, 0, 1, -15, 3, 18, 3, 3, -10, -1, 0, 0, 6, 1, 10, 9
    0xfbfd0401, 0xfbfcf705, 0x205fdf9, 0x8ff, 0xf1010005, 0x3031203, 0xfff6, 0x90a0106,
    // 25, 37, -12, 77, 15, 3, -55, -15, -12, 23, 10, 27, 8, 6, -13, -22, 9, 0, 6, 7, -8, 1, -2, -4, -21, 1, 1, 0, 4, 4, -6, -7
    0x4df42519, 0xf1c9030f, 0x1b0a17f4, 0xeaf30608, 0x7060009, 0xfcfe01f8, 0x101eb, 0xf9fa0404,
    // 3, -2, 5, 12, 2, -16, -2, 8, -8, 4, -5, -4, 4, 9, 5, 9, -3, 10, -10, 17, -12, -26, -3, 0, -9, -8, 14, 10, -8, -1, -2, -5
    0xc05fe03, 0x8fef002, 0xfcfb04f8, 0x9050904, 0x11f60afd, 0xfde6f4, 0xa0ef8f7, 0xfbfefff8,
    // 2, 7, -4, -1, 2, -27, 0, -3, -2, -4, 9, 3, 1, 7, 4, -3, 3, -2, -2, 9, 0, 7, 1, 3, 2, -1, 1, -4, 1, 1, -4, 1
    0xfffc0702, 0xfd00e502, 0x309fcfe, 0xfd040701, 0x9fefe03, 0x3010700, 0xfc01ff02, 0x1fc0101,
    // 2, 9, -5, 17, 3, 40, -16, 11, 3, -14, 2, -8, 12, -3, -8, 20, -13, 1, 1, -1, 2, 5, -7, 3, -3, -3, -7, -9, -4, -4, -4, 3
    0x11fb0902, 0xbf02803, 0xf802f203, 0x14f8fd0c, 0xff0101f3, 0x3f90502, 0xf7f9fdfd, 0x3fcfcfc,
    // 4, 0, -5, 18, 4, -8, 10, -5, 13, -7, -5, -4, -2, -13, -12, -15, 11, -32, -25, 81, 11, -39, 61, 51, 65, 13, 16, -55, -27, -1, -47, -7
    0x12fb0004, 0xfb0af804, 0xfcfbf90d, 0xf1f4f3fe, 0x51e7e00b, 0x333dd90b, 0xc9100d41, 0xf9d1ffe5,
    // 7, 1, -6, -3, 1, 20, 13, 3, 20, -11, -8, -6, 1, -13, -4, 9, 0, 3, 1, -18, 4, -16, -5, -9, 1, -5, 6, -4, 2, -2, -9, -12
    0xfdfa0107, 0x30d1401, 0xfaf8f514, 0x9fcf301, 0xee010300, 0xf7fbf004, 0xfc06fb01, 0xf4f7fe02,
    // 12, 9, -12, -4, 7, 11, -5, -3, 17, -15, 11, -2, 4, -7, -4, -17, 12, -1, 3, 14, -2, -2, 0, 2, 1, 2, 2, 0, 5, -1, -2, -3
    0xfcf4090c, 0xfdfb0b07, 0xfe0bf111, 0xeffcf904, 0xe03ff0c, 0x200fefe, 0x20201, 0xfdfeff05,
};
static const uint embedded_decoder2_ResidualBlock_1_body_conv_dw_bias_dwords[8] = {
    // 0.0492, 0.2537, 0.01051, -0.03668, 0.11255, -0.0947, 0.04852, -0.1687, -0.02481, -0.02856, 0.1262, 0.006695, -0.0363, 0.12396, -0.01374, -0.0986
    0x340f2a4c, 0xa8b22162, 0xae102f34, 0xb1662a36, 0xa750a65a, 0x1edb300a, 0x2fefa8a5, 0xae4fa309,
};
static const uint embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 53, -3, -6, -64, -16, -38, -60, 12, -33, 14, -2, 17, 29, 35, -65, -37, 44, -38, -65, 12, 4, 14, 28, 27, -23, -30, 15, 20, 30, 10, -43, 82
    0xc0fafd35, 0xcc4daf0, 0x11fe0edf, 0xdbbf231d, 0xcbfda2c, 0x1b1c0e04, 0x140fe2e9, 0x52d50a1e,
    // 24, -5, 31, 66, 30, 47, -3, 27, -29, -6, -26, -10, 52, -6, 28, 36, 0, -8, -5, 17, 26, -34, -49, -9, 33, -2, -19, -28, 40, 26, 33, -53
    0x421ffb18, 0x1bfd2f1e, 0xf6e6fae3, 0x241cfa34, 0x11fbf800, 0xf7cfde1a, 0xe4edfe21, 0xcb211a28,
    // -20, -1, -10, -37, 18, -51, 5, 24, 47, -39, -14, -17, -3, 15, -48, 20, 39, -38, 14, 44, -24, -14, -92, -18, 44, -52, -24, 78, -73, 0, 34, -13
    0xdbf6ffec, 0x1805cd12, 0xeff2d92f, 0x14d00ffd, 0x2c0eda27, 0xeea4f2e8, 0x4ee8cc2c, 0xf32200b7,
    // 13, -89, 49, -50, 45, -84, 90, 81, 79, 74, 8, 74, 34, -13, -32, -61, 16, -18, 5, -36, 13, 48, 44, -4, -39, -60, -25, 19, -55, -35, -38, -22
    0xce31a70d, 0x515aac2d, 0x4a084a4f, 0xc3e0f322, 0xdc05ee10, 0xfc2c300d, 0x13e7c4d9, 0xeadaddc9,
    // -46, 17, -26, -10, 14, 6, -62, -14, -10, 30, 14, 39, 25, -21, -65, 46, -17, 3, 43, 6, 0, 48, 6, 1, -28, -31, 14, 25, 15, 44, -6, -3
    0xf6e611d2, 0xf2c2060e, 0x270e1ef6, 0x2ebfeb19, 0x62b03ef, 0x1063000, 0x190ee1e4, 0xfdfa2c0f,
    // -17, -19, 5, 74, -43, 12, 30, 9, 32, 52, 43, 55, 20, 5, 7, 70, -57, 8, 12, 60, -12, -3, 32, 45, -25, 67, -68, -11, -46, 6, -21, 7
    0x4a05edef, 0x91e0cd5, 0x372b3420, 0x46070514, 0x3c0c08c7, 0x2d20fdf4, 0xf5bc43e7, 0x7eb06d2,
    // 27, 6, -13, -13, 10, 38, 14, 19, 5, 58, 21, -31, 24, -15, 26, -1, 58, 20, 26, -40, 12, 14, 20, -7, -11, -20, 3, -3, 26, -11, 29, 23
    0xf3f3061b, 0x130e260a, 0xe1153a05, 0xff1af118, 0xd81a143a, 0xf9140e0c, 0xfd03ecf5, 0x171df51a,
    // -18, -2, -23, 0, 9, -19, 10, -1, -8, 71, 24, 54, -49, 11, 26, -8, 65, 1, 21, 15, -39, 26, -3, -18, -7, -22, -42, 76, 34, -15, -24, 35
    0xe9feee, 0xff0aed09, 0x361847f8, 0xf81a0bcf, 0xf150141, 0xeefd1ad9, 0x4cd6eaf9, 0x23e8f122,
    // -40, 26, 44, -11, -23, -11, -36, 92, 12, 5, 35, -80, -35, -8, 36, -32, -7, 0, 12, 7, -11, 21, -42, 78, -3, -9, 31, 39, 32, -30, -38, -12
    0xf52c1ad8, 0x5cdcf5e9, 0xb023050c, 0xe024f8dd, 0x70c00f9, 0x4ed615f5, 0x271ff7fd, 0xf4dae220,
    // 27, -43, 39, -22, 1, 4, -34, 0, 9, -10, 23, 14, 9, -20, -8, 69, 28, -28, 3, -25, -11, 53, 31, 22, 38, 31, -32, -53, -46, 43, 55, -15
    0xea27d51b, 0xde0401, 0xe17f609, 0x45f8ec09, 0xe703e41c, 0x161f35f5, 0xcbe01f26, 0xf1372bd2,
    // -2, -128, -2, -13, -95, -35, -12, -13, -64, -29, -24, -126, 96, 4, -55, -41, 36, 4, 11, 35, 5, 9, 0, -11, 10, 9, 9, -25, -10, 5, -76, -13
    0xf3fe80fe, 0xf3f4dda1, 0x82e8e3c0, 0xd7c90460, 0x230b0424, 0xf5000905, 0xe709090a, 0xf3b405f6,
    // 62, -7, -4, 20, -10, -7, 4, 30, 3, -9, -2, -10, -1, -10, -8, -21, 35, 31, -7, -24, -11, 54, -13, 14, -23, -13, -44, -24, 11, 2, -22, -2
    0x14fcf93e, 0x1e04f9f6, 0xf6fef703, 0xebf8f6ff, 0xe8f91f23, 0xef336f5, 0xe8d4f3e9, 0xfeea020b,
    // 14, -29, 7, 24, -10, -11, -9, -6, -5, -10, -4, -65, -2, 4, 14, 13, 4, 35, 39, 53, -9, -59, -37, 60, -31, -1, 29, -48, -14, -42, 15, -40
    0x1807e30e, 0xfaf7f5f6, 0xbffcf6fb, 0xd0e04fe, 0x35272304, 0x3cdbc5f7, 0xd01dffe1, 0xd80fd6f2,
    // -19, 0, -31, 11, -7, -8, 10, 52, -18, 23, 40, -58, 70, 75, -1, 49, -13, -33, 63, -28, 15, 7, -57, 34, -50, -4, -63, -45, -35, -43, -48, 33
    0xbe100ed, 0x340af8f9, 0xc62817ee, 0x31ff4b46, 0xe43fdff3, 0x22c7070f, 0xd3c1fcce, 0x21d0d5dd,
    // -39, -13, -17, -62, -1, 71, -56, 42, 19, 46, 1, 7, 14, 59, -55, -13, -22, -3, -4, -25, 8, 5, -17, -23, 27, 52, -20, -35, -26, -7, -21, 75
    0xc2eff3d9, 0x2ac847ff, 0x7012e13, 0xf3c93b0e, 0xe7fcfdea, 0xe9ef0508, 0xddec341b, 0x4bebf9e6,
    // 67, -46, 21, 42, -34, 4, 14, 78, 3, -14, -11, -21, -2, -37, 10, -15, 1, 30, -38, 4, 18, 86, 3, 45, 39, 18, 4, 45, -39, -13, -3, -21
    0x2a15d243, 0x4e0e04de, 0xebf5f203, 0xf10adbfe, 0x4da1e01, 0x2d035612, 0x2d041227, 0xebfdf3d9,
};
static const uint embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords[16] = {
    // 0.0983, -0.12335, -0.00877, 0.04706, -0.0073, -0.0872, -0.08453, -0.01884, -0.369, 0.1132, -0.02339, -0.02751, -0.02425, -0.05386, -0.0052, -0.05676
    0xafe52e4b, 0x2a06a07e, 0xad959f7a, 0xa4d3ad69, 0x2f3fb5e7, 0xa70ba5fd, 0xaae5a635, 0xab449d53,
    // -0.1455, 0.1094, 0.001334, 0.201, -0.1774, 0.0828, 0.2073, -0.0724, 0.1292, 0.2585, 0.01223, 0.002575, 0.2455, -0.2769, -0.0852, -0.0625
    0x2f00b0a8, 0x326f1577, 0x2d4db1ad, 0xaca232a2, 0x34233022, 0x19462243, 0xb46e33db, 0xac00ad74,
};
static const uint embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 19, 38, -20, 14, -49, 0, 13, 6, -14, -4, 5, -14, -3, 7, -30, -18, 17, 18, 0, -11, 28, -76, 24, 22, -27, -15, 13, -7, 10, 31, -9, 46
    0xeec2613, 0x60d00cf, 0xf205fcf2, 0xeee207fd, 0xf5001211, 0x1618b41c, 0xf90df1e5, 0x2ef71f0a,
    // -20, -5, 5, 6, 22, 18, 3, 7, 23, 6, 12, -5, 9, -7, -3, 25, 4, -12, -14, 9, 8, -37, -9, 14, -7, 1, -13, 15, 13, 27, -41, 31
    0x605fbec, 0x7031216, 0xfb0c0617, 0x19fdf909, 0x9f2f404, 0xef7db08, 0xff301f9, 0x1fd71b0d,
    // 50, 35, 28, -10, -3, -50, -22, 2, -26, 21, -1, 29, 6, -6, 20, -27, -45, -54, 59, 24, -40, 9, -50, -14, 13, -21, 35, -14, 71, -58, -78, -9
    0xf61c2332, 0x2eacefd, 0x1dff15e6, 0xe514fa06, 0x183bcad3, 0xf2ce09d8, 0xf223eb0d, 0xf7b2c647,
    // 1, 53, -48, 28, -9, 27, -31, 3, 17, -3, 26, -46, -6, -12, -11, 6, 65, 1, -43, -16, -7, -10, 10, -41, 18, -1, 6, 21, 4, -13, -15, 14
    0x1cd03501, 0x3e11bf7, 0xd21afd11, 0x6f5f4fa, 0xf0d50141, 0xd70af6f9, 0x1506ff12, 0xef1f304,
    // -64, -7, -4, -11, 51, -15, -40, 7, 65, -31, -7, 25, 12, -31, -1, 44, 14, -49, 53, 40, 127, -13, 62, -53, 63, -15, -75, -6, -22, -76, 8, 64
    0xf5fcf9c0, 0x7d8f133, 0x19f9e141, 0x2cffe10c, 0x2835cf0e, 0xcb3ef37f, 0xfab5f13f, 0x4008b4ea,
    // 15, 1, -25, -1, -4, -16, 6, 2, 16, 7, 5, -25, -19, -19, -8, 12, -10, 7, 2, -8, -12, -3, -9, 13, 34, -12, -2, 4, 20, -11, -15, -12
    0xffe7010f, 0x206f0fc, 0xe7050710, 0xcf8eded, 0xf80207f6, 0xdf7fdf4, 0x4fef422, 0xf4f1f514,
    // 21, -1, -14, 18, -11, -47, 29, 21, -8, 7, 12, -9, -26, 8, -15, 11, 16, 19, -1, -33, 2, 17, 23, 5, 15, -4, 7, 5, -3, 0, -12, -9
    0x12f2ff15, 0x151dd1f5, 0xf70c07f8, 0xbf108e6, 0xdfff1310, 0x5171102, 0x507fc0f, 0xf7f400fd,
    // 47, -47, -3, -14, 15, -4, -30, -28, -27, 36, -11, -1, 59, 16, 26, -40, -77, 78, 4, -55, 12, -34, -43, -30, -25, 56, 38, -8, 24, 9, -21, 48
    0xf2fdd12f, 0xe4e2fc0f, 0xfff524e5, 0xd81a103b, 0xc9044eb3, 0xe2d5de0c, 0xf82638e7, 0x30eb0918,
    // -24, 2, -10, 5, -20, -10, -46, 46, 4, 48, 50, -15, -56, -51, -26, -54, -92, 21, -3, 27, -2, 27, -24, -20, -65, -25, -16, 23, 11, -21, -5, 86
    0x5f602e8, 0x2ed2f6ec, 0xf1323004, 0xcae6cdc8, 0x1bfd15a4, 0xece81bfe, 0x17f0e7bf, 0x56fbeb0b,
    // 8, 25, 28, -18, -23, 92, 35, -28, 52, -9, -19, 17, 25, -59, -21, -76, -25, -21, 42, -12, -1, 27, 24, 18, 6, -21, 23, -13, -31, -14, 5, -72
    0xee1c1908, 0xe4235ce9, 0x11edf734, 0xb4ebc519, 0xf42aebe7, 0x12181bff, 0xf317eb06, 0xb805f2e1,
    // 25, -12, -28, 38, -12, 50, -49, -3, -40, 45, 23, -19, 14, 0, -25, -47, -21, -35, -34, -13, 12, 44, -17, 55, -17, 45, 15, 35, 19, -40, -42, 19
    0x26e4f419, 0xfdcf32f4, 0xed172dd8, 0xd1e7000e, 0xf3deddeb, 0x37ef2c0c, 0x230f2def, 0x13d6d813,
    // -7, -27, 67, -53, -16, -80, 22, -49, 47, 2, -75, 68, -32, 56, 26, -49, 10, 10, 42, -17, 4, 3, -38, 9, -51, 48, 12, -63, 5, 2, -14, 85
    0xcb43e5f9, 0xcf16b0f0, 0x44b5022f, 0xcf1a38e0, 0xef2a0a0a, 0x9da0304, 0xc10c30cd, 0x55f20205,
    // 11, 19, -14, 11, -46, 18, 5, -11, -14, -34, -15, -7, -59, 17, -15, -23, 50, 17, -4, -15, 24, -3, 54, -14, -29, 13, -9, -13, -27, 43, 26, 12
    0xbf2130b, 0xf50512d2, 0xf9f1def2, 0xe9f111c5, 0xf1fc1132, 0xf236fd18, 0xf3f70de3, 0xc1a2be5,
    // 8, 2, -4, -1, 0, -6, -5, -3, -6, 3, -3, -9, -6, 9, -5, -5, -13, -5, 0, 2, -4, 6, 5, -6, -1, 1, 2, -3, 2, -2, 3, -6
    0xfffc0208, 0xfdfbfa00, 0xf7fd03fa, 0xfbfb09fa, 0x200fbf3, 0xfa0506fc, 0xfd0201ff, 0xfa03fe02,
    // 10, 83, 62, -49, 31, -9, -90, -61, -21, 19, -51, 51, -58, 33, 72, 25, 76, 30, 69, -25, -35, 1, -21, -37, 17, -30, -17, -45, 1, 45, 16, -11
    0xcf3e530a, 0xc3a6f71f, 0x33cd13eb, 0x194821c6, 0xe7451e4c, 0xdbeb01dd, 0xd3efe211, 0xf5102d01,
    // 9, 15, 42, -26, 12, 40, 57, -7, -5, -24, -4, 9, 10, -7, 11, 15, 6, 29, 27, -11, -6, -37, 55, 36, -41, -60, 9, -13, 17, -43, -8, 42
    0xe62a0f09, 0xf939280c, 0x9fce8fb, 0xf0bf90a, 0xf51b1d06, 0x2437dbfa, 0xf309c4d7, 0x2af8d511,
};
static const uint embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords[8] = {
    // -0.0805, -0.06335, -0.0292, 0.01843, -0.0282, 0.0863, 0.001086, -0.04416, 0.2883, 0.1177, -0.1633, 0.0905, -0.02008, 0.04602, 0.1542, 0.1022
    0xac0ead27, 0x24b8a77a, 0x2d86a738, 0xa9a71473, 0x2f88349d, 0x2dcbb13a, 0x29e4a524, 0x2e8a30ef,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass12(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(3840, 2160, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(3840, 2160, 16), // threadGroupSliceSize
        uint3(3840, 2160, 16), // storageSize
        uint3(16, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        199065600, // threadGroupStorageByteOffset
        0.032144080847501755, storage_fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.007720713969320059, storage_embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_1_body_conv_dw_bias = { embedded_decoder2_ResidualBlock_1_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_1_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_1_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.007842891849577427, storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias = { embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0077861035242676735, storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias = { embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias };
    
    // fused_quantized_NHWC_/decoder2/ResidualBlock_2/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_24 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_24 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 16);
    const uint3 groupSize_slice_24 = uint3(64, 1, 16);
    const uint3 storageSize_slice_24 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_24 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_24 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_24 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_24 = dot(groupStart_slice_24, tensorByteStrides_slice_24);
    const float quantizationScale_slice_24 = 0.06308986991643906;
    const RWBufferStorage storage_slice_24 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_24 = { logicalSize_slice_24, groupStart_slice_24, groupSize_slice_24, storageSize_slice_24, tensorByteStrides_slice_24, paddingBegin_slice_24, paddingEnd_slice_24, threadGroupByteOffsetInTensor_slice_24 + 0, quantizationScale_slice_24, storage_slice_24 };
    // ConvNextBlock (16, 2160, 3840), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,) -> (16, 2160, 3840)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    ConvNextBlock(20.290662078337462, 0.04928375408053398, 17.725163270837935, 0.05641696974635124, fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_1_body_conv_dw_bias, embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias, embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias, slice_24, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_12
#ifdef MLSR_PASS_12_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass12_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/decoder2/ResidualBlock_2/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_25 = uint3(3840, 2160, 16);
    const int3 groupStart_slice_25 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_25 = uint3(32, 1, 16);
    const uint3 storageSize_slice_25 = uint3(3840, 2160, 16);
    const uint3 tensorByteStrides_slice_25 = uint3(16, 61440, 1);
    const uint3 paddingBegin_slice_25 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_25 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_25 = dot(groupStart_slice_25, tensorByteStrides_slice_25);
    const float quantizationScale_slice_25 = 0.06308986991643906;
    const RWBufferStorage storage_slice_25 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_25 = { logicalSize_slice_25, groupStart_slice_25, groupSize_slice_25, storageSize_slice_25, tensorByteStrides_slice_25, paddingBegin_slice_25, paddingEnd_slice_25, threadGroupByteOffsetInTensor_slice_25 + 0, quantizationScale_slice_25, storage_slice_25 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_25, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_12_POST


#ifdef MLSR_PASS_13
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/float16_NHWC/Fused/CNB_CT2D.hlsli"

static const uint embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 9, -6, -1, 7, -2, -10, 3, -9, 6, 2, 0, -3, -4, 3, -4, -9, 37, -5, 13, -31, -11, -7, -41, -21, -4, 0, 14, 4, 13, -14, -14, -31
    0x7fffa09, 0xf703f6fe, 0xfd000206, 0xf7fc03fc, 0xe10dfb25, 0xebd7f9f5, 0x40e00fc, 0xe1f2f20d,
    // 5, -6, 3, 10, 1, -6, -7, -7, -3, -4, 6, -1, -5, 8, -8, 2, 13, 20, -8, 21, 4, 46, -2, -5, 9, 13, -16, 6, -14, -26, 3, -7
    0xa03fa05, 0xf9f9fa01, 0xff06fcfd, 0x2f808fb, 0x15f8140d, 0xfbfe2e04, 0x6f00d09, 0xf903e6f2,
    // 47, 26, -62, 14, -39, 95, 39, 4, -7, -14, 40, 39, 53, -37, -27, 18, -20, 3, -2, 21, 6, 11, 35, -9, 15, 7, 9, 2, -3, 15, 2, 11
    0xec21a2f, 0x4275fd9, 0x2728f2f9, 0x12e5db35, 0x15fe03ec, 0xf7230b06, 0x209070f, 0xb020ffd,
    // 8, -2, 3, 0, -5, -9, -3, -7, 6, 0, -3, -2, 5, -2, -1, -6, 10, -14, 3, -19, -11, -13, -3, -22, 11, -5, 11, -7, 19, 19, -8, -21
    0x3fe08, 0xf9fdf7fb, 0xfefd0006, 0xfafffe05, 0xed03f20a, 0xeafdf3f5, 0xf90bfb0b, 0xebf81313,
    // -2, 0, 1, 6, -1, -6, 1, 0, 1, -1, 0, -1, 0, 8, -2, 1, -11, -16, -3, 17, -4, 5, 19, -1, 13, -19, -2, -20, 2, -1, -21, -15
    0x60100fe, 0x1faff, 0xff00ff01, 0x1fe0800, 0x11fdf0f5, 0xff1305fc, 0xecfeed0d, 0xf1ebff02,
    // -13, -5, -28, 17, -12, 6, 45, 20, 23, -18, -8, -26, 4, -13, -15, -13, 13, -1, 6, 8, 0, 3, -17, -16, 1, -17, -8, -18, -2, -10, -14, -7
    0x11e4fbf3, 0x142d06f4, 0xe6f8ee17, 0xf3f1f304, 0x806ff0d, 0xf0ef0300, 0xeef8ef01, 0xf9f2f6fe,
    // -10, -2, 5, -2, -5, 1, -10, -21, -4, -10, -6, -27, -5, -1, -23, -37, 16, 6, -76, -25, -77, 67, -51, -19, 38, 38, -87, -80, 46, -6, -82, -37
    0xfe05fef6, 0xebf601fb, 0xe5faf6fc, 0xdbe9fffb, 0xe7b40610, 0xedcd43b3, 0xb0a92626, 0xdbaefa2e,
    // -13, 1, -11, 27, -12, -22, 21, 16, 5, -23, -19, -29, -1, -22, -28, -16, 20, -12, -4, 8, -4, 3, 8, 8, -6, -16, 4, -18, -6, -27, -9, -1
    0x1bf501f3, 0x1015eaf4, 0xe3ede905, 0xf0e4eaff, 0x8fcf414, 0x80803fc, 0xee04f0fa, 0xfff7e5fa,
    // 2, 3, 5, 12, -6, -14, 0, -10, 9, -5, -7, -21, -5, -10, -17, -30, -6, -14, -1, 17, -6, -3, 15, -7, 13, -12, 0, -16, 2, 0, -20, -18
    0xc050302, 0xf600f2fa, 0xebf9fb09, 0xe2eff6fb, 0x11fff2fa, 0xf90ffdfa, 0xf000f40d, 0xeeec0002,
    // -3, 3, 0, -3, 1, 13, 0, 2, -1, 2, 1, 3, 4, -1, 5, 4, -20, -5, 0, 1, 1, 10, 13, 2, 1, 6, 9, 5, 14, 14, 7, 13
    0xfd0003fd, 0x2000d01, 0x30102ff, 0x405ff04, 0x100fbec, 0x20d0a01, 0x5090601, 0xd070e0e,
    // -7, 4, 3, 4, 2, 3, 7, -4, 2, 3, 1, 4, 1, 8, 3, 5, 8, -5, 1, -12, -2, -20, -4, -3, -3, 2, 1, -4, 2, 5, -1, -10
    0x40304f9, 0xfc070302, 0x4010302, 0x5030801, 0xf401fb08, 0xfdfcecfe, 0xfc0102fd, 0xf6ff0502,
    // 26, 0, -9, -127, 6, -22, -39, 9, -5, 1, 26, -11, 28, 2, 19, -27, 3, 0, 1, -17, 0, -20, -4, -9, -2, 3, 11, 2, -8, 4, 8, -5
    0x81f7001a, 0x9d9ea06, 0xf51a01fb, 0xe513021c, 0xef010003, 0xf7fcec00, 0x20b03fe, 0xfb0804f8,
    // -5, 3, -2, -6, 1, 21, 0, 2, -4, 4, 2, 5, -1, -4, 6, 2, 11, 4, -1, 0, 0, 30, -9, 2, -3, 8, -3, 5, -5, -10, 5, -7
    0xfafe03fb, 0x2001501, 0x50204fc, 0x206fcff, 0xff040b, 0x2f71e00, 0x5fd08fd, 0xf905f6fb,
    // -5, -1, -1, -1, 1, 5, -5, -1, -3, 1, 1, 3, -2, -3, 1, 1, -4, -3, 3, -9, -1, -2, 4, -6, 3, -5, 1, -1, 6, 7, 0, -3
    0xfffffffb, 0xfffb0501, 0x30101fd, 0x101fdfe, 0xf703fdfc, 0xfa04feff, 0xff01fb03, 0xfd000706,
    // -14, -11, 2, 9, 3, 3, 8, -5, 0, 7, 4, 5, -4, 12, 0, -3, 2, 6, 3, 4, 0, -6, 13, -6, 2, -4, 0, -3, 1, -6, 1, 1
    0x902f5f2, 0xfb080303, 0x5040700, 0xfd000cfc, 0x4030602, 0xfa0dfa00, 0xfd00fc02, 0x101fa01,
    // 9, -11, -1, 2, -5, -15, -15, 0, -4, 0, -7, -4, -4, 2, -7, -18, 34, -20, 47, 17, -40, 39, 65, -13, -73, 2, -4, 5, 40, -7, 9, -49
    0x2fff509, 0xf1f1fb, 0xfcf900fc, 0xeef902fc, 0x112fec22, 0xf34127d8, 0x5fc02b7, 0xcf09f928,
    // 31, -1, 19, -15, 1, -4, -54, -27, -19, -9, 12, -3, -19, -8, -11, -19, -4, 6, -2, 1, 0, 3, -1, -7, 1, 4, -3, 1, -7, 5, -3, -9
    0xf113ff1f, 0xe5cafc01, 0xfd0cf7ed, 0xedf5f8ed, 0x1fe06fc, 0xf9ff0300, 0x1fd0401, 0xf7fd05f9,
    // 28, -1, -16, 1, -6, 61, -6, 11, -9, 3, 7, 10, -18, -32, 6, -11, -5, -3, -1, -4, 1, 0, 5, -7, -2, -1, 2, -1, 2, 0, -3, -3
    0x1f0ff1c, 0xbfa3dfa, 0xa0703f7, 0xf506e0ee, 0xfcfffdfb, 0xf9050001, 0xff02fffe, 0xfdfd0002,
    // -2, 5, 3, -7, 5, -13, -13, 3, -12, -5, -3, -7, -6, -12, 1, 7, 12, 4, 22, -31, 11, -12, -55, -18, -31, -26, -1, -9, -11, -16, -1, 12
    0xf90305fe, 0x3f3f305, 0xf9fdfbf4, 0x701f4fa, 0xe116040c, 0xeec9f40b, 0xf7ffe6e1, 0xcfff0f5,
    // -5, -1, 1, -11, 5, 0, -12, 3, -14, -2, 0, 3, -8, 0, 5, 5, -11, 1, -7, -5, 2, 48, 4, 20, -23, 4, -7, 6, -21, -18, 11, -4
    0xf501fffb, 0x3f40005, 0x300fef2, 0x50500f8, 0xfbf901f5, 0x14043002, 0x6f904e9, 0xfc0beeeb,
    // -54, -7, -57, 22, -54, 4, 41, 95, -40, -10, -7, -6, -17, -3, 99, -41, -33, 0, -5, -13, 7, 10, -5, 10, -23, 0, 5, 6, -11, 5, 3, 0
    0x16c7f9ca, 0x5f2904ca, 0xfaf9f6d8, 0xd763fdef, 0xf3fb00df, 0xafb0a07, 0x60500e9, 0x305f5,
    // -17, -1, 8, -12, 4, -10, -11, 0, -12, 4, -3, -3, -1, 17, 6, -3, -9, -19, 8, -21, 4, -39, -22, -1, -15, -8, -10, -17, 1, 13, -3, -9
    0xf408ffef, 0xf5f604, 0xfdfd04f4, 0xfd0611ff, 0xeb08edf7, 0xffead904, 0xeff6f8f1, 0xf7fd0d01,
    // -8, 5, 5, -6, 3, -13, -7, 4, -8, -4, -2, -4, -5, -1, 3, 3, -5, 1, 0, 7, -2, -4, 14, -3, 9, -7, 1, -11, 4, 0, -7, -2
    0xfa0505f8, 0x4f9f303, 0xfcfefcf8, 0x303fffb, 0x70001fb, 0xfd0efcfe, 0xf501f909, 0xfef90004,
    // -2, -2, -5, 16, -3, -5, 3, 3, 7, -13, -5, -14, 3, 5, -15, -6, -4, 4, -4, 17, -2, -1, 17, 2, 10, -8, -5, -9, 4, -7, -7, 1
    0x10fbfefe, 0x303fbfd, 0xf2fbf307, 0xfaf10503, 0x11fc04fc, 0x211fffe, 0xf7fbf80a, 0x1f9f904,
    // 7, 1, -2, 20, -1, 14, 2, 0, 0, -6, -6, -13, -4, -8, -10, -7, 35, -24, -47, 53, 45, -47, 84, -35, 24, -57, 5, 0, -22, 27, -17, -109
    0x14fe0107, 0x20eff, 0xf3fafa00, 0xf9f6f8fc, 0x35d1e823, 0xdd54d12d, 0x5c718, 0x93ef1bea,
    // 0, -3, 10, 17, -1, -10, -5, -12, 7, -14, -5, -9, 6, 13, -23, -5, 4, 1, 0, 10, -1, -6, 8, -6, 4, -5, 1, -9, -2, -8, -8, 0
    0x110afd00, 0xf4fbf6ff, 0xf7fbf207, 0xfbe90d06, 0xa000104, 0xfa08faff, 0xf701fb04, 0xf8f8fe,
    // 17, -2, -2, 15, -4, 17, 12, 9, 3, -11, 1, -8, -1, -16, -3, 2, -5, 4, 0, 11, -2, -3, 18, -5, 9, -3, -3, -6, 2, -2, -8, -3
    0xffefe11, 0x90c11fc, 0xf801f503, 0x2fdf0ff, 0xb0004fb, 0xfb12fdfe, 0xfafdfd09, 0xfdf8fe02,
    // 3, -7, 6, -5, -2, -28, -3, -6, 1, 4, 4, 0, 6, 6, -1, -5, 7, 1, 19, 1, -1, -30, 4, -17, 10, 15, 7, -2, 2, 17, -2, -4
    0xfb06f903, 0xfafde4fe, 0x40401, 0xfbff0606, 0x1130107, 0xef04e2ff, 0xfe070f0a, 0xfcfe1102,
    // 22, 3, 14, 3, -2, -21, -13, -18, 7, 1, -4, -5, 6, -1, -4, -9, 11, -14, 10, -3, -7, -28, 10, -8, 7, -8, 19, 1, 21, 13, -7, 6
    0x30e0316, 0xeef3ebfe, 0xfbfc0107, 0xf7fcff06, 0xfd0af20b, 0xf80ae4f9, 0x113f807, 0x6f90d15,
    // 7, -4, 38, 7, -55, 6, 39, -10, 81, -6, 20, -2, -18, -13, 51, -22, 22, -7, 17, 3, -4, -26, -8, -19, 14, 2, -11, 1, 21, -6, 0, -3
    0x726fc07, 0xf62706c9, 0xfe14fa51, 0xea33f3ee, 0x311f916, 0xedf8e6fc, 0x1f5020e, 0xfd00fa15,
    // 7, -7, 5, -7, -3, -17, 3, -3, 0, -6, 4, -7, 8, 9, -4, -1, -10, -7, 1, -2, -3, -14, -5, -14, 16, 3, 10, 9, 13, 15, -1, -9
    0xf905f907, 0xfd03effd, 0xf904fa00, 0xfffc0908, 0xfe01f9f6, 0xf2fbf2fd, 0x90a0310, 0xf7ff0f0d,
    // 4, -3, 12, 3, -1, -24, -8, -6, 7, 1, -3, -3, 12, 4, -3, 1, -4, 4, -5, 10, -2, 20, 8, 1, 8, 4, 0, 5, 2, -1, 0, 2
    0x30cfd04, 0xfaf8e8ff, 0xfdfd0107, 0x1fd040c, 0xafb04fc, 0x10814fe, 0x5000408, 0x200ff02,
    // -21, 2, -10, 32, 1, 5, 33, 8, 16, 8, 0, 2, 7, 4, 5, 19, 0, 3, -4, 14, 1, 23, 9, -2, 5, 5, -4, 2, 1, 3, 5, 5
    0x20f602eb, 0x8210501, 0x2000810, 0x13050407, 0xefc0300, 0xfe091701, 0x2fc0505, 0x5050301,
    // 5, 1, -5, 6, -2, -2, 22, -3, 10, -2, 2, -2, 7, 6, 1, 4, 6, -53, -33, 20, -75, -97, 83, 36, -5, -45, -21, 33, -9, 8, -25, 60
    0x6fb0105, 0xfd16fefe, 0xfe02fe0a, 0x4010607, 0x14dfcb06, 0x24539fb5, 0x21ebd3fb, 0x3ce708f7,
    // 2, 8, -2, 14, -2, -4, 15, 3, 3, -3, -10, 2, 9, -10, 0, 14, 0, 3, -5, 8, -1, 26, -3, 2, 1, 3, -3, 5, -4, -4, 0, -2
    0xefe0802, 0x30ffcfe, 0x2f6fd03, 0xe00f609, 0x8fb0300, 0x2fd1aff, 0x5fd0301, 0xfe00fcfc,
    // 7, 4, -8, 27, 4, 44, 0, 5, 7, 14, -12, 8, -5, -5, 2, 3, 3, 3, -5, 13, -2, 22, 6, -3, 8, 4, -3, 3, -2, -5, -3, -3
    0x1bf80407, 0x5002c04, 0x8f40e07, 0x302fbfb, 0xdfb0303, 0xfd0616fe, 0x3fd0408, 0xfdfdfbfe,
    // -6, -4, -9, 15, -1, 11, 13, 8, 5, -3, 0, -5, -3, -9, -4, 1, 5, 4, -5, 13, -2, 5, 12, -1, 6, -13, -6, -14, -7, 9, -8, 4
    0xff7fcfa, 0x80d0bff, 0xfb00fd05, 0x1fcf7fd, 0xdfb0405, 0xff0c05fe, 0xf2faf306, 0x4f809f9,
    // 0, 11, -14, 14, -4, 2, 24, 10, 7, -5, -6, -10, -4, -12, -2, -4, 18, -8, 1, 12, -3, 31, 18, 19, -4, -10, 12, -9, 11, -17, -4, 11
    0xef20b00, 0xa1802fc, 0xf6fafb07, 0xfcfef4fc, 0xc01f812, 0x13121ffd, 0xf70cf6fc, 0xbfcef0b,
    // 13, -8, 37, -14, 59, 51, 95, 25, 5, 32, 47, -43, -20, 43, -26, 24, -1, -2, -15, 7, -6, 5, 20, 9, 10, -7, -5, -5, 1, 3, -10, -9
    0xf225f80d, 0x195f333b, 0xd52f2005, 0x18e62bec, 0x7f1feff, 0x91405fa, 0xfbfbf90a, 0xf7f60301,
    // 4, 3, -5, 17, 2, 8, 7, 3, 5, -6, -3, -7, -6, -12, -9, 0, 3, 1, -4, 3, -2, 5, 17, -1, 2, -14, 3, -10, 3, 3, -7, -2
    0x11fb0304, 0x3070802, 0xf9fdfa05, 0xf7f4fa, 0x3fc0103, 0xff1105fe, 0xf603f202, 0xfef90303,
    // 1, 3, -2, 11, -2, -1, 6, 4, 4, -5, -5, -8, -3, -6, -5, -3, -3, -1, 2, 2, 1, -11, -5, 0, -2, 0, -2, 2, -2, 21, -3, -2
    0xbfe0301, 0x406fffe, 0xf8fbfb04, 0xfdfbfafd, 0x202fffd, 0xfbf501, 0x2fe00fe, 0xfefd15fe,
    // -10, -12, 7, 2, 6, -2, -11, 3, -13, -6, 6, -3, -7, 19, -7, 4, 7, -4, -4, 0, -4, 2, 1, 3, -4, -6, 4, -6, -4, 0, -5, -1
    0x207f4f6, 0x3f5fe06, 0xfd06faf3, 0x4f913f9, 0xfcfc07, 0x30102fc, 0xfa04fafc, 0xfffb00fc,
    // -11, -12, 4, -10, -1, -28, -5, -1, 12, -10, -8, -8, 9, 22, -2, 0, -72, -40, 90, -102, 5, 11, 64, 29, 21, -109, -26, 10, 11, -1, -52, -11
    0xf604f4f5, 0xfffbe4ff, 0xf8f8f60c, 0xfe1609, 0x9a5ad8b8, 0x1d400b05, 0xae69315, 0xf5ccff0b,
    // 7, -7, 10, -22, 6, 10, -8, -11, -2, 0, 18, -6, -17, 18, -3, -7, -1, 3, 3, -4, -2, -30, -10, -6, 8, -8, -6, -6, 8, 16, -7, -7
    0xea0af907, 0xf5f80a06, 0xfa1200fe, 0xf9fd12ef, 0xfc0303ff, 0xfaf6e2fe, 0xfafaf808, 0xf9f91008,
    // -10, 6, 17, -1, -6, -52, -1, 16, 3, -19, -12, -14, 9, 4, -6, 10, 0, -5, 1, -14, 0, -17, -10, 0, -7, -7, 0, -8, -1, 8, 1, -6
    0xff1106f6, 0x10ffccfa, 0xf2f4ed03, 0xafa0409, 0xf201fb00, 0xf6ef00, 0xf800f9f9, 0xfa0108ff,
    // 12, -2, 6, -9, -1, -6, -13, -4, 2, 2, 3, 7, 10, 6, 2, 5, -14, -11, 0, 4, -1, -2, 6, 13, 12, 14, -1, 14, 26, -8, 11, 13
    0xf706fe0c, 0xfcf3faff, 0x7030202, 0x502060a, 0x400f5f2, 0xd06feff, 0xeff0e0c, 0xd0bf81a,
    // 18, -6, 5, -15, -4, -22, -16, 6, 0, 6, -2, 3, 7, -3, 1, -5, -8, 2, 5, -24, 2, -52, 4, -20, 25, -2, -12, -4, 19, 9, 6, 0
    0xf105fa12, 0x6f0eafc, 0x3fe0600, 0xfb01fd07, 0xe80502f8, 0xec04cc02, 0xfcf4fe19, 0x60913,
    // -1, -32, -75, -11, 67, -5, 93, 2, 6, 67, -68, -2, 77, 31, 13, -26, 16, -1, 13, -20, 1, -39, -10, -1, 17, 9, -3, -7, 5, -7, 18, 1
    0xf5b5e0ff, 0x25dfb43, 0xfebc4306, 0xe60d1f4d, 0xec0dff10, 0xfff6d901, 0xf9fd0911, 0x112f905,
    // 1, 1, 4, -12, -3, -15, -10, -4, 6, 2, -1, 7, 10, 0, 3, -2, -6, 1, 13, 13, 3, 11, 0, 10, 4, 15, -10, 6, 8, 3, 9, 11
    0xf4040101, 0xfcf6f1fd, 0x7ff0206, 0xfe03000a, 0xd0d01fa, 0xa000b03, 0x6f60f04, 0xb090308,
    // 10, -2, 5, -13, 0, -9, -16, 1, -5, -1, 2, 6, 8, -5, 2, 3, -12, 1, 5, 0, 2, -19, -8, -4, -5, 5, 2, 1, -2, 8, -3, -4
    0xf305fe0a, 0x1f0f700, 0x602fffb, 0x302fb08, 0x501f4, 0xfcf8ed02, 0x10205fb, 0xfcfd08fe,
    // -11, -5, 15, 1, 9, -3, -26, -16, -13, 6, 6, 10, -18, 6, -12, -5, -17, -10, 10, -7, 3, -8, -17, -8, -4, 8, 8, 9, 3, 20, -3, -4
    0x10ffbf5, 0xf0e6fd09, 0xa0606f3, 0xfbf406ee, 0xf90af6ef, 0xf8eff803, 0x90808fc, 0xfcfd1403,
    // 7, -10, 0, -2, 1, 1, 3, 7, -21, 0, 13, 5, -15, 1, -3, -2, 86, 72, -30, -23, 6, -46, 29, 13, -34, 71, -59, 50, -65, -57, -41, -34
    0xfe00f607, 0x7030101, 0x50d00eb, 0xfefd01f1, 0xe9e24856, 0xd1dd206, 0x32c547de, 0xded7c7bf,
    // 4, -5, 9, -11, -1, 9, -35, -1, -14, 7, -3, 13, 5, 0, -8, -15, -14, -7, 5, -12, 0, -16, -2, -4, -8, 6, 6, 1, -2, 6, 4, -5
    0xf509fb04, 0xffdd09ff, 0xdfd07f2, 0xf1f80005, 0xf405f9f2, 0xfcfef000, 0x10606f8, 0xfb0406fe,
    // 2, 1, 2, 0, 4, 25, -26, -7, -8, 16, -1, 13, -9, -20, -2, -18, -5, -10, 10, 3, 0, -7, -9, -6, 5, 4, 1, -1, 6, 1, -4, -4
    0x20102, 0xf9e61904, 0xdff10f8, 0xeefeecf7, 0x30af6fb, 0xfaf7f900, 0xff010405, 0xfcfc0106,
    // 4, -1, 2, -3, 0, 13, 0, -1, -1, 0, 0, 0, -1, -9, 2, 1, 5, 5, -10, -1, -4, 3, -1, 16, -4, -2, -7, -5, 8, -24, 8, 2
    0xfd02ff04, 0xff000d00, 0xff, 0x102f7ff, 0xfff60505, 0x10ff03fc, 0xfbf9fefc, 0x208e808,
    // -2, -4, 2, 4, 2, -9, 3, 0, -5, -4, 1, -3, -6, -6, -3, 4, -5, 5, -2, -2, 6, -14, -22, -10, 3, 2, -21, -7, -11, -10, 0, -9
    0x402fcfe, 0x3f702, 0xfd01fcfb, 0x4fdfafa, 0xfefe05fb, 0xf6eaf206, 0xf9eb0203, 0xf700f6f5,
    // 42, 21, 29, 1, -32, 69, 28, 3, 39, 5, 8, 2, -66, -16, -8, -38, 5, 7, 9, -10, 3, -15, 2, -10, -1, -4, 13, -10, -15, -4, 3, 4
    0x11d152a, 0x31c45e0, 0x2080527, 0xdaf8f0be, 0xf6090705, 0xf602f103, 0xf60dfcff, 0x403fcf1,
    // 5, -3, 1, -1, 1, 5, -6, -4, 1, -1, -1, 0, 0, -11, 0, 1, 9, 5, 7, 8, 0, 5, 4, 11, -5, -3, -4, -5, 1, -11, -1, 13
    0xff01fd05, 0xfcfa0501, 0xffff01, 0x100f500, 0x8070509, 0xb040500, 0xfbfcfdfb, 0xdfff501,
    // -1, -2, -6, -11, 1, 5, 1, -4, -9, -3, 5, 2, -6, -3, 1, 0, -4, 1, 0, 3, 1, -8, 2, 0, 1, 4, -3, 1, 0, 3, 3, 2
    0xf5fafeff, 0xfc010501, 0x205fdf7, 0x1fdfa, 0x30001fc, 0x2f801, 0x1fd0401, 0x2030300,
    // 11, -15, 19, -6, 3, -25, -14, -22, 4, 4, 7, 6, -3, 12, -7, -6, -4, -3, -2, 2, -1, -4, 6, 7, 0, 1, 0, 0, 3, -2, 2, 5
    0xfa13f10b, 0xeaf2e703, 0x6070404, 0xfaf90cfd, 0x2fefdfc, 0x706fcff, 0x100, 0x502fe03,
    // 16, 17, -2, 5, -5, 21, 16, 9, 9, -1, -7, 6, -6, -25, 14, 4, 1, -5, 17, 46, 17, -128, -29, 47, 16, 29, -12, -37, 9, 16, -23, -36
    0x5fe1110, 0x91015fb, 0x6f9ff09, 0x40ee7fa, 0x2e11fb01, 0x2fe38011, 0xdbf41d10, 0xdce91009,
    // -15, -9, -11, 8, 2, 14, 26, 13, 4, 7, 1, 2, 9, 4, 13, 18, 0, 6, 0, 6, -1, 0, -2, 0, 3, 4, -6, 3, -5, -11, 2, -2
    0x8f5f7f1, 0xd1a0e02, 0x2010704, 0x120d0409, 0x6000600, 0xfe00ff, 0x3fa0403, 0xfe02f5fb,
    // 6, -15, 1, -11, 1, 4, -15, -11, -4, 4, 0, 0, 6, 14, -6, -9, 4, 6, 0, 4, 0, 10, 2, 7, -3, 0, -4, 1, -3, -2, 3, 2
    0xf501f106, 0xf5f10401, 0x4fc, 0xf7fa0e06, 0x4000604, 0x7020a00, 0x1fc00fd, 0x203fefd,
    // 9, 4, 3, -11, 1, 10, -1, -1, -2, -4, 0, 2, 2, -18, 10, 8, 16, 8, -15, -31, -6, 17, -3, 17, -6, 5, -12, 8, 7, -18, 20, -6
    0xf5030409, 0xffff0a01, 0x200fcfe, 0x80aee02, 0xe1f10810, 0x11fd11fa, 0x8f405fa, 0xfa14ee07,
    // -5, 6, -7, -21, 0, 9, 5, 8, 2, 9, -3, 9, 5, -5, 18, 2, -7, 14, -1, -9, 8, 38, -14, 6, -19, 12, 0, 16, -8, -6, 11, 5
    0xebf906fb, 0x8050900, 0x9fd0902, 0x212fb05, 0xf7ff0ef9, 0x6f22608, 0x10000ced, 0x50bfaf8,
    // 26, -38, 33, -93, 20, -52, 17, -62, 6, 29, -25, 30, 22, 39, -6, -30, -24, 0, 8, 14, 9, 11, -7, 1, -7, 4, -11, 9, 7, 8, 3, 18
    0xa321da1a, 0xc211cc14, 0x1ee71d06, 0xe2fa2716, 0xe0800e8, 0x1f90b09, 0x9f504f9, 0x12030807,
    // -4, -1, 4, -7, 3, 12, -2, 1, -3, 7, 0, 7, 3, -4, 11, 6, 3, -4, 1, -22, -4, -31, 15, 7, 1, -5, 16, 5, 9, -3, 16, 9
    0xf904fffc, 0x1fe0c03, 0x70007fd, 0x60bfc03, 0xea01fc03, 0x70fe1fc, 0x510fb01, 0x910fd09,
    // -4, 8, 2, -7, 2, -7, 0, 3, 0, 4, -2, 5, 4, -1, 10, 12, -9, 6, 2, -5, 2, 7, -4, 0, -4, -1, -1, -3, 3, 12, 1, 2
    0xf90208fc, 0x300f902, 0x5fe0400, 0xc0aff04, 0xfb0206f7, 0xfc0702, 0xfdfffffc, 0x2010c03,
    // -31, -2, -9, 6, 6, 3, 9, 11, -12, -10, 1, -4, -3, 17, 2, 13, -4, 4, 7, 4, 4, -7, -7, -7, -7, -10, -1, -6, -6, 8, -7, 6
    0x6f7fee1, 0xb090306, 0xfc01f6f4, 0xd0211fd, 0x40704fc, 0xf9f9f904, 0xfafff6f9, 0x6f908fa,
    // -24, -6, -1, 7, 6, -2, -5, -6, -3, 5, -6, -1, -4, 20, -7, -8, -16, -7, -12, 9, -22, -112, 88, -26, -10, 11, 22, -25, 7, 39, -9, 69
    0x7fffae8, 0xfafbfe06, 0xfffa05fd, 0xf8f914fc, 0x9f4f9f0, 0xe65890ea, 0xe7160bf6, 0x45f72707,
    // -23, 6, 0, -1, 4, 2, 17, -10, 0, 4, 16, 3, -10, 22, 0, 1, 2, -1, 2, -1, 0, -3, 7, 3, -6, -1, 4, -4, 0, -1, 1, 4
    0xff0006e9, 0xf6110204, 0x3100400, 0x10016f6, 0xff02ff02, 0x307fd00, 0xfc04fffa, 0x401ff00,
    // -11, 0, 2, -1, 1, -22, 9, 4, -9, -10, 8, -5, -6, 17, -2, 7, -6, 8, -2, -9, 1, -9, 3, -2, -7, -3, 2, 1, -5, 8, 1, 3
    0xff0200f5, 0x409ea01, 0xfb08f6f7, 0x7fe11fa, 0xf7fe08fa, 0xfe03f701, 0x102fdf9, 0x30108fb,
};
static const uint embedded_decoder2_ResidualBlock_2_body_conv_dw_bias_dwords[8] = {
    // 0.003496, 0.0973, -0.00852, -0.07324, 0.03119, 0.03342, -0.10614, 0.1589, 0.05347, -0.2725, 0.2744, -0.0468, 0.05566, 0.03102, 0.10345, -0.0816
    0x2e3a1b29, 0xacb0a05d, 0x284727fc, 0x3116aecb, 0xb45c2ad8, 0xa9fe3464, 0x27f12b20, 0xad392e9f,
};
static const uint embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -15, 40, -114, -3, -3, -15, -1, -96, -61, -19, 1, 63, 48, -55, 5, -113, -33, -7, 19, -24, 40, -75, -40, 36, -20, -6, 47, -39, 7, -9, 65, -81
    0xfd8e28f1, 0xa0fff1fd, 0x3f01edc3, 0x8f05c930, 0xe813f9df, 0x24d8b528, 0xd92ffaec, 0xaf41f707,
    // 36, 25, 24, -37, 2, -48, -6, -21, -10, -25, -15, -13, -72, 25, -30, -1, -17, -8, -75, 2, -15, -16, -81, -5, -54, 65, -16, -27, -9, 98, -28, 3
    0xdb181924, 0xebfad002, 0xf3f1e7f6, 0xffe219b8, 0x2b5f8ef, 0xfbaff0f1, 0xe5f041ca, 0x3e462f7,
    // 8, -6, -68, -23, 24, 23, 23, 18, 9, -30, 24, 25, 16, 55, 22, 50, 41, -32, 76, 56, -1, -37, 14, -52, 59, -7, 26, -21, 59, -69, -55, 34
    0xe9bcfa08, 0x12171718, 0x1918e209, 0x32163710, 0x384ce029, 0xcc0edbff, 0xeb1af93b, 0x22c9bb3b,
    // 33, -9, -1, 22, -58, -25, 73, 21, -8, -8, 43, -43, -17, 27, 7, -48, 89, 45, -9, 8, 27, 21, 1, -97, -24, -3, -40, 26, 44, -8, 94, -55
    0x16fff721, 0x1549e7c6, 0xd52bf8f8, 0xd0071bef, 0x8f72d59, 0x9f01151b, 0x1ad8fde8, 0xc95ef82c,
    // -66, -19, -19, 28, 44, 17, 36, -24, 9, 19, -29, -33, -28, 127, -37, -59, 44, 44, 127, 41, 30, 14, -6, -23, -37, -2, -24, 61, 55, 50, 8, -88
    0x1cededbe, 0xe824112c, 0xdfe31309, 0xc5db7fe4, 0x297f2c2c, 0xe9fa0e1e, 0x3de8fedb, 0xa8083237,
    // 50, -7, 29, 6, -26, -17, 7, -41, 4, 33, -25, -51, -41, -71, 14, -7, 29, 60, 82, -62, 101, 6, 46, 33, 14, 63, 96, 42, 9, 48, -25, -36
    0x61df932, 0xd707efe6, 0xcde72104, 0xf90eb9d7, 0xc2523c1d, 0x212e0665, 0x2a603f0e, 0xdce73009,
    // -27, 47, -62, -28, 35, -12, 39, -31, -15, 54, 21, -29, -42, 27, 37, -24, -8, 7, 63, -45, 10, 40, 5, -19, -49, -17, 20, -38, 22, -41, -10, -7
    0xe4c22fe5, 0xe127f423, 0xe31536f1, 0xe8251bd6, 0xd33f07f8, 0xed05280a, 0xda14efcf, 0xf9f6d716,
    // 37, 87, -101, -28, -16, 108, -10, 68, 79, -11, 11, -49, 43, 1, -76, -49, -50, 32, 63, -43, -100, -90, 5, -58, 21, 100, -83, -12, 41, 66, 34, -66
    0xe49b5725, 0x44f66cf0, 0xcf0bf54f, 0xcfb4012b, 0xd53f20ce, 0xc605a69c, 0xf4ad6415, 0xbe224229,
    // 24, 56, -66, 4, -29, 90, 6, 8, 32, 0, -15, -10, 33, 27, -65, 20, -42, 11, -2, -4, 26, 0, 4, -5, 8, 39, 14, -16, -29, -13, -26, 51
    0x4be3818, 0x8065ae3, 0xf6f10020, 0x14bf1b21, 0xfcfe0bd6, 0xfb04001a, 0xf00e2708, 0x33e6f3e3,
    // -95, 77, 36, 39, -20, 25, 0, -12, -95, 9, 12, -54, -5, 47, 59, -4, -24, -2, -49, -1, -8, -9, -10, -20, -18, -25, 6, 50, 17, -46, -36, -52
    0x27244da1, 0xf40019ec, 0xca0c09a1, 0xfc3b2ffb, 0xffcffee8, 0xecf6f7f8, 0x3206e7ee, 0xccdcd211,
    // 44, 12, -9, 0, -5, -1, -17, -27, -19, -29, -7, 15, 66, -18, 31, -58, -23, 3, -10, -12, 49, -2, -77, -1, 30, 15, -24, -2, 5, -39, -12, 16
    0xf70c2c, 0xe5effffb, 0xff9e3ed, 0xc61fee42, 0xf4f603e9, 0xffb3fe31, 0xfee80f1e, 0x10f4d905,
    // 47, -6, -22, 54, 42, 46, -30, 23, -52, -16, 24, -13, -63, -16, -28, -7, -26, 24, 47, 37, -7, 18, -3, -6, 16, -13, 21, 7, -10, 5, 33, 26
    0x36eafa2f, 0x17e22e2a, 0xf318f0cc, 0xf9e4f0c1, 0x252f18e6, 0xfafd12f9, 0x715f310, 0x1a2105f6,
    // 17, 7, 75, 22, 7, 11, -14, 6, -13, -15, -17, 39, 28, 31, -4, -30, 7, 30, -3, 27, -37, -32, -31, 43, 19, 3, 10, 28, -15, -40, 46, 22
    0x164b0711, 0x6f20b07, 0x27eff1f3, 0xe2fc1f1c, 0x1bfd1e07, 0x2be1e0db, 0x1c0a0313, 0x162ed8f1,
    // 25, 35, -44, 41, -28, -31, -48, 32, -35, 24, 41, 35, 14, 4, 11, 49, -8, -17, 14, -73, -61, 78, -67, -27, 17, -19, 31, 43, -59, 58, 22, 4
    0x29d42319, 0x20d0e1e4, 0x232918dd, 0x310b040e, 0xb70eeff8, 0xe5bd4ec3, 0x2b1fed11, 0x4163ac5,
    // 23, 0, -33, -13, 27, -31, 48, 44, -75, 8, -51, -11, 49, -57, -59, 15, -45, 32, 19, 35, -2, -2, 0, -19, -33, -5, -3, 86, 12, -26, -78, -113
    0xf3df0017, 0x2c30e11b, 0xf5cd08b5, 0xfc5c731, 0x231320d3, 0xed00fefe, 0x56fdfbdf, 0x8fb2e60c,
    // 36, -16, 24, 55, 2, 73, 20, -12, 3, 109, 1, -21, 32, -113, 79, -55, -11, -20, -23, 25, -4, 59, 15, 22, -13, 43, -7, 19, 24, -44, 41, -20
    0x3718f024, 0xf4144902, 0xeb016d03, 0xc94f8f20, 0x19e9ecf5, 0x160f3bfc, 0x13f92bf3, 0xec29d418,
};
static const uint embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias_dwords[16] = {
    // -0.2286, 0.7905, 0.00926, -0.03366, 0.1405, 0.1454, 0.538, -0.048, -0.3638, -0.02284, -0.003952, -0.6973, 0.1151, -0.1592, 0.8306, -0.8105
    0x3a53b351, 0xa84f20be, 0x30a7307f, 0xaa25384e, 0xa5d9b5d2, 0xb9949c0c, 0xb1182f5e, 0xba7c3aa5,
    // -0.2426, 0.6006, -0.3486, 0.255, 0.2123, 0.1299, -0.1237, 0.2766, 0.3274, -0.2363, 0.2188, 0.5405, 0.0782, 0.1385, -0.4683, 0.134
    0x38ceb3c3, 0x3414b594, 0x302832cb, 0x346dafeb, 0xb390353d, 0x38533300, 0x306f2d01, 0x304ab77e,
};
static const uint embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 72, 1, 2, -8, -9, 2, 35, 76, -110, 118, -1, -79, -62, 21, 26, -59, -14, -45, -95, 8, 65, 18, 2, -21, 40, -5, 6, -11, -54, 2, -17, -27
    0xf8020148, 0x4c2302f7, 0xb1ff7692, 0xc51a15c2, 0x8a1d3f2, 0xeb021241, 0xf506fb28, 0xe5ef02ca,
    // 26, 10, -1, -17, 5, -8, 1, -27, -13, 16, -3, -21, -19, 5, -9, -4, 3, -4, -22, 13, 16, 6, 1, 21, 7, -1, -7, -6, -7, 28, -37, -7
    0xefff0a1a, 0xe501f805, 0xebfd10f3, 0xfcf705ed, 0xdeafc03, 0x15010610, 0xfaf9ff07, 0xf9db1cf9,
    // -31, -20, 2, 25, 63, 11, 22, 40, -6, -4, 25, 53, 43, 9, 50, -15, -19, 41, 12, -25, -23, -55, 22, 34, -23, -15, 47, 18, 5, -49, 43, -21
    0x1902ece1, 0x28160b3f, 0x3519fcfa, 0xf132092b, 0xe70c29ed, 0x2216c9e9, 0x122ff1e9, 0xeb2bcf05,
    // -19, -8, 12, 39, -63, -50, 21, -76, 99, 38, 19, -46, -28, 13, 22, -46, -31, -8, 50, 6, -40, -7, -30, 5, 29, 4, 24, 2, 2, 83, -49, 18
    0x270cf8ed, 0xb415cec1, 0xd2132663, 0xd2160de4, 0x632f8e1, 0x5e2f9d8, 0x218041d, 0x12cf5302,
    // 114, -3, 20, -2, 55, -15, -1, -7, 45, -127, -16, 101, -6, -30, 23, 28, -6, 14, -91, 51, 12, -4, -14, 14, -67, 30, 8, -77, -28, -4, 58, 54
    0xfe14fd72, 0xf9fff137, 0x65f0812d, 0x1c17e2fa, 0x33a50efa, 0xef2fc0c, 0xb3081ebd, 0x363afce4,
    // -15, 20, 20, -16, 0, -9, -2, 20, -20, 11, -4, -9, -3, 4, -16, -12, -5, 5, -18, -24, 3, -6, 8, 29, -4, 3, -9, 2, 19, -17, 24, 19
    0xf01414f1, 0x14fef700, 0xf7fc0bec, 0xf4f004fd, 0xe8ee05fb, 0x1d08fa03, 0x2f703fc, 0x1318ef13,
    // -22, -16, 56, -10, -45, -13, 6, -9, 32, 15, -57, -55, -4, 49, 16, -29, -7, -6, 50, 6, -19, 7, -2, 3, 47, -22, -11, 0, -13, -19, 51, 60
    0xf638f0ea, 0xf706f3d3, 0xc9c70f20, 0xe31031fc, 0x632faf9, 0x3fe07ed, 0xf5ea2f, 0x3c33edf3,
    // 5, 32, -10, 3, -3, 34, 0, -98, 127, -14, -18, -95, -16, -4, -47, -1, 35, -5, 84, 34, -40, -2, 35, 28, 19, 14, 14, -6, -56, 113, -93, -48
    0x3f62005, 0x9e0022fd, 0xa1eef27f, 0xffd1fcf0, 0x2254fb23, 0x1c23fed8, 0xfa0e0e13, 0xd0a371c8,
    // -10, -35, 27, -46, -17, 0, -9, 1, 25, -23, -15, -21, -5, -8, 9, 5, -40, -16, 27, 8, -19, -38, 51, -36, 6, 18, 26, 4, -45, -8, 22, 6
    0xd21bddf6, 0x1f700ef, 0xebf1e919, 0x509f8fb, 0x81bf0d8, 0xdc33daed, 0x41a1206, 0x616f8d3,
    // 26, -3, -71, 10, -32, -76, 66, 27, -96, -78, 3, 78, -53, 18, 13, 100, -17, -52, -68, 38, 17, -24, 22, -34, -29, -43, 17, 6, 62, 10, -68, 45
    0xab9fd1a, 0x1b42b4e0, 0x4e03b2a0, 0x640d12cb, 0x26bcccef, 0xde16e811, 0x611d5e3, 0x2dbc0a3e,
    // 26, 39, -7, -51, -36, -26, 73, -5, 10, -30, 71, 26, -3, 28, -9, 33, 22, 10, 12, 6, -15, -16, 31, -26, -24, 19, 12, 6, -31, 18, -13, -13
    0xcdf9271a, 0xfb49e6dc, 0x1a47e20a, 0x21f71cfd, 0x60c0a16, 0xe61ff0f1, 0x60c13e8, 0xf3f312e1,
    // 34, 81, 42, 97, 9, -5, 45, 78, -65, -19, -26, 44, 9, 17, -109, 26, 90, -22, -54, -20, 32, 8, -11, -46, -27, -31, 32, 0, -75, -91, 112, 52
    0x612a5122, 0x4e2dfb09, 0x2ce6edbf, 0x1a931109, 0xeccaea5a, 0xd2f50820, 0x20e1e5, 0x3470a5b5,
    // -1, -20, -7, -23, -17, 7, 17, 49, 4, 0, 58, 36, 29, 26, -2, -9, 3, -19, 12, -18, -6, -44, -36, -45, -16, -18, 14, -9, -26, -39, 65, 16
    0xe9f9ecff, 0x311107ef, 0x243a0004, 0xf7fe1a1d, 0xee0ced03, 0xd3dcd4fa, 0xf70eeef0, 0x1041d9e6,
    // -2, -4, 2, -2, 1, 1, 1, 1, 7, -10, 2, 12, 7, 7, 0, 5, -5, 4, 12, 1, -5, -6, 4, -6, -6, 0, 3, 2, 6, -6, 9, 5
    0xfe02fcfe, 0x1010101, 0xc02f607, 0x5000707, 0x10c04fb, 0xfa04fafb, 0x20300fa, 0x509fa06,
    // -70, 29, -37, -9, 68, -1, 37, 6, 62, 65, -26, -11, 0, -64, -50, -93, 52, -21, 19, -23, 1, -31, -63, -14, 75, 33, 49, 18, 18, -26, 40, 19
    0xf7db1dba, 0x625ff44, 0xf5e6413e, 0xa3cec000, 0xe913eb34, 0xf2c1e101, 0x1231214b, 0x1328e612,
    // 22, 15, -40, -25, 40, -29, -1, -29, 19, 2, 12, 19, 26, 63, -42, -11, 44, 24, 33, 22, -14, -76, -12, 17, 11, -47, -11, 0, -16, 35, -20, 6
    0xe7d80f16, 0xe3ffe328, 0x130c0213, 0xf5d63f1a, 0x1621182c, 0x11f4b4f2, 0xf5d10b, 0x6ec23f0,
};
static const uint embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias_dwords[8] = {
    // 0.04514, 0.00542, 0.4602, 0.1753, 0.1345, 0.0123, -0.07996, -0.116, 0.1136, -0.2798, 0.4607, 0.3516, -0.2834, 0.05457, -0.1936, 0.179
    0x1d8d29c7, 0x319c375d, 0x224c304e, 0xaf6dad1e, 0xb47a2f45, 0x35a0375f, 0x2afcb489, 0x31bab232,
};
static const uint embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 7, -10, 8, 7, 2, -48, 18, -13, 7, 4, -7, -16, 4, 12, -10, -13, -15, 9, 8, -15, -23, 9, 44, -19, -83, -8, -32, 2, 0, -14, -56, 81
    0x708f607, 0xf312d002, 0xf0f90407, 0xf3f60c04, 0xf10809f1, 0xed2c09e9, 0x2e0f8ad, 0x51c8f200,
    // 10, -12, 30, -29, -43, -60, 97, 19, -36, 30, 1, 14, 36, 18, -56, 115, -111, -47, 19, 81, 29, -6, -10, 59, 48, -20, 26, -15, -8, 76, 31, -19
    0xe31ef40a, 0x1361c4d5, 0xe011edc, 0x73c81224, 0x5113d191, 0x3bf6fa1d, 0xf11aec30, 0xed1f4cf8,
    // 4, -47, -22, 9, 2, 5, -9, -6, -2, 0, 11, -2, 1, -11, -1, -3, -3, -4, 16, 19, -3, 32, -17, 12, 9, 5, -37, 7, 16, -44, -16, 5
    0x9ead104, 0xfaf70502, 0xfe0b00fe, 0xfdfff501, 0x1310fcfd, 0xcef20fd, 0x7db0509, 0x5f0d410,
    // -2, 5, -10, -3, 0, 2, -15, -6, 9, -15, -25, -2, -19, 43, -4, 0, 11, -6, 6, 4, 1, 28, -1, 7, -4, 4, -5, -5, 3, 79, -3, 10
    0xfdf605fe, 0xfaf10200, 0xfee7f109, 0xfc2bed, 0x406fa0b, 0x7ff1c01, 0xfbfb04fc, 0xafd4f03,
    // 6, -8, 7, 7, 4, -47, 12, -15, 4, 2, -6, -16, 5, 11, -7, -14, 7, -18, 12, -43, 8, -99, -33, 27, 9, -74, 3, 10, 7, -15, -16, -2
    0x707f806, 0xf10cd104, 0xf0fa0204, 0xf2f90b05, 0xd50cee07, 0x1bdf9d08, 0xa03b609, 0xfef0f107,
    // 21, -22, 23, -21, -5, -91, 88, 29, 2, -13, 17, 19, 44, 22, -25, 80, -98, -78, 41, -16, -128, 109, 28, -11, -18, 6, -3, -27, 4, 54, 25, -25
    0xeb17ea15, 0x1d58a5fb, 0x1311f302, 0x50e7162c, 0xf029b29e, 0xf51c6d80, 0xe5fd06ee, 0xe7193604,
    // 0, -24, -6, 12, -5, 13, -21, -10, 18, -10, -4, 3, -4, -29, -11, 13, 5, -5, 12, -19, 12, 49, 11, 23, -11, 3, -6, -13, 10, -17, -2, 7
    0xcfae800, 0xf6eb0dfb, 0x3fcf612, 0xdf5e3fc, 0xed0cfb05, 0x170b310c, 0xf3fa03f5, 0x7feef0a,
    // -4, -14, -34, -28, 5, 19, 6, 16, 39, 21, -39, -18, 26, -9, 14, -6, 9, -8, 7, 9, 1, 35, -7, 20, -27, 3, 1, 1, 11, 72, -14, -18
    0xe4def2fc, 0x10061305, 0xeed91527, 0xfa0ef71a, 0x907f809, 0x14f92301, 0x10103e5, 0xeef2480b,
    // 6, -8, 9, 5, 2, -48, 11, -13, 9, 1, -6, -16, 4, 10, -9, -14, -13, 9, -8, 30, 27, 0, 20, -41, -77, -45, -24, 2, 21, -7, -7, 50
    0x509f806, 0xf30bd002, 0xf0fa0109, 0xf2f70a04, 0x1ef809f3, 0xd714001b, 0x2e8d3b3, 0x32f9f915,
    // -4, 1, 10, 43, 28, -46, -64, -33, -45, -16, 10, -14, 69, 7, 47, 46, -98, -28, 30, -46, 43, 21, -40, 30, 50, 49, 35, 17, -11, 91, -76, -11
    0x2b0a01fc, 0xdfc0d21c, 0xf20af0d3, 0x2e2f0745, 0xd21ee49e, 0x1ed8152b, 0x11233132, 0xf5b45bf5,
    // 9, -35, -1, -3, 4, 39, -9, 5, 9, -5, -8, -7, -9, 4, -5, 19, -3, -7, 4, 32, -8, -7, -21, -6, -15, -5, 7, 17, 12, -31, -15, -18
    0xfdffdd09, 0x5f72704, 0xf9f8fb09, 0x13fb04f7, 0x2004f9fd, 0xfaebf9f8, 0x1107fbf1, 0xeef1e10c,
    // 3, 2, -9, 0, 0, -14, -4, -10, 23, -2, -4, 3, -17, 48, 6, 4, 5, 8, -1, 9, 0, 6, -13, -6, 11, -6, -9, 4, -6, 65, -3, 6
    0xf70203, 0xf6fcf200, 0x3fcfe17, 0x40630ef, 0x9ff0805, 0xfaf30600, 0x4f7fa0b, 0x6fd41fa,
    // 7, -12, 7, 7, 3, -50, 7, -14, 8, 2, -5, -17, 3, 11, -7, -18, -7, -7, 16, -58, -25, -84, -99, 18, -11, -48, 4, -7, 0, -24, -25, 3
    0x707f407, 0xf207ce03, 0xeffb0208, 0xeef90b03, 0xc610f9f9, 0x129dace7, 0xf904d0f5, 0x3e7e800,
    // -7, 0, 20, -4, -13, -48, -104, -14, -39, 7, 20, -26, 54, -1, 23, 53, -66, -55, 36, -46, 19, 127, 58, -57, 38, -40, 4, 33, 45, 69, -1, -37
    0xfc1400f9, 0xf298d0f3, 0xe61407d9, 0x3517ff36, 0xd224c9be, 0xc73a7f13, 0x2104d826, 0xdbff452d,
    // 9, -61, -10, 14, 3, 4, -8, 3, -1, 7, -3, 1, -3, -15, -2, 5, -6, 12, -5, 10, -4, 49, -22, -3, 13, -8, 2, -7, 32, -41, -14, 7
    0xef6c309, 0x3f80403, 0x1fd07ff, 0x5fef1fd, 0xafb0cfa, 0xfdea31fc, 0xf902f80d, 0x7f2d720,
    // 5, 15, 1, 8, 0, 19, -7, -12, 29, 0, 4, -6, 3, 45, 5, 26, 7, 6, 2, 1, 1, 25, -12, 1, -1, -9, -2, -5, 0, 73, -7, 7
    0x8010f05, 0xf4f91300, 0xfa04001d, 0x1a052d03, 0x1020607, 0x1f41901, 0xfbfef7ff, 0x7f94900,
};
static const uint embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias_dwords[4] = {
    // 0.013535, -0.1431, -0.0254, 0.1151, 0.03748, 0.03156, 0.2112, -0.0846
    0xb09422ee, 0x2f5ea681, 0x280a28cc, 0xad6a32c2,
};

[numthreads(8, 8, 1)]
void fsr4_model_v07_i8_pass13(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(8, 8, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(3840, 2160, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(3840, 2160, 16), // threadGroupSliceSize
        uint3(3840, 2160, 16), // storageSize
        uint3(16, 61440, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.06308986991643906, storage_fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.007416776847094297, storage_embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_2_body_conv_dw_bias = { embedded_decoder2_ResidualBlock_2_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_2_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_2_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.007413623854517937, storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias = { embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.007430446334183216, storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias = { embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias };
    
    const ConstantBufferStorage<128> storage_embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_HWCN< ConstantBufferStorage<128> > embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 8, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 8, 16), // threadGroupSliceSize
        uint4(2, 2, 8, 16), // storageSize
        uint4(128, 256, 16, 1), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.007879232987761497, storage_embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<4> storage_embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias = { embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<4> > embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias = {
        8, // logicalSize
        0, // threadGroupSliceStart
        8, // threadGroupSliceSize
        8, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias };
    
    // fused_quantized_NHWC_output
    const uint3 logicalSize_fused_quantized_NHWC_output = uint3(7680, 4320, 8);
    const int3 groupStart_fused_quantized_NHWC_output = int3(0, 0, 0) + ml2c_groupId.xyz * int3(16, 16, 8);
    const uint3 groupSize_fused_quantized_NHWC_output = uint3(16, 16, 8);
    const uint3 storageSize_fused_quantized_NHWC_output = uint3(7680, 4320, 8);
    const uint3 tensorByteStrides_fused_quantized_NHWC_output = uint3(16, 122880, 2);
    const uint3 paddingBegin_fused_quantized_NHWC_output = uint3(0, 0, 0);
    const uint3 paddingEnd_fused_quantized_NHWC_output = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_fused_quantized_NHWC_output = dot(groupStart_fused_quantized_NHWC_output, tensorByteStrides_fused_quantized_NHWC_output);
    const RWBufferStorage storage_fused_quantized_NHWC_output = { buffer_fused_quantized_NHWC_output };
    const Tensor3h_NHWC<RWBufferStorage> fused_quantized_NHWC_output = { logicalSize_fused_quantized_NHWC_output, groupStart_fused_quantized_NHWC_output, groupSize_fused_quantized_NHWC_output, storageSize_fused_quantized_NHWC_output, tensorByteStrides_fused_quantized_NHWC_output, paddingBegin_fused_quantized_NHWC_output, paddingEnd_fused_quantized_NHWC_output, threadGroupByteOffsetInTensor_fused_quantized_NHWC_output + 0, storage_fused_quantized_NHWC_output };
    // FusedConvNextBlock_quantized_/decoder2/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose (16, 2160, 3840), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,), (16, 8, 2, 2), (8,) -> (8, 4320, 7680)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    CNB_CT2D<8>(11.680364741271017, 0.08561376482248306, 10.053016139401187, 0.09947263449430466, 0.10871799290180206, fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_2_body_conv_dw_bias, embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias, embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias, embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias, fused_quantized_NHWC_output, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_13


