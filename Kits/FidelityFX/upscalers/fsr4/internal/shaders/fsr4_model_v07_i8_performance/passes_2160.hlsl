// Copyright(C) 2024-2025 Advanced Micro Devices, Inc. All rights reserved.
// Autogenerated 2025-02-26 12:21:54 using ML2Code from "models\2024\October\Release7\Performance\fsr4_model_v07_i8.onnx". Do not edit.
// Compile with dxc.exe -no-warnings -O3 -enable-16bit-types -HV 2021 -T cs_6_6 -I . -I hlsl -E fsr4_model_v07_i8_pass0 "generated\hlsl\fsr4_model_v07_i8.hlsl"

// Scratch memory size needed: 82944000 (79.1MB)

// This file was generated for navi48 SKU
#define WMMA_ENABLED  0
#define FP8_ENABLED  1
#define DOT4_ENABLED  1


ByteAddressBuffer buffer_NHWC_inputs : register(t0);
RWByteAddressBuffer buffer_fused_quantized_NHWC_output : register(u0);
ByteAddressBuffer InitializerBuffer : register(t1);
RWByteAddressBuffer ScratchBuffer : register(u1);

#ifdef MLSR_PASS_0
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Conv2D_k2s2b.hlsli"

static const uint embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight_dwords[256] = {
    // 0.278, 0.11414, -0.1307, 0.00789, -0.0999, 0.00652, 0.0005727, 0.0, 0.3293, 0.04, -0.0829, -0.06094, -0.0712, 0.0889, 0.03278, 0.0
    0x2f4e3473, 0x200ab02f, 0x1eadae65, 0x10b1, 0x291f3545, 0xabcdad4e, 0x2db1ac8f, 0x2832,
    // -0.222, -0.11945, -0.1675, 0.10034, 0.04697, -0.02281, -0.1938, 0.0, -0.1963, -0.2754, -0.1103, 0.03696, 0.04355, 0.1566, -0.1217, 0.0
    0xafa5b31b, 0x2e6cb15c, 0xa5d72a03, 0xb234, 0xb468b248, 0x28bbaf0f, 0x31032993, 0xafca,
    // -0.03787, -0.2693, -0.662, 0.02242, -0.1184, -0.1597, 0.08, 0.0, 0.0734, -0.0891, -0.6333, 0.1538, -0.1138, 0.03644, -0.07324, 0.0
    0xb44fa8d9, 0x25bdb94c, 0xb11caf94, 0x2d1f, 0xadb42cb3, 0x30ecb911, 0x28aaaf48, 0xacb0,
    // 0.06714, -0.03903, -0.622, -0.10254, 0.1011, 0.07184, 0.0777, 0.0, 0.1896, 0.0924, -0.4448, -0.0443, 0.077, 0.301, -0.162, 0.0
    0xa8ff2c4c, 0xae90b8fa, 0x2c992e78, 0x2cf9, 0x2dea3211, 0xa9acb71e, 0x34d12cee, 0xb12f,
    // -0.06824, 0.162, 0.7026, -0.06537, -0.10834, -0.0802, 0.1495, 0.0, -0.1261, 0.05026, 0.589, 0.03717, 0.0816, -0.11115, -0.06757, 0.0
    0x312fac5e, 0xac2f399f, 0xad22aeef, 0x30c9, 0x2a6fb009, 0x28c238b6, 0xaf1d2d39, 0xac53,
    // -0.0961, 0.1554, 0.7754, -0.159, 0.04816, -0.009445, 0.1771, 0.0, -0.2162, 0.04724, 0.6626, -0.06506, 0.1506, -0.1335, -0.1675, 0.0
    0x30f9ae27, 0xb1173a34, 0xa0d62a2a, 0x31ab, 0x2a0cb2eb, 0xac2a394d, 0xb04630d2, 0xb15c,
    // 0.3262, -0.3704, 0.4329, 0.1914, -0.08374, -0.0752, -0.1223, 0.0, 0.0791, 0.06604, 0.4795, 0.0715, 0.1783, -0.08765, 0.09454, 0.0
    0xb5ed3538, 0x322036ed, 0xacd0ad5c, 0xafd4, 0x2c3a2d10, 0x2c9337ac, 0xad9c31b5, 0x2e0d,
    // 0.02483, 0.02966, 0.5605, -0.108, -0.0669, 0.0688, 0.010254, 0.0, -0.449, 0.3547, 0.654, -0.1642, 0.06824, -0.02838, 0.0843, 0.0
    0x2798265b, 0xaee9387c, 0x2c67ac48, 0x2140, 0x35adb72f, 0xb141393b, 0xa7442c5e, 0x2d65,
    // 0.309, -0.02872, -0.2927, -0.11444, 0.08527, -0.002712, -0.03607, 0.0, -0.0226, -0.0315, -0.3022, 0.03784, -0.10767, -0.001668, -0.119, 0.0
    0xa75a34f2, 0xaf53b4af, 0x998e2d75, 0xa89e, 0xa808a5c9, 0x28d8b4d6, 0x96d5aee4, 0xaf9e,
    // 0.0361, 0.02069, -0.2449, 0.0344, 0.098, -0.013824, 0.0544, 0.0, -0.3997, 0.0767, -0.1799, 0.1272, 0.02773, 0.01459, 0.0543, 0.0
    0x254c289f, 0x2867b3d6, 0xa3142e46, 0x2af7, 0x2ce9b665, 0x3012b1c2, 0x23782719, 0x2af3,
    // 0.2494, -0.01689, -0.3506, -0.0225, -0.0899, 0.1076, 0.11127, 0.0, 0.1998, -0.07776, -0.424, -0.0939, -0.02425, 0.1434, 0.02159, 0.0
    0xa45333fb, 0xa5c3b59c, 0x2ee3adc1, 0x2f1f, 0xacfa3265, 0xae02b6c9, 0x3097a635, 0x2587,
    // 0.1372, -0.04605, -0.4675, 0.1108, -0.1079, 0.04877, 0.1449, 0.0, 0.1394, -0.0342, -0.3772, 0.01872, 0.00775, 0.02016, 0.05887, 0.0
    0xa9e53064, 0x2f17b77b, 0x2a3eaee8, 0x30a3, 0xa8613076, 0x24cbb609, 0x25291ff0, 0x2b89,
    // -0.2068, 0.2161, -0.3274, 0.2379, 0.0676, 0.2081, -0.43, 0.0, -0.1754, 0.2186, -0.2507, 0.2119, 0.1399, 0.0584, -0.4385, 0.0
    0x32eab29e, 0x339db53d, 0x32a92c54, 0xb6e1, 0x32ffb19d, 0x32c8b403, 0x2b7a307a, 0xb704,
    // -0.127, 0.1857, -0.3796, 0.211, 0.11096, 0.2034, -0.4111, 0.0, -0.0935, 0.213, -0.306, 0.1643, 0.2595, 0.0875, -0.3018, 0.0
    0x31f1b010, 0x32c1b613, 0x32822f1a, 0xb694, 0x32d1adfc, 0x3142b4e5, 0x2d9a3427, 0xb4d4,
    // 0.1553, -0.1732, -0.3892, 0.0848, 0.159, -0.2102, -0.1742, 0.0, 0.13, -0.12177, -0.278, 0.0018015, 0.1652, -0.2092, -0.1103, 0.0
    0xb18b30f8, 0x2d6db63a, 0xb2ba3117, 0xb193, 0xafcb3029, 0x1761b473, 0xb2b23149, 0xaf0f,
    // 0.216, -0.1675, -0.392, 0.03195, 0.2656, -0.2852, 0.03625, 0.0, 0.2314, -0.1486, -0.2338, 0.02602, 0.2468, -0.2598, 0.1108, 0.0
    0xb15c32e9, 0x2817b646, 0xb4903440, 0x28a4, 0xb0c13368, 0x26a9b37b, 0xb42833e6, 0x2f17,
    // -0.226, -0.1584, -0.3335, -0.08466, 0.1263, 0.0338, -0.04437, 0.0, 0.3545, -0.02823, -0.248, -0.008446, 0.03464, -0.0684, -0.05734, 0.0
    0xb112b33b, 0xad6bb556, 0x2854300b, 0xa9ae, 0xa73a35ac, 0xa053b3f0, 0xac61286f, 0xab57,
    // -0.4111, 0.0997, -0.1968, -0.01932, 0.02362, 0.03137, 0.05194, 0.0, 0.1302, 0.1837, -0.2776, 0.06946, -0.0242, -0.1405, 0.0625, 0.0
    0x2e61b694, 0xa4f2b24c, 0x2804260c, 0x2aa6, 0x31e1302b, 0x2c72b471, 0xb07fa632, 0x2c00,
    // 0.02487, -0.1714, -0.1981, 0.096, 0.0904, 0.0409, 0.076, 0.0, 0.002506, -0.1309, -0.168, -0.06158, 0.01146, 0.138, -0.09033, 0.0
    0xb17c265e, 0x2e25b257, 0x293c2dc9, 0x2cdd, 0xb0301922, 0xabe2b160, 0x306a21de, 0xadc8,
    // 0.01151, -0.1012, -0.2261, 0.10187, 0.002346, -0.09686, -0.00389, 0.0, -0.03513, -0.0992, -0.2328, -0.08685, -0.01703, 0.0188, -0.04794, 0.0
    0xae7a21e5, 0x2e85b33c, 0xae3318ce, 0x9bf7, 0xae59a87f, 0xad8fb373, 0x24d0a45c, 0xaa23,
    // -0.252, 0.2517, -0.4543, 0.1826, -0.0821, -0.04205, -0.05417, 0.0, -0.1654, 0.2028, -0.382, 0.0682, -0.183, 0.0684, -0.05457, 0.0
    0x3407b408, 0x31d8b745, 0xa962ad41, 0xaaef, 0x327db14b, 0x2c5db61d, 0x2c61b1db, 0xaafc,
    // -0.2094, 0.1843, -0.535, 0.1083, -0.2274, -0.01134, 0.1774, 0.0, -0.2383, 0.1099, -0.533, -0.08, -0.251, 0.07697, 0.1984, 0.0
    0x31e6b2b3, 0x2eeeb848, 0xa1ceb347, 0x31ad, 0x2f09b3a0, 0xad1fb844, 0x2cedb404, 0x3259,
    // -0.02003, 0.2344, -0.3333, 0.10065, 0.3748, -0.1892, 0.1716, 0.0, -0.03363, 0.1512, -0.3577, 0.0811, 0.0875, -0.094, -0.03047, 0.0
    0x3380a521, 0x2e71b555, 0xb20e35ff, 0x317e, 0x30d7a84e, 0x2d31b5b9, 0xae042d9a, 0xa7cd,
    // -0.05646, 0.1573, -0.51, -0.0807, 0.1454, -0.2278, -0.0518, 0.0, -0.12036, 0.1171, -0.4377, -0.1554, -0.0968, -0.0256, -0.1382, 0.0
    0x3109ab3a, 0xad2ab814, 0xb34a30a7, 0xaaa1, 0x2f7fafb4, 0xb0f9b701, 0xa68eae32, 0xb06c,
    // -0.01419, -0.06726, 1.004, 0.01883, 0.03305, -0.005318, 0.02458, 0.0, 0.03793, -0.01797, 0.9365, 0.01637, -0.0975, 0.06183, -0.06946, 0.0
    0xac4ea344, 0x24d23c04, 0x9d72283b, 0x264b, 0xa49a28db, 0x24313b7e, 0x2beaae3d, 0xac72,
    // 0.003275, -0.01674, 1.021, 0.0823, 0.01414, -0.04947, 0.003874, 0.0, 0.0898, 0.08685, 0.959, -0.006554, -0.04465, 0.1016, 0.0597, 0.0
    0xa4491ab5, 0x2d443c16, 0xaa55233d, 0x1bef, 0x2d8f2dbf, 0x9eb63bac, 0x2e81a9b7, 0x2ba4,
    // 0.001593, 0.03687, -0.05646, 0.2812, -0.01782, -0.1715, 0.0789, 0.0, 0.01094, 0.00935, 0.0315, 0.3665, -0.0745, -0.1617, 0.0847, 0.0
    0x28b81686, 0x3480ab3a, 0xb17da490, 0x2d0d, 0x20ca219a, 0x35dd2808, 0xb12dacc5, 0x2d6c,
    // -0.03256, -0.03302, 0.005943, 0.2717, -0.045, -0.0522, -0.002676, 0.0, -0.01324, -0.0608, 0.0674, 0.3596, 0.05432, -0.03146, 0.0541, 0.0
    0xa83aa82b, 0x34591e16, 0xaaaea9c3, 0x997b, 0xabc8a2c7, 0x35c12c50, 0xa8072af4, 0x2aed,
    // -0.1373, 0.0373, -0.2119, -0.02821, -0.05905, -0.02556, 0.02437, 0.0, -0.101, 0.1367, -0.1761, -0.09106, -0.04004, 0.02089, 0.05362, 0.0
    0x28c6b065, 0xa739b2c8, 0xa68bab8f, 0x263d, 0x3060ae77, 0xadd4b1a3, 0x2559a920, 0x2add,
    // -0.1478, 0.1025, -0.1968, 0.1259, 0.05725, -0.1251, -0.07623, 0.0, -0.0851, 0.2585, -0.0968, 0.0855, 0.05927, -0.05426, -0.02702, 0.0
    0x2e8fb0bb, 0x3007b24c, 0xb0012b54, 0xace1, 0x3423ad72, 0x2d79ae32, 0xaaf22b96, 0xa6eb,
    // 0.263, -0.2352, -0.2908, 0.265, -0.1647, 0.073, -0.2179, 0.0, 0.2063, -0.1437, -0.2896, 0.2642, -0.2234, 0.02736, -0.2559, 0.0
    0xb3873435, 0x343db4a7, 0x2cacb145, 0xb2f9, 0xb099329a, 0x343ab4a2, 0x2701b326, 0xb418,
    // 0.1914, -0.11066, -0.3281, 0.1989, -0.239, 0.1033, -0.2905, 0.0, 0.1544, -0.09644, -0.21, 0.1141, -0.252, 0.01265, -0.3186, 0.0
    0xaf153220, 0x325db540, 0x2e9cb3a6, 0xb4a6, 0xae2c30f1, 0x2f4db2b8, 0x227ab408, 0xb519,
};
static const uint embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias_dwords[8] = {
    // -0.0167, 0.01424, -0.0786, 0.01331, -0.002861, 0.1292, 0.0815, -0.005486, -0.006454, -0.1531, 0.0349, 0.1714, 0.0215, 0.02895, 0.02676, 0.0963
    0x234aa446, 0x22d1ad08, 0x302299dc, 0x9d9e2d37, 0xb0e69e9c, 0x317c2878, 0x27692581, 0x2e2a26da,
};

[numthreads(8, 8, 1)]
void fsr4_model_v07_i8_pass0(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(8, 8, 1);
    
    const BufferStorage storage_NHWC_inputs = { buffer_NHWC_inputs };
    const Tensor3h_NHWC< BufferStorage > NHWC_inputs = {
        uint3(3840, 2160, 7), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(3840, 2160, 7), // threadGroupSliceSize
        uint3(3840, 2160, 8), // storageSize
        uint3(16, 61440, 2), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_NHWC_inputs };
    const ConstantBufferStorage<256> storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight = { embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight_dwords };
    const Tensor4h_NHWC< ConstantBufferStorage<256> > embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight = {
        uint4(2, 2, 7, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 7, 16), // threadGroupSliceSize
        uint4(2, 2, 8, 16), // storageSize
        uint4(16, 32, 2, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight };
    
    const ConstantBufferStorage<8> storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias = { embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias };
    
    // quantized_NHWC_/encoder2/ResidualBlock_0/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_0 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_0 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(8, 8, 16);
    const uint3 groupSize_slice_0 = uint3(8, 8, 16);
    const uint3 storageSize_slice_0 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_0 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_0 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_0 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_0 = dot(groupStart_slice_0, tensorByteStrides_slice_0);
    const float quantizationScale_slice_0 = 0.014811458997428417;
    const RWBufferStorage storage_slice_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_0 = { logicalSize_slice_0, groupStart_slice_0, groupSize_slice_0, storageSize_slice_0, tensorByteStrides_slice_0, paddingBegin_slice_0, paddingEnd_slice_0, threadGroupByteOffsetInTensor_slice_0 + 0, quantizationScale_slice_0, storage_slice_0 };
    // /encoder1/DownscaleStridedConv2x2/downscale_conv/Conv (7, 2160, 3840), (16, 7, 2, 2), (16,) -> (16, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    Conv2D_k2s2b(NHWC_inputs, embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_weight, embedded_encoder1_DownscaleStridedConv2x2_downscale_conv_bias, slice_0, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_0
#ifdef MLSR_PASS_0_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass0_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // quantized_NHWC_/encoder2/ResidualBlock_0/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_1 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_1 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_1 = uint3(32, 1, 16);
    const uint3 storageSize_slice_1 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_1 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_1 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_1 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_1 = dot(groupStart_slice_1, tensorByteStrides_slice_1);
    const float quantizationScale_slice_1 = 0.014811458997428417;
    const RWBufferStorage storage_slice_1 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_1 = { logicalSize_slice_1, groupStart_slice_1, groupSize_slice_1, storageSize_slice_1, tensorByteStrides_slice_1, paddingBegin_slice_1, paddingEnd_slice_1, threadGroupByteOffsetInTensor_slice_1 + 0, quantizationScale_slice_1, storage_slice_1 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_1, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_0_POST


#ifdef MLSR_PASS_1
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/ConvNextBlock.hlsli"

static const uint embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // -9, 5, 14, 15, -28, 9, 4, 7, 15, -17, 10, 0, -6, -1, -32, 3, 12, 30, -6, -28, -13, -7, -2, 31, -70, -58, -11, -4, 1, 9, 7, -1
    0xf0e05f7, 0x70409e4, 0xaef0f, 0x3e0fffa, 0xe4fa1e0c, 0x1ffef9f3, 0xfcf5c6ba, 0xff070901,
    // -3, -15, -7, -7, 3, 19, -2, 13, -27, -22, -6, 9, 7, -3, 40, 2, -6, 0, 21, -44, 16, 21, -2, 21, 14, -18, -2, -3, 9, 1, -46, 10
    0xf9f9f1fd, 0xdfe1303, 0x9faeae5, 0x228fd07, 0xd41500fa, 0x15fe1510, 0xfdfeee0e, 0xad20109,
    // -20, 25, -12, 40, -15, -52, 6, -45, 81, 56, -20, -70, 69, -2, 55, -31, -24, 15, -5, 28, 12, 44, 2, 22, -14, 10, 0, -19, 11, -20, 18, 9
    0x28f419ec, 0xd306ccf1, 0xbaec3851, 0xe137fe45, 0x1cfb0fe8, 0x16022c0c, 0xed000af2, 0x912ec0b,
    // 5, 6, 21, -26, 22, -5, 0, 1, 18, -19, -1, -3, 1, -3, -10, 1, -9, 39, -26, 46, -16, -17, -4, 3, -15, -8, -18, -23, -23, 14, 44, -7
    0xe6150605, 0x100fb16, 0xfdffed12, 0x1f6fd01, 0x2ee627f7, 0x3fceff0, 0xe9eef8f1, 0xf92c0ee9,
    // -20, -1, -22, 31, 16, -10, -6, 4, 15, 37, -3, 4, 8, 9, 15, 1, -16, -5, 15, 9, 24, -12, -1, -11, -1, 18, -4, -3, -22, 5, -16, 2
    0x1feaffec, 0x4faf610, 0x4fd250f, 0x10f0908, 0x90ffbf0, 0xf5fff418, 0xfdfc12ff, 0x2f005ea,
    // 47, -27, 6, 3, -2, -39, -3, -7, 19, 49, 4, -11, -10, 12, 11, -7, 3, -6, -1, -3, 9, -19, -2, -5, 4, 28, -3, -5, -11, 5, 22, -6
    0x306e52f, 0xf9fdd9fe, 0xf5043113, 0xf90b0cf6, 0xfdfffa03, 0xfbfeed09, 0xfbfd1c04, 0xfa1605f5,
    // 21, 8, -8, 27, -9, -2, 1, 1, 44, -15, -10, 12, 5, -12, 2, 2, -121, 45, 23, 14, -10, -54, 6, -24, -61, 48, 12, -12, 12, -21, -19, 11
    0x1bf80815, 0x101fef7, 0xcf6f12c, 0x202f405, 0xe172d87, 0xe806caf6, 0xf40c30c3, 0xbedeb0c,
    // 31, -4, -26, 7, -24, 1, 1, -3, 37, -13, 0, 14, 26, -7, 11, -3, -1, -2, -8, 11, -1, 19, 5, 3, 10, -22, 4, 10, 6, 6, -10, 8
    0x7e6fc1f, 0xfd0101e8, 0xe00f325, 0xfd0bf91a, 0xbf8feff, 0x30513ff, 0xa04ea0a, 0x8f60606,
    // 35, -11, -26, 24, -38, 54, 8, 4, 12, -57, -24, 31, 27, 4, -21, 8, -3, -2, 2, -3, 14, 14, 3, -2, -3, -9, 1, 19, 15, 17, -13, 4
    0x18e6f523, 0x40836da, 0x1fe8c70c, 0x8eb041b, 0xfd02fefd, 0xfe030e0e, 0x1301f7fd, 0x4f3110f,
    // 18, 19, -1, -7, 6, -4, 0, -1, -16, -11, 2, -12, 0, 3, 3, -8, 3, 28, 15, 2, 12, -9, 0, -5, -18, -10, 1, -9, -29, 15, -37, -1
    0xf9ff1312, 0xff00fc06, 0xf402f5f0, 0xf8030300, 0x20f1c03, 0xfb00f70c, 0xf701f6ee, 0xffdb0fe3,
    // 2, 4, -7, -1, 16, -12, 1, 2, -2, 10, 1, 0, 4, -2, 13, -5, 23, -13, 12, 0, -3, 41, -1, 8, 38, -12, 8, -3, 10, -2, 4, 9
    0xfff90402, 0x201f410, 0x10afe, 0xfb0dfe04, 0xcf317, 0x8ff29fd, 0xfd08f426, 0x904fe0a,
    // 43, -69, 21, -10, 101, 35, -31, 66, -49, 9, -34, -14, -16, 11, -56, 13, 23, 7, -11, -10, 13, -16, 0, 3, 9, 12, 10, -3, 22, 2, 27, 0
    0xf615bb2b, 0x42e12365, 0xf2de09cf, 0xdc80bf0, 0xf6f50717, 0x300f00d, 0xfd0a0c09, 0x1b0216,
    // 9, 10, 9, 3, 2, 12, 5, 1, -2, -8, -1, -5, 0, -9, 16, 4, -2, 27, 10, -20, 36, -2, -3, -3, 2, -13, -5, -2, 19, 5, 4, 7
    0x3090a09, 0x1050c02, 0xfbfff8fe, 0x410f700, 0xec0a1bfe, 0xfdfdfe24, 0xfefbf302, 0x7040513,
    // 14, -15, -6, -1, 11, 0, 7, 0, -4, -4, 3, -13, -1, -10, 2, 5, 16, -8, 35, -6, -1, 1, 2, 5, -20, 31, 7, -16, -31, 19, -3, 1
    0xfffaf10e, 0x7000b, 0xf303fcfc, 0x502f6ff, 0xfa23f810, 0x50201ff, 0xf0071fec, 0x1fd13e1,
    // 27, -34, 16, -4, 24, -44, -5, -2, 59, 8, 0, -9, -43, 29, -33, -6, 13, 8, 15, 2, -19, -10, -1, 7, -2, 13, 12, -9, -4, 1, 16, 8
    0xfc10de1b, 0xfefbd418, 0xf700083b, 0xfadf1dd5, 0x20f080d, 0x7fff6ed, 0xf70c0dfe, 0x81001fc,
    // -2, -37, -1, 29, -27, -14, 4, 18, -20, -2, -2, -18, -71, 19, 28, -19, -32, -21, -39, -32, -50, 98, 36, -59, -37, -128, -15, -29, -14, 14, -63, -26
    0x1dffdbfe, 0x1204f2e5, 0xeefefeec, 0xed1c13b9, 0xe0d9ebe0, 0xc52462ce, 0xe3f180db, 0xe6c10ef2,
    // 12, 0, 32, -2, -5, 21, 1, 12, -3, 14, 3, -15, -15, -7, 7, -14, -13, -9, 10, 2, -3, -4, 3, 3, 1, -13, 1, -13, -32, 13, -10, 8
    0xfe20000c, 0xc0115fb, 0xf1030efd, 0xf207f9f1, 0x20af7f3, 0x303fcfd, 0xf301f301, 0x8f60de0,
    // 6, -23, -1, 16, -35, 30, -5, 4, 15, -17, -25, -12, -45, -6, 1, -17, 6, 20, 14, 4, 2, 3, -14, 2, 5, 6, -12, 17, 8, 16, -7, -9
    0x10ffe906, 0x4fb1edd, 0xf4e7ef0f, 0xef01fad3, 0x40e1406, 0x2f20302, 0x11f40605, 0xf7f91008,
    // -11, -7, -8, -4, 2, 7, 1, 5, 10, -6, -6, 6, 14, 1, 5, 3, 2, 9, 10, -6, -8, -3, 5, 2, 5, 7, -7, -2, 35, -15, -2, -6
    0xfcf8f9f5, 0x5010702, 0x6fafa0a, 0x305010e, 0xfa0a0902, 0x205fdf8, 0xfef90705, 0xfafef123,
    // 0, -12, -12, -9, 8, -8, -1, -2, 5, 12, -5, -5, -1, 4, 3, -2, -3, 7, 19, -9, -2, 5, 1, -4, 31, -31, -4, 3, 20, 9, -14, 11
    0xf7f4f400, 0xfefff808, 0xfbfb0c05, 0xfe0304ff, 0xf71307fd, 0xfc0105fe, 0x3fce11f, 0xbf20914,
    // 9, -39, 41, 16, 30, 11, 18, -23, -44, -39, 21, 11, 101, 6, 24, -15, -3, -8, 23, -5, 6, -12, -1, 6, 16, 21, 9, -15, 12, 5, 6, -2
    0x1029d909, 0xe9120b1e, 0xb15d9d4, 0xf1180665, 0xfb17f8fd, 0x6fff406, 0xf1091510, 0xfe06050c,
    // -2, 6, 4, -2, 2, 1, -4, -1, 7, -3, -3, 0, -4, 6, -5, 2, 0, 13, 17, -3, 10, -11, 2, 4, -3, 6, 6, -7, 30, -11, -18, -10
    0xfe0406fe, 0xfffc0102, 0xfdfd07, 0x2fb06fc, 0xfd110d00, 0x402f50a, 0xf90606fd, 0xf6eef51e,
    // -8, 0, -5, 10, -5, -9, -6, -3, 1, 13, 1, -1, -8, 3, -1, -4, 4, 1, 11, -2, 31, -15, -6, -16, 7, 0, -9, -7, -13, 12, 2, -2
    0xafb00f8, 0xfdfaf7fb, 0xff010d01, 0xfcff03f8, 0xfe0b0104, 0xf0faf11f, 0xf9f70007, 0xfe020cf3,
    // 66, 36, 9, -2, -25, -13, 10, -15, 1, 15, -1, -6, -15, -9, 20, -23, 2, -10, -9, -21, 16, -8, -8, -3, 6, -4, -13, -6, 11, -11, 22, 1
    0xfe092442, 0xf10af3e7, 0xfaff0f01, 0xe914f7f1, 0xebf7f602, 0xfdf8f810, 0xfaf3fc06, 0x116f50b,
    // -22, -18, 21, -16, 45, -28, -7, -13, -29, 19, 4, -8, -42, 23, -3, 7, -74, 37, -14, -56, -100, 34, 11, 45, 57, -12, 11, 18, 5, -4, 70, -7
    0xf015eeea, 0xf3f9e42d, 0xf80413e3, 0x7fd17d6, 0xc8f225b6, 0x2d0b229c, 0x120bf439, 0xf946fc05,
    // 7, 13, -11, -2, -20, 10, -5, 12, -21, -23, 15, 9, 8, 19, 8, 8, -6, 4, 2, -1, 7, -7, -6, 4, 0, -2, -2, -14, 0, -3, 29, 0
    0xfef50d07, 0xcfb0aec, 0x90fe9eb, 0x8081308, 0xff0204fa, 0x4faf907, 0xf2fefe00, 0x1dfd00,
    // 41, 12, -10, -4, -22, 19, 4, -2, -11, -19, 6, -15, -5, -15, 9, -2, -15, 3, -9, -7, 29, -8, -4, 5, 1, -15, -4, 1, 21, -18, 2, 11
    0xfcf60c29, 0xfe0413ea, 0xf106edf5, 0xfe09f1fb, 0xf9f703f1, 0x5fcf81d, 0x1fcf101, 0xb02ee15,
    // -8, 3, 11, 12, -20, 19, 6, 3, 4, 7, -5, 3, 3, -9, 3, 5, 19, -4, 8, 13, 14, -20, -2, -4, 10, 12, -2, -1, -10, -4, -4, 3
    0xc0b03f8, 0x30613ec, 0x3fb0704, 0x503f703, 0xd08fc13, 0xfcfeec0e, 0xfffe0c0a, 0x3fcfcf6,
    // 14, -7, -9, 0, -15, -5, 0, -5, 1, 8, -2, 3, 4, 7, 20, -2, -5, 1, 7, 5, 4, 2, 3, 8, -12, 7, 7, 0, -2, -18, -16, 4
    0xf7f90e, 0xfb00fbf1, 0x3fe0801, 0xfe140704, 0x50701fb, 0x8030204, 0x707f4, 0x4f0eefe,
    // -17, 7, -32, -1, -43, 58, 4, 7, 0, -103, -1, 27, 0, -19, -9, 13, 0, 11, 16, -6, -4, -27, 3, 5, 10, 43, 15, -15, -9, -11, -6, -5
    0xffe007ef, 0x7043ad5, 0x1bff9900, 0xdf7ed00, 0xfa100b00, 0x503e5fc, 0xf10f2b0a, 0xfbfaf5f7,
    // -9, 3, 7, -11, 8, -1, 5, 0, -8, 4, 5, -3, 8, 4, -13, 0, -11, -2, -1, 15, -9, -30, 2, -1, -1, 11, 6, -2, -22, 0, -8, 1
    0xf50703f7, 0x5ff08, 0xfd0504f8, 0xf30408, 0xffffef5, 0xff02e2f7, 0xfe060bff, 0x1f800ea,
    // -13, 5, -9, 2, -7, -15, 6, -4, 5, 23, 9, -3, 3, 8, 7, -2, 30, -13, 19, -10, 30, -42, -20, -23, 0, 22, 8, -11, -41, 15, -5, 1
    0x2f705f3, 0xfc06f1f9, 0xfd091705, 0xfe070803, 0xf613f31e, 0xe9ecd61e, 0xf5081600, 0x1fb0fd7,
    // -11, -31, -2, -20, -50, 5, 8, -9, -39, 21, -3, -4, -25, 10, 14, 14, -6, 1, -3, 6, 7, 12, -4, -4, -10, -11, -3, 10, 0, -1, 4, 9
    0xecfee1f5, 0xf70805ce, 0xfcfd15d9, 0xe0e0ae7, 0x6fd01fa, 0xfcfc0c07, 0xafdf5f6, 0x904ff00,
    // 23, -14, 33, 0, -3, -27, -9, -20, -9, 31, 25, -12, -40, 32, -33, 5, 96, -20, 55, 95, 74, 37, 4, 19, 38, -40, -20, 89, -18, -74, 29, -10
    0x21f217, 0xecf7e5fd, 0xf4191ff7, 0x5df20d8, 0x5f37ec60, 0x1304254a, 0x59ecd826, 0xf61db6ee,
    // 30, -3, -30, 18, -32, 2, -6, -5, -11, -14, 10, 32, 19, 7, -14, 19, -17, -8, 14, 16, 11, -7, 3, -2, 13, 29, 3, -2, -20, 8, -8, -4
    0x12e2fd1e, 0xfbfa02e0, 0x200af2f5, 0x13f20713, 0x100ef8ef, 0xfe03f90b, 0xfe031d0d, 0xfcf808ec,
    // -39, -23, -18, 6, -8, -25, 5, -10, -35, 44, 16, -8, -14, 5, -9, 14, 12, -13, -5, 22, 26, 38, 11, 11, -7, -30, 8, -1, 16, -11, -10, 22
    0x6eee9d9, 0xf605e7f8, 0xf8102cdd, 0xef705f2, 0x16fbf30c, 0xb0b261a, 0xff08e2f9, 0x16f6f510,
    // -9, -18, 2, -5, -4, -2, -4, -1, 5, 5, 0, -1, -2, 3, -18, 2, 17, -21, -6, -24, -3, -7, -5, 6, -9, 13, -12, -2, 15, 2, -8, 4
    0xfb02eef7, 0xfffcfefc, 0xff000505, 0x2ee03fe, 0xe8faeb11, 0x6fbf9fd, 0xfef40df7, 0x4f8020f,
    // 1, -4, 1, 3, -4, 0, -2, 0, -1, 2, -10, -1, 4, -3, -4, 3, 15, 8, 6, -13, -12, -3, -3, 5, 9, 3, -10, 3, 1, 5, -35, 0
    0x301fc01, 0xfe00fc, 0xfff602ff, 0x3fcfd04, 0xf306080f, 0x5fdfdf4, 0x3f60309, 0xdd0501,
    // 10, 35, -34, 0, -34, 23, -33, 37, -6, 15, -56, -9, 34, 0, -109, 38, -3, 3, -8, -2, 3, 2, -8, 6, -11, 6, -17, -1, 9, 0, -14, 5
    0xde230a, 0x25df17de, 0xf7c80ffa, 0x26930022, 0xfef803fd, 0x6f80203, 0xffef06f5, 0x5f20009,
    // 0, -3, -4, 3, 2, -4, -6, -1, 5, -2, -4, 2, 3, 1, -3, 3, -1, 6, -12, 11, -7, 0, -5, 4, 15, 2, -13, -2, 11, 1, -19, 3
    0x3fcfd00, 0xfffafc02, 0x2fcfe05, 0x3fd0103, 0xbf406ff, 0x4fb00f9, 0xfef3020f, 0x3ed010b,
    // -3, 11, -1, 9, -3, -1, -4, 1, 6, 6, -4, 4, 11, -1, -5, 0, -15, -13, -13, -1, 9, -4, -4, 2, 14, -18, -9, 10, 14, 2, 6, 13
    0x9ff0bfd, 0x1fcfffd, 0x4fc0606, 0xfbff0b, 0xfff3f3f1, 0x2fcfc09, 0xaf7ee0e, 0xd06020e,
    // 6, 13, -1, 5, 13, 8, 0, 11, -21, 24, 3, -1, -11, -14, -10, -4, -2, -18, 5, -7, 29, -5, -3, -7, 17, 5, -2, 1, 4, 10, 5, -1
    0x5ff0d06, 0xb00080d, 0xff0318eb, 0xfcf6f2f5, 0xf905eefe, 0xf9fdfb1d, 0x1fe0511, 0xff050a04,
    // 19, 5, -6, -1, 18, 12, -6, -2, 41, -34, -8, 9, -2, 13, -35, 19, 35, 64, -27, 36, 83, 89, 6, 3, -87, 36, 10, 4, -82, -22, -84, -4
    0xfffa0513, 0xfefa0c12, 0x9f8de29, 0x13dd0dfe, 0x24e54023, 0x3065953, 0x40a24a9, 0xfcaceaae,
    // -7, 1, 13, 31, -20, -12, -5, -5, 60, 34, 3, -22, -49, 12, -12, -2, -2, -4, -14, 5, 13, 4, -2, -3, 0, -21, -16, 20, 19, 15, -2, 2
    0x1f0d01f9, 0xfbfbf4ec, 0xea03223c, 0xfef40ccf, 0x5f2fcfe, 0xfdfe040d, 0x14f0eb00, 0x2fe0f13,
    // -9, 11, 6, -4, -3, 17, 8, 2, -11, 29, -1, 3, -8, -7, 5, -9, -14, -6, -5, 13, -9, -19, -11, -3, 7, 13, -4, 10, -25, 22, 12, -8
    0xfc060bf7, 0x20811fd, 0x3ff1df5, 0xf705f9f8, 0xdfbfaf2, 0xfdf5edf7, 0xafc0d07, 0xf80c16e7,
    // 24, 10, 31, -2, 23, -17, 16, -5, -11, 46, -7, -19, 0, 10, 5, -9, -16, 9, -2, 12, -13, -2, 10, 44, -6, -7, 2, 8, 47, -23, 12, -1
    0xfe1f0a18, 0xfb10ef17, 0xedf92ef5, 0xf7050a00, 0xcfe09f0, 0x2c0afef3, 0x802f9fa, 0xff0ce92f,
    // 9, 9, -17, -7, 6, 0, -4, 17, -8, -9, 5, 16, 51, 1, 9, 11, -21, -38, -18, 20, 43, -46, 17, 29, -14, 46, -34, -21, -32, -36, 10, -19
    0xf9ef0909, 0x11fc0006, 0x1005f7f8, 0xb090133, 0x14eedaeb, 0x1d11d22b, 0xebde2ef2, 0xed0adce0,
    // 117, 25, -70, 12, 21, 83, -7, -43, -11, 41, 89, -32, 41, 17, 12, 15, -25, 13, -5, -22, 50, 19, 6, 17, 5, -34, -29, 11, 17, -24, -32, -15
    0xcba1975, 0xd5f95315, 0xe05929f5, 0xf0c1129, 0xeafb0de7, 0x11061332, 0xbe3de05, 0xf1e0e811,
    // -14, 4, -2, 4, 29, -22, 1, -4, 12, 20, 5, -16, 15, -1, 19, 18, 23, -25, -6, 3, -72, 14, 4, 5, -59, 13, -13, -9, -29, -6, 43, -34
    0x4fe04f2, 0xfc01ea1d, 0xf005140c, 0x1213ff0f, 0x3fae717, 0x5040eb8, 0xf7f30dc5, 0xde2bfae3,
    // 13, 23, 3, -17, 20, 19, -19, 8, -5, -9, -31, 54, 31, 29, 16, -22, 13, 19, 8, 16, -16, 10, 12, 1, -15, 11, 17, -10, -11, 14, -6, -15
    0xef03170d, 0x8ed1314, 0x36e1f7fb, 0xea101d1f, 0x1008130d, 0x10c0af0, 0xf6110bf1, 0xf1fa0ef5,
    // -40, 31, 16, 21, 17, -24, 9, 7, -12, -40, -10, -3, -17, -19, -6, -12, 10, 19, 25, 5, -8, 15, 4, -5, -6, -25, 10, -8, -10, 3, -4, 12
    0x15101fd8, 0x709e811, 0xfdf6d8f4, 0xf4faedef, 0x519130a, 0xfb040ff8, 0xf80ae7fa, 0xcfc03f6,
    // 0, -39, 18, 15, -15, -8, -10, 28, 54, -6, -9, 1, -3, 11, 60, 6, -13, -12, -30, 46, 42, 4, -6, 0, 32, 52, -47, -94, -8, -72, -47, 53
    0xf12d900, 0x1cf6f8f1, 0x1f7fa36, 0x63c0bfd, 0x2ee2f4f3, 0xfa042a, 0xa2d13420, 0x35d1b8f8,
    // -10, -4, 54, -8, 3, 3, -13, 5, 16, -21, 6, -23, -2, -1, 47, 24, 7, -3, 5, 6, -13, -3, 0, -2, -14, -27, 0, -15, -20, 11, 17, 4
    0xf836fcf6, 0x5f30303, 0xe906eb10, 0x182ffffe, 0x605fd07, 0xfe00fdf3, 0xf100e5f2, 0x4110bec,
    // 26, -33, 23, -4, 2, -10, -2, -7, -13, -23, -9, -32, -23, -36, 38, 17, 3, 5, 16, -27, 2, 13, -3, -10, -8, -23, -15, 7, -10, 2, 10, -1
    0xfc17df1a, 0xf9fef602, 0xe0f7e9f3, 0x1126dce9, 0xe5100503, 0xf6fd0d02, 0x7f1e9f8, 0xff0a02f6,
    // 12, -22, -9, -5, 5, 0, 8, 16, 10, 29, -9, -8, 26, -13, 33, -10, -33, -17, -32, 20, -22, 15, 20, -35, -5, -31, -53, -24, 6, -13, -29, 0
    0xfbf7ea0c, 0x10080005, 0xf8f71d0a, 0xf621f31a, 0x14e0efdf, 0xdd140fea, 0xe8cbe1fb, 0xe3f306,
    // -18, -16, 5, -9, 10, 36, 0, -3, 31, -3, -10, -10, -4, -11, -20, -6, -15, 11, 6, 13, -5, -3, -3, -15, -46, 27, 2, -31, 1, 6, 1, 9
    0xf705f0ee, 0xfd00240a, 0xf6f6fd1f, 0xfaecf5fc, 0xd060bf1, 0xf1fdfdfb, 0xe1021bd2, 0x9010601,
    // 22, -37, 31, -21, -23, -43, 14, 53, 74, -27, -64, -38, -67, 56, -84, -2, -11, 3, -13, 30, -69, 57, 16, 2, -44, -24, 15, 7, 15, 26, 22, 8
    0xeb1fdb16, 0x350ed5e9, 0xdac0e54a, 0xfeac38bd, 0x1ef303f5, 0x21039bb, 0x70fe8d4, 0x8161a0f,
    // -5, 5, -7, 21, -16, 0, 9, 3, 5, 44, -6, 0, -10, 8, 0, -24, -4, -10, 9, -12, 4, 0, 14, -26, -21, 2, -8, -19, 11, 8, 11, -3
    0x15f905fb, 0x30900f0, 0xfa2c05, 0xe80008f6, 0xf409f6fc, 0xe60e0004, 0xedf802eb, 0xfd0b080b,
    // -12, -16, 4, -5, -16, 14, 13, 0, -8, -25, 12, -16, -32, 0, -16, 0, -13, 15, -12, 5, -16, 20, -4, 4, 4, -33, -8, 12, 27, -8, 23, 10
    0xfb04f0f4, 0xd0ef0, 0xf00ce7f8, 0xf000e0, 0x5f40ff3, 0x4fc14f0, 0xcf8df04, 0xa17f81b,
    // -29, 17, 11, 11, -13, 38, 9, 10, 10, -28, 1, 14, 20, -5, -19, 17, 0, 4, -3, 1, -9, -4, -2, 1, -6, -3, -2, 5, 15, 4, -1, 8
    0xb0b11e3, 0xa0926f3, 0xe01e40a, 0x11edfb14, 0x1fd0400, 0x1fefcf7, 0x5fefdfa, 0x8ff040f,
    // -25, -1, -11, 2, -25, 22, 1, 13, -5, -35, -8, 4, 3, 9, 5, 12, 21, -25, 25, -67, -23, -99, 2, -8, 0, 77, 8, -33, -89, -11, -24, -15
    0x2f5ffe7, 0xd0116e7, 0x4f8ddfb, 0xc050903, 0xbd19e715, 0xf8029de9, 0xdf084d00, 0xf1e8f5a7,
    // -13, 7, -2, -17, 7, -9, -10, 7, -34, -2, -1, 8, -5, 3, -14, 8, 3, -1, -4, 11, -17, 2, 0, 3, 13, -10, -6, -3, 2, 5, 3, 4
    0xeffe07f3, 0x7f6f707, 0x8fffede, 0x8f203fb, 0xbfcff03, 0x30002ef, 0xfdfaf60d, 0x4030502,
    // 7, -13, 2, -11, 1, -1, -2, -1, 16, 4, 6, 0, 0, -3, -15, 12, -6, 3, -4, -3, -11, -11, 8, -1, 4, 13, 1, -9, 8, 1, 7, 1
    0xf502f307, 0xfffeff01, 0x60410, 0xcf1fd00, 0xfdfc03fa, 0xff08f5f5, 0xf7010d04, 0x1070108,
    // -13, 0, 12, 14, -1, 32, 6, -10, 19, 15, -11, 15, -6, 5, 44, 17, -41, -12, -9, 6, 4, 20, 5, 12, -13, 1, -9, 28, 7, -36, 36, 10
    0xe0c00f3, 0xf60620ff, 0xff50f13, 0x112c05fa, 0x6f7f4d7, 0xc051404, 0x1cf701f3, 0xa24dc07,
    // -14, 8, -38, 2, 1, 5, -2, -10, 5, -12, 4, 15, 18, 2, 24, 9, -29, 3, 6, 20, 9, -23, 10, -6, 1, -22, -19, 3, -38, -3, -16, -8
    0x2da08f2, 0xf6fe0501, 0xf04f405, 0x9180212, 0x140603e3, 0xfa0ae909, 0x3edea01, 0xf8f0fdda,
    // 46, 27, -17, -21, -117, -8, -40, -14, 17, 52, 15, -41, 91, 44, -111, 23, -47, -8, 14, -6, 31, 7, 5, 11, -18, -12, -4, 16, -7, -15, -19, -5
    0xebef1b2e, 0xf2d8f88b, 0xd70f3411, 0x17912c5b, 0xfa0ef8d1, 0xb05071f, 0x10fcf4ee, 0xfbedf1f9,
    // -14, 7, -3, 8, -2, -13, 5, -2, 10, 10, 10, -4, -12, 14, -3, 4, 5, -19, -3, 21, -32, -7, 6, -3, -5, 25, 10, 7, -31, -9, -19, -23
    0x8fd07f2, 0xfe05f3fe, 0xfc0a0a0a, 0x4fd0ef4, 0x15fded05, 0xfd06f9e0, 0x70a19fb, 0xe9edf7e1,
    // -7, 4, -9, -1, 1, -9, -6, -8, -4, 17, -3, 22, 5, 22, -11, -8, 5, 16, -17, -9, 12, -33, -9, -2, -9, -34, 5, 1, 7, -1, -16, -1
    0xfff704f9, 0xf8faf701, 0x16fd11fc, 0xf8f51605, 0xf7ef1005, 0xfef7df0c, 0x105def7, 0xfff0ff07,
    // 26, 4, 16, 15, -2, -3, -8, 5, 10, 11, 28, -12, 20, 32, -14, 2, -6, 4, 16, -5, -13, 15, 1, 7, 16, -7, 10, 4, -6, 8, -11, -4
    0xf10041a, 0x5f8fdfe, 0xf41c0b0a, 0x2f22014, 0xfb1004fa, 0x7010ff3, 0x40af910, 0xfcf508fa,
    // -23, -5, -19, -20, 50, -23, -10, -18, -33, 33, 2, -24, 16, 15, 22, 2, 6, -9, 10, -74, -86, 15, 14, 51, 23, -27, -73, 29, 106, -63, 41, -8
    0xecedfbe9, 0xeef6e932, 0xe80221df, 0x2160f10, 0xb60af706, 0x330e0faa, 0x1db7e517, 0xf829c16a,
    // -22, -31, -39, -4, 10, -10, 2, -24, -11, -8, -21, -3, -6, 7, 11, 7, -8, -11, -14, -6, -1, -5, -3, -11, -15, 14, -13, 7, -11, -2, 23, -5
    0xfcd9e1ea, 0xe802f60a, 0xfdebf8f5, 0x70b07fa, 0xfaf2f5f8, 0xf5fdfbff, 0x7f30ef1, 0xfb17fef5,
    // -6, 6, 21, -15, 31, 3, 1, 5, 13, 27, 12, 5, 39, 14, -3, 13, -4, -19, 3, -4, -20, 13, 10, 0, -5, -6, 12, -20, -11, -4, 22, 11
    0xf11506fa, 0x501031f, 0x50c1b0d, 0xdfd0e27, 0xfc03edfc, 0xa0dec, 0xec0cfafb, 0xb16fcf5,
};
static const uint embedded_encoder2_ResidualBlock_0_body_conv_dw_bias_dwords[8] = {
    // 0.01477, -0.0422, 0.002865, 0.0509, -0.01488, -0.005123, -0.03116, -0.03043, 0.004547, 0.0703, 0.0442, -0.00512, 0.08307, -0.004925, -0.003809, 0.02423
    0xa9672390, 0x2a8419de, 0x9d3fa39e, 0xa7caa7fa, 0x2c801ca8, 0x9d3e29a8, 0x9d0b2d51, 0x26349bcd,
};
static const uint embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 10, 29, -77, 69, -53, -75, 54, 17, 23, 8, -21, -50, 37, -19, 37, -78, 33, 46, 38, -40, -81, -15, 10, -20, 75, 24, 27, 44, -8, 27, 40, -13
    0x45b31d0a, 0x1136b5cb, 0xceeb0817, 0xb225ed25, 0xd8262e21, 0xec0af1af, 0x2c1b184b, 0xf3281bf8,
    // 37, 9, -33, -37, -30, -25, -104, -46, -34, -14, -18, 8, 9, 95, 22, -25, 1, -6, -37, -5, -85, 41, 14, 2, -90, 51, 22, -10, -25, 40, -25, -47
    0xdbdf0925, 0xd298e7e2, 0x8eef2de, 0xe7165f09, 0xfbdbfa01, 0x20e29ab, 0xf61633a6, 0xd1e728e7,
    // 17, -11, 15, 57, -101, -79, 66, -5, -8, -87, -52, 41, 57, -2, -50, -62, 37, -22, 2, 3, 32, 27, 58, 49, -11, 24, -28, -30, -18, -88, -46, 43
    0x390ff511, 0xfb42b19b, 0x29cca9f8, 0xc2cefe39, 0x302ea25, 0x313a1b20, 0xe2e418f5, 0x2bd2a8ee,
    // -31, -47, 2, 11, -13, 22, 93, -31, 27, 7, -27, 9, -1, -70, 47, 57, 21, -27, -56, -4, -49, 43, -51, 60, 13, -40, 59, 9, 18, -21, 20, 26
    0xb02d1e1, 0xe15d16f3, 0x9e5071b, 0x392fbaff, 0xfcc8e515, 0x3ccd2bcf, 0x93bd80d, 0x1a14eb12,
    // -81, -32, -13, 62, 14, 17, 73, 29, -11, 40, 65, -18, 17, -57, -69, -3, 62, 28, -8, -31, -45, -2, -73, -19, 25, 8, -10, 1, -4, 44, 26, -4
    0x3ef3e0af, 0x1d49110e, 0xee4128f5, 0xfdbbc711, 0xe1f81c3e, 0xedb7fed3, 0x1f60819, 0xfc1a2cfc,
    // -38, -7, 78, -13, -4, 17, -48, 34, -25, 4, -33, -53, 37, 45, -21, 90, 4, 49, 0, 54, 32, -16, 5, -49, -4, -24, 120, 36, -55, 49, 120, -108
    0xf34ef9da, 0x22d011fc, 0xcbdf04e7, 0x5aeb2d25, 0x36003104, 0xcf05f020, 0x2478e8fc, 0x947831c9,
    // 4, -102, 5, -7, 33, -27, 54, 27, -11, 4, 21, -5, 7, 20, 40, -8, 62, -46, 41, 62, -24, -25, -51, -44, -53, 12, 44, 40, -35, -2, -73, 93
    0xf9059a04, 0x1b36e521, 0xfb1504f5, 0xf8281407, 0x3e29d23e, 0xd4cde7e8, 0x282c0ccb, 0x5db7fedd,
    // 20, 17, -101, 20, -51, 100, 62, -96, 29, -42, -20, 3, 1, 19, 31, 78, 76, 15, -66, 45, 69, -10, -6, -52, -2, 65, 77, -30, -19, -78, 52, -48
    0x149b1114, 0xa03e64cd, 0x3ecd61d, 0x4e1f1301, 0x2dbe0f4c, 0xccfaf645, 0xe24d41fe, 0xd034b2ed,
    // -9, 119, -5, 8, -33, 24, -45, -24, 11, -8, -6, 12, -7, -7, -41, -4, 26, -6, 103, -9, 14, 61, 9, -30, -44, -26, 14, 25, 22, 0, -23, -10
    0x8fb77f7, 0xe8d318df, 0xcfaf80b, 0xfcd7f9f9, 0xf767fa1a, 0xe2093d0e, 0x190ee6d4, 0xf6e90016,
    // 0, -17, 20, -4, -98, -1, -33, 34, -24, 41, -18, -1, -21, -92, -7, -18, 23, 8, -28, 28, 33, 31, -51, 6, -95, -35, -2, -39, -20, 92, 10, -20
    0xfc14ef00, 0x22dfff9e, 0xffee29e8, 0xeef9a4eb, 0x1ce40817, 0x6cd1f21, 0xd9fedda1, 0xec0a5cec,
    // -27, -26, 9, 11, -65, 18, 25, -7, 36, 32, 9, -1, -4, -26, -8, -8, -47, 3, 20, -128, -39, -38, 37, -55, 36, -89, 66, -94, -83, -98, 14, -2
    0xb09e6e5, 0xf91912bf, 0xff092024, 0xf8f8e6fc, 0x801403d1, 0xc925dad9, 0xa242a724, 0xfe0e9ead,
    // -22, -5, 68, -20, 35, -74, -56, 64, -21, 33, 19, 25, -4, -38, -27, -70, 30, 30, -44, -16, 24, 1, -40, 16, -105, -26, -16, -9, -15, 6, -22, -16
    0xec44fbea, 0x40c8b623, 0x191321eb, 0xbae5dafc, 0xf0d41e1e, 0x10d80118, 0xf7f0e697, 0xf0ea06f1,
    // -36, 19, -8, 37, -3, -31, -86, -75, -35, 32, 54, -8, 41, 0, 77, -25, 46, 72, -16, -14, 71, -59, -31, 27, 24, -36, 5, 25, -10, -13, 35, 20
    0x25f813dc, 0xb5aae1fd, 0xf83620dd, 0xe74d0029, 0xf2f0482e, 0x1be1c547, 0x1905dc18, 0x1423f3f6,
    // -39, 7, 29, 37, 35, 28, 92, 36, 35, 10, 5, -8, -15, -76, 7, 17, -44, 0, -17, 9, 34, -26, -7, 11, -99, 11, 21, 1, -1, -50, -4, -20
    0x251d07d9, 0x245c1c23, 0xf8050a23, 0x1107b4f1, 0x9ef00d4, 0xbf9e622, 0x1150b9d, 0xecfcceff,
    // -23, 74, -56, -37, -41, -80, 79, 81, 10, 4, -1, 14, -62, 96, 71, 71, 13, 10, -66, -48, 25, -1, 46, 32, -108, 2, -7, 11, 2, -39, -69, -4
    0xdbc84ae9, 0x514fb0d7, 0xeff040a, 0x474760c2, 0xd0be0a0d, 0x202eff19, 0xbf90294, 0xfcbbd902,
    // -17, 25, 53, 10, 73, -30, 94, -55, 0, 46, -31, -6, -32, 24, -40, -27, -18, -13, -57, 31, 34, 49, 44, -31, -81, -38, -9, -32, -2, 47, 12, 31
    0xa3519ef, 0xc95ee249, 0xfae12e00, 0xe5d818e0, 0x1fc7f3ee, 0xe12c3122, 0xe0f7daaf, 0x1f0c2ffe,
};
static const uint embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias_dwords[16] = {
    // -0.03207, -0.2411, 0.02237, 0.02759, 0.02074, 0.0618, 0.03113, 0.0397, 0.0393, 0.04797, 0.0929, -0.01079, 0.02655, 0.01768, 0.02144, 0.1098
    0xb3b7a81b, 0x271025ba, 0x2be9254f, 0x291527f8, 0x2a242908, 0xa1862df2, 0x248726cc, 0x2f07257d,
    // 0.04428, -0.01656, 0.002731, -0.1897, 0.00222, -0.08276, 0.05405, -0.00327, 0.0785, -0.297, 0.05786, 0.002361, -0.11285, -0.1055, 0.0815, 0.011635
    0xa43d29ab, 0xb2121998, 0xad4c188c, 0x9ab22aeb, 0xb4c12d06, 0x18d62b68, 0xaec1af39, 0x21f52d37,
};
static const uint embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -5, 13, 85, -29, 8, -38, 95, 17, -31, 57, -30, 18, 104, 3, 22, -15, -33, -1, 22, -42, -26, -1, 24, -10, 65, 13, -23, 21, 10, 40, 28, 74
    0xe3550dfb, 0x115fda08, 0x12e239e1, 0xf1160368, 0xd616ffdf, 0xf618ffe6, 0x15e90d41, 0x4a1c280a,
    // -21, -37, 85, 8, -6, -89, 12, 39, 11, 11, -78, -38, -55, 31, 22, -9, 44, -70, -7, -4, -19, 43, -56, -69, 88, 44, -66, 30, -35, 5, -51, 10
    0x855dbeb, 0x270ca7fa, 0xdab20b0b, 0xf7161fc9, 0xfcf9ba2c, 0xbbc82bed, 0x1ebe2c58, 0xacd05dd,
    // 49, 41, -9, 1, -4, -6, 30, 61, -11, -22, 25, -18, -11, 94, 1, -72, 40, -14, -14, -28, -12, 127, 51, 48, 16, -39, 57, 62, -36, -32, -44, 29
    0x1f72931, 0x3d1efafc, 0xee19eaf5, 0xb8015ef5, 0xe4f2f228, 0x30337ff4, 0x3e39d910, 0x1dd4e0dc,
    // -79, -43, 105, -87, -72, 22, -11, 41, -63, 67, 32, -33, 23, -20, 1, -77, 21, -99, 26, 61, -44, -27, 55, 35, -61, -48, -27, -10, -34, 43, -15, -82
    0xa969d5b1, 0x29f516b8, 0xdf2043c1, 0xb301ec17, 0x3d1a9d15, 0x2337e5d4, 0xf6e5d0c3, 0xaef12bde,
    // 39, 17, -43, 26, 47, 36, -8, 44, 3, 15, -68, 6, -30, -42, -11, 79, 69, 62, 89, 18, -14, -16, 67, 40, 1, 11, 50, 47, 33, -54, -14, -44
    0x1ad51127, 0x2cf8242f, 0x6bc0f03, 0x4ff5d6e2, 0x12593e45, 0x2843f0f2, 0x2f320b01, 0xd4f2ca21,
    // 64, -37, -23, -9, 34, 27, 64, 28, 20, -3, 14, -43, 72, 41, 59, -10, 20, 30, 5, 91, 23, 63, 12, -50, -42, 17, 93, -37, 21, 29, 34, -35
    0xf7e9db40, 0x1c401b22, 0xd50efd14, 0xf63b2948, 0x5b051e14, 0xce0c3f17, 0xdb5d11d6, 0xdd221d15,
    // 5, 30, 55, 29, -15, 45, -1, 17, 4, -38, 61, 20, -19, -37, 40, -11, 46, 18, 19, -84, -66, 17, -37, 77, -44, -3, 9, 9, 49, -9, -2, 33
    0x1d371e05, 0x11ff2df1, 0x143dda04, 0xf528dbed, 0xac13122e, 0x4ddb11be, 0x909fdd4, 0x21fef731,
    // -18, -36, -11, 29, -12, 3, 48, 31, -29, 59, -3, -31, -8, -62, 43, -23, 48, -15, 6, 40, 55, -60, -19, -11, -23, 35, 17, -24, 9, 0, 3, 9
    0x1df5dcee, 0x1f3003f4, 0xe1fd3be3, 0xe92bc2f8, 0x2806f130, 0xf5edc437, 0xe81123e9, 0x9030009,
    // 55, -19, 0, 55, 20, 26, -56, 52, -5, -4, -14, 11, 71, 2, -13, 32, -120, 61, 3, -18, -21, -2, -22, 6, -54, 2, -48, -55, 20, -41, -95, -19
    0x3700ed37, 0x34c81a14, 0xbf2fcfb, 0x20f30247, 0xee033d88, 0x6eafeeb, 0xc9d002ca, 0xeda1d714,
    // 19, -82, 51, 5, 4, -52, -24, -23, -22, 48, -43, -1, 25, 39, 8, 33, 6, 17, -11, 49, 23, 10, 28, 2, 37, 0, -4, -43, -9, 26, 41, -30
    0x533ae13, 0xe9e8cc04, 0xffd530ea, 0x21082719, 0x31f51106, 0x21c0a17, 0xd5fc0025, 0xe2291af7,
    // -26, 45, 22, 66, -44, 14, 42, 61, 15, -44, -52, -61, 21, 2, 102, 19, 75, -46, -15, -97, -63, -61, -75, 106, -28, 26, 41, 68, -42, -108, 10, 69
    0x42162de6, 0x3d2a0ed4, 0xc3ccd40f, 0x13660215, 0x9ff1d24b, 0x6ab5c3c1, 0x44291ae4, 0x450a94d6,
    // -69, 47, -66, 92, 0, 17, 3, -9, 82, -74, -21, -21, 71, 45, -45, -14, -56, -73, 4, -22, 8, -89, 29, 27, 11, 36, 13, 99, -79, -69, 3, 39
    0x5cbe2fbb, 0xf7031100, 0xebebb652, 0xf2d32d47, 0xea04b7c8, 0x1b1da708, 0x630d240b, 0x2703bbb1,
    // 6, 17, -34, -53, 10, 18, 33, 6, -5, 0, -54, 23, -1, -6, 19, 61, -7, -3, -50, 24, 31, -31, -23, 13, 5, -73, 32, -1, -2, 39, -12, 16
    0xcbde1106, 0x621120a, 0x17ca00fb, 0x3d13faff, 0x18cefdf9, 0xde9e11f, 0xff20b705, 0x10f427fe,
    // 13, -21, 11, -30, 16, -15, -36, 6, 5, 7, 17, -121, 12, -15, -3, 25, -9, 32, -13, 23, -18, 18, 4, -16, 47, 8, -2, 24, 48, -31, -7, -3
    0xe20beb0d, 0x6dcf110, 0x87110705, 0x19fdf10c, 0x17f320f7, 0xf00412ee, 0x18fe082f, 0xfdf9e130,
    // 6, 38, 51, 28, -21, 5, -10, -43, -31, 1, -91, -33, 14, -7, -16, 6, -14, -28, 7, -4, -48, 11, 17, 12, -29, 22, -26, 22, -24, -76, 38, -2
    0x1c332606, 0xd5f605eb, 0xdfa501e1, 0x6f0f90e, 0xfc07e4f2, 0xc110bd0, 0x16e616e3, 0xfe26b4e8,
    // -78, -15, -93, -23, -103, 28, 6, 25, 34, -41, -53, -21, -7, 1, -27, -13, -7, -104, 98, 65, 60, -33, 26, -67, -13, 62, 37, -10, -97, 4, -28, -38
    0xe9a3f1b2, 0x19061c99, 0xebcbd722, 0xf3e501f9, 0x416298f9, 0xbd1adf3c, 0xf6253ef3, 0xdae4049f,
};
static const uint embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias_dwords[8] = {
    // -0.1147, 0.00098, -0.0738, 0.0858, -0.10236, -0.006256, -0.01648, 0.001516, 0.05667, -0.06366, -0.0976, -0.0004025, -0.000179, -0.017, 0.0601, 0.1231
    0x1404af57, 0x2d7eacb9, 0x9e68ae8d, 0x1636a438, 0xac132b41, 0x8e98ae3f, 0xa45a89de, 0x2fe12bb1,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass1(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 16), // threadGroupSliceSize
        uint3(1920, 1080, 16), // storageSize
        uint3(16, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.014811458997428417, storage_quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0055527822114527225, storage_embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_0_body_conv_dw_bias = { embedded_encoder2_ResidualBlock_0_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_0_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_0_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.00551386596634984, storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias = { embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.00546378456056118, storage_embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias = { embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias };
    
    // fused_quantized_NHWC_/encoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_2 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_2 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 16);
    const uint3 groupSize_slice_2 = uint3(64, 1, 16);
    const uint3 storageSize_slice_2 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_2 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_2 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_2 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_2 = dot(groupStart_slice_2, tensorByteStrides_slice_2);
    const float quantizationScale_slice_2 = 0.01813533715903759;
    const RWBufferStorage storage_slice_2 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_2 = { logicalSize_slice_2, groupStart_slice_2, groupSize_slice_2, storageSize_slice_2, tensorByteStrides_slice_2, paddingBegin_slice_2, paddingEnd_slice_2, threadGroupByteOffsetInTensor_slice_2 + 33177600, quantizationScale_slice_2, storage_slice_2 };
    // ConvNextBlock (16, 1080, 1920), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,) -> (16, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    ConvNextBlock(39.691229419086014, 0.025194482877850533, 49.80184507790761, 0.02007957734167576, quantized_NHWC__encoder2_ResidualBlock_0_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__encoder2_ResidualBlock_0_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_0_body_conv_dw_bias, embedded__encoder2_ResidualBlock_0_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_0_body_conv_pw_expand_bias, embedded__encoder2_ResidualBlock_0_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_0_body_conv_pw_contract_bias, slice_2, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_1
#ifdef MLSR_PASS_1_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass1_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/encoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_3 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_3 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_3 = uint3(32, 1, 16);
    const uint3 storageSize_slice_3 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_3 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_3 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_3 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_3 = dot(groupStart_slice_3, tensorByteStrides_slice_3);
    const float quantizationScale_slice_3 = 0.01813533715903759;
    const RWBufferStorage storage_slice_3 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_3 = { logicalSize_slice_3, groupStart_slice_3, groupSize_slice_3, storageSize_slice_3, tensorByteStrides_slice_3, paddingBegin_slice_3, paddingEnd_slice_3, threadGroupByteOffsetInTensor_slice_3 + 33177600, quantizationScale_slice_3, storage_slice_3 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_3, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_1_POST


#ifdef MLSR_PASS_2
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/ConvNextBlock.hlsli"

static const uint embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 8, 16, 12, 4, 1, 0, -5, -5, -2, 3, -6, 8, 10, -1, -12, -4, 22, 18, 3, -5, 12, -3, 0, 8, -8, 4, -3, 2, -10, -9, -23, -10
    0x40c1008, 0xfbfb0001, 0x8fa03fe, 0xfcf4ff0a, 0xfb031216, 0x800fd0c, 0x2fd04f8, 0xf6e9f7f6,
    // 6, 0, 1, -2, 11, 4, 4, -2, 8, -3, -8, 4, 14, -4, -16, -8, 21, 15, 7, 0, 3, 1, -3, 5, -6, 11, 0, 3, -14, 1, -17, -2
    0xfe010006, 0xfe04040b, 0x4f8fd08, 0xf8f0fc0e, 0x70f15, 0x5fd0103, 0x3000bfa, 0xfeef01f2,
    // 42, -9, 48, -17, -24, 60, -5, 15, -23, 34, -24, -5, -42, -9, -93, 27, 2, -10, -20, -2, 31, 2, 12, 6, 6, 12, 8, -4, 14, -1, -14, 4
    0xef30f72a, 0xffb3ce8, 0xfbe822e9, 0x1ba3f7d6, 0xfeecf602, 0x60c021f, 0xfc080c06, 0x4f2ff0e,
    // 7, -1, -5, -2, 6, 3, 3, 3, -4, -4, -2, 0, 8, 2, -1, -11, 9, -16, -18, -8, 32, 9, 17, 7, -1, 3, 5, -11, 11, -3, 3, -8
    0xfefbff07, 0x3030306, 0xfefcfc, 0xf5ff0208, 0xf8eef009, 0x7110920, 0xf50503ff, 0xf803fd0b,
    // 1, -15, 0, -4, 16, -2, 10, -3, 1, 7, 5, -11, 0, 2, -28, -2, 4, 11, -7, -1, 36, -12, 4, -4, 1, -2, -13, 7, 12, -1, -16, -14
    0xfc00f101, 0xfd0afe10, 0xf5050701, 0xfee40200, 0xfff90b04, 0xfc04f424, 0x7f3fe01, 0xf2f0ff0c,
    // -26, 16, -3, -19, 33, -15, 11, -29, -10, -10, -29, -11, -2, 2, 18, -18, 10, -9, -18, -1, -2, -3, 5, 0, -6, 2, -5, 2, -2, -7, -17, -6
    0xedfd10e6, 0xe30bf121, 0xf5e3f6f6, 0xee1202fe, 0xffeef70a, 0x5fdfe, 0x2fb02fa, 0xfaeff9fe,
    // -3, 24, -5, -7, 25, -15, -1, -25, 21, -27, -22, -1, 20, 15, 2, -11, -50, 0, 44, -11, -66, -3, 13, -51, 18, -67, -46, 19, 57, 5, -5, 19
    0xf9fb18fd, 0xe7fff119, 0xffeae515, 0xf5020f14, 0xf52c00ce, 0xcd0dfdbe, 0x13d2bd12, 0x13fb0539,
    // -6, 4, -16, -18, -7, -30, 9, -11, -16, 19, -20, -13, 5, 6, 1, -11, 11, -1, -7, -1, 13, -6, 4, 1, 5, -1, -9, 3, 1, -4, -16, -7
    0xeef004fa, 0xf509e2f9, 0xf3ec13f0, 0xf5010605, 0xfff9ff0b, 0x104fa0d, 0x3f7ff05, 0xf9f0fc01,
    // 25, 2, -11, -13, -16, -18, 6, -31, 13, -6, -24, -3, 0, -4, 10, -14, 15, 5, -25, -4, -19, -17, 17, 5, -6, 23, -6, 10, 2, -13, -11, -12
    0xf3f50219, 0xe106eef0, 0xfde8fa0d, 0xf20afc00, 0xfce7050f, 0x511efed, 0xafa17fa, 0xf4f5f302,
    // 1, 28, 37, 9, -22, -17, -7, -1, -10, 1, -4, 8, -8, 8, 1, 12, -16, 43, 8, 8, -6, -37, -8, 17, -11, 9, 2, 4, -11, -1, -5, 7
    0x9251c01, 0xfff9efea, 0x8fc01f6, 0xc0108f8, 0x8082bf0, 0x11f8dbfa, 0x40209f5, 0x7fbfff5,
    // -7, -8, -8, 4, -2, 9, -1, 2, -2, -3, 0, 0, 28, 6, 15, 1, 7, 21, -16, 10, -44, -33, -20, 7, -2, 0, 14, -1, -13, 7, -7, 18
    0x4f8f8f9, 0x2ff09fe, 0xfdfe, 0x10f061c, 0xaf01507, 0x7ecdfd4, 0xff0e00fe, 0x12f907f3,
    // -16, -38, 15, -93, 21, 1, -41, -40, 24, -11, -1, 46, -97, 28, -32, -24, -16, -16, -23, 7, -10, -3, -6, 22, 27, -25, 21, -4, 32, -4, -10, 19
    0xa30fdaf0, 0xd8d70115, 0x2efff518, 0xe8e01c9f, 0x7e9f0f0, 0x16fafdf6, 0xfc15e71b, 0x13f6fc20,
    // -11, 7, -1, 12, 1, 3, -1, 6, -6, -18, 2, 5, 19, 11, 6, -2, -23, -10, -38, 5, 4, -1, -2, 19, -6, -33, 7, 1, 21, -2, -15, 10
    0xcff07f5, 0x6ff0301, 0x502eefa, 0xfe060b13, 0x5daf6e9, 0x13feff04, 0x107dffa, 0xaf1fe15,
    // -21, -6, 22, 1, 10, 10, -4, -2, -3, -16, 2, -1, 14, 8, -21, 4, 5, 9, 9, 20, 2, -13, 10, 0, -3, 4, -3, 13, -2, 2, -6, 10
    0x116faeb, 0xfefc0a0a, 0xff02f0fd, 0x4eb080e, 0x14090905, 0xaf302, 0xdfd04fd, 0xafa02fe,
    // -9, 20, -11, 10, 21, -5, 5, 6, -9, 0, -5, -5, 4, -7, 11, 3, -1, -14, -5, 3, -4, -6, 7, -3, -2, 11, -1, -3, 6, 0, -5, 2
    0xaf514f7, 0x605fb15, 0xfbfb00f7, 0x30bf904, 0x3fbf2ff, 0xfd07fafc, 0xfdff0bfe, 0x2fb0006,
    // -1, 10, 0, 7, -7, 3, -7, 6, 6, 10, 2, -3, 12, -6, 33, 19, -31, 39, 34, 2, -25, 22, 8, -8, 35, -20, 15, 21, -128, 13, 54, -73
    0x7000aff, 0x6f903f9, 0xfd020a06, 0x1321fa0c, 0x22227e1, 0xf80816e7, 0x150fec23, 0xb7360d80,
    // -8, -6, -3, -12, 23, 10, 0, 4, -2, 21, -5, -10, 20, 4, 29, 2, 6, -5, -2, 0, -2, -3, 2, 3, 2, 2, 2, -3, 2, 2, -2, -1
    0xf4fdfaf8, 0x4000a17, 0xf6fb15fe, 0x21d0414, 0xfefb06, 0x302fdfe, 0xfd020202, 0xfffe0202,
    // 8, -2, -21, 0, 17, 11, 4, -7, 4, -11, -1, -6, 9, -4, 5, 4, 1, -16, -7, -2, 3, -6, 10, -9, 3, 17, 1, -7, 13, 5, -8, -1
    0xebfe08, 0xf9040b11, 0xfafff504, 0x405fc09, 0xfef9f001, 0xf70afa03, 0xf9011103, 0xfff8050d,
    // -6, -6, -6, 5, -2, -1, -2, 3, 1, -2, -1, 1, -12, 3, 1, 6, 23, -7, 14, 12, 9, 5, 5, 1, -4, 5, 2, -3, 2, 12, 17, 1
    0x5fafafa, 0x3fefffe, 0x1fffe01, 0x60103f4, 0xc0ef917, 0x1050509, 0xfd0205fc, 0x1110c02,
    // 5, -1, -9, 4, 3, -3, -1, 9, -6, 7, -9, 1, 7, 0, 2, 4, 11, 2, 14, 8, 19, -8, 11, -4, -26, 3, 0, -4, -19, 12, 2, 5
    0x4f7ff05, 0x9fffd03, 0x1f707fa, 0x4020007, 0x80e020b, 0xfc0bf813, 0xfc0003e6, 0x5020ced,
    // 50, -33, 81, 1, 46, -14, 64, -13, -29, -30, 66, 27, -3, 26, 59, -39, 36, 12, 3, 4, 5, -1, 13, 0, 16, 6, 16, 0, 22, 11, -2, 11
    0x151df32, 0xf340f22e, 0x1b42e2e3, 0xd93b1afd, 0x4030c24, 0xdff05, 0x100610, 0xbfe0b16,
    // 11, -5, -8, 2, 10, 0, 5, 10, 6, 7, 3, -6, 5, 0, 2, 1, 14, 2, 11, -3, -2, 0, 21, 2, -32, 4, 16, -9, 14, 7, 10, 1
    0x2f8fb0b, 0xa05000a, 0xfa030706, 0x1020005, 0xfd0b020e, 0x21500fe, 0xf71004e0, 0x10a070e,
    // 11, -3, -5, -5, 1, 3, 13, 5, 0, -5, 4, 0, 18, -1, -13, 15, 10, 26, 5, -8, 21, -19, -15, -20, -11, 15, 1, 4, 11, 11, -14, -17
    0xfbfbfd0b, 0x50d0301, 0x4fb00, 0xff3ff12, 0xf8051a0a, 0xecf1ed15, 0x4010ff5, 0xeff20b0b,
    // -6, 4, 0, 5, 15, -32, 5, 14, -37, 17, 4, 6, 1, 10, -6, 1, -13, 8, 3, 1, -13, 1, -11, -4, -16, -2, -8, 7, -21, 0, 37, 9
    0x50004fa, 0xe05e00f, 0x60411db, 0x1fa0a01, 0x10308f3, 0xfcf501f3, 0x7f8fef0, 0x92500eb,
    // 23, 13, 15, 2, 17, 14, 12, 17, 21, -1, 7, 10, 23, -8, -6, 2, 39, -59, 46, 25, -66, -84, 19, -12, -13, -6, -28, 19, -45, 15, -71, -18
    0x20f0d17, 0x110c0e11, 0xa07ff15, 0x2faf817, 0x192ec527, 0xf413acbe, 0x13e4faf3, 0xeeb90fd3,
    // -20, -21, -12, -15, 20, 12, 5, -16, 10, 1, 5, 13, 24, -12, 41, 41, -8, 6, -9, -3, -29, 18, -5, -9, 0, -1, -10, 6, -9, -1, 20, -3
    0xf1f4ebec, 0xf0050c14, 0xd05010a, 0x2929f418, 0xfdf706f8, 0xf7fb12e3, 0x6f6ff00, 0xfd14fff7,
    // -28, -29, -19, -17, 7, 14, 9, -12, 3, -24, 4, 10, 11, 3, 13, 42, -28, -16, 0, -10, -13, 1, -7, -28, 2, 5, -2, -3, -20, 5, -3, 40
    0xefede3e4, 0xf4090e07, 0xa04e803, 0x2a0d030b, 0xf600f0e4, 0xe4f901f3, 0xfdfe0502, 0x28fd05ec,
    // -1, 13, -3, -15, 7, 8, -11, -7, -7, -6, 2, 1, 3, 6, 18, -3, 8, 1, -6, -17, -13, 0, -11, -10, 7, -5, 9, 2, -6, 12, 20, 9
    0xf1fd0dff, 0xf9f50807, 0x102faf9, 0xfd120603, 0xeffa0108, 0xf6f500f3, 0x209fb07, 0x9140cfa,
    // -3, 0, 0, -4, 4, 10, 2, 12, 2, -6, -4, -5, 4, 1, 34, 1, -11, 7, 0, -27, 0, 1, 4, -11, -5, -4, -2, -8, -8, -1, 11, -3
    0xfc0000fd, 0xc020a04, 0xfbfcfa02, 0x1220104, 0xe50007f5, 0xf5040100, 0xf8fefcfb, 0xfd0bfff8,
    // -28, -14, -26, -40, -86, -2, 25, 47, -4, -35, 14, -15, -19, 13, -60, -20, 9, 10, -8, -7, -11, 1, 12, -8, 7, 13, 3, -13, 12, -4, 47, 5
    0xd8e6f2e4, 0x2f19feaa, 0xf10eddfc, 0xecc40ded, 0xf9f80a09, 0xf80c01f5, 0xf3030d07, 0x52ffc0c,
    // -14, 2, 9, -3, 1, 0, -2, 3, 0, 1, 1, -4, -1, -10, 3, 1, -3, 13, 5, 5, -1, -11, -3, 3, 30, 26, 8, -1, 22, 7, 22, 17
    0xfd0902f2, 0x3fe0001, 0xfc010100, 0x103f6ff, 0x5050dfd, 0x3fdf5ff, 0xff081a1e, 0x11160716,
    // 8, -4, -3, 2, -8, 1, 3, -3, 7, 3, 1, -4, 0, 2, 13, 4, -3, 5, 9, 2, 3, -3, 2, -9, 0, 3, -5, 1, -2, -1, 0, 1
    0x2fdfc08, 0xfd0301f8, 0xfc010307, 0x40d0200, 0x20905fd, 0xf702fd03, 0x1fb0300, 0x100fffe,
    // -14, 3, 6, 13, 6, -14, 5, 0, -3, 19, 8, 2, -13, 5, -10, -1, -1, -1, 4, 1, -6, 1, 5, -1, -1, 1, -3, 1, 11, 0, 10, 5
    0xd0603f2, 0x5f206, 0x20813fd, 0xfff605f3, 0x104ffff, 0xff0501fa, 0x1fd01ff, 0x50a000b,
    // -9, 1, 3, 9, 6, 0, 7, -5, 5, 25, 11, -9, -9, -1, -15, -7, -20, -34, -25, -3, 65, 33, -13, 33, 2, 15, -14, 5, -9, 30, -36, -13
    0x90301f7, 0xfb070006, 0xf70b1905, 0xf9f1fff7, 0xfde7deec, 0x21f32141, 0x5f20f02, 0xf3dc1ef7,
    // -5, 11, 13, 6, -14, 11, 5, -6, -2, 7, 5, -3, -7, -8, 13, 0, -5, 2, 5, 2, -7, 4, 1, -3, -2, -1, -5, 0, 12, -11, 12, 0
    0x60d0bfb, 0xfa050bf2, 0xfd0507fe, 0xdf8f9, 0x20502fb, 0xfd0104f9, 0xfbfffe, 0xcf50c,
    // -6, 13, 5, 9, -16, 3, 6, -2, -3, 9, 10, 10, -4, -1, 3, 9, 2, 5, 9, 7, -13, 7, 4, -2, -8, -6, -1, 0, 13, -3, 10, 6
    0x9050dfa, 0xfe0603f0, 0xa0a09fd, 0x903fffc, 0x7090502, 0xfe0407f3, 0xfffaf8, 0x60afd0d,
    // -23, -6, -2, 23, 19, -14, 2, 14, 15, -20, 19, -13, -51, -5, -23, 0, -19, 23, -20, 24, 23, -20, -1, -13, -9, -6, 11, -22, -40, -8, 25, -24
    0x17fefae9, 0xe02f213, 0xf313ec0f, 0xe9fbcd, 0x18ec17ed, 0xf3ffec17, 0xea0bfaf7, 0xe819f8d8,
    // -2, -7, -1, -8, 21, -10, -10, 17, 7, 15, 16, -7, -21, -3, 11, 3, -12, 31, -17, 31, 4, -3, -5, 6, 28, -17, 3, -10, -16, -1, 34, -16
    0xf8fff9fe, 0x11f6f615, 0xf9100f07, 0x30bfdeb, 0x1fef1ff4, 0x6fbfd04, 0xf603ef1c, 0xf022fff0,
    // -36, -8, 74, 83, -50, 33, -6, -58, -49, 20, -53, 0, 78, 18, 9, 96, 19, 1, -43, -2, -2, 15, 7, 13, 34, 6, 20, -4, 19, 10, 57, -3
    0x534af8dc, 0xc6fa21ce, 0xcb14cf, 0x6009124e, 0xfed50113, 0xd070ffe, 0xfc140622, 0xfd390a13,
    // -9, 5, -2, 3, 10, 3, -6, 16, 9, -6, 12, -9, -16, -9, 8, 4, -9, 7, -6, -4, -3, 12, 12, 9, 12, -22, 18, -11, 16, 4, 39, 2
    0x3fe05f7, 0x10fa030a, 0xf70cfa09, 0x408f7f0, 0xfcfa07f7, 0x90c0cfd, 0xf512ea0c, 0x2270410,
    // 2, -23, 8, -12, 11, 7, 0, 10, 15, 3, 24, -8, -1, 9, -27, 9, -9, 15, 7, 2, -10, 5, 8, 5, -4, -2, -5, 0, -8, -6, 3, 5
    0xf408e902, 0xa00070b, 0xf818030f, 0x9e509ff, 0x2070ff7, 0x50805f6, 0xfbfefc, 0x503faf8,
    // -5, 4, -3, 1, -1, -10, 6, 5, -21, -2, -2, -11, 5, -16, -9, 3, -9, 6, -6, -6, 7, 2, 5, 1, -10, 4, -4, -8, -14, -4, 12, -3
    0x1fd04fb, 0x506f6ff, 0xf5fefeeb, 0x3f7f005, 0xfafa06f7, 0x1050207, 0xf8fc04f6, 0xfd0cfcf2,
    // 9, 1, 5, 3, -17, -3, 0, 2, 11, 5, 7, -7, 12, -12, -9, 6, -4, -34, 22, -19, 68, 3, 1, 0, 5, -10, 5, 5, 37, -21, -7, -35
    0x3050109, 0x200fdef, 0xf907050b, 0x6f7f40c, 0xed16defc, 0x10344, 0x505f605, 0xddf9eb25,
    // 9, 4, -4, 1, -11, -9, -1, 7, -13, -6, -3, -8, -11, -8, -8, -10, -9, 4, -1, -3, 11, 1, 4, -2, 4, -4, -6, -3, -5, -5, -3, -3
    0x1fc0409, 0x7fff7f5, 0xf8fdfaf3, 0xf6f8f8f5, 0xfdff04f7, 0xfe04010b, 0xfdfafc04, 0xfdfdfbfb,
    // 22, 4, -6, 4, -2, -11, -1, -2, 6, -2, -11, -2, 4, -8, -16, -5, 3, 10, -4, -5, -3, 0, 6, -2, -3, 5, -9, 0, -4, -2, 12, -12
    0x4fa0416, 0xfefff5fe, 0xfef5fe06, 0xfbf0f804, 0xfbfc0a03, 0xfe0600fd, 0xf705fd, 0xf40cfefc,
    // -6, 4, -28, -5, 19, 16, -8, -9, 4, -8, 5, -8, 35, 2, 0, -19, -13, -6, -10, -11, 9, 18, -2, -1, -7, 6, -1, -10, 13, 17, 28, -6
    0xfbe404fa, 0xf7f81013, 0xf805f804, 0xed000223, 0xf5f6faf3, 0xfffe1209, 0xf6ff06f9, 0xfa1c110d,
    // 2, -1, 12, 1, -9, 2, 0, -1, 0, -7, -8, -7, 0, 0, 1, -3, -6, 9, -4, -4, 19, 10, -2, -1, 21, -5, -2, -5, 4, 7, -26, -14
    0x10cff02, 0xff0002f7, 0xf9f8f900, 0xfd010000, 0xfcfc09fa, 0xfffe0a13, 0xfbfefb15, 0xf2e60704,
    // -8, -39, -30, 25, 62, 2, 31, 39, 23, -55, -7, 25, -73, -11, 32, 48, 5, 20, 11, -17, 4, -11, -3, -7, -17, 12, -7, -12, -12, 3, 17, -7
    0x19e2d9f8, 0x271f023e, 0x19f9c917, 0x3020f5b7, 0xef0b1405, 0xf9fdf504, 0xf4f90cef, 0xf91103f4,
    // 11, -2, 3, 4, -11, 0, -6, 0, 7, 8, 0, 3, -3, -12, -1, 0, 17, 5, 26, -10, -12, -16, -9, -5, 2, 26, 10, -7, 0, 2, 15, 11
    0x403fe0b, 0xfa00f5, 0x3000807, 0xfff4fd, 0xf61a0511, 0xfbf7f0f4, 0xf90a1a02, 0xb0f0200,
    // 14, 10, 3, -3, -15, -14, 10, -7, -1, 12, 7, -4, 14, -2, 12, -3, -9, 2, 0, 11, -13, -1, 5, 4, 8, 9, 2, 24, 4, -8, -7, 4
    0xfd030a0e, 0xf90af2f1, 0xfc070cff, 0xfd0cfe0e, 0xb0002f7, 0x405fff3, 0x18020908, 0x4f9f804,
    // 3, -5, 2, 9, 2, -21, 5, 15, -10, -16, -1, 3, -2, -8, -4, 2, 1, 2, -4, 5, 1, -12, 4, -4, -7, 7, 7, 7, 0, 2, -22, 2
    0x902fb03, 0xf05eb02, 0x3fff0f6, 0x2fcf8fe, 0x5fc0201, 0xfc04f401, 0x70707f9, 0x2ea0200,
    // -6, -7, 5, 14, -16, -20, -3, 18, -10, 4, 1, 9, -4, -18, 8, 15, -15, 4, 16, -39, -52, 8, -5, 23, -1, -47, 14, -5, 44, -41, -12, 29
    0xe05f9fa, 0x12fdecf0, 0x90104f6, 0xf08eefc, 0xd91004f1, 0x17fb08cc, 0xfb0ed1ff, 0x1df4d72c,
    // 9, -12, -4, 8, -7, -27, 0, 4, -18, 17, 2, -12, -7, -7, 15, -4, 6, 6, 2, 11, -11, -3, 1, -6, 3, 8, 8, 12, 6, -6, 2, 8
    0x8fcf409, 0x400e5f9, 0xf40211ee, 0xfc0ff9f9, 0xb020606, 0xfa01fdf5, 0xc080803, 0x802fa06,
    // 32, -5, 1, 15, -9, -22, 1, 4, 7, 2, 2, -6, -2, -5, 1, -2, 10, 1, -5, 6, -12, -15, 7, -8, 0, 8, 7, 4, -7, -10, 9, 1
    0xf01fb20, 0x401eaf7, 0xfa020207, 0xfe01fbfe, 0x6fb010a, 0xf807f1f4, 0x4070800, 0x109f6f9,
    // -7, 6, -2, 4, 2, -4, 8, 11, 1, 0, 4, -3, -18, 12, 33, 11, -22, 4, -6, 3, 10, -7, 5, 19, -18, 5, 5, -5, -8, 15, 25, 9
    0x4fe06f9, 0xb08fc02, 0xfd040001, 0xb210cee, 0x3fa04ea, 0x1305f90a, 0xfb0505ee, 0x9190ff8,
    // -3, -6, -5, 2, -8, 2, 0, 4, -7, 2, 8, -2, -4, 8, 21, 8, 14, -4, -2, 8, -10, 4, 4, 9, 21, -4, 7, -9, 4, 12, 7, 13
    0x2fbfafd, 0x40002f8, 0xfe0802f9, 0x81508fc, 0x8fefc0e, 0x90404f6, 0xf707fc15, 0xd070c04,
    // 33, 5, -15, 23, -7, 40, -20, 50, -32, 22, -23, -16, 52, 32, -53, 5, -2, 6, 15, -3, 0, -2, -2, 8, -22, 10, 3, -5, -11, 7, 6, -4
    0x17f10521, 0x32ec28f9, 0xf0e916e0, 0x5cb2034, 0xfd0f06fe, 0x8fefe00, 0xfb030aea, 0xfc0607f5,
    // -3, -11, -5, -2, 3, 0, 2, 3, -9, -7, 7, -1, -8, 10, 11, 6, 21, -1, -2, 9, 0, 5, -3, -5, 1, 1, 2, 13, -5, 15, -6, 4
    0xfefbf5fd, 0x3020003, 0xff07f9f7, 0x60b0af8, 0x9feff15, 0xfbfd0500, 0xd020101, 0x4fa0ffb,
    // 3, 2, -5, -4, -5, -5, 3, 5, -7, 12, -1, 5, 1, 5, 20, 0, 7, -3, -6, -6, 23, -17, -14, -3, -1, 10, 13, -3, 0, 7, -22, -16
    0xfcfb0203, 0x503fbfb, 0x5ff0cf9, 0x140501, 0xfafafd07, 0xfdf2ef17, 0xfd0d0aff, 0xf0ea0700,
    // -18, 4, -12, -10, 25, 14, 5, -6, -41, 5, 18, -9, -20, 7, 5, -9, -6, -8, -10, 7, 6, 5, -7, 6, -6, 12, 2, -11, -15, -3, 19, -9
    0xf6f404ee, 0xfa050e19, 0xf71205d7, 0xf70507ec, 0x7f6f8fa, 0x6f90506, 0xf5020cfa, 0xf713fdf1,
    // 11, 16, -3, 8, 13, 14, -14, 0, 22, -17, 26, 0, -2, 19, -28, -13, 37, -42, 80, -24, -49, 56, 20, -29, -62, -54, 39, 44, 69, 19, -53, -3
    0x8fd100b, 0xf20e0d, 0x1aef16, 0xf3e413fe, 0xe850d625, 0xe31438cf, 0x2c27cac2, 0xfdcb1345,
    // -4, -12, -13, 11, 6, 17, -14, 9, -24, 29, 0, 3, -35, 12, 35, -18, 4, 0, -12, 16, 6, -2, -6, 11, 9, -8, -3, 0, -6, 2, -10, -13
    0xbf3f4fc, 0x9f21106, 0x3001de8, 0xee230cdd, 0x10f40004, 0xbfafe06, 0xfdf809, 0xf3f602fa,
    // 18, 14, -1, 15, 9, 11, -17, -15, 38, 9, -5, 6, -28, 12, 6, -11, 11, -4, -7, 15, -7, 5, -10, 15, 1, 26, -10, 4, -16, -1, 39, -24
    0xfff0e12, 0xf1ef0b09, 0x6fb0926, 0xf5060ce4, 0xff9fc0b, 0xff605f9, 0x4f61a01, 0xe827fff0,
    // -9, -8, -13, -10, 8, -9, 9, -2, 6, 5, -4, -11, 2, 0, -24, -10, -8, -7, 0, -8, 4, 3, 10, 1, -2, 7, 7, -1, 7, -1, -6, -11
    0xf6f3f8f7, 0xfe09f708, 0xf5fc0506, 0xf6e80002, 0xf800f9f8, 0x10a0304, 0xff0707fe, 0xf5faff07,
    // -7, 5, 1, -5, 7, -13, 4, -1, -8, 9, -8, -6, 7, -3, -13, -8, 1, 8, -7, 2, -12, 12, 8, 6, 11, -6, 5, 6, 15, -6, -7, -9
    0xfb0105f9, 0xff04f307, 0xfaf809f8, 0xf8f3fd07, 0x2f90801, 0x6080cf4, 0x605fa0b, 0xf7f9fa0f,
    // 14, 44, 6, 4, -21, -1, 13, -15, -34, 9, 9, 19, -77, -6, 6, 41, 1, -18, -17, -6, -7, 9, 6, 3, 0, 2, 4, 3, 17, -3, -1, -5
    0x4062c0e, 0xf10dffeb, 0x130909de, 0x2906fab3, 0xfaefee01, 0x30609f9, 0x3040200, 0xfbfffd11,
    // -6, 8, 4, 0, 0, -13, 1, -1, -6, 0, -5, -2, 15, -3, -9, -1, -1, -7, -6, -6, 8, 8, 3, 1, 8, -14, -6, -1, 8, -3, -17, -3
    0x408fa, 0xff01f300, 0xfefb00fa, 0xfff7fd0f, 0xfafaf9ff, 0x1030808, 0xfffaf208, 0xfdeffd08,
    // -6, -7, -3, 6, 11, -7, 3, -10, 1, -7, -11, -6, 18, -2, -7, 6, 4, -5, -10, -26, 32, -3, -7, -15, 7, 3, 7, -5, -1, 6, 4, -5
    0x6fdf9fa, 0xf603f90b, 0xfaf5f901, 0x6f9fe12, 0xe6f6fb04, 0xf1f9fd20, 0xfb070307, 0xfb0406ff,
    // 26, -7, -17, -15, 19, 0, -6, -10, 24, 13, -2, -4, 28, 6, -21, -19, 4, -3, 3, 0, 0, 15, 5, 1, 16, -10, 8, 6, 1, -1, -14, -3
    0xf1eff91a, 0xf6fa0013, 0xfcfe0d18, 0xedeb061c, 0x3fd04, 0x1050f00, 0x608f610, 0xfdf2ff01,
    // 3, 2, -25, -17, 5, 6, -4, -1, -13, 11, -4, 2, 32, -10, 8, -11, 32, -13, 41, 42, -33, -56, -2, 24, -15, 5, -20, -11, -4, -38, -50, -33
    0xefe70203, 0xfffc0605, 0x2fc0bf3, 0xf508f620, 0x2a29f320, 0x18fec8df, 0xf5ec05f1, 0xdfcedafc,
    // 10, 26, 9, 0, 14, 2, -1, 14, 9, -16, 5, 15, 59, -6, -37, 0, -21, 0, 9, -13, -5, 7, 1, 0, -24, 9, 4, 2, -8, -12, -17, 0
    0x91a0a, 0xeff020e, 0xf05f009, 0xdbfa3b, 0xf30900eb, 0x107fb, 0x20409e8, 0xeff4f8,
    // -21, -2, 6, -26, 5, 9, 1, 9, -29, -16, -7, 0, 45, -7, -23, 7, -12, 16, 22, -14, 32, 9, -3, -1, 1, -5, 3, 9, 22, -6, -29, 9
    0xe606feeb, 0x9010905, 0xf9f0e3, 0x7e9f92d, 0xf21610f4, 0xfffd0920, 0x903fb01, 0x9e3fa16,
};
static const uint embedded_encoder2_ResidualBlock_1_body_conv_dw_bias_dwords[8] = {
    // 0.005497, 0.004787, 0.01145, -0.01938, 0.0471, -0.003994, 0.02005, -0.01788, 0.07574, -0.03598, -0.01227, 0.01115, 0.0001316, 0.012794, 0.01633, -0.03995
    0x1ce71da1, 0xa4f621dd, 0x9c172a07, 0xa4942522, 0xa89b2cd9, 0x21b5a248, 0x228d0850, 0xa91d242e,
};
static const uint embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -9, 7, -17, -29, 19, 25, -4, -15, 13, 8, -34, 21, 22, 17, -45, 22, -1, -24, 58, 51, 9, 31, 62, 25, -9, -16, -22, 23, -22, 24, -42, 6
    0xe3ef07f7, 0xf1fc1913, 0x15de080d, 0x16d31116, 0x333ae8ff, 0x193e1f09, 0x17eaf0f7, 0x6d618ea,
    // -16, -2, 2, -5, -15, -6, 80, -8, -15, -33, -34, 1, -2, -42, 4, 6, 4, 9, 57, 21, -13, -19, 51, 23, 15, 10, -11, 17, -33, -4, 57, -21
    0xfb02fef0, 0xf850faf1, 0x1dedff1, 0x604d6fe, 0x15390904, 0x1733edf3, 0x11f50a0f, 0xeb39fcdf,
    // 8, -23, 11, -32, -65, 12, -20, -41, -10, 12, 15, 52, 19, -40, -19, 47, -33, 57, 10, 53, 7, 4, -16, 31, -13, 20, 41, 1, 0, 23, 40, -49
    0xe00be908, 0xd7ec0cbf, 0x340f0cf6, 0x2fedd813, 0x350a39df, 0x1ff00407, 0x12914f3, 0xcf281700,
    // -19, -25, 19, 58, -36, 23, 3, -14, -11, -66, 32, 16, -4, -5, 72, -17, 16, -23, -21, 1, 14, 19, 50, 25, 18, -27, 51, 15, 2, -2, 10, 2
    0x3a13e7ed, 0xf20317dc, 0x1020bef5, 0xef48fbfc, 0x1ebe910, 0x1932130e, 0xf33e512, 0x20afe02,
    // -64, 67, 37, 19, 1, -35, -8, 33, 42, -63, 72, 17, -50, -14, -39, 1, -95, -5, -36, -6, 5, -35, -27, 18, 11, -69, 37, 17, 28, -6, 26, -13
    0x132543c0, 0x21f8dd01, 0x1148c12a, 0x1d9f2ce, 0xfadcfba1, 0x12e5dd05, 0x1125bb0b, 0xf31afa1c,
    // -21, 20, 2, 3, -28, -1, 68, -33, -13, -1, -15, 35, 10, 12, 10, -12, -87, -26, -2, -31, 5, 3, 40, 53, -25, -5, 62, -40, 7, 7, -42, -5
    0x30214eb, 0xdf44ffe4, 0x23f1fff3, 0xf40a0c0a, 0xe1fee6a9, 0x35280305, 0xd83efbe7, 0xfbd60707,
    // 4, 24, 27, -19, -52, 10, -22, 39, 37, -27, 42, -23, 4, -55, -3, 15, -17, -43, 5, 6, 4, -15, 9, 66, 3, 29, -6, 15, 2, 0, -55, -53
    0xed1b1804, 0x27ea0acc, 0xe92ae525, 0xffdc904, 0x605d5ef, 0x4209f104, 0xffa1d03, 0xcbc90002,
    // -10, 35, 12, -9, -48, 15, -16, -10, 21, 27, 45, 3, 17, -3, 9, -21, 29, 2, -12, 30, -9, -24, 7, 44, -17, 4, 24, -33, -18, 3, 26, -4
    0xf70c23f6, 0xf6f00fd0, 0x32d1b15, 0xeb09fd11, 0x1ef4021d, 0x2c07e8f7, 0xdf1804ef, 0xfc1a03ee,
    // 2, 23, -30, -8, -25, 12, 9, 6, 3, -10, -64, -3, 10, -5, -7, 8, -64, -2, -97, 127, -79, -84, -86, 41, 96, 7, -69, 15, 44, -79, -23, -15
    0xf8e21702, 0x6090ce7, 0xfdc0f603, 0x8f9fb0a, 0x7f9ffec0, 0x29aaacb1, 0xfbb0760, 0xf1e9b12c,
    // 18, 1, 41, 28, -2, 29, -25, 4, 15, -65, -48, 4, 20, 5, 19, -15, -20, -1, -13, 10, 3, 2, 13, -61, 39, -46, 15, -28, -17, 41, 3, 7
    0x1c290112, 0x4e71dfe, 0x4d0bf0f, 0xf1130514, 0xaf3ffec, 0xc30d0203, 0xe40fd227, 0x70329ef,
    // -1, -12, -5, -19, -5, 8, 40, 30, 12, -51, 7, -45, 31, 18, -7, -26, -67, 17, 30, 4, -3, 36, -22, 0, 9, 31, 30, -29, -52, -27, -3, -7
    0xedfbf4ff, 0x1e2808fb, 0xd307cd0c, 0xe6f9121f, 0x41e11bd, 0xea24fd, 0xe31e1f09, 0xf9fde5cc,
    // -31, -30, -10, 53, 9, 28, -2, -58, -16, -9, -18, -39, 14, -39, 5, 33, -21, 18, 17, 60, 14, 30, 49, 42, -13, 9, -36, 27, -48, 17, -35, 30
    0x35f6e2e1, 0xc6fe1c09, 0xd9eef7f0, 0x2105d90e, 0x3c1112eb, 0x2a311e0e, 0x1bdc09f3, 0x1edd11d0,
    // 2, 12, -20, 16, -82, -5, 33, 7, 27, -36, -22, -9, 13, -26, -5, -18, -72, 18, -1, 36, 7, -5, 53, -51, -10, 3, -23, 8, -54, -6, -18, -26
    0x10ec0c02, 0x721fbae, 0xf7eadc1b, 0xeefbe60d, 0x24ff12b8, 0xcd35fb07, 0x8e903f6, 0xe6eefaca,
    // -29, -35, 35, -19, 7, -33, -43, -31, 10, -18, -68, 10, -3, 9, 27, -58, -52, 1, -12, -2, -15, 19, -65, 21, 2, -34, -16, -36, -17, -6, 8, -30
    0xed23dde3, 0xe1d5df07, 0xabcee0a, 0xc61b09fd, 0xfef401cc, 0x15bf13f1, 0xdcf0de02, 0xe208faef,
    // -26, -10, 12, 21, 9, 11, -24, -30, -17, -44, -27, -39, -42, -60, 14, 42, 20, 30, 3, 10, -37, -18, 12, -42, -15, -56, 35, 18, -21, -27, -52, -43
    0x150cf6e6, 0xe2e80b09, 0xd9e5d4ef, 0x2a0ec4d6, 0xa031e14, 0xd60ceedb, 0x1223c8f1, 0xd5cce5eb,
    // 1, -6, 10, -15, -43, -4, -30, 5, -16, -12, -22, -9, 7, 13, 3, 21, -47, 0, 32, 31, 8, -17, -3, 21, 2, 13, -48, -31, 19, 9, -78, -10
    0xf10afa01, 0x5e2fcd5, 0xf7eaf4f0, 0x15030d07, 0x1f2000d1, 0x15fdef08, 0xe1d00d02, 0xf6b20913,
};
static const uint embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords[16] = {
    // -0.129, 0.0635, 0.0896, 0.0313, -0.4854, 0.06006, 0.00891, -0.02646, -0.01802, 0.0517, 0.11835, 0.02217, 0.07166, 0.084, 0.012825, 0.001078
    0x2c10b021, 0x28022dbc, 0x2bb0b7c4, 0xa6c62090, 0x2a9ea49d, 0x25ad2f93, 0x2d602c96, 0x146a2291,
    // -0.019, -0.6284, 0.02916, 0.03882, 0.0086, -0.00939, -0.09174, -0.1398, 0.01203, -0.02382, 0.1018, 0.0452, 0.02226, 0.03485, 0.01909, 0.09894
    0xb907a4dd, 0x28f82777, 0xa0cf2067, 0xb079addf, 0xa6192229, 0x29c92e84, 0x287625b3, 0x2e5524e3,
};
static const uint embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -19, 47, 7, -1, -11, 1, -10, 33, 17, -32, -6, 20, 6, 13, 10, -33, 33, 104, 15, -40, -9, -25, 15, -19, -12, -3, 3, -18, 7, 57, -21, 3
    0xff072fed, 0x21f601f5, 0x14fae011, 0xdf0a0d06, 0xd80f6821, 0xed0fe7f7, 0xee03fdf4, 0x3eb3907,
    // 13, -18, 80, 57, 11, -21, 66, 15, -73, -45, 24, -46, -21, 8, -47, 26, -63, 91, 27, 13, 13, -6, -45, 33, 42, 21, 69, -65, 27, 27, -24, -21
    0x3950ee0d, 0xf42eb0b, 0xd218d3b7, 0x1ad108eb, 0xd1b5bc1, 0x21d3fa0d, 0xbf45152a, 0xebe81b1b,
    // -41, 22, -28, 37, 4, 4, 23, 1, -3, -37, -29, -87, 25, -44, 22, 27, 53, -10, 63, 20, -50, 49, 26, -46, -29, -3, 7, -17, -4, -56, 19, 23
    0x25e416d7, 0x1170404, 0xa9e3dbfd, 0x1b16d419, 0x143ff635, 0xd21a31ce, 0xef07fde3, 0x1713c8fc,
    // -10, 11, 19, -40, 11, -37, -40, -17, 9, -11, -53, 4, 23, -7, -24, -30, -20, 37, -11, 22, 13, 67, -58, 40, -21, 7, -27, 21, 61, -6, 18, -17
    0xd8130bf6, 0xefd8db0b, 0x4cbf509, 0xe2e8f917, 0x16f525ec, 0x28c6430d, 0x15e507eb, 0xef12fa3d,
    // 8, 24, -32, 31, -3, -11, -72, -40, 14, -14, -68, -9, 50, 45, 28, -9, 6, 99, -4, -55, -20, 44, 6, -14, -16, -61, 16, 51, 5, -38, -19, 54
    0x1fe01808, 0xd8b8f5fd, 0xf7bcf20e, 0xf71c2d32, 0xc9fc6306, 0xf2062cec, 0x3310c3f0, 0x36edda05,
    // -1, -11, -36, 20, -3, 7, -14, -52, 3, -24, 29, -12, -1, 16, 48, 38, -47, -90, -18, 3, -7, -44, 26, -19, 49, -36, -19, -28, -33, 31, 11, 19
    0x14dcf5ff, 0xccf207fd, 0xf41de803, 0x263010ff, 0x3eea6d1, 0xed1ad4f9, 0xe4eddc31, 0x130b1fdf,
    // -9, -35, -15, 12, 66, 11, -15, 14, 6, 0, 11, -19, -44, -14, -27, 16, 7, 13, -10, 24, 3, 12, -25, 3, -30, 58, -45, -31, 17, -1, -37, -35
    0xcf1ddf7, 0xef10b42, 0xed0b0006, 0x10e5f2d4, 0x18f60d07, 0x3e70c03, 0xe1d33ae2, 0xdddbff11,
    // 0, 4, 8, 10, -42, 1, 6, 15, -4, 35, 38, 80, -12, 6, 21, 12, 64, -26, -31, -39, -44, -65, 45, -15, 25, -5, -33, -35, -20, 34, 0, 20
    0xa080400, 0xf0601d6, 0x502623fc, 0xc1506f4, 0xd9e1e640, 0xf12dbfd4, 0xdddffb19, 0x140022ec,
    // 41, -20, -21, -54, 11, 6, 12, -17, 27, 65, -5, 15, -7, -10, -13, 27, 16, 2, -11, 6, -14, 0, 3, -1, -4, 4, -66, 60, -5, 36, 8, 2
    0xcaebec29, 0xef0c060b, 0xffb411b, 0x1bf3f6f9, 0x6f50210, 0xff0300f2, 0x3cbe04fc, 0x20824fb,
    // 17, -35, 22, -28, -28, -21, 14, -31, -25, 5, -22, -1, 10, 5, -9, 43, -12, -124, -13, -7, -11, 17, -13, 10, 33, 8, 9, 54, 24, 23, 37, 2
    0xe416dd11, 0xe10eebe4, 0xffea05e7, 0x2bf7050a, 0xf9f384f4, 0xaf311f5, 0x36090821, 0x2251718,
    // 2, -21, 19, -7, 36, -5, -31, -26, 20, 73, 18, 63, -46, -30, -43, 1, 20, 45, -66, 62, -18, -30, -29, -32, -51, 73, 10, -14, 34, 47, -1, -6
    0xf913eb02, 0xe6e1fb24, 0x3f124914, 0x1d5e2d2, 0x3ebe2d14, 0xe0e3e2ee, 0xf20a49cd, 0xfaff2f22,
    // 23, 9, -56, 19, 38, 57, 36, 35, 30, -4, -23, -9, -24, 18, 37, -5, -12, 14, -1, -15, -13, 60, 12, -8, -81, 61, 19, 4, -14, 14, -39, 19
    0x13c80917, 0x23243926, 0xf7e9fc1e, 0xfb2512e8, 0xf1ff0ef4, 0xf80c3cf3, 0x4133daf, 0x13d90ef2,
    // -44, -20, -6, -12, -12, 10, -22, -21, -5, 27, 40, 15, -21, 10, 21, 7, 17, 9, -20, -8, -4, -19, 17, 6, 8, 15, 20, -1, -22, 0, 0, 12
    0xf4faecd4, 0xebea0af4, 0xf281bfb, 0x7150aeb, 0xf8ec0911, 0x611edfc, 0xff140f08, 0xc0000ea,
    // 13, 4, -3, 0, 21, -8, 18, 0, -5, -8, -8, 22, 1, -21, -4, 28, 0, 9, 47, 0, 47, 0, -7, 9, 2, -14, -16, -5, 10, -6, -43, 14
    0xfd040d, 0x12f815, 0x16f8f8fb, 0x1cfceb01, 0x2f0900, 0x9f9002f, 0xfbf0f202, 0xed5fa0a,
    // -2, -4, -30, -31, 22, 23, 51, -4, -41, 21, 9, -17, -16, -23, 19, 14, 35, 127, 17, 30, -7, 42, 10, 6, -28, 21, -21, 36, -9, -1, 8, -15
    0xe1e2fcfe, 0xfc331716, 0xef0915d7, 0xe13e9f0, 0x1e117f23, 0x60a2af9, 0x24eb15e4, 0xf108fff7,
    // -2, -63, -43, -29, -39, 15, 58, 45, 1, 95, -40, -29, 55, -67, 48, -36, 36, -61, 19, 44, 48, 6, 14, 60, 55, -61, 31, 43, 3, -2, 2, -79
    0xe3d5c1fe, 0x2d3a0fd9, 0xe3d85f01, 0xdc30bd37, 0x2c13c324, 0x3c0e0630, 0x2b1fc337, 0xb102fe03,
};
static const uint embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords[8] = {
    // -0.11725, -0.02222, -0.02663, 0.0144, 0.02428, 0.0638, -0.05392, -0.03087, 0.04013, 0.0129, -0.03467, -0.0449, -0.0157, 0.00964, 0.001158, -0.003027
    0xa5b0af81, 0x235fa6d1, 0x2c152637, 0xa7e7aae7, 0x229b2923, 0xa9bfa870, 0x20f0a405, 0x9a3314be,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass2(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 16), // threadGroupSliceSize
        uint3(1920, 1080, 16), // storageSize
        uint3(16, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        33177600, // threadGroupStorageByteOffset
        0.01813533715903759, storage_fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.007696075364947319, storage_embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_1_body_conv_dw_bias = { embedded_encoder2_ResidualBlock_1_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_1_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_1_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.007589734625071287, storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias = { embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.00756900105625391, storage_embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias = { embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias };
    
    // fused_quantized_NHWC_/encoder2/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_4 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_4 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 16);
    const uint3 groupSize_slice_4 = uint3(64, 1, 16);
    const uint3 storageSize_slice_4 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_4 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_4 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_4 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_4 = dot(groupStart_slice_4, tensorByteStrides_slice_4);
    const float quantizationScale_slice_4 = 0.02086760848760605;
    const RWBufferStorage storage_slice_4 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_4 = { logicalSize_slice_4, groupStart_slice_4, groupSize_slice_4, storageSize_slice_4, tensorByteStrides_slice_4, paddingBegin_slice_4, paddingEnd_slice_4, threadGroupByteOffsetInTensor_slice_4 + 0, quantizationScale_slice_4, storage_slice_4 };
    // ConvNextBlock (16, 1080, 1920), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,) -> (16, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    ConvNextBlock(28.133633036428556, 0.03554464504122734, 43.15351289350375, 0.02317308448255062, fused_quantized_NHWC__encoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__encoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_1_body_conv_dw_bias, embedded__encoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_1_body_conv_pw_expand_bias, embedded__encoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_ResidualBlock_1_body_conv_pw_contract_bias, slice_4, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_2
#ifdef MLSR_PASS_2_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass2_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/encoder2/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_5 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_5 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_5 = uint3(32, 1, 16);
    const uint3 storageSize_slice_5 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_5 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_5 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_5 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_5 = dot(groupStart_slice_5, tensorByteStrides_slice_5);
    const float quantizationScale_slice_5 = 0.02086760848760605;
    const RWBufferStorage storage_slice_5 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_5 = { logicalSize_slice_5, groupStart_slice_5, groupSize_slice_5, storageSize_slice_5, tensorByteStrides_slice_5, paddingBegin_slice_5, paddingEnd_slice_5, threadGroupByteOffsetInTensor_slice_5 + 0, quantizationScale_slice_5, storage_slice_5 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_5, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_2_POST


#ifdef MLSR_PASS_3
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FusedConv2D_k2s2b_QuantizedOutput.hlsli"

static const uint embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 35, 7, 21, 28, -11, 23, 28, 22, 47, -14, -6, 5, 30, 4, -41, -5, 15, 27, 8, 2, 15, -28, -15, -40, 19, 23, 21, 1, 13, 11, -55, 31
    0x1c150723, 0x161c17f5, 0x5faf22f, 0xfbd7041e, 0x2081b0f, 0xd8f1e40f, 0x1151713, 0x1fc90b0d,
    // 36, -3, 0, -13, -10, 20, 27, 18, 51, -11, -4, 8, 60, 15, -20, 12, 18, -16, 20, -1, 8, 4, 3, -12, 21, -27, 7, 18, 40, -6, -19, 6
    0xf300fd24, 0x121b14f6, 0x8fcf533, 0xcec0f3c, 0xff14f012, 0xf4030408, 0x1207e515, 0x6edfa28,
    // 7, -23, 7, -24, 12, 48, -13, 11, -25, 16, -24, -8, 39, 16, 24, 29, 10, 9, -14, -25, 9, -26, -2, -46, 6, 46, 10, -2, -1, 4, 5, 3
    0xe807e907, 0xbf3300c, 0xf8e810e7, 0x1d181027, 0xe7f2090a, 0xd2fee609, 0xfe0a2e06, 0x30504ff,
    // -15, -16, 15, 34, 10, -16, 10, 4, -17, -14, -8, 13, -51, -3, 13, -25, -10, 1, -18, 26, -18, 3, 4, 1, -18, -16, 13, 8, -13, -19, 11, -6
    0x220ff0f1, 0x40af00a, 0xdf8f2ef, 0xe70dfdcd, 0x1aee01f6, 0x10403ee, 0x80df0ee, 0xfa0bedf3,
    // -9, -12, -4, 16, 8, 10, 2, 4, -40, 12, -12, -31, -30, 11, 2, 12, -37, 10, -16, 10, 17, -52, 24, -23, -16, 2, 16, -14, -69, 6, 5, -18
    0x10fcf4f7, 0x4020a08, 0xe1f40cd8, 0xc020be2, 0xaf00adb, 0xe918cc11, 0xf21002f0, 0xee0506bb,
    // 0, -12, -9, -39, 16, 50, 10, 36, -26, 7, -11, -19, 68, -1, 34, 23, -37, -15, -21, -24, 4, 4, 18, -9, -20, -14, 15, -9, 16, -16, 20, -5
    0xd9f7f400, 0x240a3210, 0xedf507e6, 0x1722ff44, 0xe8ebf1db, 0xf7120404, 0xf70ff2ec, 0xfb14f010,
    // -7, -11, 14, 19, -44, 15, 18, 41, -18, -20, -16, -16, -23, -3, 23, 6, -13, -36, -17, -9, 6, 27, 23, 21, -17, -47, -29, 6, 36, 10, 47, -6
    0x130ef5f9, 0x29120fd4, 0xf0f0ecee, 0x617fde9, 0xf7efdcf3, 0x15171b06, 0x6e3d1ef, 0xfa2f0a24,
    // 4, -8, -11, 6, 6, -8, 14, -1, -25, 1, 0, 0, 49, 18, -4, -2, 4, -28, -15, 3, 12, -36, 24, -52, -31, 34, 8, -11, -40, 9, 0, 4
    0x6f5f804, 0xff0ef806, 0x1e7, 0xfefc1231, 0x3f1e404, 0xcc18dc0c, 0xf50822e1, 0x40009d8,
    // 4, -41, 28, -48, 14, 51, -24, -34, -30, -58, -28, 32, 30, -5, 60, -16, -2, 5, 18, -11, -4, 6, -4, 1, -20, -4, -13, -6, 7, -3, 7, 10
    0xd01cd704, 0xdee8330e, 0x20e4c6e2, 0xf03cfb1e, 0xf51205fe, 0x1fc06fc, 0xfaf3fcec, 0xa07fd07,
    // 2, 24, -32, 22, -4, -37, 12, -12, -6, 48, 13, -31, -48, 2, -38, 19, 8, 22, -17, -4, 1, -1, 13, 4, -10, 18, 1, -25, 9, 15, -8, -7
    0x16e01802, 0xf40cdbfc, 0xe10d30fa, 0x13da02d0, 0xfcef1608, 0x40dff01, 0xe70112f6, 0xf9f80f09,
    // 36, -6, -38, 7, -55, 41, -4, 14, 11, 16, -10, -9, -23, -9, 34, -2, 20, 26, -23, 6, -11, -36, -15, -36, 28, 43, 6, 9, -27, 2, -21, 3
    0x7dafa24, 0xefc29c9, 0xf7f6100b, 0xfe22f7e9, 0x6e91a14, 0xdcf1dcf5, 0x9062b1c, 0x3eb02e5,
    // 34, 3, -40, 5, -21, 3, -11, -20, -8, 45, -3, -3, 0, 9, 11, 5, -3, -2, -6, 18, -2, -3, -27, -12, -29, 15, -14, -3, -10, -9, -3, -6
    0x5d80322, 0xecf503eb, 0xfdfd2df8, 0x50b0900, 0x12fafefd, 0xf4e5fdfe, 0xfdf20fe3, 0xfafdf7f6,
    // -57, -5, -21, -20, 18, 9, 31, 45, -16, -24, 15, -15, 48, -15, 10, 3, -52, 7, -9, -8, 20, -39, 22, 14, -18, 16, 7, -23, -32, 5, -4, 0
    0xecebfbc7, 0x2d1f0912, 0xf10fe8f0, 0x30af130, 0xf8f707cc, 0xe16d914, 0xe90710ee, 0xfc05e0,
    // -26, 7, 17, -7, 11, -41, 0, -31, -37, -14, 23, -11, -50, 9, -8, -10, -22, -1, 49, -17, 27, 36, -17, 17, -67, -42, -30, -25, 23, 4, 15, 11
    0xf91107e6, 0xe100d70b, 0xf517f2db, 0xf6f809ce, 0xef31ffea, 0x11ef241b, 0xe7e2d6bd, 0xb0f0417,
    // -16, 26, -14, 46, -21, -7, 28, 32, -1, -10, -6, -39, -91, 19, -42, 4, -4, 6, -1, -46, 21, 34, -7, 6, -16, -29, -7, 13, 77, -8, 10, 17
    0x2ef21af0, 0x201cf9eb, 0xd9faf6ff, 0x4d613a5, 0xd2ff06fc, 0x6f92215, 0xdf9e3f0, 0x110af84d,
    // 2, 39, 4, 27, 33, -50, 9, -24, 11, 51, 33, -15, -8, 5, -53, 21, -28, -24, 36, -29, 14, 10, -18, 4, 4, -34, 26, 32, 53, -40, 16, -9
    0x1b042702, 0xe809ce21, 0xf121330b, 0x15cb05f8, 0xe324e8e4, 0x4ee0a0e, 0x201ade04, 0xf710d835,
    // 49, 3, -20, -60, 37, 2, -9, -34, -4, 59, 17, -9, 127, 5, -30, 33, -5, -8, 18, 18, -34, 21, 17, 42, 14, -39, 2, 9, -6, -4, -12, -9
    0xc4ec0331, 0xdef70225, 0xf7113bfc, 0x21e2057f, 0x1212f8fb, 0x2a1115de, 0x902d90e, 0xf7f4fcfa,
    // 1, 9, 16, 2, -7, -1, -11, 1, 30, 26, 1, -5, -32, -17, -1, 3, 1, 15, -2, 29, 29, 1, -5, -19, 20, -19, -15, 18, -67, 16, -11, -1
    0x2100901, 0x1f5fff9, 0xfb011a1e, 0x3ffefe0, 0x1dfe0f01, 0xedfb011d, 0x12f1ed14, 0xfff510bd,
    // -7, -38, -1, -3, 1, -4, 37, 6, -8, -19, 6, 9, -17, -2, 19, -3, 9, -41, -6, -60, 23, 14, -7, -27, -25, 27, -9, 20, 76, -7, 55, 7
    0xfdffdaf9, 0x625fc01, 0x906edf8, 0xfd13feef, 0xc4fad709, 0xe5f90e17, 0x14f71be7, 0x737f94c,
    // 21, -2, -13, -37, -8, 3, -6, -41, -20, 7, 5, -1, 25, 3, 27, 0, 12, -3, -22, -39, -20, -3, -23, -34, -17, 31, -26, 5, -9, -17, 39, -13
    0xdbf3fe15, 0xd7fa03f8, 0xff0507ec, 0x1b0319, 0xd9eafd0c, 0xdee9fdec, 0x5e61fef, 0xf327eff7,
    // 7, -18, -11, 6, 8, -5, 27, -25, -10, -27, 8, 6, -5, 0, 1, -16, 8, -2, -2, 6, -2, -21, 27, -30, -3, -15, 21, -6, -25, 2, -10, -12
    0x6f5ee07, 0xe71bfb08, 0x608e5f6, 0xf00100fb, 0x6fefe08, 0xe21bebfe, 0xfa15f1fd, 0xf4f602e7,
    // -1, 2, -9, -3, 4, -19, 27, -43, 16, 12, 18, -7, -12, 3, 1, -9, -5, -8, 0, -14, 7, -22, 25, -40, 17, -24, 21, 16, 18, 6, -7, -16
    0xfdf702ff, 0xd51bed04, 0xf9120c10, 0xf70103f4, 0xf200f8fb, 0xd819ea07, 0x1015e811, 0xf0f90612,
    // -47, -10, 32, 33, -23, 39, 15, 72, 16, -59, -24, -6, -62, -9, 7, -4, 12, 43, -9, -18, 30, -15, 3, -16, 21, 31, 18, -18, 58, 18, -45, 26
    0x2120f6d1, 0x480f27e9, 0xfae8c510, 0xfc07f7c2, 0xeef72b0c, 0xf003f11e, 0xee121f15, 0x1ad3123a,
    // -12, 9, 16, -25, 27, 18, -24, -21, -11, -31, 1, 16, 43, -3, 21, 1, 2, 26, 17, -4, 20, -49, -7, -48, 11, 18, 24, -6, -49, -15, -74, 4
    0xe71009f4, 0xebe8121b, 0x1001e1f5, 0x115fd2b, 0xfc111a02, 0xd0f9cf14, 0xfa18120b, 0x4b6f1cf,
    // 0, 23, 31, -1, 11, 12, -4, -1, 24, -12, -8, 14, 25, -6, -9, 19, -10, -17, 30, 29, 28, -4, -1, -29, 11, -40, -16, 29, -73, 5, -7, -21
    0xff1f1700, 0xfffc0c0b, 0xef8f418, 0x13f7fa19, 0x1d1eeff6, 0xe3fffc1c, 0x1df0d80b, 0xebf905b7,
    // 5, 23, 9, 9, 15, -26, -12, -4, 35, 17, 12, -10, -22, 3, -72, 2, -10, 21, 6, 17, 17, -3, 9, 11, -1, -19, 3, -19, 34, 12, -50, 6
    0x9091705, 0xfcf4e60f, 0xf60c1123, 0x2b803ea, 0x110615f6, 0xb09fd11, 0xed03edff, 0x6ce0c22,
    // -6, 17, -23, -30, -3, 33, 8, -34, -2, -29, -6, 16, -4, -25, 40, 1, 9, 15, -9, -13, -28, 31, 13, -27, 2, -31, 0, 8, -19, -7, 22, -2
    0xe2e911fa, 0xde0821fd, 0x10fae3fe, 0x128e7fc, 0xf3f70f09, 0xe50d1fe4, 0x800e102, 0xfe16f9ed,
    // -7, 1, -19, -6, 10, 43, 13, -21, 6, -43, -12, 23, -9, -22, 9, -3, 14, -1, 1, -8, 19, 38, 19, -29, -1, -52, -16, 19, 4, -4, -6, 5
    0xfaed01f9, 0xeb0d2b0a, 0x17f4d506, 0xfd09eaf7, 0xf801ff0e, 0xe3132613, 0x13f0ccff, 0x5fafc04,
    // 18, -14, 15, 9, -1, 42, -15, 29, 5, -11, -6, -6, 37, 11, -24, 29, 6, -3, -16, 34, -5, -41, 27, 14, 34, 10, 11, 11, -26, 1, -28, -10
    0x90ff212, 0x1df12aff, 0xfafaf505, 0x1de80b25, 0x22f0fd06, 0xe1bd7fb, 0xb0b0a22, 0xf6e401e6,
    // 29, 12, 1, 3, -8, -42, -3, -22, 27, 39, 0, 19, -10, -2, -3, -15, 32, -16, -6, -37, -39, 45, -9, -4, 6, -4, -4, 13, 62, 1, 39, -2
    0x3010c1d, 0xeafdd6f8, 0x1300271b, 0xf1fdfef6, 0xdbfaf020, 0xfcf72dd9, 0xdfcfc06, 0xfe27013e,
    // -25, -16, 13, -20, -14, 13, -19, 37, -8, -60, -26, 24, 24, -16, 26, -25, -22, 9, -2, 4, -6, -29, -17, 7, -26, -12, -13, -13, -45, -11, 10, -15
    0xec0df0e7, 0x25ed0df2, 0x18e6c4f8, 0xe71af018, 0x4fe09ea, 0x7efe3fa, 0xf3f3f4e6, 0xf10af5d3,
    // -2, -20, 0, -8, -7, 13, -28, 23, 6, 13, -2, 9, 28, -15, 29, 5, -37, -24, -3, 14, 0, -9, -18, 34, -13, 0, -1, 21, 32, -11, 20, -25
    0xf800ecfe, 0x17e40df9, 0x9fe0d06, 0x51df11c, 0xefde8db, 0x22eef700, 0x15ff00f3, 0xe714f520,
    // 16, -13, -1, 34, 5, -14, 12, 1, -29, -4, 24, 10, -9, 16, -24, 7, 12, -16, 12, 50, 10, 4, 11, 12, -12, -12, 23, 1, 12, -1, -18, -5
    0x22fff310, 0x10cf205, 0xa18fce3, 0x7e810f7, 0x320cf00c, 0xc0b040a, 0x117f4f4, 0xfbeeff0c,
    // 4, -12, 9, 43, 1, -18, 2, 4, -21, -16, 28, -16, -14, 19, 1, 4, 1, -32, 15, 40, -27, 21, -5, 2, -30, -53, 23, 22, 50, -2, 4, -31
    0x2b09f404, 0x402ee01, 0xf01cf0eb, 0x40113f2, 0x280fe001, 0x2fb15e5, 0x1617cbe2, 0xe104fe32,
    // 1, 44, -40, -46, 3, -77, 5, -30, -19, 53, -15, -34, 33, 24, -27, 2, 2, -12, -28, 6, -34, -8, 16, 1, -12, -21, -33, -8, 1, 6, -22, 14
    0xd2d82c01, 0xe205b303, 0xdef135ed, 0x2e51821, 0x6e4f402, 0x110f8de, 0xf8dfebf4, 0xeea0601,
    // -23, -48, 7, -3, 32, 25, -14, -14, -2, -39, -13, 26, 39, -23, -26, 25, -24, 13, 3, -1, -8, -26, 7, -30, 28, -41, -12, 21, 15, 5, 23, -62
    0xfd07d0e9, 0xf2f21920, 0x1af3d9fe, 0x19e6e927, 0xff030de8, 0xe207e6f8, 0x15f4d71c, 0xc217050f,
    // -1, 24, -13, 14, 33, -61, -17, -47, 2, 59, 21, 23, -69, 14, -25, 6, -16, 7, -15, 18, -10, -26, 11, -6, -1, 5, 6, 13, -39, -12, 4, -8
    0xef318ff, 0xd1efc321, 0x17153b02, 0x6e70ebb, 0x12f107f0, 0xfa0be6f6, 0xd0605ff, 0xf804f4d9,
    // -8, 26, -20, -12, -22, 26, -1, 32, -41, -13, 5, -16, 66, -35, -31, 13, 2, 0, -21, -9, 14, 27, 7, 10, -40, -22, -21, 23, 22, -2, 17, 11
    0xf4ec1af8, 0x20ff1aea, 0xf005f3d7, 0xde1dd42, 0xf7eb0002, 0xa071b0e, 0x17ebead8, 0xb11fe16,
    // 21, 0, 17, -23, 41, -32, -18, 10, 58, 25, 20, 25, 68, -8, -24, 18, -7, -31, 27, -1, 13, 16, -26, 35, 4, -13, 1, 4, -28, -2, -16, 38
    0xe9110015, 0xaeee029, 0x1914193a, 0x12e8f844, 0xff1be1f9, 0x23e6100d, 0x401f304, 0x26f0fee4,
    // -4, -22, -1, 11, -35, -8, -12, 31, -46, -50, -4, -5, 21, -10, 6, -23, -2, 29, 4, 15, -12, -45, -14, 33, -38, -5, -2, -20, -48, 10, 19, -37
    0xbffeafc, 0x1ff4f8dd, 0xfbfcced2, 0xe906f615, 0xf041dfe, 0x21f2d3f4, 0xecfefbda, 0xdb130ad0,
    // 10, -36, 50, 28, -2, 5, -15, -42, 7, 25, 16, -8, 75, 9, -14, -1, 16, -14, 46, 19, -30, 21, -13, -8, -10, 12, 6, -17, 109, 16, 15, -12
    0x1c32dc0a, 0xd6f105fe, 0xf8101907, 0xfff2094b, 0x132ef210, 0xf8f315e2, 0xef060cf6, 0xf40f106d,
    // -7, -5, 11, 14, -9, 29, -20, -9, -9, 8, -4, -21, 127, 12, -4, -10, 5, -14, 51, 17, -13, 16, -35, -11, -15, -7, -12, -8, 84, 9, -9, -17
    0xe0bfbf9, 0xf7ec1df7, 0xebfc08f7, 0xf6fc0c7f, 0x1133f205, 0xf5dd10f3, 0xf8f4f9f1, 0xeff70954,
    // -2, -36, 0, -36, 39, -6, 30, 29, 10, -15, -17, 34, -31, 21, -3, -16, 12, -4, -5, -40, 12, -18, 20, -11, 11, -7, -8, 22, -30, 30, 14, -33
    0xdc00dcfe, 0x1d1efa27, 0x22eff10a, 0xf0fd15e1, 0xd8fbfc0c, 0xf514ee0c, 0x16f8f90b, 0xdf0e1ee2,
    // 19, 6, 15, -42, 11, -10, 8, -1, -2, 13, 25, 8, -37, 25, 19, 0, 26, 0, 4, -19, 6, -31, 29, 5, 4, 20, 33, 5, -48, 54, 1, -3
    0xd60f0613, 0xff08f60b, 0x8190dfe, 0x1319db, 0xed04001a, 0x51de106, 0x5211404, 0xfd0136d0,
    // -27, -2, 3, 32, 0, -46, 43, 15, 14, 18, -8, 4, -9, -10, -5, -17, -1, -12, 17, 36, -9, -21, 30, 6, 8, 6, 2, 1, -2, -20, -11, -1
    0x2003fee5, 0xf2bd200, 0x4f8120e, 0xeffbf6f7, 0x2411f4ff, 0x61eebf7, 0x1020608, 0xfff5ecfe,
    // 15, -2, 31, 2, -7, 16, 26, 7, 6, 1, -39, -15, 9, 6, -10, 19, 20, 8, 15, 14, -7, 5, 37, 14, -1, 15, -37, -6, 8, 17, 3, -8
    0x21ffe0f, 0x71a10f9, 0xf1d90106, 0x13f60609, 0xe0f0814, 0xe2505f9, 0xfadb0fff, 0xf8031108,
    // -21, 14, -5, 24, -24, -15, -9, 40, -39, -34, 13, 15, 16, 35, 25, -6, -7, 15, -8, 19, -20, -35, -24, 18, -27, 8, 31, 3, -47, 27, 15, 18
    0x18fb0eeb, 0x28f7f1e8, 0xf0dded9, 0xfa192310, 0x13f80ff9, 0x12e8ddec, 0x31f08e5, 0x120f1bd1,
    // -19, -6, -5, -10, 20, -23, -9, 12, 22, -4, 6, 38, -17, 29, -12, 7, -15, -13, -15, -22, 43, -6, -1, 22, 12, -4, -11, 25, -10, 54, -2, 16
    0xf6fbfaed, 0xcf7e914, 0x2606fc16, 0x7f41def, 0xeaf1f3f1, 0x16fffa2b, 0x19f5fc0c, 0x10fe36f6,
    // 17, -38, 13, 39, -20, 29, 21, 54, -33, -14, -25, 7, -31, -31, 18, 6, 40, 14, 3, 9, -35, -18, -3, 21, -33, 15, 2, 2, 12, -29, 17, 0
    0x270dda11, 0x36151dec, 0x7e7f2df, 0x612e1e1, 0x9030e28, 0x15fdeedd, 0x2020fdf, 0x11e30c,
    // 22, -6, -23, -10, 32, -11, -14, -9, 1, 65, 0, 6, 30, -30, -16, 14, 20, 4, 6, -2, 9, -20, -14, -20, -10, 34, -2, 19, 13, -17, -41, -16
    0xf6e9fa16, 0xf7f2f520, 0x6004101, 0xef0e21e, 0xfe060414, 0xecf2ec09, 0x13fe22f6, 0xf0d7ef0d,
    // -24, -25, 17, 19, 13, -35, 5, -9, 35, -3, -17, -14, -123, -6, 0, 13, -18, 16, 2, -27, -14, -37, -2, 5, 47, -19, 11, -13, 14, 4, 21, -29
    0x1311e7e8, 0xf705dd0d, 0xf2effd23, 0xd00fa85, 0xe50210ee, 0x5fedbf2, 0xf30bed2f, 0xe315040e,
    // -12, 6, -21, -34, 23, -19, 2, 37, 8, -25, -32, -16, 5, 20, 16, 0, -17, -21, 0, -38, -3, 5, -20, -2, 7, -77, -22, 17, 4, -9, -26, -29
    0xdeeb06f4, 0x2502ed17, 0xf0e0e708, 0x101405, 0xda00ebef, 0xfeec05fd, 0x11eab307, 0xe3e6f704,
    // 2, 27, -4, -25, 12, 33, -50, 33, 17, 71, -39, -21, 69, 0, -7, 29, -32, -17, 10, -4, 10, 1, -21, -11, 14, 6, -26, 1, 33, -16, -11, 12
    0xe7fc1b02, 0x21ce210c, 0xebd94711, 0x1df90045, 0xfc0aefe0, 0xf5eb010a, 0x1e6060e, 0xcf5f021,
    // 10, 11, 9, -4, -31, -27, 6, 13, -16, 8, 0, -19, -22, -6, -12, 13, -13, -25, -7, 7, -4, -40, 46, -37, -17, -62, 5, 42, 19, 11, 22, -27
    0xfc090b0a, 0xd06e5e1, 0xed0008f0, 0xdf4faea, 0x7f9e7f3, 0xdb2ed8fc, 0x2a05c2ef, 0xe5160b13,
    // 33, 18, 40, -12, -22, 3, -6, -20, -5, -8, -26, -6, -27, 15, -34, 26, 29, 17, -2, -22, -7, 10, -1, 2, -25, 38, -29, -40, -31, 17, 21, 37
    0xf4281221, 0xecfa03ea, 0xfae6f8fb, 0x1ade0fe5, 0xeafe111d, 0x2ff0af9, 0xd8e326e7, 0x251511e1,
    // -38, 3, -31, 6, 1, -55, 46, -7, 25, -19, 13, 16, 12, -15, 12, -58, -8, -22, -13, -17, 24, 22, 30, 9, 9, -5, -9, 7, 40, 6, -8, 7
    0x6e103da, 0xf92ec901, 0x100ded19, 0xc60cf10c, 0xeff3eaf8, 0x91e1618, 0x7f7fb09, 0x7f80628,
    // -22, -16, -6, 24, 6, 12, 11, 24, 49, -16, -13, 22, -36, -9, -16, -9, -22, 9, 0, 4, 10, 17, -9, 17, 34, -17, 1, 20, -8, -7, 1, -7
    0x18faf0ea, 0x180b0c06, 0x16f3f031, 0xf7f0f7dc, 0x40009ea, 0x11f7110a, 0x1401ef22, 0xf901f9f8,
    // -50, 28, -41, 26, 0, -35, 9, -19, 21, -9, 16, 10, -34, 7, -3, -35, -44, 40, -9, 22, -22, -28, -18, -29, 18, -11, 16, 15, -61, -11, -11, -43
    0x1ad71cce, 0xed09dd00, 0xa10f715, 0xddfd07de, 0x16f728d4, 0xe3eee4ea, 0xf10f512, 0xd5f5f5c3,
    // 20, -2, -46, 26, 8, 46, 7, 57, 0, 21, -34, -22, -52, 25, -31, 22, 17, 12, -35, 7, 13, 54, 12, 48, 1, 11, -32, -8, -11, 31, -13, 16
    0x1ad2fe14, 0x39072e08, 0xeade1500, 0x16e119cc, 0x7dd0c11, 0x300c360d, 0xf8e00b01, 0x10f31ff5,
    // 4, 19, -23, 4, 15, 32, -6, 13, 4, 24, -9, -19, -31, 36, -16, 16, 7, 25, -22, 0, -5, 30, -11, 18, 12, 31, -23, -6, -30, 29, -18, 0
    0x4e91304, 0xdfa200f, 0xedf71804, 0x10f024e1, 0xea1907, 0x12f51efb, 0xfae91f0c, 0xee1de2,
    // 7, 39, 11, -36, 9, -13, -32, 4, -16, 54, 29, -35, -22, -1, 15, -22, -17, -6, 12, -3, 4, 8, -9, 21, -7, 24, 17, -18, -72, -6, 32, -13
    0xdc0b2707, 0x4e0f309, 0xdd1d36f0, 0xea0fffea, 0xfd0cfaef, 0x15f70804, 0xee1118f9, 0xf320fab8,
    // -15, -5, 41, 14, 25, 18, 13, 48, 32, -28, 18, 14, -59, -11, -23, -6, -14, -31, 41, -16, 33, 39, -8, 23, 0, -38, 9, 26, -38, -3, 57, -15
    0xe29fbf1, 0x300d1219, 0xe12e420, 0xfae9f5c5, 0xf029e1f2, 0x17f82721, 0x1a09da00, 0xf139fdda,
    // 11, 12, 29, -3, -7, 24, 7, -3, 16, 19, 37, 3, -68, 11, 22, 21, 18, -3, 12, -14, 19, 29, 14, 8, -2, 10, 17, -5, -67, 14, 18, 26
    0xfd1d0c0b, 0xfd0718f9, 0x3251310, 0x15160bbc, 0xf20cfd12, 0x80e1d13, 0xfb110afe, 0x1a120ebd,
    // 28, -9, -36, -35, 20, 55, 10, -9, -13, 13, -1, -15, -26, 11, 38, -7, 15, 15, -14, -27, 1, 7, 18, -11, -13, 14, 10, 8, -43, 21, 27, -40
    0xdddcf71c, 0xf70a3714, 0xf1ff0df3, 0xf9260be6, 0xe5f20f0f, 0xf5120701, 0x80a0ef3, 0xd81b15d5,
};
static const uint embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias_dwords[16] = {
    // -0.01706, 0.001821, 0.0152, 0.013374, -0.006184, -0.00656, -0.01929, 0.013, 0.002651, -0.02098, 0.02179, -0.005093, 0.003492, 0.0698, 0.015305, -0.0007253
    0x1775a45e, 0x22d923c8, 0x9eb89e55, 0x22a8a4f0, 0xa55f196e, 0x9d372594, 0x2c781b27, 0x91f123d6,
    // -0.0841, -0.01164, -0.04086, 0.02766, 0.01043, -0.05746, 0.05725, 0.0794, -0.00338, 0.02695, -0.0549, -0.00595, -0.0006385, 0.01756, -0.01866, -0.02419
    0xa1f6ad62, 0x2715a93b, 0xab5b2157, 0x2d152b54, 0x26e69aec, 0x9e18ab07, 0x247f913b, 0xa631a4c7,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass3(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 16), // threadGroupSliceSize
        uint3(1920, 1080, 16), // storageSize
        uint3(16, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.02086760848760605, storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<512> storage_embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 16, 32), // threadGroupSliceSize
        uint4(2, 2, 16, 32), // storageSize
        uint4(16, 32, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004065748769789934, storage_embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias = { embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias };
    
    // Fusedquantized_/encoder2/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_6 = uint3(960, 540, 32);
    const int3 groupStart_slice_6 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_6 = uint3(64, 1, 32);
    const uint3 storageSize_slice_6 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_6 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_6 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_6 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_6 = dot(groupStart_slice_6, tensorByteStrides_slice_6);
    const RWBufferStorage storage_slice_6 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_6 = { logicalSize_slice_6, groupStart_slice_6, groupSize_slice_6, storageSize_slice_6, tensorByteStrides_slice_6, paddingBegin_slice_6, paddingEnd_slice_6, threadGroupByteOffsetInTensor_slice_6 + 33177600, storage_slice_6 };
    // Fusedquantized_/encoder2/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs (16, 1080, 1920), (32, 16, 2, 2), (32,) -> (32, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FusedConv2D_k2s2b_QuantizedOutput(0.016316018998622894, 0.019212350249290466, fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, embedded__encoder2_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder2_DownscaleStridedConv2x2_downscale_conv_bias, slice_6, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_3
#ifdef MLSR_PASS_3_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass3_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // Fusedquantized_/encoder2/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_7 = uint3(960, 540, 32);
    const int3 groupStart_slice_7 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_7 = uint3(32, 1, 32);
    const uint3 storageSize_slice_7 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_7 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_7 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_7 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_7 = dot(groupStart_slice_7, tensorByteStrides_slice_7);
    const RWBufferStorage storage_slice_7 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_7 = { logicalSize_slice_7, groupStart_slice_7, groupSize_slice_7, storageSize_slice_7, tensorByteStrides_slice_7, paddingBegin_slice_7, paddingEnd_slice_7, threadGroupByteOffsetInTensor_slice_7 + 33177600, storage_slice_7 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_7, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_3_POST


#ifdef MLSR_PASS_4
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 0, 5, 6, -5, 5, -10, 6, -4, -13, -2, -23, -33, -23, 8, -2, -9, -3, -37, 29, -20, 4, -6, -7, -6, -28, 30, -41, -23, -4, 13, 20, -11
    0xfb060500, 0xfc06f605, 0xdfe9fef3, 0xf7fe08e9, 0xec1ddbfd, 0xfaf9fa04, 0xe9d71ee4, 0xf5140dfc,
    // 4, 6, 0, 3, -4, 2, -8, -6, 0, 12, -3, -7, -10, 5, 3, -1, -15, -38, 45, -4, -20, -45, -1, 14, -35, 26, -25, -45, 42, 25, 76, 15
    0x3000604, 0xfaf802fc, 0xf9fd0c00, 0xff0305f6, 0xfc2ddaf1, 0xeffd3ec, 0xd3e71add, 0xf4c192a,
    // -37, 17, 28, -28, 3, -30, -50, -57, -32, -41, 11, -88, 127, -31, -2, -69, 11, -25, 8, -23, -11, 6, -1, 19, 18, 2, -9, 15, 44, -7, 0, -4
    0xe41c11db, 0xc7cee203, 0xa80bd7e0, 0xbbfee17f, 0xe908e70b, 0x13ff06f5, 0xff70212, 0xfc00f92c,
    // -9, 6, -1, 8, 2, -2, 0, 0, -6, 22, -1, -23, -27, -4, 10, 0, -1, 22, -4, -44, -1, 18, -6, 15, -28, 10, -9, 4, -23, 4, -44, -15
    0x8ff06f7, 0xfe02, 0xe9ff16fa, 0xafce5, 0xd4fc16ff, 0xffa12ff, 0x4f70ae4, 0xf1d404e9,
    // -5, 18, -4, -10, -12, -6, 3, -12, 5, 13, -5, -11, 4, -1, -5, 2, 14, -21, 9, 3, 3, 2, -5, -4, -1, 9, -3, -9, -2, 1, 35, 4
    0xf6fc12fb, 0xf403faf4, 0xf5fb0d05, 0x2fbff04, 0x309eb0e, 0xfcfb0203, 0xf7fd09ff, 0x42301fe,
    // -21, 9, -24, 11, 8, 25, -16, 1, 34, -9, 23, 26, -7, -11, 13, -2, 7, -5, -11, -5, 3, 2, 4, 9, -3, -12, 10, 4, 11, 9, 4, -7
    0xbe809eb, 0x1f01908, 0x1a17f722, 0xfe0df5f9, 0xfbf5fb07, 0x9040203, 0x40af4fd, 0xf904090b,
    // -24, -8, 31, -14, 9, -14, -6, 4, -63, 38, -20, -69, -38, 13, 93, 5, -102, 28, -37, -57, 5, -19, 24, 62, -3, -23, -4, 59, -45, -36, 83, 13
    0xf21ff8e8, 0x4faf209, 0xbbec26c1, 0x55d0dda, 0xc7db1c9a, 0x3e18ed05, 0x3bfce9fd, 0xd53dcd3,
    // 6, 38, -19, 6, 17, -16, -2, 4, 2, 3, 3, 11, 2, -3, -3, 17, 2, 26, 13, 33, 6, -8, 18, 2, -6, 22, -17, -18, -2, 9, -1, 0
    0x6ed2606, 0x4fef011, 0xb030302, 0x11fdfd02, 0x210d1a02, 0x212f806, 0xeeef16fa, 0xff09fe,
    // -12, -11, 32, 14, 29, -25, 13, -7, 17, -36, 7, 27, -11, 3, 44, -8, -3, 1, 7, 13, 3, -17, -1, 6, 4, 0, -6, 12, 17, -2, 5, -6
    0xe20f5f4, 0xf90de71d, 0x1b07dc11, 0xf82c03f5, 0xd0701fd, 0x6ffef03, 0xcfa0004, 0xfa05fe11,
    // -12, -6, -12, 8, 2, 13, 5, 7, -6, -3, 3, 5, 3, -4, 1, 2, -29, -31, 10, -22, -1, -10, -9, -5, -16, 17, -14, 8, -1, 13, 61, -11
    0x8f4faf4, 0x7050d02, 0x503fdfa, 0x201fc03, 0xea0ae1e3, 0xfbf7f6ff, 0x8f211f0, 0xf53d0dff,
    // 6, -24, 20, 0, 10, 8, 2, 1, 9, -7, -9, 1, -1, 10, 7, -2, 10, 24, -13, -14, 20, 7, -11, -2, 34, 21, 22, 17, -17, -6, -17, 15
    0x14e806, 0x102080a, 0x1f7f909, 0xfe070aff, 0xf2f3180a, 0xfef50714, 0x11161522, 0xfeffaef,
    // -12, 0, 94, -3, 15, -29, -76, -34, 15, -26, 0, 41, -12, -62, 79, -52, -11, -7, 16, -9, 13, -67, -6, -29, -24, 12, -5, 29, 12, -5, 12, 8
    0xfd5e00f4, 0xdeb4e30f, 0x2900e60f, 0xcc4fc2f4, 0xf710f9f5, 0xe3fabd0d, 0x1dfb0ce8, 0x80cfb0c,
    // -10, -16, 12, 8, 1, 2, 7, 0, 1, -6, -1, -1, 2, 13, 6, 7, -44, -24, 14, 33, 37, -40, -5, -10, -6, -8, 13, 3, 22, 31, 15, 38
    0x80cf0f6, 0x70201, 0xfffffa01, 0x7060d02, 0x210ee8d4, 0xf6fbd825, 0x30df8fa, 0x260f1f16,
    // 1, -2, 8, 5, 4, -18, 5, 5, 7, 13, 0, 12, 9, -14, 5, -3, -3, -4, 1, -15, 6, 11, 5, -4, -17, 1, -1, -27, -15, 11, 17, 0
    0x508fe01, 0x505ee04, 0xc000d07, 0xfd05f209, 0xf101fcfd, 0xfc050b06, 0xe5ff01ef, 0x110bf1,
    // -46, 19, -3, 18, 8, 7, -21, -14, 20, -12, 24, 26, -25, -13, -14, 0, -4, 0, -1, -11, -10, -6, -4, -3, 6, 7, 1, 7, 8, 7, -6, 12
    0x12fd13d2, 0xf2eb0708, 0x1a18f414, 0xf2f3e7, 0xf5ff00fc, 0xfdfcfaf6, 0x7010706, 0xcfa0708,
    // -6, -49, 31, -27, 1, 34, 18, -37, -29, -35, 34, 33, 92, -15, 25, 0, 47, 3, 2, 15, 18, -75, 50, -48, 90, -44, 9, -85, -94, 41, 41, 9
    0xe51fcffa, 0xdb122201, 0x2122dde3, 0x19f15c, 0xf02032f, 0xd032b512, 0xab09d45a, 0x92929a2,
    // -4, -1, -1, -1, 48, 46, -24, 29, 24, 7, 16, -8, 9, -16, 12, -13, 9, 18, 0, -11, 10, 1, 5, 1, -3, 25, -1, -8, 2, 4, -14, 8
    0xfffffffc, 0x1de82e30, 0xf8100718, 0xf30cf009, 0xf5001209, 0x105010a, 0xf8ff19fd, 0x8f20402,
    // 4, 38, 4, -48, 18, -27, -23, 15, 5, 39, -23, 25, -7, -4, -10, -5, -3, 20, 10, 11, 0, -30, 4, -5, 15, 9, -20, 4, 17, 2, -6, -1
    0xd0042604, 0xfe9e512, 0x19e92705, 0xfbf6fcf9, 0xb0a14fd, 0xfb04e200, 0x4ec090f, 0xfffa0211,
    // 5, 11, 3, 1, 1, 6, 11, 4, 23, -16, 14, 18, 15, -8, -47, 8, 22, 71, -30, 11, -37, -21, -14, 25, -2, -23, 26, -22, 8, 18, -13, 41
    0x1030b05, 0x40b0601, 0x120ef017, 0x8d1f80f, 0xbe24716, 0x19f2ebdb, 0xea1ae9fe, 0x29f31208,
    // -9, -2, 1, -6, 2, 8, -4, -6, 0, 8, -7, 3, 2, -2, 4, -6, -35, -32, -4, 47, -3, 12, -6, 11, 32, 9, 14, 8, -11, 16, 34, 11
    0xfa01fef7, 0xfafc0802, 0x3f90800, 0xfa04fe02, 0x2ffce0dd, 0xbfa0cfd, 0x80e0920, 0xb2210f5,
    // -109, 42, 2, 45, -15, 12, -2, -47, 15, -106, -23, -24, -39, 2, 46, -39, -14, -46, 3, 0, 10, 18, 13, 12, -3, -1, 9, 12, 1, 13, 28, 4
    0x2d022a93, 0xd1fe0cf1, 0xe8e9960f, 0xd92e02d9, 0x3d2f2, 0xc0d120a, 0xc09fffd, 0x41c0d01,
    // 8, 1, -10, -16, 1, 11, -7, -2, 10, -4, -1, 25, 24, 0, -13, -3, 47, 30, 1, -8, 7, -12, -12, 3, 2, 40, -33, 13, 18, -11, -15, 3
    0xf0f60108, 0xfef90b01, 0x19fffc0a, 0xfdf30018, 0xf8011e2f, 0x3f4f407, 0xddf2802, 0x3f1f512,
    // -4, -5, -1, -1, -3, 3, 2, -7, -3, 7, 7, 6, -9, -9, 8, 5, 8, 5, -3, 10, 0, 9, -3, -1, 12, -5, 0, -3, -7, -2, -5, 8
    0xfffffbfc, 0xf90203fd, 0x60707fd, 0x508f7f7, 0xafd0508, 0xfffd0900, 0xfd00fb0c, 0x8fbfef9,
    // 18, -4, -2, -11, 0, -10, 2, -20, -18, -9, -33, -10, -4, 9, 50, -1, 23, -17, 2, 9, 0, 0, -10, -10, -1, -2, -18, -7, -15, 12, 15, 10
    0xf5fefc12, 0xec02f600, 0xf6dff7ee, 0xff3209fc, 0x902ef17, 0xf6f60000, 0xf9eefeff, 0xa0f0cf1,
    // -16, -24, -28, 22, 32, -16, -7, 9, 9, -40, -35, 10, -63, 7, 11, -15, -49, 8, -39, -101, 12, -93, 4, 0, 9, -3, 54, -91, 19, 21, -26, -22
    0x16e4e8f0, 0x9f9f020, 0xaddd809, 0xf10b07c1, 0x9bd908cf, 0x4a30c, 0xa536fd09, 0xeae61513,
    // -26, -24, 53, -39, 11, 24, -9, 24, 9, 9, 8, -10, 7, -22, -32, -28, 7, 1, 9, -7, 0, 4, 14, 1, 0, -12, -1, 1, 2, -10, -8, 5
    0xd935e8e6, 0x18f7180b, 0xf6080909, 0xe4e0ea07, 0xf9090107, 0x10e0400, 0x1fff400, 0x5f8f602,
    // 14, 23, 1, -2, 9, -7, -14, -4, 19, 23, -8, -5, 24, 4, -9, 10, 2, 6, 2, -1, -3, -7, 6, -6, -2, -1, 2, -6, -3, -15, -6, -9
    0xfe01170e, 0xfcf2f909, 0xfbf81713, 0xaf70418, 0xff020602, 0xfa06f9fd, 0xfa02fffe, 0xf7faf1fd,
    // 12, -8, 9, 1, 8, 7, 15, 7, 4, -11, -5, 13, 17, 3, -3, 3, 22, 10, 14, -10, 2, 1, -7, 1, -6, -11, -19, -7, -12, 0, 29, 22
    0x109f80c, 0x70f0708, 0xdfbf504, 0x3fd0311, 0xf60e0a16, 0x1f90102, 0xf9edf5fa, 0x161d00f4,
    // -5, 9, 7, 6, 5, -6, 8, 2, 4, -2, -17, 12, 10, -6, 4, 4, 29, 6, 1, -64, 21, 39, 36, -16, -20, -29, -11, -2, -6, -18, -24, -14
    0x60709fb, 0x208fa05, 0xceffe04, 0x404fa0a, 0xc001061d, 0xf0242715, 0xfef5e3ec, 0xf2e8eefa,
    // 30, 66, 71, -14, -12, 43, 57, -32, -89, 34, 66, 27, 33, 39, 87, 27, -8, 26, 23, 31, 0, -40, 0, -16, 4, -8, -42, 13, -14, -4, 18, 8
    0xf247421e, 0xe0392bf4, 0x1b4222a7, 0x1b572721, 0x1f171af8, 0xf000d800, 0xdd6f804, 0x812fcf2,
    // -1, 9, -9, -13, -3, 11, -13, -4, -7, 1, -3, 10, 34, -7, -16, -3, -7, 1, -4, 2, -19, 22, -36, -11, 3, -9, -22, 5, 17, -3, 24, -8
    0xf3f709ff, 0xfcf30bfd, 0xafd01f9, 0xfdf0f922, 0x2fc01f9, 0xf5dc16ed, 0x5eaf703, 0xf818fd11,
    // 6, 0, 4, 1, 7, 1, -7, 4, -1, -4, -11, 16, 7, 0, 25, 6, 7, 10, 1, -18, -6, 13, -23, 5, 15, 30, 11, -12, -17, 2, 3, 16
    0x1040006, 0x4f90107, 0x10f5fcff, 0x6190007, 0xee010a07, 0x5e90dfa, 0xf40b1e0f, 0x100302ef,
    // 36, 11, -29, 12, -13, 13, 5, -1, 5, 7, 17, -17, 12, 9, -3, 18, 19, -12, 1, -20, 2, -4, -3, 10, 15, 14, -4, 7, 11, -11, 14, 5
    0xce30b24, 0xff050df3, 0xef110705, 0x12fd090c, 0xec01f413, 0xafdfc02, 0x7fc0e0f, 0x50ef50b,
    // -7, 0, -16, 2, -15, 25, 4, -4, 8, -2, 2, 10, 9, 17, -12, 17, 23, 11, 29, -61, 63, 71, 55, -5, 112, -44, 27, -84, 44, -17, 26, -11
    0x2f000f9, 0xfc0419f1, 0xa02fe08, 0x11f41109, 0xc31d0b17, 0xfb37473f, 0xac1bd470, 0xf51aef2c,
    // 6, 6, 23, -9, -8, -16, 4, -1, 29, 11, -8, 25, 2, 12, 7, -2, -14, 17, 19, 28, 7, -21, 21, 8, -8, 17, 0, -27, -18, 5, -9, 18
    0xf7170606, 0xff04f0f8, 0x19f80b1d, 0xfe070c02, 0x1c1311f2, 0x815eb07, 0xe50011f8, 0x12f705ee,
    // 42, 29, 4, 5, 10, 11, 35, 2, 16, 17, 3, -7, -25, -8, -22, 1, 14, 2, 1, -1, 27, -28, 21, 3, 8, -4, -2, 9, 4, 0, -6, 25
    0x5041d2a, 0x2230b0a, 0xf9031110, 0x1eaf8e7, 0xff01020e, 0x315e41b, 0x9fefc08, 0x19fa0004,
    // 8, -12, -2, -10, -4, 3, -6, -10, -22, 11, -13, -13, -12, -7, 33, -4, 28, -11, 32, -14, -10, 2, -14, 8, -3, 16, -36, -15, -10, 30, 3, 41
    0xf6fef408, 0xf6fa03fc, 0xf3f30bea, 0xfc21f9f4, 0xf220f51c, 0x8f202f6, 0xf1dc10fd, 0x29031ef6,
    // 18, -1, -8, 2, -3, -2, -4, -9, 7, 8, -5, 8, 4, 4, 11, 2, -2, 4, 9, -9, -1, 5, 17, -6, 2, -3, 9, 18, 14, 1, -3, 0
    0x2f8ff12, 0xf7fcfefd, 0x8fb0807, 0x20b0404, 0xf70904fe, 0xfa1105ff, 0x1209fd02, 0xfd010e,
    // -23, 44, -74, 12, -52, -45, 52, -35, 46, -28, 5, 36, -23, 22, -17, -79, -13, 27, -2, 15, -14, -30, -1, -1, 8, 9, -22, 26, 17, 7, 24, 4
    0xcb62ce9, 0xdd34d3cc, 0x2405e42e, 0xb1ef16e9, 0xffe1bf3, 0xffffe2f2, 0x1aea0908, 0x4180711,
    // -10, 19, -11, 13, -7, 15, -14, -3, -12, 2, 1, -11, 17, -4, -17, 7, -30, -25, 19, -25, -45, 35, 2, -17, -2, -35, 45, 9, -56, -20, 17, -23
    0xdf513f6, 0xfdf20ff9, 0xf50102f4, 0x7effc11, 0xe713e7e2, 0xef0223d3, 0x92dddfe, 0xe911ecc8,
    // 10, -15, -7, 0, 3, 6, 3, 3, -7, -13, 10, 0, -9, -6, -13, 4, 5, 5, 12, -10, 1, 15, 8, -3, 6, 6, 17, 19, 13, 6, -13, 9
    0xf9f10a, 0x3030603, 0xaf3f9, 0x4f3faf7, 0xf60c0505, 0xfd080f01, 0x13110606, 0x9f3060d,
    // 39, -21, 46, 4, -2, 10, -25, -38, -13, 34, -23, -26, -14, 16, 13, 3, -3, 17, -30, 9, -4, 5, 3, -8, -14, -2, 10, -6, 3, 15, 10, 4
    0x42eeb27, 0xdae70afe, 0xe6e922f3, 0x30d10f2, 0x9e211fd, 0xf80305fc, 0xfa0afef2, 0x40a0f03,
    // 10, -4, 36, 4, 6, -5, 31, -19, -9, 5, 28, -16, 5, -9, -1, -17, 31, -20, 10, -87, -4, 19, -5, -54, 17, -30, -42, -33, -2, -50, -69, 24
    0x424fc0a, 0xed1ffb06, 0xf01c05f7, 0xeffff705, 0xa90aec1f, 0xcafb13fc, 0xdfd6e211, 0x18bbcefe,
    // 10, 6, -19, 17, 5, -3, 23, 13, 17, -3, 38, -7, -10, -11, -10, -18, 1, 5, 3, 4, -1, 12, 2, -6, 11, -1, 19, 13, 22, 0, -19, 4
    0x11ed060a, 0xd17fd05, 0xf926fd11, 0xeef6f5f6, 0x4030501, 0xfa020cff, 0xd13ff0b, 0x4ed0016,
    // -3, 11, 10, 31, 6, -8, -15, -18, -5, 30, 23, -20, 20, 16, -16, 25, -15, 1, 11, 1, 14, 1, 7, 0, -14, -6, 8, -1, -21, 16, -11, 16
    0x1f0a0bfd, 0xeef1f806, 0xec171efb, 0x19f01014, 0x10b01f1, 0x7010e, 0xff08faf2, 0x10f510eb,
    // 12, -14, -8, -4, 4, 9, -13, -1, 0, -6, -9, 8, 2, 1, 10, -6, 52, 49, -4, 27, -36, -47, -43, 4, 5, -33, 29, 1, -28, 12, 5, 34
    0xfcf8f20c, 0xfff30904, 0x8f7fa00, 0xfa0a0102, 0x1bfc3134, 0x4d5d1dc, 0x11ddf05, 0x22050ce4,
    // -4, 0, 15, 8, -3, -7, 0, -4, 9, 3, -15, 18, 7, -4, 11, -1, 12, 24, 20, -31, 2, 12, 11, 1, -9, 3, 11, -9, 22, -27, -7, 11
    0x80f00fc, 0xfc00f9fd, 0x12f10309, 0xff0bfc07, 0xe114180c, 0x10b0c02, 0xf70b03f7, 0xbf9e516,
    // -45, -97, 7, 36, 43, 6, -69, 56, 41, -14, -18, -59, 41, -11, -66, 46, 7, -1, -13, 18, -5, -15, -13, -12, -25, 8, -10, 3, 2, -4, 5, -6
    0x24079fd3, 0x38bb062b, 0xc5eef229, 0x2ebef529, 0x12f3ff07, 0xf4f3f1fb, 0x3f608e7, 0xfa05fc02,
    // -6, 4, -3, 17, 1, 2, -1, -3, -17, -10, 3, -6, -1, -9, 0, 0, -14, 9, 2, -9, 9, -1, -20, -9, -25, -11, -1, 25, -19, -11, 2, -15
    0x11fd04fa, 0xfdff0201, 0xfa03f6ef, 0xf7ff, 0xf70209f2, 0xf7ecff09, 0x19fff5e7, 0xf102f5ed,
    // -3, -12, -2, 10, -4, -20, -13, 1, -6, -6, -9, 23, 19, -2, 17, -3, -1, 11, 1, 1, 6, 5, 13, -4, 5, -12, -8, 1, 7, -2, -23, 0
    0xafef4fd, 0x1f3ecfc, 0x17f7fafa, 0xfd11fe13, 0x1010bff, 0xfc0d0506, 0x1f8f405, 0xe9fe07,
    // -14, -13, -1, 32, 6, 12, 8, -22, 14, -9, -24, 19, 16, -7, -12, -21, -26, 4, 7, -5, 1, 7, 0, 10, -5, -8, -4, 11, 9, -9, -10, -6
    0x20fff3f2, 0xea080c06, 0x13e8f70e, 0xebf4f910, 0xfb0704e6, 0xa000701, 0xbfcf8fb, 0xfaf6f709,
    // -22, -27, -3, 42, -3, -12, -1, 11, 35, 22, -40, 5, -28, 1, 19, 1, 31, -63, -9, -4, 1, -62, -23, -74, 85, -28, 76, -68, -83, 25, -67, -2
    0x2afde5ea, 0xbfff4fd, 0x5d81623, 0x11301e4, 0xfcf7c11f, 0xb6e9c201, 0xbc4ce455, 0xfebd19ad,
    // 3, -20, 8, -2, -26, 0, -1, -1, 36, 16, -26, 21, 6, -8, -1, 5, -8, -8, -2, 3, -6, 8, -7, -3, 9, 5, -4, 6, -3, -6, -7, 4
    0xfe08ec03, 0xffff00e6, 0x15e61024, 0x5fff806, 0x3fef8f8, 0xfdf908fa, 0x6fc0509, 0x4f9fafd,
    // 19, 31, 16, -6, 25, 24, 6, -9, -8, -14, -13, 6, -43, 0, -13, -11, -3, -6, -9, 1, 1, -3, -3, 0, -5, -9, -11, -4, -2, 4, 0, 5
    0xfa101f13, 0xf7061819, 0x6f3f2f8, 0xf5f300d5, 0x1f7fafd, 0xfdfd01, 0xfcf5f7fb, 0x50004fe,
    // -2, -5, 4, -5, 8, 4, 18, -3, -1, -13, -6, 16, 30, -10, 6, -16, 9, -21, 15, 2, -11, 4, -5, -15, 16, 36, -29, 6, 13, 11, -25, 14
    0xfb04fbfe, 0xfd120408, 0x10faf3ff, 0xf006f61e, 0x20feb09, 0xf1fb04f5, 0x6e32410, 0xee70b0d,
    // -21, 23, -13, 6, -5, 10, 11, 9, -8, -16, 3, -1, 10, -9, -17, -3, 11, 8, 1, -41, 7, 21, 29, -6, -29, 6, -21, -13, 2, -3, -4, 13
    0x6f317eb, 0x90b0afb, 0xff03f0f8, 0xfdeff70a, 0xd701080b, 0xfa1d1507, 0xf3eb06e3, 0xdfcfd02,
    // 9, -52, -32, 44, -30, 23, 4, 91, -36, 35, 69, 52, 20, -29, 3, -57, 16, 14, -36, 25, 19, 48, 10, 10, 21, -13, -13, -14, -15, 12, 24, 24
    0x2ce0cc09, 0x5b0417e2, 0x344523dc, 0xc703e314, 0x19dc0e10, 0xa0a3013, 0xf2f3f315, 0x18180cf1,
    // 4, 0, -3, -9, 2, 6, -1, 8, 4, 1, 2, 12, 8, -5, -11, -2, 4, -24, -13, 41, 39, -42, -17, -12, 14, 17, -22, -4, 37, 9, 10, 48
    0xf7fd0004, 0x8ff0602, 0xc020104, 0xfef5fb08, 0x29f3e804, 0xf4efd627, 0xfcea110e, 0x300a0925,
    // -6, -7, 6, 6, 9, 4, -3, 1, 7, -2, -7, 4, -13, 4, 15, 8, -4, 5, -5, 10, 4, 2, 19, -5, 17, -24, 16, 25, 20, -5, -30, 0
    0x606f9fa, 0x1fd0409, 0x4f9fe07, 0x80f04f3, 0xafb05fc, 0xfb130204, 0x1910e811, 0xe2fb14,
    // -12, -9, -4, 12, 8, 3, 27, -26, -15, -7, -13, 2, 23, 13, 30, -20, -23, 2, 21, 19, 4, 13, 8, -4, -14, -4, -9, -11, -17, 6, -2, -15
    0xcfcf7f4, 0xe61b0308, 0x2f3f9f1, 0xec1e0d17, 0x131502e9, 0xfc080d04, 0xf5f7fcf2, 0xf1fe06ef,
    // 2, 21, 5, 8, -7, 15, 10, 5, 24, 29, 13, -7, 4, -2, 1, 16, 8, -17, -20, 3, -34, 25, 104, 15, 70, 63, -32, -89, 105, 18, 126, 23
    0x8051502, 0x50a0ff9, 0xf90d1d18, 0x1001fe04, 0x3ecef08, 0xf6819de, 0xa7e03f46, 0x177e1269,
    // -8, -48, -4, -17, -27, 18, 16, -11, -28, 6, 33, -18, 1, -4, -1, -12, -4, -23, 6, 1, -7, 8, -1, -11, 3, -14, 11, 11, 21, 4, 12, -10
    0xeffcd0f8, 0xf51012e5, 0xee2106e4, 0xf4fffc01, 0x106e9fc, 0xf5ff08f9, 0xb0bf203, 0xf60c0415,
    // 3, -13, -1, -8, 6, 24, 0, -18, -10, -37, 18, 21, -7, 8, 11, 9, -10, -9, -20, -6, -9, 8, -10, -10, -8, 4, 10, -6, 5, 1, 12, -4
    0xf8fff303, 0xee001806, 0x1512dbf6, 0x90b08f9, 0xfaecf7f6, 0xf6f608f7, 0xfa0a04f8, 0xfc0c0105,
    // -7, 10, 6, -9, -5, 27, 11, 1, 33, 11, 26, 25, 13, 2, -43, 16, -18, 25, -9, 2, -3, 23, -13, -19, 16, 11, 31, 12, 1, -13, 1, 15
    0xf7060af9, 0x10b1bfb, 0x191a0b21, 0x10d5020d, 0x2f719ee, 0xedf317fd, 0xc1f0b10, 0xf01f301,
    // -3, 1, 18, -2, -6, -17, -15, -7, 1, 20, -16, 18, -2, 12, -2, 0, 29, 12, -11, -15, 1, 19, 0, 2, 29, 19, 5, 12, -16, -5, -38, 10
    0xfe1201fd, 0xf9f1effa, 0x12f01401, 0xfe0cfe, 0xf1f50c1d, 0x2001301, 0xc05131d, 0xadafbf0,
    // 21, -37, -39, 24, 3, -29, -25, 30, -113, 1, -34, 63, -52, -50, -1, -34, -17, -36, 21, -6, -70, -49, -10, -25, -43, -4, -8, 6, 11, 20, -22, -10
    0x18d9db15, 0x1ee7e303, 0x3fde018f, 0xdeffcecc, 0xfa15dcef, 0xe7f6cfba, 0x6f8fcd5, 0xf6ea140b,
    // -16, 14, 0, 5, 0, -4, -6, 2, 6, 25, 9, -4, 16, 10, -32, 8, 5, 13, 8, -12, 4, 6, -33, -24, -1, -3, -1, 22, -38, -7, 2, 0
    0x5000ef0, 0x2fafc00, 0xfc091906, 0x8e00a10, 0xf4080d05, 0xe8df0604, 0x16fffdff, 0x2f9da,
    // 8, 4, 10, -16, 17, -38, -9, 0, 14, 15, -4, 25, 18, -4, 1, 12, -10, -10, -3, 8, -7, 14, -27, -13, -8, 24, -15, -22, -37, 4, 28, 7
    0xf00a0408, 0xf7da11, 0x19fc0f0e, 0xc01fc12, 0x8fdf6f6, 0xf3e50ef9, 0xeaf118f8, 0x71c04db,
    // 6, -15, -13, -19, -12, 9, -37, 7, 28, 2, -6, 24, -1, 15, 49, 27, 27, -35, -5, -2, -13, -1, -33, -17, 6, 3, -17, 9, 6, 14, 32, 10
    0xedf3f106, 0x7db09f4, 0x18fa021c, 0x1b310fff, 0xfefbdd1b, 0xefdffff3, 0x9ef0306, 0xa200e06,
    // 10, 16, 3, 54, 0, 15, 2, -5, 10, 29, -20, -7, 11, 2, -11, 11, 35, -47, 34, 69, -40, 89, 64, 7, -62, 65, 20, 83, 22, -18, -15, 0
    0x3603100a, 0xfb020f00, 0xf9ec1d0a, 0xbf5020b, 0x4522d123, 0x74059d8, 0x531441c2, 0xf1ee16,
    // 13, -33, -7, -2, 8, 25, 16, 9, -19, -13, 7, -24, 3, -27, -10, -15, -5, 16, 12, 25, 1, -1, 14, 5, -11, 17, -19, -21, -19, 7, -3, 11
    0xfef9df0d, 0x9101908, 0xe807f3ed, 0xf1f6e503, 0x190c10fb, 0x50eff01, 0xebed11f5, 0xbfd07ed,
    // -16, -19, 22, 24, 2, -18, 8, 11, 10, 1, -11, 5, 16, 10, -6, 19, -2, 15, 23, 5, 3, -19, 16, 10, 0, 1, -4, 15, 1, -12, -13, -12
    0x1816edf0, 0xb08ee02, 0x5f5010a, 0x13fa0a10, 0x5170ffe, 0xa10ed03, 0xffc0100, 0xf4f3f401,
};
static const uint embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // 0.001046, -0.0006223, 3.207e-05, 0.0001618, -0.0001219, 0.0002532, -0.000533, -0.0003004, 5.484e-05, -0.000801, -0.000637, -0.0001052, -0.0005207, -3.517e-05, -2.843e-05, -0.0001718
    0x91191449, 0x94d021a, 0xc2687fd, 0x8cec905e, 0x92900398, 0x86e59138, 0x824e9044, 0x89a181dd,
};
static const uint embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 0, 72, 49, -6, 24, 86, -2, 18, 39, -20, -56, -10, -21, -83, 25, -85, 31, 70, -7, -49, 18, 32, -6, -22, 76, 89, -47, -62, 5, 30, -97, -1
    0xfa314800, 0x12fe5618, 0xf6c8ec27, 0xab19adeb, 0xcff9461f, 0xeafa2012, 0xc2d1594c, 0xff9f1e05,
    // 3, -16, 9, -22, 26, -4, 2, 15, -31, 15, 71, 15, 8, -31, -12, -1, 2, 66, -55, -71, -6, -41, -39, 56, 60, -27, -56, 79, -9, -22, 56, 15
    0xea09f003, 0xf02fc1a, 0xf470fe1, 0xfff4e108, 0xb9c94202, 0x38d9d7fa, 0x4fc8e53c, 0xf38eaf7,
    // 10, -17, -23, 27, 14, -31, -28, 18, -4, -2, -23, -43, -3, 7, 53, -9, 1, 51, 46, 6, -17, -21, 4, -31, 41, 0, -30, 9, 51, -71, -58, -92
    0x1be9ef0a, 0x12e4e10e, 0xd5e9fefc, 0xf73507fd, 0x62e3301, 0xe104ebef, 0x9e20029, 0xa4c6b933,
    // -12, 31, -35, 21, 26, -23, 24, -8, 25, -33, -10, -22, -26, 39, 5, 13, 13, 56, 33, 68, 38, -15, 12, -23, 22, 30, -25, 8, 32, 18, -41, 92
    0x15dd1ff4, 0xf818e91a, 0xeaf6df19, 0xd0527e6, 0x4421380d, 0xe90cf126, 0x8e71e16, 0x5cd71220,
    // 12, -16, -6, 19, -29, -12, -37, -42, 0, -8, 34, -4, 19, -31, 29, 7, -19, 89, -21, 37, -14, -23, 23, -4, -15, -34, -8, -60, 2, 1, 2, 43
    0x13faf00c, 0xd6dbf4e3, 0xfc22f800, 0x71de113, 0x25eb59ed, 0xfc17e9f2, 0xc4f8def1, 0x2b020102,
    // -11, 0, 41, -4, 47, -73, -69, 5, 0, 27, 37, -54, -42, 21, 31, -6, -83, -62, -9, -34, -27, -40, -21, 29, -35, -21, -9, 39, -81, 26, 52, -56
    0xfc2900f5, 0x5bbb72f, 0xca251b00, 0xfa1f15d6, 0xdef7c2ad, 0x1debd8e5, 0x27f7ebdd, 0xc8341aaf,
    // 21, -9, 36, -11, -40, 15, -20, -8, -32, 30, 13, 31, 14, -4, -6, -12, -29, -29, 11, -57, -5, 36, 0, 6, -13, -48, -18, -42, 22, 15, 25, -85
    0xf524f715, 0xf8ec0fd8, 0x1f0d1ee0, 0xf4fafc0e, 0xc70be3e3, 0x60024fb, 0xd6eed0f3, 0xab190f16,
    // -5, -35, 18, 19, -16, 25, -1, -21, 42, -21, 3, 7, -3, -12, -18, -9, 89, -59, -32, 17, -8, -3, -20, 22, 50, -26, -11, 4, -48, 70, 6, 75
    0x1312ddfb, 0xebff19f0, 0x703eb2a, 0xf7eef4fd, 0x11e0c559, 0x16ecfdf8, 0x4f5e632, 0x4b0646d0,
    // 8, 13, -5, 8, -2, -5, -2, 18, -40, -11, -1, -6, 19, 28, -3, -4, -21, 42, 44, -22, 30, -21, 32, -50, 93, -50, -7, -36, -17, -42, -49, -15
    0x8fb0d08, 0x12fefbfe, 0xfafff5d8, 0xfcfd1c13, 0xea2c2aeb, 0xce20eb1e, 0xdcf9ce5d, 0xf1cfd6ef,
    // 32, -4, 4, 19, -13, 11, 3, 23, 12, -7, -22, 0, 4, -20, 13, 8, -17, 15, 4, -31, 8, 23, -48, 57, -33, 11, 25, -26, 38, -12, -22, 38
    0x1304fc20, 0x17030bf3, 0xeaf90c, 0x80dec04, 0xe1040fef, 0x39d01708, 0xe6190bdf, 0x26eaf426,
    // 33, 7, 55, 28, -11, -21, 18, -50, -31, -8, 68, -6, -39, -19, 26, -5, -11, 25, 67, 10, 12, 14, -55, -53, 8, 7, -1, 66, 36, -6, -9, -5
    0x1c370721, 0xce12ebf5, 0xfa44f8e1, 0xfb1aedd9, 0xa4319f5, 0xcbc90e0c, 0x42ff0708, 0xfbf7fa24,
    // 42, 55, -63, -15, -30, 81, -22, -13, 30, 25, 19, -18, 21, 53, 76, -26, 15, -2, -61, -21, -28, 4, -6, 9, 12, 7, 21, 10, -20, 10, -28, -9
    0xf1c1372a, 0xf3ea51e2, 0xee13191e, 0xe64c3515, 0xebc3fe0f, 0x9fa04e4, 0xa15070c, 0xf7e40aec,
    // 16, 33, 13, -2, -13, 21, -25, 29, 1, 16, -1, 40, -4, -11, -21, 62, -50, 8, -30, -21, -9, -2, -29, 6, 17, 27, 7, 16, 22, -52, -21, 36
    0xfe0d2110, 0x1de715f3, 0x28ff1001, 0x3eebf5fc, 0xebe208ce, 0x6e3fef7, 0x10071b11, 0x24ebcc16,
    // 15, -12, 44, 3, 64, 32, -29, 18, 10, 32, 3, -63, 77, -54, -22, 45, -38, -11, -19, 17, -22, 13, -2, -21, -27, -42, -16, -37, 4, -9, -6, -9
    0x32cf40f, 0x12e32040, 0xc103200a, 0x2deaca4d, 0x11edf5da, 0xebfe0dea, 0xdbf0d6e5, 0xf7faf704,
    // -11, -43, -25, -1, 1, -24, 26, -21, -33, -13, -8, -8, 11, 17, 4, -67, -52, 15, -26, 7, -11, -38, 27, 5, -47, 53, 4, -8, 29, 0, -20, -40
    0xffe7d5f5, 0xeb1ae801, 0xf8f8f3df, 0xbd04110b, 0x7e60fcc, 0x51bdaf5, 0xf80435d1, 0xd8ec001d,
    // -10, 32, 11, -29, -26, 19, 32, 15, 14, -14, 45, 45, 16, 25, -55, 28, 5, 69, 59, -38, 43, 14, -5, 13, -15, -30, 30, 31, 25, 1, -59, -36
    0xe30b20f6, 0xf2013e6, 0x2d2df20e, 0x1cc91910, 0xda3b4505, 0xdfb0e2b, 0x1f1ee2f1, 0xdcc50119,
    // 30, -24, -2, 19, -3, 33, 48, 2, 31, -68, -14, 60, 39, -41, 2, 32, -3, -8, -31, -11, -37, 28, -25, -15, -41, 12, 48, 23, -20, -77, 17, -16
    0x13fee81e, 0x23021fd, 0x3cf2bc1f, 0x2002d727, 0xf5e1f8fd, 0xf1e71cdb, 0x17300cd7, 0xf011b3ec,
    // -20, -15, -28, 25, 20, 62, -91, -57, 3, -18, 3, -2, 21, 21, 33, 13, -10, -16, 85, -14, 30, -11, -10, -19, -17, 73, 16, 26, -3, 17, -5, -14
    0x19e4f1ec, 0xc7a53e14, 0xfe03ee03, 0xd211515, 0xf255f0f6, 0xedf6f51e, 0x1a1049ef, 0xf2fb11fd,
    // 27, -15, 12, -25, -17, 6, 25, -1, 38, 28, -9, -4, 4, 10, -9, 17, -18, 2, 66, -70, 15, -33, 40, 50, 5, 57, -72, -51, -45, -14, 46, -19
    0xe70cf11b, 0xff1906ef, 0xfcf71c26, 0x11f70a04, 0xba4202ee, 0x3228df0f, 0xcdb83905, 0xed2ef2d3,
    // -14, 8, -36, 3, -16, -10, 25, -36, -45, 9, -42, 59, -8, 25, -2, 7, -50, -8, -36, 3, 18, 22, -8, 3, 18, -9, 1, -37, 5, -30, 16, 17
    0x3dc08f2, 0xdc19f6f0, 0x3bd609d3, 0x7fe19f8, 0x3dcf8ce, 0x3f81612, 0xdb01f712, 0x1110e205,
    // -49, 12, 57, 49, 20, -5, -7, 21, -60, 32, 5, 46, 49, 30, 20, 8, -43, -65, -27, 2, -1, 4, -7, -8, 34, -15, 36, -13, 67, -12, -46, -14
    0x31390ccf, 0x15f9fb14, 0x2e0520c4, 0x8141e31, 0x2e5bfd5, 0xf8f904ff, 0xf324f122, 0xf2d2f443,
    // 16, 0, -1, -7, 12, -6, 11, -10, -11, -6, -19, 17, 10, 8, -3, 11, -21, 16, 15, -39, 9, 5, -33, 35, -50, -7, -14, 4, 5, 57, -65, 26
    0xf9ff0010, 0xf60bfa0c, 0x11edfaf5, 0xbfd080a, 0xd90f10eb, 0x23df0509, 0x4f2f9ce, 0x1abf3905,
    // 11, 13, 18, 19, 6, -6, 25, 1, -43, 13, -57, -4, 13, -20, 30, 8, 8, 45, 52, -7, 18, -43, 4, 1, -26, -11, 1, 30, 0, -11, 79, -4
    0x13120d0b, 0x119fa06, 0xfcc70dd5, 0x81eec0d, 0xf9342d08, 0x104d512, 0x1e01f5e6, 0xfc4ff500,
    // 23, 38, 15, -6, -9, -25, -44, 68, -6, 25, -24, -27, -5, -17, 29, 25, -11, 27, 44, -9, 3, -32, -15, -8, -5, -19, -9, -11, 24, 24, -10, -16
    0xfa0f2617, 0x44d4e7f7, 0xe5e819fa, 0x191deffb, 0xf72c1bf5, 0xf8f1e003, 0xf5f7edfb, 0xf0f61818,
    // 73, -21, -43, 92, 79, 77, -58, 65, 39, 25, 15, 98, -73, 17, -54, -69, -28, 126, 81, 79, -9, 3, 6, -16, -92, -61, 93, 16, -26, -30, 46, -75
    0x5cd5eb49, 0x41c64d4f, 0x620f1927, 0xbbca11b7, 0x4f517ee4, 0xf00603f7, 0x105dc3a4, 0xb52ee2e6,
    // 7, 17, 10, -15, -22, 19, 25, 6, -16, -15, 8, 8, 25, 2, -6, 8, -88, 14, -8, 54, 15, 1, -1, -9, 55, 23, 4, -5, -25, 41, 37, -63
    0xf10a1107, 0x61913ea, 0x808f1f0, 0x8fa0219, 0x36f80ea8, 0xf7ff010f, 0xfb041737, 0xc12529e7,
    // -36, 49, -20, 37, -12, -19, -8, -51, 49, -49, -62, 24, -7, 56, 11, -11, -20, -19, -10, 15, 3, 3, 42, -5, -30, 8, 30, -97, -20, 1, 16, 8
    0x25ec31dc, 0xcdf8edf4, 0x18c2cf31, 0xf50b38f9, 0xff6edec, 0xfb2a0303, 0x9f1e08e2, 0x81001ec,
    // 82, -48, 43, -16, -58, 36, 25, -10, 16, 59, -13, -9, 6, 4, -9, 3, -4, -40, 80, 17, 13, -27, 36, 21, -12, 49, -2, -31, 10, -13, -19, 16
    0xf02bd052, 0xf61924c6, 0xf7f33b10, 0x3f70406, 0x1150d8fc, 0x1524e50d, 0xe1fe31f4, 0x10edf30a,
    // -22, 23, -27, 22, 28, -18, 22, 17, -12, -33, -15, -19, -34, -5, 2, 12, 42, 48, 16, 88, -26, 16, -16, -61, -53, 5, 62, 22, 12, 33, 1, 47
    0x16e517ea, 0x1116ee1c, 0xedf1dff4, 0xc02fbde, 0x5810302a, 0xc3f010e6, 0x163e05cb, 0x2f01210c,
    // 8, 8, -13, 3, 22, -6, -6, 6, -29, 23, -1, -17, -11, 5, 9, -3, -21, 29, 4, -21, 40, 22, -40, 50, -47, 11, 4, -30, 65, 33, 17, -8
    0x3f30808, 0x6fafa16, 0xefff17e3, 0xfd0905f5, 0xeb041deb, 0x32d81628, 0xe2040bd1, 0xf8112141,
    // 8, -49, -52, -45, 27, -9, 32, 4, 85, 20, -4, -28, -35, -5, 9, 30, -16, 42, 27, -1, 30, -10, 12, 14, 31, 29, -18, 22, -11, -7, 30, 26
    0xd3cccf08, 0x420f71b, 0xe4fc1455, 0x1e09fbdd, 0xff1b2af0, 0xe0cf61e, 0x16ee1d1f, 0x1a1ef9f5,
    // 31, 57, -19, 70, 20, -38, 71, 39, 25, 1, -26, -57, 23, 53, -73, -11, -6, -76, -37, -59, -2, -5, -26, 23, 20, 36, -17, 59, -4, -14, -5, -60
    0x46ed391f, 0x2747da14, 0xc7e60119, 0xf5b73517, 0xc5dbb4fa, 0x17e6fbfe, 0x3bef2414, 0xc4fbf2fc,
    // 6, -42, 67, -50, 51, 64, 22, 27, -52, -48, -32, -39, -40, 81, 31, 24, -8, 20, -51, 3, -15, -18, -1, 23, 18, -18, -11, 6, 8, -7, -16, -6
    0xce43d606, 0x1b164033, 0xd9e0d0cc, 0x181f51d8, 0x3cd14f8, 0x17ffeef1, 0x6f5ee12, 0xfaf0f908,
    // -34, -13, 20, 14, 1, -23, -29, -7, 39, 10, 0, 48, 1, -18, -11, -3, -3, -79, 96, -27, 37, 20, -18, 3, 23, 70, 14, 33, 5, 1, -7, -32
    0xe14f3de, 0xf9e3e901, 0x30000a27, 0xfdf5ee01, 0xe560b1fd, 0x3ee1425, 0x210e4617, 0xe0f90105,
    // -36, -2, 1, -7, -4, -14, -24, -38, 30, 24, 2, -8, -18, 5, -17, 12, 39, -29, 14, -65, -20, 31, -12, 15, -70, -18, 81, 17, 5, -64, 17, 26
    0xf901fedc, 0xdae8f2fc, 0xf802181e, 0xcef05ee, 0xbf0ee327, 0xff41fec, 0x1151eeba, 0x1a11c005,
    // 33, -23, 30, -18, -85, 24, -6, -18, 35, 43, -42, 37, 20, 36, -15, -1, 7, 27, 16, -41, 0, -4, 22, 28, 36, 10, -66, -85, 7, 25, 24, -53
    0xee1ee921, 0xeefa18ab, 0x25d62b23, 0xfff12414, 0xd7101b07, 0x1c16fc00, 0xabbe0a24, 0xcb181907,
    // -15, 2, 16, -11, 9, -21, -26, 10, -7, 26, 23, -25, -12, 12, 3, -23, -31, -12, -49, 3, 27, -29, -5, 14, -49, 49, -5, -3, 16, -75, 10, 12
    0xf51002f1, 0xae6eb09, 0xe7171af9, 0xe9030cf4, 0x3cff4e1, 0xefbe31b, 0xfdfb31cf, 0xc0ab510,
    // 29, -13, 5, 7, 16, 7, -3, -10, 3, -2, -31, -25, 14, -5, 33, -11, -83, -34, 15, -27, 45, -73, -57, -4, 58, -30, 7, -57, 22, 39, 53, -23
    0x705f31d, 0xf6fd0710, 0xe7e1fe03, 0xf521fb0e, 0xe50fdead, 0xfcc7b72d, 0xc707e23a, 0xe9352716,
    // -34, -51, -43, 2, 32, -41, -45, 58, 14, 1, -33, 39, 56, 35, -10, 42, -25, 36, 19, 33, 33, -9, 16, 12, 40, 46, 6, -13, 47, 11, 31, 32
    0x2d5cdde, 0x3ad3d720, 0x27df010e, 0x2af62338, 0x211324e7, 0xc10f721, 0xf3062e28, 0x201f0b2f,
    // -6, -4, -13, 11, 1, -6, -19, -6, 4, 10, -6, -4, -17, 16, -5, 1, 10, 55, 34, -63, -44, 23, 61, -41, -3, -36, 13, 45, 8, -73, -96, -5
    0xbf3fcfa, 0xfaedfa01, 0xfcfa0a04, 0x1fb10ef, 0xc122370a, 0xd73d17d4, 0x2d0ddcfd, 0xfba0b708,
    // -43, 7, -5, -17, -7, -40, -44, -3, -20, 64, -6, -50, -34, 47, 1, -18, -10, 28, 29, 3, -9, -10, -39, -40, -4, 11, -17, -4, 13, 1, -10, -69
    0xeffb07d5, 0xfdd4d8f9, 0xcefa40ec, 0xee012fde, 0x31d1cf6, 0xd8d9f6f7, 0xfcef0bfc, 0xbbf6010d,
    // 17, -27, 2, 35, -19, 20, 27, 9, 13, -66, -25, 34, 52, -8, 6, 28, -28, 22, 25, -69, 4, 39, -17, -38, -4, -35, 26, 22, -51, -46, -32, 23
    0x2302e511, 0x91b14ed, 0x22e7be0d, 0x1c06f834, 0xbb1916e4, 0xdaef2704, 0x161addfc, 0x17e0d2cd,
    // 23, -19, 37, 3, -57, 25, -7, -18, 64, -2, -43, -12, 7, 3, 4, -2, -25, -59, 27, 40, 4, -34, 22, 29, -9, -2, 66, 23, -13, -5, 5, 24
    0x325ed17, 0xeef919c7, 0xf4d5fe40, 0xfe040307, 0x281bc5e7, 0x1d16de04, 0x1742fef7, 0x1805fbf3,
    // -10, -6, -21, -9, 12, 13, 12, 9, -15, -22, 34, 16, 2, 11, -15, 10, -32, -9, 0, -3, -10, 26, 16, 5, -13, 10, -81, -5, -15, -26, -22, -14
    0xf7ebfaf6, 0x90c0d0c, 0x1022eaf1, 0xaf10b02, 0xfd00f7e0, 0x5101af6, 0xfbaf0af3, 0xf2eae6f1,
    // -38, 16, -42, -6, 2, -27, -8, -6, 42, -34, 1, 16, -22, 28, -8, -3, -20, 76, -76, -92, -13, -24, 3, 57, 35, -7, -45, -50, -55, -5, 71, -35
    0xfad610da, 0xfaf8e502, 0x1001de2a, 0xfdf81cea, 0xa4b44cec, 0x3903e8f3, 0xced3f923, 0xdd47fbc9,
    // 1, -20, 9, 20, -6, -25, -31, 2, 3, 5, -34, -16, 7, 9, 33, -10, 21, -27, -9, -7, -81, 11, -38, -36, 18, 24, -43, -4, 14, -61, 29, 37
    0x1409ec01, 0x2e1e7fa, 0xf0de0503, 0xf6210907, 0xf9f7e515, 0xdcda0baf, 0xfcd51812, 0x251dc30e,
    // -3, 17, 11, -3, -1, 19, 9, 8, 6, -13, -1, 4, 18, 10, -9, 6, 77, -21, 43, 38, -35, 57, -6, 23, -20, -32, -59, -13, 6, 30, 53, 31
    0xfd0b11fd, 0x80913ff, 0x4fff306, 0x6f70a12, 0x262beb4d, 0x17fa39dd, 0xf3c5e0ec, 0x1f351e06,
    // -44, -53, 53, 15, -26, -45, 39, 24, 20, 4, -9, 36, -40, -52, 45, -6, -51, -12, -18, 61, 13, 27, 2, 16, 33, -22, -52, 4, 34, -5, -31, -25
    0xf35cbd4, 0x1827d3e6, 0x24f70414, 0xfa2dccd8, 0x3deef4cd, 0x10021b0d, 0x4ccea21, 0xe7e1fb22,
    // 33, 32, 84, -46, 70, -53, -37, 13, 61, -40, 45, -7, 42, 11, 28, -32, -22, 15, 55, -7, -15, -2, -15, -26, -64, -22, -8, -10, -33, -5, -7, 5
    0xd2542021, 0xddbcb46, 0xf92dd83d, 0xe01c0b2a, 0xf9370fea, 0xe6f1fef1, 0xf6f8eac0, 0x5f9fbdf,
    // -5, -47, 48, 32, 29, -58, 33, -16, -45, 14, -25, -15, -62, -9, -29, 29, -36, 41, -10, 1, -15, 21, -18, 5, 27, 14, 47, -75, -7, -18, -4, -6
    0x2030d1fb, 0xf021c61d, 0xf1e70ed3, 0x1de3f7c2, 0x1f629dc, 0x5ee15f1, 0xb52f0e1b, 0xfafceef9,
    // -4, 4, -18, -6, 14, -9, 16, 5, -26, -8, 27, 8, -2, 4, -7, 8, 0, 89, -18, -60, -23, 36, -47, -33, -1, -59, -35, -5, 7, 22, 52, -91
    0xfaee04fc, 0x510f70e, 0x81bf8e6, 0x8f904fe, 0xc4ee5900, 0xdfd124e9, 0xfbddc5ff, 0xa5341607,
    // 13, 19, 30, -7, 65, -7, -15, -60, 0, 12, -55, 7, -41, -30, -36, 21, -39, 14, 7, 51, 13, -3, 0, 2, -24, -51, -71, 55, 0, -19, 10, -24
    0xf91e130d, 0xc4f1f941, 0x7c90c00, 0x15dce2d7, 0x33070ed9, 0x200fd0d, 0x37b9cde8, 0xe80aed00,
    // 50, 25, -8, -82, 54, 37, 8, -2, -5, 21, -36, 24, 47, -32, -24, 0, 9, 62, -24, -4, -10, 17, 2, -11, 3, 20, -25, -21, -2, -23, -47, 32
    0xaef81932, 0xfe082536, 0x18dc15fb, 0xe8e02f, 0xfce83e09, 0xf50211f6, 0xebe71403, 0x20d1e9fe,
    // 14, 6, -13, -8, 10, 22, 30, -13, 9, -1, -10, 1, 0, -22, -2, 4, -48, -15, 16, 5, 40, -37, 39, -56, 46, -43, 63, -2, 1, 23, 64, -75
    0xf8f3060e, 0xf31e160a, 0x1f6ff09, 0x4feea00, 0x510f1d0, 0xc827db28, 0xfe3fd52e, 0xb5401701,
    // 49, 5, -35, -58, -55, -5, -70, 7, -44, -58, 2, -18, -10, -8, -69, -7, -13, -1, 46, -3, 36, -9, -11, -11, 20, 34, -6, 61, 23, -6, 27, 5
    0xc6dd0531, 0x7bafbc9, 0xee02c6d4, 0xf9bbf8f6, 0xfd2efff3, 0xf5f5f724, 0x3dfa2214, 0x51bfa17,
    // -5, 12, 3, 8, 21, 6, -2, 7, 10, -5, -26, -4, 22, -1, 0, -4, 33, 63, -86, 36, -2, -24, -36, 6, 52, -20, 53, 106, 70, 5, -10, 42
    0x8030cfb, 0x7fe0615, 0xfce6fb0a, 0xfc00ff16, 0x24aa3f21, 0x6dce8fe, 0x6a35ec34, 0x2af60546,
    // 21, 36, 30, -1, -19, -6, -37, 67, 12, 17, 6, -10, -10, -20, 13, 63, -10, 22, 1, 13, -19, 11, 17, -11, -3, 3, -5, 20, -14, 12, -20, -7
    0xff1e2415, 0x43dbfaed, 0xf606110c, 0x3f0decf6, 0xd0116f6, 0xf5110bed, 0x14fb03fd, 0xf9ec0cf2,
    // -85, -75, -24, 64, -53, 87, 16, -14, -27, 24, 29, -41, 13, 35, -64, -4, -56, 76, 0, 35, 19, 11, -15, -8, 19, 25, -12, 1, 64, 12, -13, -20
    0x40e8b5ab, 0xf21057cb, 0xd71d18e5, 0xfcc0230d, 0x23004cc8, 0xf8f10b13, 0x1f41913, 0xecf30c40,
    // -90, 32, 29, -100, -110, -81, 68, -63, -45, -31, -41, -121, 93, -21, 77, 83, -35, -84, -21, -113, 4, 47, -32, -9, 49, 52, -68, -33, 43, 26, -79, -58
    0x9c1d20a6, 0xc144af92, 0x87d7e1d3, 0x534deb5d, 0x8febacdd, 0xf7e02f04, 0xdfbc3431, 0xc6b11a2b,
    // -6, 5, 5, -5, -3, -5, -2, 5, -6, 11, 13, 8, -8, -2, -8, 9, -19, -22, -27, 25, -56, -44, 34, -87, 41, 37, -15, 18, -15, -46, 23, -18
    0xfb0505fa, 0x5fefbfd, 0x80d0bfa, 0x9f8fef8, 0x19e5eaed, 0xa922d4c8, 0x12f12529, 0xee17d2f1,
    // -25, -15, 23, 26, -55, -16, -10, 54, 20, -51, 27, -17, 36, 10, 27, -37, 29, 4, 62, -29, 7, -16, -16, -6, -26, -8, -13, -32, 47, 36, 26, -10
    0x1a17f1e7, 0x36f6f0c9, 0xef1bcd14, 0xdb1b0a24, 0xe33e041d, 0xfaf0f007, 0xe0f3f8e6, 0xf61a242f,
    // 4, -8, -30, -24, 4, -1, -23, -15, 29, -13, 50, -29, -28, 33, -14, -12, -53, -29, -35, -6, 31, 48, -43, -40, 40, -15, -45, -64, 25, 14, -61, -14
    0xe8e2f804, 0xf1e9ff04, 0xe332f31d, 0xf4f221e4, 0xfadde3cb, 0xd8d5301f, 0xc0d3f128, 0xf2c30e19,
    // 7, 1, 4, 9, 3, 16, 17, 1, 13, -31, -10, 7, 17, -2, 4, -8, -24, -51, 31, -5, -4, -11, -67, -31, 0, -39, -14, -43, 34, -60, 66, 75
    0x9040107, 0x1111003, 0x7f6e10d, 0xf804fe11, 0xfb1fcde8, 0xe1bdf5fc, 0xd5f2d900, 0x4b42c422,
    // -1, 18, -41, 8, -19, 47, -24, -35, 43, 0, -38, 6, 9, -6, 21, 4, -37, -61, -18, 81, 19, -12, 16, 21, -56, -27, -128, 127, 18, -5, -10, -68
    0x8d712ff, 0xdde82fed, 0x6da002b, 0x415fa09, 0x51eec3db, 0x1510f413, 0x7f80e5c8, 0xbcf6fb12,
};
static const uint embedded_encoder3_ResidualBlock_0_body_pw_expand_bias_dwords[32] = {
    // -0.0331, -0.003487, -0.2937, -0.001219, -0.02312, -0.1002, -0.0094, -0.221, -0.197, -0.1027, -0.01884, -0.03915, -0.012474, -0.03, -0.0351, -0.09143
    0x9b24a83d, 0x94feb4b3, 0xae6aa5eb, 0xb312a0d0, 0xae93b24e, 0xa903a4d3, 0xa7aea263, 0xaddaa87e,
    // 0.004276, -0.03525, -0.0456, -0.1362, -0.0882, -0.1755, -0.146, -0.0885, -0.08655, -0.1539, -0.04037, -0.02081, -0.0708, -0.1219, -0.03125, -0.05386
    0xa8831c61, 0xb05ca9d6, 0xb19eada5, 0xadaab0ac, 0xb0edad8a, 0xa554a92b, 0xafcdac88, 0xaae5a800,
    // -0.05994, 0.004005, 0.0271, -0.00915, -0.10254, -0.1242, -0.0474, -0.08606, -0.0486, -0.02773, -0.04257, -0.06384, -0.047, -0.0897, -0.1266, -0.05228
    0x1c1aabac, 0xa0af26f0, 0xaff3ae90, 0xad82aa11, 0xa719aa39, 0xac16a973, 0xadbeaa04, 0xaab1b00d,
    // -0.04883, -0.08136, 0.010704, -0.07074, -0.047, -0.178, -0.01057, 0.00483, 0.08496, -0.08356, -0.1301, -0.1377, -0.1427, -0.129, -0.06207, -0.0703
    0xad35aa40, 0xac87217b, 0xb1b2aa04, 0x1cf2a169, 0xad592d70, 0xb068b02a, 0xb021b091, 0xac80abf2,
};
static const uint embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 41, 1, -23, 34, 70, 5, 6, 25, 77, -9, 1, 50, -25, 13, 21, 25, -13, 34, 12, -39, -23, 4, -14, 26, -9, -20, 22, 15, 6, 1, 6, 44
    0x22e90129, 0x19060546, 0x3201f74d, 0x19150de7, 0xd90c22f3, 0x1af204e9, 0xf16ecf7, 0x2c060106,
    // 43, 89, -14, -16, -18, 6, -37, -17, -14, 52, 7, 6, 42, 29, 45, -5, 42, 32, 14, 51, 81, -39, -27, 20, -65, -2, -33, 15, -32, 23, -21, 8
    0xf0f2592b, 0xefdb06ee, 0x60734f2, 0xfb2d1d2a, 0x330e202a, 0x14e5d951, 0xfdffebf, 0x8eb17e0,
    // -19, 9, -92, 7, 50, -21, 76, -9, 52, 20, 23, -40, 34, 20, 7, 29, 0, -34, -34, 21, 12, -49, -1, 6, -16, 43, 32, 53, -39, -40, -11, -32
    0x7a409ed, 0xf74ceb32, 0xd8171434, 0x1d071422, 0x15dede00, 0x6ffcf0c, 0x35202bf0, 0xe0f5d8d9,
    // 12, 58, -4, 46, -17, -18, 6, -5, 10, 33, 8, 49, 9, 11, -36, -16, -14, 17, 22, -7, 5, -24, 6, 10, 15, 13, -11, -16, 29, 22, 36, -5
    0x2efc3a0c, 0xfb06eeef, 0x3108210a, 0xf0dc0b09, 0xf91611f2, 0xa06e805, 0xf0f50d0f, 0xfb24161d,
    // -7, 27, 66, -40, -12, -18, -67, 38, -11, -20, 20, 28, -23, 4, 26, 17, 12, 9, 35, -47, 4, -5, -69, -23, 14, -32, 18, -75, 32, 4, 29, -6
    0xd8421bf9, 0x26bdeef4, 0x1c14ecf5, 0x111a04e9, 0xd123090c, 0xe9bbfb04, 0xb512e00e, 0xfa1d0420,
    // -24, -28, -4, 5, -13, 6, 22, -3, -27, -12, 10, -8, 23, -11, 22, 1, 19, -38, -90, -8, 5, -23, 6, -15, -27, -1, -2, 5, 15, 26, -10, 8
    0x5fce4e8, 0xfd1606f3, 0xf80af4e5, 0x116f517, 0xf8a6da13, 0xf106e905, 0x5feffe5, 0x8f61a0f,
    // 39, -53, 39, 14, 41, 2, 21, 2, -61, 20, -66, 31, 20, -55, -11, -43, -40, 16, -15, 6, -25, -5, -7, 42, 62, -17, -38, 47, -29, 25, -72, 44
    0xe27cb27, 0x2150229, 0x1fbe14c3, 0xd5f5c914, 0x6f110d8, 0x2af9fbe7, 0x2fdaef3e, 0x2cb819e3,
    // 39, 62, -18, -27, -42, -6, -8, -24, -26, -5, 11, -27, 8, 41, 0, 4, -24, 27, 17, -14, 41, 33, -20, 36, -12, 0, 42, 45, -15, -49, -2, -2
    0xe5ee3e27, 0xe8f8fad6, 0xe50bfbe6, 0x4002908, 0xf2111be8, 0x24ec2129, 0x2d2a00f4, 0xfefecff1,
    // -20, 14, 53, -3, 17, 17, 25, -22, -28, -34, 1, -15, -30, 29, 4, 3, 9, -6, 12, -27, -15, -5, 37, -26, -14, -15, 38, -25, -13, 5, 17, 6
    0xfd350eec, 0xea191111, 0xf101dee4, 0x3041de2, 0xe50cfa09, 0xe625fbf1, 0xe726f1f2, 0x61105f3,
    // 1, 35, -8, 10, -13, 17, 8, 14, -9, 29, 16, -8, 4, 0, 19, -28, -1, -5, -15, -1, 17, -28, -2, 4, -36, -31, -22, 18, 6, -18, -20, 5
    0xaf82301, 0xe0811f3, 0xf8101df7, 0xe4130004, 0xfff1fbff, 0x4fee411, 0x12eae1dc, 0x5ecee06,
    // 29, -3, 63, -20, 30, -10, -3, -12, -27, -15, -16, 81, 23, -49, -67, 24, 19, 54, -10, -12, -26, -32, -11, -67, -13, -9, -51, -6, 14, -18, -32, 23
    0xec3ffd1d, 0xf4fdf61e, 0x51f0f1e5, 0x18bdcf17, 0xf4f63613, 0xbdf5e0e6, 0xfacdf7f3, 0x17e0ee0e,
    // -44, 10, 10, -12, -7, 12, -37, 53, -8, 5, 22, -12, -36, -23, 23, 28, 84, 38, 20, 69, 48, -75, -19, -34, 43, 49, -22, 0, 33, -39, -17, -6
    0xf40a0ad4, 0x35db0cf9, 0xf41605f8, 0x1c17e9dc, 0x45142654, 0xdeedb530, 0xea312b, 0xfaefd921,
    // -3, 7, 21, -25, 67, -3, 72, 19, 30, 10, 17, 6, -5, 8, 27, -42, 3, 21, 10, 15, 10, 17, -16, 12, -7, -3, -10, -8, -9, 9, -7, -7
    0xe71507fd, 0x1348fd43, 0x6110a1e, 0xd61b08fb, 0xf0a1503, 0xcf0110a, 0xf8f6fdf9, 0xf9f909f7,
    // -30, 10, -21, -2, 19, 5, -32, -9, -4, 25, -5, -56, -43, 27, -38, 39, 50, 33, 65, 60, 22, -1, -12, -4, -16, -1, -8, -6, -37, 64, -14, 7
    0xfeeb0ae2, 0xf7e00513, 0xc8fb19fc, 0x27da1bd5, 0x3c412132, 0xfcf4ff16, 0xfaf8fff0, 0x7f240db,
    // 0, -18, 43, -3, -19, 5, 13, -23, -56, 34, 3, -10, -41, -56, 14, 9, 34, -2, 3, 3, -17, -11, -23, -16, 20, 28, -20, 59, 14, 1, -30, -1
    0xfd2bee00, 0xe90d05ed, 0xf60322c8, 0x90ec8d7, 0x303fe22, 0xf0e9f5ef, 0x3bec1c14, 0xffe2010e,
    // 17, -2, 32, 7, -27, 20, 1, -11, 21, 3, 47, 26, -15, -8, 24, -17, 3, 46, -12, 24, 2, -7, -3, 5, -9, 18, -24, 1, -53, -34, 3, -23
    0x720fe11, 0xf50114e5, 0x1a2f0315, 0xef18f8f1, 0x18f42e03, 0x5fdf902, 0x1e812f7, 0xe903decb,
    // -27, -38, -17, 46, 55, -14, 8, -43, -52, 25, -7, 7, -23, 32, 40, -29, 24, 24, 13, 53, -7, 23, 46, 2, -88, 14, 22, 38, -17, 14, 7, -14
    0x2eefdae5, 0xd508f237, 0x7f919cc, 0xe32820e9, 0x350d1818, 0x22e17f9, 0x26160ea8, 0xf2070eef,
    // -13, -7, 27, -42, 2, 11, -9, 31, 2, -18, 14, 12, -30, -20, 11, -30, 16, 2, 69, 13, 30, -8, 4, -9, -47, -28, -10, -7, -21, 8, -24, -12
    0xd61bf9f3, 0x1ff70b02, 0xc0eee02, 0xe20bece2, 0xd450210, 0xf704f81e, 0xf9f6e4d1, 0xf4e808eb,
    // 21, 32, -81, -38, -22, 17, 5, -18, -32, -27, -9, 9, 1, -51, 8, 24, -14, 30, 9, -30, 12, 8, -17, 55, -11, 11, -1, -40, 36, 13, -12, 4
    0xdaaf2015, 0xee0511ea, 0x9f7e5e0, 0x1808cd01, 0xe2091ef2, 0x37ef080c, 0xd8ff0bf5, 0x4f40d24,
    // -22, -49, -8, 59, 11, -24, 31, -23, 37, 25, -18, 42, 18, -12, 38, 22, 43, 34, -23, 42, 20, 37, 15, 6, -67, 37, -44, 22, 28, -43, -11, 19
    0x3bf8cfea, 0xe91fe80b, 0x2aee1925, 0x1626f412, 0x2ae9222b, 0x60f2514, 0x16d425bd, 0x13f5d51c,
    // -5, -4, -52, 8, 4, 22, -10, -71, -17, -35, 13, -2, 15, 14, -33, -34, 10, -7, 10, 8, -16, -4, 12, 8, -33, -12, 6, 8, 23, 65, 6, -17
    0x8ccfcfb, 0xb9f61604, 0xfe0dddef, 0xdedf0e0f, 0x80af90a, 0x80cfcf0, 0x806f4df, 0xef064117,
    // -12, -6, -12, -10, 22, -82, -8, -5, -4, 10, 19, -38, 2, 31, -77, -13, 0, 5, -13, 19, -4, 19, -1, 6, 13, 1, -37, 20, -15, 4, 74, -10
    0xf6f4faf4, 0xfbf8ae16, 0xda130afc, 0xf3b31f02, 0x13f30500, 0x6ff13fc, 0x14db010d, 0xf64a04f1,
    // -1, 4, -17, -13, -38, 16, 48, -30, 74, -7, -26, -10, -30, -75, 25, 19, 6, -8, -3, -59, -41, -27, -60, -7, 48, 1, -41, 55, 9, 13, -52, -13
    0xf3ef04ff, 0xe23010da, 0xf6e6f94a, 0x1319b5e2, 0xc5fdf806, 0xf9c4e5d7, 0x37d70130, 0xf3cc0d09,
    // 25, -44, -5, 22, 9, -7, 2, 23, 25, 4, 6, 29, -15, -19, -25, 3, 2, 9, 19, -14, -19, 14, -14, 20, -6, 35, -15, 32, -7, -47, 17, -3
    0x16fbd419, 0x1702f909, 0x1d060419, 0x3e7edf1, 0xf2130902, 0x14f20eed, 0x20f123fa, 0xfd11d1f9,
    // 51, 14, -32, -68, -7, 0, -36, 27, -43, 10, 13, 35, 11, -13, 13, -27, -3, 37, -18, 28, 51, 20, 7, 23, 3, -2, -16, -82, 32, -20, -12, -7
    0xbce00e33, 0x1bdc00f9, 0x230d0ad5, 0xe50df30b, 0x1cee25fd, 0x17071433, 0xaef0fe03, 0xf9f4ec20,
    // -81, 5, 15, 30, 3, -9, 7, -21, -9, -17, -17, 14, 23, 5, -8, 52, 39, 37, -69, 52, 2, 20, 4, -25, -29, 40, 11, -10, -32, -13, 5, 2
    0x1e0f05af, 0xeb07f703, 0xeefeff7, 0x34f80517, 0x34bb2527, 0xe7041402, 0xf60b28e3, 0x205f3e0,
    // -31, -8, -8, -21, -59, -43, 4, -23, 48, 11, 7, 9, -14, 4, 19, 24, -17, -31, -54, 8, -12, 19, 31, 17, -26, 33, -17, -25, -4, 36, -9, -38
    0xebf8f8e1, 0xe904d5c5, 0x9070b30, 0x181304f2, 0x8cae1ef, 0x111f13f4, 0xe7ef21e6, 0xdaf724fc,
    // -37, -62, -5, 5, -10, -35, -27, -4, 6, 8, 1, -35, -50, 12, 7, -3, 44, -31, -12, 32, -12, 27, -4, -47, -25, -4, -7, 15, 16, 4, 16, -37
    0x5fbc2db, 0xfce5ddf6, 0xdd010806, 0xfd070cce, 0x20f4e12c, 0xd1fc1bf4, 0xff9fce7, 0xdb100410,
    // -15, 22, 6, -46, 41, -15, -10, -49, 21, 10, -16, -8, -22, -19, 53, -17, 2, 29, 13, 6, -9, -3, -3, 28, 31, 2, -41, -36, -15, -3, 18, -18
    0xd20616f1, 0xcff6f129, 0xf8f00a15, 0xef35edea, 0x60d1d02, 0x1cfdfdf7, 0xdcd7021f, 0xee12fdf1,
    // -69, -7, 25, 5, 14, 6, 12, -28, -24, 6, -9, 23, 3, 7, -22, 40, -7, -18, -58, 2, 2, 34, 5, -50, -21, 21, 25, 8, -21, -14, 4, 2
    0x519f9bb, 0xe40c060e, 0x17f706e8, 0x28ea0703, 0x2c6eef9, 0xce052202, 0x81915eb, 0x204f2eb,
    // 17, -7, -84, 35, 23, 20, -22, -5, -45, 58, 3, 28, -13, -5, 1, -22, 34, 24, 6, -23, -8, 21, -7, 7, -15, 37, -1, 65, 9, -48, -26, 2
    0x23acf911, 0xfbea1417, 0x1c033ad3, 0xea01fbf3, 0xe9061822, 0x7f915f8, 0x41ff25f1, 0x2e6d009,
    // -5, 41, 52, -32, -26, 16, -6, -38, 28, -33, 32, -5, -3, -41, -3, -14, 36, 42, 29, 2, 7, 57, -13, 27, -53, 11, -23, -32, 50, -6, -12, 12
    0xe03429fb, 0xdafa10e6, 0xfb20df1c, 0xf2fdd7fd, 0x21d2a24, 0x1bf33907, 0xe0e90bcb, 0xcf4fa32,
    // 26, 9, 6, -7, 23, 52, 21, 1, 15, 10, 49, 3, 62, 49, -7, 10, 53, 41, 42, 46, 67, 50, 32, 21, 29, 89, 26, 9, -7, -5, 39, 20
    0xf906091a, 0x1153417, 0x3310a0f, 0xaf9313e, 0x2e2a2935, 0x15203243, 0x91a591d, 0x1427fbf9,
    // -25, -36, 1, -23, -12, -16, 44, -10, -1, 10, 1, 73, -22, 12, -16, 61, 26, 47, 10, 37, -9, 33, 40, 9, 7, 16, 25, 32, 15, 42, 47, 39
    0xe901dce7, 0xf62cf0f4, 0x49010aff, 0x3df00cea, 0x250a2f1a, 0x92821f7, 0x20191007, 0x272f2a0f,
    // -11, -75, -2, -55, -77, 36, 62, 6, 16, 20, 21, -18, -23, 0, -16, -18, 6, -22, -23, -38, 46, -1, -78, -47, -21, 34, 2, 15, -88, 2, 38, 47
    0xc9feb5f5, 0x63e24b3, 0xee151410, 0xeef000e9, 0xdae9ea06, 0xd1b2ff2e, 0xf0222eb, 0x2f2602a8,
    // 9, 14, 72, -67, 27, -7, -9, 5, -5, -10, 62, 80, -67, 35, 21, 14, -55, -42, -51, -69, -47, 35, 34, -11, -21, -87, 5, 54, -62, -9, 18, 28
    0xbd480e09, 0x5f7f91b, 0x503ef6fb, 0xe1523bd, 0xbbcdd6c9, 0xf52223d1, 0x3605a9eb, 0x1c12f7c2,
    // 4, 43, -22, 1, 50, 47, -32, 88, -64, 10, -68, 3, 8, -17, 5, -70, 7, -6, 18, 22, -48, -4, -57, 3, -72, 24, -34, -38, 75, 23, -84, 21
    0x1ea2b04, 0x58e02f32, 0x3bc0ac0, 0xba05ef08, 0x1612fa07, 0x3c7fcd0, 0xdade18b8, 0x15ac174b,
    // 24, -26, -17, 21, 48, -5, -58, -13, -43, -19, -6, -11, 52, 4, -38, -27, -34, 42, 25, -38, 22, -27, -69, 106, 11, -16, -52, -28, -20, 11, -26, 38
    0x15efe618, 0xf3c6fb30, 0xf5faedd5, 0xe5da0434, 0xda192ade, 0x6abbe516, 0xe4ccf00b, 0x26e60bec,
    // 48, 16, 17, -92, 14, 28, -10, -29, 65, 48, -6, 25, -9, -29, -33, 11, 43, 15, 70, -54, -16, -6, -43, -31, -14, 41, -43, -59, -13, 25, -12, 43
    0xa4111030, 0xe3f61c0e, 0x19fa3041, 0xbdfe3f7, 0xca460f2b, 0xe1d5faf0, 0xc5d529f2, 0x2bf419f3,
    // 30, 75, 82, 40, -19, 24, -25, 68, 22, -5, -55, 52, 92, 6, 9, -43, -55, 43, 3, -71, 38, 63, -21, -25, -3, -55, 20, 34, -15, -41, -8, -6
    0x28524b1e, 0x44e718ed, 0x34c9fb16, 0xd509065c, 0xb9032bc9, 0xe7eb3f26, 0x2214c9fd, 0xfaf8d7f1,
    // -41, 14, -51, -16, -6, 5, -18, -22, -45, -33, -54, 13, -3, -14, 40, -3, 44, -29, -17, -7, -67, -20, 0, -5, 8, -4, -30, -42, 54, -53, -81, -27
    0xf0cd0ed7, 0xeaee05fa, 0xdcadfd3, 0xfd28f2fd, 0xf9efe32c, 0xfb00ecbd, 0xd6e2fc08, 0xe5afcb36,
    // 4, -9, 36, 33, -12, 18, -55, -10, 1, 33, -9, -4, -2, 81, 13, -58, 23, 22, 19, 11, 31, -34, -64, 5, 0, 2, 12, 40, 7, -14, -9, -6
    0x2124f704, 0xf6c912f4, 0xfcf72101, 0xc60d51fe, 0xb131617, 0x5c0de1f, 0x280c0200, 0xfaf7f207,
    // -37, 41, -30, -2, 45, 10, -13, 40, -30, 3, -12, -6, 26, 15, 26, -10, -20, -6, 21, 4, -16, 56, 46, 9, -68, 45, 21, 7, 24, -20, -7, 1
    0xfee229db, 0x28f30a2d, 0xfaf403e2, 0xf61a0f1a, 0x415faec, 0x92e38f0, 0x7152dbc, 0x1f9ec18,
    // 21, 15, -21, 46, 5, -41, -17, -40, -70, 1, 21, -17, 41, -47, -8, -17, 17, -33, -49, 12, -21, -28, -10, 62, -29, 4, -81, 17, 24, -9, 40, 2
    0x2eeb0f15, 0xd8efd705, 0xef1501ba, 0xeff8d129, 0xccfdf11, 0x3ef6e4eb, 0x11af04e3, 0x228f718,
    // 17, 17, -48, 24, -43, 45, -13, -19, -44, 46, 11, -23, 29, -46, -16, -20, 51, 11, -34, -5, -6, 9, -47, 4, -78, 6, -53, -21, 31, 51, -12, 8
    0x18d01111, 0xedf32dd5, 0xe90b2ed4, 0xecf0d21d, 0xfbde0b33, 0x4d109fa, 0xebcb06b2, 0x8f4331f,
    // -30, -41, -14, 24, -40, 13, 11, 6, 25, 69, -6, 41, -41, 7, -26, 5, 7, 3, 56, 18, -19, 17, 6, 33, 10, 7, -71, -47, -9, -5, 6, 62
    0x18f2d7e2, 0x60b0dd8, 0x29fa4519, 0x5e607d7, 0x12380307, 0x210611ed, 0xd1b9070a, 0x3e06fbf7,
    // 22, -66, -69, 22, -56, -42, -38, -58, -17, -24, 19, 28, 11, -5, 1, -36, 28, 31, -60, -24, 4, -10, -7, 45, -10, 5, -5, 0, 2, -37, 25, -37
    0x16bbbe16, 0xc6dad6c8, 0x1c13e8ef, 0xdc01fb0b, 0xe8c41f1c, 0x2df9f604, 0xfb05f6, 0xdb19db02,
    // -46, -49, -22, -32, -76, 24, 15, -12, 52, 60, -14, -42, -62, -35, 13, 2, 26, 7, 39, 4, 24, -28, 7, -96, 7, 13, -14, 19, 30, 15, 21, -42
    0xe0eacfd2, 0xf40f18b4, 0xd6f23c34, 0x20dddc2, 0x427071a, 0xa007e418, 0x13f20d07, 0xd6150f1e,
    // -54, -28, 11, 3, -54, 12, -5, 2, 48, 34, -27, 8, -26, 16, 22, -21, 69, -46, -40, 10, -56, 15, 29, -15, 112, -4, 15, -5, 6, 33, -45, -63
    0x30be4ca, 0x2fb0cca, 0x8e52230, 0xeb1610e6, 0xad8d245, 0xf11d0fc8, 0xfb0ffc70, 0xc1d32106,
    // -38, -46, 63, -6, 40, -28, -43, 34, 59, 36, 51, 13, -40, 34, 32, -51, 31, -3, -1, 16, 2, 73, -47, -32, -11, 3, 79, -58, 19, 10, -20, 16
    0xfa3fd2da, 0x22d5e428, 0xd33243b, 0xcd2022d8, 0x10fffd1f, 0xe0d14902, 0xc64f03f5, 0x10ec0a13,
    // -97, 79, 8, 42, -50, 38, 85, -6, 77, 26, -22, -47, -37, 32, -38, 19, -7, -91, -56, 23, -36, 3, -17, 52, 68, 31, 20, -34, 50, 4, -42, -75
    0x2a084f9f, 0xfa5526ce, 0xd1ea1a4d, 0x13da20db, 0x17c8a5f9, 0x34ef03dc, 0xde141f44, 0xb5d60432,
    // 0, -96, 7, 65, -40, -2, -28, 15, -10, 37, 19, 6, -39, -41, -33, -21, 47, -75, 51, 67, -41, 63, -55, 45, -9, 13, 58, -7, -23, 44, 37, 36
    0x4107a000, 0xfe4fed8, 0x61325f6, 0xebdfd7d9, 0x4333b52f, 0x2dc93fd7, 0xf93a0df7, 0x24252ce9,
    // 29, 56, 0, 13, 34, 34, 59, -3, -5, -5, -11, -15, -30, 13, 1, -47, -56, 4, 21, 27, -9, 8, 27, 50, -25, 11, 31, -35, -22, 9, 31, 27
    0xd00381d, 0xfd3b2222, 0xf1f5fbfb, 0xd1010de2, 0x1b1504c8, 0x321b08f7, 0xdd1f0be7, 0x1b1f09ea,
    // 3, 11, -25, 85, 29, 42, 18, -29, 12, 13, 26, 58, 29, 19, 39, 31, 20, -26, -19, 60, -26, -46, 25, 27, 9, 11, -12, -17, 9, 55, -38, 49
    0x55e70b03, 0xe3122a1d, 0x3a1a0d0c, 0x1f27131d, 0x3cede614, 0x1b19d2e6, 0xeff40b09, 0x31da3709,
    // 9, -36, 16, -17, 89, -83, 28, -73, 15, -11, 34, 20, -18, 77, 30, -5, -46, 16, 72, 46, 41, -31, 35, -2, 11, 5, 97, 25, -5, 37, 33, -11
    0xef10dc09, 0xb71cad59, 0x1422f50f, 0xfb1e4dee, 0x2e4810d2, 0xfe23e129, 0x1961050b, 0xf52125fb,
    // 30, 42, -35, 2, -22, 3, -9, 7, 4, 26, -66, -53, 59, -2, 10, -13, 11, 60, -32, 1, 44, 5, -4, -92, -9, 10, -3, -36, 53, 46, -11, -128
    0x2dd2a1e, 0x7f703ea, 0xcbbe1a04, 0xf30afe3b, 0x1e03c0b, 0xa4fc052c, 0xdcfd0af7, 0x80f52e35,
    // -17, -2, -72, -42, 40, 15, -4, -25, -13, 33, -47, 22, 17, 2, -51, 0, 44, 0, 41, -20, -40, -15, 7, -28, 56, 13, 17, -39, 15, -34, -36, 8
    0xd6b8feef, 0xe7fc0f28, 0x16d121f3, 0xcd0211, 0xec29002c, 0xe407f1d8, 0xd9110d38, 0x8dcde0f,
    // 25, 47, 29, 24, -36, -34, -32, 10, 32, 14, -25, -16, 34, -21, -53, -34, 0, 45, -43, 1, 24, 32, -35, -40, 13, -13, 40, -8, -31, -30, 3, -21
    0x181d2f19, 0xae0dedc, 0xf0e70e20, 0xdecbeb22, 0x1d52d00, 0xd8dd2018, 0xf828f30d, 0xeb03e2e1,
    // -13, -19, 91, -49, -10, 20, 4, -20, -21, 18, -27, -7, 30, -11, 7, -4, 77, -26, 10, 55, -11, -66, 16, -12, -17, -55, -19, -17, -26, -3, -29, -15
    0xcf5bedf3, 0xec0414f6, 0xf9e512eb, 0xfc07f51e, 0x370ae64d, 0xf410bef5, 0xefedc9ef, 0xf1e3fde6,
    // -11, -17, 24, -7, 15, 64, -28, 97, 49, 50, 50, 66, 11, 37, -7, -25, -31, 41, -30, -22, 16, -63, -4, 14, 16, -11, -29, 88, -43, -23, -13, 22
    0xf918eff5, 0x61e4400f, 0x42323231, 0xe7f9250b, 0xeae229e1, 0xefcc110, 0x58e3f510, 0x16f3e9d5,
    // 41, -56, -11, 22, 0, -14, -4, 60, 25, 18, -4, 30, 38, -26, -11, 41, -37, 34, -64, 15, 20, 28, -49, 30, -75, 10, -13, 26, -2, -5, -3, 16
    0x16f5c829, 0x3cfcf200, 0x1efc1219, 0x29f5e626, 0xfc022db, 0x1ecf1c14, 0x1af30ab5, 0x10fdfbfe,
    // -17, 17, 6, -42, 31, -23, 12, 39, 2, -38, 1, -12, -49, -25, -16, 24, 39, 29, 32, 41, 37, 28, -10, -35, 14, 22, -21, -44, -2, 48, -3, 0
    0xd60611ef, 0x270ce91f, 0xf401da02, 0x18f0e7cf, 0x29201d27, 0xddf61c25, 0xd4eb160e, 0xfd30fe,
    // 22, 14, 11, -15, 1, 54, 63, -38, 93, -20, -8, 10, -28, -7, 34, 13, 49, 4, 21, 9, -19, -15, -6, 4, 126, 14, -19, 4, 9, 9, -19, 41
    0xf10b0e16, 0xda3f3601, 0xaf8ec5d, 0xd22f9e4, 0x9150431, 0x4faf1ed, 0x4ed0e7e, 0x29ed0909,
    // 16, 55, -14, 14, -43, -3, -5, 6, 57, 63, -45, 30, 11, -33, -3, -9, -25, 1, 53, -14, -1, 2, -26, -23, -15, -11, 121, 6, 16, 11, 55, 48
    0xef23710, 0x6fbfdd5, 0x1ed33f39, 0xf7fddf0b, 0xf23501e7, 0xe9e602ff, 0x679f5f1, 0x30370b10,
};
static const uint embedded_encoder3_ResidualBlock_0_body_pw_contract_bias_dwords[16] = {
    // 0.0001305, 8.583e-05, -3.6e-07, -0.0001206, -9.24e-06, 0.0002345, 6.87e-05, 2.575e-05, 0.0001539, 0.000167, -9.36e-05, 0.000129, 0.000216, -0.0003285, -0.0001974, 6.616e-05
    0x5a00847, 0x87e78006, 0xbaf809b, 0x1b00481, 0x979090b, 0x83a8622, 0x8d620b14, 0x4568a78,
    // -0.0001339, -0.0001519, -5.114e-05, -0.0001487, 8.696e-05, 6.88e-05, 3.93e-05, 7.164e-05, -0.0001796, -0.0001265, -0.0001266, -6.5e-06, 0.0003173, 7.993e-05, -3.99e-05, -0.000238
    0x88fa8863, 0x88df835a, 0x48205b3, 0x4b20293, 0x882589e3, 0x806d8826, 0x53d0d33, 0x8bcc829d,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass4(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = {
        uint3(960, 540, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 32), // threadGroupSliceSize
        uint3(960, 540, 32), // storageSize
        uint3(32, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        33177600, // threadGroupStorageByteOffset
        storage_Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped };
    
    const ConstantBufferStorage<576> storage_embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0057100639678537846, storage_embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = { embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004463966935873032, storage_embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_encoder3_ResidualBlock_0_body_pw_expand_bias = { embedded_encoder3_ResidualBlock_0_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_encoder3_ResidualBlock_0_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_0_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004463531542569399, storage_embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder3_ResidualBlock_0_body_pw_contract_bias = { embedded_encoder3_ResidualBlock_0_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder3_ResidualBlock_0_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_0_body_pw_contract_bias };
    
    // /encoder3/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_8 = uint3(960, 540, 32);
    const int3 groupStart_slice_8 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_8 = uint3(64, 1, 32);
    const uint3 storageSize_slice_8 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_8 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_8 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_8 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_8 = dot(groupStart_slice_8, tensorByteStrides_slice_8);
    const RWBufferStorage storage_slice_8 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_8 = { logicalSize_slice_8, groupStart_slice_8, groupSize_slice_8, storageSize_slice_8, tensorByteStrides_slice_8, paddingBegin_slice_8, paddingEnd_slice_8, threadGroupByteOffsetInTensor_slice_8 + 49766400, storage_slice_8 };
    // Fusedquantized_/encoder3/ResidualBlock_0/residual_func/Concat_quantized_/encoder3/ResidualBlock_0/body/spatial_mixing/partial_conv/Conv_quantized_/encoder3/ResidualBlock_0/body/spatial_mixing/Concat_quantized_/encoder3/ResidualBlock_0/body/pw_expand/Conv_/encoder3/ResidualBlock_0/body/pw_expand_act/Relu_quantized_/encoder3/ResidualBlock_0/body/pw_contract/Conv_/encoder3/ResidualBlock_0/Add (32, 540, 960), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,) -> (32, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<32, 1>(0.016316018998622894, 0.019212350249290466, 0.02064499631524086, 0.015507712960243225, 0.022631894797086716, Fusedquantized__encoder2_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped, embedded__encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_0_body_spatial_mixing_partial_conv_bias, embedded__encoder3_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_0_body_pw_expand_bias, embedded__encoder3_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_0_body_pw_contract_bias, slice_8, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_4
#ifdef MLSR_PASS_4_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass4_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /encoder3/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_9 = uint3(960, 540, 32);
    const int3 groupStart_slice_9 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_9 = uint3(32, 1, 32);
    const uint3 storageSize_slice_9 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_9 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_9 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_9 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_9 = dot(groupStart_slice_9, tensorByteStrides_slice_9);
    const RWBufferStorage storage_slice_9 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_9 = { logicalSize_slice_9, groupStart_slice_9, groupSize_slice_9, storageSize_slice_9, tensorByteStrides_slice_9, paddingBegin_slice_9, paddingEnd_slice_9, threadGroupByteOffsetInTensor_slice_9 + 49766400, storage_slice_9 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_9, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_4_POST


#ifdef MLSR_PASS_5
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // -13, 28, -9, 10, -7, 6, -12, 5, -19, 33, 10, -16, -16, 0, 11, 10, -42, -3, -2, -4, -4, 26, 7, -59, 4, -26, -42, 19, -2, -26, -56, -5
    0xaf71cf3, 0x5f406f9, 0xf00a21ed, 0xa0b00f0, 0xfcfefdd6, 0xc5071afc, 0x13d6e604, 0xfbc8e6fe,
    // 2, -1, 12, -2, -8, -3, 27, 26, 2, -21, -12, 17, 22, -6, -35, 4, 41, -19, 30, 5, 26, -13, 40, 16, 3, 17, -24, -21, -17, 0, 5, -8
    0xfe0cff02, 0x1a1bfdf8, 0x11f4eb02, 0x4ddfa16, 0x51eed29, 0x1028f31a, 0xebe81103, 0xf80500ef,
    // -27, -14, 44, 18, -4, -27, -51, 21, -9, 25, -19, 5, -41, 27, 51, 8, -64, -26, -39, -10, 22, 21, -3, -5, -32, -1, 23, 9, -6, 6, 11, 17
    0x122cf2e5, 0x15cde5fc, 0x5ed19f7, 0x8331bd7, 0xf6d9e6c0, 0xfbfd1516, 0x917ffe0, 0x110b06fa,
    // 46, -12, 6, 14, 15, -13, 19, -8, 6, 1, 18, 2, 9, 0, -11, -1, 22, 15, 6, 34, 11, -16, 11, -7, 3, 18, 36, 2, 25, 13, -4, -6
    0xe06f42e, 0xf813f30f, 0x2120106, 0xfff50009, 0x22060f16, 0xf90bf00b, 0x2241203, 0xfafc0d19,
    // -12, -8, 15, 2, -32, 29, -17, -19, 9, -12, 10, -60, -13, -11, 9, -14, 0, -1, 0, -4, 10, 18, 25, -9, 16, 0, -2, 0, 26, -5, -13, -7
    0x20ff8f4, 0xedef1de0, 0xc40af409, 0xf209f5f3, 0xfc00ff00, 0xf719120a, 0xfe0010, 0xf9f3fb1a,
    // 38, 9, -5, -1, 2, 14, 29, 22, -23, 21, 39, -18, -1, 15, -8, -9, 37, 7, 3, -3, 10, 2, 14, 4, -4, 4, -3, -8, -4, -5, 4, 0
    0xfffb0926, 0x161d0e02, 0xee2715e9, 0xf7f80fff, 0xfd030725, 0x40e020a, 0xf8fd04fc, 0x4fbfc,
    // 40, -17, 28, -4, -8, 19, 43, 6, 4, 2, -25, -21, 0, 10, 1, 12, -64, -2, 57, -26, -94, 45, -13, -29, 37, -12, 12, -2, 56, 47, -44, -2
    0xfc1cef28, 0x62b13f8, 0xebe70204, 0xc010a00, 0xe639fec0, 0xe3f32da2, 0xfe0cf425, 0xfed42f38,
    // 0, 7, -36, -5, 18, 20, 6, 4, 8, 4, 32, -32, 44, 1, 3, 9, 22, 0, -7, -1, -8, 10, -2, 1, 4, -8, -9, -18, -3, -2, -8, -2
    0xfbdc0700, 0x4061412, 0xe0200408, 0x903012c, 0xfff90016, 0x1fe0af8, 0xeef7f804, 0xfef8fefd,
    // 10, 2, -6, 12, -3, 21, 38, -7, -12, 24, -33, -45, 18, -23, -33, 52, 6, 18, -1, -7, -16, 13, 13, 3, -21, -2, -3, -13, 0, -1, -22, 10
    0xcfa020a, 0xf92615fd, 0xd3df18f4, 0x34dfe912, 0xf9ff1206, 0x30d0df0, 0xf3fdfeeb, 0xaeaff00,
    // 1, -9, 8, 6, 13, 0, 8, -4, 2, 14, -13, -4, -12, -1, 6, 3, -3, -1, 18, 33, 11, 3, 23, 8, 7, -13, 43, 9, 22, -34, -26, -27
    0x608f701, 0xfc08000d, 0xfcf30e02, 0x306fff4, 0x2112fffd, 0x817030b, 0x92bf307, 0xe5e6de16,
    // -34, 8, 1, 6, 6, 20, 21, 7, -23, 1, 18, -18, -5, -25, -13, -8, 17, 4, 14, -2, -11, 10, -8, 15, -30, -40, 32, 27, 36, -2, 6, -5
    0x60108de, 0x7151406, 0xee1201e9, 0xf8f3e7fb, 0xfe0e0411, 0xff80af5, 0x1b20d8e2, 0xfb06fe24,
    // 25, -49, -6, 18, -35, 9, -17, -39, 12, 100, -8, 28, -22, 28, 5, 15, -14, -6, 35, 7, -4, 31, 14, 11, 40, -12, -28, 14, 0, -17, 9, -8
    0x12facf19, 0xd9ef09dd, 0x1cf8640c, 0xf051cea, 0x723faf2, 0xb0e1ffc, 0xee4f428, 0xf809ef00,
    // -8, 7, 11, 25, 18, -25, 16, 25, 1, 21, -20, -11, -1, 18, -16, 9, -41, 7, -17, 12, 46, -12, -30, -33, -16, 12, -53, 19, -26, 36, 10, 71
    0x190b07f8, 0x1910e712, 0xf5ec1501, 0x9f012ff, 0xcef07d7, 0xdfe2f42e, 0x13cb0cf0, 0x470a24e6,
    // -22, -8, -5, 2, -31, 12, 4, 1, -26, -12, 13, -10, -27, -5, -14, -12, 12, -10, 10, 4, 12, -11, 16, 8, -15, -16, -11, -9, 0, -4, 17, -2
    0x2fbf8ea, 0x1040ce1, 0xf60df4e6, 0xf4f2fbe5, 0x40af60c, 0x810f50c, 0xf7f5f0f1, 0xfe11fc00,
    // 34, -8, 26, 11, -10, -36, -27, -8, -29, 18, 0, 19, -10, 21, 12, 21, 5, -10, 5, -3, 2, -7, -7, -6, 6, 22, -4, 12, -9, -3, 14, 1
    0xb1af822, 0xf8e5dcf6, 0x130012e3, 0x150c15f6, 0xfd05f605, 0xfaf9f902, 0xcfc1606, 0x10efdf7,
    // -19, -13, -24, 29, -4, 7, -42, 26, -16, 57, -45, 7, -20, 1, 37, 14, -15, 23, -2, 45, 51, 50, -74, -18, -9, 9, 38, 65, 49, -13, 1, -10
    0x1de8f3ed, 0x1ad607fc, 0x7d339f0, 0xe2501ec, 0x2dfe17f1, 0xeeb63233, 0x412609f7, 0xf601f331,
    // -44, -18, -24, 22, 11, 26, -15, 1, -30, 15, 35, 36, -2, 15, 45, -5, -9, 1, -6, 4, -3, 13, -19, -3, -6, 10, -15, -11, -7, -4, -2, 0
    0x16e8eed4, 0x1f11a0b, 0x24230fe2, 0xfb2d0ffe, 0x4fa01f7, 0xfded0dfd, 0xf5f10afa, 0xfefcf9,
    // -20, -14, 3, 2, -7, -12, -19, -5, -14, -8, -21, 21, -20, -28, 5, -5, -23, -22, -1, -1, 1, -16, -7, 8, 3, 1, 4, 27, 2, -20, -11, -3
    0x203f2ec, 0xfbedf4f9, 0x15ebf8f2, 0xfb05e4ec, 0xffffeae9, 0x8f9f001, 0x1b040103, 0xfdf5ec02,
    // -8, 18, -7, 2, -4, -1, -32, -1, -6, 23, 8, -4, -21, -4, 7, 11, 47, -34, 12, -8, -18, 2, -35, -13, 11, 8, -37, -38, 12, -10, 1, 52
    0x2f912f8, 0xffe0fffc, 0xfc0817fa, 0xb07fceb, 0xf80cde2f, 0xf3dd02ee, 0xdadb080b, 0x3401f60c,
    // 11, 4, 6, 6, -3, 3, -10, -13, -1, 6, -11, 7, 3, -12, -15, 6, -27, 10, 14, -15, 1, -6, 24, 40, -35, 15, -18, -25, -23, 48, 15, 38
    0x606040b, 0xf3f603fd, 0x7f506ff, 0x6f1f403, 0xf10e0ae5, 0x2818fa01, 0xe7ee0fdd, 0x260f30e9,
    // -42, 16, -32, -36, -13, 32, 5, -33, -22, -66, 12, 24, 36, -24, -40, -43, 35, -2, -32, -2, 9, -9, 26, 19, -4, 10, 24, -34, 9, -36, -28, -18
    0xdce010d6, 0xdf0520f3, 0x180cbeea, 0xd5d8e824, 0xfee0fe23, 0x131af709, 0xde180afc, 0xeee4dc09,
    // -3, 3, 1, 14, 23, -25, 1, 24, -5, 29, -16, -8, -4, 22, -30, -7, -34, 45, 29, -8, 51, 6, -1, -45, -6, -4, 32, 38, -47, 37, 46, 19
    0xe0103fd, 0x1801e717, 0xf8f01dfb, 0xf9e216fc, 0xf81d2dde, 0xd3ff0633, 0x2620fcfa, 0x132e25d1,
    // 8, -2, 21, -10, -18, 43, -9, -6, 3, 2, 23, -35, -14, -13, 11, -30, -50, 17, -18, 17, -15, 7, -43, -13, 1, 17, 16, 28, 4, -17, -27, -17
    0xf615fe08, 0xfaf72bee, 0xdd170203, 0xe20bf3f2, 0x11ee11ce, 0xf3d507f1, 0x1c101101, 0xefe5ef04,
    // -7, -24, 5, -1, 6, -8, 38, 18, 2, -45, 23, -3, 23, -12, -22, -15, 35, -14, 6, 24, -5, -16, -7, -6, -1, -3, 0, 7, 1, -5, -30, 10
    0xff05e8f9, 0x1226f806, 0xfd17d302, 0xf1eaf417, 0x1806f223, 0xfaf9f0fb, 0x700fdff, 0xae2fb01,
    // -36, -39, -4, -38, -25, 15, 37, 20, -6, -5, -34, 53, -50, 16, 51, 4, 25, 12, 26, -1, -74, -36, 64, 15, -40, -11, -1, -7, 42, -4, -1, 4
    0xdafcd9dc, 0x14250fe7, 0x35defbfa, 0x43310ce, 0xff1a0c19, 0xf40dcb6, 0xf9fff5d8, 0x4fffc2a,
    // 16, 7, -15, 26, 53, 13, -41, 11, -59, 21, 24, -26, -16, -43, -42, -10, 0, -12, 5, -9, 1, 3, -10, -7, 15, -2, -2, 11, -10, 8, 4, 5
    0x1af10710, 0xbd70d35, 0xe61815c5, 0xf6d6d5f0, 0xf705f400, 0xf9f60301, 0xbfefe0f, 0x50408f6,
    // -39, 24, -5, -2, -3, -16, -3, 28, -3, -3, -28, 7, 6, 41, -4, -4, 16, 9, 28, 18, 34, -11, 5, -5, 22, 15, -15, -2, 7, 0, 26, 7
    0xfefb18d9, 0x1cfdf0fd, 0x7e4fdfd, 0xfcfc2906, 0x121c0910, 0xfb05f522, 0xfef10f16, 0x71a0007,
    // 5, -7, -11, -7, -10, 1, 3, -4, -5, -12, 13, -10, 7, -9, -10, 12, 26, 10, -17, 2, -11, -5, 15, 12, -22, -9, -25, -28, 21, -38, -2, 32
    0xf9f5f905, 0xfc0301f6, 0xf60df4fb, 0xcf6f707, 0x2ef0a1a, 0xc0ffbf5, 0xe4e7f7ea, 0x20feda15,
    // 23, 2, 13, 10, 11, 8, 21, 4, 23, -3, -15, -1, 11, -19, 0, 9, -14, -16, 18, 13, -16, 26, 15, -22, -2, 10, 66, 24, 36, -10, 7, -9
    0xa0d0217, 0x415080b, 0xfff1fd17, 0x900ed0b, 0xd12f0f2, 0xea0f1af0, 0x18420afe, 0xf707f624,
    // -72, -81, -18, -33, 18, 10, -27, 39, -31, 6, 16, 57, -2, 32, 15, -48, 48, 23, 27, 11, 7, -4, 20, -16, 41, 15, -55, 25, 25, 17, 54, 39
    0xdfeeafb8, 0x27e50a12, 0x391006e1, 0xd00f20fe, 0xb1b1730, 0xf014fc07, 0x19c90f29, 0x27361119,
    // 25, 2, -3, -16, 3, 4, 8, 4, 5, -6, 11, 12, 30, -13, -5, -6, 24, -28, 12, 6, 8, -19, -16, 8, 16, 10, -1, -8, -4, 28, -21, -24
    0xf0fd0219, 0x4080403, 0xc0bfa05, 0xfafbf31e, 0x60ce418, 0x8f0ed08, 0xf8ff0a10, 0xe8eb1cfc,
    // 32, -2, 2, 9, 16, 3, 10, 12, 8, 18, -8, 11, 0, 3, -7, -19, -18, 7, 20, -17, 16, 7, 30, -6, -1, 9, -14, -7, -11, -13, 15, -9
    0x902fe20, 0xc0a0310, 0xbf81208, 0xedf90300, 0xef1407ee, 0xfa1e0710, 0xf9f209ff, 0xf70ff3f5,
    // -43, -6, -11, -18, 31, 2, -5, 17, 7, -30, 12, 31, -12, 15, -23, -47, 15, -2, 4, -13, -5, -6, 13, 6, -5, -2, -10, 4, 22, 5, 14, 4
    0xeef5fad5, 0x11fb021f, 0x1f0ce207, 0xd1e90ff4, 0xf304fe0f, 0x60dfafb, 0x4f6fefb, 0x40e0516,
    // -37, -11, -24, -38, -6, 47, -60, -7, -30, -25, -46, 26, 24, 2, -39, -16, 0, -19, 55, 30, 15, 17, -19, 52, 29, -49, 20, 1, -57, -3, 41, -9
    0xdae8f5db, 0xf9c42ffa, 0x1ad2e7e2, 0xf0d90218, 0x1e37ed00, 0x34ed110f, 0x114cf1d, 0xf729fdc7,
    // 62, 6, -3, 27, -2, -58, 35, -28, 17, 25, 24, 13, 9, -9, 32, 24, -5, 6, 7, 5, 12, -29, 17, 23, -14, -4, -12, 5, 19, 10, -31, 0
    0x1bfd063e, 0xe423c6fe, 0xd181911, 0x1820f709, 0x50706fb, 0x1711e30c, 0x5f4fcf2, 0xe10a13,
    // 21, 2, 18, 26, 33, -43, 19, -22, 0, 23, -6, -1, 10, -5, 9, 46, 9, 0, -10, -1, -20, 4, -4, 12, -16, 11, 19, -3, -5, -20, -19, -31
    0x1a120215, 0xea13d521, 0xfffa1700, 0x2e09fb0a, 0xfff60009, 0xcfc04ec, 0xfd130bf0, 0xe1edecfb,
    // 16, -30, 4, -15, 16, -8, -4, 10, 8, -18, -22, -10, -9, 23, 46, -2, 28, 45, -11, 33, -30, 23, 26, -33, -39, 27, 6, 1, 14, -15, -11, 27
    0xf104e210, 0xafcf810, 0xf6eaee08, 0xfe2e17f7, 0x21f52d1c, 0xdf1a17e2, 0x1061bd9, 0x1bf5f10e,
    // -39, 16, -10, 4, 12, 3, 37, 26, -22, -21, 26, -25, -1, -25, 8, -29, -29, -4, -2, -35, -19, -5, -12, -5, -8, 1, -7, -15, -52, -21, 3, 7
    0x4f610d9, 0x1a25030c, 0xe71aebea, 0xe308e7ff, 0xddfefce3, 0xfbf4fbed, 0xf1f901f8, 0x703ebcc,
    // 19, 25, 33, 5, 48, 22, -16, 15, -10, -54, 12, 20, -25, -50, 2, -8, 23, 20, 27, -21, -10, -30, 6, -19, 17, -4, 12, 24, 9, -7, 23, 9
    0x5211913, 0xff01630, 0x140ccaf6, 0xf802cee7, 0xeb1b1417, 0xed06e2f6, 0x180cfc11, 0x917f909,
    // -18, 32, 3, -1, -14, -8, 19, 7, -1, -8, -6, -5, 9, 5, 11, 6, -12, -38, -26, 0, -34, -11, 17, 35, 20, 15, -15, -13, 42, 55, -3, -8
    0xff0320ee, 0x713f8f2, 0xfbfaf8ff, 0x60b0509, 0xe6daf4, 0x2311f5de, 0xf3f10f14, 0xf8fd372a,
    // -12, 7, -37, -1, -8, 0, 6, 4, -33, 8, -2, 18, -2, 30, -8, 17, -21, -19, -17, 5, -14, 2, -21, -18, 8, 8, 8, -25, 7, 9, 27, 17
    0xffdb07f4, 0x40600f8, 0x12fe08df, 0x11f81efe, 0x5efedeb, 0xeeeb02f2, 0xe7080808, 0x111b0907,
    // 26, -16, -52, -25, -15, -35, -1, 56, -19, -28, -3, 5, 13, -2, 42, 8, -1, 4, -5, -29, -7, -23, -1, 3, 15, -7, -14, 21, 16, 8, 44, -7
    0xe7ccf01a, 0x38ffddf1, 0x5fde4ed, 0x82afe0d, 0xe3fb04ff, 0x3ffe9f9, 0x15f2f90f, 0xf92c0810,
    // -4, -25, 28, -51, -19, 17, 57, -20, -46, -62, 6, 3, -14, -45, -35, 13, 2, 4, 19, 28, -42, -9, 13, 2, 24, -1, -30, -25, 38, -17, -128, 16
    0xcd1ce7fc, 0xec3911ed, 0x306c2d2, 0xdddd3f2, 0x1c130402, 0x20df7d6, 0xe7e2ff18, 0x1080ef26,
    // -27, 16, 10, 21, 56, -13, 0, -17, 15, 23, -1, 36, 10, 61, 56, -4, 14, 5, 19, 18, 16, -24, 14, 21, 14, 9, -11, -3, 19, -17, 9, -10
    0x150a10e5, 0xef00f338, 0x24ff170f, 0xfc383d0a, 0x1213050e, 0x150ee810, 0xfdf5090e, 0xf609ef13,
    // 18, 24, 3, -1, 14, 35, -21, -15, -10, -9, -4, 19, -30, 9, 26, -35, 4, -6, -10, -7, -23, 18, -22, 1, -21, 7, 7, -9, -12, 0, -15, -36
    0xff031812, 0xf1eb230e, 0x13fcf7f6, 0xdd1a09e2, 0xf9f6fa04, 0x1ea12e9, 0xf70707eb, 0xdcf100f4,
    // -5, 5, -7, 17, -18, -11, -34, 11, -4, 29, 33, 15, -5, -1, 12, 18, -44, 13, -30, -25, -20, -6, -20, -28, -12, 7, 48, 25, -8, 33, 11, -20
    0x11f905fb, 0xbdef5ee, 0xf211dfc, 0x120cfffb, 0xe7e20dd4, 0xe4ecfaec, 0x193007f4, 0xec0b21f8,
    // 0, -24, 2, 2, 2, -7, 5, 4, -1, 6, -7, 43, -1, 18, 0, 0, -6, 26, 37, 17, -7, -22, 17, 10, -3, -1, 30, -34, -2, 32, 22, 8
    0x202e800, 0x405f902, 0x2bf906ff, 0x12ff, 0x11251afa, 0xa11eaf9, 0xde1efffd, 0x81620fe,
    // 10, -26, -35, -18, 26, 39, 8, -2, -36, -44, 38, -68, -1, -78, -42, -32, -5, 6, -26, -13, 8, -24, 2, 1, 23, 5, -54, 35, 19, 16, 0, 26
    0xeedde60a, 0xfe08271a, 0xbc26d4dc, 0xe0d6b2ff, 0xf3e606fb, 0x102e808, 0x23ca0517, 0x1a001013,
    // 7, 6, 16, 17, 15, -9, -10, 4, 15, 16, -20, 3, -14, 0, -3, -9, -9, 4, 2, 16, 16, -9, 20, 19, 26, 22, -60, 0, 22, -25, -8, 38
    0x11100607, 0x4f6f70f, 0x3ec100f, 0xf7fd00f2, 0x100204f7, 0x1314f710, 0xc4161a, 0x26f8e716,
    // -14, 16, 38, 2, 1, 23, -9, 6, 17, -27, -32, -10, 0, -12, 26, -6, -7, -10, -14, -2, 0, -8, -22, 6, 4, 12, 5, 25, 0, -6, 5, -8
    0x22610f2, 0x6f71701, 0xf6e0e511, 0xfa1af400, 0xfef2f6f9, 0x6eaf800, 0x19050c04, 0xf805fa00,
    // -20, 2, 48, -2, -38, -9, -32, -33, 2, 16, -4, 11, -12, 23, -20, 23, -28, 5, -2, 18, 18, 24, 21, 3, -11, 7, 26, -22, -11, -10, -44, -14
    0xfe3002ec, 0xdfe0f7da, 0xbfc1002, 0x17ec17f4, 0x12fe05e4, 0x3151812, 0xea1a07f5, 0xf2d4f6f5,
    // -4, -2, -38, 5, -7, 24, 32, 17, -18, -44, -33, -17, 29, 6, -22, 19, -3, -7, -35, -11, 15, -9, 44, 7, -91, -22, -23, 13, 89, 54, -1, 12
    0x5dafefc, 0x112018f9, 0xefdfd4ee, 0x13ea061d, 0xf5ddf9fd, 0x72cf70f, 0xde9eaa5, 0xcff3659,
    // 22, -28, 17, -7, -46, 3, 34, 14, -29, 30, 3, 15, -38, 24, -16, -33, 9, -13, 13, -4, -8, 2, 14, -11, 2, -17, -3, 3, 5, -31, -15, 10
    0xf911e416, 0xe2203d2, 0xf031ee3, 0xdff018da, 0xfc0df309, 0xf50e02f8, 0x3fdef02, 0xaf1e105,
    // 43, 20, -2, 20, -2, 34, -20, 14, 6, 10, 13, -11, 26, -47, 25, -21, 14, 1, 10, -2, 4, 1, -12, -21, 33, -6, -1, -11, 8, 7, 29, 4
    0x14fe142b, 0xeec22fe, 0xf50d0a06, 0xeb19d11a, 0xfe0a010e, 0xebf40104, 0xf5fffa21, 0x41d0708,
    // -30, 0, 16, -15, 9, 8, 32, -4, -8, -8, -26, 1, -11, 4, 0, -15, -64, 17, 1, -29, 5, 8, 8, 41, -4, -8, -37, 14, -15, 0, 17, -20
    0xf11000e2, 0xfc200809, 0x1e6f8f8, 0xf10004f5, 0xe30111c0, 0x29080805, 0xedbf8fc, 0xec1100f1,
    // -24, -2, -11, -16, 0, -6, -6, 2, 19, -16, -2, -3, 11, -6, 28, 1, 3, -4, 12, 33, -24, -19, 0, 21, -25, 41, 32, -16, -33, 38, 14, 19
    0xf0f5fee8, 0x2fafa00, 0xfdfef013, 0x11cfa0b, 0x210cfc03, 0x1500ede8, 0xf02029e7, 0x130e26df,
    // 45, 25, 10, -7, -44, 54, 27, -61, -59, -36, -5, 46, 3, -13, -88, 20, -35, 23, 33, 17, 9, 44, -17, 14, 9, -26, -25, -11, -1, -27, 17, -9
    0xf90a192d, 0xc31b36d4, 0x2efbdcc5, 0x14a8f303, 0x112117dd, 0xeef2c09, 0xf5e7e609, 0xf711e5ff,
    // 12, 2, -14, 11, 6, -21, 2, 5, 2, 6, 18, -3, 20, -14, 25, -3, 44, -10, 32, 35, 21, -35, 7, -3, -11, 53, 25, -24, 47, 14, -22, 7
    0xbf2020c, 0x502eb06, 0xfd120602, 0xfd19f214, 0x2320f62c, 0xfd07dd15, 0xe81935f5, 0x7ea0e2f,
    // -6, -3, -22, -10, 1, -27, 6, 2, -52, 16, 11, 21, -18, 9, -33, -8, -20, 5, -24, -16, 20, 19, -21, 4, 19, 14, -30, 43, -14, 4, -9, -25
    0xf6eafdfa, 0x206e501, 0x150b10cc, 0xf8df09ee, 0xf0e805ec, 0x4eb1314, 0x2be20e13, 0xe7f704f2,
    // 17, -9, 47, 1, -3, 32, 3, 7, 5, -6, -14, -20, 8, 8, -3, -6, 24, -25, 26, 8, 13, -32, 7, 4, 10, -20, -2, 24, 1, 15, -34, 15
    0x12ff711, 0x70320fd, 0xecf2fa05, 0xfafd0808, 0x81ae718, 0x407e00d, 0x18feec0a, 0xfde0f01,
    // 15, -2, -18, -15, -25, 11, 1, 22, 2, -54, 26, 59, -1, -18, 13, -3, 55, 14, -80, 34, -30, 17, -7, 42, -1, 37, -9, -71, 20, -11, 15, -60
    0xf1eefe0f, 0x16010be7, 0x3b1aca02, 0xfd0deeff, 0x22b00e37, 0x2af911e2, 0xb9f725ff, 0xc40ff514,
    // 9, 10, -53, -2, 56, -23, -32, 2, 6, 12, -25, 24, 21, 27, 28, 27, -27, -29, -9, -12, -11, -8, 3, -10, 11, -17, 31, 9, 0, -18, 1, 14
    0xfecb0a09, 0x2e0e938, 0x18e70c06, 0x1b1c1b15, 0xf4f7e3e5, 0xf603f8f5, 0x91fef0b, 0xe01ee00,
    // -17, 20, -1, -2, -14, 1, 21, -4, -13, 14, 27, 9, 30, -11, 11, 34, -17, -1, -15, -14, -34, 10, -3, -18, -8, -14, 18, -15, -15, 2, 38, -1
    0xfeff14ef, 0xfc1501f2, 0x91b0ef3, 0x220bf51e, 0xf2f1ffef, 0xeefd0ade, 0xf112f2f8, 0xff2602f1,
    // -2, -18, 2, -13, 0, -4, -8, -7, -5, 11, -2, 3, -8, 4, 36, 16, -8, 26, -2, -17, -8, -17, 8, -5, 14, -15, 16, 15, 0, 39, 16, 0
    0xf302eefe, 0xf9f8fc00, 0x3fe0bfb, 0x102404f8, 0xeffe1af8, 0xfb08eff8, 0xf10f10e, 0x102700,
    // 12, 1, -6, 18, 1, -3, 6, -8, -19, 12, 29, -20, 7, -1, 12, 4, -29, -4, -9, 7, -26, -15, -14, 13, 9, 24, 6, -4, -10, 6, 6, 26
    0x12fa010c, 0xf806fd01, 0xec1d0ced, 0x40cff07, 0x7f7fce3, 0xdf2f1e6, 0xfc061809, 0x1a0606f6,
    // -32, -45, -31, 24, 42, -35, -17, -20, 1, -13, -46, 53, -36, 70, -15, 25, 46, 54, 29, 37, 89, 45, -39, -14, 31, 2, -5, -57, 1, -63, 6, -22
    0x18e1d3e0, 0xecefdd2a, 0x35d2f301, 0x19f146dc, 0x251d362e, 0xf2d92d59, 0xc7fb021f, 0xea06c101,
    // -10, 8, 5, 1, -3, 3, -10, -15, 14, -3, 4, -8, 2, -4, 4, 1, 12, -27, -6, -14, -15, 29, 1, -3, 8, -25, 2, 2, -8, -26, -14, -3
    0x10508f6, 0xf1f603fd, 0xf804fd0e, 0x104fc02, 0xf2fae50c, 0xfd011df1, 0x202e708, 0xfdf2e6f8,
    // 17, 17, -8, 2, -41, 38, -2, 20, -13, 21, -2, -21, -17, -32, -38, -43, 3, 5, 0, 6, -15, 17, 13, -5, -27, -15, -8, -25, 1, 7, -22, 14
    0x2f81111, 0x14fe26d7, 0xebfe15f3, 0xd5dae0ef, 0x6000503, 0xfb0d11f1, 0xe7f8f1e5, 0xeea0701,
    // -2, 14, 6, 17, 6, 5, -1, 1, 32, -10, 49, -7, 19, -22, -11, -24, 14, 1, -3, -7, -5, -18, -9, -17, 5, 26, 7, 19, 5, 9, 1, 3
    0x11060efe, 0x1ff0506, 0xf931f620, 0xe8f5ea13, 0xf9fd010e, 0xeff7eefb, 0x13071a05, 0x3010905,
    // 21, 1, -7, 31, 9, -28, 11, 10, -2, 19, -14, -61, 0, -70, -25, 62, -1, 14, 10, -55, -12, -24, 24, 8, -41, -40, 1, 83, -44, -33, 40, -59
    0x1ff90115, 0xa0be409, 0xc3f213fe, 0x3ee7ba00, 0xc90a0eff, 0x818e8f4, 0x5301d8d7, 0xc528dfd4,
    // -27, -22, 4, -10, 58, 27, -27, 11, -5, 20, 7, 18, -22, 64, 5, -41, -1, -7, -1, 0, 6, 6, -7, -5, -3, 5, -11, 1, 26, 5, -26, -6
    0xf604eae5, 0xbe51b3a, 0x120714fb, 0xd70540ea, 0xfff9ff, 0xfbf90606, 0x1f505fd, 0xfae6051a,
    // 0, 39, 15, 9, 26, -28, 25, 14, 11, 3, -27, 6, -6, 34, 4, 26, 2, 4, 10, -11, -3, 6, -10, -1, 17, -5, 6, -11, -19, -5, -5, -10
    0x90f2700, 0xe19e41a, 0x6e5030b, 0x1a0422fa, 0xf50a0402, 0xfff606fd, 0xf506fb11, 0xf6fbfbed,
};
static const uint embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // -0.000425, 0.00011784, -0.0002168, -7.683e-05, -5.6e-06, 4.566e-05, -0.0001875, -7.445e-05, 0.0003266, -0.0003169, 0.000287, -0.000151, 6.396e-05, 2.26e-06, 5.51e-05, 0.000166
    0x7b98ef7, 0x85098b1b, 0x2fe805e, 0x84e18a25, 0x8d310d5a, 0x88f30cb4, 0x260431, 0x971039c,
};
static const uint embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 29, 23, 45, 65, 37, 15, -42, 56, -51, 63, 58, -44, 59, 34, -26, 59, -47, 67, 18, -18, -24, -25, 7, 11, -12, 27, -63, -31, 9, 4, -16, 2
    0x412d171d, 0x38d60f25, 0xd43a3fcd, 0x3be6223b, 0xee1243d1, 0xb07e7e8, 0xe1c11bf4, 0x2f00409,
    // 12, -14, 16, 32, -9, 11, 12, 4, -19, 5, 4, 21, 6, -16, 2, -13, -30, 88, 16, -83, 38, 8, 75, 3, 2, 115, 32, -61, 16, 31, -48, -8
    0x2010f20c, 0x40c0bf7, 0x150405ed, 0xf302f006, 0xad1058e2, 0x34b0826, 0xc3207302, 0xf8d01f10,
    // 13, -4, 1, 33, -5, -30, -38, 44, 16, -55, -58, -21, 27, 85, -24, -17, -70, -31, -39, 1, -17, -40, -31, -6, -11, -12, 11, 19, -10, 31, -25, -31
    0x2101fc0d, 0x2cdae2fb, 0xebc6c910, 0xefe8551b, 0x1d9e1ba, 0xfae1d8ef, 0x130bf4f5, 0xe1e71ff6,
    // 43, 2, 14, 17, -7, 21, 43, 24, -29, -15, -16, 17, 11, -32, 1, 5, -5, 50, -5, -41, -19, -46, 63, -86, 49, 94, -2, -64, -11, -27, -82, -3
    0x110e022b, 0x182b15f9, 0x11f0f1e3, 0x501e00b, 0xd7fb32fb, 0xaa3fd2ed, 0xc0fe5e31, 0xfdaee5f5,
    // -16, 1, 37, 74, 44, -46, 56, -75, 57, -31, -59, -81, -72, -5, -48, 64, -54, 14, 10, -6, -21, -38, -7, -4, -22, 59, -35, 26, 36, -13, -30, -28
    0x4a2501f0, 0xb538d22c, 0xafc5e139, 0x40d0fbb8, 0xfa0a0eca, 0xfcf9daeb, 0x1add3bea, 0xe4e2f324,
    // -10, -6, -1, 5, 0, 1, -3, 2, -7, -8, 9, -2, 3, 0, -7, 1, 9, 22, -17, 3, 63, 43, -69, 60, -84, -24, 17, -37, -42, 5, 7, 19
    0x5fffaf6, 0x2fd0100, 0xfe09f8f9, 0x1f90003, 0x3ef1609, 0x3cbb2b3f, 0xdb11e8ac, 0x130705d6,
    // -58, 52, 56, 46, -59, 43, -70, 11, 3, -12, 67, 25, -78, -30, 26, 32, -41, 23, 33, -25, 12, 15, -1, -15, -40, 19, -60, -47, -7, -21, -15, -54
    0x2e3834c6, 0xbba2bc5, 0x1943f403, 0x201ae2b2, 0xe72117d7, 0xf1ff0f0c, 0xd1c413d8, 0xcaf1ebf9,
    // 15, -27, 19, -15, -14, 28, -10, -21, -1, 27, 7, 16, -18, -23, 33, 5, -87, -34, 7, -52, 47, -57, -15, 28, -35, -64, 25, 37, -61, 29, -54, -21
    0xf113e50f, 0xebf61cf2, 0x10071bff, 0x521e9ee, 0xcc07dea9, 0x1cf1c72f, 0x2519c0dd, 0xebca1dc3,
    // -21, -12, -20, 20, 39, -13, 4, 1, 10, -7, 36, -19, 21, -6, -28, 9, -46, -1, 3, -25, 39, -14, 6, 2, 56, 104, -37, -40, -37, 29, 16, -102
    0x14ecf4eb, 0x104f327, 0xed24f90a, 0x9e4fa15, 0xe703ffd2, 0x206f227, 0xd8db6838, 0x9a101ddb,
    // 16, -41, -44, -8, -16, 70, -55, -37, 32, 37, 4, -47, 0, -32, -17, -6, -44, 57, 104, 9, 5, -8, -6, -17, -26, 80, -79, 39, -29, -18, -55, 19
    0xf8d4d710, 0xdbc946f0, 0xd1042520, 0xfaefe000, 0x96839d4, 0xeffaf805, 0x27b150e6, 0x13c9eee3,
    // -6, -20, -23, 10, 21, -22, -9, 15, -6, 5, 17, -9, 15, -3, -12, 13, -47, 97, 3, -103, 5, -19, 3, 46, 89, 34, -124, -91, -7, 22, 55, -34
    0xae9ecfa, 0xff7ea15, 0xf71105fa, 0xdf4fd0f, 0x990361d1, 0x2e03ed05, 0xa5842259, 0xde3716f9,
    // -27, 7, -42, -38, 17, 52, 11, 95, 13, -38, 42, 50, 44, -2, 38, -64, -57, 32, -34, 10, 1, -8, 2, -4, -23, 11, -40, -24, 8, -11, -28, -7
    0xdad607e5, 0x5f0b3411, 0x322ada0d, 0xc026fe2c, 0xade20c7, 0xfc02f801, 0xe8d80be9, 0xf9e4f508,
    // -28, -30, 23, 0, -5, -4, 18, -12, -8, -10, -5, 16, 33, 30, 26, 14, -18, -31, 114, -6, 34, 31, 16, 11, -18, 42, -8, -85, 13, 3, -33, 23
    0x17e2e4, 0xf412fcfb, 0x10fbf6f8, 0xe1a1e21, 0xfa72e1ee, 0xb101f22, 0xabf82aee, 0x17df030d,
    // -52, -70, -49, 115, 49, 31, -17, 38, 32, 32, 107, -58, 41, 22, -78, 16, 35, -26, 0, 32, 20, 24, 20, -1, -16, -13, -55, -32, 25, -3, -1, 22
    0x73cfbacc, 0x26ef1f31, 0xc66b2020, 0x10b21629, 0x2000e623, 0xff141814, 0xe0c9f3f0, 0x16fffd19,
    // -23, -38, -54, 34, -35, 77, -74, -56, -22, -19, -21, -49, 71, -33, 7, 37, -28, 75, 45, 10, -1, -28, 3, 16, -26, 43, -12, -15, -5, -2, -1, 8
    0x22cadae9, 0xc8b64ddd, 0xcfebedea, 0x2507df47, 0xa2d4be4, 0x1003e4ff, 0xf1f42be6, 0x8fffefb,
    // -1, -44, -17, -29, -16, -9, -63, 0, 27, 21, 15, -27, -7, -9, 4, 10, -28, -50, 28, 20, -29, 91, -76, -91, -45, 9, 29, 88, 9, -36, -72, 17
    0xe3efd4ff, 0xc1f7f0, 0xe50f151b, 0xa04f7f9, 0x141ccee4, 0xa5b45be3, 0x581d09d3, 0x11b8dc09,
    // -59, -38, -18, 3, 19, 42, -20, -4, 4, 37, -22, 55, 34, 37, 51, 48, -14, -7, 14, -54, -15, -1, 48, -19, 39, 27, 8, -77, -86, 9, -70, -10
    0x3eedac5, 0xfcec2a13, 0x37ea2504, 0x30332522, 0xca0ef9f2, 0xed30fff1, 0xb3081b27, 0xf6ba09aa,
    // -4, 50, -25, -23, 22, -28, 32, 8, 4, -32, -2, 9, 6, 10, -4, 34, -4, 41, -39, -21, -21, 31, 35, 5, -17, 111, -5, -61, 16, -27, -9, -17
    0xe9e732fc, 0x820e416, 0x9fee004, 0x22fc0a06, 0xebd929fc, 0x5231feb, 0xc3fb6fef, 0xeff7e510,
    // 14, -78, 60, -16, 15, -41, -17, 80, 44, 41, 46, 6, -49, 43, 3, -31, -25, 3, -7, -5, -20, 11, 1, -9, -21, 33, -10, -53, 16, -14, -57, -8
    0xf03cb20e, 0x50efd70f, 0x62e292c, 0xe1032bcf, 0xfbf903e7, 0xf7010bec, 0xcbf621eb, 0xf8c7f210,
    // 35, -23, 43, -26, -61, 11, 0, -7, -39, 10, -45, 17, -30, -21, 20, 4, -115, 29, -15, -38, -29, -64, -25, 36, 20, 86, -46, -18, 4, 52, -22, -38
    0xe62be923, 0xf9000bc3, 0x11d30ad9, 0x414ebe2, 0xdaf11d8d, 0x24e7c0e3, 0xeed25614, 0xdaea3404,
    // 36, 6, 85, -2, -22, 81, 38, 38, 36, -55, 16, 34, 71, -49, -60, 47, -49, 98, 56, 24, 15, -54, 26, 56, -11, 17, -22, -61, 5, 1, 47, 22
    0xfe550624, 0x262651ea, 0x2210c924, 0x2fc4cf47, 0x183862cf, 0x381aca0f, 0xc3ea11f5, 0x162f0105,
    // 23, 50, 6, 24, -14, -21, 57, -1, -34, -14, -33, 26, -24, -17, 21, 14, -98, 95, -17, -60, -34, -87, -20, 51, -8, 63, -75, -41, 41, 1, 36, -54
    0x18063217, 0xff39ebf2, 0x1adff2de, 0xe15efe8, 0xc4ef5f9e, 0x33eca9de, 0xd7b53ff8, 0xca240129,
    // 27, -10, 42, -11, -44, 32, 5, -7, -24, 3, -22, -9, -28, -22, 13, -8, -19, -14, -7, -67, 42, 7, 2, 22, 8, -4, -59, -24, 47, -77, -85, -59
    0xf52af61b, 0xf90520d4, 0xf7ea03e8, 0xf80deae4, 0xbdf9f2ed, 0x1602072a, 0xe8c5fc08, 0xc5abb32f,
    // 58, 0, 68, 87, -3, -13, -47, -13, 18, 11, -19, 47, 52, 33, -79, -25, -37, 77, -20, 18, 21, -33, 33, 54, -15, -36, -85, -95, 10, 19, 17, -9
    0x5744003a, 0xf3d1f3fd, 0x2fed0b12, 0xe7b12134, 0x12ec4ddb, 0x3621df15, 0xa1abdcf1, 0xf711130a,
    // -16, -4, 49, -27, -43, -4, 15, -26, -25, -14, 25, -40, 4, 38, -10, -26, -4, -52, -15, -36, -34, -16, -62, 58, -60, -17, -120, 3, -13, -76, -37, 4
    0xe531fcf0, 0xe60ffcd5, 0xd819f2e7, 0xe6f62604, 0xdcf1ccfc, 0x3ac2f0de, 0x388efc4, 0x4dbb4f3,
    // 16, 25, -11, 43, 25, -28, -64, -1, -74, -10, -53, -2, 11, -21, 78, -79, -58, 20, 6, 33, 17, 5, 2, -7, 22, 33, -8, 3, 45, -2, 6, -1
    0x2bf51910, 0xffc0e419, 0xfecbf6b6, 0xb14eeb0b, 0x210614c6, 0xf9020511, 0x3f82116, 0xff06fe2d,
    // -9, -3, 11, -5, -19, 18, -36, -3, -19, 7, 9, -2, 17, 16, -8, -17, -58, -63, -38, 45, -10, 25, 55, 8, 8, -27, -36, -112, -6, -4, -88, -32
    0xfb0bfdf7, 0xfddc12ed, 0xfe0907ed, 0xeff81011, 0x2ddac1c6, 0x83719f6, 0x90dce508, 0xe0a8fcfa,
    // -43, -128, 46, -10, 38, -35, -27, 55, 25, 37, 20, 31, -12, -24, -13, -18, -31, 80, 122, -6, 16, -13, -14, -13, -10, 84, -74, 18, 8, -22, 5, 15
    0xf62e80d5, 0x37e5dd26, 0x1f142519, 0xeef3e8f4, 0xfa7a50e1, 0xf3f2f310, 0x12b654f6, 0xf05ea08,
    // 7, -21, 44, 13, -38, 21, -19, -1, -15, -3, -27, 5, 6, 6, -8, -24, -19, -9, 7, -103, 78, 21, 3, 37, -19, -64, 0, 39, -2, 15, -57, 19
    0xd2ceb07, 0xffed15da, 0x5e5fdf1, 0xe8f80606, 0x9907f7ed, 0x2503154e, 0x2700c0ed, 0x13c70ffe,
    // -4, -21, -16, 87, 3, -39, 29, -18, -45, 22, -25, 5, -63, 50, 41, -40, -41, 14, -16, 17, -1, -18, 21, 29, -4, -6, -31, -96, 40, 19, -1, 12
    0x57f0ebfc, 0xee1dd903, 0x5e716d3, 0xd82932c1, 0x11f00ed7, 0x1d15eeff, 0xa0e1fafc, 0xcff1328,
    // -7, -103, 6, 67, -15, 7, -25, 20, -12, 6, 25, -39, -7, 41, 33, -16, -38, 3, -3, 18, -25, 64, -69, -42, 21, 19, 55, -54, 59, 13, -46, -51
    0x430699f9, 0x14e707f1, 0xd91906f4, 0xf02129f9, 0x12fd03da, 0xd6bb40e7, 0xca371315, 0xcdd20d3b,
    // -16, -14, -8, -11, 20, 22, 41, -25, -20, 60, 62, 22, -28, -80, 32, 15, -18, -42, 21, -5, 5, 0, -3, 20, -22, 38, -53, -27, 75, -95, 24, -30
    0xf5f8f2f0, 0xe7291614, 0x163e3cec, 0xf20b0e4, 0xfb15d6ee, 0x14fd0005, 0xe5cb26ea, 0xe218a14b,
    // 55, 14, 63, -75, -38, 58, 22, 46, -2, 54, -10, -24, -37, 63, -15, 15, -24, 18, -28, 31, 10, -9, 20, 13, -23, -2, 32, -35, 15, -21, 49, 13
    0xb53f0e37, 0x2e163ada, 0xe8f636fe, 0xff13fdb, 0x1fe412e8, 0xd14f70a, 0xdd20fee9, 0xd31eb0f,
    // 55, -84, -11, 42, 45, 81, -64, -41, -78, -51, 47, 67, -65, 65, -80, 1, -31, 27, 88, 35, 11, -19, -12, -27, -42, -17, -13, -6, 31, 31, -18, -16
    0x2af5ac37, 0xd7c0512d, 0x432fcdb2, 0x1b041bf, 0x23581be1, 0xe5f4ed0b, 0xfaf3efd6, 0xf0ee1f1f,
    // 17, -25, -37, 73, 21, 17, -40, 11, 37, 9, -27, -5, -4, 3, -37, 14, -1, 111, 8, 11, 54, -11, 23, -42, 61, -26, 29, -78, -9, -54, 16, -19
    0x49dbe711, 0xbd81115, 0xfbe50925, 0xedb03fc, 0xb086fff, 0xd617f536, 0xb21de63d, 0xed10caf7,
    // 4, 13, -20, -7, -7, -15, -52, 7, 20, -20, -15, -35, -10, 28, -45, -33, 16, 4, 6, 4, 29, 50, 11, 71, -24, 79, 2, -29, 69, -91, 54, -61
    0xf9ec0d04, 0x7ccf1f9, 0xddf1ec14, 0xdfd31cf6, 0x4060410, 0x470b321d, 0xe3024fe8, 0xc336a545,
    // 59, -58, -21, -32, 43, -28, 59, -29, -22, 11, -30, -27, 95, 38, -23, -56, -36, 11, 39, 2, 14, -1, -20, -15, -13, 6, 19, 0, 32, 25, 19, -71
    0xe0ebc63b, 0xe33be42b, 0xe5e20bea, 0xc8e9265f, 0x2270bdc, 0xf1ecff0e, 0x1306f3, 0xb9131920,
    // -37, -24, -62, 46, 11, -51, 18, -27, 79, -52, 15, 69, 28, -51, -63, 2, -26, 29, -34, 16, -13, 3, 8, -4, -30, -29, -16, -59, -6, 28, -20, 10
    0x2ec2e8db, 0xe512cd0b, 0x450fcc4f, 0x2c1cd1c, 0x10de1de6, 0xfc0803f3, 0xc5f0e3e2, 0xaec1cfa,
    // 8, 16, 7, -4, -5, -3, 1, 3, -2, -15, -7, 7, 15, -15, 0, 10, 1, 36, 51, -21, 109, 6, -10, -52, 30, -94, -65, 35, 68, -80, -11, -31
    0xfc071008, 0x301fdfb, 0x7f9f1fe, 0xa00f10f, 0xeb332401, 0xccf6066d, 0x23bfa21e, 0xe1f5b044,
    // -21, 17, 52, -25, -28, -29, 36, -25, -39, -49, 71, -44, 0, 9, -23, -36, -33, 12, 52, -29, 48, 0, 43, -49, -34, 15, -110, -23, -23, -26, -40, -25
    0xe73411eb, 0xe724e3e4, 0xd447cfd9, 0xdce90900, 0xe3340cdf, 0xcf2b0030, 0xe9920fde, 0xe7d8e6e9,
    // -3, 21, -30, 40, 9, 33, -70, 55, 35, 44, -71, 62, -44, -10, -5, 36, -38, -6, 11, -18, 25, 2, -38, 27, -1, -6, 55, -10, 36, -6, 39, -40
    0x28e215fd, 0x37ba2109, 0x3eb92c23, 0x24fbf6d4, 0xee0bfada, 0x1bda0219, 0xf637faff, 0xd827fa24,
    // -57, -88, 54, -24, -11, -4, 26, -53, 0, 2, 37, 19, 60, 47, 61, 20, -17, -13, 0, 9, -19, -64, -13, -5, -30, -31, -28, 61, 24, -12, 72, -43
    0xe836a8c7, 0xcb1afcf5, 0x13250200, 0x143d2f3c, 0x900f3ef, 0xfbf3c0ed, 0x3de4e1e2, 0xd548f418,
    // -6, -37, 17, 34, -12, 11, 3, -12, -6, 9, 4, -4, 2, 14, -1, -13, 0, 31, 60, 25, 104, -35, -44, -27, 32, -63, -2, -20, -36, 16, -12, -23
    0x2211dbfa, 0xf4030bf4, 0xfc0409fa, 0xf3ff0e02, 0x193c1f00, 0xe5d4dd68, 0xecfec120, 0xe9f410dc,
    // -52, -47, -75, -28, -89, -22, 62, 39, -38, 54, 12, -36, -51, 46, -55, 3, -24, 58, 7, 14, -9, -18, 10, -7, -30, 55, -23, -11, 39, 11, -22, 8
    0xe4b5d1cc, 0x273eeaa7, 0xdc0c36da, 0x3c92ecd, 0xe073ae8, 0xf90aeef7, 0xf5e937e2, 0x8ea0b27,
    // -38, 28, -14, 9, 13, 29, -34, -50, -41, -1, -16, 19, 49, -8, 16, -35, -31, -32, -91, 18, -8, 54, -16, -14, 24, -57, 11, -71, 1, 2, -58, -18
    0x9f21cda, 0xcede1d0d, 0x13f0ffd7, 0xdd10f831, 0x12a5e0e1, 0xf2f036f8, 0xb90bc718, 0xeec60201,
    // -3, -66, -18, -9, -87, -29, 3, -55, 44, -34, -35, 65, -41, -12, -3, -56, -66, 59, 16, 13, 3, -10, 10, 10, -3, 21, -6, -60, 27, 4, 7, 13
    0xf7eebefd, 0xc903e3a9, 0x41ddde2c, 0xc8fdf4d7, 0xd103bbe, 0xa0af603, 0xc4fa15fd, 0xd07041b,
    // 45, -4, -47, 39, 50, 20, -6, 25, 9, 17, -60, 31, 5, -14, 16, 26, -49, 22, 26, -23, 56, 1, -1, -32, -19, -24, 45, -38, 52, 8, 35, -89
    0x27d1fc2d, 0x19fa1432, 0x1fc41109, 0x1a10f205, 0xe91a16cf, 0xe0ff0138, 0xda2de8ed, 0xa7230834,
    // 41, -2, -30, -22, -56, 89, -51, -49, 26, 32, 7, -67, 27, 37, 32, 11, -83, 35, -45, 32, -9, 37, -17, -12, 4, -11, -12, -101, 13, 4, -96, -11
    0xeae2fe29, 0xcfcd59c8, 0xbd07201a, 0xb20251b, 0x20d323ad, 0xf4ef25f7, 0x9bf4f504, 0xf5a0040d,
    // 13, -14, 63, -14, -42, -8, 20, -60, 30, 44, -14, -33, -23, 7, -87, 90, -41, 37, -3, -8, -34, -11, -11, 4, -4, 28, 0, -36, 23, 16, -29, -22
    0xf23ff20d, 0xc414f8d6, 0xdff22c1e, 0x5aa907e9, 0xf8fd25d7, 0x4f5f5de, 0xdc001cfc, 0xeae31017,
    // 41, 40, -72, -13, -72, -91, -53, 9, -63, 37, 23, 84, 61, 32, 36, -15, -62, 57, -10, 3, -11, -51, -8, 4, -58, 55, -39, -2, 23, -33, -33, -10
    0xf3b82829, 0x9cba5b8, 0x541725c1, 0xf124203d, 0x3f639c2, 0x4f8cdf5, 0xfed937c6, 0xf6dfdf17,
    // 12, 0, -12, 21, -5, 11, -11, 19, -3, 8, -15, 2, -19, 8, -19, -21, 30, 30, 10, -103, 19, 15, 36, 1, -18, -2, -87, -35, 13, -112, -82, -8
    0x15f4000c, 0x13f50bfb, 0x2f108fd, 0xebed08ed, 0x990a1e1e, 0x1240f13, 0xdda9feee, 0xf8ae900d,
    // -32, -19, 58, 65, -88, -22, 25, 75, 73, 81, -23, -89, 82, -66, 17, -50, -25, 31, 31, 24, -8, 1, -13, 2, -2, -14, -29, -61, 42, 1, -6, -3
    0x413aede0, 0x4b19eaa8, 0xa7e95149, 0xce11be52, 0x181f1fe7, 0x2f301f8, 0xc3e3f2fe, 0xfdfa012a,
    // 7, 3, 4, 5, -2, -4, 3, -4, 0, 3, -5, 7, 1, -12, -2, -4, -25, 2, -73, -44, -96, 4, -14, 63, -76, 17, 3, 65, 13, -22, 37, -57
    0x5040307, 0xfc03fcfe, 0x7fb0300, 0xfcfef401, 0xd4b702e7, 0x3ff204a0, 0x410311b4, 0xc725ea0d,
    // -78, 3, 65, -33, 35, 16, -43, -41, -63, 77, -41, 46, 11, -1, -47, -78, -75, 87, -39, 36, 6, 32, -8, -4, 9, -7, 1, -98, 4, -3, -86, 19
    0xdf4103b2, 0xd7d51023, 0x2ed74dc1, 0xb2d1ff0b, 0x24d957b5, 0xfcf82006, 0x9e01f909, 0x13aafd04,
    // 66, 19, -69, 48, 6, 25, -92, 81, 10, 34, -11, -51, -57, -68, -79, -65, -43, 36, 63, -32, 11, 34, -2, 3, 23, -23, 46, -78, 6, -15, -45, 11
    0x30bb1342, 0x51a41906, 0xcdf5220a, 0xbfb1bcc7, 0xe03f24d5, 0x3fe220b, 0xb22ee917, 0xbd3f106,
    // -41, -119, 1, -19, -22, -30, -32, 78, -51, -56, -30, -44, -25, -81, -15, 40, -48, -18, -11, 30, -6, -6, 3, 40, 4, -17, -5, -56, 12, -20, -16, -2
    0xed0189d7, 0x4ee0e2ea, 0xd4e2c8cd, 0x28f1afe7, 0x1ef5eed0, 0x2803fafa, 0xc8fbef04, 0xfef0ec0c,
    // 2, -24, 14, 7, -10, -2, 2, -8, 1, 2, -3, -3, 4, 5, 1, 3, 0, 92, -54, 27, -11, -58, 53, -84, 74, 42, -55, -5, -25, 11, -7, -74
    0x70ee802, 0xf802fef6, 0xfdfd0201, 0x3010504, 0x1bca5c00, 0xac35c6f5, 0xfbc92a4a, 0xb6f90be7,
    // 5, -57, 28, 84, -31, 45, -20, 17, 4, 32, 28, 14, 21, 8, -26, -36, -11, -42, -50, 16, 8, -101, -20, -28, 111, 36, -10, 79, 18, -67, -3, 13
    0x541cc705, 0x11ec2de1, 0xe1c2004, 0xdce60815, 0x10ced6f5, 0xe4ec9b08, 0x4ff6246f, 0xdfdbd12,
    // -5, 7, 42, -19, 59, 93, 21, 41, 18, -85, -45, -29, -15, -30, 64, -49, -52, 18, -10, 0, -6, -24, 0, 16, -18, 15, -27, 0, 28, 1, -9, -14
    0xed2a07fb, 0x29155d3b, 0xe3d3ab12, 0xcf40e2f1, 0xf612cc, 0x1000e8fa, 0xe50fee, 0xf2f7011c,
    // -1, -26, 28, 25, -28, 22, -36, 3, -9, 24, 2, 17, 27, 11, -21, -41, 26, -65, 109, 27, -26, -33, -18, -55, -53, -81, -5, 23, -5, 37, 17, 10
    0x191ce6ff, 0x3dc16e4, 0x110218f7, 0xd7eb0b1b, 0x1b6dbf1a, 0xc9eedfe6, 0x17fbafcb, 0xa1125fb,
    // -67, 2, 4, 61, 88, 67, 50, -14, 35, 47, -20, -49, -53, 40, 6, -85, -34, 56, 15, -29, -20, -23, 14, -11, -28, 35, -71, 2, 6, -27, -30, 13
    0x3d0402bd, 0xf2324358, 0xcfec2f23, 0xab0628cb, 0xe30f38de, 0xf50ee9ec, 0x2b923e4, 0xde2e506,
    // 76, -50, -16, 96, -50, 33, 32, 43, 54, -47, 50, -15, 5, 31, 33, 27, 8, 30, 82, -27, -7, -63, 27, 41, -39, 13, -49, -60, 24, 15, 64, -1
    0x60f0ce4c, 0x2b2021ce, 0xf132d136, 0x1b211f05, 0xe5521e08, 0x291bc1f9, 0xc4cf0dd9, 0xff400f18,
    // -13, -25, -1, 20, -1, 15, -13, 12, 3, -5, 0, -1, 3, -7, -15, 3, 36, 50, 29, 76, -16, 26, -7, -33, -17, -93, -93, 21, 97, -57, 58, -52
    0x14ffe7f3, 0xcf30fff, 0xff00fb03, 0x3f1f903, 0x4c1d3224, 0xdff91af0, 0x15a3a3ef, 0xcc3ac761,
    // 62, -13, 51, 14, 49, -39, -81, -45, 11, -27, 5, -5, 26, -63, 35, 33, -36, 59, -12, 41, -8, 4, 11, -12, -15, 1, -11, -19, 25, 7, -40, 19
    0xe33f33e, 0xd3afd931, 0xfb05e50b, 0x2123c11a, 0x29f43bdc, 0xf40b04f8, 0xedf501f1, 0x13d80719,
};
static const uint embedded_encoder3_ResidualBlock_1_body_pw_expand_bias_dwords[32] = {
    // -0.0734, 0.04138, -0.0853, -0.04837, -0.0874, -0.095, -0.012375, -0.04285, -0.02393, -0.04132, 0.03558, -0.05258, 0.013435, 0.0003839, -0.06125, -0.04065
    0x294cacb3, 0xaa31ad76, 0xae14ad98, 0xa97ca256, 0xa94aa620, 0xaabb288e, 0xe4a22e1, 0xa934abd7,
    // -0.0677, -0.1628, -0.04556, -0.0676, -0.0493, 0.00933, 0.04282, -0.00877, -0.0872, -0.03275, -0.0466, -0.04327, -0.02333, -0.05106, -0.10834, -0.0784
    0xb136ac55, 0xac54a9d5, 0x20c7aa4f, 0xa07e297b, 0xa831ad95, 0xa98aa9f7, 0xaa89a5f9, 0xad05aeef,
    // -0.01396, -0.01369, -0.1561, -0.05, -0.01996, -0.0369, -0.01595, -0.02698, -0.04248, -0.0664, -0.02112, -0.01674, -0.01002, -0.05435, -0.0605, -0.05914
    0xa302a326, 0xaa66b0ff, 0xa8b9a51c, 0xa6e8a415, 0xac40a970, 0xa449a568, 0xaaf5a121, 0xab92abbe,
    // -0.04984, -0.0649, 0.0306, 0.002092, -0.094, -0.07837, -0.01974, -0.03062, -0.0899, -0.2778, -0.04282, -0.2378, -0.0655, -0.0468, -0.0475, -0.03702
    0xac27aa61, 0x184927d5, 0xad04ae04, 0xa7d7a50e, 0xb472adc1, 0xb39ca97b, 0xa9feac31, 0xa8bdaa14,
};
static const uint embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 46, -22, -24, -65, -31, -57, -14, -16, -43, 9, -13, -10, 24, -115, 49, -55, 1, 71, 79, -27, 38, -3, 43, -77, -6, -71, 0, -72, 9, 35, -82, -13
    0xbfe8ea2e, 0xf0f2c7e1, 0xf6f309d5, 0xc9318d18, 0xe54f4701, 0xb32bfd26, 0xb800b9fa, 0xf3ae2309,
    // -23, 62, -19, 4, -21, -11, -58, -48, -20, -12, 32, -18, -29, 45, -31, -1, -31, 25, -23, 26, -8, 64, 11, 65, -18, 51, -19, 9, 86, -38, -30, -26
    0x4ed3ee9, 0xd0c6f5eb, 0xee20f4ec, 0xffe12de3, 0x1ae919e1, 0x410b40f8, 0x9ed33ee, 0xe6e2da56,
    // -3, -50, -6, 33, 14, 72, -21, -64, 19, -28, 112, -45, -20, -16, -13, -54, -17, -55, -29, -36, 86, 12, -52, 63, -119, -6, 5, -41, 27, 36, 42, -27
    0x21facefd, 0xc0eb480e, 0xd370e413, 0xcaf3f0ec, 0xdce3c9ef, 0x3fcc0c56, 0xd705fa89, 0xe52a241b,
    // 8, 38, -5, 1, -15, -52, 22, 15, 33, -88, 58, -27, -36, -21, -30, -27, -37, -1, -34, 65, 1, -32, 0, 1, -19, 12, -40, 17, -11, -96, -16, -34
    0x1fb2608, 0xf16ccf1, 0xe53aa821, 0xe5e2ebdc, 0x41deffdb, 0x100e001, 0x11d80ced, 0xdef0a0f5,
    // 20, 29, 50, 26, 6, -21, -30, 32, -41, 54, 26, 50, -32, 11, 48, 22, -54, 92, -16, 8, -37, -7, -24, 95, -106, -6, 5, 56, -6, -68, 2, 34
    0x1a321d14, 0x20e2eb06, 0x321a36d7, 0x16300be0, 0x8f05cca, 0x5fe8f9db, 0x3805fa96, 0x2202bcfa,
    // 16, -25, -27, 37, 2, 41, -7, 10, 23, 2, -9, -40, 36, -12, -38, 64, 65, -1, -54, -62, 7, 48, 14, 24, -30, -2, -3, 47, -29, 60, 3, -51
    0x25e5e710, 0xaf92902, 0xd8f70217, 0x40daf424, 0xc2caff41, 0x180e3007, 0x2ffdfee2, 0xcd033ce3,
    // -8, -18, -4, -25, -15, -14, -14, -15, -16, -92, 42, 25, 57, 9, -4, -40, 0, 46, -29, 7, -6, -29, -74, 5, -64, 11, 13, -109, 25, -48, -1, 12
    0xe7fceef8, 0xf1f2f2f1, 0x192aa4f0, 0xd8fc0939, 0x7e32e00, 0x5b6e3fa, 0x930d0bc0, 0xcffd019,
    // 9, 88, 8, 0, -30, 11, 3, -5, -1, -2, 42, 17, 21, -17, -36, 11, 27, -24, -22, 87, -3, 30, 18, -30, -57, -34, 21, 5, -34, 43, 6, 52
    0x85809, 0xfb030be2, 0x112afeff, 0xbdcef15, 0x57eae81b, 0xe2121efd, 0x515dec7, 0x34062bde,
    // -11, 27, 3, 4, 56, -30, 30, 12, 53, -105, -12, 95, -19, -36, 7, -25, -28, 103, 24, -36, -21, 2, 54, -47, 17, -12, 101, 51, -41, -46, 19, -6
    0x4031bf5, 0xc1ee238, 0x5ff49735, 0xe707dced, 0xdc1867e4, 0xd13602eb, 0x3365f411, 0xfa13d2d7,
    // 57, -29, 44, 3, 2, 48, -11, 35, -29, 2, -50, -89, 66, -13, 40, 68, 20, 25, -44, -15, -7, 59, 21, 42, 26, 58, -36, -5, -46, 73, -10, -67
    0x32ce339, 0x23f53002, 0xa7ce02e3, 0x4428f342, 0xf1d41914, 0x2a153bf9, 0xfbdc3a1a, 0xbdf649d2,
    // 67, 8, -4, 22, -81, 34, 7, 20, 27, 43, -30, -82, -48, 9, 77, 21, 8, 52, 7, -41, -33, 26, -2, 51, -25, -57, -42, -111, -4, -39, -33, 18
    0x16fc0843, 0x140722af, 0xaee22b1b, 0x154d09d0, 0xd7073408, 0x33fe1adf, 0x91d6c7e7, 0x12dfd9fc,
    // -56, -48, 39, -14, 30, -3, 1, 9, 22, -37, -63, 33, -37, 87, -12, -78, -76, -14, -28, -56, -14, 50, -32, 47, 51, 17, 68, -82, 35, 52, -29, 37
    0xf227d0c8, 0x901fd1e, 0x21c1db16, 0xb2f457db, 0xc8e4f2b4, 0x2fe032f2, 0xae441133, 0x25e33423,
    // 65, -25, -12, 22, -61, -21, 18, -18, 22, 59, -55, -78, -18, 1, 21, -38, -6, -44, 35, 32, 53, -2, 61, -19, 64, -42, -30, -109, 19, 41, -58, -14
    0x16f4e741, 0xee12ebc3, 0xb2c93b16, 0xda1501ee, 0x2023d4fa, 0xed3dfe35, 0x93e2d640, 0xf2c62913,
    // -6, -58, -8, 12, 8, -79, 68, -3, 5, -17, 30, 2, -52, 54, -4, -50, -37, 33, -42, 27, 39, -63, -18, 75, 8, 6, 51, -68, -19, -51, 36, 16
    0xcf8c6fa, 0xfd44b108, 0x21eef05, 0xcefc36cc, 0x1bd621db, 0x4beec127, 0xbc330608, 0x1024cded,
    // -15, 36, -41, -7, -29, -12, 14, -29, 8, -13, -30, -11, 51, 38, 6, 1, -30, -34, -29, -2, -37, -26, -71, -12, -72, -26, -91, 17, -8, -96, 41, -1
    0xf9d724f1, 0xe30ef4e3, 0xf5e2f308, 0x1062633, 0xfee3dee2, 0xf4b9e6db, 0x11a5e6b8, 0xff29a0f8,
    // 10, 17, -5, -4, 4, 10, -18, 37, 7, 1, 6, 34, 11, 5, 29, -20, 20, -30, 26, 6, 18, 5, 12, -1, 12, -15, 31, 26, -21, 81, -2, 22
    0xfcfb110a, 0x25ee0a04, 0x22060107, 0xec1d050b, 0x61ae214, 0xff0c0512, 0x1a1ff10c, 0x16fe51eb,
    // -11, -31, 20, 15, -50, 14, 18, -14, 8, 49, -69, -67, -44, 44, -16, -25, -17, -3, 77, 88, 6, -21, 4, 34, -49, 19, 11, -17, -51, 17, 59, -20
    0xf14e1f5, 0xf2120ece, 0xbdbb3108, 0xe7f02cd4, 0x584dfdef, 0x2204eb06, 0xef0b13cf, 0xec3b11cd,
    // 36, -57, -1, -51, 43, 17, 6, 33, 45, 3, -47, -13, 24, 37, 21, 100, 6, -7, -42, -88, -28, 13, -48, 52, -3, 76, -36, -66, -22, -10, 41, -76
    0xcdffc724, 0x2106112b, 0xf3d1032d, 0x64152518, 0xa8d6f906, 0x34d00de4, 0xbedc4cfd, 0xb429f6ea,
    // 25, 35, 17, -73, -28, -18, -13, 31, -47, -2, -125, -21, -36, -28, 36, 36, 8, -39, 3, 37, -47, -48, 0, 28, 36, -7, 52, -59, -11, -73, 38, 12
    0xb7112319, 0x1ff3eee4, 0xeb83fed1, 0x2424e4dc, 0x2503d908, 0x1c00d0d1, 0xc534f924, 0xc26b7f5,
    // -23, -85, -27, -9, -14, 30, -26, -28, -10, 1, 38, 6, 9, 6, 20, 36, -8, -91, 38, -57, -15, 85, -1, 26, 13, 38, -38, -3, 5, 64, -9, 34
    0xf7e5abe9, 0xe4e61ef2, 0x62601f6, 0x24140609, 0xc726a5f8, 0x1aff55f1, 0xfdda260d, 0x22f74005,
    // -9, 6, 2, -75, -46, -44, 15, 13, 7, 26, 32, -34, -9, 33, 6, -21, 26, -99, 10, -67, 38, -54, -35, -15, 9, 27, -38, 13, -1, 6, -28, -22
    0xb50206f7, 0xd0fd4d2, 0xde201a07, 0xeb0621f7, 0xbd0a9d1a, 0xf1ddca26, 0xdda1b09, 0xeae406ff,
    // 15, -47, -49, -33, 29, -3, 54, 28, 30, -16, -36, 4, 8, 27, 48, 15, -35, -25, -20, -51, 1, 14, -30, 31, -22, 87, -38, -109, -29, -51, 7, 1
    0xdfcfd10f, 0x1c36fd1d, 0x4dcf01e, 0xf301b08, 0xcdece7dd, 0x1fe20e01, 0x93da57ea, 0x107cde3,
    // 1, -11, -3, -39, -28, 37, 3, -19, -61, -30, -63, 60, 16, 35, -77, 13, -7, -21, -2, -17, -98, -10, -14, 56, 28, 26, 24, 56, 0, -87, -3, -35
    0xd9fdf501, 0xed0325e4, 0x3cc1e2c3, 0xdb32310, 0xeffeebf9, 0x38f2f69e, 0x38181a1c, 0xddfda900,
    // 52, 29, 57, -24, -14, 36, 6, 32, -14, 2, -28, 84, 38, -21, 23, 9, 61, -63, 66, 30, -21, 98, -7, -111, 2, -42, 8, 36, -15, 94, -6, 51
    0xe8391d34, 0x200624f2, 0x54e402f2, 0x917eb26, 0x1e42c13d, 0x91f962eb, 0x2408d602, 0x33fa5ef1,
    // 45, -11, 85, -29, -42, 9, -31, 50, 4, -2, 50, -20, 27, 3, -10, 60, -50, 16, 51, -24, 47, -55, -48, 67, -37, -31, 4, -43, 57, 14, 57, 13
    0xe355f52d, 0x32e109d6, 0xec32fe04, 0x3cf6031b, 0xe83310ce, 0x43d0c92f, 0xd504e1db, 0xd390e39,
    // -37, -59, -53, 34, -6, -53, -14, -46, -1, 22, 13, 40, -91, 32, -58, -80, -73, -5, 17, -26, -17, -20, -13, 10, 4, 6, 3, 21, 74, -18, -18, 20
    0x22cbc5db, 0xd2f2cbfa, 0x280d16ff, 0xb0c620a5, 0xe611fbb7, 0xaf3ecef, 0x15030604, 0x14eeee4a,
    // 40, 37, -29, 94, 25, 74, 30, -41, 104, -8, 38, -5, -24, -12, 40, 39, 24, -39, 23, 0, -13, 78, 4, 3, 2, -12, 4, -22, -7, -1, -25, 16
    0x5ee32528, 0xd71e4a19, 0xfb26f868, 0x2728f4e8, 0x17d918, 0x3044ef3, 0xea04f402, 0x10e7fff9,
    // -1, -32, 5, 34, 56, 24, 3, 46, 11, -10, 16, 6, -13, 47, 40, 2, -29, 0, -30, -18, 41, 2, -20, 41, 52, 28, 34, -6, 31, 1, -1, 18
    0x2205e0ff, 0x2e031838, 0x610f60b, 0x2282ff3, 0xeee200e3, 0x29ec0229, 0xfa221c34, 0x12ff011f,
    // -53, -12, -18, 18, -38, -26, -13, -45, 27, -101, -21, 29, -4, -32, -75, 5, -2, -111, -48, 35, -19, 41, 2, 6, -27, 79, 19, -15, 21, -2, -99, 34
    0x12eef4cb, 0xd3f3e6da, 0x1deb9b1b, 0x5b5e0fc, 0x23d091fe, 0x60229ed, 0xf1134fe5, 0x229dfe15,
    // 61, -23, 2, 48, 23, 38, 45, -9, 36, -65, 80, 37, 80, -11, 4, -20, 5, -44, -64, 29, 71, 38, -32, -119, 9, 0, -10, -76, -87, 68, 54, 0
    0x3002e93d, 0xf72d2617, 0x2550bf24, 0xec04f550, 0x1dc0d405, 0x89e02647, 0xb4f60009, 0x3644a9,
    // 7, -25, 15, -57, -39, -46, 11, 12, -72, 51, -110, -40, -20, 43, 29, 5, -24, 2, -1, 49, 0, -98, -39, 43, 26, 20, -67, 48, -55, -37, 39, -27
    0xc70fe707, 0xc0bd2d9, 0xd89233b8, 0x51d2bec, 0x31ff02e8, 0x2bd99e00, 0x30bd141a, 0xe527dbc9,
    // -21, -35, -39, -25, 5, 7, -22, 28, 25, -15, -66, 13, 4, 35, 48, -24, -65, -14, 62, -64, -65, 3, -20, 23, 9, 22, 15, -46, -13, 25, 50, -25
    0xe7d9ddeb, 0x1cea0705, 0xdbef119, 0xe8302304, 0xc03ef2bf, 0x17ec03bf, 0xd20f1609, 0xe73219f3,
    // 43, -15, 27, -82, 48, -14, -9, 11, 27, 26, 42, 80, -66, 9, -6, 5, -33, 27, -14, -108, 9, -40, 36, 20, -14, -23, 8, 67, -52, -31, 28, 14
    0xae1bf12b, 0xbf7f230, 0x502a1a1b, 0x5fa09be, 0x94f21bdf, 0x1424d809, 0x4308e9f2, 0xe1ce1cc,
    // 0, -74, 7, 31, -2, 59, 6, 28, 32, -4, 46, 2, 17, -30, 37, 33, -27, -27, 18, -72, 5, 47, -4, -18, -59, -9, -64, -32, 35, 70, -41, 16
    0x1f07b600, 0x1c063bfe, 0x22efc20, 0x2125e211, 0xb812e5e5, 0xeefc2f05, 0xe0c0f7c5, 0x10d74623,
    // -32, 114, 72, 22, 35, -25, 15, 76, 10, -40, 7, -4, 106, -32, -5, 1, 15, 8, -6, -27, -52, -12, 84, -19, 21, -26, 22, -3, 50, -43, -35, 94
    0x164872e0, 0x4c0fe723, 0xfc07d80a, 0x1fbe06a, 0xe5fa080f, 0xed54f4cc, 0xfd16e615, 0x5eddd532,
    // -7, 32, -111, 91, 35, -2, 35, -35, 29, 86, 37, -65, 7, -53, -7, 18, -15, -10, 87, 24, 34, -44, 92, -15, -49, -30, -33, 73, 8, -49, 36, -60
    0x5b9120f9, 0xdd23fe23, 0xbf25561d, 0x12f9cb07, 0x1857f6f1, 0xf15cd422, 0x49dfe2cf, 0xc424cf08,
    // 13, -98, 27, -24, 1, 21, -7, 83, -2, -54, -23, 23, 20, -11, 7, -43, -16, 41, -15, 15, 85, -54, -23, -55, -14, 54, -88, 62, 29, 51, -103, 69
    0xe81b9e0d, 0x53f91501, 0x17e9cafe, 0xd507f514, 0xff129f0, 0xc9e9ca55, 0x3ea836f2, 0x4599331d,
    // 75, 7, -30, 32, -19, 58, -8, -1, -9, 0, -44, 18, 90, 7, 17, 21, -20, -57, 22, -5, -37, 44, 21, -71, 64, 58, -74, -28, -20, 21, 12, 34
    0x20e2074b, 0xfff83aed, 0x12d400f7, 0x1511075a, 0xfb16c7ec, 0xb9152cdb, 0xe4b63a40, 0x220c15ec,
    // -38, 66, -38, -3, -8, 22, 46, -50, 16, 23, 25, -44, 31, -11, -27, 10, -4, 87, -34, -40, -54, 7, 2, -1, 56, -37, -7, -32, -30, -69, 30, -58
    0xfdda42da, 0xce2e16f8, 0xd4191710, 0xae5f51f, 0xd8de57fc, 0xff0207ca, 0xe0f9db38, 0xc61ebbe2,
    // -50, 67, 24, -75, 29, -43, 56, 50, 8, 16, 78, -67, -57, -18, 47, -32, 2, 6, 112, 63, 23, -23, 23, -16, -66, -7, 12, 7, -4, -36, -13, -81
    0xb51843ce, 0x3238d51d, 0xbd4e1008, 0xe02feec7, 0x3f700602, 0xf017e917, 0x70cf9be, 0xaff3dcfc,
    // 55, -4, -36, -26, 20, 7, 75, -7, 7, 11, 56, 15, -2, 6, 62, 1, -16, 6, 65, -23, 37, 7, -13, -24, 9, 6, -38, 8, -39, 43, -35, -54
    0xe6dcfc37, 0xf94b0714, 0xf380b07, 0x13e06fe, 0xe94106f0, 0xe8f30725, 0x8da0609, 0xcadd2bd9,
    // 13, 18, -52, -54, 69, 30, 33, 110, 34, -7, -82, 18, 19, 59, 89, 34, 22, 14, 32, 27, -8, 44, -11, 40, -78, -34, 36, 9, 29, 22, 20, 29
    0xcacc120d, 0x6e211e45, 0x12aef922, 0x22593b13, 0x1b200e16, 0x28f52cf8, 0x924deb2, 0x1d14161d,
    // 27, -35, 15, -7, 2, -38, -25, 18, -52, -9, 7, -38, 27, 64, 57, -54, 51, -34, 61, 23, 29, 36, -19, -9, 44, 25, 36, -48, 21, 50, 22, 58
    0xf90fdd1b, 0x12e7da02, 0xda07f7cc, 0xca39401b, 0x173dde33, 0xf7ed241d, 0xd024192c, 0x3a163215,
    // -9, 7, -3, 51, -18, -11, -54, -42, -22, 23, 0, 22, -17, 56, -61, 1, 21, 75, 2, 2, -51, -43, 30, 41, 92, 110, 77, 44, 38, -42, 32, 19
    0x33fd07f7, 0xd6caf5ee, 0x160017ea, 0x1c338ef, 0x2024b15, 0x291ed5cd, 0x2c4d6e5c, 0x1320d626,
    // -22, -2, -10, -17, -20, 50, 7, -27, -43, 14, 36, -4, 49, -30, -72, 39, 18, -18, -58, -34, -42, 20, 25, 10, 15, -34, -24, -31, -47, -48, -34, -8
    0xeff6feea, 0xe50732ec, 0xfc240ed5, 0x27b8e231, 0xdec6ee12, 0xa1914d6, 0xe1e8de0f, 0xf8ded0d1,
    // -19, -29, -70, 3, 9, -4, -56, 30, 9, -9, -56, -14, 2, -39, 60, -41, -3, -35, 17, -19, -90, 10, 8, -52, -57, 104, -24, -28, -25, 3, -15, -1
    0x3bae3ed, 0x1ec8fc09, 0xf2c8f709, 0xd73cd902, 0xed11ddfd, 0xcc080aa6, 0xe4e868c7, 0xfff103e7,
    // -3, 32, -48, 38, 36, -84, 13, -54, 35, 26, 80, 64, -76, -33, -27, 91, 10, -7, -44, -11, -34, 61, 26, 43, 15, 12, -19, 61, -15, -48, 46, -69
    0x26d020fd, 0xca0dac24, 0x40501a23, 0x5be5dfb4, 0xf5d4f90a, 0x2b1a3dde, 0x3ded0c0f, 0xbb2ed0f1,
    // 26, -62, -11, -52, 6, 22, -12, 36, 12, -68, -103, 10, 8, -9, 35, 27, 65, 3, -4, -61, -39, 61, -73, -16, 27, -5, 4, -3, -3, 72, -73, -8
    0xccf5c21a, 0x24f41606, 0xa99bc0c, 0x1b23f708, 0xc3fc0341, 0xf0b73dd9, 0xfd04fb1b, 0xf8b748fd,
    // 55, 75, 4, -2, 34, 26, 78, -30, 9, 25, 56, -10, -26, -7, 63, 30, 7, -33, 68, 67, 20, 6, 32, -11, 40, 9, 7, 1, -103, 17, 56, -29
    0xfe044b37, 0xe24e1a22, 0xf6381909, 0x1e3ff9e6, 0x4344df07, 0xf5200614, 0x1070928, 0xe3381199,
    // 15, -44, 38, -44, 95, 19, 59, 109, 71, 28, 52, 20, -6, 71, 79, 28, 25, 46, 29, -48, 95, 30, -10, 61, -90, -86, 60, 67, 32, 25, 1, 7
    0xd426d40f, 0x6d3b135f, 0x14341c47, 0x1c4f47fa, 0xd01d2e19, 0x3df61e5f, 0x433caaa6, 0x7011920,
    // 2, 30, -6, -5, -15, 12, 7, -17, 46, -19, 9, -29, -21, -22, 16, -11, 37, -40, 42, -116, 26, -51, 61, -40, -22, -22, 69, 12, -76, 30, -71, -15
    0xfbfa1e02, 0xef070cf1, 0xe309ed2e, 0xf510eaeb, 0x8c2ad825, 0xd83dcd1a, 0xc45eaea, 0xf1b91eb4,
    // 21, -7, 53, -13, 6, 31, -7, 18, -22, -32, 47, -12, 33, 12, 28, 27, -43, -27, 14, 10, -42, 10, 16, 16, -23, -46, -83, -8, -15, 21, 0, 2
    0xf335f915, 0x12f91f06, 0xf42fe0ea, 0x1b1c0c21, 0xa0ee5d5, 0x10100ad6, 0xf8add2e9, 0x20015f1,
    // -17, 64, -20, 34, 8, -32, -37, -56, 0, -44, -63, -35, -6, -13, 0, -53, 86, -72, -3, 8, -29, 53, 35, -18, -54, -10, 112, -128, -19, -50, -7, -13
    0x22ec40ef, 0xc8dbe008, 0xddc1d400, 0xcb00f3fa, 0x8fdb856, 0xee2335e3, 0x8070f6ca, 0xf3f9ceed,
    // -28, 24, -26, -25, -34, -36, -21, -19, -16, -37, -80, -2, -59, -17, -65, -15, 33, 76, -9, 8, -88, -40, -12, 0, 6, -27, 93, -31, -9, -94, 42, -13
    0xe7e618e4, 0xedebdcde, 0xfeb0dbf0, 0xf1bfefc5, 0x8f74c21, 0xf4d8a8, 0xe15de506, 0xf32aa2f7,
    // 4, -17, -55, 33, 17, 62, -9, -56, 8, -10, -10, 0, -114, -5, 42, -53, 27, -3, 36, -10, 60, -28, -36, -32, -45, 23, 29, 70, 15, 46, 7, -70
    0x21c9ef04, 0xc8f73e11, 0xf6f608, 0xcb2afb8e, 0xf624fd1b, 0xe0dce43c, 0x461d17d3, 0xba072e0f,
    // 38, -24, 31, -56, -8, 50, -109, 24, -25, -37, -51, -7, 52, 25, 40, 61, -31, -22, 9, -14, -24, 38, -65, 34, 7, -5, -27, -73, 11, 9, -58, 4
    0xc81fe826, 0x189332f8, 0xf9cddbe7, 0x3d281934, 0xf209eae1, 0x22bf26e8, 0xb7e5fb07, 0x4c6090b,
    // 64, -109, -59, -38, 21, -29, 45, -38, 28, 13, -21, -9, -18, -17, 60, 13, -21, 31, 74, -51, 17, -54, -51, -28, 36, -27, 31, -17, -32, 28, 22, -37
    0xdac59340, 0xda2de315, 0xf7eb0d1c, 0xd3cefee, 0xcd4a1feb, 0xe4cdca11, 0xef1fe524, 0xdb161ce0,
    // 1, 28, -66, -44, 35, 12, -26, 23, 20, -5, -39, -14, 2, 11, 44, 52, -59, -15, 65, 44, 15, 21, -11, 55, 46, -54, -19, 82, 49, 35, -97, -8
    0xd4be1c01, 0x17e60c23, 0xf2d9fb14, 0x342c0b02, 0x2c41f1c5, 0x37f5150f, 0x52edca2e, 0xf89f2331,
    // 38, -80, 38, -1, -2, -59, 53, 31, -95, 15, 42, -30, 34, -30, -2, 8, -18, 73, 4, -13, 31, -15, -47, -9, 10, -20, -38, 0, -63, 0, 13, 9
    0xff26b026, 0x1f35c5fe, 0xe22a0fa1, 0x8fee222, 0xf30449ee, 0xf7d1f11f, 0xdaec0a, 0x90d00c1,
    // -4, -41, 20, 7, 79, -21, -26, 78, 64, 22, 65, -7, -11, -6, 65, -15, -90, -42, 1, -22, 37, -25, 28, 24, -22, 95, -52, 13, -2, -37, 13, 5
    0x714d7fc, 0x4ee6eb4f, 0xf9411640, 0xf141faf5, 0xea01d6a6, 0x181ce725, 0xdcc5fea, 0x50ddbfe,
    // 31, -29, 8, 54, 46, 42, -1, -1, 4, -21, 16, 44, -46, -65, -17, 57, 11, 103, 9, -58, -21, 57, 14, 9, 17, -16, 32, -29, 14, -71, -20, 7
    0x3608e31f, 0xffff2a2e, 0x2c10eb04, 0x39efbfd2, 0xc609670b, 0x90e39eb, 0xe320f011, 0x7ecb90e,
    // -3, 4, 3, -2, -14, 22, -10, -2, -42, -37, 48, -8, 11, 1, -5, 12, 38, 3, 26, -3, -39, 75, -12, -30, 70, 55, 40, 61, 37, 61, -51, -2
    0xfe0304fd, 0xfef616f2, 0xf830dbd6, 0xcfb010b, 0xfd1a0326, 0xe2f44bd9, 0x3d283746, 0xfecd3d25,
    // -66, -11, -63, -29, -34, -47, 39, -87, -38, 3, -6, -26, 50, 14, -54, -13, -1, -100, -79, 18, -2, 37, -6, -5, 6, 15, -39, 12, -67, -24, -9, -57
    0xe3c1f5be, 0xa927d1de, 0xe6fa03da, 0xf3ca0e32, 0x12b19cff, 0xfbfa25fe, 0xcd90f06, 0xc7f7e8bd,
    // -17, 58, 36, -61, 67, -11, -21, 76, 55, 0, 22, -12, -21, -25, 55, -50, 37, -2, -44, 66, 30, -21, -5, -50, 48, -88, 14, -12, -60, -15, 29, -39
    0xc3243aef, 0x4cebf543, 0xf4160037, 0xce37e7eb, 0x42d4fe25, 0xcefbeb1e, 0xf40ea830, 0xd91df1c4,
};
static const uint embedded_encoder3_ResidualBlock_1_body_pw_contract_bias_dwords[16] = {
    // 0.0001713, 6.15e-05, 9.733e-05, 1.62e-05, 6.175e-05, -2.4e-06, 3.195e-05, 7.37e-05, 2.31e-05, 8.2e-06, 1.633e-05, -5.805e-05, -8.58e-05, -5.58e-05, -6.44e-06, -1.353e-05
    0x408099d, 0x1100661, 0x8028040c, 0x4d40218, 0x8a0184, 0x83ce0112, 0x83a8859f, 0x80e3806c,
    // -8.13e-05, 6.205e-05, -4.48e-05, 0.00010705, -4.45e-05, 3.016e-05, 1.13e-06, -9.07e-05, 1.5e-05, 4.2e-06, -5.6e-05, 4.035e-05, -2.18e-05, 3.195e-05, -6.31e-05, -2.89e-05
    0x4118554, 0x70482f0, 0x1fa82eb, 0x85f20013, 0x4600fc, 0x2a583ac, 0x218816e, 0x81e58423,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass5(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage__encoder3_ResidualBlock_1_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _encoder3_ResidualBlock_1_residual_func_Split_output_grouped = {
        uint3(960, 540, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 32), // threadGroupSliceSize
        uint3(960, 540, 32), // storageSize
        uint3(32, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        49766400, // threadGroupStorageByteOffset
        storage__encoder3_ResidualBlock_1_residual_func_Split_output_grouped };
    
    const ConstantBufferStorage<576> storage_embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0055018700659275055, storage_embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = { embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0037380275316536427, storage_embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_encoder3_ResidualBlock_1_body_pw_expand_bias = { embedded_encoder3_ResidualBlock_1_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_encoder3_ResidualBlock_1_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_1_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.003740563290193677, storage_embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_encoder3_ResidualBlock_1_body_pw_contract_bias = { embedded_encoder3_ResidualBlock_1_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_encoder3_ResidualBlock_1_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_ResidualBlock_1_body_pw_contract_bias };
    
    // fused_quantized_NHWC_/encoder3/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_10 = uint3(960, 540, 32);
    const int3 groupStart_slice_10 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_10 = uint3(64, 1, 32);
    const uint3 storageSize_slice_10 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_10 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_10 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_10 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_10 = dot(groupStart_slice_10, tensorByteStrides_slice_10);
    const float quantizationScale_slice_10 = 0.01912216655910015;
    const RWBufferStorage storage_slice_10 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_10 = { logicalSize_slice_10, groupStart_slice_10, groupSize_slice_10, storageSize_slice_10, tensorByteStrides_slice_10, paddingBegin_slice_10, paddingEnd_slice_10, threadGroupByteOffsetInTensor_slice_10 + 33177600, quantizationScale_slice_10, storage_slice_10 };
    // Fusedquantized_/encoder3/ResidualBlock_1/residual_func/Concat_quantized_/encoder3/ResidualBlock_1/body/spatial_mixing/partial_conv/Conv_quantized_/encoder3/ResidualBlock_1/body/spatial_mixing/Concat_quantized_/encoder3/ResidualBlock_1/body/pw_expand/Conv_/encoder3/ResidualBlock_1/body/pw_expand_act/Relu_quantized_/encoder3/ResidualBlock_1/body/pw_contract/Conv_/encoder3/ResidualBlock_1/Add (32, 540, 960), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,) -> (32, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<32, 1>(0.015507712960243225, 0.022631894797086716, 0.015044149942696095, _encoder3_ResidualBlock_1_residual_func_Split_output_grouped, embedded__encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias, embedded__encoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_1_body_pw_expand_bias, embedded__encoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_ResidualBlock_1_body_pw_contract_bias, slice_10, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_5
#ifdef MLSR_PASS_5_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass5_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/encoder3/DownscaleStridedConv2x2/skip_func/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_11 = uint3(960, 540, 32);
    const int3 groupStart_slice_11 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_11 = uint3(32, 1, 32);
    const uint3 storageSize_slice_11 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_11 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_11 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_11 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_11 = dot(groupStart_slice_11, tensorByteStrides_slice_11);
    const float quantizationScale_slice_11 = 0.01912216655910015;
    const RWBufferStorage storage_slice_11 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_11 = { logicalSize_slice_11, groupStart_slice_11, groupSize_slice_11, storageSize_slice_11, tensorByteStrides_slice_11, paddingBegin_slice_11, paddingEnd_slice_11, threadGroupByteOffsetInTensor_slice_11 + 33177600, quantizationScale_slice_11, storage_slice_11 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_11, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_5_POST


#ifdef MLSR_PASS_6
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FusedConv2D_k2s2b_QuantizedOutput.hlsli"

static const uint embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias_dwords[32] = {
    // 0.0542, 0.005722, 0.07733, 0.03162, 0.00955, -0.08484, -0.04083, 0.1515, 0.01051, 0.07025, 0.04614, -0.01755, 0.0655, 0.004086, 0.0543, -0.009155
    0x1ddc2af0, 0x280c2cf3, 0xad6e20e4, 0x30d9a93a, 0x2c7f2162, 0xa47e29e8, 0x1c2f2c31, 0xa0b02af3,
    // -0.007244, -0.11273, -0.1445, 0.1517, 0.1794, 0.01709, -0.03995, 0.0051, 0.1385, -0.0957, 0.09216, -0.09564, -0.010574, 0.0684, 0.04044, 0.0424
    0xaf379f6b, 0x30dbb0a0, 0x246031be, 0x1d39a91d, 0xae20306f, 0xae1f2de6, 0x2c61a16a, 0x296d292d,
    // -0.1011, -0.03806, 0.007996, 0.05212, -0.1957, 0.03778, 0.01807, 0.09674, 0.0279, 0.0582, -0.12006, 0.2917, -0.005768, 0.2512, -0.05673, 0.0661
    0xa8dfae78, 0x2aac2018, 0x28d6b243, 0x2e3124a0, 0x2b732724, 0x34abafaf, 0x34059de8, 0x2c3bab43,
    // -0.08466, -0.12177, -0.1724, 0.06616, 0.0754, 0.08435, 0.009636, -0.010056, -0.0363, 0.0369, 0.1175, -0.08325, 0.2854, -0.04608, -0.02515, -0.3538
    0xafcbad6b, 0x2c3cb184, 0x2d662cd3, 0xa12620ef, 0x28b9a8a5, 0xad542f85, 0xa9e63491, 0xb5a9a670,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass6(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(960, 540, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 32), // threadGroupSliceSize
        uint3(960, 540, 32), // storageSize
        uint3(32, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        33177600, // threadGroupStorageByteOffset
        0.01912216655910015, storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const BufferStorage storage__encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 32, 64), // threadGroupSliceSize
        uint4(2, 2, 32, 64), // storageSize
        uint4(32, 64, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        9856, // threadGroupStorageByteOffset
        0.003212277079001069, storage__encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias = { embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias };
    
    // Fusedquantized_/encoder3/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_12 = uint3(480, 270, 64);
    const int3 groupStart_slice_12 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 64);
    const uint3 groupSize_slice_12 = uint3(64, 1, 64);
    const uint3 storageSize_slice_12 = uint3(480, 270, 64);
    const uint3 tensorByteStrides_slice_12 = uint3(64, 30720, 1);
    const uint3 paddingBegin_slice_12 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_12 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_12 = dot(groupStart_slice_12, tensorByteStrides_slice_12);
    const RWBufferStorage storage_slice_12 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_12 = { logicalSize_slice_12, groupStart_slice_12, groupSize_slice_12, storageSize_slice_12, tensorByteStrides_slice_12, paddingBegin_slice_12, paddingEnd_slice_12, threadGroupByteOffsetInTensor_slice_12 + 49766400, storage_slice_12 };
    // Fusedquantized_/encoder3/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs (32, 540, 960), (64, 32, 2, 2), (64,) -> (64, 270, 480)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FusedConv2D_k2s2b_QuantizedOutput(0.018332691863179207, 0.030074704438447952, fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, _encoder3_DownscaleStridedConv2x2_downscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_encoder3_DownscaleStridedConv2x2_downscale_conv_bias, slice_12, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_6
#ifdef MLSR_PASS_6_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass6_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // Fusedquantized_/encoder3/DownscaleStridedConv2x2/downscale_conv/Conv_quantized_outputs_output_grouped
    const uint3 logicalSize_slice_13 = uint3(480, 270, 64);
    const int3 groupStart_slice_13 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 64);
    const uint3 groupSize_slice_13 = uint3(32, 1, 64);
    const uint3 storageSize_slice_13 = uint3(480, 270, 64);
    const uint3 tensorByteStrides_slice_13 = uint3(64, 30720, 1);
    const uint3 paddingBegin_slice_13 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_13 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_13 = dot(groupStart_slice_13, tensorByteStrides_slice_13);
    const RWBufferStorage storage_slice_13 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_13 = { logicalSize_slice_13, groupStart_slice_13, groupSize_slice_13, storageSize_slice_13, tensorByteStrides_slice_13, paddingBegin_slice_13, paddingEnd_slice_13, threadGroupByteOffsetInTensor_slice_13 + 49766400, storage_slice_13 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_13, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_6_POST


#ifdef MLSR_PASS_7
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords[16] = {
    // 0.0001423, -1.19e-05, 0.0001522, -0.000308, -0.000524, -5.23e-05, -0.0003107, -7.98e-05, -9.36e-06, -0.0002233, -0.000167, 0.0001048, 0.0001304, -0.0002692, -9.83e-05, 4.5e-05
    0x80c808aa, 0x8d0c08fd, 0x836d904b, 0x853b8d17, 0x8b51809d, 0x6de8979, 0x8c690846, 0x2f38671,
    // -9.03e-05, 4.053e-05, -4.536e-05, -0.0001167, 1.23e-05, -9.35e-05, 0.0001284, 0.0003045, -0.000985, 0.000544, -0.0002062, 8.6e-06, -0.0001798, 0.0003965, -0.0002319, 7.47e-05
    0x2a885eb, 0x87a682f9, 0x862100ce, 0xcfd0835, 0x10759409, 0x908ac2, 0xe7f89e4, 0x4e58b99,
};
static const uint embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias_dwords[64] = {
    // -0.1102, 0.0918, -0.02217, -0.1271, -0.1808, -0.1664, 0.02235, 0.0334, 0.06094, -0.001611, -0.04388, -0.1418, 0.02151, -0.2827, -0.05807, -0.382
    0x2de0af0e, 0xb011a5ad, 0xb153b1c9, 0x284625b9, 0x96992bcd, 0xb08aa99e, 0xb4862582, 0xb61dab6f,
    // -0.1503, -0.10913, -0.1824, -0.003147, 0.006447, -0.08417, -0.04117, 0.08203, -0.0693, -0.10443, 0.0729, -0.272, -0.0565, -0.1305, -0.08954, -0.191
    0xaefcb0cf, 0x9a72b1d6, 0xad631e9a, 0x2d40a945, 0xaeafac6f, 0xb45a2caa, 0xb02dab3b, 0xb21dadbb,
    // -0.00437, -0.1121, -0.095, -0.02777, -0.1793, -0.1392, -0.0537, -0.05682, -0.0448, 0.05017, -0.0814, -0.05478, -0.0849, -0.02187, -0.2015, -0.05258
    0xaf2d9c7a, 0xa71cae14, 0xb074b1bd, 0xab46aae0, 0x2a6ca9bc, 0xab03ad36, 0xa599ad6f, 0xaabbb273,
    // -0.03427, -0.1605, 0.00974, -0.1, -0.0803, -0.2179, -0.2715, 0.000652, -0.0979, 0.02495, -0.1631, 0.04633, -0.01006, -0.1168, -0.10175, 0.0002301
    0xb123a863, 0xae6620fd, 0xb2f9ad24, 0x1157b458, 0x2663ae44, 0x29eeb138, 0xaf7aa127, 0xb8aae83,
    // 0.0852, -0.0656, -0.04877, -0.2087, -0.1299, -0.016, -0.1777, -0.2113, -0.1273, 0.014244, -0.0833, -0.05396, -0.05853, -0.3154, -0.12415, -0.03017
    0xac332d74, 0xb2aeaa3e, 0xa419b028, 0xb2c3b1b0, 0x234bb013, 0xaae8ad55, 0xb50cab7e, 0xa7b9aff2,
    // -0.06384, 0.01704, -0.2502, 0.01955, -0.00472, 0.005543, -0.01614, -0.01265, -0.0856, -0.0344, -0.2229, -0.3599, -0.2505, 0.1187, -0.2336, -0.054
    0x245dac16, 0x2501b401, 0x1dad9cd5, 0xa27aa422, 0xa867ad7a, 0xb5c2b322, 0x2f99b402, 0xaae9b37a,
    // -0.008446, -0.3843, -0.1566, 0.0648, 0.0734, 0.0943, -0.2803, -0.06415, 0.01657, 0.03857, -0.0448, 0.01744, -0.1125, -0.04926, -0.04767, -0.1742
    0xb626a053, 0x2c26b103, 0x2e092cb3, 0xac1bb47c, 0x28f0243e, 0x2477a9bc, 0xaa4eaf33, 0xb193aa1a,
    // -0.0647, -0.102, 0.04544, -0.1445, -0.1675, 0.05096, -0.05783, -0.04034, 0.0374, -0.07074, -0.1091, -0.07983, -0.0501, -0.1282, -0.0087, -0.09717
    0xae87ac24, 0xb0a029d1, 0x2a86b15c, 0xa92aab67, 0xac8728ca, 0xad1caefb, 0xb01aaa6a, 0xae38a074,
};
static const uint embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias_dwords[32] = {
    // 0.0003846, 0.000751, -0.001099, -2.5e-05, -0.0001192, 0.0003197, -0.0005546, 0.0004954, -0.0001615, -0.0003712, -0.0006447, 0.0004497, -0.001109, 0.0006313, -0.000522, 5.77e-05
    0x12270e4d, 0x81a39480, 0xd3d87d0, 0x100f908b, 0x8e15894b, 0xf5e9148, 0x112c948b, 0x3c89047,
    // 0.00088, 0.000611, 2.43e-05, -0.001771, -0.002853, -0.0001379, 0.0005856, -0.0004468, -0.000744, 0.0009537, -0.0001768, -0.0009565, -0.000455, -0.001923, -0.0001526, -0.0002563
    0x11011335, 0x97410198, 0x888599d8, 0x8f5210cc, 0x13d09218, 0x93d689cb, 0x97e08f74, 0x8c338900,
    // -1.67e-05, -0.0004327, 0.0004442, 0.000704, 0.0006475, -0.001135, -0.0010605, 0.0001965, -0.0009537, -0.0004485, -0.001763, -0.0003164, 0.001847, 0.002434, -0.0004425, 0.000271
    0x8f178118, 0x11c40f47, 0x94a6114e, 0xa709458, 0x8f5993d0, 0x8d2f9739, 0x18fc1791, 0xc718f40,
    // -0.0002685, 0.000498, -0.001522, -0.002033, -0.0003273, 0.001691, 0.001224, -6.2e-05, 0.001183, 0.0001136, 0.000637, 0.001309, 0.0004344, -2.074e-05, -0.0008225, 3.713e-05
    0x10148c66, 0x982a963c, 0x16ed8d5d, 0x84101503, 0x77214d8, 0x155d1138, 0x815c0f1e, 0x26f92bd,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass7(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped = {
        uint3(480, 270, 64), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(480, 270, 64), // threadGroupSliceSize
        uint3(480, 270, 64), // storageSize
        uint3(64, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        49766400, // threadGroupStorageByteOffset
        storage_Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped };
    
    const BufferStorage storage__bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 32), // threadGroupSliceSize
        uint4(3, 3, 16, 32), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        18048, // threadGroupStorageByteOffset
        0.004163202829658985, storage__bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = { embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 128), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 128), // threadGroupSliceSize
        uint4(1, 1, 64, 128), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        22656, // threadGroupStorageByteOffset
        0.005344854202121496, storage__bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<64> storage_embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias = { embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<64> > embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias = {
        128, // logicalSize
        0, // threadGroupSliceStart
        128, // threadGroupSliceSize
        128, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 128, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 128, 64), // threadGroupSliceSize
        uint4(1, 1, 128, 64), // storageSize
        uint4(128, 128, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        30848, // threadGroupStorageByteOffset
        0.005337292328476906, storage__bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias = { embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias };
    
    // /bottleneck/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_14 = uint3(480, 270, 64);
    const int3 groupStart_slice_14 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 64);
    const uint3 groupSize_slice_14 = uint3(64, 1, 64);
    const uint3 storageSize_slice_14 = uint3(480, 270, 64);
    const uint3 tensorByteStrides_slice_14 = uint3(64, 30720, 1);
    const uint3 paddingBegin_slice_14 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_14 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_14 = dot(groupStart_slice_14, tensorByteStrides_slice_14);
    const RWBufferStorage storage_slice_14 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_14 = { logicalSize_slice_14, groupStart_slice_14, groupSize_slice_14, storageSize_slice_14, tensorByteStrides_slice_14, paddingBegin_slice_14, paddingEnd_slice_14, threadGroupByteOffsetInTensor_slice_14 + 58060800, storage_slice_14 };
    // Fusedquantized_/bottleneck/ResidualBlock_0/residual_func/Concat_quantized_/bottleneck/ResidualBlock_0/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_0/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_0/body/pw_expand/Conv_/bottleneck/ResidualBlock_0/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_0/body/pw_contract/Conv_/bottleneck/ResidualBlock_0/Add (64, 270, 480), (32, 16, 3, 3), (32,), (128, 64, 1, 1), (128,), (64, 128, 1, 1), (64,) -> (64, 270, 480)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<64, 2>(0.018332691863179207, 0.030074704438447952, 0.02223495952785015, 0.02208055555820465, 0.035368867218494415, Fusedquantized__encoder3_DownscaleStridedConv2x2_downscale_conv_Conv_quantized_outputs_output_grouped, _bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_0_body_spatial_mixing_partial_conv_bias, _bottleneck_ResidualBlock_0_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_0_body_pw_expand_bias, _bottleneck_ResidualBlock_0_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_0_body_pw_contract_bias, slice_14, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_7
#ifdef MLSR_PASS_7_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass7_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /bottleneck/ResidualBlock_1/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_15 = uint3(480, 270, 64);
    const int3 groupStart_slice_15 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 64);
    const uint3 groupSize_slice_15 = uint3(32, 1, 64);
    const uint3 storageSize_slice_15 = uint3(480, 270, 64);
    const uint3 tensorByteStrides_slice_15 = uint3(64, 30720, 1);
    const uint3 paddingBegin_slice_15 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_15 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_15 = dot(groupStart_slice_15, tensorByteStrides_slice_15);
    const RWBufferStorage storage_slice_15 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_15 = { logicalSize_slice_15, groupStart_slice_15, groupSize_slice_15, storageSize_slice_15, tensorByteStrides_slice_15, paddingBegin_slice_15, paddingEnd_slice_15, threadGroupByteOffsetInTensor_slice_15 + 58060800, storage_slice_15 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_15, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_7_POST


#ifdef MLSR_PASS_8
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords[16] = {
    // 0.0003006, -0.000754, -0.0001931, -0.0010805, 0.0004408, -0.0004597, -0.001406, -0.0005236, -0.0002842, -0.0008845, -0.0002885, 0.0001743, -0.001322, 0.0001025, -0.0002422, 0.000953
    0x922d0ced, 0x946d8a54, 0x8f880f39, 0x904a95c2, 0x933f8ca8, 0x9b68cba, 0x6b8956a, 0x13cf8bf0,
    // -0.001259, 0.002514, 0.0015545, 0.003073, -0.00144, -0.001629, 0.0009565, 0.003284, 0.004612, 0.00437, -0.0003276, -0.001957, 0.001715, -0.002563, 0.0006866, 0.0002317
    0x19269528, 0x1a4b165e, 0x96ac95e6, 0x1aba13d6, 0x1c7a1cb9, 0x98028d5e, 0x99401706, 0xb9811a0,
};
static const uint embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias_dwords[64] = {
    // -0.03668, 0.0255, 0.001865, 0.0886, 0.06885, 0.006046, 0.0739, -0.2424, -0.1918, -0.1501, -0.2091, -0.255, -0.0661, 0.0562, -0.04752, -0.2433
    0x2687a8b2, 0x2dac17a4, 0x1e312c68, 0xb3c22cbb, 0xb0ceb223, 0xb414b2b1, 0x2b32ac3b, 0xb3c9aa15,
    // -0.04047, -0.1937, 0.003998, -0.258, -0.3237, -0.04263, -0.0434, 0.01355, -0.02809, -0.141, 0.03653, -0.02704, -0.1738, 0.05954, -0.1146, 0.02971
    0xb233a92e, 0xb4211c18, 0xa975b52e, 0x22f0a98e, 0xb083a731, 0xa6ec28ad, 0x2b9fb190, 0x279baf56,
    // 0.08655, -0.29, -0.012375, -0.0907, -0.1263, -0.1559, -0.204, -0.1086, -0.0934, -0.1785, -0.2678, -0.1252, -0.1542, -0.1761, -0.1877, 0.1279
    0xb4a42d8a, 0xadcea256, 0xb0fdb00b, 0xaef3b287, 0xb1b6adfa, 0xb002b449, 0xb1a3b0ef, 0x3018b202,
    // 0.02733, -0.1558, -0.2803, -0.0325, -0.1752, 0.0982, -0.02603, -0.09784, -0.1898, -0.001564, -0.1216, -0.2408, -0.011154, -0.010086, 0.01949, -0.0538
    0xb0fc26ff, 0xa829b47c, 0x2e49b19b, 0xae43a6aa, 0x9668b213, 0xb3b5afc8, 0xa12aa1b6, 0xaae324fd,
    // -0.05566, -0.1112, -0.01907, -0.1536, -0.1175, -0.0009985, 0.1317, -0.1783, -0.010056, -0.3164, 0.01156, -0.02916, 0.1284, 0.02516, -0.231, -0.246
    0xaf1eab20, 0xb0eaa4e2, 0x9417af85, 0xb1b53037, 0xb510a126, 0xa77721eb, 0x2671301c, 0xb3dfb364,
    // -0.2537, 0.0823, -0.0874, -0.0879, 0.1356, -0.0703, 0.003416, -0.007473, 0.231, -0.02437, -0.09045, -0.0667, -0.0853, -0.1716, -0.1214, 0.0124
    0x2d44b40f, 0xada0ad98, 0xac803057, 0x9fa71aff, 0xa63d3364, 0xac45adca, 0xb17ead76, 0x2259afc5,
    // -0.01616, -0.04968, -0.3438, -0.02486, -0.05823, 0.063, 0.05002, -0.04498, 0.0545, -0.1045, -0.1404, -0.3293, -0.02278, 0.00858, -0.1859, -0.1661
    0xaa5ca423, 0xa65db580, 0x2c08ab74, 0xa9c22a67, 0xaeb02afa, 0xb545b07e, 0x2065a5d5, 0xb151b1f3,
    // -0.1032, -0.014145, 0.0607, -0.04883, -0.0427, 0.0309, -0.0982, 0.0722, 0.07306, -0.2258, -0.131, -0.01859, -0.127, -0.01913, 0.0901, -0.2483
    0xa33eae9b, 0xaa402bc5, 0x27e9a977, 0x2c9fae49, 0xb33a2cad, 0xa4c2b031, 0xa4e6b010, 0xb3f22dc4,
};
static const uint embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias_dwords[32] = {
    // -0.0003262, -0.0004048, 0.0006933, -9.13e-05, -0.0001465, -0.0002224, 0.0001692, -0.000251, -0.0002525, 0.000274, -0.0003395, 6.03e-05, 0.000836, 0.000394, 0.0005646, -0.0003448
    0x8ea28d58, 0x85fc11ae, 0x8b4a88cd, 0x8c1d098b, 0xc7d8c23, 0x3f48d90, 0xe7512d9, 0x8da610a0,
    // -0.0002577, -6.306e-05, -0.0002894, 0.0004945, -0.0003698, 0.0001544, -0.0002646, -0.0001527, -0.000593, 0.0001924, 3.11e-05, -0.0004392, -0.0001905, 0.0006223, -0.0001484, -0.0001138
    0x84228c39, 0x100d8cbe, 0x90f8e0f, 0x89018c56, 0xa4e90dc, 0x8f32020a, 0x11198a3e, 0x877588dd,
    // -0.0003798, 0.000491, -0.0005116, -8e-07, -0.000201, 0.0002968, 0.00010526, 0.0004728, 0.0004373, 0.0002017, -0.0009065, -0.0002544, -0.0004106, 0.0001543, 3.636e-05, 0.0003142
    0x10068e39, 0x800d9031, 0xcdd8a96, 0xfbf06e6, 0xa9c0f2a, 0x8c2b936d, 0x90e8eba, 0xd260262,
    // 0.0007687, 0.0004327, 0.000637, 0.0003502, 0.0002236, 0.000239, 0.0003068, -0.0001192, 6.78e-05, -6.38e-05, -0.0006337, -9.084e-05, 0.001045, -0.000824, -0.0001487, 0.0002592
    0xf17124c, 0xdbd1138, 0xbd50b54, 0x87d00d07, 0x842e0471, 0x85f49131, 0x92c01448, 0xc3f88df,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass8(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage__bottleneck_ResidualBlock_1_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _bottleneck_ResidualBlock_1_residual_func_Split_output_grouped = {
        uint3(480, 270, 64), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(480, 270, 64), // threadGroupSliceSize
        uint3(480, 270, 64), // storageSize
        uint3(64, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        58060800, // threadGroupStorageByteOffset
        storage__bottleneck_ResidualBlock_1_residual_func_Split_output_grouped };
    
    const BufferStorage storage__bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 32), // threadGroupSliceSize
        uint4(3, 3, 16, 32), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        39040, // threadGroupStorageByteOffset
        0.003624186385422945, storage__bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = { embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 128), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 128), // threadGroupSliceSize
        uint4(1, 1, 64, 128), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        43648, // threadGroupStorageByteOffset
        0.004936466924846172, storage__bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<64> storage_embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias = { embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<64> > embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias = {
        128, // logicalSize
        0, // threadGroupSliceStart
        128, // threadGroupSliceSize
        128, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 128, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 128, 64), // threadGroupSliceSize
        uint4(1, 1, 128, 64), // storageSize
        uint4(128, 128, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        51840, // threadGroupStorageByteOffset
        0.004948844667524099, storage__bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias = { embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias };
    
    // /bottleneck/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_16 = uint3(480, 270, 64);
    const int3 groupStart_slice_16 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 64);
    const uint3 groupSize_slice_16 = uint3(64, 1, 64);
    const uint3 storageSize_slice_16 = uint3(480, 270, 64);
    const uint3 tensorByteStrides_slice_16 = uint3(64, 30720, 1);
    const uint3 paddingBegin_slice_16 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_16 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_16 = dot(groupStart_slice_16, tensorByteStrides_slice_16);
    const RWBufferStorage storage_slice_16 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_16 = { logicalSize_slice_16, groupStart_slice_16, groupSize_slice_16, storageSize_slice_16, tensorByteStrides_slice_16, paddingBegin_slice_16, paddingEnd_slice_16, threadGroupByteOffsetInTensor_slice_16 + 49766400, storage_slice_16 };
    // Fusedquantized_/bottleneck/ResidualBlock_1/residual_func/Concat_quantized_/bottleneck/ResidualBlock_1/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_1/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_1/body/pw_expand/Conv_/bottleneck/ResidualBlock_1/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_1/body/pw_contract/Conv_/bottleneck/ResidualBlock_1/Add (64, 270, 480), (32, 16, 3, 3), (32,), (128, 64, 1, 1), (128,), (64, 128, 1, 1), (64,) -> (64, 270, 480)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<64, 2>(0.02208055555820465, 0.035368867218494415, 0.023522930219769478, 0.024726172909140587, 0.03780313581228256, _bottleneck_ResidualBlock_1_residual_func_Split_output_grouped, _bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_1_body_spatial_mixing_partial_conv_bias, _bottleneck_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_1_body_pw_expand_bias, _bottleneck_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_1_body_pw_contract_bias, slice_16, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_8
#ifdef MLSR_PASS_8_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass8_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /bottleneck/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_17 = uint3(480, 270, 64);
    const int3 groupStart_slice_17 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 64);
    const uint3 groupSize_slice_17 = uint3(32, 1, 64);
    const uint3 storageSize_slice_17 = uint3(480, 270, 64);
    const uint3 tensorByteStrides_slice_17 = uint3(64, 30720, 1);
    const uint3 paddingBegin_slice_17 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_17 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_17 = dot(groupStart_slice_17, tensorByteStrides_slice_17);
    const RWBufferStorage storage_slice_17 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_17 = { logicalSize_slice_17, groupStart_slice_17, groupSize_slice_17, storageSize_slice_17, tensorByteStrides_slice_17, paddingBegin_slice_17, paddingEnd_slice_17, threadGroupByteOffsetInTensor_slice_17 + 49766400, storage_slice_17 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_17, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_8_POST


#ifdef MLSR_PASS_9
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FNB_CT2D_ADD.hlsli"

static const uint embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords[16] = {
    // 0.0003083, -0.0002067, -0.001044, -0.0001233, 0.0003896, 0.001222, -0.000237, -0.0001833, 0.001456, -1.425e-05, -0.001299, 0.0002892, -0.00231, 0.001414, 0.002, 0.001437
    0x8ac60d0d, 0x880a9447, 0x15010e62, 0x8a028bc4, 0x80ef15f7, 0xcbd9552, 0x15cb98bb, 0x15e31819,
    // -0.0004852, 0.0007806, -0.000977, 0.0001543, -0.001141, -0.0006595, -0.001933, -0.001749, 0.0001884, -0.001778, -0.000754, -0.0004804, 0.001032, -0.001444, -0.000523, 0.0004168
    0x12658ff3, 0x90e9400, 0x916794ac, 0x972a97eb, 0x97480a2c, 0x8fdf922d, 0x95ea143a, 0xed49049,
};
static const uint embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias_dwords[64] = {
    // 0.07306, 0.012794, -0.02548, 0.05, -0.246, -0.0827, -0.03415, 0.0582, -0.006, -0.036, -0.1132, 0.04764, -0.4304, -0.01678, -0.3396, -0.01662
    0x228d2cad, 0x2a66a686, 0xad4bb3df, 0x2b73a85f, 0xa89c9e25, 0x2a19af3f, 0xa44cb6e3, 0xa441b56f,
    // 0.04022, 0.1174, -0.01422, -0.1636, 0.1009, -0.0482, -0.2201, -0.0398, -0.2117, -0.00485, -0.01808, 0.01686, 0.00656, 0.00131, 0.1249, -0.266
    0x2f832926, 0xb13ca348, 0xaa2b2e75, 0xa918b30b, 0x9cf7b2c6, 0x2451a4a1, 0x155e1eb8, 0xb4422ffe,
    // -0.4004, -0.02586, 0.013466, 0.03336, -0.004314, -0.2118, -0.1703, -0.1212, 0.00506, -0.1277, 0.03494, 0.0923, -0.04477, -0.331, -0.08685, 0.0196
    0xa69fb668, 0x284522e5, 0xb2c79c6b, 0xafc2b173, 0xb0161d2e, 0x2de82879, 0xb54ca9bb, 0x2505ad8f,
    // 0.0182, -0.1509, -0.1195, -0.2369, -0.1833, 0.0738, 0.1145, -0.2217, -0.3154, -0.03595, -0.3567, -0.3582, -0.00532, -0.2003, 0.03937, -0.5415
    0xb0d424a9, 0xb395afa6, 0x2cb9b1de, 0xb3182f54, 0xa89ab50c, 0xb5bbb5b5, 0xb2699d73, 0xb855290a,
    // 0.00836, 0.1183, -0.6035, 0.004677, 0.004658, 0.02234, -0.01046, 0.1627, -0.1357, -0.0808, 0.05713, -0.13, -0.1119, -0.1023, -0.06384, -0.1517
    0x2f922048, 0x1ccab8d4, 0x25b81cc5, 0x3135a15b, 0xad2cb058, 0xb0292b50, 0xae8caf29, 0xb0dbac16,
    // -0.04526, -0.201, -0.02295, 0.03494, 0.05743, 0.01917, -0.0708, -0.1375, -0.01556, 0.11304, -0.03008, -0.2974, -0.1506, 0.05054, -0.0937, 0.1476
    0xb26fa9cb, 0x2879a5e0, 0x24e82b5a, 0xb066ac88, 0x2f3ca3f7, 0xb4c2a7b3, 0x2a78b0d2, 0x30b9adff,
    // 0.0007534, -0.1437, -0.1913, -0.012276, -0.158, 0.1034, 0.05307, -0.1166, -0.3643, 0.09424, -0.10693, -0.1484, -0.2505, -0.3303, -0.1968, 0.05545
    0xb099122c, 0xa249b21f, 0x2e9eb10e, 0xaf762acb, 0x2e08b5d4, 0xb0c0aed8, 0xb549b402, 0x2b19b24c,
    // -0.2047, 0.015526, -0.0844, -0.1284, -0.05408, -0.1268, -0.002857, -0.1721, -0.1821, -0.2703, -0.03165, 0.06354, -0.0703, 0.1029, 0.07056, 0.01335
    0x23f3b28d, 0xb01cad67, 0xb00faaec, 0xb18299da, 0xb453b1d4, 0x2c11a80d, 0x2e96ac80, 0x22d62c84,
};
static const uint embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias_dwords[32] = {
    // 0.0001033, 0.0001533, 0.000192, 5.5e-06, 0.000319, 3.564e-05, 0.0003061, 0.0002133, 0.0002995, 0.000443, -0.0003922, -9.52e-05, 9.69e-05, 0.0001316, 0.0008144, -3.13e-05
    0x90606c5, 0x5c0a4b, 0x2560d3a, 0xafd0d04, 0xf420ce8, 0x863d8e6d, 0x850065a, 0x820d12ac,
    // -0.0003445, -0.0003893, 9.45e-05, 0.0001228, 0.0002787, -0.0002118, -3.684e-05, 0.000333, 0.0001669, 0.000116, 9.5e-06, -0.000507, -0.0001532, -4.804e-05, 0.0002592, -8.81e-05
    0x8e618da5, 0x8060631, 0x8af10c91, 0xd75826a, 0x79a0978, 0x9027009f, 0x83268905, 0x85c60c3f,
    // -0.000259, 5.525e-05, 0.0001398, -0.0002123, -0.0001981, -9.376e-05, 9.936e-05, -0.0003598, 7.75e-05, 0.0002288, 0.0003455, 0.0001103, 0.0001145, -0.0001634, -0.0001729, -0.0003555
    0x39f8c3e, 0x8af50895, 0x86258a7e, 0x8de50683, 0xb7f0514, 0x73b0da9, 0x895b0781, 0x8dd389aa,
    // -0.000434, 0.000107, 0.0007243, 0.0004134, -0.0003328, 0.0003088, -1.204e-05, 0.0004206, -0.0005245, -0.000567, 0.0003386, -2.074e-05, 0.000296, -3.654e-05, 9.876e-05, 0.0003715
    0x7038f1c, 0xec611ef, 0xd0f8d74, 0xee480ca, 0x90a5904c, 0x815c0d8c, 0x82650cda, 0xe160679,
};
static const uint embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias_dwords[16] = {
    // 0.006523, 0.0396, -0.03485, 0.0355, -0.01111, -0.08246, 0.0203, 0.01145, -0.002426, 0.03061, 0.04166, 0.0005445, -0.012024, -0.0377, 0.041, -0.02351
    0x29121eae, 0x288ba876, 0xad47a1b0, 0x21dd2532, 0x27d698f8, 0x10762955, 0xa8d3a228, 0xa605293f,
    // 0.1266, 0.0475, 0.06186, -0.0495, 0.0778, 0.048, 0.0751, -0.02847, -0.05115, -0.01331, 0.07135, 0.0449, -0.09906, 0.05643, -0.0989, -0.10815
    0x2a14300d, 0xaa562beb, 0x2a252cfb, 0xa74a2cce, 0xa2d1aa8c, 0x29bf2c91, 0x2b39ae57, 0xaeecae54,
};

[numthreads(8, 8, 1)]
void fsr4_model_v07_i8_pass9(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(8, 8, 1);
    
    const RWBufferStorage storage__bottleneck_ResidualBlock_2_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _bottleneck_ResidualBlock_2_residual_func_Split_output_grouped = {
        uint3(480, 270, 64), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(480, 270, 64), // threadGroupSliceSize
        uint3(480, 270, 64), // storageSize
        uint3(64, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        49766400, // threadGroupStorageByteOffset
        storage__bottleneck_ResidualBlock_2_residual_func_Split_output_grouped };
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(960, 540, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 32), // threadGroupSliceSize
        uint3(960, 540, 32), // storageSize
        uint3(32, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        33177600, // threadGroupStorageByteOffset
        0.01912216655910015, storage_fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const BufferStorage storage__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 32), // threadGroupSliceSize
        uint4(3, 3, 16, 32), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        60032, // threadGroupStorageByteOffset
        0.004537835717201233, storage__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = { embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 128), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 128), // threadGroupSliceSize
        uint4(1, 1, 64, 128), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        64640, // threadGroupStorageByteOffset
        0.004945691209286451, storage__bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<64> storage_embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias = { embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<64> > embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias = {
        128, // logicalSize
        0, // threadGroupSliceStart
        128, // threadGroupSliceSize
        128, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias };
    
    const BufferStorage storage__bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_NHWC< BufferStorage > _bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 128, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 128, 64), // threadGroupSliceSize
        uint4(1, 1, 128, 64), // storageSize
        uint4(128, 128, 1, 128), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        72832, // threadGroupStorageByteOffset
        0.004941181745380163, storage__bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<32> storage_embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias = { embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias };
    
    const BufferStorage storage_hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { InitializerBuffer };
    const QuantizedTensor4i8_HWCN< BufferStorage > hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 32, 64), // threadGroupSliceSize
        uint4(2, 2, 32, 64), // storageSize
        uint4(2048, 4096, 64, 1), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        81024, // threadGroupStorageByteOffset
        0.0026505705900490284, storage_hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    const ConstantBufferStorage<16> storage_embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias = { embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias };
    
    // FusedFusedquantized_/bottleneck/ResidualBlock_2/residual_func/Concat_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_2/body/pw_expand/Conv_/bottleneck/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_2/body/pw_contract/Conv_/bottleneck/ResidualBlock_2/Add_Fusedquantized_/bottleneck/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_Fusedquantized_/decoder3/skip_pop_0/Add_QuantizedOutput_output_grouped
    const uint3 logicalSize_slice_18 = uint3(960, 540, 32);
    const int3 groupStart_slice_18 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(16, 16, 32);
    const uint3 groupSize_slice_18 = uint3(16, 16, 32);
    const uint3 storageSize_slice_18 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_18 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_18 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_18 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_18 = dot(groupStart_slice_18, tensorByteStrides_slice_18);
    const RWBufferStorage storage_slice_18 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_18 = { logicalSize_slice_18, groupStart_slice_18, groupSize_slice_18, storageSize_slice_18, tensorByteStrides_slice_18, paddingBegin_slice_18, paddingEnd_slice_18, threadGroupByteOffsetInTensor_slice_18 + 66355200, storage_slice_18 };
    // FusedFusedquantized_/bottleneck/ResidualBlock_2/residual_func/Concat_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_2/body/pw_expand/Conv_/bottleneck/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_2/body/pw_contract/Conv_/bottleneck/ResidualBlock_2/Add_Fusedquantized_/bottleneck/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_Fusedquantized_/decoder3/skip_pop_0/Add_QuantizedOutput (64, 270, 480), (32, 540, 960), (32, 16, 3, 3), (32,), (128, 64, 1, 1), (128,), (64, 128, 1, 1), (64,), (64, 32, 2, 2), (32,) -> (32, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FNB_CT2D_ADD<64, 2>(0.024726172909140587, 0.03780313581228256, 0.02271348424255848, 0.030219079926609993, 0.022420380264520645, 0.03330652415752411, _bottleneck_ResidualBlock_2_residual_func_Split_output_grouped, fused_quantized_NHWC__encoder3_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, _bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_bias, _bottleneck_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_2_body_pw_expand_bias, _bottleneck_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_ResidualBlock_2_body_pw_contract_bias, hwcn__bottleneck_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_bottleneck_UpscaleConvTranspose2x2_upscale_conv_bias, slice_18, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_9
#ifdef MLSR_PASS_9_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass9_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // FusedFusedquantized_/bottleneck/ResidualBlock_2/residual_func/Concat_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/bottleneck/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/bottleneck/ResidualBlock_2/body/pw_expand/Conv_/bottleneck/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/bottleneck/ResidualBlock_2/body/pw_contract/Conv_/bottleneck/ResidualBlock_2/Add_Fusedquantized_/bottleneck/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_Fusedquantized_/decoder3/skip_pop_0/Add_QuantizedOutput_output_grouped
    const uint3 logicalSize_slice_19 = uint3(960, 540, 32);
    const int3 groupStart_slice_19 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_19 = uint3(32, 1, 32);
    const uint3 storageSize_slice_19 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_19 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_19 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_19 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_19 = dot(groupStart_slice_19, tensorByteStrides_slice_19);
    const RWBufferStorage storage_slice_19 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_19 = { logicalSize_slice_19, groupStart_slice_19, groupSize_slice_19, storageSize_slice_19, tensorByteStrides_slice_19, paddingBegin_slice_19, paddingEnd_slice_19, threadGroupByteOffsetInTensor_slice_19 + 66355200, storage_slice_19 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_19, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_9_POST


#ifdef MLSR_PASS_10
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FasterNetBlock.hlsli"

static const uint embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 2, -1, -7, -8, -3, 9, 10, -6, 12, -6, 3, 1, 12, 9, -20, 12, 38, -29, -9, 4, -26, -15, -37, 24, -4, 10, -26, -5, 17, 33, 32, 52
    0xf8f9ff02, 0xfa0a09fd, 0x103fa0c, 0xcec090c, 0x4f7e326, 0x18dbf1e6, 0xfbe60afc, 0x34202111,
    // 4, -2, -8, -18, -21, -8, -11, -17, -1, 6, -5, 3, 0, 3, 7, 9, 17, -3, 8, -10, -17, -3, -1, 39, -9, 24, -5, -41, -20, 50, 4, 44
    0xeef8fe04, 0xeff5f8eb, 0x3fb06ff, 0x9070300, 0xf608fd11, 0x27fffdef, 0xd7fb18f7, 0x2c0432ec,
    // -42, -14, 49, 49, -14, 79, -54, 15, -8, -28, -15, -8, 32, -41, -34, -32, -7, 13, -21, 7, -2, 0, 11, -23, -5, 26, 8, 11, 23, 3, 4, 31
    0x3131f2d6, 0xfca4ff2, 0xf8f1e4f8, 0xe0ded720, 0x7eb0df9, 0xe90b00fe, 0xb081afb, 0x1f040317,
    // -6, 4, -7, 8, 5, 1, -4, -5, -11, 34, -1, -23, -2, 9, 0, 14, -18, -19, -14, -6, -16, 39, -1, -8, -34, 13, 43, 21, 4, -16, -8, -15
    0x8f904fa, 0xfbfc0105, 0xe9ff22f5, 0xe0009fe, 0xfaf2edee, 0xf8ff27f0, 0x152b0dde, 0xf1f8f004,
    // 23, 9, -13, -27, 5, -2, 19, -5, 15, 10, 4, 2, 8, -9, 3, 15, -11, 11, -5, 8, -5, 40, 20, -10, 11, 12, 18, -19, 10, 12, -15, -2
    0xe5f30917, 0xfb13fe05, 0x2040a0f, 0xf03f708, 0x8fb0bf5, 0xf61428fb, 0xed120c0b, 0xfef10c0a,
    // -1, -22, 33, 1, 28, 11, 37, 43, -2, -4, 25, 23, 24, -25, 10, 6, 7, -7, 14, -2, 14, 5, -17, -8, 10, -3, 27, 14, 2, -15, 10, -4
    0x121eaff, 0x2b250b1c, 0x1719fcfe, 0x60ae718, 0xfe0ef907, 0xf8ef050e, 0xe1bfd0a, 0xfc0af102,
    // 28, 11, 28, 10, -5, -14, -6, 23, 4, 29, 5, -53, -29, 37, 19, 47, -23, 40, -52, -22, -40, -20, 19, -64, 2, 18, -17, -14, 56, -9, -1, 16
    0xa1c0b1c, 0x17faf2fb, 0xcb051d04, 0x2f1325e3, 0xeacc28e9, 0xc013ecd8, 0xf2ef1202, 0x10fff738,
    // -8, 24, 7, -13, 27, 28, -12, 6, 22, 17, 8, -6, -5, -19, -2, -9, 21, -14, 12, 12, 25, -18, -5, 24, 12, 21, -4, 17, -1, 11, -6, 6
    0xf30718f8, 0x6f41c1b, 0xfa081116, 0xf7feedfb, 0xc0cf215, 0x18fbee19, 0x11fc150c, 0x6fa0bff,
    // -4, 8, -8, 13, 37, -17, 25, 3, -6, 46, -16, 9, 8, 27, 8, 62, 4, 23, -3, -17, -15, 29, 31, 11, -1, 20, 7, -23, -16, -2, -23, 1
    0xdf808fc, 0x319ef25, 0x9f02efa, 0x3e081b08, 0xeffd1704, 0xb1f1df1, 0xe90714ff, 0x1e9fef0,
    // 25, 8, -11, 9, -9, 2, 11, 5, -20, -4, 24, -17, 1, -16, 19, -1, 26, 42, -17, 21, -2, -20, -5, -14, 0, -11, 17, -23, -17, 13, 8, -3
    0x9f50819, 0x50b02f7, 0xef18fcec, 0xff13f001, 0x15ef2a1a, 0xf2fbecfe, 0xe911f500, 0xfd080def,
    // 11, 15, -11, 13, -4, -6, 8, -3, -7, -5, 8, -5, -5, -1, 16, -6, 16, 19, -34, 25, -14, -44, -23, -6, 4, 3, 7, -62, -9, -5, 5, 9
    0xdf50f0b, 0xfd08fafc, 0xfb08fbf9, 0xfa10fffb, 0x19de1310, 0xfae9d4f2, 0xc2070304, 0x905fbf7,
    // 28, 106, 41, 28, 1, -20, 3, 16, 31, -51, 35, -51, 8, -60, -28, 51, 15, 11, -9, 12, -26, -37, -1, -25, 8, -35, 26, -18, -7, -6, -11, -10
    0x1c296a1c, 0x1003ec01, 0xcd23cd1f, 0x33e4c408, 0xcf70b0f, 0xe7ffdbe6, 0xee1add08, 0xf6f5faf9,
    // 8, 12, -16, 10, -6, -2, 9, -2, -15, -7, 20, 3, -29, -13, 7, -16, 3, 23, -27, 14, 5, -31, 10, -2, -12, -16, -5, -35, -23, 24, -11, 7
    0xaf00c08, 0xfe09fefa, 0x314f9f1, 0xf007f3e3, 0xee51703, 0xfe0ae105, 0xddfbf0f4, 0x7f518e9,
    // 4, 8, -20, 17, 4, -5, 11, -8, -17, -21, 1, 1, 16, 8, -2, 11, 0, -3, -6, -14, 12, 16, 21, 4, -5, -11, -19, 0, 5, -1, -6, 6
    0x11ec0804, 0xf80bfb04, 0x101ebef, 0xbfe0810, 0xf2fafd00, 0x415100c, 0xedf5fb, 0x6faff05,
    // -10, -1, 16, 16, 20, 36, 4, -7, -1, 3, 9, 21, -16, -11, -8, -38, 4, -3, 12, 13, 32, -2, -1, 7, -3, 1, -3, -3, -32, -4, 2, -3
    0x1010fff6, 0xf9042414, 0x150903ff, 0xdaf8f5f0, 0xd0cfd04, 0x7fffe20, 0xfdfd01fd, 0xfd02fce0,
    // 11, -22, -24, 1, 11, 17, -6, -3, 13, -20, -30, 9, -16, -7, 15, -14, 43, 69, 83, 18, 30, 61, -22, 28, 63, 32, 59, 16, 17, 11, -24, -28
    0x1e8ea0b, 0xfdfa110b, 0x9e2ec0d, 0xf20ff9f0, 0x1253452b, 0x1cea3d1e, 0x103b203f, 0xe4e80b11,
    // -1, -17, 12, -7, 9, 22, 7, 8, -5, -6, 9, 2, -23, -4, -2, -33, 14, -5, 7, 1, 19, -1, -27, -2, 12, -15, -5, 12, -22, 3, 12, 3
    0xf90cefff, 0x8071609, 0x209fafb, 0xdffefce9, 0x107fb0e, 0xfee5ff13, 0xcfbf10c, 0x30c03ea,
    // 10, 7, 1, -8, 3, 34, -4, 21, 7, 1, -9, 19, 1, 12, -1, -21, -2, 21, -3, 13, 12, 21, -6, 6, -9, -11, -26, -25, 1, 28, -2, 9
    0xf801070a, 0x15fc2203, 0x13f70107, 0xebff0c01, 0xdfd15fe, 0x6fa150c, 0xe7e6f5f7, 0x9fe1c01,
    // 6, 10, -25, 8, -8, 8, -11, -2, 8, 3, 7, 0, -13, 0, 3, -10, 58, -6, -11, 29, -7, -6, 3, 29, -2, 4, 3, 37, 19, -6, 22, 25
    0x8e70a06, 0xfef508f8, 0x70308, 0xf60300f3, 0x1df5fa3a, 0x1d03faf9, 0x250304fe, 0x1916fa13,
    // 27, 14, -18, 6, -5, 1, -12, 0, 1, -1, 10, 19, -9, 0, 10, -5, 16, 9, -9, 12, 3, 41, 24, 7, -15, -18, 9, 65, 2, 1, 13, -35
    0x6ee0e1b, 0xf401fb, 0x130aff01, 0xfb0a00f7, 0xcf70910, 0x7182903, 0x4109eef1, 0xdd0d0102,
    // 29, -29, -97, 55, -12, -20, 15, -7, -2, 78, 40, 28, 46, -21, 27, 19, 26, 1, -33, 22, 0, 13, 9, 17, -18, 12, -23, 36, 11, 35, 38, 2
    0x379fe31d, 0xf90fecf4, 0x1c284efe, 0x131beb2e, 0x16df011a, 0x11090d00, 0x24e90cee, 0x226230b,
    // 2, 3, -17, 3, -13, 1, -3, 8, -15, -15, 6, -7, -5, -4, 4, -2, 18, -17, -13, 24, -12, 43, -20, 4, -21, -9, 17, 53, 4, -31, 7, -11
    0x3ef0302, 0x8fd01f3, 0xf906f1f1, 0xfe04fcfb, 0x18f3ef12, 0x4ec2bf4, 0x3511f7eb, 0xf507e104,
    // 10, 4, -18, 15, -8, 3, -6, 2, -10, -11, 15, -5, -1, -9, -2, -19, -24, 4, 4, 9, 10, -10, 3, 1, 1, -6, 3, 35, -15, -16, -9, 0
    0xfee040a, 0x2fa03f8, 0xfb0ff5f6, 0xedfef7ff, 0x90404e8, 0x103f60a, 0x2303fa01, 0xf7f0f1,
    // -9, -10, -17, 3, 4, -3, 10, 15, 12, -15, 2, 16, -5, -32, -12, 7, -26, -10, -4, 14, 7, 7, 17, 15, -8, -7, 11, -10, -10, -12, -20, 8
    0x3eff6f7, 0xf0afd04, 0x1002f10c, 0x7f4e0fb, 0xefcf6e6, 0xf110707, 0xf60bf9f8, 0x8ecf4f6,
    // 1, -7, 25, 12, -13, 8, 9, 34, -31, 4, -18, 21, -36, 11, 35, 32, -9, 36, 56, 65, -80, -38, -39, 31, -1, 18, 42, 31, -38, 44, 65, 25
    0xc19f901, 0x220908f3, 0x15ee04e1, 0x20230bdc, 0x413824f7, 0x1fd9dab0, 0x1f2a12ff, 0x19412cda,
    // -33, -19, 1, 23, 15, 45, 22, 23, -30, -6, 10, -1, -31, -28, 9, -24, -12, -5, -9, 20, 7, -4, 12, 6, -14, 4, -13, -24, 3, 2, -22, 20
    0x1701eddf, 0x17162d0f, 0xff0afae2, 0xe809e4e1, 0x14f7fbf4, 0x60cfc07, 0xe8f304f2, 0x14ea0203,
    // -25, -12, 11, 17, 14, -4, -8, -29, -20, 7, 1, -11, -15, -23, 6, 21, -4, -23, 15, 8, -12, -22, 3, -11, -8, 2, 13, 5, -30, -12, 6, -3
    0x110bf4e7, 0xe3f8fc0e, 0xf50107ec, 0x1506e9f1, 0x80fe9fc, 0xf503eaf4, 0x50d02f8, 0xfd06f4e2,
    // 0, -25, -13, 1, -19, -4, -17, 8, 14, -13, 0, -16, -7, 7, 6, 21, -5, -15, 0, 31, -9, 20, 8, -21, -14, 7, 21, 6, -14, 9, -4, 3
    0x1f3e700, 0x8effced, 0xf000f30e, 0x150607f9, 0x1f00f1fb, 0xeb0814f7, 0x61507f2, 0x3fc09f2,
    // -7, 6, -1, 11, 4, -10, -2, -8, 6, 1, -1, 0, -7, -14, -4, -2, -34, 10, -32, 47, -10, 4, -19, -14, -4, 24, 13, -27, -10, 46, 16, 24
    0xbff06f9, 0xf8fef604, 0xff0106, 0xfefcf2f9, 0x2fe00ade, 0xf2ed04f6, 0xe50d18fc, 0x18102ef6,
    // 4, -51, 17, 22, 81, 59, 14, 6, -62, -40, -35, 39, -7, -71, -30, -12, -11, 17, -3, 7, -8, -4, -9, 4, -8, -25, -7, 17, -10, -7, 26, -12
    0x1611cd04, 0x60e3b51, 0x27ddd8c2, 0xf4e2b9f9, 0x7fd11f5, 0x4f7fcf8, 0x11f9e7f8, 0xf41af9f6,
    // 10, -7, -2, -3, -2, -19, -8, -6, 11, -12, 7, 22, 9, -11, 3, 3, 9, 3, -15, 28, 17, -31, 17, 22, -4, 9, -18, 17, 12, 0, 7, 34
    0xfdfef90a, 0xfaf8edfe, 0x1607f40b, 0x303f509, 0x1cf10309, 0x1611e111, 0x11ee09fc, 0x2207000c,
    // -19, 8, -20, -10, -22, 15, -2, 15, -17, -11, -7, -7, -29, -27, 6, -1, -28, 1, -1, 6, -11, 4, -7, -24, 8, 8, 12, 3, 11, -12, -4, -2
    0xf6ec08ed, 0xffe0fea, 0xf9f9f5ef, 0xff06e5e3, 0x6ff01e4, 0xe8f904f5, 0x30c0808, 0xfefcf40b,
    // 7, -2, 4, 5, -2, -13, -3, 17, 0, -11, 11, -6, 7, -14, 13, -1, 3, 0, -7, 2, -4, -9, -3, 8, -3, -9, 10, -4, -12, 3, 3, 11
    0x504fe07, 0x11fdf3fe, 0xfa0bf500, 0xff0df207, 0x2f90003, 0x8fdf7fc, 0xfc0af7fd, 0xb0303f4,
    // 18, -21, 16, -17, -3, -7, -7, 14, -12, -37, 17, 41, -3, -20, -1, -2, 2, -17, 42, 16, 34, -11, -4, -36, 81, 28, -128, 21, 50, -43, -45, 11
    0xef10eb12, 0xef9f9fd, 0x2911dbf4, 0xfeffecfd, 0x102aef02, 0xdcfcf522, 0x15801c51, 0xbd3d532,
    // -17, 26, -2, -6, -2, -16, 1, 0, -4, -16, 10, -12, 0, 3, -12, 2, -8, 2, -8, 23, 3, -7, -2, 7, -15, 21, -13, -21, -13, 17, -2, 18
    0xfafe1aef, 0x1f0fe, 0xf40af0fc, 0x2f40300, 0x17f802f8, 0x7fef903, 0xebf315f1, 0x12fe11f3,
    // -17, 21, -9, 2, 0, 14, 9, 6, -9, -16, -21, 12, -1, 7, -1, 8, -1, 20, -9, -5, -5, -17, 6, 9, 4, -5, -20, 27, 11, 9, 9, 3
    0x2f715ef, 0x6090e00, 0xcebf0f7, 0x8ff07ff, 0xfbf714ff, 0x906effb, 0x1becfb04, 0x309090b,
    // -10, -24, 1, -1, -12, 9, -14, -8, 42, -10, 19, 9, 10, 9, -7, 17, -8, 19, 11, 7, 14, 7, 10, -6, 16, 1, 27, 11, 9, 0, -9, 15
    0xff01e8f6, 0xf8f209f4, 0x913f62a, 0x11f9090a, 0x70b13f8, 0xfa0a070e, 0xb1b0110, 0xff70009,
    // -5, 3, -18, -16, -14, -2, 17, -3, 6, 12, 8, -5, 0, 1, -3, -10, -6, 13, -30, -7, 31, 24, 18, 19, 23, 19, -3, 29, 18, 8, -14, -10
    0xf0ee03fb, 0xfd11fef2, 0xfb080c06, 0xf6fd0100, 0xf9e20dfa, 0x1312181f, 0x1dfd1317, 0xf6f20812,
    // 6, 67, 57, -4, 2, -2, 8, 69, -29, -56, 0, 20, 17, 55, 67, 45, 20, 0, -6, -15, -49, 10, 19, 12, -18, 19, 12, 20, -9, -9, -9, 3
    0xfc394306, 0x4508fe02, 0x1400c8e3, 0x2d433711, 0xf1fa0014, 0xc130acf, 0x140c13ee, 0x3f7f7f7,
    // -5, 8, -2, -25, -12, 17, 22, -4, -10, 6, -1, 28, -3, -6, -4, 1, -1, -19, -19, -15, -14, -15, -4, 30, 19, 0, -23, -19, 13, -17, 4, 0
    0xe7fe08fb, 0xfc1611f4, 0x1cff06f6, 0x1fcfafd, 0xf1ededff, 0x1efcf1f2, 0xede90013, 0x4ef0d,
    // 2, 24, -23, -24, 16, -6, 15, 16, 3, 19, -29, 53, 13, -17, -3, 21, -25, 3, -5, -31, -8, -9, -2, -6, -8, -17, -15, 18, 6, 10, -12, -20
    0xe8e91802, 0x100ffa10, 0x35e31303, 0x15fdef0d, 0xe1fb03e7, 0xfafef7f8, 0x12f1eff8, 0xecf40a06,
    // 2, -30, 10, 9, -23, 22, -19, -42, -21, 33, -2, 18, 19, 9, -10, -2, -16, -2, -5, 13, 17, 16, -1, -4, -12, 15, 23, -20, -25, -11, -13, -25
    0x90ae202, 0xd6ed16e9, 0x12fe21eb, 0xfef60913, 0xdfbfef0, 0xfcff1011, 0xec170ff4, 0xe7f3f5e7,
    // -19, 15, 12, 6, -12, -22, -39, -22, -3, 3, 10, -27, 2, 22, -24, 0, 27, 3, -41, 11, 0, -47, -55, 40, 9, 20, 34, 31, 61, -7, -22, 19
    0x60c0fed, 0xead9eaf4, 0xe50a03fd, 0xe81602, 0xbd7031b, 0x28c9d100, 0x1f221409, 0x13eaf93d,
    // 3, 11, 28, -34, -24, -5, -34, -21, 29, 7, 6, -12, -10, -22, -24, -34, 8, 4, -17, -14, 9, -1, -19, -5, 0, 14, -24, -13, -11, 3, -7, -8
    0xde1c0b03, 0xebdefbe8, 0xf406071d, 0xdee8eaf6, 0xf2ef0408, 0xfbedff09, 0xf3e80e00, 0xf8f903f5,
    // -15, -37, -7, 2, -2, -5, 0, 8, -18, 38, -1, 38, 34, -3, 0, 8, -23, 1, -14, -19, -18, 5, -17, -9, -12, 6, -16, 2, -9, -7, 8, -12
    0x2f9dbf1, 0x800fbfe, 0x26ff26ee, 0x800fd22, 0xedf201e9, 0xf7ef05ee, 0x2f006f4, 0xf408f9f7,
    // 9, 18, -6, -36, 21, -13, 3, 10, -38, 15, -13, 18, -6, -10, 3, -14, 10, 1, -17, 2, -2, -7, -9, -25, 4, -8, 11, 8, 9, -20, 0, -10
    0xdcfa1209, 0xa03f315, 0x12f30fda, 0xf203f6fa, 0x2ef010a, 0xe7f7f9fe, 0x80bf804, 0xf600ec09,
    // 5, -19, -6, -4, 2, 11, 13, 7, -17, 21, 38, -3, -2, -7, 10, -23, 13, 10, 3, -5, -10, 1, -15, 21, -45, 38, -33, -5, -45, 18, 0, -1
    0xfcfaed05, 0x70d0b02, 0xfd2615ef, 0xe90af9fe, 0xfb030a0d, 0x15f101f6, 0xfbdf26d3, 0xff0012d3,
    // -43, -42, -28, -39, 20, 29, 65, -35, -34, -46, 13, 69, -8, -43, -28, 2, 35, -51, 7, 16, -17, 3, 16, -10, -11, 27, 31, 21, 4, 11, 9, 19
    0xd9e4d6d5, 0xdd411d14, 0x450dd2de, 0x2e4d5f8, 0x1007cd23, 0xf61003ef, 0x151f1bf5, 0x13090b04,
    // 6, 16, -25, -8, 15, -7, 0, 19, -14, 22, -18, -14, -5, 25, -2, 3, -5, -19, -11, 1, 7, -45, 3, 8, 0, -1, -8, 14, -3, 56, 5, -4
    0xf8e71006, 0x1300f90f, 0xf2ee16f2, 0x3fe19fb, 0x1f5edfb, 0x803d307, 0xef8ff00, 0xfc0538fd,
    // 8, -12, 19, 24, 33, -21, -1, -14, -9, 14, 12, 9, 30, 25, 15, 6, 1, -1, 19, 20, -2, -5, -9, -4, -3, 2, 8, -3, -3, -16, 18, -10
    0x1813f408, 0xf2ffeb21, 0x90c0ef7, 0x60f191e, 0x1413ff01, 0xfcf7fbfe, 0xfd0802fd, 0xf612f0fd,
    // -26, 25, 21, 8, 3, 2, 24, 8, 6, 16, 11, 16, 35, -25, -10, -44, -14, 28, 1, 4, -19, 4, 23, 5, 5, -10, -10, -16, 15, -6, -14, -6
    0x81519e6, 0x8180203, 0x100b1006, 0xd4f6e723, 0x4011cf2, 0x51704ed, 0xf0f6f605, 0xfaf2fa0f,
    // 4, -19, 25, 26, -26, -18, 11, 25, -1, -1, -12, 16, 27, -9, 32, 1, -33, 37, -6, 14, -22, 41, 20, -30, 8, -54, 51, 54, 45, -2, -45, -48
    0x1a19ed04, 0x190beee6, 0x10f4ffff, 0x120f71b, 0xefa25df, 0xe21429ea, 0x3633ca08, 0xd0d3fe2d,
    // -18, 22, -6, 0, -21, 30, 8, 6, -7, -9, -20, -15, 17, 29, -4, -24, -26, 3, -2, 31, -26, 13, 10, 1, -6, 12, -18, -40, 33, 5, -12, 11
    0xfa16ee, 0x6081eeb, 0xf1ecf7f9, 0xe8fc1d11, 0x1ffe03e6, 0x10a0de6, 0xd8ee0cfa, 0xbf40521,
    // -21, 28, 16, 25, -14, -2, 10, 0, -14, 16, -30, -8, 18, 13, -6, 29, -7, 10, 12, 5, -6, -6, -18, -3, 5, -3, -15, 13, -14, 2, 16, -7
    0x19101ceb, 0xafef2, 0xf8e210f2, 0x1dfa0d12, 0x50c0af9, 0xfdeefafa, 0xdf1fd05, 0xf91002f2,
    // -5, 21, 6, -9, 7, 11, -2, 15, -41, 9, 4, -10, 17, -20, 25, -8, 6, 0, 29, 16, -29, -5, -19, -5, -10, 32, -17, -21, -23, -4, 30, 47
    0xf70615fb, 0xffe0b07, 0xf60409d7, 0xf819ec11, 0x101d0006, 0xfbedfbe3, 0xebef20f6, 0x2f1efce9,
    // 8, 12, 14, 18, 11, -3, -21, -10, 24, 7, 7, 4, -9, 4, 5, 14, -13, -13, 5, 38, 5, -5, -9, 7, 2, 36, -1, -5, 23, -35, 9, 6
    0x120e0c08, 0xf6ebfd0b, 0x4070718, 0xe0504f7, 0x2605f3f3, 0x7f7fb05, 0xfbff2402, 0x609dd17,
    // -40, 61, -51, -16, 41, 4, -10, 65, -1, -23, -16, 22, -3, -21, 36, 61, 10, -18, 25, -20, -17, -10, 3, -7, 26, 6, 0, 25, -7, 50, -2, 0
    0xf0cd3dd8, 0x41f60429, 0x16f0e9ff, 0x3d24ebfd, 0xec19ee0a, 0xf903f6ef, 0x1900061a, 0xfe32f9,
    // 10, -7, 30, 21, 5, 7, -6, -6, 17, 5, 24, 3, 7, -17, 2, -1, -5, -17, 9, 16, -6, 3, -2, 6, 17, -2, 13, -11, 24, 5, 2, 10
    0x151ef90a, 0xfafa0705, 0x3180511, 0xff02ef07, 0x1009effb, 0x6fe03fa, 0xf50dfe11, 0xa020518,
    // -25, -1, 21, -1, 3, 0, -12, 0, 3, -18, -4, -7, 25, 26, 10, 1, 7, -5, 3, 12, -7, 11, 6, 0, -3, -27, 8, 4, 14, -2, -9, 10
    0xff15ffe7, 0xf40003, 0xf9fcee03, 0x10a1a19, 0xc03fb07, 0x60bf9, 0x408e5fd, 0xaf7fe0e,
    // -16, 10, 12, 23, 1, 18, -2, -31, 2, 14, -19, -7, -4, 8, -10, 10, -22, -8, -8, 11, 1, -1, 12, 20, -8, 2, 8, -31, -17, 3, -12, -7
    0x170c0af0, 0xe1fe1201, 0xf9ed0e02, 0xaf608fc, 0xbf8f8ea, 0x140cff01, 0xe10802f8, 0xf9f403ef,
    // 9, -15, 6, 18, 5, -7, -3, 5, 0, 6, -5, -41, 10, 6, -2, 35, 36, -29, -70, -19, 55, -15, 63, -45, -78, 68, -17, 19, -54, 18, -9, 40
    0x1206f109, 0x5fdf905, 0xd7fb0600, 0x23fe060a, 0xedbae324, 0xd33ff137, 0x13ef44b2, 0x28f712ca,
    // -21, -1, 41, -12, -35, 46, 14, 7, -6, -23, 20, -32, -46, -16, -21, -44, -8, -4, 8, 31, -8, 3, 17, 7, -10, 35, -1, -32, -19, 5, 6, 14
    0xf429ffeb, 0x70e2edd, 0xe014e9fa, 0xd4ebf0d2, 0x1f08fcf8, 0x71103f8, 0xe0ff23f6, 0xe0605ed,
    // -3, -16, -13, -21, -18, 42, -9, 0, -10, 0, 28, -3, -4, -22, 7, -31, 22, 22, -2, 2, 13, -4, 16, -11, 12, -14, -15, 4, 26, 10, 9, 20
    0xebf3f0fd, 0xf72aee, 0xfd1c00f6, 0xe107eafc, 0x2fe1616, 0xf510fc0d, 0x4f1f20c, 0x14090a1a,
    // 23, 14, 4, 5, 8, -15, 5, 12, -29, 23, -18, -16, -7, 4, 8, -2, -15, -14, 9, 18, -13, 20, 30, 3, -24, 13, -10, 41, 33, -12, -9, -19
    0x5040e17, 0xc05f108, 0xf0ee17e3, 0xfe0804f9, 0x1209f2f1, 0x31e14f3, 0x29f60de8, 0xedf7f421,
    // -2, 18, -6, -14, -1, 6, 3, -8, -3, 4, -13, -1, 3, 12, 3, -10, -16, -10, -22, 2, -3, 4, -8, -15, -16, 23, -42, -19, 12, 19, -16, -23
    0xf2fa12fe, 0xf80306ff, 0xfff304fd, 0xf6030c03, 0x2eaf6f0, 0xf1f804fd, 0xedd617f0, 0xe9f0130c,
    // 16, -33, 69, 27, -25, 16, 23, -2, 16, 43, -46, 53, 17, -30, -23, 127, -23, -21, -13, 13, -12, 35, -27, -5, -9, 5, 24, -35, -10, -3, -18, -34
    0x1b45df10, 0xfe1710e7, 0x35d22b10, 0x7fe9e211, 0xdf3ebe9, 0xfbe523f4, 0xdd1805f7, 0xdeeefdf6,
    // -8, 15, 8, -14, -20, 1, 9, -19, -5, -17, -4, 3, -2, 5, -4, -15, 12, -29, 9, 35, -11, 2, -24, 7, 18, 5, -17, 18, 52, 9, 11, 15
    0xf2080ff8, 0xed0901ec, 0x3fceffb, 0xf1fc05fe, 0x2309e30c, 0x7e802f5, 0x12ef0512, 0xf0b0934,
    // -5, -16, 12, 15, 2, 0, -13, -7, -6, 8, 26, -27, 7, -2, -18, -16, -15, -11, 5, -11, -1, -18, -33, 15, 12, 18, 3, -4, -17, 9, 19, -1
    0xf0cf0fb, 0xf9f30002, 0xe51a08fa, 0xf0eefe07, 0xf505f5f1, 0xfdfeeff, 0xfc03120c, 0xff1309ef,
    // 42, 30, -2, -20, -25, -45, -13, -12, 20, 3, 2, -17, -22, 33, 10, 32, -1, 23, -1, 0, -5, 9, -11, -6, 8, 9, -19, -8, -3, 1, 0, 4
    0xecfe1e2a, 0xf4f3d3e7, 0xef020314, 0x200a21ea, 0xff17ff, 0xfaf509fb, 0xf8ed0908, 0x40001fd,
    // 4, 6, -15, 10, 17, -16, -13, 35, -2, 42, -28, -12, -19, 12, 2, 27, -61, 36, -24, -9, 45, 23, 2, -123, -28, 37, 6, -16, -18, 33, -1, 9
    0xaf10604, 0x23f3f011, 0xf4e42afe, 0x1b020ced, 0xf7e824c3, 0x8502172d, 0xf00625e4, 0x9ff21ee,
    // -36, 22, -22, 6, 38, 42, -6, 47, -24, 11, 22, -28, -18, -29, -13, -31, -16, 24, -13, -14, -2, 21, -13, -10, -1, -7, 3, 8, 1, -1, -7, 2
    0x6ea16dc, 0x2ffa2a26, 0xe4160be8, 0xe1f3e3ee, 0xf2f318f0, 0xf6f315fe, 0x803f9ff, 0x2f9ff01,
    // -10, 45, 17, -19, 0, 23, -14, 0, 17, -37, -17, -13, -30, -18, 9, -17, -17, -12, 2, -6, -22, 10, -32, 11, -5, 3, 19, 11, -29, -27, 17, -36
    0xed112df6, 0xf21700, 0xf3efdb11, 0xef09eee2, 0xfa02f4ef, 0xbe00aea, 0xb1303fb, 0xdc11e5e3,
};
static const uint embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // 0.0001421, 0.0002515, 7.82e-05, -0.0002086, -0.0003855, 0.0001884, 0.0003526, -0.000256, -0.0002015, 7.284e-05, -9.537e-05, 0.00013, -0.000137, 3.91e-05, 0.0002499, -6.64e-05
    0xc1f08a8, 0x8ad60520, 0xa2c8e51, 0x8c320dc7, 0x4c68a9a, 0x8438640, 0x290887d, 0x845a0c18,
};
static const uint embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 19, 40, 2, 38, 0, 14, 13, -21, -10, -21, -24, 35, 33, 50, 12, 34, 10, -61, 28, -34, 18, 13, 39, 42, -7, -73, -55, -8, 9, 9, 24, 9
    0x26022813, 0xeb0d0e00, 0x23e8ebf6, 0x220c3221, 0xde1cc30a, 0x2a270d12, 0xf8c9b7f9, 0x9180909,
    // -7, 19, -2, -1, 19, -15, -30, -47, 18, 30, 8, 35, -7, 0, -17, 16, -56, 7, 61, -110, 15, 22, 24, 78, -33, 22, 6, -10, 61, 14, -40, 27
    0xfffe13f9, 0xd1e2f113, 0x23081e12, 0x10ef00f9, 0x923d07c8, 0x4e18160f, 0xf60616df, 0x1bd80e3d,
    // -29, 54, 18, -61, 56, 10, -18, -27, -26, -14, 3, -63, -64, 14, 35, 21, -63, 14, -37, 16, 24, -14, 52, -56, 31, -11, 19, 45, -14, 34, 26, -4
    0xc31236e3, 0xe5ee0a38, 0xc103f2e6, 0x15230ec0, 0x10db0ec1, 0xc834f218, 0x2d13f51f, 0xfc1a22f2,
    // -10, -37, 81, -37, 31, 17, 28, 27, -2, -63, -8, 0, -5, -5, -31, 14, -20, 5, 15, 53, -15, -15, -21, -45, 18, 35, 19, 18, -2, 15, 2, -1
    0xdb51dbf6, 0x1b1c111f, 0xf8c1fe, 0xee1fbfb, 0x350f05ec, 0xd3ebf1f1, 0x12132312, 0xff020ffe,
    // -36, -9, -30, -2, -5, 32, -20, -19, -2, -16, -4, -18, 9, 3, -6, 40, -105, -10, -17, 1, -34, 12, -12, -36, 6, -18, 7, -47, 8, 11, -21, 26
    0xfee2f7dc, 0xedec20fb, 0xeefcf0fe, 0x28fa0309, 0x1eff697, 0xdcf40cde, 0xd107ee06, 0x1aeb0b08,
    // 18, -20, -9, -22, 18, 11, -5, -16, -26, -15, -47, 7, 50, 0, -75, -40, -85, -4, -38, 22, -24, 22, -21, -9, 17, -3, 15, -34, 3, -6, 26, 3
    0xeaf7ec12, 0xf0fb0b12, 0x7d1f1e6, 0xd8b50032, 0x16dafcab, 0xf7eb16e8, 0xde0ffd11, 0x31afa03,
    // -62, -119, 51, -49, -24, -71, -61, 44, 8, -29, -58, -8, -1, -81, -93, -60, -48, 37, -66, 61, -13, -23, 79, -57, -28, 36, -85, -19, 24, 47, -60, -7
    0xcf3389c2, 0x2cc3b9e8, 0xf8c6e308, 0xc4a3afff, 0x3dbe25d0, 0xc74fe9f3, 0xedab24e4, 0xf9c42f18,
    // -29, -13, -38, 33, -4, 36, -10, -46, -1, -30, 9, 14, 2, -5, -26, 17, 25, 24, -40, 37, -24, 17, -63, -68, 21, 62, -72, -58, 42, -102, 14, -17
    0x21daf3e3, 0xd2f624fc, 0xe09e2ff, 0x11e6fb02, 0x25d81819, 0xbcc111e8, 0xc6b83e15, 0xef0e9a2a,
    // -17, -25, -29, -53, 0, 44, -4, -35, 20, -65, -5, -32, 30, 15, -32, 3, -128, 30, -50, 77, -43, -32, -37, 63, 16, -14, 60, -27, -64, -30, 25, 6
    0xcbe3e7ef, 0xddfc2c00, 0xe0fbbf14, 0x3e00f1e, 0x4dce1e80, 0x3fdbe0d5, 0xe53cf210, 0x619e2c0,
    // 1, -69, -44, -12, 82, -68, -38, 52, 75, -9, 33, -10, -20, -68, -3, -74, -27, -21, 31, -20, -21, 27, -31, -1, 1, 48, 18, -12, 15, -40, -6, 11
    0xf4d4bb01, 0x34dabc52, 0xf621f74b, 0xb6fdbcec, 0xec1febe5, 0xffe11beb, 0xf4123001, 0xbfad80f,
    // 31, -43, -19, 13, -36, 23, 63, -9, -16, -79, 74, 45, -3, 2, -46, 23, -38, 43, -113, 56, -55, -38, -23, 26, -19, 39, 24, -6, -13, -29, -14, -42
    0xdedd51f, 0xf73f17dc, 0x2d4ab1f0, 0x17d202fd, 0x388f2bda, 0x1ae9dac9, 0xfa1827ed, 0xd6f2e3f3,
    // -63, -15, -13, -55, 18, 80, -38, 20, -60, 36, -51, 16, -21, -39, 7, 12, -126, 19, 64, 71, -3, -22, -5, 16, 36, 33, -42, -74, -20, -56, 15, 30
    0xc9f3f1c1, 0x14da5012, 0x10cd24c4, 0xc07d9eb, 0x47401382, 0x10fbeafd, 0xb6d62124, 0x1e0fc8ec,
    // 20, -36, 32, 3, -31, -20, 41, -30, 2, -78, 20, 21, 23, 51, -47, 19, -28, 11, -30, -9, -8, 25, 38, -29, 2, -28, -71, -49, 17, -26, -30, 26
    0x320dc14, 0xe229ece1, 0x1514b202, 0x13d13317, 0xf7e20be4, 0xe32619f8, 0xcfb9e402, 0x1ae2e611,
    // 98, -102, -44, -25, 1, 90, -69, 25, 16, 74, -6, 30, 12, 94, -5, -27, -67, 17, -39, 15, -32, -7, 33, -34, -15, 55, -30, -29, -25, 26, -6, -8
    0xe7d49a62, 0x19bb5a01, 0x1efa4a10, 0xe5fb5e0c, 0xfd911bd, 0xde21f9e0, 0xe3e237f1, 0xf8fa1ae7,
    // 22, -4, -17, -3, -51, -20, 1, 58, -14, 14, -19, -10, 9, -8, 52, -10, -70, -25, -53, -49, -29, -7, -34, 58, -18, -82, -14, 19, -19, 84, 28, 14
    0xfdeffc16, 0x3a01eccd, 0xf6ed0ef2, 0xf634f809, 0xcfcbe7ba, 0x3adef9e3, 0x13f2aeee, 0xe1c54ed,
    // 64, -9, 47, -23, -1, -32, 56, 54, -23, 10, 29, 17, 6, -29, 17, -13, 0, -22, -17, -49, 24, -27, 26, -38, 2, 1, -3, 64, -74, 54, -20, 17
    0xe92ff740, 0x3638e0ff, 0x111d0ae9, 0xf311e306, 0xcfefea00, 0xda1ae518, 0x40fd0102, 0x11ec36b6,
    // -40, 14, 20, -18, 10, 37, -42, -22, 22, 27, -36, -48, -1, -1, 2, -2, 2, 7, -13, -20, 29, 54, 44, 24, 22, -92, -19, -37, 78, -44, 26, 3
    0xee140ed8, 0xead6250a, 0xd0dc1b16, 0xfe02ffff, 0xecf30702, 0x182c361d, 0xdbeda416, 0x31ad44e,
    // -20, 17, 6, -5, 1, 16, -40, -69, 27, 20, 6, 22, 3, -15, -60, 9, 51, 10, -24, -39, -21, 83, 84, 18, 25, 68, -26, -61, -2, -56, 32, 32
    0xfb0611ec, 0xbbd81001, 0x1606141b, 0x9c4f103, 0xd9e80a33, 0x125453eb, 0xc3e64419, 0x2020c8fe,
    // -5, -7, -29, 30, -18, 2, -6, -39, -16, -33, 4, 16, -18, -3, -40, -12, -13, -43, -87, -58, -83, -100, -77, -84, 93, -36, -71, 72, -20, -79, 65, 79
    0x1ee3f9fb, 0xd9fa02ee, 0x1004dff0, 0xf4d8fdee, 0xc6a9d5f3, 0xacb39cad, 0x48b9dc5d, 0x4f41b1ec,
    // 7, 5, 0, 21, 17, -54, -3, 34, -35, 31, -15, 28, -10, 11, 27, -2, 48, 18, 75, 18, 34, -77, -86, -9, 18, -83, 56, 58, -46, 76, -10, 36
    0x15000507, 0x22fdca11, 0x1cf11fdd, 0xfe1b0bf6, 0x124b1230, 0xf7aab322, 0x3a38ad12, 0x24f64cd2,
    // -11, 6, -7, 0, 13, -5, 6, -5, 2, -40, -1, 10, 7, 13, -1, 9, -4, -57, -17, -25, 30, -69, -73, -24, -6, -14, -6, 76, 77, -18, 15, 15
    0xf906f5, 0xfb06fb0d, 0xaffd802, 0x9ff0d07, 0xe7efc7fc, 0xe8b7bb1e, 0x4cfaf2fa, 0xf0fee4d,
    // 24, 11, 32, -47, 10, 45, 15, -60, 28, 13, 25, 22, 9, -23, -49, -8, -5, 13, 20, -31, 10, 39, -29, 2, 59, 31, -20, -58, 94, -90, 34, -59
    0xd1200b18, 0xc40f2d0a, 0x16190d1c, 0xf8cfe909, 0xe1140dfb, 0x2e3270a, 0xc6ec1f3b, 0xc522a65e,
    // 24, -8, 17, 44, 33, 20, -54, 83, 74, -82, -11, -32, 38, -69, 9, 4, 11, 5, -35, -55, 15, -38, 69, -22, 22, 0, -1, -1, 14, 1, 1, 13
    0x2c11f818, 0x53ca1421, 0xe0f5ae4a, 0x409bb26, 0xc9dd050b, 0xea45da0f, 0xffff0016, 0xd01010e,
    // -29, -32, 67, 27, -66, 55, 2, 35, -38, 16, -4, 36, 4, 81, -26, 50, -39, 29, -7, 33, -13, 11, 19, -34, 10, 32, -27, -34, 39, -4, -50, 6
    0x1b43e0e3, 0x230237be, 0x24fc10da, 0x32e65104, 0x21f91dd9, 0xde130bf3, 0xdee5200a, 0x6cefc27,
    // -62, 52, 10, 12, -31, 43, 18, 17, 5, 10, 55, 44, -43, 27, -16, -73, -25, 25, 16, -5, -39, -11, -20, 38, -7, 63, 17, 11, -14, -19, 1, 9
    0xc0a34c2, 0x11122be1, 0x2c370a05, 0xb7f01bd5, 0xfb1019e7, 0x26ecf5d9, 0xb113ff9, 0x901edf2,
    // 15, -13, 2, 26, -15, -13, 10, 5, -32, 26, -25, -24, -22, 7, 24, -28, -14, -34, 25, -76, 21, 29, -64, 52, -13, -33, -37, 53, 65, -22, -37, -30
    0x1a02f30f, 0x50af3f1, 0xe8e71ae0, 0xe41807ea, 0xb419def2, 0x34c01d15, 0x35dbdff3, 0xe2dbea41,
    // -23, 57, 26, 50, -25, 53, 5, 95, 58, 25, 71, 24, -12, -29, 36, 19, 7, 24, 16, 40, 6, -30, 50, 66, -14, -20, -61, 0, -27, -2, -18, 14
    0x321a39e9, 0x5f0535e7, 0x1847193a, 0x1324e3f4, 0x28101807, 0x4232e206, 0xc3ecf2, 0xeeefee5,
    // -4, 41, -15, -22, -13, -15, 1, 9, 5, -3, -8, -39, 29, 10, 16, -12, 7, 35, 15, 41, 11, -1, 25, -33, 47, 4, -31, -22, 80, -57, 50, 8
    0xeaf129fc, 0x901f1f3, 0xd9f8fd05, 0xf4100a1d, 0x290f2307, 0xdf19ff0b, 0xeae1042f, 0x832c750,
    // 37, -5, -15, -14, -12, 47, 22, 39, -83, 27, 5, 23, 2, -114, -55, 26, -8, 8, -10, 23, 4, -18, 27, 0, -6, -15, -48, -15, -15, -10, 2, 7
    0xf2f1fb25, 0x27162ff4, 0x17051bad, 0x1ac98e02, 0x17f608f8, 0x1bee04, 0xf1d0f1fa, 0x702f6f1,
    // -95, -38, 24, -26, 8, 27, -3, 17, 25, 31, -41, -50, 47, 17, 3, 15, -39, 20, 3, 37, 0, -46, 23, 11, 10, -20, -18, 12, -20, 22, -2, -4
    0xe618daa1, 0x11fd1b08, 0xced71f19, 0xf03112f, 0x250314d9, 0xb17d200, 0xceeec0a, 0xfcfe16ec,
    // 28, 42, -14, -10, -12, -1, 43, 26, 80, -12, -90, -7, -68, 1, -41, 1, 2, 51, 6, 53, 12, 3, 62, 8, -26, 11, 1, -25, 20, 3, -54, -9
    0xf6f22a1c, 0x1a2bfff4, 0xf9a6f450, 0x1d701bc, 0x35063302, 0x83e030c, 0xe7010be6, 0xf7ca0314,
    // 0, -106, 13, -55, -69, -31, 74, -51, 97, 59, 21, 34, 55, 49, 46, -18, -26, 21, -62, 40, 26, 7, 30, -64, -8, -21, -36, -37, 0, 19, -55, -15
    0xc90d9600, 0xcd4ae1bb, 0x22153b61, 0xee2e3137, 0x28c215e6, 0xc01e071a, 0xdbdcebf8, 0xf1c91300,
    // 34, 41, 26, 11, 39, 3, -34, 24, 13, -45, -11, 50, 67, 23, -72, 87, -82, 13, -1, -12, -45, -20, -20, 3, 33, -2, -22, -27, 23, -16, 1, 16
    0xb1a2922, 0x18de0327, 0x32f5d30d, 0x57b81743, 0xf4ff0dae, 0x3ececd3, 0xe5eafe21, 0x1001f017,
    // 69, -39, -39, -8, 58, -1, 6, -15, 14, 8, -48, -14, 63, -27, 38, 72, -36, 27, -107, 15, -1, -16, 62, -41, -7, -11, -36, -37, 13, 44, -42, -28
    0xf8d9d945, 0xf106ff3a, 0xf2d0080e, 0x4826e53f, 0xf951bdc, 0xd73ef0ff, 0xdbdcf5f9, 0xe4d62c0d,
    // -54, 42, -46, -10, -40, 8, 101, -39, -13, -17, -19, 80, -1, -113, 88, -31, -41, 6, -60, 8, -18, -7, 28, -22, -21, 42, -47, -54, 29, 7, -38, -24
    0xf6d22aca, 0xd96508d8, 0x50edeff3, 0xe1588fff, 0x8c406d7, 0xea1cf9ee, 0xcad12aeb, 0xe8da071d,
    // 6, 47, 55, 107, 73, -1, 36, 28, -32, -43, -57, -59, 13, 36, 12, -68, -43, -10, -6, 58, -19, 58, 39, 1, -23, 4, -92, 11, -6, 1, 2, -19
    0x6b372f06, 0x1c24ff49, 0xc5c7d5e0, 0xbc0c240d, 0x3afaf6d5, 0x1273aed, 0xba404e9, 0xed0201fa,
    // -9, -52, -5, -53, 36, -16, -28, -79, 22, -24, 40, 11, -16, -59, -89, -13, -71, 27, -22, -11, -34, -19, 21, 13, 47, 51, -26, 5, 13, -55, 54, 1
    0xcbfbccf7, 0xb1e4f024, 0xb28e816, 0xf3a7c5f0, 0xf5ea1bb9, 0xd15edde, 0x5e6332f, 0x136c90d,
    // -37, -7, 94, -2, -66, -54, -47, 15, -58, 9, -9, -38, -57, 1, -69, 0, -6, 27, 33, 59, 10, 55, -29, 19, 12, 15, 54, 24, -19, -21, -22, -11
    0xfe5ef9db, 0xfd1cabe, 0xdaf709c6, 0xbb01c7, 0x3b211bfa, 0x13e3370a, 0x18360f0c, 0xf5eaebed,
    // -61, 16, 62, 12, -40, 26, 12, -48, 39, -66, -31, 78, 13, 23, 54, 37, -45, 16, 37, -1, -24, -19, 24, 36, 29, 39, -43, -52, -19, -49, 0, 40
    0xc3e10c3, 0xd00c1ad8, 0x4ee1be27, 0x2536170d, 0xff2510d3, 0x2418ede8, 0xccd5271d, 0x2800cfed,
    // 34, 11, -14, -73, 6, 51, -107, 58, -61, -21, -44, 79, -95, -26, 32, -12, -37, 6, -39, 31, 8, -28, 12, -41, 14, 8, 1, -33, 0, 17, -6, -28
    0xb7f20b22, 0x3a953306, 0x4fd4ebc3, 0xf420e6a1, 0x1fd906db, 0xd70ce408, 0xdf01080e, 0xe4fa1100,
    // -36, 45, -31, -1, -11, 87, 9, 13, 64, -13, 41, 60, -10, 33, 18, -100, -12, 41, -19, 23, -9, -47, 86, -5, -11, 35, -46, -13, -36, 34, 0, 21
    0xffe12ddc, 0xd0957f5, 0x3c29f340, 0x9c1221f6, 0x17ed29f4, 0xfb56d1f7, 0xf3d223f5, 0x150022dc,
    // 6, 4, -3, 5, -1, -17, 8, 33, -9, -46, -15, -10, 3, 7, 11, 15, -38, -22, 25, -76, 67, -63, -45, -33, 15, -10, 16, 27, -90, 17, -72, 5
    0x5fd0406, 0x2108efff, 0xf6f1d2f7, 0xf0b0703, 0xb419eada, 0xdfd3c143, 0x1b10f60f, 0x5b811a6,
    // -41, -12, 23, 23, 47, 29, -8, 7, -9, -3, -2, -10, -17, 7, 4, 1, 50, 8, -98, 5, -46, -21, 29, -43, 2, 8, -14, 53, -15, -34, 14, -6
    0x1717f4d7, 0x7f81d2f, 0xf6fefdf7, 0x10407ef, 0x59e0832, 0xd51debd2, 0x35f20802, 0xfa0edef1,
    // 33, 27, 20, 34, -3, 61, 37, -33, -31, 22, 16, 1, 10, 66, 16, 66, -19, 4, 30, -29, -22, 6, -32, -5, 8, 66, 22, -5, 2, -3, 11, 6
    0x22141b21, 0xdf253dfd, 0x11016e1, 0x4210420a, 0xe31e04ed, 0xfbe006ea, 0xfb164208, 0x60bfd02,
    // 14, -9, -10, -15, -19, -32, 12, 19, -13, -2, -4, 14, -11, 4, 5, -7, -62, -2, -36, -64, -21, 24, -34, 107, -13, 20, -20, 32, -6, 40, 79, 5
    0xf1f6f70e, 0x130ce0ed, 0xefcfef3, 0xf90504f5, 0xc0dcfec2, 0x6bde18eb, 0x20ec14f3, 0x54f28fa,
    // 10, -31, 16, -23, 6, -24, 29, -24, -18, 27, 5, 4, -13, -37, 63, 67, -50, -12, 36, 26, -35, 47, -43, -47, 18, 14, -20, -24, 11, -27, 7, 2
    0xe910e10a, 0xe81de806, 0x4051bee, 0x433fdbf3, 0x1a24f4ce, 0xd1d52fdd, 0xe8ec0e12, 0x207e50b,
    // 58, 35, -51, -20, 4, 12, -49, -21, -40, -13, 27, -37, -46, 74, 36, 34, 68, 6, -33, 5, 19, -20, 5, 3, -19, -6, -39, -5, -19, -4, -16, 8
    0xeccd233a, 0xebcf0c04, 0xdb1bf3d8, 0x22244ad2, 0x5df0644, 0x305ec13, 0xfbd9faed, 0x8f0fced,
    // -13, 0, -40, -5, -17, 15, 0, 44, 5, -10, -17, -34, 7, 12, 21, 6, -65, -36, 19, -83, -7, 7, -2, -13, -6, 41, 82, -19, -58, 56, -30, 53
    0xfbd800f3, 0x2c000fef, 0xdeeff605, 0x6150c07, 0xad13dcbf, 0xf3fe07f9, 0xed5229fa, 0x35e238c6,
    // 67, 16, 8, 29, -6, -39, 32, -84, -15, -4, 44, -1, 39, -45, -24, 6, -24, -9, 35, -27, -13, -5, 4, -10, -4, 30, -23, 26, -27, -23, 44, 6
    0x1d081043, 0xac20d9fa, 0xff2cfcf1, 0x6e8d327, 0xe523f7e8, 0xf604fbf3, 0x1ae91efc, 0x62ce9e5,
    // 6, -33, 32, -6, 39, -2, 27, 11, -15, 52, -5, 13, -23, 2, 10, 10, 36, -16, -13, 31, 26, 34, 29, 36, -56, 77, 26, -16, 26, 22, 72, 12
    0xfa20df06, 0xb1bfe27, 0xdfb34f1, 0xa0a02e9, 0x1ff3f024, 0x241d221a, 0xf01a4dc8, 0xc48161a,
    // 4, 10, -8, 0, -4, 7, -2, -1, 10, 7, 8, -16, 2, 1, 3, -1, 22, 6, 42, 61, -26, -32, 60, -14, 73, 5, 43, -23, 0, -14, -43, -37
    0xf80a04, 0xfffe07fc, 0xf008070a, 0xff030102, 0x3d2a0616, 0xf23ce0e6, 0xe92b0549, 0xdbd5f200,
    // 28, 46, 81, 50, 2, 23, 21, -59, 7, -104, 51, -32, -85, 18, 83, -5, -88, 19, -20, 59, -44, 20, 19, 2, -3, 23, -27, 7, -20, 0, -3, 9
    0x32512e1c, 0xc5151702, 0xe0339807, 0xfb5312ab, 0x3bec13a8, 0x21314d4, 0x7e517fd, 0x9fd00ec,
    // 20, -20, 46, 23, -16, 66, -10, -6, 19, 18, -31, -13, 13, -46, -6, -22, 14, 27, -1, -66, 22, 12, 24, -21, 46, 17, 92, -19, 20, 19, 15, 16
    0x172eec14, 0xfaf642f0, 0xf3e11213, 0xeafad20d, 0xbeff1b0e, 0xeb180c16, 0xed5c112e, 0x100f1314,
    // -60, 19, 4, -12, 19, 30, 24, -1, 45, 51, 89, -41, 8, 41, 17, 18, -79, 34, -8, 5, 0, -23, -21, 9, 47, 28, 10, 43, 4, -18, -1, -14
    0xf40413c4, 0xff181e13, 0xd759332d, 0x12112908, 0x5f822b1, 0x9ebe900, 0x2b0a1c2f, 0xf2ffee04,
    // 29, 39, 104, -33, -103, 65, 19, -62, -44, 34, -2, 2, -50, 31, 27, 100, -73, 78, -34, 73, -22, -34, 24, -36, -13, 35, -21, 12, 31, 87, -51, -29
    0xdf68271d, 0xc2134199, 0x2fe22d4, 0x641b1fce, 0x49de4eb7, 0xdc18deea, 0xceb23f3, 0xe3cd571f,
    // -30, -1, 31, -7, -4, -15, -84, -16, -50, -31, 58, 7, 98, -7, 63, -8, -12, 17, -26, 25, 33, -21, 48, -36, 0, 5, 53, -55, 39, 41, 3, -33
    0xf91fffe2, 0xf0acf1fc, 0x73ae1ce, 0xf83ff962, 0x19e611f4, 0xdc30eb21, 0xc9350500, 0xdf032927,
    // -38, 10, -20, -78, 30, -12, 54, 38, -31, -7, 34, -17, -15, 39, -25, 22, 30, -23, 17, -63, 63, 21, 66, -51, 40, 4, -64, 8, -40, -54, -16, 34
    0xb2ec0ada, 0x2636f41e, 0xef22f9e1, 0x16e727f1, 0xc111e91e, 0xcd42153f, 0x8c00428, 0x22f0cad8,
    // 32, 30, 9, -17, 14, -36, 17, 3, -8, 13, 17, 8, 14, 0, 1, 8, -65, 5, 3, 84, -42, -58, -31, 74, -4, -1, 54, 32, -47, 93, 35, -47
    0xef091e20, 0x311dc0e, 0x8110df8, 0x801000e, 0x540305bf, 0x4ae1c6d6, 0x2036fffc, 0xd1235dd1,
    // -37, 10, -1, 45, 22, -5, -52, -50, 3, 45, -49, 12, -8, 7, 4, -11, 66, 31, -4, 91, -74, 58, -11, 25, -6, -20, -83, 23, 33, -62, 37, 20
    0x2dff0adb, 0xceccfb16, 0xccf2d03, 0xf50407f8, 0x5bfc1f42, 0x19f53ab6, 0x17adecfa, 0x1425c221,
    // -26, -10, -66, 72, -12, -7, -31, -66, 20, -31, 22, 1, -23, 0, -45, 35, -50, 33, 12, 48, 23, -73, 58, -48, -5, -26, -23, -22, 9, 50, -57, -20
    0x48bef6e6, 0xbee1f9f4, 0x116e114, 0x23d300e9, 0x300c21ce, 0xd03ab717, 0xeae9e6fb, 0xecc73209,
    // 49, -19, -35, 29, 115, 64, 86, -13, -2, -22, 2, 33, 23, 16, 77, -45, -16, 3, 25, 41, 15, -7, 1, -14, -6, 53, 25, -30, -14, -3, 16, -18
    0x1ddded31, 0xf3564073, 0x2102eafe, 0xd34d1017, 0x291903f0, 0xf201f90f, 0xe21935fa, 0xee10fdf2,
    // -32, 36, 24, 38, 27, 24, 92, -44, -52, 9, 1, -28, 65, -41, -61, -78, -82, 3, 39, 38, -44, -17, 0, 45, -24, 11, -92, 11, -17, -20, 44, 26
    0x261824e0, 0xd45c181b, 0xe40109cc, 0xb2c3d741, 0x262703ae, 0x2d00efd4, 0xba40be8, 0x1a2cecef,
    // 59, -76, 5, 52, -61, 26, 41, -68, 46, -23, 82, -30, -2, -37, -40, -49, -43, 35, -79, -25, -3, 75, 31, -45, -16, -4, -16, -22, 24, -14, -50, 24
    0x3405b43b, 0xbc291ac3, 0xe252e92e, 0xcfd8dbfe, 0xe7b123d5, 0xd31f4bfd, 0xeaf0fcf0, 0x18cef218,
    // 15, 14, -1, 31, -15, 0, -30, -49, 19, 23, -15, 18, 9, -23, 1, -2, -15, 13, -47, -18, -2, 10, -38, 90, -61, -40, -82, -2, 82, -52, -17, -41
    0x1fff0e0f, 0xcfe200f1, 0x12f11713, 0xfe01e909, 0xeed10df1, 0x5ada0afe, 0xfeaed8c3, 0xd7efcc52,
};
static const uint embedded_decoder3_ResidualBlock_1_body_pw_expand_bias_dwords[32] = {
    // -0.2615, -0.04633, -0.321, 0.07794, 0.05347, -0.0665, -0.10846, -0.3271, -0.0962, -0.2343, 0.1037, -0.06177, -0.0764, -0.1086, -0.3577, -0.1387
    0xa9eeb42f, 0x2cfdb523, 0xac422ad8, 0xb53caef1, 0xb37fae28, 0xabe82ea3, 0xaef3ace4, 0xb070b5b9,
    // 0.00944, -0.04474, -0.721, -0.4407, -0.1403, 0.05832, -0.10095, -0.0957, -0.1854, -0.2402, 0.139, 0.02245, -0.03607, -0.01817, 0.1569, 0.1261
    0xa9ba20d5, 0xb70db9c5, 0x2b77b07d, 0xae20ae76, 0xb3b0b1ef, 0x25bf3073, 0xa4a7a89e, 0x30093105,
    // 0.04498, -0.0631, -0.03568, -0.2793, -0.1423, 0.00456, -0.03268, 0.000183, -0.1288, -0.01566, -0.0281, -0.1846, -0.1481, -0.155, 0.1293, -0.0647
    0xac0a29c2, 0xb478a891, 0x1cabb08e, 0x9ffa82f, 0xa402b01f, 0xb1e8a732, 0xb0f6b0bd, 0xac243023,
    // -0.1846, -0.2498, -0.538, -0.2537, -0.01255, -0.1174, -0.2627, 0.1581, 0.03015, -0.1009, -0.1615, 0.0572, 0.1809, -0.178, -0.1575, -0.0603
    0xb3feb1e8, 0xb40fb84e, 0xaf83a26d, 0x310fb434, 0xae7527b8, 0x2b52b12b, 0xb1b231ca, 0xabb8b10a,
};
static const uint embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -26, -17, -26, -33, -21, 49, 10, -24, -4, -24, -41, -2, 36, -36, -37, 6, 29, -12, 31, -18, 27, 1, 23, 29, 9, -44, 22, -6, 113, -46, -47, -15
    0xdfe6efe6, 0xe80a31eb, 0xfed7e8fc, 0x6dbdc24, 0xee1ff41d, 0x1d17011b, 0xfa16d409, 0xf1d1d271,
    // -26, 29, 51, 49, -17, -10, 10, 12, -39, 21, 10, 25, 13, 18, 2, 4, 26, -12, 12, 72, -30, -47, 9, 69, -2, 26, -33, -9, -19, -58, -20, 25
    0x31331de6, 0xc0af6ef, 0x190a15d9, 0x402120d, 0x480cf41a, 0x4509d1e2, 0xf7df1afe, 0x19ecc6ed,
    // -9, -26, 30, -28, -30, 64, -100, 34, 12, 47, 88, 5, 42, 57, -7, 40, 4, -55, 13, 4, -23, 22, -28, 34, 63, 44, -15, -13, 59, -79, -2, -22
    0xe41ee6f7, 0x229c40e2, 0x5582f0c, 0x28f9392a, 0x40dc904, 0x22e416e9, 0xf3f12c3f, 0xeafeb13b,
    // -82, 91, -44, -106, 75, -39, -45, -4, -100, -3, -18, -66, -15, 5, 54, 64, -30, -12, -20, 53, -13, 8, 97, 0, 39, -20, -26, 13, 10, 14, 1, -14
    0x96d45bae, 0xfcd3d94b, 0xbeeefd9c, 0x403605f1, 0x35ecf4e2, 0x6108f3, 0xde6ec27, 0xf2010e0a,
    // 25, 63, 14, -1, -60, -80, -37, -27, 52, 23, -49, 5, 77, 88, -11, -36, 47, 17, 5, 5, 11, -4, -7, 63, 30, 1, -26, 28, -105, 64, -87, 17
    0xff0e3f19, 0xe5dbb0c4, 0x5cf1734, 0xdcf5584d, 0x505112f, 0x3ff9fc0b, 0x1ce6011e, 0x11a94097,
    // 13, 35, -77, 17, 14, -14, 46, -24, -13, -41, 16, -38, 14, -39, 3, -19, 66, 27, 21, 10, -92, -7, -7, 48, 71, 53, -25, -9, 17, 92, -81, -4
    0x11b3230d, 0xe82ef20e, 0xda10d7f3, 0xed03d90e, 0xa151b42, 0x30f9f9a4, 0xf7e73547, 0xfcaf5c11,
    // 9, -13, 48, -69, 9, 11, 5, -24, -55, 18, -22, -76, -47, -35, -18, -40, 21, 3, 4, -11, -23, -17, -44, 81, -2, -34, 26, -21, -35, -23, -41, -5
    0xbb30f309, 0xe8050b09, 0xb4ea12c9, 0xd8eeddd1, 0xf5040315, 0x51d4efe9, 0xeb1adefe, 0xfbd7e9dd,
    // -36, -1, 113, 80, -86, 94, -40, 81, -34, 5, -3, -43, 10, 20, -1, -3, -32, 12, 24, -104, -37, 44, 20, 23, 5, 1, 23, -21, 7, 15, -40, 15
    0x5071ffdc, 0x51d85eaa, 0xd5fd05de, 0xfdff140a, 0x98180ce0, 0x17142cdb, 0xeb170105, 0xfd80f07,
    // 10, 14, 16, -28, -5, 22, -32, -10, 20, 4, -61, 22, 20, 15, -3, 0, 18, 0, -16, -6, 2, 38, 16, 17, -39, -20, 6, 5, 21, -13, -66, -45
    0xe4100e0a, 0xf6e016fb, 0x16c30414, 0xfd0f14, 0xfaf00012, 0x11102602, 0x506ecd9, 0xd3bef315,
    // 58, -6, -37, 59, 21, -30, -45, 77, 49, -18, 20, 1, 25, 10, 9, -32, 7, 3, 18, 36, 56, -22, 22, 57, -39, 11, -1, -1, -26, 58, 2, 11
    0x3bdbfa3a, 0x4dd3e215, 0x114ee31, 0xe0090a19, 0x24120307, 0x3916ea38, 0xffff0bd9, 0xb023ae6,
    // -73, -11, 31, -15, -23, -16, 19, -17, 12, -14, -51, -126, -41, 7, 36, -26, 72, 4, -5, -15, -14, 53, -10, 22, -12, 15, 22, 29, -23, 28, 44, -40
    0xf11ff5b7, 0xef13f0e9, 0x82cdf20c, 0xe62407d7, 0xf1fb0448, 0x16f635f2, 0x1d160ff4, 0xd82c1ce9,
    // 87, -23, -7, 37, 13, 14, 53, 88, 20, -56, 18, -59, 4, 24, -26, -30, 42, -6, -11, 4, -41, 21, 31, -55, 34, 23, -7, -31, 24, 39, -11, -34
    0x25f9e957, 0x58350e0d, 0xc512c814, 0xe2e61804, 0x4f5fa2a, 0xc91f15d7, 0xe1f91722, 0xdef52718,
    // -7, -3, -21, -14, -29, 27, -9, 8, -12, -13, 30, -45, -75, 33, 10, -13, 8, 1, -13, -4, -30, 1, 30, -6, -17, 29, -15, 21, 19, 1, 16, -15
    0xf2ebfdf9, 0x8f71be3, 0xd31ef3f4, 0xf30a21b5, 0xfcf30108, 0xfa1e01e2, 0x15f11def, 0xf1100113,
    // -18, -1, 22, -5, 63, -7, 53, 27, 24, -12, -8, 3, 12, 34, 19, 12, -8, 4, -1, 10, 89, 23, 14, -8, -52, 5, 10, -12, -31, -30, 32, -33
    0xfb16ffee, 0x1b35f93f, 0x3f8f418, 0xc13220c, 0xaff04f8, 0xf80e1759, 0xf40a05cc, 0xdf20e2e1,
    // 40, 20, 64, -26, -34, 53, 0, 4, 1, -25, 4, 6, 75, 64, -3, -8, 6, -14, 10, -7, -10, -7, -19, -19, 10, 21, -35, 2, 91, -95, 31, -106
    0xe6401428, 0x40035de, 0x604e701, 0xf8fd404b, 0xf90af206, 0xededf9f6, 0x2dd150a, 0x961fa15b,
    // 30, -1, -32, -30, 15, 13, -48, 107, -10, 8, 1, -33, -10, -17, 2, -3, 6, 5, 9, 16, -86, 28, 19, -11, 77, 13, 6, -1, 21, 50, -78, -14
    0xe2e0ff1e, 0x6bd00d0f, 0xdf0108f6, 0xfd02eff6, 0x10090506, 0xf5131caa, 0xff060d4d, 0xf2b23215,
    // -5, 13, 8, 5, 25, -23, -18, -25, -22, -15, -26, 20, -19, 39, 15, -28, -22, 6, -12, 8, -4, 27, -26, -11, 40, -18, -66, 25, -25, 25, 91, 67
    0x5080dfb, 0xe7eee919, 0x14e6f1ea, 0xe40f27ed, 0x8f406ea, 0xf5e61bfc, 0x19beee28, 0x435b19e7,
    // -36, 107, -75, 28, 73, -24, 51, -86, -34, -29, 16, 7, 16, -66, 51, -21, -41, 3, -1, 51, -10, -44, 18, -98, 32, 43, -23, -35, -10, 55, -1, -11
    0x1cb56bdc, 0xaa33e849, 0x710e3de, 0xeb33be10, 0x33ff03d7, 0x9e12d4f6, 0xdde92b20, 0xf5ff37f6,
    // -21, 28, -31, 23, 66, 43, -2, -27, -24, 1, 54, -5, 16, -16, -14, 6, 25, 4, 29, 31, 7, 43, -6, -31, -48, 21, 45, 7, -26, -35, 16, 17
    0x17e11ceb, 0xe5fe2b42, 0xfb3601e8, 0x6f2f010, 0x1f1d0419, 0xe1fa2b07, 0x72d15d0, 0x1110dde6,
    // 49, -87, 22, -82, 37, -14, 8, -42, 83, -11, 19, -22, 1, 39, -74, -28, 21, -33, -19, -76, 22, 88, 3, -2, 3, 19, -40, -19, -11, -9, -26, -48
    0xae16a931, 0xd608f225, 0xea13f553, 0xe4b62701, 0xb4eddf15, 0xfe035816, 0xedd81303, 0xd0e6f7f5,
    // -35, -2, -24, 9, -63, 1, 21, 22, -128, -18, 4, -26, 54, -16, 84, 74, -29, -85, 7, -27, -20, 54, 14, -26, -39, -10, 13, 76, 37, -49, -6, 12
    0x9e8fedd, 0x161501c1, 0xe604ee80, 0x4a54f036, 0xe507abe3, 0xe60e36ec, 0x4c0df6d9, 0xcfacf25,
    // 21, -16, 5, 68, 65, 22, -8, -8, 22, -55, -25, 9, 37, 35, 7, 83, -83, -23, 13, 7, -41, -7, 3, 3, 20, 21, -53, -73, -27, 0, -10, -47
    0x4405f015, 0xf8f81641, 0x9e7c916, 0x53072325, 0x70de9ad, 0x303f9d7, 0xb7cb1514, 0xd1f600e5,
    // -49, 21, 9, 20, -18, -79, 119, 2, 21, -75, 11, 7, -64, 9, -11, -26, 45, -24, 0, 1, -22, 12, 82, -29, 73, 33, -95, 9, 78, -41, 46, -89
    0x140915cf, 0x277b1ee, 0x70bb515, 0xe6f509c0, 0x100e82d, 0xe3520cea, 0x9a12149, 0xa72ed74e,
    // 59, 69, -20, -42, -23, 30, 28, 107, -59, 21, -2, 65, -13, 44, -8, -8, 52, -21, -4, 29, -28, -84, -104, -10, -30, 3, 12, -9, -18, 29, 34, -25
    0xd6ec453b, 0x6b1c1ee9, 0x41fe15c5, 0xf8f82cf3, 0x1dfceb34, 0xf698ace4, 0xf70c03e2, 0xe7221dee,
    // -7, -20, -63, -21, 39, -2, 87, 24, 5, -82, 37, -71, 44, 102, -20, -6, 48, -33, -12, -10, 14, 43, 39, -35, 31, 22, -89, -13, -48, 78, -70, 53
    0xebc1ecf9, 0x1857fe27, 0xb925ae05, 0xfaec662c, 0xf6f4df30, 0xdd272b0e, 0xf3a7161f, 0x35ba4ed0,
    // -35, 8, -70, 3, 8, 0, 79, -74, -42, -30, -1, 26, 13, -20, 16, 30, -32, 5, -13, 58, -10, 29, -66, 50, 20, -19, -46, 16, 26, -25, -16, 8
    0x3ba08dd, 0xb64f0008, 0x1affe2d6, 0x1e10ec0d, 0x3af305e0, 0x32be1df6, 0x10d2ed14, 0x8f0e71a,
    // 0, 8, 35, 40, 25, 43, -4, -24, -26, 0, 30, -2, 12, -23, -17, -22, -24, 20, -71, 38, -40, -1, 10, 21, -42, -23, 6, 3, 36, 16, -24, -25
    0x28230800, 0xe8fc2b19, 0xfe1e00e6, 0xeaefe90c, 0x26b914e8, 0x150affd8, 0x306e9d6, 0xe7e81024,
    // 11, -9, 29, 17, -22, 13, -9, 3, 11, -6, 20, -36, -6, -19, -40, -30, 5, 12, -27, 7, 8, 2, -13, 27, -7, 15, -24, 20, 5, -30, -13, 36
    0x111df70b, 0x3f70dea, 0xdc14fa0b, 0xe2d8edfa, 0x7e50c05, 0x1bf30208, 0x14e80ff9, 0x24f3e205,
    // -18, -1, 29, -42, 12, -7, 23, -33, -81, -12, -5, 47, 27, -27, 0, 45, -37, 31, -11, 5, 3, -22, -21, 7, 23, -4, -6, -5, 68, -35, -16, -22
    0xd61dffee, 0xdf17f90c, 0x2ffbf4af, 0x2d00e51b, 0x5f51fdb, 0x7ebea03, 0xfbfafc17, 0xeaf0dd44,
    // -23, 21, 44, 38, 23, 15, 2, -7, -36, -17, -12, 5, 5, -26, 12, 20, -29, 22, 20, -31, -32, 19, -1, 26, 1, -27, 13, 5, 40, -27, -17, 35
    0x262c15e9, 0xf9020f17, 0x5f4efdc, 0x140ce605, 0xe11416e3, 0x1aff13e0, 0x50de501, 0x23efe528,
    // -52, -8, 18, -16, 75, 39, 48, -21, -24, -2, -13, 54, 7, 71, -47, 2, -53, 4, 11, 15, 15, -33, 1, -51, -20, -35, 4, -47, 46, -50, 70, -48
    0xf012f8cc, 0xeb30274b, 0x36f3fee8, 0x2d14707, 0xf0b04cb, 0xcd01df0f, 0xd104ddec, 0xd046ce2e,
    // -4, 6, -80, 84, -54, 21, -27, 2, 22, 59, 4, 21, 4, -18, -1, -7, -58, 10, 28, 67, -33, 27, 0, -80, -2, -41, 1, 37, -4, 52, -11, 33
    0x54b006fc, 0x2e515ca, 0x15043b16, 0xf9ffee04, 0x431c0ac6, 0xb0001bdf, 0x2501d7fe, 0x21f534fc,
    // 9, 25, 62, 2, 10, 19, -20, -92, 80, 9, 113, 21, -34, 15, -7, -3, 9, -51, -1, 25, 4, 93, 15, -21, 41, 58, -4, 60, -14, 23, 3, 29
    0x23e1909, 0xa4ec130a, 0x15710950, 0xfdf90fde, 0x19ffcd09, 0xeb0f5d04, 0x3cfc3a29, 0x1d0317f2,
    // 54, -4, 7, -62, 89, -73, 32, 0, 5, 4, -2, 32, 99, 33, -7, 40, 49, 30, -9, 13, -32, 5, -2, 22, -2, 81, -91, -51, -2, 41, -17, 20
    0xc207fc36, 0x20b759, 0x20fe0405, 0x28f92163, 0xdf71e31, 0x16fe05e0, 0xcda551fe, 0x14ef29fe,
    // 50, 13, 45, 37, 28, -16, -17, -50, -10, 19, -5, 8, -27, -25, 33, 11, 5, -19, -22, -36, 77, 22, 17, 9, 29, 38, -8, -40, 12, -20, 13, 3
    0x252d0d32, 0xceeff01c, 0x8fb13f6, 0xb21e7e5, 0xdceaed05, 0x911164d, 0xd8f8261d, 0x30dec0c,
    // -11, -21, -2, -20, -13, 33, 6, 5, -17, 23, 95, -5, 2, 11, -7, 20, 22, -1, -62, -2, -62, -19, -30, 11, 40, 7, -30, -10, -2, 5, -19, 28
    0xecfeebf5, 0x50621f3, 0xfb5f17ef, 0x14f90b02, 0xfec2ff16, 0xbe2edc2, 0xf6e20728, 0x1ced05fe,
    // -46, -54, -11, 4, 70, -28, 30, 1, -39, -43, 43, -38, 46, -36, -29, 35, -43, -19, 24, -17, 26, 14, 7, -21, -55, -71, -9, -50, -12, -31, -9, 24
    0x4f5cad2, 0x11ee446, 0xda2bd5d9, 0x23e3dc2e, 0xef18edd5, 0xeb070e1a, 0xcef7b9c9, 0x18f7e1f4,
    // -8, 33, -5, 14, -24, -11, -31, -15, 28, -9, 69, -27, 32, -45, 20, 21, 20, 58, -24, -23, -17, -3, 10, 9, -22, -30, 16, 18, -69, 1, 5, 59
    0xefb21f8, 0xf1e1f5e8, 0xe545f71c, 0x1514d320, 0xe9e83a14, 0x90afdef, 0x1210e2ea, 0x3b0501bb,
    // 20, -48, -1, 3, -18, -37, -23, 2, 52, -22, 43, 11, -25, -26, 1, 1, 65, 74, -16, -30, -76, 13, 40, -26, -29, -2, 3, -31, -19, -10, 11, 9
    0x3ffd014, 0x2e9dbee, 0xb2bea34, 0x101e6e7, 0xe2f04a41, 0xe6280db4, 0xe103fee3, 0x90bf6ed,
    // -5, -12, -12, -58, -8, 41, -18, -14, -41, 35, 11, -3, 30, -32, -8, 6, -16, -77, -31, 2, -16, -33, -4, 8, 10, -25, -63, -27, 36, -37, -42, 39
    0xc6f4f4fb, 0xf2ee29f8, 0xfd0b23d7, 0x6f8e01e, 0x2e1b3f0, 0x8fcdff0, 0xe5c1e70a, 0x27d6db24,
    // -21, -49, 13, -43, -84, -24, -7, 103, -98, -13, 10, -7, 20, 7, 50, 30, -25, 26, -19, 15, -31, -25, -9, 9, -48, -49, 5, -9, 2, -37, -9, -24
    0xd50dcfeb, 0x67f9e8ac, 0xf90af39e, 0x1e320714, 0xfed1ae7, 0x9f7e7e1, 0xf705cfd0, 0xe8f7db02,
    // 25, 11, 2, 17, 69, 7, 2, -20, 7, -46, 34, -26, 24, -33, -16, -38, -20, -45, 48, 13, 2, -15, -3, 9, -4, 31, 9, -31, 22, 35, -18, -90
    0x11020b19, 0xec020745, 0xe622d207, 0xdaf0df18, 0xd30d3ec, 0x9fdf102, 0xe1091ffc, 0xa6ee2316,
    // -35, 7, -9, -46, 1, 59, -23, -71, -23, -22, -8, -2, -21, 14, -1, -1, -29, -36, 36, 28, 8, -31, 36, -18, -35, -59, 2, 47, -27, -10, 28, -5
    0xd2f707dd, 0xb9e93b01, 0xfef8eae9, 0xffff0eeb, 0x1c24dce3, 0xee24e108, 0x2f02c5dd, 0xfb1cf6e5,
    // -8, 1, -5, 11, -3, -37, 33, 28, 0, 41, -1, -32, -18, -38, 34, 52, -6, -11, 72, 1, -4, -34, 7, -3, -35, 0, 40, 30, -39, -52, 4, 35
    0xbfb01f8, 0x1c21dbfd, 0xe0ff2900, 0x3422daee, 0x148f5fa, 0xfd07defc, 0x1e2800dd, 0x2304ccd9,
    // -27, -105, 11, 1, -8, 26, 7, -11, -19, 7, -10, 4, -9, 36, 8, 7, -18, -65, 54, 45, 63, 60, -11, -11, -14, 76, -7, 9, 12, -20, -19, -3
    0x10b97e5, 0xf5071af8, 0x4f607ed, 0x70824f7, 0x2d36bfee, 0xf5f53c3f, 0x9f94cf2, 0xfdedec0c,
    // 0, 5, 18, 17, -3, 13, -11, 0, -1, 10, -9, 32, 18, 43, -14, 15, -21, -40, -25, 19, 26, 11, 9, 7, -6, 13, -30, -3, 63, 41, -11, 55
    0x11120500, 0xf50dfd, 0x20f70aff, 0xff22b12, 0x13e7d8eb, 0x7090b1a, 0xfde20dfa, 0x37f5293f,
    // -62, -69, -7, 3, 4, -65, -16, 44, 0, -23, 8, 6, 31, 15, 37, -6, 12, -14, -23, -33, 13, -37, 34, -15, 2, 61, -16, 69, -13, 15, 17, 14
    0x3f9bbc2, 0x2cf0bf04, 0x608e900, 0xfa250f1f, 0xdfe9f20c, 0xf122db0d, 0x45f03d02, 0xe110ff3,
    // 41, -29, 25, 47, 11, -23, -23, 20, -36, -10, 9, 10, -8, -55, 14, 1, -24, -49, -5, 1, 22, -40, -1, 0, 8, -13, 10, 42, 22, 56, 37, 43
    0x2f19e329, 0x14e9e90b, 0xa09f6dc, 0x10ec9f8, 0x1fbcfe8, 0xffd816, 0x2a0af308, 0x2b253816,
    // -19, -21, 2, -34, -46, 17, -1, -23, 32, -14, 16, 11, -5, 12, -31, 18, -7, -52, -100, -16, -21, -42, 1, 2, -28, -28, -1, -34, 17, -9, 4, 8
    0xde02ebed, 0xe9ff11d2, 0xb10f220, 0x12e10cfb, 0xf09cccf9, 0x201d6eb, 0xdeffe4e4, 0x804f711,
    // -17, -9, 10, 17, -33, -30, -15, 0, 5, 15, -61, -13, 2, -10, 0, 8, -27, 3, -66, 14, 5, 19, 8, -13, 6, -14, 43, 34, -19, -6, 10, 67
    0x110af7ef, 0xf1e2df, 0xf3c30f05, 0x800f602, 0xebe03e5, 0xf3081305, 0x222bf206, 0x430afaed,
    // 38, -110, 63, -26, -5, -1, 11, -70, 31, 1, 7, 16, 6, -49, 7, -14, 92, -29, -19, 86, -47, 57, 1, 19, 14, -26, -5, 26, 5, 28, -7, -9
    0xe63f9226, 0xba0bfffb, 0x1007011f, 0xf207cf06, 0x56ede35c, 0x130139d1, 0x1afbe60e, 0xf7f91c05,
    // 14, 40, 4, -47, -17, -21, 20, 14, 9, -21, -97, -6, -17, -15, -6, -12, 18, -43, 34, -23, -12, -1, -7, 26, 27, 12, -56, 24, -115, -15, -30, 34
    0xd104280e, 0xe14ebef, 0xfa9feb09, 0xf4faf1ef, 0xe922d512, 0x1af9fff4, 0x18c80c1b, 0x22e2f18d,
    // 34, -48, 35, -29, 28, 50, 11, 52, 53, 16, 42, 8, 47, -15, 22, 10, -13, 26, -12, -6, 10, -9, 12, 11, 25, 67, 47, 14, 48, 32, 15, 12
    0xe323d022, 0x340b321c, 0x82a1035, 0xa16f12f, 0xfaf41af3, 0xb0cf70a, 0xe2f4319, 0xc0f2030,
    // -9, 30, 11, 14, -13, -68, 16, 13, 16, 44, 7, -34, 46, -37, 15, -46, 17, -27, -46, 15, -87, 12, -22, 6, 59, -62, 53, 67, -94, 2, -4, 86
    0xe0b1ef7, 0xd10bcf3, 0xde072c10, 0xd20fdb2e, 0xfd2e511, 0x6ea0ca9, 0x4335c23b, 0x56fc02a2,
    // -2, 5, -7, 13, 21, -1, 21, 19, -13, -19, -33, 16, 46, -50, 24, -17, -40, 3, 3, 7, -17, -8, -23, 25, 29, -15, 0, 41, 57, -5, 2, 38
    0xdf905fe, 0x1315ff15, 0x10dfedf3, 0xef18ce2e, 0x70303d8, 0x19e9f8ef, 0x2900f11d, 0x2602fb39,
    // -2, 50, -32, 46, -22, 12, -26, -23, -3, -39, -84, 49, -19, 22, -18, -14, -26, -15, -63, 42, -9, -58, 22, -4, -3, 15, -24, -15, -47, 28, 44, -5
    0x2ee032fe, 0xe9e60cea, 0x31acd9fd, 0xf2ee16ed, 0x2ac1f1e6, 0xfc16c6f7, 0xf1e80ffd, 0xfb2c1cd1,
    // 11, -11, 1, 81, 51, 42, -20, -49, 5, 20, -42, -31, -16, -12, -27, 35, -48, -44, 33, -11, 4, -9, -1, 9, 24, -7, 6, -17, 7, -3, -18, -17
    0x5101f50b, 0xcfec2a33, 0xe1d61405, 0x23e5f4f0, 0xf521d4d0, 0x9fff704, 0xef06f918, 0xefeefd07,
    // -22, -9, 5, 6, -54, 65, -32, 16, -15, 2, -20, -23, 4, 25, 16, 37, -15, 40, 18, 5, -10, 22, -22, 10, -11, 10, 21, -1, 6, -12, -26, 47
    0x605f7ea, 0x10e041ca, 0xe9ec02f1, 0x25101904, 0x51228f1, 0xaea16f6, 0xff150af5, 0x2fe6f406,
    // -34, -23, -47, 40, 9, -6, 1, 54, -32, 6, -37, -28, 57, -7, -38, 15, 0, 25, 7, -49, -37, 0, -13, -18, -21, -50, 3, -49, -3, -13, -7, 26
    0x28d1e9de, 0x3601fa09, 0xe4db06e0, 0xfdaf939, 0xcf071900, 0xeef300db, 0xcf03ceeb, 0x1af9f3fd,
    // -8, -10, 2, -12, -23, 28, 0, -19, 6, 22, 55, 33, -58, 10, -21, -19, -9, -12, 15, 28, -21, 30, -29, -17, 12, -30, 26, -43, 22, 0, 18, -5
    0xf402f6f8, 0xed001ce9, 0x21371606, 0xedeb0ac6, 0x1c0ff4f7, 0xefe31eeb, 0xd51ae20c, 0xfb120016,
    // -15, 20, -12, -3, 105, 85, 20, -45, 103, -18, 11, 25, 5, 3, -80, 38, -25, -52, 4, -5, -36, -3, 2, 2, -21, -9, 7, -80, 47, -22, 10, 13
    0xfdf414f1, 0xd3145569, 0x190bee67, 0x26b00305, 0xfb04cce7, 0x202fddc, 0xb007f7eb, 0xd0aea2f,
    // -33, 7, 9, 8, -44, -1, -12, -13, -13, 90, -17, 5, -107, 21, 9, 38, -17, -1, 59, 32, -37, 24, 2, -7, 8, -93, 56, 48, 1, 12, 1, 63
    0x80907df, 0xf3f4ffd4, 0x5ef5af3, 0x26091595, 0x203bffef, 0xf90218db, 0x3038a308, 0x3f010c01,
    // 20, 21, 22, -15, 9, 0, 0, -42, 8, -8, 24, 29, -29, 8, 10, 23, 71, 1, -68, -6, -57, 72, 12, -1, -9, -29, 4, 21, -7, -3, 5, -3
    0xf1161514, 0xd6000009, 0x1d18f808, 0x170a08e3, 0xfabc0147, 0xff0c48c7, 0x1504e3f7, 0xfd05fdf9,
    // -6, 5, 21, -42, 55, 2, 23, 10, -21, 30, 19, 7, -34, 24, -5, -32, 39, -37, -21, -7, -10, -23, -4, 3, 26, 30, -56, -8, 28, -1, 6, -5
    0xd61505fa, 0xa170237, 0x7131eeb, 0xe0fb18de, 0xf9ebdb27, 0x3fce9f6, 0xf8c81e1a, 0xfb06ff1c,
};
static const uint embedded_decoder3_ResidualBlock_1_body_pw_contract_bias_dwords[16] = {
    // 0.00011754, -0.0001874, 4.37e-05, 0.0001457, 0.0001504, -2.38e-05, 0.0001296, 0.0002427, -0.0001544, -0.0, -1.025e-05, -0.0002161, 0.000181, -6.76e-05, 8.42e-05, 0.0002116
    0x8a2407b4, 0x8c602dd, 0x818f08ee, 0xbf4083f, 0x8000890f, 0x8b1580ac, 0x846e09ee, 0xaef0585,
    // -9.58e-05, -0.0001367, 8.22e-05, 3.08e-05, 3.12e-05, -0.0001097, -0.0004036, -0.0003455, -0.0001594, -2.65e-05, -0.00011504, 0.0002123, -3.02e-05, 0.0002465, -0.0001839, 7.004e-05
    0x887b8647, 0x2050563, 0x8730020b, 0x8da98e9d, 0x81bd8939, 0xaf5878a, 0xc0a81fb, 0x4978a07,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass10(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped = {
        uint3(960, 540, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 32), // threadGroupSliceSize
        uint3(960, 540, 32), // storageSize
        uint3(32, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        66355200, // threadGroupStorageByteOffset
        storage_FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped };
    
    const ConstantBufferStorage<576> storage_embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005666592624038458, storage_embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = { embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004083200823515654, storage_embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_decoder3_ResidualBlock_1_body_pw_expand_bias = { embedded_decoder3_ResidualBlock_1_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_decoder3_ResidualBlock_1_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_1_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004087317734956741, storage_embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder3_ResidualBlock_1_body_pw_contract_bias = { embedded_decoder3_ResidualBlock_1_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder3_ResidualBlock_1_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_1_body_pw_contract_bias };
    
    // /decoder3/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_20 = uint3(960, 540, 32);
    const int3 groupStart_slice_20 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 32);
    const uint3 groupSize_slice_20 = uint3(64, 1, 32);
    const uint3 storageSize_slice_20 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_20 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_20 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_20 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_20 = dot(groupStart_slice_20, tensorByteStrides_slice_20);
    const RWBufferStorage storage_slice_20 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_20 = { logicalSize_slice_20, groupStart_slice_20, groupSize_slice_20, storageSize_slice_20, tensorByteStrides_slice_20, paddingBegin_slice_20, paddingEnd_slice_20, threadGroupByteOffsetInTensor_slice_20 + 33177600, storage_slice_20 };
    // Fusedquantized_/decoder3/ResidualBlock_1/residual_func/Concat_quantized_/decoder3/ResidualBlock_1/body/spatial_mixing/partial_conv/Conv_quantized_/decoder3/ResidualBlock_1/body/spatial_mixing/Concat_quantized_/decoder3/ResidualBlock_1/body/pw_expand/Conv_/decoder3/ResidualBlock_1/body/pw_expand_act/Relu_quantized_/decoder3/ResidualBlock_1/body/pw_contract/Conv_/decoder3/ResidualBlock_1/Add (32, 540, 960), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,) -> (32, 540, 960)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FasterNetBlock<32, 1>(0.022420380264520645, 0.03330652415752411, 0.026284748688340187, 0.020747436210513115, 0.030383991077542305, FusedFusedquantized__bottleneck_ResidualBlock_2_residual_func_Concat_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_partial_conv_Conv_quantized__bottleneck_ResidualBlock_2_body_spatial_mixing_Concat_quantized__bottleneck_ResidualBlock_2_body_pw_expand_Conv__bottleneck_ResidualBlock_2_body_pw_expand_act_Relu_quantized__bottleneck_ResidualBlock_2_body_pw_contract_Conv__bottleneck_ResidualBlock_2_Add_Fusedquantized__bottleneck_UpscaleConvTranspose2x2_upscale_conv_ConvTranspose_Fusedquantized__decoder3_skip_pop_0_Add_QuantizedOutput_output_grouped, embedded__decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_1_body_spatial_mixing_partial_conv_bias, embedded__decoder3_ResidualBlock_1_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_1_body_pw_expand_bias, embedded__decoder3_ResidualBlock_1_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_1_body_pw_contract_bias, slice_20, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_10
#ifdef MLSR_PASS_10_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass10_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // /decoder3/ResidualBlock_2/residual_func/Split_output_grouped
    const uint3 logicalSize_slice_21 = uint3(960, 540, 32);
    const int3 groupStart_slice_21 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 32);
    const uint3 groupSize_slice_21 = uint3(32, 1, 32);
    const uint3 storageSize_slice_21 = uint3(960, 540, 32);
    const uint3 tensorByteStrides_slice_21 = uint3(32, 30720, 1);
    const uint3 paddingBegin_slice_21 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_21 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_21 = dot(groupStart_slice_21, tensorByteStrides_slice_21);
    const RWBufferStorage storage_slice_21 = { ScratchBuffer };
    const Tensor3i8_NHWC<RWBufferStorage> slice_21 = { logicalSize_slice_21, groupStart_slice_21, groupSize_slice_21, storageSize_slice_21, tensorByteStrides_slice_21, paddingBegin_slice_21, paddingEnd_slice_21, threadGroupByteOffsetInTensor_slice_21 + 33177600, storage_slice_21 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, Tensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_21, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_10_POST


#ifdef MLSR_PASS_11
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/FNB_CT2D_ADD.hlsli"

static const uint embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 0, -2, 9, 10, 8, -3, 4, -7, 3, -22, 7, -8, -6, -8, -3, -7, -3, 12, 17, -25, -4, -7, -12, 10, -8, -33, -30, -10, 19, -7, -35, 50
    0xa09fe00, 0xf904fd08, 0xf807ea03, 0xf9fdf8fa, 0xe7110cfd, 0xaf4f9fc, 0xf6e2dff8, 0x32ddf913,
    // -18, 3, -11, -3, 21, 5, 7, 7, -3, 10, 2, -4, 16, 0, -7, -14, 11, 0, 20, 6, -23, -7, 15, -17, -8, 0, -8, -20, -33, 12, 12, -5
    0xfdf503ee, 0x7070515, 0xfc020afd, 0xf2f90010, 0x614000b, 0xef0ff9e9, 0xecf800f8, 0xfb0c0cdf,
    // -2, 6, -87, -24, 44, 19, -71, 55, 30, 29, 25, -15, 58, -11, -35, -80, 19, -32, -28, -10, -10, -19, 19, -15, -7, -13, -23, 44, 6, 15, 21, 25
    0xe8a906fe, 0x37b9132c, 0xf1191d1e, 0xb0ddf53a, 0xf6e4e013, 0xf113edf6, 0x2ce9f3f9, 0x19150f06,
    // -2, -18, -21, 2, 2, -11, 12, 17, 7, -2, -14, 6, 8, -11, 1, -14, 30, 42, 36, -15, -4, -7, 19, 4, 31, -15, 30, 42, 17, -1, -8, -3
    0x2ebeefe, 0x110cf502, 0x6f2fe07, 0xf201f508, 0xf1242a1e, 0x413f9fc, 0x2a1ef11f, 0xfdf8ff11,
    // 9, 4, 18, 15, -10, -1, -13, -15, 17, -1, 14, -23, -22, -4, -3, -21, -8, 14, -7, -27, -13, -26, -18, 6, -13, 33, -1, 13, -11, 5, -2, -2
    0xf120409, 0xf1f3fff6, 0xe90eff11, 0xebfdfcea, 0xe5f90ef8, 0x6eee6f3, 0xdff21f3, 0xfefe05f5,
    // -12, -2, 4, -2, 3, -16, -11, -35, 13, -2, 21, 15, -36, -13, -8, 9, 15, -18, 11, 30, 15, -4, 5, 7, -5, -19, 47, -14, -9, -4, -2, 20
    0xfe04fef4, 0xddf5f003, 0xf15fe0d, 0x9f8f3dc, 0x1e0bee0f, 0x705fc0f, 0xf22fedfb, 0x14fefcf7,
    // -18, -6, -5, 18, 1, -1, -30, -14, 15, -2, 36, 27, 2, -23, -26, -14, -64, 18, -4, -9, 39, -24, -36, -36, 14, 25, -10, 63, -42, -14, 3, -27
    0x12fbfaee, 0xf2e2ff01, 0x1b24fe0f, 0xf2e6e902, 0xf7fc12c0, 0xdcdce827, 0x3ff6190e, 0xe503f2d6,
    // -3, 16, 12, 14, -3, -26, -20, 2, -12, 7, 56, -12, -20, 6, -2, -12, 4, -28, 11, 16, 7, -4, -20, 8, 19, -6, 37, -1, 9, -4, 4, 17
    0xe0c10fd, 0x2ece6fd, 0xf43807f4, 0xf4fe06ec, 0x100be404, 0x8ecfc07, 0xff25fa13, 0x1104fc09,
    // 2, 18, 1, -28, 4, -33, -15, 6, -4, 3, 23, 14, -8, 0, 15, -21, -14, 34, -4, -25, -8, -10, -12, 3, -11, 17, 2, -5, 2, 3, -2, -15
    0xe4011202, 0x6f1df04, 0xe1703fc, 0xeb0f00f8, 0xe7fc22f2, 0x3f4f6f8, 0xfb0211f5, 0xf1fe0302,
    // 31, -16, 15, 1, 16, -32, 3, -1, -30, -6, 24, 3, 23, 12, 12, -9, 8, -2, -9, -1, 4, -5, 2, -1, -61, 28, 34, -11, 1, -16, 6, -45
    0x10ff01f, 0xff03e010, 0x318fae2, 0xf70c0c17, 0xfff7fe08, 0xff02fb04, 0xf5221cc3, 0xd306f001,
    // 3, 24, -8, -8, -3, 2, 9, 6, -22, 30, -18, -3, -13, -44, 5, -8, 12, -18, 9, -6, 1, -25, 3, -10, -30, -3, 11, 19, 36, -22, -7, -32
    0xf8f81803, 0x60902fd, 0xfdee1eea, 0xf805d4f3, 0xfa09ee0c, 0xf603e701, 0x130bfde2, 0xe0f9ea24,
    // 9, -38, 8, 23, 32, 15, -1, 8, 32, -14, 16, 18, -14, 38, -3, 25, -9, 37, -26, 4, -13, 21, 8, -3, 13, 11, 20, -13, -31, -40, -11, 30
    0x1708da09, 0x8ff0f20, 0x1210f220, 0x19fd26f2, 0x4e625f7, 0xfd0815f3, 0xf3140b0d, 0x1ef5d8e1,
    // 11, 15, 3, -2, -13, -6, 7, -3, -9, 14, -18, 7, 11, -48, 8, -19, -2, 30, -7, -6, -26, 11, 0, 0, 43, -6, -3, 12, 6, -26, -2, 4
    0xfe030f0b, 0xfd07faf3, 0x7ee0ef7, 0xed08d00b, 0xfaf91efe, 0xbe6, 0xcfdfa2b, 0x4fee606,
    // 0, 8, -17, -10, -15, 3, 2, -1, 59, -4, 6, -2, -30, -13, 6, 18, -3, -10, -9, 11, -6, -6, 4, -6, -15, 7, 18, 9, 5, -4, -6, -16
    0xf6ef0800, 0xff0203f1, 0xfe06fc3b, 0x1206f3e2, 0xbf7f6fd, 0xfa04fafa, 0x91207f1, 0xf0fafc05,
    // 13, 22, 10, -23, -21, -31, -30, 38, 2, -30, -44, -11, 31, 35, -3, 62, -1, 1, -21, -4, -10, 2, -4, -13, -3, 10, -9, -6, 5, 2, -7, -13
    0xe90a160d, 0x26e2e1eb, 0xf5d4e202, 0x3efd231f, 0xfceb01ff, 0xf3fc02f6, 0xfaf70afd, 0xf3f90205,
    // -1, -24, 16, -6, 6, 18, 33, -26, -23, -2, 32, 39, 25, -20, -4, -12, 29, -9, 53, -1, -21, 12, -11, -17, -6, 30, -26, 29, -44, 5, -33, 2
    0xfa10e8ff, 0xe6211206, 0x2720fee9, 0xf4fcec19, 0xff35f71d, 0xeff50ceb, 0x1de61efa, 0x2df05d4,
    // -17, 16, -11, 12, 20, 27, 18, 28, -19, 19, 16, -2, -5, -10, 9, -17, -6, 7, 6, -1, -13, 13, 4, 7, 3, 3, -9, -5, 9, -12, -2, 0
    0xcf510ef, 0x1c121b14, 0xfe1013ed, 0xef09f6fb, 0xff0607fa, 0x7040df3, 0xfbf70303, 0xfef409,
    // 11, -4, -27, 17, -16, -30, -1, -23, -9, 18, -11, -13, -14, 13, 18, 25, 10, 25, 15, -15, -15, 8, -6, 16, 45, -10, 22, -2, -5, -18, 0, -20
    0x11e5fc0b, 0xe9ffe2f0, 0xf3f512f7, 0x19120df2, 0xf10f190a, 0x10fa08f1, 0xfe16f62d, 0xec00eefb,
    // 6, 5, 6, 11, 14, 6, 6, 8, 10, -35, -5, 7, 1, -11, 14, -19, 19, 36, 20, 3, 11, -8, 8, 27, 44, -19, -35, 33, 34, -4, -6, -11
    0xb060506, 0x806060e, 0x7fbdd0a, 0xed0ef501, 0x3142413, 0x1b08f80b, 0x21dded2c, 0xf5fafc22,
    // 6, -13, 0, -5, -36, 14, -11, -19, 11, -14, -28, 16, 31, -5, -16, -22, 4, 26, 15, 40, 8, -12, 6, -1, 22, 26, -40, -63, -25, 7, -15, 7
    0xfb00f306, 0xedf50edc, 0x10e4f20b, 0xeaf0fb1f, 0x280f1a04, 0xff06f408, 0xc1d81a16, 0x7f107e7,
    // 6, 16, -28, 6, -11, -24, -1, -44, 20, -17, 62, -15, -25, 3, 2, -13, 11, -48, -30, 1, 23, -10, 17, 7, -6, 8, -27, 42, 31, -5, -15, 9
    0x6e41006, 0xd4ffe8f5, 0xf13eef14, 0xf30203e7, 0x1e2d00b, 0x711f617, 0x2ae508fa, 0x9f1fb1f,
    // -1, 3, 3, -9, -1, 19, 14, 0, -14, -6, 3, -8, -16, 4, -29, -8, 20, -40, -53, 0, 11, -15, 3, -20, -27, 45, -28, -37, -25, 12, 1, 13
    0xf70303ff, 0xe13ff, 0xf803faf2, 0xf8e304f0, 0xcbd814, 0xec03f10b, 0xdbe42de5, 0xd010ce7,
    // -7, -27, 1, -2, 19, 24, 6, 4, -6, -2, 3, 11, 4, -10, -21, 10, -1, -8, 1, -13, 5, -8, 21, -1, 7, 36, 20, 13, 16, -14, -5, -5
    0xfe01e5f9, 0x4061813, 0xb03fefa, 0xaebf604, 0xf301f8ff, 0xff15f805, 0xd142407, 0xfbfbf210,
    // 15, -7, -3, 10, 28, 27, 1, 30, -3, 18, 34, -2, -8, -20, 27, -6, 18, -14, 5, 6, -1, 5, -20, -7, 12, -13, 11, -5, 1, -8, 0, 6
    0xafdf90f, 0x1e011b1c, 0xfe2212fd, 0xfa1becf8, 0x605f212, 0xf9ec05ff, 0xfb0bf30c, 0x600f801,
    // 6, 11, 5, -20, 12, 11, 25, 5, -7, 20, -3, -5, 0, -3, 36, 13, 3, -23, 20, -83, -44, 12, 35, 40, 26, 2, 22, 23, -54, 46, 26, -58
    0xec050b06, 0x5190b0c, 0xfbfd14f9, 0xd24fd00, 0xad14e903, 0x28230cd4, 0x1716021a, 0xc61a2eca,
    // 7, -6, -21, -14, 24, -5, 18, 2, -12, -2, -10, 9, 18, 1, 33, -3, 11, -14, 3, 10, 11, -2, -10, 5, 12, -8, 14, -1, -8, -1, 9, 7
    0xf2ebfa07, 0x212fb18, 0x9f6fef4, 0xfd210112, 0xa03f20b, 0x5f6fe0b, 0xff0ef80c, 0x709fff8,
    // 15, -1, 11, 6, 16, 12, 3, -5, -8, -1, 10, 10, 25, -14, 22, 13, -5, 30, 8, -9, -7, -1, 2, 5, 14, 12, 11, -13, 5, -8, 0, -8
    0x60bff0f, 0xfb030c10, 0xa0afff8, 0xd16f219, 0xf7081efb, 0x502fff9, 0xf30b0c0e, 0xf800f805,
    // -2, 0, 0, 10, -2, 8, -11, -8, 12, -32, -21, -4, -9, 19, 29, -10, -23, 35, 3, -1, -21, -9, 2, -34, 39, -1, -28, 21, 13, 13, 8, -5
    0xa0000fe, 0xf8f508fe, 0xfcebe00c, 0xf61d13f7, 0xff0323e9, 0xde02f7eb, 0x15e4ff27, 0xfb080d0d,
    // -19, 9, 7, -4, 4, 12, 15, 15, -6, 20, -7, 0, 3, 16, 6, -29, 4, 12, 26, 4, 14, 11, 8, -11, 1, -21, 10, -3, -40, -20, -8, -4
    0xfc0709ed, 0xf0f0c04, 0xf914fa, 0xe3061003, 0x41a0c04, 0xf5080b0e, 0xfd0aeb01, 0xfcf8ecd8,
    // 4, -55, 39, -7, 11, -41, 38, 6, 29, 15, 35, -17, -18, -42, 12, 1, 18, -55, 26, -6, -34, -27, -12, -9, 18, 3, -10, 21, 20, 2, -4, 7
    0xf927c904, 0x626d70b, 0xef230f1d, 0x10cd6ee, 0xfa1ac912, 0xf7f4e5de, 0x15f60312, 0x7fc0214,
    // -13, 6, -5, -12, -3, 12, -4, -2, 10, -3, -2, -17, 14, 4, 2, -1, -18, -27, 8, 2, -5, -6, 12, -20, -22, 3, 0, -1, -44, 2, 12, -12
    0xf4fb06f3, 0xfefc0cfd, 0xeffefd0a, 0xff02040e, 0x208e5ee, 0xec0cfafb, 0xff0003ea, 0xf40c02d4,
    // -8, -35, 1, 1, 13, 14, -10, -20, -21, -17, -3, 7, -1, -1, 5, 7, -37, -3, -3, -7, -1, -3, 18, -20, 9, 41, 4, 16, 18, -6, -14, -10
    0x101ddf8, 0xecf60e0d, 0x7fdefeb, 0x705ffff, 0xf9fdfddb, 0xec12fdff, 0x10042909, 0xf6f2fa12,
    // -3, -4, -7, -29, 8, -31, 4, 54, -30, -6, -12, -19, -31, 24, 31, 6, 15, -30, -2, 0, -6, -8, 2, -8, 13, -23, -4, -2, -14, -9, 8, 8
    0xe3f9fcfd, 0x3604e108, 0xedf4fae2, 0x61f18e1, 0xfee20f, 0xf802f8fa, 0xfefce90d, 0x808f7f2,
    // 29, -14, -26, -16, 12, -26, 17, 9, -5, -34, 5, 5, 7, -6, 24, 13, -7, -18, -5, 9, 30, 20, -51, 3, 3, -78, 14, -11, -35, -5, -31, -7
    0xf0e6f21d, 0x911e60c, 0x505defb, 0xd18fa07, 0x9fbeef9, 0x3cd141e, 0xf50eb203, 0xf9e1fbdd,
    // -42, -2, 17, 1, -7, 18, 1, -1, -3, -21, 14, -30, -15, -20, -1, -30, 24, -18, 0, 4, -9, 1, -15, -5, 6, -28, 7, 6, -13, -6, 26, -9
    0x111fed6, 0xff0112f9, 0xe20eebfd, 0xe2ffecf1, 0x400ee18, 0xfbf101f7, 0x607e406, 0xf71afaf3,
    // -20, -7, 15, 13, -15, -14, -8, 17, 38, -20, 6, -22, 11, -12, -11, -31, -12, 12, -12, -11, 21, -12, -6, -14, -13, 3, -14, 14, -5, 0, -2, 19
    0xd0ff9ec, 0x11f8f2f1, 0xea06ec26, 0xe1f5f40b, 0xf5f40cf4, 0xf2faf415, 0xef203f3, 0x13fe00fb,
    // -11, -16, -16, -11, -1, 9, 15, -16, 11, 7, 9, 8, 17, -21, -13, 5, -16, -21, -36, -6, 28, -5, 12, -3, -6, 23, 9, -10, -25, 2, -19, -23
    0xf5f0f0f5, 0xf00f09ff, 0x809070b, 0x5f3eb11, 0xfadcebf0, 0xfd0cfb1c, 0xf60917fa, 0xe9ed02e7,
    // -4, 10, -3, 6, 18, 8, 6, 9, -4, -13, 4, -9, -7, 3, 3, 14, 18, -7, -5, 9, 8, -21, 12, -3, 8, 10, -16, -4, -13, 13, -4, 12
    0x6fd0afc, 0x9060812, 0xf704f3fc, 0xe0303f9, 0x9fbf912, 0xfd0ceb08, 0xfcf00a08, 0xcfc0df3,
    // 32, -36, 3, 26, -14, -99, 48, 36, 36, 35, -52, -43, -9, -10, 21, 67, 18, -31, -18, 3, 18, -19, 9, -15, 7, -1, -21, 18, 3, 15, 1, 3
    0x1a03dc20, 0x24309df2, 0xd5cc2324, 0x4315f6f7, 0x3eee112, 0xf109ed12, 0x12ebff07, 0x3010f03,
    // 7, -12, -2, 9, -2, -4, 0, -3, 4, -25, 9, 15, -6, -3, 0, 0, 12, -1, 15, -17, 4, -8, 17, 3, 10, -37, 13, 21, -15, -14, -24, -24
    0x9fef407, 0xfd00fcfe, 0xf09e704, 0xfdfa, 0xef0fff0c, 0x311f804, 0x150ddb0a, 0xe8e8f2f1,
    // 8, 3, 8, -9, -18, -7, -8, 4, 10, -19, 14, -15, -9, -7, -1, -32, -15, 4, -4, -19, -20, -20, 2, 10, -11, 6, -15, -4, -2, 14, 16, -15
    0xf7080308, 0x4f8f9ee, 0xf10eed0a, 0xe0fff9f7, 0xedfc04f1, 0xa02ecec, 0xfcf106f5, 0xf1100efe,
    // -36, -16, -6, -4, -2, 24, -2, -18, -4, 7, 15, 2, -1, 1, 0, -48, -3, -6, 7, 5, 1, 11, -12, -10, 9, -23, -23, 1, 20, 5, 6, 10
    0xfcfaf0dc, 0xeefe18fe, 0x20f07fc, 0xd00001ff, 0x507fafd, 0xf6f40b01, 0x1e9e909, 0xa060514,
    // -24, -8, -11, 11, 5, -8, -10, -17, 0, -37, -24, -46, 22, -1, 2, 2, -13, 6, 7, 28, -7, -7, -34, -11, -10, -19, -1, 45, -50, -26, -5, -35
    0xbf5f8e8, 0xeff6f805, 0xd2e8db00, 0x202ff16, 0x1c0706f3, 0xf5def9f9, 0x2dffedf6, 0xddfbe6ce,
    // -16, 22, -27, 9, 32, -17, 14, -15, -19, 23, -7, 9, -21, 12, 24, 32, -10, 2, 9, 24, -1, 4, 1, -27, -2, -17, -10, -15, -10, 3, -4, -4
    0x9e516f0, 0xf10eef20, 0x9f917ed, 0x20180ceb, 0x180902f6, 0xe50104ff, 0xf1f6effe, 0xfcfc03f6,
    // 25, 8, -1, 5, 21, 0, 5, -7, 3, -27, 7, 37, 14, -5, 18, 14, -15, 21, 10, -11, -53, -15, -8, 16, 41, 2, 2, -2, -16, -2, 10, -38
    0x5ff0819, 0xf9050015, 0x2507e503, 0xe12fb0e, 0xf50a15f1, 0x10f8f1cb, 0xfe020229, 0xda0afef0,
    // 12, 8, 16, -8, -7, -18, -6, 24, -22, -9, -19, -14, -19, 1, 15, 8, 1, 4, 14, -11, -1, -21, 10, -20, 11, -13, -17, 1, 11, -11, -10, 14
    0xf810080c, 0x18faeef9, 0xf2edf7ea, 0x80f01ed, 0xf50e0401, 0xec0aebff, 0x1eff30b, 0xef6f50b,
    // 3, -4, 13, 3, 15, 1, 15, 2, -2, -14, 2, 5, 1, -16, 3, 8, -5, -15, -15, -19, -1, 14, -12, -24, -2, -22, 39, 34, 35, -14, -14, -16
    0x30dfc03, 0x20f010f, 0x502f2fe, 0x803f001, 0xedf1f1fb, 0xe8f40eff, 0x2227eafe, 0xf0f2f223,
    // -45, -72, -33, -14, -5, 5, 21, 68, -13, -95, -19, -96, 25, 33, 24, 0, -26, 18, -4, 12, 22, 24, 7, 0, -16, 12, 24, -12, -32, -10, 0, -7
    0xf2dfb8d3, 0x441505fb, 0xa0eda1f3, 0x182119, 0xcfc12e6, 0x71816, 0xf4180cf0, 0xf900f6e0,
    // -2, 4, 24, 20, 9, 11, -8, 0, 16, 5, 1, -6, 4, -8, -2, 4, 8, -12, -34, 6, 13, -21, 0, -23, -15, 10, -15, -14, -17, 8, 9, 20
    0x141804fe, 0xf80b09, 0xfa010510, 0x4fef804, 0x6def408, 0xe900eb0d, 0xf2f10af1, 0x140908ef,
    // 3, -2, 2, -13, -9, 4, 3, 14, 17, -5, -7, 12, 0, -10, 0, -17, 16, 39, 15, -12, 15, -23, -1, 22, -11, -10, -33, -20, 10, 19, 3, -17
    0xf302fe03, 0xe0304f7, 0xcf9fb11, 0xef00f600, 0xf40f2710, 0x16ffe90f, 0xecdff6f5, 0xef03130a,
    // 16, 48, 51, -21, 7, 3, -49, 26, 9, -28, -41, 29, 24, -2, -2, 25, 18, -26, 16, 14, 14, 7, -13, -7, 12, -15, -12, 28, 10, -31, -4, 0
    0xeb333010, 0x1acf0307, 0x1dd7e409, 0x19fefe18, 0xe10e612, 0xf9f3070e, 0x1cf4f10c, 0xfce10a,
    // -1, 25, 35, 4, 22, 5, -17, 0, -2, -10, -45, -36, -21, -5, -12, -6, 7, -10, 18, 4, -3, -18, -63, -23, 0, -1, 12, 8, -27, -23, 17, 56
    0x42319ff, 0xef0516, 0xdcd3f6fe, 0xfaf4fbeb, 0x412f607, 0xe9c1eefd, 0x80cff00, 0x3811e9e5,
    // 2, -26, -9, -27, 18, 7, 8, -4, 4, 17, -36, 35, -17, -9, -22, 12, 13, -15, 9, 28, 29, 9, -7, -4, -8, 3, -7, -26, -29, -30, -11, 0
    0xe5f7e602, 0xfc080712, 0x23dc1104, 0xceaf7ef, 0x1c09f10d, 0xfcf9091d, 0xe6f903f8, 0xf5e2e3,
    // 9, -18, 1, -17, 14, 4, -7, -3, -11, 31, -17, 12, -32, -4, -14, 21, -17, -8, -23, -10, -11, 11, 12, 0, 21, 24, -29, 16, -5, 3, -21, 13
    0xef01ee09, 0xfdf9040e, 0xcef1ff5, 0x15f2fce0, 0xf6e9f8ef, 0xc0bf5, 0x10e31815, 0xdeb03fb,
    // 3, -8, -7, 3, -7, 4, -2, -4, -4, 21, 19, 0, 2, 7, -11, 12, 18, -1, -10, 4, -4, -1, 5, 12, -2, 11, 21, -7, -19, 13, 19, -10
    0x3f9f803, 0xfcfe04f9, 0x1315fc, 0xcf50702, 0x4f6ff12, 0xc05fffc, 0xf9150bfe, 0xf6130ded,
    // 11, 6, 1, -4, -22, -9, -18, -2, 13, 2, -14, 14, 16, 17, 4, -6, 12, 1, 5, -26, 1, 8, -3, 45, -18, -5, 16, 20, 2, -7, -3, 20
    0xfc01060b, 0xfeeef7ea, 0xef2020d, 0xfa041110, 0xe605010c, 0x2dfd0801, 0x1410fbee, 0x14fdf902,
    // 33, -36, -20, 36, -1, -19, -38, 127, 52, 10, 2, 15, -10, -48, -38, -59, 3, 16, 5, 2, 3, -2, -7, 11, 5, 9, 4, -8, 13, 3, -30, 13
    0x24ecdc21, 0x7fdaedff, 0xf020a34, 0xc5dad0f6, 0x2051003, 0xbf9fe03, 0xf8040905, 0xde2030d,
    // -18, 10, 2, -5, -1, 1, -6, -7, -11, 5, -16, -26, -2, 8, -16, 11, -24, -11, -23, 9, 12, 13, -13, -12, -34, 27, -17, -11, 11, 7, -1, 8
    0xfb020aee, 0xf9fa01ff, 0xe6f005f5, 0xbf008fe, 0x9e9f5e8, 0xf4f30d0c, 0xf5ef1bde, 0x8ff070b,
    // 6, -2, 2, 3, -3, 5, 7, 14, -8, 9, 16, 6, 14, 9, -2, 17, 16, -15, -19, -1, -10, 27, 10, 2, 21, 17, 8, -8, -9, -16, 1, 36
    0x302fe06, 0xe0705fd, 0x61009f8, 0x11fe090e, 0xffedf110, 0x20a1bf6, 0xf8081115, 0x2401f0f7,
    // -3, -28, -22, -6, 7, 25, 17, -25, 30, 14, 13, -8, -30, 5, 15, -21, -3, -4, 14, -13, 9, -9, -1, 4, 0, 0, 3, -6, -5, 28, 11, 12
    0xfaeae4fd, 0xe7111907, 0xf80d0e1e, 0xeb0f05e2, 0xf30efcfd, 0x4fff709, 0xfa030000, 0xc0b1cfb,
    // 8, -32, -25, -42, 3, 24, 3, -9, 28, -21, 45, 37, 19, -8, -1, 8, 15, 12, -28, 38, 70, 39, -4, -55, 43, -1, -21, 39, -4, -1, -8, -18
    0xd6e7e008, 0xf7031803, 0x252deb1c, 0x8fff813, 0x26e40c0f, 0xc9fc2746, 0x27ebff2b, 0xeef8fffc,
    // -5, 21, 22, 11, 53, 3, 5, -1, -13, -24, 28, -33, -19, 5, 15, -3, -16, 4, 11, -1, 16, -11, 1, 0, 21, 10, 2, 0, 5, 19, 2, 15
    0xb1615fb, 0xff050335, 0xdf1ce8f3, 0xfd0f05ed, 0xff0b04f0, 0x1f510, 0x20a15, 0xf021305,
    // 16, 19, 16, 3, 24, 13, 4, -5, 12, -16, 20, 8, 13, 3, 16, -5, 34, -4, 14, 15, 16, -12, 6, 6, -12, -30, 21, -16, 24, 0, 17, -12
    0x3101310, 0xfb040d18, 0x814f00c, 0xfb10030d, 0xf0efc22, 0x606f410, 0xf015e2f4, 0xf4110018,
    // 8, -8, 4, 4, -7, -8, -4, 16, 8, -11, -13, -11, -6, 9, 3, 16, 6, 4, -25, -18, -20, 4, -20, -20, 1, 14, 13, -5, -14, 18, -22, -21
    0x404f808, 0x10fcf8f9, 0xf5f3f508, 0x100309fa, 0xeee70406, 0xecec04ec, 0xfb0d0e01, 0xebea12f2,
    // -11, 11, 10, 6, 16, -1, 8, 10, -3, -8, 0, 0, -3, 9, -5, 1, -3, -17, -7, -9, 2, -10, 16, 2, 7, -21, 22, 4, 1, -11, -29, 10
    0x60a0bf5, 0xa08ff10, 0xf8fd, 0x1fb09fd, 0xf7f9effd, 0x210f602, 0x416eb07, 0xae3f501,
    // 64, 3, 47, -77, -73, 40, 25, -24, -75, -55, 49, 4, -32, -22, -73, 7, 6, -17, -5, -1, 14, -28, 8, -23, 5, -35, -2, 6, 4, -10, -18, 12
    0xb32f0340, 0xe81928b7, 0x431c9b5, 0x7b7eae0, 0xfffbef06, 0xe908e40e, 0x6fedd05, 0xceef604,
    // -3, 2, -13, 2, 5, -17, 5, -1, 9, 4, 4, -1, -6, 12, -7, -2, 18, 34, 7, -16, 2, -1, -13, 12, 14, -12, 16, 7, 23, 3, -14, -9
    0x2f302fd, 0xff05ef05, 0xff040409, 0xfef90cfa, 0xf0072212, 0xcf3ff02, 0x710f40e, 0xf7f20317,
    // 4, -8, 1, 16, -8, -9, -11, 4, -8, -11, 1, -13, 2, 6, 11, -13, 6, 16, -6, -2, 12, 6, -11, 31, 6, -16, -19, -20, -2, -3, 6, 28
    0x1001f804, 0x4f5f7f8, 0xf301f5f8, 0xf30b0602, 0xfefa1006, 0x1ff5060c, 0xecedf006, 0x1c06fdfe,
    // -18, 6, 15, 16, 2, 20, -16, 31, 8, -20, -3, 34, -5, 17, -5, -23, -1, -4, 4, -4, -26, -13, -4, -19, 3, 1, -8, 0, 13, 12, 3, 6
    0x100f06ee, 0x1ff01402, 0x22fdec08, 0xe9fb11fb, 0xfc04fcff, 0xedfcf3e6, 0xf80103, 0x6030c0d,
    // -12, -30, -43, 10, 1, -9, -27, -54, 52, 32, -2, 16, 42, -6, -20, -34, 28, -23, 8, -20, 10, -34, 25, 25, -5, 38, 1, 0, -7, -36, -12, -31
    0xad5e2f4, 0xcae5f701, 0x10fe2034, 0xdeecfa2a, 0xec08e91c, 0x1919de0a, 0x126fb, 0xe1f4dcf9,
    // -19, 4, -2, 11, 31, 27, -8, 12, -16, 0, -5, 22, -19, -4, -10, -8, 4, 17, 10, 2, -7, -6, 8, -2, 2, 6, 21, 33, 9, 10, 21, -2
    0xbfe04ed, 0xcf81b1f, 0x16fb00f0, 0xf8f6fced, 0x20a1104, 0xfe08faf9, 0x21150602, 0xfe150a09,
    // 7, 15, 24, -12, -43, -4, -39, 23, 51, -1, 9, -38, 13, 14, 4, -26, 7, -18, -15, 4, 24, -7, 15, 17, -6, -4, -16, 2, 13, 5, 4, -1
    0xf4180f07, 0x17d9fcd5, 0xda09ff33, 0xe6040e0d, 0x4f1ee07, 0x110ff918, 0x2f0fcfa, 0xff04050d,
};
static const uint embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords[8] = {
    // -0.0001086, -3.517e-05, -0.0002377, -0.000278, 0.0004103, 0.0003438, -0.00011027, 0.000243, -0.0003033, -0.0002706, 0.000369, 0.001034, -9.16e-05, -0.001057, -0.000631, 0.0003753
    0x824e871e, 0x8c8e8bca, 0xda20eb9, 0xbf6873a, 0x8c6f8cf8, 0x143c0e0c, 0x94548601, 0xe26912b,
};
static const uint embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -26, -58, -27, 11, -30, -18, -19, -25, -26, 33, -5, -27, 15, -23, -72, 22, -72, -7, -44, 29, 24, -20, 63, 56, -15, -22, -76, -33, -29, 21, -9, -4
    0xbe5c6e6, 0xe7edeee2, 0xe5fb21e6, 0x16b8e90f, 0x1dd4f9b8, 0x383fec18, 0xdfb4eaf1, 0xfcf715e3,
    // 10, 79, 46, -33, 8, -50, -5, -69, 15, -37, -44, 7, 75, 20, -50, 58, 10, -10, -52, 28, 19, 84, -7, -65, 42, -50, 35, -2, 111, 19, -13, -53
    0xdf2e4f0a, 0xbbfbce08, 0x7d4db0f, 0x3ace144b, 0x1cccf60a, 0xbff95413, 0xfe23ce2a, 0xcbf3136f,
    // 42, 16, 25, -27, 25, -13, 28, 6, 73, 41, -76, -41, -46, -50, 18, -25, -56, -16, -8, 0, -29, -6, -31, -44, 10, 55, -60, 25, 35, -41, 1, -19
    0xe519102a, 0x61cf319, 0xd7b42949, 0xe712ced2, 0xf8f0c8, 0xd4e1fae3, 0x19c4370a, 0xed01d723,
    // 11, 12, -41, -12, 2, 23, -3, 11, 1, -11, 15, -28, -14, 33, -4, 1, 0, 47, 34, 94, 38, -28, -7, -54, 48, -1, -15, -25, -50, 1, 2, -18
    0xf4d70c0b, 0xbfd1702, 0xe40ff501, 0x1fc21f2, 0x5e222f00, 0xcaf9e426, 0xe7f1ff30, 0xee0201ce,
    // -32, -10, -38, -51, 2, -19, -36, -17, -58, 35, -30, 18, 34, 0, -39, -34, -10, 25, -63, -35, -7, 38, -2, -19, -11, 53, 99, 107, -3, 94, -2, -3
    0xcddaf6e0, 0xefdced02, 0x12e223c6, 0xded90022, 0xddc119f6, 0xedfe26f9, 0x6b6335f5, 0xfdfe5efd,
    // -12, 22, -7, 24, 13, -9, -31, 35, -34, -3, -81, 29, -35, 63, -38, -32, -15, -15, 2, -48, 2, 42, -20, -31, 14, 36, 41, -12, 19, -2, -17, -8
    0x18f916f4, 0x23e1f70d, 0x1daffdde, 0xe0da3fdd, 0xd002f1f1, 0xe1ec2a02, 0xf429240e, 0xf8effe13,
    // -6, 1, -32, -3, -16, -27, -20, -17, 9, 2, -19, -2, 10, -18, -12, 2, -19, 31, 6, 48, 55, 20, -67, -45, -12, 28, -31, -43, -62, 59, 31, 36
    0xfde001fa, 0xefece5f0, 0xfeed0209, 0x2f4ee0a, 0x30061fed, 0xd3bd1437, 0xd5e11cf4, 0x241f3bc2,
    // 84, 60, -45, 30, -64, 24, 30, -28, -34, 10, -30, 24, -51, -36, -28, -48, -82, 5, -17, 12, -18, -10, 44, 24, 25, -12, -114, -26, -15, -25, 16, 22
    0x1ed33c54, 0xe41e18c0, 0x18e20ade, 0xd0e4dccd, 0xcef05ae, 0x182cf6ee, 0xe68ef419, 0x1610e7f1,
    // 19, -107, 19, 13, 43, -41, -16, -45, -13, -53, -11, -59, 40, 45, 30, 0, -93, -5, -35, 57, 29, 5, -2, -30, -1, -40, -108, 5, -3, -13, -22, -13
    0xd139513, 0xd3f0d72b, 0xc5f5cbf3, 0x1e2d28, 0x39ddfba3, 0xe2fe051d, 0x594d8ff, 0xf3eaf3fd,
    // 5, -1, 12, 8, 5, 12, 0, 2, -16, -16, -10, 9, 5, 3, 23, -7, 4, -20, -61, -50, -28, -128, -42, 52, -4, -47, -9, -68, 6, -25, 31, -12
    0x80cff05, 0x2000c05, 0x9f6f0f0, 0xf9170305, 0xcec3ec04, 0x34d680e4, 0xbcf7d1fc, 0xf41fe706,
    // 72, 50, -44, 25, -32, -13, -106, 5, -41, -85, 28, 10, 12, -33, 6, -53, -30, 31, 23, 13, -9, 24, -14, 20, 16, 16, -19, 13, -14, -7, -8, 2
    0x19d43248, 0x596f3e0, 0xa1cabd7, 0xcb06df0c, 0xd171fe2, 0x14f218f7, 0xded1010, 0x2f8f9f2,
    // -4, 4, 12, 35, -39, 7, -22, 1, -32, 20, 11, -31, -1, -10, 1, 9, -88, -4, -24, -50, -61, -44, -5, 49, 0, -1, -29, 31, -1, 2, -73, -3
    0x230c04fc, 0x1ea07d9, 0xe10b14e0, 0x901f6ff, 0xcee8fca8, 0x31fbd4c3, 0x1fe3ff00, 0xfdb702ff,
    // 26, 35, 4, -28, 26, 1, -7, 12, -74, -4, 23, -23, -15, 32, -2, 4, 13, -11, 66, -72, -5, 16, -44, -32, -9, 37, 5, 14, 27, 7, 20, -5
    0xe404231a, 0xcf9011a, 0xe917fcb6, 0x4fe20f1, 0xb842f50d, 0xe0d410fb, 0xe0525f7, 0xfb14071b,
    // -5, 46, 21, -53, -80, -45, 70, 15, 17, -24, 18, 6, -50, -33, -31, 68, -44, 20, -37, 27, -24, -62, 37, 11, -3, -2, -30, -6, -9, 10, 15, 7
    0xcb152efb, 0xf46d3b0, 0x612e811, 0x44e1dfce, 0x1bdb14d4, 0xb25c2e8, 0xfae2fefd, 0x70f0af7,
    // -5, 13, -29, -2, 15, 41, 27, 11, -1, 2, 2, -16, -34, 19, 2, 0, 0, 4, -34, -54, -19, -47, -22, -44, 76, 13, -35, -12, 46, -19, -9, 68
    0xfee30dfb, 0xb1b290f, 0xf00202ff, 0x213de, 0xcade0400, 0xd4ead1ed, 0xf4dd0d4c, 0x44f7ed2e,
    // -7, -4, 22, -6, 19, 25, 0, -4, 17, -21, 6, 18, 1, 32, -3, -11, 9, 11, -2, -65, -15, 14, 42, 63, 21, 57, 39, 13, -16, -76, -4, -37
    0xfa16fcf9, 0xfc001913, 0x1206eb11, 0xf5fd2001, 0xbffe0b09, 0x3f2a0ef1, 0xd273915, 0xdbfcb4f0,
    // 13, -11, -5, -111, -46, 26, -24, -19, -57, 59, -34, -13, -3, -18, 14, 20, -12, -18, -16, -41, -16, 21, 42, -36, 20, 24, -68, -50, -15, -30, 0, 8
    0x91fbf50d, 0xede81ad2, 0xf3de3bc7, 0x140eeefd, 0xd7f0eef4, 0xdc2a15f0, 0xcebc1814, 0x800e2f1,
    // -4, 4, 8, 2, 2, 40, 12, -4, -24, -2, -7, -12, 0, -12, 0, 2, -35, -68, 16, 28, -69, -1, -27, 44, -65, -44, -9, 12, 31, 66, 58, -64
    0x20804fc, 0xfc0c2802, 0xf4f9fee8, 0x200f400, 0x1c10bcdd, 0x2ce5ffbb, 0xcf7d4bf, 0xc03a421f,
    // -24, 23, 26, 36, -59, -27, -6, 7, 4, 18, -28, -51, 24, -21, 2, 5, -60, -1, -4, 60, -1, -1, -41, 0, -33, -28, -16, -21, -26, 24, -43, 27
    0x241a17e8, 0x7fae5c5, 0xcde41204, 0x502eb18, 0x3cfcffc4, 0xd7ffff, 0xebf0e4df, 0x1bd518e6,
    // -6, -37, -15, -27, -13, 51, 4, 72, -20, -27, -20, -28, 48, -52, -51, 102, -44, -33, -11, -39, -13, -17, 33, -39, 19, 44, -64, -52, -11, -34, 15, 12
    0xe5f1dbfa, 0x480433f3, 0xe4ece5ec, 0x66cdcc30, 0xd9f5dfd4, 0xd921eff3, 0xccc02c13, 0xc0fdef5,
    // -16, 7, 4, 11, 13, -19, 19, 50, -17, -35, 31, 14, -7, -12, 70, -50, 7, -41, 90, -67, 27, 24, -16, -34, -24, 61, -56, -1, -42, -31, -39, 28
    0xb0407f0, 0x3213ed0d, 0xe1fddef, 0xce46f4f9, 0xbd5ad707, 0xdef0181b, 0xffc83de8, 0x1cd9e1d6,
    // 7, 38, -5, -32, 26, 1, -40, -51, 8, -21, -11, -33, -18, 12, -94, 5, -67, -34, -24, -14, -22, 8, -99, -55, 87, 39, 7, -37, 0, -59, 20, -10
    0xe0fb2607, 0xcdd8011a, 0xdff5eb08, 0x5a20cee, 0xf2e8debd, 0xc99d08ea, 0xdb072757, 0xf614c500,
    // -34, -29, -33, 71, -13, -4, 6, 21, -71, -23, 46, -2, 15, 20, -62, 7, 2, -1, -8, -5, 10, -39, 57, -12, -6, -54, -39, -21, -15, 10, 13, 33
    0x47dfe3de, 0x1506fcf3, 0xfe2ee9b9, 0x7c2140f, 0xfbf8ff02, 0xf439d90a, 0xebd9cafa, 0x210d0af1,
    // 15, -23, -49, -12, 41, -7, -13, -17, 1, 7, -14, 71, 12, -11, -10, 14, -10, -1, 0, 52, -51, -72, -7, -93, 36, -14, 30, 47, -39, -8, 18, -25
    0xf4cfe90f, 0xeff3f929, 0x47f20701, 0xef6f50c, 0x3400fff6, 0xa3f9b8cd, 0x2f1ef224, 0xe712f8d9,
    // -60, -8, -31, 58, -6, 34, 3, -58, 17, -27, 2, -4, 4, -65, -14, 8, -52, -27, 5, -33, 11, -22, -37, -7, 40, 42, -4, -21, -19, -43, -4, 11
    0x3ae1f8c4, 0xc60322fa, 0xfc02e511, 0x8f2bf04, 0xdf05e5cc, 0xf9dbea0b, 0xebfc2a28, 0xbfcd5ed,
    // -15, 3, -79, -11, 0, -13, 10, 0, 15, -7, -5, -24, 4, 36, 7, 4, -1, 65, 22, -5, 72, -27, 29, -25, 107, 49, 2, -21, -20, 8, 0, 57
    0xf5b103f1, 0xaf300, 0xe8fbf90f, 0x4072404, 0xfb1641ff, 0xe71de548, 0xeb02316b, 0x390008ec,
    // -26, 33, -7, -22, 14, 47, -17, -108, 29, 11, -83, -28, 9, -42, -25, 59, -55, 13, -9, -12, 22, -29, 1, -12, 45, -3, 6, 33, 67, 30, 14, -42
    0xeaf921e6, 0x94ef2f0e, 0xe4ad0b1d, 0x3be7d609, 0xf4f70dc9, 0xf401e316, 0x2106fd2d, 0xd60e1e43,
    // -12, 70, -18, -21, 2, -3, 8, 28, 1, 50, -14, 47, 37, 5, -36, 7, 2, -13, 23, -24, 19, 9, 3, 86, -1, 21, -60, 25, -44, -65, 24, -2
    0xebee46f4, 0x1c08fd02, 0x2ff23201, 0x7dc0525, 0xe817f302, 0x56030913, 0x19c415ff, 0xfe18bfd4,
    // 14, 63, 49, -3, 74, -59, -51, 1, 62, -62, -8, 22, 50, 31, 77, -18, -18, -26, 77, 37, 15, -30, 15, -44, -1, 56, -11, -89, -76, 13, -61, -25
    0xfd313f0e, 0x1cdc54a, 0x16f8c23e, 0xee4d1f32, 0x254de6ee, 0xd40fe20f, 0xa7f538ff, 0xe7c30db4,
    // -13, 50, -33, -19, -10, -11, 1, 29, 4, 33, 2, 42, 8, 3, -26, 6, -50, 2, 9, 30, 44, -26, 15, 21, -10, -12, -115, 5, -22, -30, -10, -9
    0xeddf32f3, 0x1d01f5f6, 0x2a022104, 0x6e60308, 0x1e0902ce, 0x150fe62c, 0x58df4f6, 0xf7f6e2ea,
    // 5, -54, 2, -61, 28, -39, 25, -11, -54, -58, 35, -22, -44, -22, 40, 28, 6, 7, -39, 18, -23, 43, -7, -66, -5, -20, -22, -15, 61, -13, 14, 8
    0xc302ca05, 0xf519d91c, 0xea23c6ca, 0x1c28ead4, 0x12d90706, 0xbef92be9, 0xf1eaecfb, 0x80ef33d,
    // 62, 18, -9, -11, -55, -46, 38, 3, 11, 22, 30, 0, 59, -35, -43, -48, -15, 20, -92, 29, -4, -29, 18, -14, -15, -17, -9, 10, 20, 16, -16, -35
    0xf5f7123e, 0x326d2c9, 0x1e160b, 0xd0d5dd3b, 0x1da414f1, 0xf212e3fc, 0xaf7eff1, 0xddf01014,
    // -14, 17, 37, -61, 34, 45, 0, -16, -42, -42, 15, 34, 11, 5, 13, 14, -79, 57, -50, 38, -49, 7, 22, 21, -13, 53, 0, -19, 7, -5, -7, 13
    0xc32511f2, 0xf0002d22, 0x220fd6d6, 0xe0d050b, 0x26ce39b1, 0x151607cf, 0xed0035f3, 0xdf9fb07,
    // -49, 20, -24, 37, -13, 67, 5, 23, 72, 39, 6, 56, 30, 47, -43, -3, -96, -8, -21, -3, -18, -33, 17, 5, 6, -2, -47, -25, 54, -27, 32, -7
    0x25e814cf, 0x170543f3, 0x38062748, 0xfdd52f1e, 0xfdebf8a0, 0x511dfee, 0xe7d1fe06, 0xf920e536,
    // -1, -1, 72, 10, 3, -11, -16, -13, -7, 4, 0, 8, -5, -26, -25, -8, 4, 32, 26, 53, -26, -23, 59, -54, -23, 42, -36, -24, -27, -27, -6, -3
    0xa48ffff, 0xf3f0f503, 0x80004f9, 0xf8e7e6fb, 0x351a2004, 0xca3be9e6, 0xe8dc2ae9, 0xfdfae5e5,
    // -5, -10, 39, 33, -32, 30, -34, 14, 4, -5, 5, -59, -10, 31, -11, -12, -23, 12, -16, 4, -42, -62, 15, -14, -26, -3, -27, 28, -24, 31, 10, -9
    0x2127f6fb, 0xede1ee0, 0xc505fb04, 0xf4f51ff6, 0x4f00ce9, 0xf20fc2d6, 0x1ce5fde6, 0xf70a1fe8,
    // -42, -45, 18, -39, -29, -37, 75, -68, 81, -88, 31, -26, -91, 84, -40, 66, -83, -66, 23, -73, -31, -5, -17, -37, 6, 33, 19, -42, 17, 29, 29, 18
    0xd912d3d6, 0xbc4bdbe3, 0xe61fa851, 0x42d854a5, 0xb717bead, 0xdbeffbe1, 0xd6132106, 0x121d1d11,
    // -42, 13, -7, 17, -10, -16, 6, -69, -53, 48, -34, 0, -84, 27, 4, -69, -3, -49, 9, -50, 22, 25, 12, -23, 36, 11, -9, -58, -28, -5, -5, -4
    0x11f90dd6, 0xbb06f0f6, 0xde30cb, 0xbb041bac, 0xce09cffd, 0xe90c1916, 0xc6f70b24, 0xfcfbfbe4,
    // 14, 10, -14, 4, 42, 31, 20, -2, -31, 7, -1, -4, -3, -23, -6, -7, 15, 28, -40, 83, 20, -17, 26, -57, 10, 56, -2, -23, -5, -31, 103, -67
    0x4f20a0e, 0xfe141f2a, 0xfcff07e1, 0xf9fae9fd, 0x53d81c0f, 0xc71aef14, 0xe9fe380a, 0xbd67e1fb,
    // 15, 0, -51, 1, 34, -42, -18, -3, 15, 19, -16, 17, 8, -11, 10, -1, -27, 4, 24, -71, 52, -20, 57, -18, 23, -11, 15, 41, 6, 76, 11, 63
    0x1cd000f, 0xfdeed622, 0x11f0130f, 0xff0af508, 0xb91804e5, 0xee39ec34, 0x290ff517, 0x3f0b4c06,
    // -92, 14, 1, -20, -13, 1, 36, 13, -36, -32, -39, -35, 94, -54, 48, -73, -68, 5, 62, -58, -17, -32, -56, -46, 24, 79, -7, 52, 0, -18, 20, 14
    0xec010ea4, 0xd2401f3, 0xddd9e0dc, 0xb730ca5e, 0xc63e05bc, 0xd2c8e0ef, 0x34f94f18, 0xe14ee00,
    // -46, 70, 35, 52, 21, -44, 14, -47, 2, -21, -64, 46, -75, 79, 79, -55, -13, 78, -42, 51, -33, 2, -3, -20, -6, -60, 14, 49, 74, 48, -18, 13
    0x342346d2, 0xd10ed415, 0x2ec0eb02, 0xc94f4fb5, 0x33d64ef3, 0xecfd02df, 0x310ec4fa, 0xdee304a,
    // 2, 8, 39, -98, 94, -28, -55, 27, 28, 22, 80, -29, -7, 57, -86, -36, 14, -18, -108, -5, -49, -36, 23, 26, -9, -51, -12, -81, -3, 3, 8, 0
    0x9e270802, 0x1bc9e45e, 0xe350161c, 0xdcaa39f9, 0xfb94ee0e, 0x1a17dccf, 0xaff4cdf7, 0x803fd,
    // -8, -24, -3, -28, -18, 3, -27, -8, 31, 5, -11, 10, -20, 2, -24, -5, 0, 3, 9, 2, 26, -27, 39, 10, -2, -76, -22, -24, 35, -7, 5, 19
    0xe4fde8f8, 0xf8e503ee, 0xaf5051f, 0xfbe802ec, 0x2090300, 0xa27e51a, 0xe8eab4fe, 0x1305f923,
    // -47, 8, -5, 25, 5, -49, 18, 43, -65, 10, 65, -16, 43, 11, 22, 2, -43, -6, 16, -46, -33, 0, -30, -54, -12, 74, -36, 11, 13, -5, -3, -3
    0x19fb08d1, 0x2b12cf05, 0xf0410abf, 0x2160b2b, 0xd210fad5, 0xcae200df, 0xbdc4af4, 0xfdfdfb0d,
    // -19, -22, -24, 2, 3, -13, -14, -16, 15, -12, 21, 13, -4, -30, -13, -5, -4, 30, -58, -49, -36, -25, -79, 56, 18, -20, -15, 44, 46, 27, 67, -19
    0x2e8eaed, 0xf0f2f303, 0xd15f40f, 0xfbf3e2fc, 0xcfc61efc, 0x38b1e7dc, 0x2cf1ec12, 0xed431b2e,
    // 23, -5, -28, -23, -7, 77, 23, -21, 48, 2, 84, -11, 25, -27, 29, 31, -18, -58, 83, -64, 5, 16, -7, 3, -10, 50, -41, 3, -47, -40, 26, 32
    0xe9e4fb17, 0xeb174df9, 0xf5540230, 0x1f1de519, 0xc053c6ee, 0x3f91005, 0x3d732f6, 0x201ad8d1,
    // 38, 38, 7, 23, 69, -34, -51, -16, 5, 67, 61, -29, -45, -14, 18, 92, -51, -17, -10, -1, -38, -4, -36, -57, -11, 55, -79, 36, 13, -45, -27, -20
    0x17072626, 0xf0cdde45, 0xe33d4305, 0x5c12f2d3, 0xfff6efcd, 0xc7dcfcda, 0x24b137f5, 0xece5d30d,
    // 23, 40, -19, -3, 76, 11, 39, -17, -45, 12, 1, -28, 12, -83, -1, -10, -41, -5, -39, 45, -48, -23, 14, -28, 45, -19, -64, -13, 9, -13, 24, 1
    0xfded2817, 0xef270b4c, 0xe4010cd3, 0xf6ffad0c, 0x2dd9fbd7, 0xe40ee9d0, 0xf3c0ed2d, 0x118f309,
    // -69, 15, 16, 65, 46, 19, 15, 70, -20, 84, -62, 6, -31, -44, 70, 42, 18, 32, -33, 71, -1, -41, 34, 23, -5, -45, -37, 23, -22, -6, 13, 4
    0x41100fbb, 0x460f132e, 0x6c254ec, 0x2a46d4e1, 0x47df2012, 0x1722d7ff, 0x17dbd3fb, 0x40dfaea,
    // 16, 1, 12, -21, 18, 23, -4, -14, -1, -27, 8, 10, 0, -8, 2, 4, -35, 51, -8, -39, -75, 0, -3, 45, 34, -22, 24, 14, 12, -40, 37, 68
    0xeb0c0110, 0xf2fc1712, 0xa08e5ff, 0x402f800, 0xd9f833dd, 0x2dfd00b5, 0xe18ea22, 0x4425d80c,
    // 94, 10, -9, 15, -1, -32, 24, 41, -37, 4, 11, 22, -27, 59, -18, 1, -30, -36, 0, -57, -14, 3, -29, -45, -10, 45, 25, 19, -23, 51, -21, 4
    0xff70a5e, 0x2918e0ff, 0x160b04db, 0x1ee3be5, 0xc700dce2, 0xd3e303f2, 0x13192df6, 0x4eb33e9,
    // -1, -54, 14, 10, 23, 24, -30, -34, -2, -26, 17, -43, 2, 0, 54, -32, -3, -17, -87, -52, -1, 72, -15, -6, 18, 16, 56, 3, -14, -13, -22, -28
    0xa0ecaff, 0xdee21817, 0xd511e6fe, 0xe0360002, 0xcca9effd, 0xfaf148ff, 0x3381012, 0xe4eaf3f2,
    // 15, 17, -3, 14, 18, -77, -18, 15, 2, 20, -7, -14, 18, -36, 36, 1, -11, 12, 11, 63, 18, 33, 13, 2, -24, 17, -36, 17, 4, 28, -26, -21
    0xefd110f, 0xfeeb312, 0xf2f91402, 0x124dc12, 0x3f0b0cf5, 0x20d2112, 0x11dc11e8, 0xebe61c04,
    // 11, -16, -68, -3, -5, -20, -10, 10, -31, 44, 4, -37, -14, -9, 0, 4, -32, 83, -42, 58, 42, -19, -65, 57, 49, 62, 58, -35, -77, -21, 23, -35
    0xfdbcf00b, 0xaf6ecfb, 0xdb042ce1, 0x400f7f2, 0x3ad653e0, 0x39bfed2a, 0xdd3a3e31, 0xdd17ebb3,
    // -65, -2, 25, -5, 22, 19, 36, 30, 31, 27, -2, -23, 5, 9, 28, -13, -13, -20, 19, -38, -13, 23, 10, -15, 5, 37, -25, -62, 37, -37, 34, -8
    0xfb19febf, 0x1e241316, 0xe9fe1b1f, 0xf31c0905, 0xda13ecf3, 0xf10a17f3, 0xc2e72505, 0xf822db25,
    // -27, -27, 10, 30, -5, 20, 17, -74, 15, 56, 62, -39, 55, -27, 47, -14, -29, 16, -84, 14, -23, -28, 32, -47, 2, -7, -11, 5, 0, 9, 4, 11
    0x1e0ae5e5, 0xb61114fb, 0xd93e380f, 0xf22fe537, 0xeac10e3, 0xd120e4e9, 0x5f5f902, 0xb040900,
    // 27, -26, -39, 18, -65, 14, -33, 4, -34, -43, 27, 37, -15, -35, 52, -16, 27, 46, -24, 88, -13, -29, 37, 52, -26, -71, -29, 71, -62, 9, -7, 42
    0x12d9e61b, 0x4df0ebf, 0x251bd5de, 0xf034ddf1, 0x58e82e1b, 0x3425e3f3, 0x47e3b9e6, 0x2af909c2,
    // 29, -19, -5, 4, 16, -34, -30, 61, -40, -35, -58, -33, -47, -30, -14, -23, -35, 6, -105, 33, -23, 1, 22, -51, -3, -29, -30, 0, 7, 6, -27, -18
    0x4fbed1d, 0x3de2de10, 0xdfc6ddd8, 0xe9f2e2d1, 0x219706dd, 0xcd1601e9, 0xe2e3fd, 0xeee50607,
    // 21, 23, 34, -2, 14, -22, 37, 7, 10, 4, -29, 8, 42, 33, -31, 25, 47, 3, 66, 3, -28, -27, 12, 93, -18, -8, 25, 30, -52, 9, 51, 24
    0xfe221715, 0x725ea0e, 0x8e3040a, 0x19e1212a, 0x342032f, 0x5d0ce5e4, 0x1e19f8ee, 0x183309cc,
    // 89, -35, -2, 29, 8, 45, 5, 4, -17, 15, 2, 4, 73, 52, 8, -44, 18, -17, 29, -25, 4, 43, -27, -10, 2, 12, 9, 3, 24, -12, -12, 8
    0x1dfedd59, 0x4052d08, 0x4020fef, 0xd4083449, 0xe71def12, 0xf6e52b04, 0x3090c02, 0x8f4f418,
    // 14, -7, -21, 17, -29, 22, 18, -22, -29, 3, -5, 1, -19, -15, -15, 2, 19, -53, -49, -76, -18, 32, 67, 36, 14, -23, -33, -24, -42, -9, 42, -2
    0x11ebf90e, 0xea1216e3, 0x1fb03e3, 0x2f1f1ed, 0xb4cfcb13, 0x244320ee, 0xe8dfe90e, 0xfe2af7d6,
    // 7, -13, -2, -1, 15, -27, 18, 17, 9, 2, 30, 6, -10, -14, -20, -6, 12, -10, -15, 22, -28, 55, -38, 68, -37, 52, -24, -44, 44, -75, -24, 20
    0xfffef307, 0x1112e50f, 0x61e0209, 0xfaecf2f6, 0x16f1f60c, 0x44da37e4, 0xd4e834db, 0x14e8b52c,
    // 32, 20, -9, -5, 16, 47, 31, 17, -23, 6, 8, -30, -3, 21, 18, 9, -57, 0, 13, -52, 69, -50, -12, -2, 85, -77, 22, 0, 3, -7, -50, 40
    0xfbf71420, 0x111f2f10, 0xe20806e9, 0x91215fd, 0xcc0d00c7, 0xfef4ce45, 0x16b355, 0x28cef903,
};
static const uint embedded_decoder3_ResidualBlock_2_body_pw_expand_bias_dwords[32] = {
    // 0.04358, -0.2039, -0.2637, -0.07916, -0.0967, -0.06058, -0.2236, -0.337, 0.06366, 0.01302, -0.1335, -0.1345, 0.08594, -0.152, -0.3044, -0.1886
    0xb2862994, 0xad11b438, 0xabc1ae30, 0xb564b328, 0x22ab2c13, 0xb04eb046, 0xb0dd2d80, 0xb209b4df,
    // -0.1941, -0.02173, 0.02023, -0.257, -0.0377, -0.1667, -0.5757, -0.0835, 0.06506, 0.0925, -0.1759, -0.6704, 0.0732, 0.11554, -0.694, -0.03854
    0xa590b236, 0xb41d252e, 0xb156a8d3, 0xad58b89b, 0x2dec2c2a, 0xb95db1a1, 0x2f652caf, 0xa8efb98d,
    // -0.11176, -0.06137, -0.0111, 0.1718, -0.1799, -0.011154, -0.362, -0.0468, -0.1823, -0.1506, -0.001154, -0.3506, -0.1821, -0.1399, -0.1173, -0.2028
    0xabdbaf27, 0x317fa1af, 0xa1b6b1c2, 0xa9feb5cb, 0xb0d2b1d5, 0xb59c94ba, 0xb07ab1d4, 0xb27daf82,
    // -0.138, 0.00553, -0.01062, -0.1788, -0.51, 0.0001293, -0.2028, 0.0511, -0.1799, -0.012276, -0.1467, -0.1821, 0.02837, -0.3188, -0.004227, -0.2223
    0x1daab06a, 0xb1b9a170, 0x83db814, 0x2a8ab27d, 0xa249b1c2, 0xb1d4b0b2, 0xb51a2743, 0xb31d9c54,
};
static const uint embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // 2, -15, -1, -6, -15, 1, 18, 51, 28, -50, 80, 56, 17, 55, 46, -6, 59, 22, 15, -67, -11, 3, 1, 0, 16, -9, -38, 69, 3, -58, -57, 82
    0xfafff102, 0x331201f1, 0x3850ce1c, 0xfa2e3711, 0xbd0f163b, 0x103f5, 0x45daf710, 0x52c7c603,
    // -12, -51, 1, 17, -23, 85, 13, 1, 40, -57, 41, -6, 11, 43, -40, -40, 4, -52, 45, -41, -87, -25, -3, 12, 19, -23, -6, -9, -42, 14, 2, 36
    0x1101cdf4, 0x10d55e9, 0xfa29c728, 0xd8d82b0b, 0xd72dcc04, 0xcfde7a9, 0xf7fae913, 0x24020ed6,
    // -23, -4, -1, 31, 19, -55, -29, -65, 38, -19, 9, 49, -10, 23, -5, 32, -112, -38, -23, 103, 46, -36, 51, -3, 12, 35, -100, 39, -6, -46, 52, 3
    0x1ffffce9, 0xbfe3c913, 0x3109ed26, 0x20fb17f6, 0x67e9da90, 0xfd33dc2e, 0x279c230c, 0x334d2fa,
    // -7, 68, -22, 2, 19, -47, -34, -36, 52, 14, 22, 53, 48, -32, 53, -93, 1, 8, 10, -56, -56, 45, 15, 54, -80, -43, 72, 14, 3, 17, 37, -12
    0x2ea44f9, 0xdcded113, 0x35160e34, 0xa335e030, 0xc80a0801, 0x360f2dc8, 0xe48d5b0, 0xf4251103,
    // -22, 35, -20, 5, 13, -37, 50, -115, -11, -28, 36, 67, 7, 39, -20, -10, 62, 22, 36, 28, -35, -14, -30, -2, -5, -7, -33, -61, -3, 13, -29, -14
    0x5ec23ea, 0x8d32db0d, 0x4324e4f5, 0xf6ec2707, 0x1c24163e, 0xfee2f2dd, 0xc3dff9fb, 0xf2e30dfd,
    // -22, -43, -4, 20, -28, -59, 2, 16, -12, 11, 30, 18, 42, 32, 31, -26, -30, 7, 11, -23, 9, 9, 19, 47, -32, -40, 74, -16, 12, -36, -33, 14
    0x14fcd5ea, 0x1002c5e4, 0x121e0bf4, 0xe61f202a, 0xe90b07e2, 0x2f130909, 0xf04ad8e0, 0xedfdc0c,
    // -42, 27, -12, 16, -10, -16, 22, -23, -109, 65, 10, 46, 43, -14, 3, 24, 4, 65, 28, 71, -6, -32, -25, -1, 24, 10, 8, -86, -30, 62, 47, -38
    0x10f41bd6, 0xe916f0f6, 0x2e0a4193, 0x1803f22b, 0x471c4104, 0xffe7e0fa, 0xaa080a18, 0xda2f3ee2,
    // -11, 25, -24, 7, -41, -61, 59, -20, -7, 17, -72, -2, -20, -28, 85, -25, -25, 39, -6, -25, 79, -70, 50, -24, -38, 53, 84, -32, 55, -5, -2, -2
    0x7e819f5, 0xec3bc3d7, 0xfeb811f9, 0xe755e4ec, 0xe7fa27e7, 0xe832ba4f, 0xe05435da, 0xfefefb37,
    // -22, 12, -46, -18, -9, -36, 38, 2, -40, 13, -24, -26, 28, -21, 28, -34, 38, 6, 32, -2, 21, 11, 21, -14, -20, -21, 64, -64, 29, 115, 37, -2
    0xeed20cea, 0x226dcf7, 0xe6e80dd8, 0xde1ceb1c, 0xfe200626, 0xf2150b15, 0xc040ebec, 0xfe25731d,
    // -14, -41, 20, 9, 12, 24, -5, -19, -17, -9, -43, 14, 26, 16, -18, 34, -7, 25, -5, 9, 30, 45, -32, -65, 81, -1, -22, -60, -79, 17, 21, -14
    0x914d7f2, 0xedfb180c, 0xed5f7ef, 0x22ee101a, 0x9fb19f9, 0xbfe02d1e, 0xc4eaff51, 0xf21511b1,
    // 37, 14, 18, -8, 32, -31, 10, -56, 2, 10, 2, -43, 8, 4, 38, -7, 32, 1, 13, 12, 40, -20, -13, 6, 19, -1, 27, 41, 9, 5, -8, 17
    0xf8120e25, 0xc80ae120, 0xd5020a02, 0xf9260408, 0xc0d0120, 0x6f3ec28, 0x291bff13, 0x11f80509,
    // -49, 1, 37, 28, 1, -48, -6, -20, 16, 24, 10, -22, 12, 11, -11, -37, -17, 32, -3, 5, -36, -47, -13, 16, 34, -47, -12, 8, -50, -45, -17, -16
    0x1c2501cf, 0xecfad001, 0xea0a1810, 0xdbf50b0c, 0x5fd20ef, 0x10f3d1dc, 0x8f4d122, 0xf0efd3ce,
    // -41, 51, -58, -5, -38, 71, 9, 30, 9, -17, -23, 30, 47, 41, -2, -15, -6, -36, 8, -2, 6, -1, -19, 16, -21, -14, 15, 16, 5, -16, -12, -42
    0xfbc633d7, 0x1e0947da, 0x1ee9ef09, 0xf1fe292f, 0xfe08dcfa, 0x10edff06, 0x100ff2eb, 0xd6f4f005,
    // -33, 0, 0, -3, -28, 22, -27, 13, -56, -31, -37, 39, 58, -1, -71, 55, -27, 32, -4, 32, -71, 70, -13, -15, 50, 8, -106, 33, -1, 39, 25, -6
    0xfd0000df, 0xde516e4, 0x27dbe1c8, 0x37b9ff3a, 0x20fc20e5, 0xf1f346b9, 0x21960832, 0xfa1927ff,
    // -16, -11, -54, 10, 32, 7, 2, -38, -4, 4, -42, 63, 32, -36, 23, 20, -18, -24, 1, 19, 77, 0, 19, -15, -9, 13, -1, -21, -21, 25, 14, -9
    0xacaf5f0, 0xda020720, 0x3fd604fc, 0x1417dc20, 0x1301e8ee, 0xf113004d, 0xebff0df7, 0xf70e19eb,
    // -20, -71, -15, 7, 42, -32, 5, -8, -30, 80, 5, 8, 48, -28, -18, 16, 5, 32, 5, 24, -8, -1, 19, -4, 11, -66, -21, -11, -68, 3, 26, -12
    0x7f1b9ec, 0xf805e02a, 0x80550e2, 0x10eee430, 0x18052005, 0xfc13fff8, 0xf5ebbe0b, 0xf41a03bc,
    // 6, -18, 9, -54, -36, 18, 21, -54, -34, 8, 107, 12, 11, 41, 21, -24, 44, 13, 37, -19, -20, -26, -27, 12, -20, -14, -51, -72, 16, 23, -7, 54
    0xca09ee06, 0xca1512dc, 0xc6b08de, 0xe815290b, 0xed250d2c, 0xce5e6ec, 0xb8cdf2ec, 0x36f91710,
    // -14, 45, 55, 10, -48, 8, 20, 8, 54, -7, 10, -18, -28, 34, 18, -33, -55, -54, -28, -83, 40, 23, -7, 4, 7, 31, 38, -10, 6, 23, 4, -11
    0xa372df2, 0x81408d0, 0xee0af936, 0xdf1222e4, 0xade4cac9, 0x4f91728, 0xf6261f07, 0xf5041706,
    // 14, -112, -27, -34, -108, -11, 8, -64, -30, -74, 61, 34, 19, -16, 37, 2, -9, -3, -3, 83, 30, 100, -21, 1, -53, 7, -87, -41, 9, 77, 3, -81
    0xdee5900e, 0xc008f594, 0x223db6e2, 0x225f013, 0x53fdfdf7, 0x1eb641e, 0xd7a907cb, 0xaf034d09,
    // -6, -6, -1, 0, -50, -57, -29, -15, -3, 68, 109, -30, 27, 42, -32, 87, -23, 27, -31, 95, 46, -18, -7, 39, 31, -25, -46, -44, 36, -43, 0, -1
    0xfffafa, 0xf1e3c7ce, 0xe26d44fd, 0x57e02a1b, 0x5fe11be9, 0x27f9ee2e, 0xd4d2e71f, 0xff00d524,
    // -11, -4, 77, -34, 14, 8, 67, -6, -1, -27, -8, -16, -52, -14, 5, -7, -54, 23, -51, 7, -39, -31, 72, 58, 66, 5, -8, -7, 39, -20, 45, 18
    0xde4dfcf5, 0xfa43080e, 0xf0f8e5ff, 0xf905f2cc, 0x7cd17ca, 0x3a48e1d9, 0xf9f80542, 0x122dec27,
    // -12, 56, 13, -13, 33, 15, 25, -8, 20, 11, -8, -17, -74, 41, -5, 1, 29, -3, 27, 0, -16, 2, -12, 16, -17, 24, 27, 7, -30, 6, 23, -82
    0xf30d38f4, 0xf8190f21, 0xeff80b14, 0x1fb29b6, 0x1bfd1d, 0x10f402f0, 0x71b18ef, 0xae1706e2,
    // 2, -30, 24, 11, 4, -46, -16, 63, -36, -19, 34, -11, -8, -30, -13, 3, 22, -20, -1, -51, 69, -36, -20, -7, -10, -12, -109, -51, 10, 49, 36, 76
    0xb18e202, 0x3ff0d204, 0xf522eddc, 0x3f3e2f8, 0xcdffec16, 0xf9ecdc45, 0xcd93f4f6, 0x4c24310a,
    // 32, -43, -9, -9, 40, 46, 3, 39, 95, -24, 57, -23, -22, -9, 36, -93, 2, -35, -22, -38, 64, -7, 35, 19, 30, -14, -26, 0, -55, -5, 38, 16
    0xf7f7d520, 0x27032e28, 0xe939e85f, 0xa324f7ea, 0xdaeadd02, 0x1323f940, 0xe6f21e, 0x1026fbc9,
    // 6, -13, -35, -5, 25, 73, -14, -62, 35, 25, -50, -20, -3, 81, 5, 19, 5, -5, -8, 2, 82, 22, -9, 26, -34, 12, 21, 25, 3, -54, -40, 17
    0xfbddf306, 0xc2f24919, 0xecce1923, 0x130551fd, 0x2f8fb05, 0x1af71652, 0x19150cde, 0x11d8ca03,
    // -23, 97, 2, -25, -91, -62, -16, 2, -21, 35, -22, 19, 68, -15, -46, -30, 29, -9, -6, -86, -29, 26, -16, 65, 17, -88, -46, 38, 53, -11, -5, -1
    0xe70261e9, 0x2f0c2a5, 0x13ea23eb, 0xe2d2f144, 0xaafaf71d, 0x41f01ae3, 0x26d2a811, 0xfffbf535,
    // -7, 11, -48, -39, -4, -18, 10, -19, 18, 22, -14, 18, 33, 7, -40, 2, 54, 5, 32, 30, 34, -7, -22, 40, -46, -54, 24, 26, 6, -89, -79, -1
    0xd9d00bf9, 0xed0aeefc, 0x12f21612, 0x2d80721, 0x1e200536, 0x28eaf922, 0x1a18cad2, 0xffb1a706,
    // -27, -50, 44, 8, 10, -30, 47, -38, -11, 4, 4, -14, 36, -57, 8, 17, -13, 39, -58, 34, -36, 34, -25, 16, 5, 18, 6, 38, 36, 49, 22, -38
    0x82ccee5, 0xda2fe20a, 0xf20404f5, 0x1108c724, 0x22c627f3, 0x10e722dc, 0x26061205, 0xda163124,
    // 76, 46, -4, -37, -27, -30, 13, -25, -29, 23, 9, -18, 19, -28, 4, 7, -54, 12, -14, 33, -19, -32, -19, -5, -21, 4, -34, -6, -58, -32, 19, -17
    0xdbfc2e4c, 0xe70de2e5, 0xee0917e3, 0x704e413, 0x21f20cca, 0xfbede0ed, 0xfade04eb, 0xef13e0c6,
    // 9, -16, 0, -5, 17, -58, -14, 43, 9, 20, -19, -70, 19, 0, 17, 10, 17, 35, 12, -8, 0, 17, -11, -21, -55, 50, 44, -19, 12, -26, -9, 26
    0xfb00f009, 0x2bf2c611, 0xbaed1409, 0xa110013, 0xf80c2311, 0xebf51100, 0xed2c32c9, 0x1af7e60c,
    // -9, 3, -75, -52, 25, -81, -2, -96, 7, 39, -73, 14, 74, -64, 23, -18, 6, 4, 44, 72, -16, 88, 8, -12, -57, 13, 101, 15, -17, -5, 9, -92
    0xccb503f7, 0xa0feaf19, 0xeb72707, 0xee17c04a, 0x482c0406, 0xf40858f0, 0xf650dc7, 0xa409fbef,
    // 54, -46, 31, -41, -34, -52, 11, 27, -90, -3, -12, -35, 42, -9, 23, 85, 40, 85, 10, 66, -40, 43, 23, -49, 28, -81, -53, -4, 28, 34, 17, 33
    0xd71fd236, 0x1b0bccde, 0xddf4fda6, 0x5517f72a, 0x420a5528, 0xcf172bd8, 0xfccbaf1c, 0x2111221c,
    // 26, -26, 24, -11, -76, -25, -40, 24, -49, -70, 45, 80, -31, 24, -3, 9, -13, 17, 14, -33, -41, 8, -54, 34, 17, 65, -50, -34, -43, 44, -36, 34
    0xf518e61a, 0x18d8e7b4, 0x502dbacf, 0x9fd18e1, 0xdf0e11f3, 0x22ca08d7, 0xdece4111, 0x22dc2cd5,
    // -23, -1, -56, -40, 19, -10, 23, -77, 40, -20, -21, -34, 17, -79, 5, -38, 30, -55, -10, -47, 17, -58, 61, -18, -6, -66, 18, -76, -90, -27, -72, -25
    0xd8c8ffe9, 0xb317f613, 0xdeebec28, 0xda05b111, 0xd1f6c91e, 0xee3dc611, 0xb412befa, 0xe7b8e5a6,
    // -27, 8, 14, -95, 3, -5, -16, -37, 9, 21, -15, -69, -6, -22, 15, 8, -11, 33, -9, 0, 32, -27, -5, 53, 41, -85, -47, -24, 12, 25, -29, 5
    0xa10e08e5, 0xdbf0fb03, 0xbbf11509, 0x80feafa, 0xf721f5, 0x35fbe520, 0xe8d1ab29, 0x5e3190c,
    // 18, -13, 73, 5, 8, 22, 36, -24, -2, -16, 15, 6, 28, -22, 25, -44, 21, -2, -26, -11, 14, 78, -66, 33, -33, -24, 2, 2, -5, 50, -11, -25
    0x549f312, 0xe8241608, 0x60ff0fe, 0xd419ea1c, 0xf5e6fe15, 0x21be4e0e, 0x202e8df, 0xe7f532fb,
    // 44, -19, 73, -31, 50, 11, -50, 21, -74, 40, -26, -45, -51, -8, 15, 23, 10, -32, 21, -18, -71, -11, -18, -7, -2, -28, 36, -75, -56, 73, 33, 30
    0xe149ed2c, 0x15ce0b32, 0xd3e628b6, 0x170ff8cd, 0xee15e00a, 0xf9eef5b9, 0xb524e4fe, 0x1e2149c8,
    // 23, 63, 59, 22, -2, 3, -27, 11, 0, -13, 43, -55, -56, 1, -46, 13, 3, 11, 4, 22, 55, 64, -6, -14, 43, 47, 21, -65, -46, 42, 21, 34
    0x163b3f17, 0xbe503fe, 0xc92bf300, 0xdd201c8, 0x16040b03, 0xf2fa4037, 0xbf152f2b, 0x22152ad2,
    // 1, 31, -41, -54, 49, 38, -29, 60, -49, 20, 10, -16, 59, 7, 56, 27, -50, -9, -35, -26, 90, -17, 16, -25, -7, 33, 19, -31, -44, -21, 43, 50
    0xcad71f01, 0x3ce32631, 0xf00a14cf, 0x1b38073b, 0xe6ddf7ce, 0xe710ef5a, 0xe11321f9, 0x322bebd4,
    // -13, 30, 37, 2, 2, 42, -64, 46, 28, -26, -23, -9, 63, 53, 26, -49, -19, -18, 9, -39, 10, -35, -24, 3, -17, -77, 3, 2, 21, 76, -46, -9
    0x2251ef3, 0x2ec02a02, 0xf7e9e61c, 0xcf1a353f, 0xd909eeed, 0x3e8dd0a, 0x203b3ef, 0xf7d24c15,
    // 11, -3, 16, -46, -4, -13, -36, 1, 10, 16, 3, -33, 9, 16, 36, 16, 28, 11, 50, 18, -22, -16, -43, -32, -15, -22, -13, 4, -6, -34, -15, 8
    0xd210fd0b, 0x1dcf3fc, 0xdf03100a, 0x10241009, 0x12320b1c, 0xe0d5f0ea, 0x4f3eaf1, 0x8f1defa,
    // -20, 33, 23, 63, 11, 9, -27, -50, -12, 5, 16, 0, 16, 0, -15, 30, -84, 8, 0, 12, 25, -10, -43, 17, 3, 25, 18, 9, -10, -3, -37, -77
    0x3f1721ec, 0xcee5090b, 0x1005f4, 0x1ef10010, 0xc0008ac, 0x11d5f619, 0x9121903, 0xb3dbfdf6,
    // -25, -19, 29, -16, -8, -41, 67, -30, 41, 127, 22, 41, -19, 23, 41, 7, 43, -43, -29, -26, -49, 21, -13, 64, -9, -21, 50, 50, -90, -57, -68, 15
    0xf01dede7, 0xe243d7f8, 0x29167f29, 0x72917ed, 0xe6e3d52b, 0x40f315cf, 0x3232ebf7, 0xfbcc7a6,
    // -8, -50, -19, 11, 5, 1, 104, -45, 11, -1, -15, -10, -29, -42, -25, 13, 42, 12, 14, 34, -86, -65, -51, -27, 47, 9, -9, 9, -16, -44, -42, -7
    0xbedcef8, 0xd3680105, 0xf6f1ff0b, 0xde7d6e3, 0x220e0c2a, 0xe5cdbfaa, 0x9f7092f, 0xf9d6d4f0,
    // 29, -7, -5, -8, -24, 13, -3, -1, 23, 23, -14, -57, 5, -43, 6, -43, -42, 13, -60, -27, -4, 57, 5, 93, 25, -25, 8, 20, -47, 38, 20, -49
    0xf8fbf91d, 0xfffd0de8, 0xc7f21717, 0xd506d505, 0xe5c40dd6, 0x5d0539fc, 0x1408e719, 0xcf1426d1,
    // 16, -41, 45, -41, 7, 24, 39, -21, -15, -19, 1, 9, 26, 37, 16, 35, 41, 13, 17, 41, 12, -66, -15, -17, -7, -19, -19, -8, 23, -40, 75, -26
    0xd72dd710, 0xeb271807, 0x901edf1, 0x2310251a, 0x29110d29, 0xeff1be0c, 0xf8ededf9, 0xe64bd817,
    // -36, 17, -26, 48, 44, 27, 21, 48, -89, -43, -22, -24, 7, 16, 26, -36, 5, -17, -1, 8, 51, 25, -15, 47, 11, 23, 29, -72, 28, 92, 55, -11
    0x30e611dc, 0x30151b2c, 0xe8ead5a7, 0xdc1a1007, 0x8ffef05, 0x2ff11933, 0xb81d170b, 0xf5375c1c,
    // -41, 41, -15, -4, -22, 19, 27, -29, -16, -15, -9, 70, 59, -45, -16, -7, 13, -8, 5, 24, 75, 19, -36, 64, 65, -14, 39, -94, -8, -33, -69, -11
    0xfcf129d7, 0xe31b13ea, 0x46f7f1f0, 0xf9f0d33b, 0x1805f80d, 0x40dc134b, 0xa227f241, 0xf5bbdff8,
    // 10, -5, 19, 86, 9, -11, -8, -5, -4, 15, 10, 49, -25, -11, -56, -16, -31, 45, -11, 4, -11, -11, 23, -15, 8, 59, 11, 13, -9, -15, 23, 15
    0x5613fb0a, 0xfbf8f509, 0x310a0ffc, 0xf0c8f5e7, 0x4f52de1, 0xf117f5f5, 0xd0b3b08, 0xf17f1f7,
    // 12, 14, -62, -18, 10, -13, -18, 48, 3, 16, 4, 33, -43, 25, 6, -29, 45, 2, 14, -8, -19, -7, 84, 17, -16, 15, 23, 11, -5, -12, 14, 20
    0xeec20e0c, 0x30eef30a, 0x21041003, 0xe30619d5, 0xf80e022d, 0x1154f9ed, 0xb170ff0, 0x140ef4fb,
    // -54, 21, -17, -1, -42, -8, -66, -46, 36, -4, 2, -14, 1, -11, 78, -21, 6, 24, -16, 30, -42, -29, 42, 11, -8, 30, -5, 12, 52, -3, -2, 0
    0xffef15ca, 0xd2bef8d6, 0xf202fc24, 0xeb4ef501, 0x1ef01806, 0xb2ae3d6, 0xcfb1ef8, 0xfefd34,
    // -37, -6, -19, 2, 8, -9, -23, -48, -11, 40, 27, 76, -41, 25, -8, -21, 10, 9, 30, 2, -28, 30, -31, -3, -13, 68, 8, 12, 33, 38, -66, -24
    0x2edfadb, 0xd0e9f708, 0x4c1b28f5, 0xebf819d7, 0x21e090a, 0xfde11ee4, 0xc0844f3, 0xe8be2621,
    // -31, -10, 55, 11, -6, -65, -26, -58, 20, -22, 39, -70, -15, 3, -28, -76, 22, -36, 14, 61, 36, -30, 15, -22, -8, -53, -28, 29, 1, 20, -19, -5
    0xb37f6e1, 0xc6e6bffa, 0xba27ea14, 0xb4e403f1, 0x3d0edc16, 0xea0fe224, 0x1de4cbf8, 0xfbed1401,
    // 7, 23, 7, 6, -8, -62, -41, 50, 65, 17, -15, 41, 23, 37, 58, -63, -47, -32, -20, -52, -48, 58, -31, 19, -84, -16, 78, 1, -31, 37, -10, 40
    0x6071707, 0x32d7c2f8, 0x29f11141, 0xc13a2517, 0xccece0d1, 0x13e13ad0, 0x14ef0ac, 0x28f625e1,
    // -38, -11, -17, 40, -8, -13, 44, 38, -18, 127, 35, 1, -1, 17, -33, -36, -11, 11, 17, -25, 28, -8, 15, -21, 3, 32, -57, -26, -51, 13, 18, 35
    0x28eff5da, 0x262cf3f8, 0x1237fee, 0xdcdf11ff, 0xe7110bf5, 0xeb0ff81c, 0xe6c72003, 0x23120dcd,
    // 21, 4, -38, -26, 1, 33, 41, -14, -14, -19, 28, 69, 12, -36, 15, -66, 6, -47, -47, -40, 49, 22, 63, 60, -8, -71, -10, -13, -24, 13, 13, -16
    0xe6da0415, 0xf2292101, 0x451cedf2, 0xbe0fdc0c, 0xd8d1d106, 0x3c3f1631, 0xf3f6b9f8, 0xf00d0de8,
    // -3, -34, 51, -9, -1, -13, 36, 5, 21, 13, 14, -88, -41, -47, -11, -7, -16, 10, 14, -1, -6, 30, 20, 12, 55, 108, 2, 55, 6, -27, -12, 1
    0xf733defd, 0x524f3ff, 0xa80e0d15, 0xf9f5d1d7, 0xff0e0af0, 0xc141efa, 0x37026c37, 0x1f4e506,
    // 67, -33, -30, -42, 17, -8, 8, 29, 17, -6, 5, -36, -53, -14, 8, -3, 78, 13, -14, 29, -6, 73, 73, -37, -23, 34, 13, 21, -28, 29, -2, -12
    0xd6e2df43, 0x1d08f811, 0xdc05fa11, 0xfd08f2cb, 0x1df20d4e, 0xdb4949fa, 0x150d22e9, 0xf4fe1de4,
    // 6, -10, 22, -73, -6, 1, 29, -3, -2, 11, 10, -24, -13, -2, 48, 57, 16, -53, -2, 27, 33, 16, -9, -1, 45, -34, -22, 12, -12, 7, -11, -8
    0xb716f606, 0xfd1d01fa, 0xe80a0bfe, 0x3930fef3, 0x1bfecb10, 0xfff71021, 0xceade2d, 0xf8f507f4,
    // 45, -22, 14, -15, -1, 4, -15, -23, 31, -14, 4, -49, 38, -13, 43, -35, 30, -23, 76, -26, 2, 44, -67, 30, -39, -22, 7, -3, 6, 25, 25, 29
    0xf10eea2d, 0xe9f104ff, 0xcf04f21f, 0xdd2bf326, 0xe64ce91e, 0x1ebd2c02, 0xfd07ead9, 0x1d191906,
    // -6, -6, 41, -73, 23, 8, 32, -5, -7, -7, -24, -80, -32, -59, 20, -12, -47, -30, -57, -3, 7, 17, 37, 7, 43, -44, -1, -7, 17, 49, 50, -20
    0xb729fafa, 0xfb200817, 0xb0e8f9f9, 0xf414c5e0, 0xfdc7e2d1, 0x7251107, 0xf9ffd42b, 0xec323111,
    // 80, 10, 8, -62, -13, -8, 21, 47, 15, -10, -6, -62, -43, -18, -14, 3, 74, 5, 32, 11, 9, 1, -70, -23, -17, -12, 3, -25, -5, -35, 40, 45
    0xc2080a50, 0x2f15f8f3, 0xc2faf60f, 0x3f2eed5, 0xb20054a, 0xe9ba0109, 0xe703f4ef, 0x2d28ddfb,
    // 25, 20, 13, -1, 6, 6, 22, 31, -23, 32, -7, 30, 18, -5, -50, 18, 35, 70, 43, -7, 6, 1, -5, 26, -27, 60, 20, -37, -41, 55, 2, -7
    0xff0d1419, 0x1f160606, 0x1ef920e9, 0x12cefb12, 0xf92b4623, 0x1afb0106, 0xdb143ce5, 0xf90237d7,
    // -57, 40, -34, -26, -11, 5, 25, -76, 3, -10, -13, -52, 36, 11, 4, -6, 12, -4, -57, 10, 45, 42, 3, 14, 1, -13, -2, 8, 1, 3, -53, -86
    0xe6de28c7, 0xb41905f5, 0xccf3f603, 0xfa040b24, 0xac7fc0c, 0xe032a2d, 0x8fef301, 0xaacb0301,
};
static const uint embedded_decoder3_ResidualBlock_2_body_pw_contract_bias_dwords[16] = {
    // -0.0003781, -0.0002997, -0.0002532, -0.0008354, 6.64e-05, 7.89e-05, -0.0001024, -3.04e-06, -7e-07, 0.0004618, -3.9e-06, -0.0002553, 5.484e-05, 0.000135, 0.0005045, 0.00011235
    0x8ce98e32, 0x92d88c26, 0x52c045a, 0x803386b6, 0xf91800c, 0x8c2f8041, 0x86c0398, 0x75d1022,
    // 0.0001938, 0.0002828, 8.935e-05, -0.0002042, 0.0001833, 0.000973, -0.0001842, -0.0002223, 7.68e-05, 0.0002458, 1.615e-05, 0.0004625, 0.0002706, 6.56e-05, 0.0001185, -4.13e-05
    0xca20a5a, 0x8ab105db, 0x13f90a02, 0x8b498a09, 0xc070508, 0xf94010f, 0x44d0c6f, 0x82b507c4,
};
static const uint embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[512] = {
    // -28, -37, -23, 3, 12, -37, 27, 29, 17, -15, 34, -19, -9, -5, -40, 3, 10, 59, 102, 42, 1, -34, 19, 15, -15, 39, 42, 30, 65, -51, -18, -27
    0x3e9dbe4, 0x1d1bdb0c, 0xed22f111, 0x3d8fbf7, 0x2a663b0a, 0xf13de01, 0x1e2a27f1, 0xe5eecd41,
    // -19, -17, 8, -2, -6, 18, 7, 19, 0, 6, -21, -8, 7, -24, 8, 0, -2, -27, 67, 76, -6, 25, 45, 16, -9, 56, 19, 28, -58, 13, -41, -20
    0xfe08efed, 0x130712fa, 0xf8eb0600, 0x8e807, 0x4c43e5fe, 0x102d19fa, 0x1c1338f7, 0xecd70dc6,
    // 18, -49, -24, -31, 21, -18, 37, 46, -12, 22, 17, 15, -13, 19, -43, 34, 19, 42, 11, 0, -63, 2, 9, 12, -19, -12, -57, 9, 45, -3, 5, 20
    0xe1e8cf12, 0x2e25ee15, 0xf1116f4, 0x22d513f3, 0xb2a13, 0xc0902c1, 0x9c7f4ed, 0x1405fd2d,
    // -10, 73, 63, 25, 12, -18, 36, -6, -21, 59, 34, 18, 56, -28, -49, -29, -44, 30, -53, -83, 3, 74, -99, -47, 69, 24, 43, 95, -58, -11, -34, -28
    0x193f49f6, 0xfa24ee0c, 0x12223beb, 0xe3cfe438, 0xadcb1ed4, 0xd19d4a03, 0x5f2b1845, 0xe4def5c6,
    // -7, -26, -55, -38, -4, 7, 15, 34, -31, -35, -15, -14, -1, -20, 5, -15, -14, 12, 30, 7, 10, -5, 61, 4, 26, -8, -37, -11, 27, -38, 5, 7
    0xdac9e6f9, 0x220f07fc, 0xf2f1dde1, 0xf105ecff, 0x71e0cf2, 0x43dfb0a, 0xf5dbf81a, 0x705da1b,
    // 0, 6, -19, -13, 36, -2, 18, -37, 3, 2, -25, 12, -13, -53, 2, 21, -23, 17, -10, 23, 80, 0, -35, -28, -18, 35, 7, 5, 57, 46, 27, 2
    0xf3ed0600, 0xdb12fe24, 0xce70203, 0x1502cbf3, 0x17f611e9, 0xe4dd0050, 0x50723ee, 0x21b2e39,
    // 17, 28, 24, 33, -27, 37, -63, -19, 27, 18, -19, -33, 38, -64, 29, -11, 10, 121, 14, -4, 85, 3, -5, 10, 34, 66, 22, -29, -26, -2, -64, 22
    0x21181c11, 0xedc125e5, 0xdfed121b, 0xf51dc026, 0xfc0e790a, 0xafb0355, 0xe3164222, 0x16c0fee6,
    // 44, -32, -58, -34, 46, -13, 32, -10, -29, -22, 11, 8, -29, -46, -4, 20, -36, 36, -1, 3, -44, 64, 40, -38, 58, 21, -25, 5, -1, -17, 36, -57
    0xdec6e02c, 0xf620f32e, 0x80beae3, 0x14fcd2e3, 0x3ff24dc, 0xda2840d4, 0x5e7153a, 0xc724efff,
    // -22, -22, 39, 54, 61, -35, 11, -3, 24, 22, 21, 33, -35, -37, -2, 2, 16, 14, 51, 8, -12, 59, -48, 9, -15, 0, -18, 42, -28, 49, 56, 40
    0x3627eaea, 0xfd0bdd3d, 0x21151618, 0x2fedbdd, 0x8330e10, 0x9d03bf4, 0x2aee00f1, 0x283831e4,
    // 13, -1, -13, 9, -6, -30, 23, 4, 24, -33, 37, -11, -19, 42, 0, -3, 5, -11, 27, -16, -30, -24, -63, 4, -14, 10, 14, -40, 40, 41, -19, 18
    0x9f3ff0d, 0x417e2fa, 0xf525df18, 0xfd002aed, 0xf01bf505, 0x4c1e8e2, 0xd80e0af2, 0x12ed2928,
    // 6, -43, -23, -35, -13, -24, 40, 62, -15, -33, 61, -5, -34, 3, -53, -8, -12, -13, -44, -1, 12, 69, 45, -17, -55, 101, -40, 39, 67, -38, 46, 40
    0xdde9d506, 0x3e28e8f3, 0xfb3ddff1, 0xf8cb03de, 0xffd4f3f4, 0xef2d450c, 0x27d865c9, 0x282eda43,
    // 18, -5, -17, 4, 49, -12, -7, -53, 7, 4, -17, 16, -26, -48, -2, 1, -11, -19, 19, 20, -32, 0, 34, 51, 24, 67, 40, -9, -39, 33, 26, -73
    0x4effb12, 0xcbf9f431, 0x10ef0407, 0x1fed0e6, 0x1413edf5, 0x332200e0, 0xf7284318, 0xb71a21d9,
    // 1, -21, 17, 13, 21, -18, -1, 10, 12, 1, 6, -3, 4, -2, -5, -26, -5, 14, -12, -29, -13, -31, -7, 28, 22, -29, 14, -7, 14, -3, 3, 77
    0xd11eb01, 0xaffee15, 0xfd06010c, 0xe6fbfe04, 0xe3f40efb, 0x1cf9e1f3, 0xf90ee316, 0x4d03fd0e,
    // -13, -2, 18, 1, -9, 10, -18, 15, 13, 6, 10, 0, 15, 20, -8, 6, -13, 33, 9, 5, 26, 0, 17, -22, -57, -11, 28, -9, -30, 12, 7, -6
    0x112fef3, 0xfee0af7, 0xa060d, 0x6f8140f, 0x50921f3, 0xea11001a, 0xf71cf5c7, 0xfa070ce2,
    // 13, 0, 2, -11, -23, -15, 14, -8, 6, 2, -16, -4, 6, 46, 22, 19, 4, 23, 6, 17, 6, 34, 1, -34, -13, -20, 13, 2, 53, 42, -39, 23
    0xf502000d, 0xf80ef1e9, 0xfcf00206, 0x13162e06, 0x11061704, 0xde012206, 0x20decf3, 0x17d92a35,
    // 25, 1, 78, 21, -28, 16, -44, 6, 30, 38, 35, -1, -1, -11, -29, -12, 1, 12, -57, 26, -5, -15, 58, 1, -20, 81, 45, 11, -46, -49, -55, 35
    0x154e0119, 0x6d410e4, 0xff23261e, 0xf4e3f5ff, 0x1ac70c01, 0x13af1fb, 0xb2d51ec, 0x23c9cfd2,
    // -68, -7, 11, 17, 20, -14, 13, -44, -3, -16, 24, 3, -18, 6, -17, 36, -1, 53, 86, 26, -6, -23, 14, -2, -5, 60, 69, 19, 74, -31, -28, -37
    0x110bf9bc, 0xd40df214, 0x318f0fd, 0x24ef06ee, 0x1a5635ff, 0xfe0ee9fa, 0x13453cfb, 0xdbe4e14a,
    // 3, -4, -10, -12, 9, 7, 25, 19, -7, 0, -3, 1, 3, -29, 8, -3, 4, -25, 83, 81, -2, 29, 45, 23, -7, 45, 4, 30, -61, 5, -41, -18
    0xf4f6fc03, 0x13190709, 0x1fd00f9, 0xfd08e303, 0x5153e704, 0x172d1dfe, 0x1e042df9, 0xeed705c3,
    // -35, 15, 10, -9, 7, -24, 32, 8, -9, 62, 33, -40, 47, 25, -21, 40, 7, 33, 29, -19, -63, -16, -1, 13, 6, -26, -34, -7, 38, 28, 30, 17
    0xf70a0fdd, 0x820e807, 0xd8213ef7, 0x28eb192f, 0xed1d2107, 0xdfff0c1, 0xf9dee606, 0x111e1c26,
    // 57, -13, 24, -23, 8, -48, 46, 84, -8, 11, 15, 66, -14, -30, -77, -58, -31, 26, -60, -54, 14, 88, -90, -44, 35, 26, 2, 109, -42, -33, -52, -21
    0xe918f339, 0x542ed008, 0x420f0bf8, 0xc6b3e2f2, 0xcac41ae1, 0xd4a6580e, 0x6d021a23, 0xebccdfd6,
    // -54, 26, -31, -10, -16, 20, 8, -19, -38, -8, -10, -52, 42, -14, 27, 10, -20, 13, 23, -7, 7, -18, 58, -1, 40, -9, -17, -18, 19, -21, 16, 2
    0xf6e11aca, 0xed0814f0, 0xccf6f8da, 0xa1bf22a, 0xf9170dec, 0xff3aee07, 0xeeeff728, 0x210eb13,
    // -20, -13, -13, -4, 13, -1, -3, -5, 4, 5, -22, 1, -2, -46, 10, 1, -36, 5, -9, 18, 72, 0, -45, -26, -20, 51, 22, -12, 59, 49, 42, -7
    0xfcf3f3ec, 0xfbfdff0d, 0x1ea0504, 0x10ad2fe, 0x12f705dc, 0xe6d30048, 0xf41633ec, 0xf92a313b,
    // 51, -25, 11, -39, 2, 50, -50, -5, -2, -34, -26, 27, -34, -65, 17, -28, 25, 113, 8, 0, 74, 20, -5, -5, 6, 75, -10, -1, 8, -18, -86, 28
    0xd90be733, 0xfbce3202, 0x1be6defe, 0xe411bfde, 0x87119, 0xfbfb144a, 0xfff64b06, 0x1caaee08,
    // -35, 2, -7, 28, 7, -19, -19, 12, 5, 20, -9, -67, 35, -26, 34, 19, -40, 24, -4, -30, -34, 45, 29, -44, 76, 39, 17, -29, 4, 23, 60, -72
    0x1cf902dd, 0xceded07, 0xbdf71405, 0x1322e623, 0xe2fc18d8, 0xd41d2dde, 0xe311274c, 0xb83c1704,
    // -26, -20, 30, 64, 54, -65, 3, 42, 31, 45, 26, 15, -24, -25, 4, -5, 17, 15, 54, 3, -4, 51, -39, 6, -8, -1, -11, 42, -29, 52, 69, 34
    0x401eece6, 0x2a03bf36, 0xf1a2d1f, 0xfb04e7e8, 0x3360f11, 0x6d933fc, 0x2af5fff8, 0x224534e3,
    // 1, 4, 3, 19, -4, -11, 6, -30, 19, -42, 26, 1, -27, 47, 3, 15, 2, -10, 19, -20, -32, -19, -64, 0, -16, 19, 27, -48, 46, 44, -31, 17
    0x13030401, 0xe206f5fc, 0x11ad613, 0xf032fe5, 0xec13f602, 0xc0ede0, 0xd01b13f0, 0x11e12c2e,
    // -66, 39, 50, 12, -5, 4, 24, -65, -38, 24, 77, -50, 17, 7, -23, 27, -21, -22, -41, -17, 3, 43, 36, -13, -25, 81, 2, 17, 37, 2, 72, 26
    0xc3227be, 0xbf1804fb, 0xce4d18da, 0x1be90711, 0xefd7eaeb, 0xf3242b03, 0x110251e7, 0x1a480225,
    // 14, -5, -13, 34, 36, -24, -33, 23, 32, 11, -30, 4, -16, -41, 6, 2, -16, -18, 17, 3, -21, 9, 41, 47, 29, 77, 59, -22, -24, 35, 24, -81
    0x22f3fb0e, 0x17dfe824, 0x4e20b20, 0x206d7f0, 0x311eef0, 0x2f2909eb, 0xea3b4d1d, 0xaf1823e8,
    // 4, -7, 4, 12, 23, -20, 7, 7, 15, 0, 8, 7, 3, -3, -4, -18, -6, 22, -14, -34, -11, -27, 0, 27, 25, -27, 10, -2, 13, -8, -3, 77
    0xc04f904, 0x707ec17, 0x708000f, 0xeefcfd03, 0xdef216fa, 0x1b00e5f5, 0xfe0ae519, 0x4dfdf80d,
    // 11, 5, 12, -22, 8, 18, 6, -9, -4, 1, 19, 8, 3, 14, -22, 4, 0, 40, 12, 10, 24, 6, 7, -7, -63, -27, 3, 4, -31, 7, 8, 3
    0xea0c050b, 0xf7061208, 0x81301fc, 0x4ea0e03, 0xa0c2800, 0xf9070618, 0x403e5c1, 0x30807e1,
    // 6, -1, 7, -11, -23, -1, 4, -26, 3, -10, -25, 0, -6, 44, 22, 19, 2, 19, 1, 16, -1, 35, -4, -34, -17, -12, 17, -1, 57, 45, -44, 22
    0xf507ff06, 0xe604ffe9, 0xe7f603, 0x13162cfa, 0x10011302, 0xdefc23ff, 0xff11f4ef, 0x16d42d39,
    // 66, 4, 75, -17, 10, 23, -12, -12, 9, 35, 50, 40, -22, -22, -45, 0, 15, 16, -32, 32, -6, -9, 59, 9, -22, 57, 24, 27, -50, -59, -63, 46
    0xef4b0442, 0xf4f4170a, 0x28322309, 0xd3eaea, 0x20e0100f, 0x93bf7fa, 0x1b1839ea, 0x2ec1c5ce,
    // -45, 5, -27, 6, 34, -19, 24, 3, 32, 4, -2, 16, 26, -3, -21, 6, 10, 61, 63, 56, -19, -63, 33, -1, -18, 19, 39, 60, 74, -22, -26, -44
    0x6e505d3, 0x318ed22, 0x10fe0420, 0x6ebfd1a, 0x383f3d0a, 0xff21c1ed, 0x3c2713ee, 0xd4e6ea4a,
    // -29, -20, -14, -1, 11, 7, -1, 19, -4, 30, -3, -6, 5, -25, 11, -16, -2, -34, 85, 45, 6, 50, 41, 6, -8, 73, 10, 23, -39, -4, -44, -25
    0xfff2ece3, 0x13ff070b, 0xfafd1efc, 0xf00be705, 0x2d55defe, 0x6293206, 0x170a49f8, 0xe7d4fcd9,
    // 20, -13, -25, -27, -20, -27, 28, -20, 25, 0, 44, 21, 26, 6, -18, -39, 28, 18, 39, -9, -69, -19, -14, -5, -2, -3, -39, 12, 39, 24, 35, 17
    0xe5e7f314, 0xec1ce5ec, 0x152c0019, 0xd9ee061a, 0xf727121c, 0xfbf2edbb, 0xcd9fdfe, 0x11231827,
    // -28, 18, 57, 60, -2, -21, 106, 38, -68, 16, 5, -11, -5, -37, -62, 41, -63, 25, -40, -71, 8, 81, -91, -37, 59, 53, 24, 70, -91, -15, -44, -12
    0x3c3912e4, 0x266aebfe, 0xf50510bc, 0x29c2dbfb, 0xb9d819c1, 0xdba55108, 0x4618353b, 0xf4d4f1a5,
    // 12, 3, -58, -53, -21, 14, -58, -7, 2, -21, 7, -6, 38, -22, -8, -42, 2, 14, 43, 17, 15, 12, 40, -14, 34, -19, -12, 14, 34, -21, 9, 6
    0xcbc6030c, 0xf9c60eeb, 0xfa07eb02, 0xd6f8ea26, 0x112b0e02, 0xf2280c0f, 0xef4ed22, 0x609eb22,
    // 1, 12, 6, -29, 4, -2, 16, -34, -13, 11, -34, 7, -6, -44, -3, 26, -31, 27, -23, 36, 72, -33, -23, -3, -25, 15, -2, 10, 46, 44, 33, 2
    0xe3060c01, 0xde10fe04, 0x7de0bf3, 0x1afdd4fa, 0x24e91be1, 0xfde9df48, 0xafe0fe7, 0x2212c2e,
    // -21, -1, 12, 44, 44, 36, -3, 17, -17, 14, -62, -47, 9, -59, 60, 36, 7, 102, -33, -2, 70, -28, 18, -8, 18, 46, 1, -35, -7, 20, -75, -2
    0x2c0cffeb, 0x11fd242c, 0xd1c20eef, 0x243cc509, 0xfedf6607, 0xf812e446, 0xdd012e12, 0xfeb514f9,
    // 52, 17, 8, -43, -49, -15, 15, -50, -20, -62, 7, 16, 19, -36, 0, -16, -25, 40, -10, 53, -53, -3, 25, -5, 64, -10, -11, 19, -34, 23, 71, -53
    0xd5081134, 0xce0ff1cf, 0x1007c2ec, 0xf000dc13, 0x35f628e7, 0xfb19fdcb, 0x13f5f640, 0xcb4717de,
    // -29, -8, 37, 75, 43, -16, 27, 2, 15, 11, 8, 22, -11, -35, -1, -5, 16, 25, 30, 31, -35, 21, -41, 32, -23, -7, -30, 46, -43, 60, 65, 39
    0x4b25f8e3, 0x21bf02b, 0x16080b0f, 0xfbffddf5, 0x1f1e1910, 0x20d715dd, 0x2ee2f9e9, 0x27413cd5,
    // 4, 16, 2, -2, -10, -23, 12, 16, 12, -17, 15, -8, 6, 52, -7, 25, -1, 5, 1, 17, -41, -50, -50, 18, -24, -17, 4, -25, 32, 46, -22, 16
    0xfe021004, 0x100ce9f6, 0xf80fef0c, 0x19f93406, 0x110105ff, 0x12ceced7, 0xe704efe8, 0x10ea2e20,
    // 20, 1, -58, -48, -10, -14, -26, 8, 22, -63, 78, -24, 49, 1, -32, -67, 7, -2, -77, 27, -9, 57, 29, -9, -36, 76, 5, 52, 28, -10, 48, 44
    0xd0c60114, 0x8e6f2f6, 0xe84ec116, 0xbde00131, 0x1bb3fe07, 0xf71d39f7, 0x34054cdc, 0x2c30f61c,
    // 20, 16, 25, 11, 9, -7, 1, -35, -13, 20, -39, 47, -20, -40, -19, 29, -21, -1, 4, 41, -31, -25, 53, 75, 15, 48, 27, 0, -38, 27, 28, -73
    0xb191014, 0xdd01f909, 0x2fd914f3, 0x1dedd8ec, 0x2904ffeb, 0x4b35e7e1, 0x1b300f, 0xb71c1bda,
    // -1, -18, 1, 18, 22, -11, -4, 23, 12, 2, 10, -5, 1, -10, -15, -6, -7, 20, -2, -29, -13, -17, -7, 23, 19, -16, -3, -6, 10, -12, 0, 81
    0x1201eeff, 0x17fcf516, 0xfb0a020c, 0xfaf1f601, 0xe3fe14f9, 0x17f9eff3, 0xfafdf013, 0x5100f40a,
    // -11, -14, -10, 13, 28, 13, 9, 13, 27, 8, 5, -17, 2, 16, 15, -16, -8, 23, 10, -20, 23, 11, 1, -30, -55, -4, 24, -17, -17, 6, 10, -16
    0xdf6f2f5, 0xd090d1c, 0xef05081b, 0xf00f1002, 0xec0a17f8, 0xe2010b17, 0xef18fcc9, 0xf00a06ef,
    // 10, 1, 9, -20, -26, -15, 24, -2, -2, -6, -30, -10, -4, 50, 30, 23, 0, 22, -4, 25, -1, 12, 4, -25, -18, -28, 5, 0, 49, 41, -35, 19
    0xec09010a, 0xfe18f1e6, 0xf6e2fafe, 0x171e32fc, 0x19fc1600, 0xe7040cff, 0x5e4ee, 0x13dd2931,
    // 5, -29, 9, 50, 42, 9, -1, 23, 22, 18, 17, -26, -7, -24, -4, 2, -1, 3, -74, 5, -10, 4, 64, -13, -15, 103, 43, -15, -56, -65, -71, 36
    0x3209e305, 0x17ff092a, 0xe6111216, 0x2fce8f9, 0x5b603ff, 0xf34004f6, 0xf12b67f1, 0x24b9bfc8,
    // -51, 27, -13, 15, 32, 12, 20, -19, 1, 13, -11, 38, -8, 11, -17, 25, -4, 64, 59, 50, -23, -37, 28, 13, -15, 38, 53, 42, 85, -27, -36, -43
    0xff31bcd, 0xed140c20, 0x26f50d01, 0x19ef0bf8, 0x323b40fc, 0xd1cdbe9, 0x2a3526f1, 0xd5dce555,
    // -27, 5, -13, -9, 6, -7, 15, -10, 1, 19, 0, -6, 8, -29, 9, -21, -2, -35, 93, 51, 7, 41, 47, 11, -5, 65, -16, 27, -47, -5, -41, -22
    0xf7f305e5, 0xf60ff906, 0xfa001301, 0xeb09e308, 0x335dddfe, 0xb2f2907, 0x1bf041fb, 0xead7fbd1,
    // -9, 63, 1, 32, -4, -3, -12, -1, -7, 43, 59, 38, -14, 21, 5, 0, 28, 17, 47, -34, -60, 2, -12, -14, 21, 6, 10, -13, 48, 37, 37, -1
    0x20013ff7, 0xfff4fdfc, 0x263b2bf9, 0x515f2, 0xde2f111c, 0xf2f402c4, 0xf30a0615, 0xff252530,
    // 22, -73, 21, -16, -10, -69, 127, 48, -19, -39, 0, -48, 31, -49, -87, -13, -53, 14, -45, -45, 6, 58, -91, -40, 33, 26, -21, 106, -87, -26, -44, 4
    0xf015b716, 0x307fbbf6, 0xd000d9ed, 0xf3a9cf1f, 0xd3d30ecb, 0xd8a53a06, 0x6aeb1a21, 0x4d4e6a9,
    // -13, 66, -41, -6, -5, 52, -78, -18, -23, 8, 21, 14, 6, -12, 17, -3, 1, 18, 36, -2, 22, 28, 44, -22, 47, -3, 20, -5, 41, -13, 5, -6
    0xfad742f3, 0xeeb234fb, 0xe1508e9, 0xfd11f406, 0xfe241201, 0xea2c1c16, 0xfb14fd2f, 0xfa05f329,
    // -2, -17, 9, -41, 8, 2, 9, 27, -18, 18, -19, -1, -3, -40, 7, 0, -32, 17, -17, 26, 68, -30, -36, -6, -29, 29, 12, 4, 52, 50, 46, -5
    0xd709effe, 0x1b090208, 0xffed12ee, 0x7d8fd, 0x1aef11e0, 0xfadce244, 0x40c1de3, 0xfb2e3234,
    // 17, -52, -21, -34, 26, 16, 45, -12, 7, -25, -77, -42, 41, -67, 17, -6, 1, 112, -28, 31, 54, -15, 18, 14, -1, 42, -57, -13, 1, -13, -86, 26
    0xdeebcc11, 0xf42d101a, 0xd6b3e707, 0xfa11bd29, 0x1fe47001, 0xe12f136, 0xf3c72aff, 0x1aaaf301,
    // 15, 38, 41, 18, -27, 18, -49, 58, -42, -30, 18, 4, -11, -25, 39, 13, -12, 18, -6, 5, -42, 17, 27, -35, 76, 25, 59, -15, -12, 45, 72, -75
    0x1229260f, 0x3acf12e5, 0x412e2d6, 0xd27e7f5, 0x5fa12f4, 0xdd1b11d6, 0xf13b194c, 0xb5482df4,
    // -33, -5, 43, 65, 42, -47, 27, 56, 19, 21, 12, 2, -10, -30, 9, -18, 22, 20, 29, 23, -30, 6, -37, 25, -21, -8, -30, 49, -45, 64, 82, 35
    0x412bfbdf, 0x381bd12a, 0x20c1513, 0xee09e2f6, 0x171d1416, 0x19db06e2, 0x31e2f8eb, 0x235240d3,
    // 4, 4, 8, -2, -9, -4, 12, 6, -3, -27, 6, 5, -10, 51, -14, 29, -3, 6, -3, 12, -43, -42, -56, 17, -26, -7, 8, -31, 36, 47, -29, 21
    0xfe080404, 0x60cfcf7, 0x506e5fd, 0x1df233f6, 0xcfd06fd, 0x11c8d6d5, 0xe108f9e6, 0x15e32f24,
    // -8, 90, -14, 52, 26, 43, -59, -12, -33, -2, 88, 18, -11, 8, -13, -3, 4, -1, -74, -2, 6, 82, 25, -11, -16, 88, 41, 19, 26, 5, 50, 26
    0x34f25af8, 0xf4c52b1a, 0x1258fedf, 0xfdf308f5, 0xfeb6ff04, 0xf5195206, 0x132958f0, 0x1a32051a,
    // 13, -1, 26, -5, 2, -19, -6, 40, -1, 16, -41, 10, -13, -32, -1, 7, -22, -11, 13, 30, -31, -35, 48, 71, 20, 54, 46, -11, -38, 33, 35, -75
    0xfb1aff0d, 0x28faed02, 0xad710ff, 0x7ffe0f3, 0x1e0df5ea, 0x4730dde1, 0xf52e3614, 0xb52321da,
    // -9, -7, 0, 6, 18, -11, 0, 2, 15, -1, 4, -12, 5, -7, -12, -5, -11, 26, -5, -27, -12, -21, -11, 22, 22, -18, -2, -4, 8, -13, -4, 83
    0x600f9f7, 0x200f512, 0xf404ff0f, 0xfbf4f905, 0xe5fb1af5, 0x16f5ebf4, 0xfcfeee16, 0x53fcf308,
    // -8, 3, -9, 1, 25, -4, 32, -31, 25, 7, 13, 10, 5, 14, 4, -18, -16, 29, 17, -8, 21, 7, 20, -25, -50, -15, 5, -11, -24, 2, 1, -10
    0x1f703f8, 0xe120fc19, 0xa0d0719, 0xee040e05, 0xf8111df0, 0xe7140715, 0xf505f1ce, 0xf60102e8,
    // 9, -13, 11, -20, -23, -3, 12, -11, -8, -9, -34, -8, -8, 49, 27, 23, -1, 18, -8, 26, -6, 17, -1, -25, -25, -23, 10, 0, 59, 42, -40, 17
    0xec0bf309, 0xf50cfde9, 0xf8def7f8, 0x171b31f8, 0x1af812ff, 0xe7ff11fa, 0xae9e7, 0x11d82a3b,
    // 34, -18, 2, 22, 34, 2, 35, -19, 28, 28, 13, -15, 12, -28, -31, -2, -6, 16, -55, 26, -12, 2, 70, 14, -17, 75, 2, -2, -62, -80, -74, 52
    0x1602ee22, 0xed230222, 0xf10d1c1c, 0xfee1e40c, 0x1ac910fa, 0xe4602f4, 0xfe024bef, 0x34b6b0c2,
};
static const uint embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias_dwords[8] = {
    // 0.02153, 0.03027, 0.02919, 0.0456, -0.001148, -0.01108, 0.0531, 0.01091, -0.04388, 0.015015, -0.0692, 0.02898, 0.02295, 0.02968, 0.00614, -0.02075
    0x27c02583, 0x29d62779, 0xa1ac94b4, 0x21962acc, 0x23b0a99e, 0x276bac6e, 0x279925e0, 0xa5501e4a,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass11(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage__decoder3_ResidualBlock_2_residual_func_Split_output_grouped = { ScratchBuffer };
    const Tensor3i8_NHWC< RWBufferStorage > _decoder3_ResidualBlock_2_residual_func_Split_output_grouped = {
        uint3(960, 540, 32), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(960, 540, 32), // threadGroupSliceSize
        uint3(960, 540, 32), // storageSize
        uint3(32, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        33177600, // threadGroupStorageByteOffset
        storage__decoder3_ResidualBlock_2_residual_func_Split_output_grouped };
    
    const RWBufferStorage storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 16), // threadGroupSliceSize
        uint3(1920, 1080, 16), // storageSize
        uint3(16, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.02086760848760605, storage_fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.005810755304992199, storage_embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = { embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 64), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 64), // threadGroupSliceSize
        uint4(1, 1, 32, 64), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004412851762026548, storage_embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<32> storage_embedded_decoder3_ResidualBlock_2_body_pw_expand_bias = { embedded_decoder3_ResidualBlock_2_body_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<32> > embedded_decoder3_ResidualBlock_2_body_pw_expand_bias = {
        64, // logicalSize
        0, // threadGroupSliceStart
        64, // threadGroupSliceSize
        64, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_2_body_pw_expand_bias };
    
    const ConstantBufferStorage<512> storage_embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<512> > embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 64, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 64, 32), // threadGroupSliceSize
        uint4(1, 1, 64, 32), // storageSize
        uint4(64, 64, 1, 64), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.00437553646042943, storage_embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder3_ResidualBlock_2_body_pw_contract_bias = { embedded_decoder3_ResidualBlock_2_body_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder3_ResidualBlock_2_body_pw_contract_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_ResidualBlock_2_body_pw_contract_bias };
    
    const ConstantBufferStorage<512> storage_embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_HWCN< ConstantBufferStorage<512> > embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 16, 32), // threadGroupSliceSize
        uint4(2, 2, 16, 32), // storageSize
        uint4(512, 1024, 32, 1), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0022883142810314894, storage_embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias = { embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias };
    
    // fused_fused_quantized_NHWC_/decoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_22 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_22 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(128, 2, 16);
    const uint3 groupSize_slice_22 = uint3(128, 2, 16);
    const uint3 storageSize_slice_22 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_22 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_22 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_22 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_22 = dot(groupStart_slice_22, tensorByteStrides_slice_22);
    const float quantizationScale_slice_22 = 0.02286212518811226;
    const RWBufferStorage storage_slice_22 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_22 = { logicalSize_slice_22, groupStart_slice_22, groupSize_slice_22, storageSize_slice_22, tensorByteStrides_slice_22, paddingBegin_slice_22, paddingEnd_slice_22, threadGroupByteOffsetInTensor_slice_22 + 49766400, quantizationScale_slice_22, storage_slice_22 };
    // FusedFusedquantized_/decoder3/ResidualBlock_2/residual_func/Concat_quantized_/decoder3/ResidualBlock_2/body/spatial_mixing/partial_conv/Conv_quantized_/decoder3/ResidualBlock_2/body/spatial_mixing/Concat_quantized_/decoder3/ResidualBlock_2/body/pw_expand/Conv_/decoder3/ResidualBlock_2/body/pw_expand_act/Relu_quantized_/decoder3/ResidualBlock_2/body/pw_contract/Conv_/decoder3/ResidualBlock_2/Add_Fusedquantized_/decoder3/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose_quantized_/decoder2/skip_pop_0/Add (32, 540, 960), (16, 1080, 1920), (16, 16, 3, 3), (16,), (64, 32, 1, 1), (64,), (32, 64, 1, 1), (32,), (32, 16, 2, 2), (16,) -> (16, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    FNB_CT2D_ADD<32, 1>(0.020747436210513115, 0.030383991077542305, 0.024485979229211807, 0.025360390543937683, _decoder3_ResidualBlock_2_residual_func_Split_output_grouped, fused_quantized_NHWC__encoder2_DownscaleStridedConv2x2_skip_func_act_quant_export_handler_QuantizeLinear_output_0, embedded__decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_2_body_spatial_mixing_partial_conv_bias, embedded__decoder3_ResidualBlock_2_body_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_2_body_pw_expand_bias, embedded__decoder3_ResidualBlock_2_body_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_ResidualBlock_2_body_pw_contract_bias, embedded_hwcn__decoder3_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder3_UpscaleConvTranspose2x2_upscale_conv_bias, slice_22, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_11
#ifdef MLSR_PASS_11_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass11_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_fused_quantized_NHWC_/decoder2/ResidualBlock_1/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_23 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_23 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_23 = uint3(32, 1, 16);
    const uint3 storageSize_slice_23 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_23 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_23 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_23 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_23 = dot(groupStart_slice_23, tensorByteStrides_slice_23);
    const float quantizationScale_slice_23 = 0.02286212518811226;
    const RWBufferStorage storage_slice_23 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_23 = { logicalSize_slice_23, groupStart_slice_23, groupSize_slice_23, storageSize_slice_23, tensorByteStrides_slice_23, paddingBegin_slice_23, paddingEnd_slice_23, threadGroupByteOffsetInTensor_slice_23 + 49766400, quantizationScale_slice_23, storage_slice_23 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_23, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_11_POST


#ifdef MLSR_PASS_12
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/int8_NHWC/Fused/ConvNextBlock.hlsli"

static const uint embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // 0, -1, 2, 7, 32, -28, 4, -6, -10, 19, 10, 15, -41, -8, -30, 4, 5, 36, 15, 17, -5, -30, -2, -13, 2, 25, 1, -10, 11, 14, 43, -20
    0x702ff00, 0xfa04e420, 0xf0a13f6, 0x4e2f8d7, 0x110f2405, 0xf3fee2fb, 0xf6011902, 0xec2b0e0b,
    // -8, 1, -8, -8, 18, -18, -1, -1, -22, 7, -6, 13, 18, -4, -17, -1, 7, -23, -18, -5, 2, 13, 1, 24, 14, -17, 3, 14, 24, -7, 34, 9
    0xf8f801f8, 0xffffee12, 0xdfa07ea, 0xffeffc12, 0xfbeee907, 0x18010d02, 0xe03ef0e, 0x922f918,
    // 1, -25, -58, -7, 11, 111, -27, 80, -8, -2, -13, -31, 89, 8, -123, 37, 17, -31, -8, 6, 1, -26, -14, -9, 40, 39, -8, -4, -34, 8, 63, 14
    0xf9c6e701, 0x50e56f0b, 0xe1f3fef8, 0x25850859, 0x6f8e111, 0xf7f2e601, 0xfcf82728, 0xe3f08de,
    // -18, 3, 18, -2, -23, -13, -1, -2, -3, 0, -9, 3, 17, -2, 8, 12, 3, -5, 48, 0, -14, -5, -16, 5, -32, -30, -15, 5, 7, 16, 15, -13
    0xfe1203ee, 0xfefff3e9, 0x3f700fd, 0xc08fe11, 0x30fb03, 0x5f0fbf2, 0x5f1e2e0, 0xf30f1007,
    // 3, 14, -4, -8, 0, -6, 1, 8, 4, 6, 19, -9, -29, -8, -16, -10, -8, 14, 1, -3, 2, -6, -4, 3, -3, -5, -4, 5, 36, 0, -20, -2
    0xf8fc0e03, 0x801fa00, 0xf7130604, 0xf6f0f8e3, 0xfd010ef8, 0x3fcfa02, 0x5fcfbfd, 0xfeec0024,
    // -11, 15, 5, 7, 10, 19, -6, -37, -40, -19, -27, 0, -1, 3, -32, -1, -5, 19, 8, 6, 17, -17, 9, -10, 9, 30, -25, -5, -1, -6, 8, -11
    0x7050ff5, 0xdbfa130a, 0xe5edd8, 0xffe003ff, 0x60813fb, 0xf609ef11, 0xfbe71e09, 0xf508faff,
    // 11, -22, -13, 2, -13, -34, 7, -14, -13, 25, 15, -6, -19, 4, -2, -7, 15, -83, -50, 8, -42, -65, 55, -15, 39, -36, 99, 79, 33, 1, 48, -48
    0x2f3ea0b, 0xf207def3, 0xfa0f19f3, 0xf9fe04ed, 0x8cead0f, 0xf137bfd6, 0x4f63dc27, 0xd0300121,
    // 5, -19, -41, 6, -16, 43, 2, 22, -19, -16, -16, 13, 12, -8, -7, 33, -4, -7, 45, -15, 2, 11, -13, -11, 9, 7, 6, 5, -19, -15, -8, 15
    0x6d7ed05, 0x16022bf0, 0xdf0f0ed, 0x21f9f80c, 0xf12df9fc, 0xf5f30b02, 0x5060709, 0xff8f1ed,
    // 4, 4, 54, -12, 16, -29, -1, -17, -34, 17, 6, -13, -17, 6, 24, -14, -17, 19, 36, 1, -8, 4, -8, -9, 9, 1, 11, -5, 9, 6, -27, -15
    0xf4360404, 0xefffe310, 0xf30611de, 0xf21806ef, 0x12413ef, 0xf7f804f8, 0xfb0b0109, 0xf1e50609,
    // -12, 9, 1, 4, 21, -16, 3, -11, -12, 11, -14, 3, 8, -1, -16, -5, 3, -7, -31, 6, 13, 18, -10, -6, -36, -39, -14, -12, 40, -2, -30, 0
    0x40109f4, 0xf503f015, 0x3f20bf4, 0xfbf0ff08, 0x6e1f903, 0xfaf6120d, 0xf4f2d9dc, 0xe2fe28,
    // 6, -8, -3, -10, 2, 0, -11, -3, -5, 2, -5, 7, -17, -7, -8, -5, -27, 10, 2, 19, 2, 0, 6, -31, -25, 6, -34, -9, -30, -11, -70, -1
    0xf6fdf806, 0xfdf50002, 0x7fb02fb, 0xfbf8f9ef, 0x13020ae5, 0xe1060002, 0xf7de06e7, 0xffbaf5e2,
    // -7, 9, -40, 17, -104, 21, -18, -3, 46, 41, -35, -23, -8, 14, 72, 106, 2, -6, -26, 9, -5, 7, 1, -5, -3, 40, -24, -25, -34, 1, -6, 11
    0x11d809f9, 0xfdee1598, 0xe9dd292e, 0x6a480ef8, 0x9e6fa02, 0xfb0107fb, 0xe7e828fd, 0xbfa01de,
    // 8, 5, -6, -7, 14, -2, 8, -8, 1, 18, 0, -5, -25, -9, -9, -11, 12, -14, -41, 13, -3, 23, 1, 9, 1, 8, -25, -11, 19, -7, -16, 20
    0xf9fa0508, 0xf808fe0e, 0xfb001201, 0xf5f7f7e7, 0xdd7f20c, 0x90117fd, 0xf5e70801, 0x14f0f913,
    // -8, -3, 13, -6, -1, 16, -6, -1, -11, 27, -16, 13, -4, 1, -5, 0, 6, -17, -4, 0, -1, 16, -4, 7, 8, -10, 16, -1, -3, 14, -18, 0
    0xfa0dfdf8, 0xfffa10ff, 0xdf01bf5, 0xfb01fc, 0xfcef06, 0x7fc10ff, 0xff10f608, 0xee0efd,
    // -20, 16, -5, 3, 5, -16, 18, 12, -6, 16, 5, -19, -11, -6, 1, -23, -3, -2, 9, 9, 8, -5, 2, -16, 15, -2, -3, 2, -9, 10, 12, 4
    0x3fb10ec, 0xc12f005, 0xed0510fa, 0xe901faf5, 0x909fefd, 0xf002fb08, 0x2fdfe0f, 0x40c0af7,
    // -6, -11, 22, 11, 12, -37, 11, -9, -29, 18, 12, -10, -43, -2, -23, -1, 27, 96, -20, -35, -24, 67, -38, 55, 51, -30, -44, -66, 50, -18, 10, 42
    0xb16f5fa, 0xf70bdb0c, 0xf60c12e3, 0xffe9fed5, 0xddec601b, 0x37da43e8, 0xbed4e233, 0x2a0aee32,
    // -25, -37, 23, -3, 20, 58, -10, 10, -25, -21, -46, 13, 5, -8, 14, 34, 26, -6, 9, 2, 8, 16, -8, -9, 19, -3, -1, 6, 3, 12, -8, 7
    0xfd17dbe7, 0xaf63a14, 0xdd2ebe7, 0x220ef805, 0x209fa1a, 0xf7f81008, 0x6fffd13, 0x7f80c03,
    // -19, -5, -13, -2, -16, -25, 11, 4, -34, 16, 11, 3, -11, -12, 2, -11, 25, 11, -5, 16, -11, -1, 0, 3, 17, 2, 7, -3, 2, 7, -10, -5
    0xfef3fbed, 0x40be7f0, 0x30b10de, 0xf502f4f5, 0x10fb0b19, 0x300fff5, 0xfd070211, 0xfbf60702,
    // 7, 1, -16, -1, 29, -5, -17, -24, 14, 10, 11, 20, -35, -4, -17, 5, 8, -11, -3, -5, -3, 11, 1, 27, 32, 3, 4, 0, 3, -4, 0, 2
    0xfff00107, 0xe8effb1d, 0x140b0a0e, 0x5effcdd, 0xfbfdf508, 0x1b010bfd, 0x40320, 0x200fc03,
    // -30, -12, 30, -1, -36, 4, -1, 1, -13, -8, -3, -6, 16, 10, 40, 8, -42, 65, 31, 23, 33, -33, 15, -26, -14, 70, -22, -21, 12, 7, -2, -30
    0xff1ef4e2, 0x1ff04dc, 0xfafdf8f3, 0x8280a10, 0x171f41d6, 0xe60fdf21, 0xebea46f2, 0xe2fe070c,
    // -4, -103, -82, -11, 30, 36, -13, 22, -53, -11, -14, 20, -61, -1, -10, 82, 30, 46, 83, 6, 18, 16, 10, -3, 26, -38, 1, 3, 38, 7, -37, -48
    0xf5ae99fc, 0x16f3241e, 0x14f2f5cb, 0x52f6ffc3, 0x6532e1e, 0xfd0a1012, 0x301da1a, 0xd0db0726,
    // 23, -5, -2, 11, 7, 3, 0, -17, 33, -14, -15, -5, 10, 0, 28, -20, -21, -10, -16, 1, 19, 12, -12, 3, 4, 15, -19, 7, -1, -7, 26, 29
    0xbfefb17, 0xef000307, 0xfbf1f221, 0xec1c000a, 0x1f0f6eb, 0x3f40c13, 0x7ed0f04, 0x1d1af9ff,
    // 8, 12, 12, -2, -29, -19, 5, 6, -29, 9, 34, 4, -5, 5, -41, -17, -1, 0, -27, -5, -3, 15, 0, 19, -8, -11, 3, 3, 22, -8, -3, -1
    0xfe0c0c08, 0x605ede3, 0x42209e3, 0xefd705fb, 0xfbe500ff, 0x13000ffd, 0x303f5f8, 0xfffdf816,
    // 19, -1, -2, -3, 0, -47, 10, -1, 22, 39, 20, -6, -30, 6, 6, -13, 5, -10, 13, 5, 3, 3, -7, -8, 9, -11, 12, 1, -3, -2, -18, 10
    0xfdfeff13, 0xff0ad100, 0xfa142716, 0xf30606e2, 0x50df605, 0xf8f90303, 0x10cf509, 0xaeefefd,
    // -1, 6, 24, 6, 14, 23, 8, -18, 15, -32, -20, 17, -5, -13, -22, 15, -9, -92, -53, -6, 40, -63, 10, -54, 5, 53, 42, 70, -9, 10, 119, -16
    0x61806ff, 0xee08170e, 0x11ece00f, 0xfeaf3fb, 0xfacba4f7, 0xca0ac128, 0x462a3505, 0xf0770af7,
    // -17, -11, 47, -15, 38, 9, -8, -9, 2, -31, -19, -3, -13, -14, 10, 8, 18, -3, -14, 7, 10, 8, 1, 0, 2, 1, -4, -8, -3, 15, -13, -6
    0xf12ff5ef, 0xf7f80926, 0xfdede102, 0x80af2f3, 0x7f2fd12, 0x1080a, 0xf8fc0102, 0xfaf30ffd,
    // -6, 10, -35, -2, -28, -23, 11, -6, 3, 6, 16, 6, 4, 0, -18, -11, 6, 9, -14, 12, -1, -5, -7, 2, 12, -8, -4, 13, 6, -1, 18, 11
    0xfedd0afa, 0xfa0be9e4, 0x6100603, 0xf5ee0004, 0xcf20906, 0x2f9fbff, 0xdfcf80c, 0xb12ff06,
    // -12, 7, 12, 10, 15, -1, 7, -21, -2, -4, -6, -9, 6, 8, 20, -11, -4, 7, 1, 3, 6, -21, 9, -8, 3, 36, 8, -10, -24, 0, -4, -10
    0xa0c07f4, 0xeb07ff0f, 0xf7fafcfe, 0xf5140806, 0x30107fc, 0xf809eb06, 0xf6082403, 0xf6fc00e8,
    // 1, 2, 9, -1, 8, 17, 4, 5, -14, -12, 5, 4, -5, -3, 0, 2, -15, 11, 16, 12, 17, 13, 3, -13, -8, 16, -15, -5, -30, 2, -21, 1
    0xff090201, 0x5041108, 0x405f4f2, 0x200fdfb, 0xc100bf1, 0xf3030d11, 0xfbf110f8, 0x1eb02e2,
    // 54, 1, 8, -18, -48, -38, 30, -1, 25, -128, 56, 42, 45, -9, -39, -21, -5, 5, 36, 5, 0, 1, 0, -8, -2, 3, 4, 0, 3, 0, 13, -10
    0xee080136, 0xff1edad0, 0x2a388019, 0xebd9f72d, 0x52405fb, 0xf8000100, 0x403fe, 0xf60d0003,
    // 8, 12, -5, 5, 7, -2, 0, -10, -2, 4, 2, -3, -13, 0, 9, -7, -11, 11, 5, -1, -9, 1, 11, 11, -5, 13, 5, 2, -1, 2, 11, -7
    0x5fb0c08, 0xf600fe07, 0xfd0204fe, 0xf90900f3, 0xff050bf5, 0xb0b01f7, 0x2050dfb, 0xf90b02ff,
    // -13, -22, 29, 0, 2, 20, -7, -4, -7, -11, -11, -3, -2, 9, 9, 3, 10, 5, 5, 9, 11, 5, 9, 8, 2, 17, -4, -16, -34, 18, 6, 0
    0x1deaf3, 0xfcf91402, 0xfdf5f5f9, 0x30909fe, 0x905050a, 0x809050b, 0xf0fc1102, 0x612de,
    // 13, -14, -22, -21, -20, 24, -3, 32, 3, -64, -5, 4, 38, -4, -22, 8, -3, -12, -6, 2, -25, 5, -4, -3, -1, -3, -15, 6, 23, 1, 28, 9
    0xebeaf20d, 0x20fd18ec, 0x4fbc003, 0x8eafc26, 0x2faf4fd, 0xfdfc05e7, 0x6f1fdff, 0x91c0117,
    // -1, 29, 19, -2, -29, 22, 12, 6, -14, -29, -2, -16, 21, 0, -20, 1, 22, 108, -108, -2, -123, -47, 5, 43, -63, 42, 52, -24, 59, 12, 11, -109
    0xfe131dff, 0x60c16e3, 0xf0fee3f2, 0x1ec0015, 0xfe946c16, 0x2b05d185, 0xe8342ac1, 0x930b0c3b,
    // 2, -1, 31, 2, 28, -11, 1, 4, 10, -29, 1, -1, -25, -23, 11, 3, -2, 6, -19, 0, -2, 3, 1, -6, 15, -18, -4, -8, 22, 11, 15, -6
    0x21fff02, 0x401f51c, 0xff01e30a, 0x30be9e7, 0xed06fe, 0xfa0103fe, 0xf8fcee0f, 0xfa0f0b16,
    // -7, -8, 13, 1, -9, -8, 4, 3, 5, 16, -5, 1, -4, 1, -2, 0, -1, 5, -10, 0, 37, -3, -11, 8, 16, -11, -4, -12, -11, -10, -1, 16
    0x10df8f9, 0x304f8f7, 0x1fb1005, 0xfe01fc, 0xf605ff, 0x8f5fd25, 0xf4fcf510, 0x10fff6f5,
    // -1, -3, 1, -8, -12, -16, 2, -7, -7, 2, -2, -14, -29, 7, -12, -9, -5, -29, 9, 34, 88, -9, 14, -9, 56, 12, 3, 21, -55, 10, -14, 16
    0xf801fdff, 0xf902f0f4, 0xf2fe02f9, 0xf7f407e3, 0x2209e3fb, 0xf70ef758, 0x15030c38, 0x10f20ac9,
    // -23, 1, -18, -17, 0, 8, 8, 17, -25, -12, 15, -13, -1, 9, -39, 4, 44, 19, 5, -1, -78, 51, -18, 46, 22, -26, -21, -31, 53, 4, -8, 2
    0xefee01e9, 0x11080800, 0xf30ff4e7, 0x4d909ff, 0xff05132c, 0x2eee33b2, 0xe1ebe616, 0x2f80435,
    // -34, 49, -57, -11, 63, 65, -34, 70, -13, 54, -22, -13, 99, -18, 61, 84, 28, 54, 66, 11, -84, -33, 21, -3, -27, -70, 48, 20, 69, -5, -24, -63
    0xf5c731de, 0x46de413f, 0xf3ea36f3, 0x543dee63, 0xb42361c, 0xfd15dfac, 0x1430bae5, 0xc1e8fb45,
    // -16, 1, -20, -13, 4, -47, -4, -9, -46, 19, 22, 3, -36, -9, -27, -9, 37, -5, 29, 23, 8, -34, -10, -45, 56, 11, 6, 1, -28, 9, 81, -8
    0xf3ec01f0, 0xf7fcd104, 0x31613d2, 0xf7e5f7dc, 0x171dfb25, 0xd3f6de08, 0x1060b38, 0xf85109e4,
    // 5, -29, 2, -8, 5, -6, 1, 2, -26, -14, -24, -4, 14, 9, 9, -7, -5, -4, -13, -1, 31, 3, 7, 9, 1, 10, 8, 5, -21, -2, -14, -2
    0xf802e305, 0x201fa05, 0xfce8f2e6, 0xf909090e, 0xfff3fcfb, 0x907031f, 0x5080a01, 0xfef2feeb,
    // 5, -15, 12, 0, -22, -16, 0, -16, -5, 14, 5, -11, -3, -2, -12, -3, -10, 8, -11, -5, 4, 5, 2, 2, -3, 4, -2, 2, 12, -9, 11, -1
    0xcf105, 0xf000f0ea, 0xf5050efb, 0xfdf4fefd, 0xfbf508f6, 0x2020504, 0x2fe04fd, 0xff0bf70c,
    // 2, -15, -37, 4, 8, 13, -1, 10, 9, -37, -2, 3, 47, -2, -7, -11, -21, 48, 79, 23, -97, -32, 20, -60, -5, -14, 8, 34, -24, 5, 85, 20
    0x4dbf102, 0xaff0d08, 0x3fedb09, 0xf5f9fe2f, 0x174f30eb, 0xc414e09f, 0x2208f2fb, 0x145505e8,
    // 8, -1, -39, 8, 1, 3, 5, -3, -7, -18, -8, -6, 7, -10, -9, 2, 1, -17, -26, -15, 1, 4, -1, -8, 10, -5, -10, 11, -7, -4, 10, -4
    0x8d9ff08, 0xfd050301, 0xfaf8eef9, 0x2f7f607, 0xf1e6ef01, 0xf8ff0401, 0xbf6fb0a, 0xfc0afcf9,
    // 17, -20, -25, 0, -24, -34, 23, -28, -24, 45, 5, -13, -6, 4, -7, -13, 10, 18, -12, -3, -2, -1, 8, 2, -9, 14, 9, 2, -4, 2, -17, -21
    0xe7ec11, 0xe417dee8, 0xf3052de8, 0xf3f904fa, 0xfdf4120a, 0x208fffe, 0x2090ef7, 0xebef02fc,
    // -17, 16, 9, 7, 20, -31, -6, -12, -26, 33, -5, 1, -26, -14, 2, -6, 10, 24, 35, 25, 13, -30, 1, -62, 40, 47, 14, -5, -46, 7, 4, -11
    0x70910ef, 0xf4fae114, 0x1fb21e6, 0xfa02f2e6, 0x1923180a, 0xc201e20d, 0xfb0e2f28, 0xf50407d2,
    // -20, 4, 26, -5, 15, 20, 22, 16, -3, -3, -3, -15, 13, -4, -7, -10, 1, 31, -38, -34, -33, 87, -24, 36, 17, -72, -39, -23, 88, 11, 8, -7
    0xfb1a04ec, 0x1016140f, 0xf1fdfdfd, 0xf6f9fc0d, 0xdeda1f01, 0x24e857df, 0xe9d9b811, 0xf9080b58,
    // -6, -74, -36, 24, -7, 35, 19, 7, -35, -47, -59, -9, -57, -23, -50, 44, -13, -1, -36, -14, 48, 47, -7, 15, -10, -23, -29, 15, -3, 12, -27, 19
    0x18dcb6fa, 0x71323f9, 0xf7c5d1dd, 0x2ccee9c7, 0xf2dcfff3, 0xff92f30, 0xfe3e9f6, 0x13e50cfd,
    // 5, -21, 3, -5, -24, 5, -4, 3, -9, 1, -5, 1, -5, -9, 11, -17, -16, 26, -22, 4, 12, -43, -9, -8, 15, 65, 19, -6, -42, 7, 23, 5
    0xfb03eb05, 0x3fc05e8, 0x1fb01f7, 0xef0bf7fb, 0x4ea1af0, 0xf8f7d50c, 0xfa13410f, 0x51707d6,
    // 3, 7, 27, 3, 14, 20, -11, 1, 33, 13, 0, 6, -26, -5, -19, 14, 5, -6, 31, 7, -7, -25, -2, -20, -18, 13, 11, 10, -43, -11, -19, 18
    0x31b0703, 0x1f5140e, 0x6000d21, 0xeedfbe6, 0x71ffa05, 0xecfee7f9, 0xa0b0dee, 0x12edf5d5,
    // 17, 7, -4, 20, 9, -12, -7, 22, -5, -2, 21, 16, 16, -16, -5, 10, 0, 0, -5, 2, -17, -11, -10, 10, -5, 9, 4, 8, -9, -17, 1, 7
    0x14fc0711, 0x16f9f409, 0x1015fefb, 0xafbf010, 0x2fb0000, 0xaf6f5ef, 0x80409fb, 0x701eff7,
    // -16, 17, 20, -4, -13, -15, -6, 12, -40, 26, 0, -23, 36, -1, -18, 8, -71, -14, 92, -1, 1, 53, 32, -64, 35, -59, 8, 26, 68, 60, 13, -72
    0xfc1411f0, 0xcfaf1f3, 0xe9001ad8, 0x8eeff24, 0xff5cf2b9, 0xc0203501, 0x1a08c523, 0xb80d3c44,
    // 2, 1, 5, -4, 3, 5, 3, -1, -28, -5, -19, 3, 47, 10, 14, 5, 27, -9, -32, -9, -5, -23, -7, -7, -3, 6, 2, 10, -12, -12, -11, -7
    0xfc050102, 0xff030503, 0x3edfbe4, 0x50e0a2f, 0xf7e0f71b, 0xf9f9e9fb, 0xa0206fd, 0xf9f5f4f4,
    // 1, 3, -51, 21, 0, -34, 16, -4, -18, 23, 13, 2, 22, 5, 0, 1, 15, -14, -44, 4, -8, -15, -9, 7, -3, 26, -4, 3, -19, -8, -3, 1
    0x15cd0301, 0xfc10de00, 0x20d17ee, 0x1000516, 0x4d4f20f, 0x7f7f1f8, 0x3fc1afd, 0x1fdf8ed,
    // 1, 10, 8, -1, -2, -19, -2, -16, -10, -2, -10, 1, 9, -7, 10, -3, 5, -7, 17, 3, -12, -20, -2, -23, -14, 23, 9, 6, -22, 3, -10, 9
    0xff080a01, 0xf0feedfe, 0x1f6fef6, 0xfd0af909, 0x311f905, 0xe9feecf4, 0x60917f2, 0x9f603ea,
    // -2, 21, 21, 5, 9, 7, -7, 9, -10, -14, -12, 11, 14, -4, 11, 10, 11, -12, -29, 2, 25, 6, 2, -17, 7, 3, 3, 5, -10, 2, -10, -9
    0x51515fe, 0x9f90709, 0xbf4f2f6, 0xa0bfc0e, 0x2e3f40b, 0xef020619, 0x5030307, 0xf7f602f6,
    // -31, 14, -15, 9, -44, -21, 8, 38, 37, 95, 44, -66, -1, 22, -4, -37, 6, 2, 36, -6, 13, 16, -10, 14, -9, -34, -4, 16, 28, 2, -22, 2
    0x9f10ee1, 0x2608ebd4, 0xbe2c5f25, 0xdbfc16ff, 0xfa240206, 0xef6100d, 0x10fcdef7, 0x2ea021c,
    // -10, 6, 14, 5, 13, -5, -3, -2, -8, -11, -6, 3, -4, -6, 0, 8, -3, -27, 37, -12, -5, 10, -5, 16, -22, -24, -2, 6, 9, 3, -2, 18
    0x50e06f6, 0xfefdfb0d, 0x3faf5f8, 0x800fafc, 0xf425e5fd, 0x10fb0afb, 0x6fee8ea, 0x12fe0309,
    // -1, -5, 27, -9, 8, 3, -17, 1, -9, -36, -4, 0, 9, 3, -1, 11, 6, -17, 14, -3, -15, 3, 9, 12, 1, 1, -4, -5, 2, 4, 6, 4
    0xf71bfbff, 0x1ef0308, 0xfcdcf7, 0xbff0309, 0xfd0eef06, 0xc0903f1, 0xfbfc0101, 0x4060402,
    // -8, -23, 5, -8, -21, 1, 8, 41, 9, -23, 15, 19, 22, -18, 37, 16, -3, -3, 5, -1, -28, 5, -7, -2, 9, -7, 5, 5, 9, 11, 25, 16
    0xf805e9f8, 0x290801eb, 0x130fe909, 0x1025ee16, 0xff05fdfd, 0xfef905e4, 0x505f909, 0x10190b09,
    // -10, -18, 19, -20, -27, -4, -4, 14, -9, -28, 12, 21, 16, -9, 13, 12, 105, -25, 55, -35, 95, 2, -55, 41, 14, 92, 16, -51, 3, 10, -78, -22
    0xec13eef6, 0xefcfce5, 0x150ce4f7, 0xc0df710, 0xdd37e769, 0x29c9025f, 0xcd105c0e, 0xeab20a03,
    // -32, 1, 46, -6, 15, 10, -7, 13, -12, -15, 10, 8, -6, 5, -42, -6, -8, -11, -7, -2, -10, 3, -3, 4, -8, 1, -4, 8, 29, 0, 13, 2
    0xfa2e01e0, 0xdf90a0f, 0x80af1f4, 0xfad605fa, 0xfef9f5f8, 0x4fd03f6, 0x8fc01f8, 0x20d001d,
    // -21, -4, 6, -5, -5, -23, 2, 10, 12, 2, 26, -18, -32, -7, -13, 11, -11, 4, 7, -5, 15, 4, -6, -5, 8, -4, 9, -8, -4, 8, -3, -1
    0xfb06fceb, 0xa02e9fb, 0xee1a020c, 0xbf3f9e0, 0xfb0704f5, 0xfbfa040f, 0xf809fc08, 0xfffd08fc,
    // -9, 20, 8, 11, 27, -13, 4, -15, -2, 8, -4, -5, -26, 5, -4, 0, 2, 31, -7, -10, -35, 43, -16, 23, -32, -12, -20, -20, 49, 16, 18, 0
    0xb0814f7, 0xf104f31b, 0xfbfc08fe, 0xfc05e6, 0xf6f91f02, 0x17f02bdd, 0xececf4e0, 0x121031,
    // -2, 11, -3, 7, -4, -4, -3, 4, 1, 0, 0, 2, 10, 0, 16, -4, -5, -1, -21, -4, 19, -2, -1, 2, 11, 26, -3, 8, -24, -6, 4, 2
    0x7fd0bfe, 0x4fdfcfc, 0x2000001, 0xfc10000a, 0xfcebfffb, 0x2fffe13, 0x8fd1a0b, 0x204fae8,
    // -9, -43, -12, 42, 127, -5, -14, -33, 112, 62, -14, 38, -78, -6, -3, 50, 0, -11, -2, 3, 14, 2, 2, -12, 3, -8, 13, 6, -17, -11, 25, 7
    0x2af4d5f7, 0xdff2fb7f, 0x26f23e70, 0x32fdfab2, 0x3fef500, 0xf402020e, 0x60df803, 0x719f5ef,
    // 6, -4, -7, -4, -1, 4, -1, 6, 8, -25, 1, -5, 13, 6, 4, 4, 14, 15, 2, -5, -16, -17, 8, -9, -33, -3, 21, 1, 16, 3, 9, -29
    0xfcf9fc06, 0x6ff04ff, 0xfb01e708, 0x404060d, 0xfb020f0e, 0xf708eff0, 0x115fddf, 0xe3090310,
    // -2, -19, 13, -5, 15, 2, -2, 4, -7, -36, -16, 1, 7, 1, 5, 7, -18, 6, 0, -4, 1, -1, 5, -1, 11, -1, -7, 2, 33, -2, 7, -4
    0xfb0dedfe, 0x4fe020f, 0x1f0dcf9, 0x7050107, 0xfc0006ee, 0xff05ff01, 0x2f9ff0b, 0xfc07fe21,
    // -6, 2, 6, 11, -28, -2, -12, 14, -32, 10, -11, 4, 15, 0, 18, 0, 23, 7, -1, 3, 1, -15, -2, -4, 24, 26, 9, 5, -36, -8, 1, 2
    0xb0602fa, 0xef4fee4, 0x4f50ae0, 0x12000f, 0x3ff0717, 0xfcfef101, 0x5091a18, 0x201f8dc,
    // -10, 4, -14, 23, 49, -11, 5, -6, 13, 2, -6, 22, 5, 6, 44, 3, 34, -1, -18, -21, -78, 114, -21, 44, -45, -41, -55, -33, 47, 16, -100, 21
    0x17f204f6, 0xfa05f531, 0x16fa020d, 0x32c0605, 0xebeeff22, 0x2ceb72b2, 0xdfc9d7d3, 0x159c102f,
    // -26, 17, -21, -2, 25, 1, -2, 24, -3, 3, -7, -14, 13, -10, 21, 4, 22, -8, -12, -11, 9, 6, -5, -5, 16, 10, 10, -7, -33, -3, -28, -6
    0xfeeb11e6, 0x18fe0119, 0xf2f903fd, 0x415f60d, 0xf5f4f816, 0xfbfb0609, 0xf90a0a10, 0xfae4fddf,
    // -6, 19, -12, 6, -38, -43, 9, 2, -6, 25, 24, -15, 10, -1, 5, -33, -11, -2, -1, -5, 6, -12, 2, -6, 8, -5, -10, 5, 4, -1, 3, -2
    0x6f413fa, 0x209d5da, 0xf11819fa, 0xdf05ff0a, 0xfbfffef5, 0xfa02f406, 0x5f6fb08, 0xfe03ff04,
};
static const uint embedded_decoder2_ResidualBlock_1_body_conv_dw_bias_dwords[8] = {
    // 0.00798, -0.0296, 0.01392, 0.05453, 0.00694, -0.01443, 0.03105, 0.03113, 0.02434, -0.007458, -0.010445, -0.01036, -0.01942, 0.003878, -0.004833, 0.006126
    0xa7942016, 0x2afb2321, 0xa3631f1b, 0x27f827f3, 0x9fa3263b, 0xa14ea159, 0x1bf1a4f9, 0x1e469cf3,
};
static const uint embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -39, 24, -26, -69, -2, -10, 28, 0, 29, 44, 15, 7, -27, -72, -54, -97, -61, 34, -73, -22, -84, 12, 87, 53, -60, 44, -21, 18, -4, 28, -86, -22
    0xbbe618d9, 0x1cf6fe, 0x70f2c1d, 0x9fcab8e5, 0xeab722c3, 0x35570cac, 0x12eb2cc4, 0xeaaa1cfc,
    // -23, 14, 58, 55, 71, -3, 21, 56, 13, 95, -13, 8, 22, 41, 53, 18, 12, -40, -8, 51, -24, -25, -44, -6, 25, -27, -20, -63, 63, 102, -1, -14
    0x373a0ee9, 0x3815fd47, 0x8f35f0d, 0x12352916, 0x33f8d80c, 0xfad4e7e8, 0xc1ece519, 0xf2ff663f,
    // 59, -1, -28, -74, 25, -68, -53, -81, 2, 60, -26, -29, -48, 15, -31, 41, -45, -4, 54, 43, -17, 60, -36, -55, 25, -19, -22, -62, 82, -73, -43, 52
    0xb6e4ff3b, 0xafcbbc19, 0xe3e63c02, 0x29e10fd0, 0x2b36fcd3, 0xc9dc3cef, 0xc2eaed19, 0x34d5b752,
    // 9, 41, 67, 40, -7, 15, 30, -22, 20, -85, 0, 20, -83, 35, -9, -86, 43, -55, 24, -65, 34, 99, -7, 11, 15, -1, 0, -27, -22, 13, -54, -39
    0x28432909, 0xea1e0ff9, 0x1400ab14, 0xaaf723ad, 0xbf18c92b, 0xbf96322, 0xe500ff0f, 0xd9ca0dea,
    // 38, -4, -24, -85, -59, -38, -70, -6, -50, 66, -15, -29, -33, 40, -40, 54, 23, -2, 18, 53, 2, -10, 50, 17, -17, 6, -40, 6, -83, -63, -16, 41
    0xabe8fc26, 0xfabadac5, 0xe3f142ce, 0x36d828df, 0x3512fe17, 0x1132f602, 0x6d806ef, 0x29f0c1ad,
    // -56, 13, 52, 44, -66, 72, -4, 50, -35, 76, 42, 22, 52, 28, 44, -14, -23, 98, -15, 35, 12, 13, -104, -3, -7, 6, -10, -30, -29, 8, 29, 42
    0x2c340dc8, 0x32fc48be, 0x162a4cdd, 0xf22c1c34, 0x23f162e9, 0xfd980d0c, 0xe2f606f9, 0x2a1d08e3,
    // -6, -20, -31, 76, 5, -15, -56, -33, -32, 31, -14, 14, -1, -30, -87, -30, -122, -90, 106, -40, 5, 10, -81, -32, -99, -21, -50, 15, -23, 8, 77, -87
    0x4ce1ecfa, 0xdfc8f105, 0xef21fe0, 0xe2a9e2ff, 0xd86aa686, 0xe0af0a05, 0xfceeb9d, 0xa94d08e9,
    // -84, -7, -2, -37, -69, 16, -128, -9, 5, 65, 82, -14, 47, -16, -1, -68, -44, 75, -45, -94, 17, 90, 54, -39, -11, -5, -12, -8, 20, 2, 105, -96
    0xdbfef9ac, 0xf78010bb, 0xf2524105, 0xbcfff02f, 0xa2d34bd4, 0xd9365a11, 0xf8f4fbf5, 0xa0690214,
    // -60, 5, -5, -80, 20, -7, -32, -25, -95, -65, -59, -26, 22, 62, 127, -74, -21, 65, 14, -50, -42, 61, 34, 55, -19, 44, -25, 17, 40, -4, -90, -9
    0xb0fb05c4, 0xe7e0f914, 0xe6c5bfa1, 0xb67f3e16, 0xce0e41eb, 0x37223dd6, 0x11e72ced, 0xf7a6fc28,
    // 70, -49, -81, 59, 31, 118, 68, -111, -25, 6, 83, 90, -71, 89, 39, 62, 3, -80, 53, -21, 100, -41, -23, 10, 51, -9, 33, -22, -84, -31, -77, 86
    0x3bafcf46, 0x9144761f, 0x5a5306e7, 0x3e2759b9, 0xeb35b003, 0xae9d764, 0xea21f733, 0x56b3e1ac,
    // 24, -5, -47, -35, -36, 30, -59, 86, -24, -69, -23, 11, -41, -94, 69, -3, 58, 47, -55, 37, 59, 17, -19, 13, -29, -50, 4, 2, 25, -16, -17, -79
    0xddd1fb18, 0x56c51edc, 0xbe9bbe8, 0xfd45a2d7, 0x25c92f3a, 0xded113b, 0x204cee3, 0xb1eff019,
    // 49, -55, 8, -4, 28, -47, -101, -30, 42, -66, 27, 29, 8, 39, 47, 46, -15, 51, 27, -79, 41, -9, 43, -43, -62, -14, 57, 9, 29, -49, -21, 45
    0xfc08c931, 0xe29bd11c, 0x1d1bbe2a, 0x2e2f2708, 0xb11b33f1, 0xd52bf729, 0x939f2c2, 0x2debcf1d,
    // 74, 6, 33, 96, -8, 95, -31, -124, -20, 62, 88, 13, -65, -26, 91, 83, 39, -21, 47, 82, 25, -35, 6, -51, 28, -33, 53, -93, -84, -25, 120, 35
    0x6021064a, 0x84e15ff8, 0xd583eec, 0x535be6bf, 0x522feb27, 0xcd06dd19, 0xa335df1c, 0x2378e7ac,
    // -53, 23, -48, -12, -18, 19, 45, -29, 11, -87, -36, 30, -1, 27, -30, 89, 24, 17, 29, 40, 16, 5, 81, 40, -14, -19, 2, -41, 78, -28, -36, 4
    0xf4d017cb, 0xe32d13ee, 0x1edca90b, 0x59e21bff, 0x281d1118, 0x28510510, 0xd702edf2, 0x4dce44e,
    // -28, -22, -11, -39, -14, -10, -53, -31, 9, 16, 6, 25, -93, 39, 31, -6, -81, 19, -29, -57, -7, 70, 17, -55, 6, 85, -30, 51, -8, -45, 99, -88
    0xd9f5eae4, 0xe1cbf6f2, 0x19061009, 0xfa1f27a3, 0xc7e313af, 0xc91146f9, 0x33e25506, 0xa863d3f8,
    // 90, -25, -17, -92, -50, -36, 10, -24, 29, 8, 17, -60, 13, -50, -48, -76, -99, 7, -55, -92, 43, 50, 36, 16, 45, -1, 26, 17, 20, 30, -81, -113
    0xa4efe75a, 0xe80adcce, 0xc411081d, 0xb4d0ce0d, 0xa4c9079d, 0x1024322b, 0x111aff2d, 0x8faf1e14,
};
static const uint embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords[16] = {
    // 0.002604, 0.05258, -0.0536, -0.05472, -0.006145, -0.01677, 0.04935, -0.004433, -0.03577, -0.025, -0.02502, -0.00716, 0.00010717, -0.013275, 0.006817, -0.010216
    0x2abb1955, 0xab01aadc, 0xa44b9e4b, 0x9c8a2a51, 0xa666a894, 0x9f55a668, 0xa2cc0706, 0xa13b1efb,
    // 0.06223, -0.04285, 0.03064, 0.002308, -0.01244, 0.02974, -0.0513, -0.1287, -0.0487, 0.1013, 0.01043, 0.0442, 0.006527, -0.03632, 0.04074, 0.0364
    0xa97c2bf7, 0x18ba27d8, 0x279da25f, 0xb01eaa91, 0x2e7caa3c, 0x29a82157, 0xa8a61eaf, 0x28a92937,
};
static const uint embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 57, -51, -95, 4, -23, 8, -26, -4, -25, 13, -6, 73, -31, 49, -55, -86, -19, 63, 17, 3, -34, 56, 61, 26, -2, -42, -55, 11, -16, 98, 1, -37
    0x4a1cd39, 0xfce608e9, 0x49fa0de7, 0xaac931e1, 0x3113fed, 0x1a3d38de, 0xbc9d6fe, 0xdb0162f0,
    // 13, -87, -62, -101, 41, 51, -5, 19, 27, -27, 44, 9, -59, -22, 5, 105, 22, 52, 12, -12, -7, 65, 57, 3, 5, -34, -34, -37, 69, -96, -4, -5
    0x9bc2a90d, 0x13fb3329, 0x92ce51b, 0x6905eac5, 0xf40c3416, 0x33941f9, 0xdbdede05, 0xfbfca045,
    // -37, 38, 24, -5, -81, 65, -86, 54, 34, 82, -76, 60, -78, -12, 38, 7, 12, -11, -25, 45, 31, 47, -49, 3, 34, 14, -89, -19, 94, -38, -34, 52
    0xfb1826db, 0x36aa41af, 0x3cb45222, 0x726f4b2, 0x2de7f50c, 0x3cf2f1f, 0xeda70e22, 0x34deda5e,
    // -69, 15, -9, 62, -20, -28, 37, -99, 75, 69, 6, 104, 83, 122, -128, 82, -128, 23, 119, 49, -55, -26, -6, 17, -124, 22, 37, -76, 24, -57, 28, 85
    0x3ef70fbb, 0x9d25e4ec, 0x6806454b, 0x52807a53, 0x31771780, 0x11fae6c9, 0xb4251684, 0x551cc718,
    // 98, 18, 38, -35, -1, -48, -81, -11, 86, -42, -58, -41, 23, 0, 109, 5, -29, 51, -27, 59, 26, -32, 8, -5, 27, -3, 46, 58, -52, 13, 47, -113
    0xdd261262, 0xf5afd0ff, 0xd7c6d656, 0x56d0017, 0x3be533e3, 0xfb08e01a, 0x3a2efd1b, 0x8f2f0dcc,
    // -16, 2, -1, -71, -16, 10, -3, 11, -22, 14, 16, 26, 29, -1, -7, 39, 28, 23, 43, -3, 1, -22, -26, -53, -39, 12, 5, 0, 54, -17, 28, 9
    0xb9ff02f0, 0xbfd0af0, 0x1a100eea, 0x27f9ff1d, 0xfd2b171c, 0xcbe6ea01, 0x50cd9, 0x91cef36,
    // -36, 30, -7, -8, 51, -7, 82, 1, -20, -37, 62, 13, 41, 36, -25, 9, -5, -31, -7, -21, -72, -14, 25, -17, 6, -5, 33, 49, -31, -1, 25, 20
    0xf8f91edc, 0x152f933, 0xd3edbec, 0x9e72429, 0xebf9e1fb, 0xef19f2b8, 0x3121fb06, 0x1419ffe1,
    // -17, -72, 52, -54, -34, 15, -13, 51, 7, 47, 16, 22, 35, -7, 11, 8, 16, 23, 7, 10, 94, -4, 21, -30, 7, -1, 10, 34, 2, -8, 20, 23
    0xca34b8ef, 0x33f30fde, 0x16102f07, 0x80bf923, 0xa071710, 0xe215fc5e, 0x220aff07, 0x1714f802,
    // 81, 52, -59, 33, -25, 81, -23, 60, -30, -3, -55, 70, -87, 8, 20, 41, -18, -33, 29, 100, 14, 79, -101, 4, -18, -41, -43, 14, 14, -99, -93, -73
    0x21c53451, 0x3ce951e7, 0x46c9fde2, 0x291408a9, 0x641ddfee, 0x49b4f0e, 0xed5d7ee, 0xb7a39d0e,
    // 9, 72, -45, -64, 2, -34, -37, -59, -40, 3, -29, -2, 20, -10, -16, 1, 17, -82, 7, 33, 3, -18, -35, 3, 9, 20, -6, 51, -49, -8, 55, 9
    0xc0d34809, 0xc5dbde02, 0xfee303d8, 0x1f0f614, 0x2107ae11, 0x3ddee03, 0x33fa1409, 0x937f8cf,
    // -64, 38, 51, -28, 0, 0, -33, 4, -32, 3, -43, 25, -19, 95, 35, 12, -98, -90, -35, 17, 73, 42, 23, 21, 59, 8, -14, 81, -36, -11, 21, 48
    0xe43326c0, 0x4df0000, 0x19d503e0, 0xc235fed, 0x11dda69e, 0x15172a49, 0x51f2083b, 0x3015f5dc,
    // -22, -18, -18, -22, -40, 3, -33, -27, -29, -84, -13, 10, 2, 106, 36, -87, -106, -12, -3, -19, -31, 33, -12, -80, -17, 31, 72, -5, 0, 24, 13, -31
    0xeaeeeeea, 0xe5df03d8, 0xaf3ace3, 0xa9246a02, 0xedfdf496, 0xb0f421e1, 0xfb481fef, 0xe10d1800,
    // 4, 18, -57, 7, -6, 18, 14, -1, -16, -16, -12, 13, -43, -7, -20, -5, -11, -5, -12, -1, 21, 8, 20, 26, 6, -7, -49, 20, -8, 18, -23, 20
    0x7c71204, 0xff0e12fa, 0xdf4f0f0, 0xfbecf9d5, 0xfff4fbf5, 0x1a140815, 0x14cff906, 0x14e912f8,
    // -20, 26, 6, -33, -6, 5, -19, 4, 14, 1, -4, 8, 7, 4, -1, 16, 4, -21, 4, 9, -12, 2, -14, -32, 1, 10, 8, -10, 3, -17, 0, 22
    0xdf061aec, 0x4ed05fa, 0x8fc010e, 0x10ff0407, 0x904eb04, 0xe0f202f4, 0xf6080a01, 0x1600ef03,
    // -21, -26, 28, 31, -13, -82, 14, -47, -71, 41, -1, -45, 57, -2, -45, 66, -1, 14, -38, -6, -35, -63, 0, 28, 49, -15, 55, -29, -6, -74, 26, 6
    0x1f1ce6eb, 0xd10eaef3, 0xd3ff29b9, 0x42d3fe39, 0xfada0eff, 0x1c00c1dd, 0xe337f131, 0x61ab6fa,
    // 84, -2, 39, -47, -82, 20, -38, -36, -31, 44, -29, 13, -1, -46, 17, -13, 49, 40, 79, -64, 49, -35, 60, 12, -72, -120, 3, 49, -61, 12, -11, -30
    0xd127fe54, 0xdcda14ae, 0xde32ce1, 0xf311d2ff, 0xc04f2831, 0xc3cdd31, 0x310388b8, 0xe2f50cc3,
};
static const uint embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords[8] = {
    // 0.02489, -0.05368, -0.03836, -0.12, 0.01619, 0.10156, -0.007076, -0.07623, 0.02092, -0.02127, -0.01862, 0.002687, 0.0641, 0.0478, 0.1306, 0.02333
    0xaadf265f, 0xafaea8e9, 0x2e802425, 0xace19f3f, 0xa572255b, 0x1981a4c4, 0x2a1e2c1a, 0x25f9302e,
};

[numthreads(64, 1, 1)]
void fsr4_model_v07_i8_pass12(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(64, 1, 1);
    
    const RWBufferStorage storage_fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 16), // threadGroupSliceSize
        uint3(1920, 1080, 16), // storageSize
        uint3(16, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        49766400, // threadGroupStorageByteOffset
        0.02286212518811226, storage_fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.004884105641394854, storage_embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_1_body_conv_dw_bias = { embedded_decoder2_ResidualBlock_1_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_1_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_1_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0049322666600346565, storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias = { embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.00493268109858036, storage_embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias = { embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias };
    
    // fused_quantized_NHWC_/decoder2/ResidualBlock_2/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_24 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_24 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(64, 1, 16);
    const uint3 groupSize_slice_24 = uint3(64, 1, 16);
    const uint3 storageSize_slice_24 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_24 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_24 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_24 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_24 = dot(groupStart_slice_24, tensorByteStrides_slice_24);
    const float quantizationScale_slice_24 = 0.027212543413043022;
    const RWBufferStorage storage_slice_24 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_24 = { logicalSize_slice_24, groupStart_slice_24, groupSize_slice_24, storageSize_slice_24, tensorByteStrides_slice_24, paddingBegin_slice_24, paddingEnd_slice_24, threadGroupByteOffsetInTensor_slice_24 + 0, quantizationScale_slice_24, storage_slice_24 };
    // ConvNextBlock (16, 1080, 1920), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,) -> (16, 1080, 1920)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    ConvNextBlock(31.40755668496543, 0.03183947131037712, 23.74390258572681, 0.04211607575416565, fused_fused_quantized_NHWC__decoder2_ResidualBlock_1_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__decoder2_ResidualBlock_1_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_1_body_conv_dw_bias, embedded__decoder2_ResidualBlock_1_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_1_body_conv_pw_expand_bias, embedded__decoder2_ResidualBlock_1_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_1_body_conv_pw_contract_bias, slice_24, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_12
#ifdef MLSR_PASS_12_POST
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/padding.hlsli"
#include "ml2code_runtime/tensor_int8.hlsli"

[numthreads(32, 1, 1)]
void fsr4_model_v07_i8_pass12_post(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID
)
{
    // fused_quantized_NHWC_/decoder2/ResidualBlock_2/body/input_quantization/act_quant/export_handler/QuantizeLinear_output_0
    const uint3 logicalSize_slice_25 = uint3(1920, 1080, 16);
    const int3 groupStart_slice_25 = int3(0, 0, 0) + ml2c_groupId.xyz * int3(32, 1, 16);
    const uint3 groupSize_slice_25 = uint3(32, 1, 16);
    const uint3 storageSize_slice_25 = uint3(1920, 1080, 16);
    const uint3 tensorByteStrides_slice_25 = uint3(16, 30720, 1);
    const uint3 paddingBegin_slice_25 = uint3(0, 0, 0);
    const uint3 paddingEnd_slice_25 = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_slice_25 = dot(groupStart_slice_25, tensorByteStrides_slice_25);
    const float quantizationScale_slice_25 = 0.027212543413043022;
    const RWBufferStorage storage_slice_25 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC<RWBufferStorage> slice_25 = { logicalSize_slice_25, groupStart_slice_25, groupSize_slice_25, storageSize_slice_25, tensorByteStrides_slice_25, paddingBegin_slice_25, paddingEnd_slice_25, threadGroupByteOffsetInTensor_slice_25 + 0, quantizationScale_slice_25, storage_slice_25 };
    
    StoreConstBatchOperation < int8_t4_packed, 16, QuantizedTensor3i8_NHWC<RWBufferStorage> > batchOp_0;
    ResetPaddingSeparate(slice_25, ml2c_dispatchThreadId, true, true, batchOp_0, (1, 1));
}
#endif // #ifdef MLSR_PASS_12_POST


#ifdef MLSR_PASS_13
#define ML2C_GROUPSHARED_SIZE 0

#include "ml2code_runtime/operators/float16_NHWC/Fused/CNB_CT2D.hlsli"

static const uint embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords[576] = {
    // -11, -10, -13, 3, 9, 8, -14, 3, 0, 6, 6, -7, 2, -5, -7, -2, 5, -17, 1, -5, -6, -9, -18, -16, -7, 5, -2, -4, 13, 11, -16, 14
    0x3f3f6f5, 0x3f20809, 0xf9060600, 0xfef9fb02, 0xfb01ef05, 0xf0eef7fa, 0xfcfe05f9, 0xef00b0d,
    // -8, -4, 0, 3, 5, -6, -9, 1, -2, 12, 2, 3, -1, -12, 5, 1, -7, 15, -19, 11, 34, 7, -1, 1, 7, 7, 14, -4, 9, 28, 26, -1
    0x300fcf8, 0x1f7fa05, 0x3020cfe, 0x105f4ff, 0xbed0ff9, 0x1ff0722, 0xfc0e0707, 0xff1a1c09,
    // 2, -37, 9, 7, 12, -7, -20, 0, -10, 33, -35, 5, 77, -16, 84, 17, 18, -5, -6, 4, 9, -11, 4, -19, 8, -6, 15, -8, 21, 11, 26, 3
    0x709db02, 0xecf90c, 0x5dd21f6, 0x1154f04d, 0x4fafb12, 0xed04f509, 0xf80ffa08, 0x31a0b15,
    // -10, -8, 1, 1, 0, 8, 1, 8, -3, 15, 5, -3, 2, -3, 4, -2, -12, -22, -16, -1, -1, 22, -1, -9, -8, 48, 12, -1, -11, 19, -7, 20
    0x101f8f6, 0x8010800, 0xfd050ffd, 0xfe04fd02, 0xfff0eaf4, 0xf7ff16ff, 0xff0c30f8, 0x14f913f5,
    // 2, -1, -15, 1, 1, 2, 6, -7, 6, 23, 24, -10, -12, -9, -1, 17, -5, 3, -9, -3, 0, 2, -8, 13, -1, 3, -1, 2, 10, -1, 4, 1
    0x1f1ff02, 0xf9060201, 0xf6181706, 0x11fff7f4, 0xfdf703fb, 0xdf80200, 0x2ff03ff, 0x104ff0a,
    // -9, -2, -3, 0, 5, -3, -5, 26, -6, 16, -4, -6, 25, 17, 0, 3, -9, 3, 4, 2, 0, -6, 0, 8, -5, -2, -1, 3, 4, 7, -2, 9
    0xfdfef7, 0x1afbfd05, 0xfafc10fa, 0x3001119, 0x20403f7, 0x800fa00, 0x3fffefb, 0x9fe0704,
    // -2, 13, -4, 4, 1, -15, -9, 7, -7, 2, 1, 26, 4, 4, -7, 17, 10, -8, -21, 4, 42, -31, -26, 1, -16, -19, -12, 9, 109, 41, -4, 16
    0x4fc0dfe, 0x7f7f101, 0x1a0102f9, 0x11f90404, 0x4ebf80a, 0x1e6e12a, 0x9f4edf0, 0x10fc296d,
    // -4, 13, -6, 8, 14, -8, -8, 6, -14, -9, -5, 15, 14, -2, 3, 5, 1, 7, 5, 4, -3, -2, -4, 1, -7, 8, 2, 7, 5, -1, 7, 6
    0x8fa0dfc, 0x6f8f80e, 0xffbf7f2, 0x503fe0e, 0x4050701, 0x1fcfefd, 0x70208f9, 0x607ff05,
    // -9, 9, 16, 1, 11, -7, -6, 5, -11, 10, 1, 1, 26, 8, 7, -3, -8, -3, 10, 4, 7, -2, -2, 11, -8, -5, -5, 6, 9, 1, -4, 5
    0x11009f7, 0x5faf90b, 0x1010af5, 0xfd07081a, 0x40afdf8, 0xbfefe07, 0x6fbfbf8, 0x5fc0109,
    // -13, 10, 22, 8, -2, -10, 11, 7, 0, 14, -5, -1, 8, -2, -1, 5, 3, -5, -1, -10, 9, -2, -9, 13, 11, 14, 12, 7, 16, -12, -4, -13
    0x8160af3, 0x70bf6fe, 0xfffb0e00, 0x5fffe08, 0xf6fffb03, 0xdf7fe09, 0x70c0e0b, 0xf3fcf410,
    // -7, 0, 16, 4, 9, 8, 9, 4, 4, -4, 10, -2, 5, 13, -9, 2, -26, -14, 9, 7, -31, -9, -2, 21, 1, -5, -2, 0, 32, -17, -31, -11
    0x41000f9, 0x4090809, 0xfe0afc04, 0x2f70d05, 0x709f2e6, 0x15fef7e1, 0xfefb01, 0xf5e1ef20,
    // 104, -69, 5, -19, 25, -75, -23, -30, 12, -59, 11, -41, 40, -14, -80, 5, -22, -17, 22, 14, 9, 27, 1, 3, 13, -2, -20, -5, 25, -10, -25, -9
    0xed05bb68, 0xe2e9b519, 0xd70bc50c, 0x5b0f228, 0xe16efea, 0x3011b09, 0xfbecfe0d, 0xf7e7f619,
    // -1, -13, 15, 2, -4, 10, 6, 4, -1, -8, 3, -5, 13, 14, -16, 3, -1, -6, 21, 0, -4, 5, -20, 19, 1, -20, -12, 10, 37, -16, -10, -10
    0x20ff3ff, 0x4060afc, 0xfb03f8ff, 0x3f00e0d, 0x15faff, 0x13ec05fc, 0xaf4ec01, 0xf6f6f025,
    // -9, -21, 31, 7, 10, 19, -14, 17, 0, -17, -27, 11, 11, 21, -4, -27, -6, 11, 4, 5, -8, -5, -1, -8, -1, -1, -2, -3, 5, -8, 1, -1
    0x71febf7, 0x11f2130a, 0xbe5ef00, 0xe5fc150b, 0x5040bfa, 0xf8fffbf8, 0xfdfeffff, 0xff01f805,
    // -5, 25, -3, -3, -7, -5, -1, -8, -4, -3, 3, 7, 16, -7, -8, -4, 2, 11, 3, 4, -1, 1, 9, 6, 4, -12, 0, 2, 10, -7, -25, -7
    0xfdfd19fb, 0xf8fffbf9, 0x703fdfc, 0xfcf8f910, 0x4030b02, 0x60901ff, 0x200f404, 0xf9e7f90a,
    // 6, 2, -1, 1, -3, -7, 1, -15, 8, -6, 17, 3, 32, 8, -15, -19, -14, 67, 42, 12, -75, 0, 1, -25, -17, 27, 4, -5, 127, 38, -12, -53
    0x1ff0206, 0xf101f9fd, 0x311fa08, 0xedf10820, 0xc2a43f2, 0xe70100b5, 0xfb041bef, 0xcbf4267f,
    // -17, 11, 2, 1, -4, 2, 10, -1, 21, 5, 1, -2, 14, 5, -27, -8, 8, 7, 7, 4, -3, 4, 3, -5, 5, -13, 4, 1, 15, -5, -20, -2
    0x1020bef, 0xff0a02fc, 0xfe010515, 0xf8e5050e, 0x4070708, 0xfb0304fd, 0x104f305, 0xfeecfb0f,
    // -6, 21, 3, -6, -15, 4, 3, 6, -1, -13, -11, 3, 21, -7, -19, -1, -10, -3, -3, 2, 1, -3, -2, -3, 3, -2, 3, 1, -5, -4, -15, -8
    0xfa0315fa, 0x60304f1, 0x3f5f3ff, 0xffedf915, 0x2fdfdf6, 0xfdfefd01, 0x103fe03, 0xf8f1fcfb,
    // -19, -6, 7, 4, 1, -24, 17, 18, -14, -12, -8, 2, 9, 5, -5, 8, -25, 3, -12, -16, 10, -25, 2, 36, -2, -29, -16, 13, 34, -51, -23, -15
    0x407faed, 0x1211e801, 0x2f8f4f2, 0x8fb0509, 0xf0f403e7, 0x2402e70a, 0xdf0e3fe, 0xf1e9cd22,
    // -15, -3, 0, 4, -5, -15, -2, -7, -6, -11, 0, 1, 0, -4, 10, 7, -63, 21, 14, 12, -6, -17, 1, 21, -6, 8, -13, -20, 1, -7, 22, -12
    0x400fdf1, 0xf9fef1fb, 0x100f5fa, 0x70afc00, 0xc0e15c1, 0x1501effa, 0xecf308fa, 0xf416f901,
    // -118, 55, -29, -5, 65, -8, -9, -45, 23, 21, 14, -29, 3, 57, 34, 2, -42, -13, 24, -4, 5, -9, -22, 2, 1, -6, -32, 5, 11, -29, 15, -23
    0xfbe3378a, 0xd3f7f841, 0xe30e1517, 0x2223903, 0xfc18f3d6, 0x2eaf705, 0x5e0fa01, 0xe90fe30b,
    // -6, -8, -9, 3, -6, -7, 3, 1, -7, 2, 0, -9, -3, 23, -5, -2, -31, -10, -25, -9, 0, 20, 1, 33, -6, -2, -11, 19, -20, -15, -25, -26
    0x3f7f8fa, 0x103f9fa, 0xf70002f9, 0xfefb17fd, 0xf7e7f6e1, 0x21011400, 0x13f5fefa, 0xe6e7f1ec,
    // 1, -15, 5, 14, 3, 3, -9, 28, 0, -3, -40, 14, -4, 11, -4, -23, 4, -7, -6, 4, 1, -3, 5, 16, -4, 9, 5, 11, -7, -3, 2, 3
    0xe05f101, 0x1cf70303, 0xed8fd00, 0xe9fc0bfc, 0x4faf904, 0x1005fd01, 0xb0509fc, 0x302fdf9,
    // -8, 3, -3, 6, 9, 5, 1, 23, -13, 2, 11, 9, -35, -8, 25, 7, -8, 1, 10, 3, 9, -5, -3, 3, 2, 2, 2, 2, -4, 3, 5, 10
    0x6fd03f8, 0x17010509, 0x90b02f3, 0x719f8dd, 0x30a01f8, 0x3fdfb09, 0x2020202, 0xa0503fc,
    // -16, -17, 5, -1, -1, -7, -1, 5, 5, 17, -13, 9, -9, -29, 13, 8, -36, -103, 2, -9, 3, -10, -16, -35, -29, 118, 9, -23, -16, 23, 53, -8
    0xff05eff0, 0x5fff9ff, 0x9f31105, 0x80de3f7, 0xf70299dc, 0xddf0f603, 0xe90976e3, 0xf83517f0,
    // -25, -32, 5, 6, 14, 10, 2, 15, -7, 1, 10, -3, -24, -4, -3, -3, -7, 3, 3, 5, -3, -14, -11, -3, 0, 4, 4, 5, -13, -6, 8, 7
    0x605e0e7, 0xf020a0e, 0xfd0a01f9, 0xfdfdfce8, 0x50303f9, 0xfdf5f2fd, 0x5040400, 0x708faf3,
    // -3, -9, -1, 0, 7, -8, -18, 12, -3, -15, -9, 2, -21, -24, 4, 5, -12, -5, 4, 8, 21, -1, 0, 18, -10, -31, -6, 6, -7, 8, 7, 4
    0xfff7fd, 0xceef807, 0x2f7f1fd, 0x504e8eb, 0x804fbf4, 0x1200ff15, 0x6fae1f6, 0x40708f9,
    // -3, -3, -11, -5, 4, 8, -1, 14, -2, -7, 9, -1, -7, 20, 0, 2, -26, 3, -4, -7, 9, 20, 1, 12, -2, 3, 10, 3, 15, 27, -4, -12
    0xfbf5fdfd, 0xeff0804, 0xff09f9fe, 0x20014f9, 0xf9fc03e6, 0xc011409, 0x30a03fe, 0xf4fc1b0f,
    // -4, 8, 1, -8, -11, 13, -5, -12, -5, -9, 1, 4, 3, 21, -8, 1, -26, 16, -17, 8, 0, 14, -3, 9, 15, -4, 11, 16, 0, 26, -3, -1
    0xf80108fc, 0xf4fb0df5, 0x401f7fb, 0x1f81503, 0x8ef10e6, 0x9fd0e00, 0x100bfc0f, 0xfffd1a00,
    // 5, 41, 13, -17, -19, 16, 5, 7, -26, 68, 14, 16, -19, 34, -13, 6, -28, 6, -13, -3, -15, 26, -8, -3, -3, 1, -8, 11, -1, 27, -13, -2
    0xef0d2905, 0x70510ed, 0x100e44e6, 0x6f322ed, 0xfdf306e4, 0xfdf81af1, 0xbf801fd, 0xfef31bff,
    // 7, 4, 4, -6, -6, 17, 1, -6, 1, -13, 8, 3, -4, 24, 6, 3, -26, -2, 10, -8, 0, 39, 2, 6, 2, 11, -2, 5, -4, 30, -10, -18
    0xfa040407, 0xfa0111fa, 0x308f301, 0x30618fc, 0xf80afee6, 0x6022700, 0x5fe0b02, 0xeef61efc,
    // 0, -7, 4, -6, 0, 24, -7, 9, -6, -18, -9, 4, -15, 27, 3, -11, -11, 8, 11, -2, 8, -7, -1, -15, -5, -12, 2, 3, -13, 10, 4, 13
    0xfa04f900, 0x9f91800, 0x4f7eefa, 0xf5031bf1, 0xfe0b08f5, 0xf1fff908, 0x302f4fb, 0xd040af3,
    // -6, -8, 11, -7, -15, 4, -5, 2, 7, 9, -12, 16, 8, -26, -6, 5, 1, -2, 1, -1, -6, -13, -5, 6, 1, 7, 2, 3, -7, -12, -8, 6
    0xf90bf8fa, 0x2fb04f1, 0x10f40907, 0x5fae608, 0xff01fe01, 0x6fbf3fa, 0x3020701, 0x6f8f4f9,
    // -1, 4, 6, 0, 17, 16, 7, 12, 12, -4, 13, 16, -8, 1, 15, -4, -10, -66, -19, 15, -35, -30, 16, -44, -25, 73, 17, 21, -49, 11, -123, -16
    0x604ff, 0xc071011, 0x100dfc0c, 0xfc0f01f8, 0xfedbef6, 0xd410e2dd, 0x151149e7, 0xf0850bcf,
    // 26, 5, 21, 7, 10, -5, -9, 7, -1, -8, 0, 13, 20, -6, 8, -9, -3, 1, 10, -1, -2, -4, -3, 4, -7, -6, 6, -5, -4, 8, -5, 3
    0x715051a, 0x7f7fb0a, 0xd00f8ff, 0xf708fa14, 0xff0a01fd, 0x4fdfcfe, 0xfb06faf9, 0x3fb08fc,
    // -8, -21, 12, 0, 3, 19, -5, 8, -8, 11, -9, 5, -12, 5, -3, -1, 3, -10, 15, 4, 7, 11, -20, 13, -9, -10, -13, 11, 12, 9, 3, 1
    0xcebf8, 0x8fb1303, 0x5f70bf8, 0xfffd05f4, 0x40ff603, 0xdec0b07, 0xbf3f6f7, 0x103090c,
    // -18, 11, -6, 0, -12, 15, -29, -31, -12, -19, 20, -1, 1, 0, -9, 5, -1, 29, -25, -23, -11, -33, -15, -22, 1, -10, 19, 23, -17, 39, -6, -2
    0xfa0bee, 0xe1e30ff4, 0xff14edf4, 0x5f70001, 0xe9e71dff, 0xeaf1dff5, 0x1713f601, 0xfefa27ef,
    // -19, 7, -1, 3, -13, -1, -7, -11, -10, -8, 4, 11, 5, -4, -8, 5, -52, 18, 17, 1, -27, -18, -22, -34, -24, 6, 22, -26, -7, 48, -18, 14
    0x3ff07ed, 0xf5f9fff3, 0xb04f8f6, 0x5f8fc05, 0x11112cc, 0xdeeaeee5, 0xe61606e8, 0xeee30f9,
    // -40, -49, 13, -52, -17, 56, 12, 75, -11, 47, 9, 65, 2, -17, -73, -38, -41, -10, -8, 6, -39, -29, 2, -55, 11, 2, 19, -15, 11, 49, -14, 19
    0xcc0dcfd8, 0x4b0c38ef, 0x41092ff5, 0xdab7ef02, 0x6f8f6d7, 0xc902e3d9, 0xf113020b, 0x13f2310b,
    // -11, -2, 1, 6, 1, 6, -1, -1, -3, -10, 1, -1, 13, -13, -15, 4, -7, 50, -15, -21, 20, -53, 25, -33, -13, -5, 40, -3, 5, 20, -4, 40
    0x601fef5, 0xffff0601, 0xff01f6fd, 0x4f1f30d, 0xebf132f9, 0xdf19cb14, 0xfd28fbf3, 0x28fc1405,
    // -23, 17, -28, 5, -18, -24, 13, -48, 0, 19, 64, -21, 17, -28, -20, 48, 4, 0, 15, -11, -8, -3, -13, -18, 5, 11, -5, 6, -7, -5, 1, 1
    0x5e411e9, 0xd00de8ee, 0xeb401300, 0x30ece411, 0xf50f0004, 0xeef3fdf8, 0x6fb0b05, 0x101fbf9,
    // 0, 4, 12, 17, 11, 11, 0, -4, 11, -2, 10, 6, 23, 19, 19, 1, 3, -6, -3, -8, -10, -3, -5, 2, -3, 9, -10, -4, -10, -4, 14, -3
    0x110c0400, 0xfc000b0b, 0x60afe0b, 0x1131317, 0xf8fdfa03, 0x2fbfdf6, 0xfcf609fd, 0xfd0efcf6,
    // 8, 7, -3, -28, -7, -10, 3, -11, -21, -4, -17, 3, 7, -4, -12, 3, -81, -36, 62, -13, 15, 12, 24, -27, 44, 24, 16, -4, 22, 53, -30, -44
    0xe4fd0708, 0xf503f6f9, 0x3effceb, 0x3f4fc07, 0xf33edcaf, 0xe5180c0f, 0xfc10182c, 0xd4e23516,
    // 12, 5, -4, -31, 0, 0, -4, 1, -21, 4, -23, 8, 12, 2, 5, 0, 8, -9, -13, -7, 7, -4, -4, -2, 0, 23, -10, 3, -10, -12, 8, 0
    0xe1fc050c, 0x1fc0000, 0x8e904eb, 0x5020c, 0xf9f3f708, 0xfefcfc07, 0x3f61700, 0x8f4f6,
    // 19, -2, 9, 16, 15, -17, 10, -3, 5, -11, 10, -9, 36, 5, 2, -2, 11, 13, -9, -14, -21, -13, -7, -5, 4, 25, -5, -5, 7, -12, 2, -5
    0x1009fe13, 0xfd0aef0f, 0xf70af505, 0xfe020524, 0xf2f70d0b, 0xfbf9f3eb, 0xfbfb1904, 0xfb02f407,
    // 6, -16, -9, 0, -3, 13, -7, -15, -2, -23, 7, -6, 1, 14, 0, -1, 4, 14, -37, -2, 1, 47, -2, 30, -2, -12, 7, 24, 26, 12, 17, 5
    0xf7f006, 0xf1f90dfd, 0xfa07e9fe, 0xff000e01, 0xfedb0e04, 0x1efe2f01, 0x1807f4fe, 0x5110c1a,
    // 7, -6, -4, 2, 6, -7, 8, 8, 8, -6, 2, -4, -1, 14, 8, 2, 6, 2, 24, 10, 19, 19, 9, 0, -21, 39, -13, -17, 18, 22, -1, 5
    0x2fcfa07, 0x808f906, 0xfc02fa08, 0x2080eff, 0xa180206, 0x91313, 0xeff327eb, 0x5ff1612,
    // 73, 75, -51, -4, 96, 78, 7, 19, -59, 68, 5, 42, 16, 56, -23, 44, 13, -4, 35, 4, 43, 42, 9, 18, -18, 27, -9, 9, 41, 34, 9, -15
    0xfccd4b49, 0x13074e60, 0x2a0544c5, 0x2ce93810, 0x423fc0d, 0x12092a2b, 0x9f71bee, 0xf1092229,
    // 13, -10, -7, -3, 1, -3, -10, -7, 2, -3, -4, -11, -11, -2, -5, -3, 29, 25, -16, -2, 17, 7, -17, 16, -13, 8, -4, 31, 7, 4, 20, 18
    0xfdf9f60d, 0xf9f6fd01, 0xf5fcfd02, 0xfdfbfef5, 0xfef0191d, 0x10ef0711, 0x1ffc08f3, 0x12140407,
    // 4, -11, -3, -1, 17, 0, -8, 8, -1, -8, -5, -4, -14, 0, 11, -5, 3, 17, 16, 12, 7, 1, -38, -70, -6, -10, 31, -9, -49, 18, -6, 17
    0xfffdf504, 0x8f80011, 0xfcfbf8ff, 0xfb0b00f2, 0xc101103, 0xbada0107, 0xf71ff6fa, 0x11fa12cf,
    // -21, 27, -19, 8, -32, 15, -22, -16, 15, 36, 21, 2, -11, 23, 33, 1, -11, 12, -6, 16, 13, -11, -7, 29, 9, 3, 17, 5, -9, 0, -2, -4
    0x8ed1beb, 0xf0ea0fe0, 0x215240f, 0x12117f5, 0x10fa0cf5, 0x1df9f50d, 0x5110309, 0xfcfe00f7,
    // -33, 16, -15, 12, -16, 0, -22, -14, 18, 1, 13, 22, 9, -2, -7, 17, -55, 46, 6, 107, 20, -15, -2, -32, 98, 61, -28, -40, -84, -14, 38, -7
    0xcf110df, 0xf2ea00f0, 0x160d0112, 0x11f9fe09, 0x6b062ec9, 0xe0fef114, 0xd8e43d62, 0xf926f2ac,
    // -13, -15, -17, 22, 0, 10, -4, -31, 31, 34, 7, 7, -62, 36, -18, -5, -20, -5, 9, -1, 8, -5, -25, 7, 14, -24, 13, 15, 17, -2, 13, 16
    0x16eff1f3, 0xe1fc0a00, 0x707221f, 0xfbee24c2, 0xff09fbec, 0x7e7fb08, 0xf0de80e, 0x100dfe11,
    // -30, 3, 11, -3, -41, -29, -33, -29, 13, 35, 14, 20, -5, 23, 14, 24, -25, -4, -15, -1, -11, -2, -21, -7, 14, -22, 18, 0, -3, 16, 6, 5
    0xfd0b03e2, 0xe3dfe3d7, 0x140e230d, 0x180e17fb, 0xfff1fce7, 0xf9ebfef5, 0x12ea0e, 0x50610fd,
    // 5, 11, 17, -3, -4, -4, -1, -2, 4, 2, -4, 10, 0, -2, 3, 8, 19, -46, 12, -10, 15, -4, 3, 9, 6, -9, 6, -2, -7, -16, -36, 11
    0xfd110b05, 0xfefffcfc, 0xafc0204, 0x803fe00, 0xf60cd213, 0x903fc0f, 0xfe06f706, 0xbdcf0f9,
    // 10, -6, 5, 0, 5, 3, 0, -4, 3, -20, 6, -1, 15, 10, -16, 8, -3, 26, 29, -12, 8, -7, -8, -18, 11, -21, 16, 8, -19, -2, 15, 7
    0x5fa0a, 0xfc000305, 0xff06ec03, 0x8f00a0f, 0xf41d1afd, 0xeef8f908, 0x810eb0b, 0x70ffeed,
    // 24, 2, 98, -22, 69, 36, -20, 10, 105, 75, -18, -25, -23, -13, -45, 5, 25, 27, 37, -1, 18, 9, -12, 14, -6, -49, -1, -11, 41, -2, 11, 20
    0xea620218, 0xaec2445, 0xe7ee4b69, 0x5d3f3e9, 0xff251b19, 0xef40912, 0xf5ffcffa, 0x140bfe29,
    // 13, 9, 9, -7, 7, 8, -6, 2, 11, -14, 2, 12, 11, -2, -13, 11, -3, -6, 2, -16, -7, 5, 8, -8, 20, 9, 17, 6, -29, -6, -42, 17
    0xf909090d, 0x2fa0807, 0xc02f20b, 0xbf3fe0b, 0xf002fafd, 0xf80805f9, 0x6110914, 0x11d6fae3,
    // 5, 4, 14, -5, 5, -6, -5, -10, 9, 1, 7, 3, 15, 2, -2, 8, -1, 1, 1, 6, -15, -15, 5, 14, -16, 0, -3, 4, 3, -16, -2, -2
    0xfb0e0405, 0xf6fbfa05, 0x3070109, 0x8fe020f, 0x60101ff, 0xe05f1f1, 0x4fd00f0, 0xfefef003,
    // 1, -8, 4, 8, 17, -15, -15, -2, -14, 25, 12, 12, 29, -7, 43, 0, -7, -2, 10, 8, -4, -11, -15, -4, -3, 12, -1, -4, 14, -9, 5, -1
    0x804f801, 0xfef1f111, 0xc0c19f2, 0x2bf91d, 0x80afef9, 0xfcf1f5fc, 0xfcff0cfd, 0xff05f70e,
    // 8, 17, -3, 28, -36, 17, -10, 37, -16, 9, -2, 5, 4, -4, 0, 19, -36, -51, 8, 74, 42, 66, 11, 11, 56, 42, 68, -11, 27, 46, 0, 3
    0x1cfd1108, 0x25f611dc, 0x5fe09f0, 0x1300fc04, 0x4a08cddc, 0xb0b422a, 0xf5442a38, 0x3002e1b,
    // 8, 6, -13, 36, -21, 4, 5, 19, -17, -1, 22, -5, -20, -10, -16, 38, 14, -6, 13, 4, -26, 2, 6, 6, -19, 3, -2, -3, 7, -13, 0, -5
    0x24f30608, 0x130504eb, 0xfb16ffef, 0x26f0f6ec, 0x40dfa0e, 0x60602e6, 0xfdfe03ed, 0xfb00f307,
    // 9, 1, 8, 4, -6, 10, -1, -16, -3, 35, 21, 10, 17, 8, 5, -16, -2, -21, 11, 6, -2, 7, 4, 4, -18, 4, 2, -7, -9, -13, -6, 1
    0x4080109, 0xf0ff0afa, 0xa1523fd, 0xf0050811, 0x60bebfe, 0x40407fe, 0xf90204ee, 0x1faf3f7,
    // -2, 9, -19, -8, -16, -3, 1, -6, -7, -2, 6, 5, -16, 10, -16, -6, 14, 8, -30, 8, -15, -18, -5, -5, 4, 2, 1, 17, 10, 1, 9, -4
    0xf8ed09fe, 0xfa01fdf0, 0x506fef9, 0xfaf00af0, 0x8e2080e, 0xfbfbeef1, 0x11010204, 0xfc09010a,
    // 0, 11, -19, -7, -24, -3, -2, -8, 0, 15, 1, 6, -21, 2, -4, -4, 11, -13, -26, -5, -3, 25, 17, 22, -7, -12, -10, -17, 4, 2, -17, -9
    0xf9ed0b00, 0xf8fefde8, 0x6010f00, 0xfcfc02eb, 0xfbe6f30b, 0x161119fd, 0xeff6f4f9, 0xf7ef0204,
    // 38, -31, 14, 34, -31, -38, -19, -6, -15, 26, -25, -78, 23, -20, 47, -12, 13, 20, -23, -17, -30, 17, -7, -2, -20, -14, -23, 4, 3, 2, 12, -5
    0x220ee126, 0xfaeddae1, 0xb2e71af1, 0xf42fec17, 0xefe9140d, 0xfef911e2, 0x4e9f2ec, 0xfb0c0203,
    // -1, 10, -15, 0, -9, 1, 4, 3, 1, -7, -2, 7, -2, 15, -1, 4, 22, 17, -9, 9, -6, -3, 4, 2, -5, -11, -6, 11, 6, -7, 25, -4
    0xf10aff, 0x30401f7, 0x7fef901, 0x4ff0ffe, 0x9f71116, 0x204fdfa, 0xbfaf5fb, 0xfc19f906,
    // 0, 10, -7, -4, -15, 9, -8, 9, -6, 7, -12, 16, -1, 17, 8, 3, 1, -6, -12, -12, 0, 24, -13, -39, -16, -20, 20, -15, -20, 9, -9, -1
    0xfcf90a00, 0x9f809f1, 0x10f407fa, 0x30811ff, 0xf4f4fa01, 0xd9f31800, 0xf114ecf0, 0xfff709ec,
    // -12, -24, -13, 0, 18, 11, 29, 20, -9, -50, 10, -23, 13, -12, -10, -11, -20, -2, 12, -2, 13, 8, 11, 9, 12, -11, -5, -7, -7, -4, -1, -1
    0xf3e8f4, 0x141d0b12, 0xe90acef7, 0xf5f6f40d, 0xfe0cfeec, 0x90b080d, 0xf9fbf50c, 0xfffffcf9,
    // 4, 17, 3, -22, 25, -3, 9, -35, -18, -21, 3, -18, -5, 3, 2, -1, 30, -1, -26, 17, 88, -12, 37, 21, -66, -25, -32, -75, -36, -80, -28, -43
    0xea031104, 0xdd09fd19, 0xee03ebee, 0xff0203fb, 0x11e6ff1e, 0x1525f458, 0xb5e0e7be, 0xd5e4b0dc,
    // -7, 4, 7, -12, 16, 28, 3, -14, -22, -55, -3, -7, -21, 4, 6, -12, -2, 6, -2, -3, 0, 4, 1, -1, -10, -13, 13, -2, 2, -1, 4, -9
    0xf40704f9, 0xf2031c10, 0xf9fdc9ea, 0xf40604eb, 0xfdfe06fe, 0xff010400, 0xfe0df3f6, 0xf704ff02,
    // -19, 8, 4, -7, 34, -7, 30, -12, -10, -5, 21, -22, -6, -9, -35, 10, -23, -11, -7, -3, 14, 20, 5, -15, -6, -27, 32, -6, 10, 6, -1, 17
    0xf90408ed, 0xf41ef922, 0xea15fbf6, 0xaddf7fa, 0xfdf9f5e9, 0xf105140e, 0xfa20e5fa, 0x11ff060a,
};
static const uint embedded_decoder2_ResidualBlock_2_body_conv_dw_bias_dwords[8] = {
    // -0.1475, -0.1382, 0.0671, -0.06067, -0.0799, -0.0885, 0.02867, 0.0871, 0.01848, -0.04834, 0.00010574, 0.1528, 0.0661, -0.234, 0.1906, 0.264
    0xb06cb0b8, 0xabc42c4b, 0xadaaad1d, 0x2d932757, 0xaa3024bb, 0x30e406ee, 0xb37d2c3b, 0x34393219,
};
static const uint embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // -44, 30, -64, 11, -24, -31, 36, 108, 32, -55, 22, 55, -17, 76, -23, -89, 56, 40, 71, -27, 6, 3, -67, 3, 6, -47, -98, 34, -12, -2, 29, -7
    0xbc01ed4, 0x6c24e1e8, 0x3716c920, 0xa7e94cef, 0xe5472838, 0x3bd0306, 0x229ed106, 0xf91dfef4,
    // -67, -6, -12, -18, 66, -26, 22, -8, 56, 4, 7, 21, -30, -9, -79, -32, 48, -10, 6, -34, 37, -46, -38, 52, -3, -29, -51, -15, 18, 24, 31, 5
    0xeef4fabd, 0xf816e642, 0x15070438, 0xe0b1f7e2, 0xde06f630, 0x34dad225, 0xf1cde3fd, 0x51f1812,
    // 75, -1, -34, -82, -27, 62, -13, 12, -26, 21, 3, 31, -36, 36, 29, -41, 39, 6, 35, 38, 0, 16, -38, -22, -10, 4, -14, -7, -15, 14, 2, 18
    0xaedeff4b, 0xcf33ee5, 0x1f0315e6, 0xd71d24dc, 0x26230627, 0xeada1000, 0xf9f204f6, 0x12020ef1,
    // 17, -24, -18, -5, 33, 7, 2, -58, -12, -24, 0, 40, 49, 11, 12, -16, 36, 0, -9, 1, 4, 26, 2, -20, -11, 67, -12, 10, 14, -14, 41, -15
    0xfbeee811, 0xc6020721, 0x2800e8f4, 0xf00c0b31, 0x1f70024, 0xec021a04, 0xaf443f5, 0xf129f20e,
    // -15, -73, -25, 5, 21, 3, 15, 10, 1, 25, -14, 11, -4, 10, -46, -13, -44, -110, -1, -57, -15, 46, -18, 34, -1, -32, -75, -4, 44, -24, 40, 6
    0x5e7b7f1, 0xa0f0315, 0xbf21901, 0xf3d20afc, 0xc7ff92d4, 0x22ee2ef1, 0xfcb5e0ff, 0x628e82c,
    // 10, 26, 17, 5, -1, 19, -70, 41, 10, 28, 2, -9, -13, -6, 1, -16, -9, -18, -1, 40, -8, 51, 5, 59, 30, 22, -10, -2, -11, 5, 11, -24
    0x5111a0a, 0x29ba13ff, 0xf7021c0a, 0xf001faf3, 0x28ffeef7, 0x3b0533f8, 0xfef6161e, 0xe80b05f5,
    // 12, -13, 18, -52, 31, -31, -6, -12, 21, -34, -13, 7, -9, -21, 8, -30, 14, 60, 1, -76, 34, 75, 36, 99, 21, 81, -56, 36, 104, 13, -68, -13
    0xcc12f30c, 0xf4fae11f, 0x7f3de15, 0xe208ebf7, 0xb4013c0e, 0x63244b22, 0x24c85115, 0xf3bc0d68,
    // -28, 17, 40, 3, 37, 23, 11, 21, -49, 0, 5, -10, -6, 1, 8, -27, 1, 1, 12, 22, 1, 7, 53, 2, 17, -14, 8, 10, 2, 8, -5, 5
    0x32811e4, 0x150b1725, 0xf60500cf, 0xe50801fa, 0x160c0101, 0x2350701, 0xa08f211, 0x5fb0802,
    // 9, -4, 24, 56, -66, -60, -15, 19, -25, 42, -17, 29, 42, 17, 33, -76, -21, 19, 19, 11, -29, 61, -14, -3, 5, -21, -11, 13, -15, -35, -30, -14
    0x3818fc09, 0x13f1c4be, 0x1def2ae7, 0xb421112a, 0xb1313eb, 0xfdf23de3, 0xdf5eb05, 0xf2e2ddf1,
    // 85, -41, -92, 45, 118, 6, 10, -104, -29, -24, 1, 106, 99, 34, -23, -63, 35, 3, -45, -30, 21, 84, -2, -4, -2, 4, 3, 1, -14, 1, 32, 10
    0x2da4d755, 0x980a0676, 0x6a01e8e3, 0xc1e92263, 0xe2d30323, 0xfcfe5415, 0x10304fe, 0xa2001f2,
    // -61, -23, 60, -23, -22, 48, -55, -79, 1, 8, -25, 28, -27, -1, 14, 0, -16, 1, 10, 77, -1, -23, 5, -13, 6, 44, -27, -2, 56, -38, 42, -24
    0xe93ce9c3, 0xb1c930ea, 0x1ce70801, 0xeffe5, 0x4d0a01f0, 0xf305e9ff, 0xfee52c06, 0xe82ada38,
    // -70, -2, -102, 108, 42, -40, 16, -45, -13, 1, -61, 31, -87, 1, 30, -7, -19, 22, -13, -1, -4, -9, -48, -47, -28, -7, -17, 14, -10, -11, -11, 4
    0x6c9afeba, 0xd310d82a, 0x1fc301f3, 0xf91e01a9, 0xfff316ed, 0xd1d0f7fc, 0xeeff9e4, 0x4f5f5f6,
    // -25, -15, 24, -3, 3, -2, 10, 82, -14, -11, 15, 44, -1, -16, 38, 57, -15, 30, 4, -38, -10, -15, -10, 7, -20, 24, -58, -13, -13, -20, -13, 22
    0xfd18f1e7, 0x520afe03, 0x2c0ff5f2, 0x3926f0ff, 0xda041ef1, 0x7f6f1f6, 0xf3c618ec, 0x16f3ecf3,
    // 25, -18, -42, -3, -39, -25, -10, -21, 49, -3, -6, 11, 7, -3, -7, 27, 21, -37, 11, 6, 0, -30, 21, -32, -3, 2, -17, -3, -43, -25, 39, -7
    0xfdd6ee19, 0xebf6e7d9, 0xbfafd31, 0x1bf9fd07, 0x60bdb15, 0xe015e200, 0xfdef02fd, 0xf927e7d5,
    // -30, 12, 4, -2, 58, 5, 8, -22, 24, 37, -8, -8, 4, -31, -8, 42, -67, -10, 37, -34, 9, -2, -10, -74, 14, 44, 0, 4, 29, 57, 36, 14
    0xfe040ce2, 0xea08053a, 0xf8f82518, 0x2af8e104, 0xde25f6bd, 0xb6f6fe09, 0x4002c0e, 0xe24391d,
    // -17, -10, 10, 66, -5, -25, -4, -2, 1, 12, -9, -9, 35, -10, 20, -4, -19, -58, -30, 127, 10, 118, 16, 123, 75, 79, -26, 9, -62, 27, -10, -82
    0x420af6ef, 0xfefce7fb, 0xf7f70c01, 0xfc14f623, 0x7fe2c6ed, 0x7b10760a, 0x9e64f4b, 0xaef61bc2,
};
static const uint embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias_dwords[16] = {
    // -0.05112, -0.2142, -0.05124, 0.2634, 0.0109, -0.2356, 0.4502, 0.05194, 0.503, -0.6, 0.1973, 0.4004, -0.001918, 0.00152, -0.1549, 0.0802
    0xb2dbaa8b, 0x3437aa8f, 0xb38a2195, 0x2aa63734, 0xb8cd3806, 0x36683250, 0x163a97db, 0x2d22b0f5,
    // 0.03445, 0.09564, -0.552, 0.1301, -0.0758, -0.0827, -0.0493, 0.3213, 0.392, -0.1616, 0.1514, 0.513, 0.0826, 0.2277, 0.2391, -0.4111
    0x2e1f2869, 0x302ab86a, 0xad4bacda, 0x3524aa4f, 0xb12c3646, 0x381b30d8, 0x33492d49, 0xb69433a7,
};
static const uint embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 20, 97, -19, 52, -3, 23, -10, 25, -72, 109, 50, -58, 39, -23, -9, -42, 32, 61, -51, -60, 6, 27, -105, 49, -10, 5, 15, -40, -8, 33, 43, -128
    0x34ed6114, 0x19f617fd, 0xc6326db8, 0xd6f7e927, 0xc4cd3d20, 0x31971b06, 0xd80f05f6, 0x802b21f8,
    // 15, 6, -13, 4, -4, 2, 35, -19, 4, -29, -21, -40, 34, -104, 15, 25, 39, -19, 59, -65, 23, 49, 108, 31, 23, -2, -12, 44, -26, 6, 64, -74
    0x4f3060f, 0xed2302fc, 0xd8ebe304, 0x190f9822, 0xbf3bed27, 0x1f6c3117, 0x2cf4fe17, 0xb64006e6,
    // -19, -10, -33, 19, -16, -7, -6, 57, 12, 13, 23, 19, -52, 64, 29, -47, 23, 3, 10, -84, -21, 20, -71, 8, 21, 11, -29, 5, 4, -60, 43, 18
    0x13dff6ed, 0x39faf9f0, 0x13170d0c, 0xd11d40cc, 0xac0a0317, 0x8b914eb, 0x5e30b15, 0x122bc404,
    // 108, -6, -52, -31, 81, 18, 19, -33, -9, -13, -70, -25, -37, -53, -5, -23, 76, -40, 64, -14, -8, -33, 70, -16, -82, 59, -3, 6, -58, -35, -20, -39
    0xe1ccfa6c, 0xdf131251, 0xe7baf3f7, 0xe9fbcbdb, 0xf240d84c, 0xf046dff8, 0x6fd3bae, 0xd9ecddc6,
    // 2, 8, 32, 21, 4, -6, 42, -15, 19, 26, -32, -27, -20, 72, 11, 20, -16, 23, 72, 35, -45, -5, -81, -13, -37, 1, -12, -4, -24, -30, -22, -65
    0x15200802, 0xf12afa04, 0xe5e01a13, 0x140b48ec, 0x234817f0, 0xf3affbd3, 0xfcf401db, 0xbfeae2e8,
    // 0, -14, 2, -7, -5, -12, 31, -11, 21, -28, -3, 14, 7, 26, -2, -2, -5, -10, 28, -6, -13, -4, 4, 0, 8, 8, 7, 11, -14, -8, 3, 17
    0xf902f200, 0xf51ff4fb, 0xefde415, 0xfefe1a07, 0xfa1cf6fb, 0x4fcf3, 0xb070808, 0x1103f8f2,
    // -14, -22, 17, -14, -18, -6, 5, -13, 29, -18, -21, 17, 16, -18, 49, -15, -23, 3, -3, 9, 21, 0, 40, -15, -18, -14, -49, 2, 0, 9, -11, 50
    0xf211eaf2, 0xf305faee, 0x11ebee1d, 0xf131ee10, 0x9fd03e9, 0xf1280015, 0x2cff2ee, 0x32f50900,
    // 10, 18, 11, 14, 14, 4, -12, -13, -9, 29, 13, -17, 23, -6, 40, -1, -1, 9, 1, 28, -2, -4, -25, 19, 13, 10, -36, 13, -4, -50, 4, -42
    0xe0b120a, 0xf3f4040e, 0xef0d1df7, 0xff28fa17, 0x1c0109ff, 0x13e7fcfe, 0xddc0a0d, 0xd604cefc,
    // -5, -31, 3, -9, -32, -13, 58, -19, 18, -63, -37, -22, -23, 102, 3, 53, 17, -35, 118, -55, -79, 55, -30, -39, 22, -6, -4, -27, 19, 30, 41, -42
    0xf703e1fb, 0xed3af3e0, 0xeadbc112, 0x350366e9, 0xc976dd11, 0xd9e237b1, 0xe5fcfa16, 0xd6291e13,
    // 15, -15, -79, -2, 48, -24, -11, 55, 0, 0, 8, 30, -37, 22, 14, -7, 29, -10, -28, -11, 6, -39, -3, 1, 13, 23, -9, 15, -32, 29, -47, 50
    0xfeb1f10f, 0x37f5e830, 0x1e080000, 0xf90e16db, 0xf5e4f61d, 0x1fdd906, 0xff7170d, 0x32d11de0,
    // 17, -2, 5, 15, 23, 3, -20, -23, 16, -4, 15, 7, 10, 26, -44, 0, 11, 21, 24, 15, -11, -6, -23, 3, 23, 21, 44, 6, -19, -74, 12, 10
    0xf05fe11, 0xe9ec0317, 0x70ffc10, 0xd41a0a, 0xf18150b, 0x3e9faf5, 0x62c1517, 0xa0cb6ed,
    // 53, -1, 11, -3, 25, 28, -26, -67, 0, -12, -15, 22, -2, 10, 35, 24, 35, 16, -38, 12, 9, 15, -1, -25, 46, 18, -36, -33, -21, 53, 15, 36
    0xfd0bff35, 0xbde61c19, 0x16f1f400, 0x18230afe, 0xcda1023, 0xe7ff0f09, 0xdfdc122e, 0x240f35eb,
    // -4, -9, -13, -5, -18, -14, 7, 22, 14, 3, -10, 3, -30, -13, -8, -27, 14, -18, 7, -57, 1, 19, 17, 2, -6, 1, 9, -1, 1, 19, 30, 6
    0xfbf3f7fc, 0x1607f2ee, 0x3f6030e, 0xe5f8f3e2, 0xc707ee0e, 0x2111301, 0xff0901fa, 0x61e1301,
    // -1, -10, -3, -4, -2, -12, 2, 1, 0, -6, -8, 7, -15, 10, 4, 18, 0, -9, 11, -10, 0, 0, 7, -3, 1, 5, -2, 5, -5, -5, 1, 15
    0xfcfdf6ff, 0x102f4fe, 0x7f8fa00, 0x12040af1, 0xf60bf700, 0xfd070000, 0x5fe0501, 0xf01fbfb,
    // -28, 2, -40, 21, 27, 15, 37, 51, -9, -12, -7, -46, -17, -38, 6, -26, -25, -18, 75, 53, -18, -77, 48, 21, 31, 8, -7, -9, 19, 26, -65, -80
    0x15d802e4, 0x33250f1b, 0xd2f9f4f7, 0xe606daef, 0x354beee7, 0x1530b3ee, 0xf7f9081f, 0xb0bf1a13,
    // 38, 12, 17, 15, 25, 39, 6, -35, 6, 23, -14, -14, -5, 36, -6, -10, 15, 7, -7, 33, -16, -7, -71, 5, 36, 16, 3, -29, -5, 1, -7, -52
    0xf110c26, 0xdd062719, 0xf2f21706, 0xf6fa24fb, 0x21f9070f, 0x5b9f9f0, 0xe3031024, 0xccf901fb,
};
static const uint embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias_dwords[8] = {
    // -0.1238, -0.33, 0.2366, 0.04132, 0.1162, 0.2444, -0.1375, -0.04593, -0.238, 0.1144, -0.0458, -0.085, 0.2046, 0.0795, 0.3267, -0.1279
    0xb548afec, 0x294a3392, 0x33d22f70, 0xa9e1b066, 0x2f52b39e, 0xad71a9dd, 0x2d17328c, 0xb018353a,
};
static const uint embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords[128] = {
    // 7, 27, 25, -2, -18, 6, -8, 4, 13, -12, -10, -10, 37, -2, -36, 5, -20, 17, -33, -6, -5, 6, 2, 32, 6, -94, -11, -14, -78, -29, -56, 24
    0xfe191b07, 0x4f806ee, 0xf6f6f40d, 0x5dcfe25, 0xfadf11ec, 0x200206fb, 0xf2f5a206, 0x18c8e3b2,
    // -2, 37, -47, 29, 3, 41, -25, 27, 7, 23, -15, 21, -47, -9, -54, 62, -100, -82, 24, -17, -4, 80, -2, -46, 41, 88, 15, 22, 26, 81, -74, -11
    0x1dd125fe, 0x1be72903, 0x15f11707, 0x3ecaf7d1, 0xef18ae9c, 0xd2fe50fc, 0x160f5829, 0xf5b6511a,
    // 8, -10, -3, 10, -4, -23, 8, -4, 6, -9, -7, -12, -16, 66, -5, -5, -1, -24, -7, 21, 7, -16, 18, 11, 7, -9, -16, -17, 22, -39, -12, -14
    0xafdf608, 0xfc08e9fc, 0xf4f9f706, 0xfbfb42f0, 0x15f9e8ff, 0xb12f007, 0xeff0f707, 0xf2f4d916,
    // -5, 2, 1, -1, -4, -20, 12, -27, -1, -4, 19, -11, 16, -18, 4, 24, 7, -5, 27, 17, 15, 14, -22, -39, -18, -30, -37, 5, -45, 44, -1, -25
    0xff0102fb, 0xe50cecfc, 0xf513fcff, 0x1804ee10, 0x111bfb07, 0xd9ea0e0f, 0x5dbe2ee, 0xe7ff2cd3,
    // 12, 24, 32, -1, -14, 9, 5, 5, 8, -27, 12, -3, 40, 8, -36, -9, -2, 4, -61, -23, 19, -26, 7, -6, 27, -71, -13, 34, -60, -24, -33, 7
    0xff20180c, 0x50509f2, 0xfd0ce508, 0xf7dc0828, 0xe9c304fe, 0xfa07e613, 0x22f3b91b, 0x7dfe8c4,
    // 6, 29, -58, 23, 10, 29, -25, 13, 17, 34, -18, 39, -37, -7, -44, 57, -128, 13, -26, 4, -80, 65, 28, -48, -9, 45, 21, 19, 44, 83, -41, -56
    0x17c61d06, 0xde71d0a, 0x27ee2211, 0x39d4f9db, 0x4e60d80, 0xd01c41b0, 0x13152df7, 0xc8d7532c,
    // 4, 0, 0, 1, 1, -35, 17, -2, 2, -2, -7, -12, -9, 72, -2, 10, 1, -19, 3, 7, -4, -7, 17, 24, 3, -19, -20, 2, 27, 10, 7, -6
    0x1000004, 0xfe11dd01, 0xf4f9fe02, 0xafe48f7, 0x703ed01, 0x1811f9fc, 0x2eced03, 0xfa070a1b,
    // 0, -8, -12, 11, 16, -12, 16, -14, -4, 0, -1, -20, 29, -38, -14, 1, 3, -20, 0, 8, -27, 6, -36, -12, 8, -28, -7, -2, -29, 31, 8, -16
    0xbf4f800, 0xf210f410, 0xecff00fc, 0x1f2da1d, 0x800ec03, 0xf4dc06e5, 0xfef9e408, 0xf0081fe3,
    // 19, 26, 11, -10, -9, 8, 3, -11, 17, -7, -11, 7, 39, 5, -35, -3, -23, 10, -27, -7, -2, -10, 8, 33, -2, -103, 13, -1, -60, -21, -56, 10
    0xf60b1a13, 0xf50308f7, 0x7f5f911, 0xfddd0527, 0xf9e50ae9, 0x2108f6fe, 0xff0d99fe, 0xac8ebc4,
    // 5, 16, -11, 36, 10, -5, 1, 16, -5, -15, 74, 64, -22, 14, -26, -7, -69, -10, 35, 12, 93, 89, -21, -24, 119, 20, 34, -18, 18, 85, 50, 4
    0x24f51005, 0x1001fb0a, 0x404af1fb, 0xf9e60eea, 0xc23f6bb, 0xe8eb595d, 0xee221477, 0x4325512,
    // 9, 1, -3, 1, 8, -8, 12, -1, -8, 2, 2, -6, 9, 88, -1, 9, 6, -10, 1, 12, 23, 13, 18, 21, -12, 1, -17, 0, 38, 10, -6, -9
    0x1fd0109, 0xff0cf808, 0xfa0202f8, 0x9ff5809, 0xc01f606, 0x15120d17, 0xef01f4, 0xf7fa0a26,
    // 3, -13, 0, 8, 8, 2, 5, -29, -12, -18, 4, -10, 37, 5, 2, 11, -6, 7, -8, -1, 22, 3, -36, -2, -11, 9, -6, -3, 0, 17, -14, -14
    0x800f303, 0xe3050208, 0xf604eef4, 0xb020525, 0xfff807fa, 0xfedc0316, 0xfdfa09f5, 0xf2f21100,
    // 18, 20, 21, -8, -3, -18, 3, -16, 18, -14, 10, 20, 46, 5, -21, -22, -5, -9, -53, -20, 23, -47, 14, -3, 17, -82, 14, 48, -35, -12, -32, -11
    0xf8151412, 0xf003eefd, 0x140af212, 0xeaeb052e, 0xeccbf7fb, 0xfd0ed117, 0x300eae11, 0xf5e0f4dd,
    // 12, 6, -19, 32, 19, -23, 4, 5, 4, -9, 78, 81, -10, 19, -15, -17, -93, 85, -24, 30, 18, 76, 10, -32, 67, -12, 24, -20, 36, 81, 82, -40
    0x20ed060c, 0x504e913, 0x514ef704, 0xeff113f6, 0x1ee855a3, 0xe00a4c12, 0xec18f443, 0xd8525124,
    // 6, 5, 2, -2, 0, -12, 9, -8, -6, -3, -1, -3, -6, 89, 3, 12, 2, -17, -4, 4, 0, 17, 1, 33, -3, -12, -14, 8, 39, 35, 6, -9
    0xfe020506, 0xf809f400, 0xfdfffdfa, 0xc0359fa, 0x4fcef02, 0x21011100, 0x8f2f4fd, 0xf7062327,
    // 5, -29, -23, 16, -2, 4, -3, -17, 0, -18, 15, -22, 56, -23, -5, -1, 6, -24, -41, 6, 3, 16, -26, 27, 7, 3, 0, -15, 47, 9, -15, -26
    0x10e9e305, 0xeffd04fe, 0xea0fee00, 0xfffbe938, 0x6d7e806, 0x1be61003, 0xf1000307, 0xe6f1092f,
};
static const uint embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias_dwords[4] = {
    // -0.008255, -0.4714, -0.4429, 0.2605, -0.01452, 0.1313, 0.07275, -0.06775
    0xb78ba03a, 0x342bb716, 0x3034a36f, 0xac562ca8,
};

[numthreads(8, 8, 1)]
void fsr4_model_v07_i8_pass13(
    uint3 ml2c_dispatchThreadId : SV_DispatchThreadID,
    uint3 ml2c_groupId : SV_GroupID,
    uint3 ml2c_groupThreadId : SV_GroupThreadID
)
{
    const uint3 ml2c_numThreads = uint3(8, 8, 1);
    
    const RWBufferStorage storage_fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = { ScratchBuffer };
    const QuantizedTensor3i8_NHWC< RWBufferStorage > fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 = {
        uint3(1920, 1080, 16), // logicalSize
        uint3(0, 0, 0), // threadGroupSliceStart
        uint3(1920, 1080, 16), // threadGroupSliceSize
        uint3(1920, 1080, 16), // storageSize
        uint3(16, 30720, 1), // storageByteStrides
        uint3(0, 0, 0), // paddingBegin
        uint3(0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.027212543413043022, storage_fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<576> storage_embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<576> > embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(3, 3, 16, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(3, 3, 16, 16), // threadGroupSliceSize
        uint4(3, 3, 16, 16), // storageSize
        uint4(16, 48, 1, 144), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.007758367341011763, storage_embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_2_body_conv_dw_bias = { embedded_decoder2_ResidualBlock_2_body_conv_dw_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_2_body_conv_dw_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_2_body_conv_dw_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 16, 32), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 16, 32), // threadGroupSliceSize
        uint4(1, 1, 16, 32), // storageSize
        uint4(16, 16, 1, 16), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.007638806011527777, storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<16> storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias = { embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias_dwords };
    const Tensor1h< ConstantBufferStorage<16> > embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias = {
        32, // logicalSize
        0, // threadGroupSliceStart
        32, // threadGroupSliceSize
        32, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias };
    
    const ConstantBufferStorage<128> storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_NHWC< ConstantBufferStorage<128> > embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(1, 1, 32, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(1, 1, 32, 16), // threadGroupSliceSize
        uint4(1, 1, 32, 16), // storageSize
        uint4(32, 32, 1, 32), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.007655854802578688, storage_embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<8> storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias = { embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias_dwords };
    const Tensor1h< ConstantBufferStorage<8> > embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias = {
        16, // logicalSize
        0, // threadGroupSliceStart
        16, // threadGroupSliceSize
        16, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias };
    
    const ConstantBufferStorage<128> storage_embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = { embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0_dwords };
    const QuantizedTensor4i8_HWCN< ConstantBufferStorage<128> > embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 = {
        uint4(2, 2, 8, 16), // logicalSize
        uint4(0, 0, 0, 0), // threadGroupSliceStart
        uint4(2, 2, 8, 16), // threadGroupSliceSize
        uint4(2, 2, 8, 16), // storageSize
        uint4(128, 256, 16, 1), // storageByteStrides
        uint4(0, 0, 0, 0), // paddingBegin
        uint4(0, 0, 0, 0), // paddingEnd
        0, // threadGroupStorageByteOffset
        0.0075285835191607475, storage_embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0 };
    
    const ConstantBufferStorage<4> storage_embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias = { embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias_dwords };
    const Tensor1h< ConstantBufferStorage<4> > embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias = {
        8, // logicalSize
        0, // threadGroupSliceStart
        8, // threadGroupSliceSize
        8, // storageSize
        2, // storageByteStrides
        0, // paddingBegin
        0, // paddingEnd
        0, // threadGroupStorageByteOffset
        storage_embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias };
    
    // fused_quantized_NHWC_output
    const uint3 logicalSize_fused_quantized_NHWC_output = uint3(3840, 2160, 8);
    const int3 groupStart_fused_quantized_NHWC_output = int3(0, 0, 0) + ml2c_groupId.xyz * int3(16, 16, 8);
    const uint3 groupSize_fused_quantized_NHWC_output = uint3(16, 16, 8);
    const uint3 storageSize_fused_quantized_NHWC_output = uint3(3840, 2160, 8);
    const uint3 tensorByteStrides_fused_quantized_NHWC_output = uint3(16, 61440, 2);
    const uint3 paddingBegin_fused_quantized_NHWC_output = uint3(0, 0, 0);
    const uint3 paddingEnd_fused_quantized_NHWC_output = uint3(0, 0, 0);
    const int threadGroupByteOffsetInTensor_fused_quantized_NHWC_output = dot(groupStart_fused_quantized_NHWC_output, tensorByteStrides_fused_quantized_NHWC_output);
    const RWBufferStorage storage_fused_quantized_NHWC_output = { buffer_fused_quantized_NHWC_output };
    const Tensor3h_NHWC<RWBufferStorage> fused_quantized_NHWC_output = { logicalSize_fused_quantized_NHWC_output, groupStart_fused_quantized_NHWC_output, groupSize_fused_quantized_NHWC_output, storageSize_fused_quantized_NHWC_output, tensorByteStrides_fused_quantized_NHWC_output, paddingBegin_fused_quantized_NHWC_output, paddingEnd_fused_quantized_NHWC_output, threadGroupByteOffsetInTensor_fused_quantized_NHWC_output + 0, storage_fused_quantized_NHWC_output };
    // FusedConvNextBlock_quantized_/decoder2/UpscaleConvTranspose2x2/upscale_conv/ConvTranspose (16, 1080, 1920), (16, 16, 3, 3), (16,), (32, 16, 1, 1), (32,), (16, 32, 1, 1), (16,), (16, 8, 2, 2), (8,) -> (8, 2160, 3840)
    ComputeShaderParams computeShaderParams = {ml2c_numThreads, ml2c_groupId, ml2c_groupThreadId, ml2c_dispatchThreadId};
    CNB_CT2D<8>(15.887411717845113, 0.06294291466474533, 19.408839992720477, 0.051522914320230484, 0.10234150290489197, fused_quantized_NHWC__decoder2_ResidualBlock_2_body_input_quantization_act_quant_export_handler_QuantizeLinear_output_0, embedded__decoder2_ResidualBlock_2_body_conv_dw_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_2_body_conv_dw_bias, embedded__decoder2_ResidualBlock_2_body_conv_pw_expand_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_2_body_conv_pw_expand_bias, embedded__decoder2_ResidualBlock_2_body_conv_pw_contract_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_ResidualBlock_2_body_conv_pw_contract_bias, embedded_hwcn__decoder2_UpscaleConvTranspose2x2_upscale_conv_weight_quant_export_handler_QuantizeLinear_output_0, embedded_decoder2_UpscaleConvTranspose2x2_upscale_conv_bias, fused_quantized_NHWC_output, computeShaderParams);
    
}
#endif // #ifdef MLSR_PASS_13


